
stm32-maze-solver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b838  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800b9c0  0800b9c0  0000c9c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b9e4  0800b9e4  0000d090  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b9e4  0800b9e4  0000c9e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b9ec  0800b9ec  0000d090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b9ec  0800b9ec  0000c9ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b9f0  0800b9f0  0000c9f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  0800b9f4  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d090  2**0
                  CONTENTS
 10 .bss          00000d3c  20000090  20000090  0000d090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000dcc  20000dcc  0000d090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d03f  00000000  00000000  0000d0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004b38  00000000  00000000  0002a0ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019b0  00000000  00000000  0002ec38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013ca  00000000  00000000  000305e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026bf3  00000000  00000000  000319b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022872  00000000  00000000  000585a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e16ea  00000000  00000000  0007ae17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015c501  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006f08  00000000  00000000  0015c544  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  0016344c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800b9a8 	.word	0x0800b9a8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	0800b9a8 	.word	0x0800b9a8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <antirebote>:
/**
 * @brief Función genérica de antirebote para cualquier pin GPIO
 * @ingroup ANTIREBOTE
 */
bool antirebote(GPIO_TypeDef *puerto, uint16_t pin)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	460b      	mov	r3, r1
 80004fe:	807b      	strh	r3, [r7, #2]
        ultimas_lecturas[16]; // Para hasta 16 pines distintos uso un array, god
    static uint8_t inicializado[16] = {
        0}; // se inicializan en cero solo la 1era vez que llamas la funcion

    // Calcular el índice del pin a partir de la máscara (posición del bit)
    uint8_t index = 0;
 8000500:	2300      	movs	r3, #0
 8000502:	73fb      	strb	r3, [r7, #15]
    uint16_t mask = pin;
 8000504:	887b      	ldrh	r3, [r7, #2]
 8000506:	81bb      	strh	r3, [r7, #12]
    while (mask > 1)
 8000508:	e005      	b.n	8000516 <antirebote+0x22>
    {
        mask >>= 1; // Desplazar a la derecha el bit
 800050a:	89bb      	ldrh	r3, [r7, #12]
 800050c:	085b      	lsrs	r3, r3, #1
 800050e:	81bb      	strh	r3, [r7, #12]
        index++;    // Contar cuántos desplazamientos hicimos
 8000510:	7bfb      	ldrb	r3, [r7, #15]
 8000512:	3301      	adds	r3, #1
 8000514:	73fb      	strb	r3, [r7, #15]
    while (mask > 1)
 8000516:	89bb      	ldrh	r3, [r7, #12]
 8000518:	2b01      	cmp	r3, #1
 800051a:	d8f6      	bhi.n	800050a <antirebote+0x16>
    }

    GPIO_PinState lectura1, lectura2;
    bool pulsado = false;
 800051c:	2300      	movs	r3, #0
 800051e:	72fb      	strb	r3, [r7, #11]

    // Leer el estado actual del pin
    lectura1 =
        HAL_GPIO_ReadPin(puerto, pin); //  xq puerto es el puntero al pueertooo
 8000520:	887b      	ldrh	r3, [r7, #2]
 8000522:	4619      	mov	r1, r3
 8000524:	6878      	ldr	r0, [r7, #4]
 8000526:	f002 ffb1 	bl	800348c <HAL_GPIO_ReadPin>
 800052a:	4603      	mov	r3, r0
 800052c:	72bb      	strb	r3, [r7, #10]

    // Si no se había inicializado antes, guardar lectura inicial y salir
    if (!inicializado[index])
 800052e:	7bfb      	ldrb	r3, [r7, #15]
 8000530:	4a17      	ldr	r2, [pc, #92]	@ (8000590 <antirebote+0x9c>)
 8000532:	5cd3      	ldrb	r3, [r2, r3]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d109      	bne.n	800054c <antirebote+0x58>
    { // se ejecuta solo la primera vez que se llama a
      // la función para ese pin.
        ultimas_lecturas[index] = lectura1;
 8000538:	7bfb      	ldrb	r3, [r7, #15]
 800053a:	4916      	ldr	r1, [pc, #88]	@ (8000594 <antirebote+0xa0>)
 800053c:	7aba      	ldrb	r2, [r7, #10]
 800053e:	54ca      	strb	r2, [r1, r3]
        inicializado[index] = 1;
 8000540:	7bfb      	ldrb	r3, [r7, #15]
 8000542:	4a13      	ldr	r2, [pc, #76]	@ (8000590 <antirebote+0x9c>)
 8000544:	2101      	movs	r1, #1
 8000546:	54d1      	strb	r1, [r2, r3]
        return false;
 8000548:	2300      	movs	r3, #0
 800054a:	e01d      	b.n	8000588 <antirebote+0x94>
    }

    // Si detectamos un cambio respecto a la última lectura válida
    if (lectura1 != ultimas_lecturas[index])
 800054c:	7bfb      	ldrb	r3, [r7, #15]
 800054e:	4a11      	ldr	r2, [pc, #68]	@ (8000594 <antirebote+0xa0>)
 8000550:	5cd3      	ldrb	r3, [r2, r3]
 8000552:	7aba      	ldrb	r2, [r7, #10]
 8000554:	429a      	cmp	r2, r3
 8000556:	d016      	beq.n	8000586 <antirebote+0x92>
    {
        HAL_Delay(TREBOTES); // Esperar para filtrar rebotes
 8000558:	2032      	movs	r0, #50	@ 0x32
 800055a:	f001 fd21 	bl	8001fa0 <HAL_Delay>

        // Leer el pin otra vez para confirmar que la lectura es estable
        lectura2 = HAL_GPIO_ReadPin(puerto, pin);
 800055e:	887b      	ldrh	r3, [r7, #2]
 8000560:	4619      	mov	r1, r3
 8000562:	6878      	ldr	r0, [r7, #4]
 8000564:	f002 ff92 	bl	800348c <HAL_GPIO_ReadPin>
 8000568:	4603      	mov	r3, r0
 800056a:	727b      	strb	r3, [r7, #9]

        // Si la segunda lectura coincide con la primera, es válida
        if (lectura1 == lectura2)
 800056c:	7aba      	ldrb	r2, [r7, #10]
 800056e:	7a7b      	ldrb	r3, [r7, #9]
 8000570:	429a      	cmp	r2, r3
 8000572:	d108      	bne.n	8000586 <antirebote+0x92>
        {
            ultimas_lecturas[index] = lectura2; // Guardar lectura válida
 8000574:	7bfb      	ldrb	r3, [r7, #15]
 8000576:	4907      	ldr	r1, [pc, #28]	@ (8000594 <antirebote+0xa0>)
 8000578:	7a7a      	ldrb	r2, [r7, #9]
 800057a:	54ca      	strb	r2, [r1, r3]

            // Detectar si el botón fue presionado (activo en bajo)
            if (lectura2 == GPIO_PIN_RESET)
 800057c:	7a7b      	ldrb	r3, [r7, #9]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d101      	bne.n	8000586 <antirebote+0x92>
            {
                pulsado = true;
 8000582:	2301      	movs	r3, #1
 8000584:	72fb      	strb	r3, [r7, #11]
            }
        }
    }

    return pulsado;
 8000586:	7afb      	ldrb	r3, [r7, #11]
 8000588:	4618      	mov	r0, r3
 800058a:	3710      	adds	r7, #16
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	200000ac 	.word	0x200000ac
 8000594:	200000bc 	.word	0x200000bc

08000598 <HAL_ADC_ConvHalfCpltCallback>:

bool calibrado = false;

// Interrupciones DMA
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
    promediar_sensores(&dma_buffer[0]);
 80005a0:	4803      	ldr	r0, [pc, #12]	@ (80005b0 <HAL_ADC_ConvHalfCpltCallback+0x18>)
 80005a2:	f000 f815 	bl	80005d0 <promediar_sensores>
}
 80005a6:	bf00      	nop
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	2000032c 	.word	0x2000032c

080005b4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
    promediar_sensores(&dma_buffer[BUFFER_MINIMO]);
 80005bc:	4803      	ldr	r0, [pc, #12]	@ (80005cc <HAL_ADC_ConvCpltCallback+0x18>)
 80005be:	f000 f807 	bl	80005d0 <promediar_sensores>
}
 80005c2:	bf00      	nop
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	200003f4 	.word	0x200003f4

080005d0 <promediar_sensores>:

// Función promediar se ejecuta constantemente en DMA
void promediar_sensores(uint16_t *buffer)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b087      	sub	sp, #28
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
    uint32_t izq_sum = 0, der_sum = 0;
 80005d8:	2300      	movs	r3, #0
 80005da:	617b      	str	r3, [r7, #20]
 80005dc:	2300      	movs	r3, #0
 80005de:	613b      	str	r3, [r7, #16]

    // Canal 8 (derecho), Canal 9 (izquierdo)
    for (int i = 0; i < MUESTRAS; ++i)
 80005e0:	2300      	movs	r3, #0
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	e012      	b.n	800060c <promediar_sensores+0x3c>
    {
        der_sum += buffer[0]; // Canal 8 (PB0)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	881b      	ldrh	r3, [r3, #0]
 80005ea:	461a      	mov	r2, r3
 80005ec:	693b      	ldr	r3, [r7, #16]
 80005ee:	4413      	add	r3, r2
 80005f0:	613b      	str	r3, [r7, #16]
        izq_sum += buffer[1]; // Canal 9 (PB1)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	3302      	adds	r3, #2
 80005f6:	881b      	ldrh	r3, [r3, #0]
 80005f8:	461a      	mov	r2, r3
 80005fa:	697b      	ldr	r3, [r7, #20]
 80005fc:	4413      	add	r3, r2
 80005fe:	617b      	str	r3, [r7, #20]
        buffer += 2;          // Avanza 2 posiciones
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	3304      	adds	r3, #4
 8000604:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < MUESTRAS; ++i)
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	3301      	adds	r3, #1
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	2b31      	cmp	r3, #49	@ 0x31
 8000610:	dde9      	ble.n	80005e6 <promediar_sensores+0x16>
    }

    sensor_der_avg = der_sum / MUESTRAS;
 8000612:	693b      	ldr	r3, [r7, #16]
 8000614:	4a0a      	ldr	r2, [pc, #40]	@ (8000640 <promediar_sensores+0x70>)
 8000616:	fba2 2303 	umull	r2, r3, r2, r3
 800061a:	091b      	lsrs	r3, r3, #4
 800061c:	b29a      	uxth	r2, r3
 800061e:	4b09      	ldr	r3, [pc, #36]	@ (8000644 <promediar_sensores+0x74>)
 8000620:	801a      	strh	r2, [r3, #0]
    sensor_izq_avg = izq_sum / MUESTRAS;
 8000622:	697b      	ldr	r3, [r7, #20]
 8000624:	4a06      	ldr	r2, [pc, #24]	@ (8000640 <promediar_sensores+0x70>)
 8000626:	fba2 2303 	umull	r2, r3, r2, r3
 800062a:	091b      	lsrs	r3, r3, #4
 800062c:	b29a      	uxth	r2, r3
 800062e:	4b06      	ldr	r3, [pc, #24]	@ (8000648 <promediar_sensores+0x78>)
 8000630:	801a      	strh	r2, [r3, #0]
}
 8000632:	bf00      	nop
 8000634:	371c      	adds	r7, #28
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	51eb851f 	.word	0x51eb851f
 8000644:	200000ce 	.word	0x200000ce
 8000648:	200000cc 	.word	0x200000cc

0800064c <auto_calibracion>:

// Auto-calibración
void auto_calibracion(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
    HAL_Delay(1000);
 8000650:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000654:	f001 fca4 	bl	8001fa0 <HAL_Delay>

    // Medición 1: CERCA DE PARED DERECHA
    HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET); // Naranja
 8000658:	2201      	movs	r2, #1
 800065a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800065e:	4835      	ldr	r0, [pc, #212]	@ (8000734 <auto_calibracion+0xe8>)
 8000660:	f002 ff2c 	bl	80034bc <HAL_GPIO_WritePin>
    HAL_Delay(3000);                                         // Tiempo para posicionar cerca de pared derecha
 8000664:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000668:	f001 fc9a 	bl	8001fa0 <HAL_Delay>

    der_cerca = sensor_der_avg;
 800066c:	4b32      	ldr	r3, [pc, #200]	@ (8000738 <auto_calibracion+0xec>)
 800066e:	881a      	ldrh	r2, [r3, #0]
 8000670:	4b32      	ldr	r3, [pc, #200]	@ (800073c <auto_calibracion+0xf0>)
 8000672:	801a      	strh	r2, [r3, #0]

    // Medición 2: CERCA DE PARED IZQUIERDA
    HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000674:	2200      	movs	r2, #0
 8000676:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800067a:	482e      	ldr	r0, [pc, #184]	@ (8000734 <auto_calibracion+0xe8>)
 800067c:	f002 ff1e 	bl	80034bc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET); // Rojo
 8000680:	2201      	movs	r2, #1
 8000682:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000686:	482b      	ldr	r0, [pc, #172]	@ (8000734 <auto_calibracion+0xe8>)
 8000688:	f002 ff18 	bl	80034bc <HAL_GPIO_WritePin>
    HAL_Delay(3000);                                         // Tiempo para posicionar cerca de pared izquierda
 800068c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000690:	f001 fc86 	bl	8001fa0 <HAL_Delay>

    izq_cerca = sensor_izq_avg;
 8000694:	4b2a      	ldr	r3, [pc, #168]	@ (8000740 <auto_calibracion+0xf4>)
 8000696:	881a      	ldrh	r2, [r3, #0]
 8000698:	4b2a      	ldr	r3, [pc, #168]	@ (8000744 <auto_calibracion+0xf8>)
 800069a:	801a      	strh	r2, [r3, #0]

    // Medición 3: CENTRADO EN PASILLO
    HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 800069c:	2200      	movs	r2, #0
 800069e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006a2:	4824      	ldr	r0, [pc, #144]	@ (8000734 <auto_calibracion+0xe8>)
 80006a4:	f002 ff0a 	bl	80034bc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_SET); // Azul
 80006a8:	2201      	movs	r2, #1
 80006aa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80006ae:	4821      	ldr	r0, [pc, #132]	@ (8000734 <auto_calibracion+0xe8>)
 80006b0:	f002 ff04 	bl	80034bc <HAL_GPIO_WritePin>
    HAL_Delay(3000);                                         // Tiempo para centrar
 80006b4:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80006b8:	f001 fc72 	bl	8001fa0 <HAL_Delay>

    izq_lejos = sensor_izq_avg;
 80006bc:	4b20      	ldr	r3, [pc, #128]	@ (8000740 <auto_calibracion+0xf4>)
 80006be:	881a      	ldrh	r2, [r3, #0]
 80006c0:	4b21      	ldr	r3, [pc, #132]	@ (8000748 <auto_calibracion+0xfc>)
 80006c2:	801a      	strh	r2, [r3, #0]
    der_lejos = sensor_der_avg;
 80006c4:	4b1c      	ldr	r3, [pc, #112]	@ (8000738 <auto_calibracion+0xec>)
 80006c6:	881a      	ldrh	r2, [r3, #0]
 80006c8:	4b20      	ldr	r3, [pc, #128]	@ (800074c <auto_calibracion+0x100>)
 80006ca:	801a      	strh	r2, [r3, #0]

    // Calcular valores medios
    izq_centrado = (izq_cerca + izq_lejos) / 2;
 80006cc:	4b1d      	ldr	r3, [pc, #116]	@ (8000744 <auto_calibracion+0xf8>)
 80006ce:	881b      	ldrh	r3, [r3, #0]
 80006d0:	461a      	mov	r2, r3
 80006d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000748 <auto_calibracion+0xfc>)
 80006d4:	881b      	ldrh	r3, [r3, #0]
 80006d6:	4413      	add	r3, r2
 80006d8:	0fda      	lsrs	r2, r3, #31
 80006da:	4413      	add	r3, r2
 80006dc:	105b      	asrs	r3, r3, #1
 80006de:	b29a      	uxth	r2, r3
 80006e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000750 <auto_calibracion+0x104>)
 80006e2:	801a      	strh	r2, [r3, #0]
    der_centrado = (der_cerca + der_lejos) / 2;
 80006e4:	4b15      	ldr	r3, [pc, #84]	@ (800073c <auto_calibracion+0xf0>)
 80006e6:	881b      	ldrh	r3, [r3, #0]
 80006e8:	461a      	mov	r2, r3
 80006ea:	4b18      	ldr	r3, [pc, #96]	@ (800074c <auto_calibracion+0x100>)
 80006ec:	881b      	ldrh	r3, [r3, #0]
 80006ee:	4413      	add	r3, r2
 80006f0:	0fda      	lsrs	r2, r3, #31
 80006f2:	4413      	add	r3, r2
 80006f4:	105b      	asrs	r3, r3, #1
 80006f6:	b29a      	uxth	r2, r3
 80006f8:	4b16      	ldr	r3, [pc, #88]	@ (8000754 <auto_calibracion+0x108>)
 80006fa:	801a      	strh	r2, [r3, #0]

    // Calibración completa
    HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 80006fc:	2200      	movs	r2, #0
 80006fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000702:	480c      	ldr	r0, [pc, #48]	@ (8000734 <auto_calibracion+0xe8>)
 8000704:	f002 feda 	bl	80034bc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET); // Verde
 8000708:	2201      	movs	r2, #1
 800070a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800070e:	4809      	ldr	r0, [pc, #36]	@ (8000734 <auto_calibracion+0xe8>)
 8000710:	f002 fed4 	bl	80034bc <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8000714:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000718:	f001 fc42 	bl	8001fa0 <HAL_Delay>
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800071c:	2200      	movs	r2, #0
 800071e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000722:	4804      	ldr	r0, [pc, #16]	@ (8000734 <auto_calibracion+0xe8>)
 8000724:	f002 feca 	bl	80034bc <HAL_GPIO_WritePin>

    calibrado = true;
 8000728:	4b0b      	ldr	r3, [pc, #44]	@ (8000758 <auto_calibracion+0x10c>)
 800072a:	2201      	movs	r2, #1
 800072c:	701a      	strb	r2, [r3, #0]
}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	40020c00 	.word	0x40020c00
 8000738:	200000ce 	.word	0x200000ce
 800073c:	20000006 	.word	0x20000006
 8000740:	200000cc 	.word	0x200000cc
 8000744:	20000000 	.word	0x20000000
 8000748:	20000002 	.word	0x20000002
 800074c:	20000008 	.word	0x20000008
 8000750:	20000004 	.word	0x20000004
 8000754:	2000000a 	.word	0x2000000a
 8000758:	200000d0 	.word	0x200000d0

0800075c <controlar_linea_recta>:

// Control de línea recta
void controlar_linea_recta(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
    if (!calibrado)
 8000762:	4b28      	ldr	r3, [pc, #160]	@ (8000804 <controlar_linea_recta+0xa8>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	f083 0301 	eor.w	r3, r3, #1
 800076a:	b2db      	uxtb	r3, r3
 800076c:	2b00      	cmp	r3, #0
 800076e:	d13e      	bne.n	80007ee <controlar_linea_recta+0x92>
        return;

    // Verificar flags AL INICIO
    if (flag_linea_detectada || flag_muro_detectado)
 8000770:	4b25      	ldr	r3, [pc, #148]	@ (8000808 <controlar_linea_recta+0xac>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	b2db      	uxtb	r3, r3
 8000776:	2b00      	cmp	r3, #0
 8000778:	d13b      	bne.n	80007f2 <controlar_linea_recta+0x96>
 800077a:	4b24      	ldr	r3, [pc, #144]	@ (800080c <controlar_linea_recta+0xb0>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	b2db      	uxtb	r3, r3
 8000780:	2b00      	cmp	r3, #0
 8000782:	d136      	bne.n	80007f2 <controlar_linea_recta+0x96>
        return;

    // Determinar posición relativa
    bool muy_cerca_izq = (sensor_izq_avg < izq_cerca);
 8000784:	4b22      	ldr	r3, [pc, #136]	@ (8000810 <controlar_linea_recta+0xb4>)
 8000786:	881a      	ldrh	r2, [r3, #0]
 8000788:	4b22      	ldr	r3, [pc, #136]	@ (8000814 <controlar_linea_recta+0xb8>)
 800078a:	881b      	ldrh	r3, [r3, #0]
 800078c:	429a      	cmp	r2, r3
 800078e:	bf34      	ite	cc
 8000790:	2301      	movcc	r3, #1
 8000792:	2300      	movcs	r3, #0
 8000794:	71fb      	strb	r3, [r7, #7]
    bool muy_cerca_der = (sensor_der_avg < der_cerca);
 8000796:	4b20      	ldr	r3, [pc, #128]	@ (8000818 <controlar_linea_recta+0xbc>)
 8000798:	881a      	ldrh	r2, [r3, #0]
 800079a:	4b20      	ldr	r3, [pc, #128]	@ (800081c <controlar_linea_recta+0xc0>)
 800079c:	881b      	ldrh	r3, [r3, #0]
 800079e:	429a      	cmp	r2, r3
 80007a0:	bf34      	ite	cc
 80007a2:	2301      	movcc	r3, #1
 80007a4:	2300      	movcs	r3, #0
 80007a6:	71bb      	strb	r3, [r7, #6]

    if (muy_cerca_izq)
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d00c      	beq.n	80007c8 <controlar_linea_recta+0x6c>
    {
        // Verificar flags durante ejecución
        if (flag_linea_detectada || flag_muro_detectado)
 80007ae:	4b16      	ldr	r3, [pc, #88]	@ (8000808 <controlar_linea_recta+0xac>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d11e      	bne.n	80007f6 <controlar_linea_recta+0x9a>
 80007b8:	4b14      	ldr	r3, [pc, #80]	@ (800080c <controlar_linea_recta+0xb0>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d119      	bne.n	80007f6 <controlar_linea_recta+0x9a>
        {
            return;
        }
        correccion_derecha(); // Alejarse de pared izquierda
 80007c2:	f000 f9a5 	bl	8000b10 <correccion_derecha>
 80007c6:	e019      	b.n	80007fc <controlar_linea_recta+0xa0>
    }
    else if (muy_cerca_der)
 80007c8:	79bb      	ldrb	r3, [r7, #6]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d00c      	beq.n	80007e8 <controlar_linea_recta+0x8c>
    {
        // Verificar flags durante ejecución
        if (flag_linea_detectada || flag_muro_detectado)
 80007ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000808 <controlar_linea_recta+0xac>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d110      	bne.n	80007fa <controlar_linea_recta+0x9e>
 80007d8:	4b0c      	ldr	r3, [pc, #48]	@ (800080c <controlar_linea_recta+0xb0>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d10b      	bne.n	80007fa <controlar_linea_recta+0x9e>
        {
            return;
        }
        correccion_izquierda(); // Alejarse de pared derecha
 80007e2:	f000 f983 	bl	8000aec <correccion_izquierda>
 80007e6:	e009      	b.n	80007fc <controlar_linea_recta+0xa0>
    }
    else
    {
        avanza(); // Ir recto si está centrado
 80007e8:	f000 f8c0 	bl	800096c <avanza>
 80007ec:	e006      	b.n	80007fc <controlar_linea_recta+0xa0>
        return;
 80007ee:	bf00      	nop
 80007f0:	e004      	b.n	80007fc <controlar_linea_recta+0xa0>
        return;
 80007f2:	bf00      	nop
 80007f4:	e002      	b.n	80007fc <controlar_linea_recta+0xa0>
            return;
 80007f6:	bf00      	nop
 80007f8:	e000      	b.n	80007fc <controlar_linea_recta+0xa0>
            return;
 80007fa:	bf00      	nop
    }
}
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	200000d0 	.word	0x200000d0
 8000808:	200004bc 	.word	0x200004bc
 800080c:	200004bd 	.word	0x200004bd
 8000810:	200000cc 	.word	0x200000cc
 8000814:	20000000 	.word	0x20000000
 8000818:	200000ce 	.word	0x200000ce
 800081c:	20000006 	.word	0x20000006

08000820 <activar_modo_sprint>:
extern volatile bool flag_muro_detectado;  // flag muro

uint16_t VELOCIDAD_AVANCE = VELOCIDAD_EXPLORACION; // Inicializa en modo lento

void activar_modo_sprint(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
    VELOCIDAD_AVANCE = VELOCIDAD_SPRINT;
 8000824:	4b04      	ldr	r3, [pc, #16]	@ (8000838 <activar_modo_sprint+0x18>)
 8000826:	f44f 7261 	mov.w	r2, #900	@ 0x384
 800082a:	801a      	strh	r2, [r3, #0]
}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	2000000c 	.word	0x2000000c

0800083c <control_motor_init>:

/**
 * @brief Inicializa el control de motores
 */
void control_motor_init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
    // Iniciar PWM en ambos canales
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // Motor izquierdo (PC8)
 8000840:	2108      	movs	r1, #8
 8000842:	4805      	ldr	r0, [pc, #20]	@ (8000858 <control_motor_init+0x1c>)
 8000844:	f006 fc7c 	bl	8007140 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // Motor derecho (PC9)
 8000848:	210c      	movs	r1, #12
 800084a:	4803      	ldr	r0, [pc, #12]	@ (8000858 <control_motor_init+0x1c>)
 800084c:	f006 fc78 	bl	8007140 <HAL_TIM_PWM_Start>

    // comienza yendo para adelante
    avanza();
 8000850:	f000 f88c 	bl	800096c <avanza>
}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	200002e0 	.word	0x200002e0

0800085c <set_motor_izq>:
 * @brief Configura motor izquierdo
 * @param estado: MOTOR_AVANCE, MOTOR_RETROCESO o MOTOR_FRENADO
 * @param pwm: Valor PWM (0-1000)
 */
void set_motor_izq(motor_estado_t estado, uint16_t pwm)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	460a      	mov	r2, r1
 8000866:	71fb      	strb	r3, [r7, #7]
 8000868:	4613      	mov	r3, r2
 800086a:	80bb      	strh	r3, [r7, #4]
    switch (estado)
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d002      	beq.n	8000878 <set_motor_izq+0x1c>
 8000872:	2b01      	cmp	r3, #1
 8000874:	d00d      	beq.n	8000892 <set_motor_izq+0x36>
 8000876:	e019      	b.n	80008ac <set_motor_izq+0x50>
    {
    case MOTOR_AVANCE:
        HAL_GPIO_WritePin(MI0_GPIO_Port, MI0_Pin, GPIO_PIN_SET);   // MI0 = 1
 8000878:	2201      	movs	r2, #1
 800087a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800087e:	4817      	ldr	r0, [pc, #92]	@ (80008dc <set_motor_izq+0x80>)
 8000880:	f002 fe1c 	bl	80034bc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MI1_GPIO_Port, MI1_Pin, GPIO_PIN_RESET); // MI1 = 0
 8000884:	2200      	movs	r2, #0
 8000886:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800088a:	4814      	ldr	r0, [pc, #80]	@ (80008dc <set_motor_izq+0x80>)
 800088c:	f002 fe16 	bl	80034bc <HAL_GPIO_WritePin>
        break;
 8000890:	e01b      	b.n	80008ca <set_motor_izq+0x6e>

    case MOTOR_RETROCESO:
        HAL_GPIO_WritePin(MI0_GPIO_Port, MI0_Pin, GPIO_PIN_RESET); // MI0 = 0
 8000892:	2200      	movs	r2, #0
 8000894:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000898:	4810      	ldr	r0, [pc, #64]	@ (80008dc <set_motor_izq+0x80>)
 800089a:	f002 fe0f 	bl	80034bc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MI1_GPIO_Port, MI1_Pin, GPIO_PIN_SET);   // MI1 = 1
 800089e:	2201      	movs	r2, #1
 80008a0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008a4:	480d      	ldr	r0, [pc, #52]	@ (80008dc <set_motor_izq+0x80>)
 80008a6:	f002 fe09 	bl	80034bc <HAL_GPIO_WritePin>
        break;
 80008aa:	e00e      	b.n	80008ca <set_motor_izq+0x6e>

    case MOTOR_FRENADO:
    default:
        HAL_GPIO_WritePin(MI0_GPIO_Port, MI0_Pin, GPIO_PIN_RESET); // MI0 = 0
 80008ac:	2200      	movs	r2, #0
 80008ae:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80008b2:	480a      	ldr	r0, [pc, #40]	@ (80008dc <set_motor_izq+0x80>)
 80008b4:	f002 fe02 	bl	80034bc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MI1_GPIO_Port, MI1_Pin, GPIO_PIN_RESET); // MI1 = 0
 80008b8:	2200      	movs	r2, #0
 80008ba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008be:	4807      	ldr	r0, [pc, #28]	@ (80008dc <set_motor_izq+0x80>)
 80008c0:	f002 fdfc 	bl	80034bc <HAL_GPIO_WritePin>
        pwm = 0;                                                   // Forzar PWM a 0 en frenado
 80008c4:	2300      	movs	r3, #0
 80008c6:	80bb      	strh	r3, [r7, #4]
        break;
 80008c8:	bf00      	nop
    }

    // Establecer PWM, aca le definimos la velocidad
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pwm);
 80008ca:	4b05      	ldr	r3, [pc, #20]	@ (80008e0 <set_motor_izq+0x84>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	88ba      	ldrh	r2, [r7, #4]
 80008d0:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40020400 	.word	0x40020400
 80008e0:	200002e0 	.word	0x200002e0

080008e4 <set_motor_der>:
 * @brief Configura motor derecho
 * @param estado: MOTOR_AVANCE, MOTOR_RETROCESO o MOTOR_FRENADO
 * @param pwm: Valor PWM (0-1000)
 */
void set_motor_der(motor_estado_t estado, uint16_t pwm)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	460a      	mov	r2, r1
 80008ee:	71fb      	strb	r3, [r7, #7]
 80008f0:	4613      	mov	r3, r2
 80008f2:	80bb      	strh	r3, [r7, #4]
    switch (estado)
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d002      	beq.n	8000900 <set_motor_der+0x1c>
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d00d      	beq.n	800091a <set_motor_der+0x36>
 80008fe:	e019      	b.n	8000934 <set_motor_der+0x50>
    {
    case MOTOR_AVANCE:
        HAL_GPIO_WritePin(MD0_GPIO_Port, MD0_Pin, GPIO_PIN_SET);   // MD0 = 1
 8000900:	2201      	movs	r2, #1
 8000902:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000906:	4817      	ldr	r0, [pc, #92]	@ (8000964 <set_motor_der+0x80>)
 8000908:	f002 fdd8 	bl	80034bc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MD1_GPIO_Port, MD1_Pin, GPIO_PIN_RESET); // MD1 = 0
 800090c:	2200      	movs	r2, #0
 800090e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000912:	4814      	ldr	r0, [pc, #80]	@ (8000964 <set_motor_der+0x80>)
 8000914:	f002 fdd2 	bl	80034bc <HAL_GPIO_WritePin>
        break;
 8000918:	e01b      	b.n	8000952 <set_motor_der+0x6e>

    case MOTOR_RETROCESO:
        HAL_GPIO_WritePin(MD0_GPIO_Port, MD0_Pin, GPIO_PIN_RESET); // MD0 = 0
 800091a:	2200      	movs	r2, #0
 800091c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000920:	4810      	ldr	r0, [pc, #64]	@ (8000964 <set_motor_der+0x80>)
 8000922:	f002 fdcb 	bl	80034bc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MD1_GPIO_Port, MD1_Pin, GPIO_PIN_SET);   // MD1 = 1
 8000926:	2201      	movs	r2, #1
 8000928:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800092c:	480d      	ldr	r0, [pc, #52]	@ (8000964 <set_motor_der+0x80>)
 800092e:	f002 fdc5 	bl	80034bc <HAL_GPIO_WritePin>
        break;
 8000932:	e00e      	b.n	8000952 <set_motor_der+0x6e>

    case MOTOR_FRENADO:
    default:
        HAL_GPIO_WritePin(MD0_GPIO_Port, MD0_Pin, GPIO_PIN_RESET); // MD0 = 0
 8000934:	2200      	movs	r2, #0
 8000936:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800093a:	480a      	ldr	r0, [pc, #40]	@ (8000964 <set_motor_der+0x80>)
 800093c:	f002 fdbe 	bl	80034bc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MD1_GPIO_Port, MD1_Pin, GPIO_PIN_RESET); // MD1 = 0
 8000940:	2200      	movs	r2, #0
 8000942:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000946:	4807      	ldr	r0, [pc, #28]	@ (8000964 <set_motor_der+0x80>)
 8000948:	f002 fdb8 	bl	80034bc <HAL_GPIO_WritePin>
        pwm = 0;                                                   // Forzar PWM a 0 en frenado
 800094c:	2300      	movs	r3, #0
 800094e:	80bb      	strh	r3, [r7, #4]
        break;
 8000950:	bf00      	nop
    }

    // Establecer VELOCIDAD
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, pwm);
 8000952:	4b05      	ldr	r3, [pc, #20]	@ (8000968 <set_motor_der+0x84>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	88ba      	ldrh	r2, [r7, #4]
 8000958:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40020400 	.word	0x40020400
 8000968:	200002e0 	.word	0x200002e0

0800096c <avanza>:

/**
 * @brief Avanza con ambos motores al 70% de velocidad
 */
void avanza(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
    set_motor_izq(MOTOR_AVANCE, VELOCIDAD_AVANCE);
 8000970:	4b06      	ldr	r3, [pc, #24]	@ (800098c <avanza+0x20>)
 8000972:	881b      	ldrh	r3, [r3, #0]
 8000974:	4619      	mov	r1, r3
 8000976:	2000      	movs	r0, #0
 8000978:	f7ff ff70 	bl	800085c <set_motor_izq>
    set_motor_der(MOTOR_AVANCE, VELOCIDAD_AVANCE);
 800097c:	4b03      	ldr	r3, [pc, #12]	@ (800098c <avanza+0x20>)
 800097e:	881b      	ldrh	r3, [r3, #0]
 8000980:	4619      	mov	r1, r3
 8000982:	2000      	movs	r0, #0
 8000984:	f7ff ffae 	bl	80008e4 <set_motor_der>
}
 8000988:	bf00      	nop
 800098a:	bd80      	pop	{r7, pc}
 800098c:	2000000c 	.word	0x2000000c

08000990 <gira90izq>:
/**
 * @brief Gira 90 grados a la izquierda y luego continúa avanzando
 * Motor izq retrocede, motor der avanza al 100%
 */
brujula gira90izq(brujula sentido)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
    set_motor_izq(MOTOR_RETROCESO, VELOCIDAD_GIRO);
 800099a:	f44f 712f 	mov.w	r1, #700	@ 0x2bc
 800099e:	2001      	movs	r0, #1
 80009a0:	f7ff ff5c 	bl	800085c <set_motor_izq>
    set_motor_der(MOTOR_AVANCE, VELOCIDAD_GIRO);
 80009a4:	f44f 712f 	mov.w	r1, #700	@ 0x2bc
 80009a8:	2000      	movs	r0, #0
 80009aa:	f7ff ff9b 	bl	80008e4 <set_motor_der>

    HAL_Delay(TIEMPO_GIRO_90);
 80009ae:	f44f 70be 	mov.w	r0, #380	@ 0x17c
 80009b2:	f001 faf5 	bl	8001fa0 <HAL_Delay>
    switch (sentido)
 80009b6:	79fb      	ldrb	r3, [r7, #7]
 80009b8:	2b03      	cmp	r3, #3
 80009ba:	d817      	bhi.n	80009ec <gira90izq+0x5c>
 80009bc:	a201      	add	r2, pc, #4	@ (adr r2, 80009c4 <gira90izq+0x34>)
 80009be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009c2:	bf00      	nop
 80009c4:	080009d5 	.word	0x080009d5
 80009c8:	080009db 	.word	0x080009db
 80009cc:	080009e1 	.word	0x080009e1
 80009d0:	080009e7 	.word	0x080009e7
    {
    case norte:
        sentido = oeste;
 80009d4:	2303      	movs	r3, #3
 80009d6:	71fb      	strb	r3, [r7, #7]
        break;
 80009d8:	e008      	b.n	80009ec <gira90izq+0x5c>

    case este:
        sentido = norte;
 80009da:	2300      	movs	r3, #0
 80009dc:	71fb      	strb	r3, [r7, #7]
        break;
 80009de:	e005      	b.n	80009ec <gira90izq+0x5c>

    case sur:
        sentido = este;
 80009e0:	2301      	movs	r3, #1
 80009e2:	71fb      	strb	r3, [r7, #7]
        break;
 80009e4:	e002      	b.n	80009ec <gira90izq+0x5c>

    case oeste:
        sentido = sur;
 80009e6:	2302      	movs	r3, #2
 80009e8:	71fb      	strb	r3, [r7, #7]
        break;
 80009ea:	bf00      	nop
    }

    // Después del giro, continuar avanzando
    avanza();
 80009ec:	f7ff ffbe 	bl	800096c <avanza>
    return sentido;
 80009f0:	79fb      	ldrb	r3, [r7, #7]
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop

080009fc <gira90der>:
/**
 * @brief Gira 90 grados a la derecha y luego continúa avanzando
 * Motor der retrocede, motor izq avanza al 100%
 */
brujula gira90der(brujula sentido)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	71fb      	strb	r3, [r7, #7]
    set_motor_izq(MOTOR_AVANCE, VELOCIDAD_GIRO);
 8000a06:	f44f 712f 	mov.w	r1, #700	@ 0x2bc
 8000a0a:	2000      	movs	r0, #0
 8000a0c:	f7ff ff26 	bl	800085c <set_motor_izq>
    set_motor_der(MOTOR_RETROCESO, VELOCIDAD_GIRO);
 8000a10:	f44f 712f 	mov.w	r1, #700	@ 0x2bc
 8000a14:	2001      	movs	r0, #1
 8000a16:	f7ff ff65 	bl	80008e4 <set_motor_der>

    HAL_Delay(TIEMPO_GIRO_90);
 8000a1a:	f44f 70be 	mov.w	r0, #380	@ 0x17c
 8000a1e:	f001 fabf 	bl	8001fa0 <HAL_Delay>
    switch (sentido)
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	2b03      	cmp	r3, #3
 8000a26:	d817      	bhi.n	8000a58 <gira90der+0x5c>
 8000a28:	a201      	add	r2, pc, #4	@ (adr r2, 8000a30 <gira90der+0x34>)
 8000a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a2e:	bf00      	nop
 8000a30:	08000a41 	.word	0x08000a41
 8000a34:	08000a47 	.word	0x08000a47
 8000a38:	08000a4d 	.word	0x08000a4d
 8000a3c:	08000a53 	.word	0x08000a53
    {
    case norte:
        sentido = este;
 8000a40:	2301      	movs	r3, #1
 8000a42:	71fb      	strb	r3, [r7, #7]
        break;
 8000a44:	e008      	b.n	8000a58 <gira90der+0x5c>

    case este:
        sentido = sur;
 8000a46:	2302      	movs	r3, #2
 8000a48:	71fb      	strb	r3, [r7, #7]
        break;
 8000a4a:	e005      	b.n	8000a58 <gira90der+0x5c>

    case sur:
        sentido = oeste;
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	71fb      	strb	r3, [r7, #7]
        break;
 8000a50:	e002      	b.n	8000a58 <gira90der+0x5c>

    case oeste:
        sentido = norte;
 8000a52:	2300      	movs	r3, #0
 8000a54:	71fb      	strb	r3, [r7, #7]
        break;
 8000a56:	bf00      	nop
    }

    // Después del giro, continuar avanzando
    avanza();
 8000a58:	f7ff ff88 	bl	800096c <avanza>
    return sentido;
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop

08000a68 <gira180>:
/**
 * @brief Gira 180 grados y luego continúa avanzando
 * Motor der retrocede, motor izq avanza al 100%
 */
brujula gira180(brujula sentido)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	71fb      	strb	r3, [r7, #7]
    set_motor_izq(MOTOR_AVANCE, VELOCIDAD_GIRO);
 8000a72:	f44f 712f 	mov.w	r1, #700	@ 0x2bc
 8000a76:	2000      	movs	r0, #0
 8000a78:	f7ff fef0 	bl	800085c <set_motor_izq>
    set_motor_der(MOTOR_RETROCESO, VELOCIDAD_GIRO);
 8000a7c:	f44f 712f 	mov.w	r1, #700	@ 0x2bc
 8000a80:	2001      	movs	r0, #1
 8000a82:	f7ff ff2f 	bl	80008e4 <set_motor_der>

    HAL_Delay(TIEMPO_GIRO_180);
 8000a86:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8000a8a:	f001 fa89 	bl	8001fa0 <HAL_Delay>
    switch (sentido)
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	2b03      	cmp	r3, #3
 8000a92:	d817      	bhi.n	8000ac4 <gira180+0x5c>
 8000a94:	a201      	add	r2, pc, #4	@ (adr r2, 8000a9c <gira180+0x34>)
 8000a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a9a:	bf00      	nop
 8000a9c:	08000aad 	.word	0x08000aad
 8000aa0:	08000ab3 	.word	0x08000ab3
 8000aa4:	08000ab9 	.word	0x08000ab9
 8000aa8:	08000abf 	.word	0x08000abf
    {
    case norte:
        sentido = sur;
 8000aac:	2302      	movs	r3, #2
 8000aae:	71fb      	strb	r3, [r7, #7]
        break;
 8000ab0:	e008      	b.n	8000ac4 <gira180+0x5c>

    case este:
        sentido = oeste;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	71fb      	strb	r3, [r7, #7]
        break;
 8000ab6:	e005      	b.n	8000ac4 <gira180+0x5c>

    case sur:
        sentido = norte;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	71fb      	strb	r3, [r7, #7]
        break;
 8000abc:	e002      	b.n	8000ac4 <gira180+0x5c>

    case oeste:
        sentido = este;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	71fb      	strb	r3, [r7, #7]
        break;
 8000ac2:	bf00      	nop
    }

    // Después del giro, continuar avanzando
    avanza();
 8000ac4:	f7ff ff52 	bl	800096c <avanza>
    return sentido;
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop

08000ad4 <termino>:

/**
 * @brief Detiene ambos motores (cuando ganemos)
 */
void termino(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
    set_motor_izq(MOTOR_FRENADO, 0);
 8000ad8:	2100      	movs	r1, #0
 8000ada:	2002      	movs	r0, #2
 8000adc:	f7ff febe 	bl	800085c <set_motor_izq>
    set_motor_der(MOTOR_FRENADO, 0);
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	2002      	movs	r0, #2
 8000ae4:	f7ff fefe 	bl	80008e4 <set_motor_der>
}
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}

08000aec <correccion_izquierda>:

void correccion_izquierda(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0

    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 100); // Motor izq más lento
 8000af0:	4b06      	ldr	r3, [pc, #24]	@ (8000b0c <correccion_izquierda+0x20>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2264      	movs	r2, #100	@ 0x64
 8000af6:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 700); // Motor der normal
 8000af8:	4b04      	ldr	r3, [pc, #16]	@ (8000b0c <correccion_izquierda+0x20>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 8000b00:	641a      	str	r2, [r3, #64]	@ 0x40
        if (flag_linea_detectada || flag_muro_detectado)
            return; // Salir si hay algo urgente

        HAL_Delay(10);
    } */
}
 8000b02:	bf00      	nop
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	200002e0 	.word	0x200002e0

08000b10 <correccion_derecha>:

void correccion_derecha(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 700); // Motor izq normal
 8000b14:	4b06      	ldr	r3, [pc, #24]	@ (8000b30 <correccion_derecha+0x20>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 8000b1c:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 100); // Motor der más lento
 8000b1e:	4b04      	ldr	r3, [pc, #16]	@ (8000b30 <correccion_derecha+0x20>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	2264      	movs	r2, #100	@ 0x64
 8000b24:	641a      	str	r2, [r3, #64]	@ 0x40
        if (flag_linea_detectada || flag_muro_detectado)
            return; // Salir si hay algo urgente

        HAL_Delay(10);
    } */
}
 8000b26:	bf00      	nop
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr
 8000b30:	200002e0 	.word	0x200002e0

08000b34 <laberinto_get_peso>:
    // La meta tiene peso 0
    laberinto[POSICION_META_FILA - 1][POSICION_META_COLUMNA - 1].peso = 0;
}

uint8_t laberinto_get_peso(uint8_t fila, uint8_t columna)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	460a      	mov	r2, r1
 8000b3e:	71fb      	strb	r3, [r7, #7]
 8000b40:	4613      	mov	r3, r2
 8000b42:	71bb      	strb	r3, [r7, #6]
    if (!laberinto_posicion_valida(fila, columna))
 8000b44:	79ba      	ldrb	r2, [r7, #6]
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	4611      	mov	r1, r2
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f000 f996 	bl	8000e7c <laberinto_posicion_valida>
 8000b50:	4603      	mov	r3, r0
 8000b52:	f083 0301 	eor.w	r3, r3, #1
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <laberinto_get_peso+0x2c>
    {
        return PESO_MAXIMO;
 8000b5c:	23ff      	movs	r3, #255	@ 0xff
 8000b5e:	e00f      	b.n	8000b80 <laberinto_get_peso+0x4c>
    }

    return laberinto[fila - 1][columna - 1].peso;
 8000b60:	79fb      	ldrb	r3, [r7, #7]
 8000b62:	1e59      	subs	r1, r3, #1
 8000b64:	79bb      	ldrb	r3, [r7, #6]
 8000b66:	3b01      	subs	r3, #1
 8000b68:	4807      	ldr	r0, [pc, #28]	@ (8000b88 <laberinto_get_peso+0x54>)
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	00d2      	lsls	r2, r2, #3
 8000b6e:	1ad2      	subs	r2, r2, r3
 8000b70:	460b      	mov	r3, r1
 8000b72:	00db      	lsls	r3, r3, #3
 8000b74:	1a5b      	subs	r3, r3, r1
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	4413      	add	r3, r2
 8000b7a:	4403      	add	r3, r0
 8000b7c:	3302      	adds	r3, #2
 8000b7e:	781b      	ldrb	r3, [r3, #0]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	200000d4 	.word	0x200000d4

08000b8c <laberinto_set_muro>:

void laberinto_set_muro(uint8_t fila, uint8_t columna, brujula direccion)
{
 8000b8c:	b590      	push	{r4, r7, lr}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	71fb      	strb	r3, [r7, #7]
 8000b96:	460b      	mov	r3, r1
 8000b98:	71bb      	strb	r3, [r7, #6]
 8000b9a:	4613      	mov	r3, r2
 8000b9c:	717b      	strb	r3, [r7, #5]
    if (!laberinto_posicion_valida(fila, columna))
 8000b9e:	79ba      	ldrb	r2, [r7, #6]
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	4611      	mov	r1, r2
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f000 f969 	bl	8000e7c <laberinto_posicion_valida>
 8000baa:	4603      	mov	r3, r0
 8000bac:	f083 0301 	eor.w	r3, r3, #1
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d146      	bne.n	8000c44 <laberinto_set_muro+0xb8>
    {
        return;
    }

    // Marcar muro en casilla actual
    laberinto[fila - 1][columna - 1].muros[direccion] = true;
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	1e59      	subs	r1, r3, #1
 8000bba:	79bb      	ldrb	r3, [r7, #6]
 8000bbc:	3b01      	subs	r3, #1
 8000bbe:	7978      	ldrb	r0, [r7, #5]
 8000bc0:	4c22      	ldr	r4, [pc, #136]	@ (8000c4c <laberinto_set_muro+0xc0>)
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	00d2      	lsls	r2, r2, #3
 8000bc6:	1ad2      	subs	r2, r2, r3
 8000bc8:	460b      	mov	r3, r1
 8000bca:	00db      	lsls	r3, r3, #3
 8000bcc:	1a5b      	subs	r3, r3, r1
 8000bce:	009b      	lsls	r3, r3, #2
 8000bd0:	4413      	add	r3, r2
 8000bd2:	4423      	add	r3, r4
 8000bd4:	4403      	add	r3, r0
 8000bd6:	3303      	adds	r3, #3
 8000bd8:	2201      	movs	r2, #1
 8000bda:	701a      	strb	r2, [r3, #0]

    // Marcar muro en casilla adyacente (si existe)
    posicion_t pos_adyacente = laberinto_get_posicion_adyacente(
        (posicion_t){fila, columna}, direccion);
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	723b      	strb	r3, [r7, #8]
 8000be0:	79bb      	ldrb	r3, [r7, #6]
 8000be2:	727b      	strb	r3, [r7, #9]
    posicion_t pos_adyacente = laberinto_get_posicion_adyacente(
 8000be4:	797b      	ldrb	r3, [r7, #5]
 8000be6:	4619      	mov	r1, r3
 8000be8:	68b8      	ldr	r0, [r7, #8]
 8000bea:	f000 f90d 	bl	8000e08 <laberinto_get_posicion_adyacente>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	81bb      	strh	r3, [r7, #12]

    if (laberinto_posicion_valida(pos_adyacente.fila, pos_adyacente.columna))
 8000bf2:	7b3b      	ldrb	r3, [r7, #12]
 8000bf4:	7b7a      	ldrb	r2, [r7, #13]
 8000bf6:	4611      	mov	r1, r2
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f000 f93f 	bl	8000e7c <laberinto_posicion_valida>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d01c      	beq.n	8000c3e <laberinto_set_muro+0xb2>
    {
        // Dirección opuesta
        brujula direccion_opuesta = (direccion + 2) % 4;
 8000c04:	797b      	ldrb	r3, [r7, #5]
 8000c06:	3302      	adds	r3, #2
 8000c08:	425a      	negs	r2, r3
 8000c0a:	f003 0303 	and.w	r3, r3, #3
 8000c0e:	f002 0203 	and.w	r2, r2, #3
 8000c12:	bf58      	it	pl
 8000c14:	4253      	negpl	r3, r2
 8000c16:	73fb      	strb	r3, [r7, #15]
        laberinto[pos_adyacente.fila - 1][pos_adyacente.columna - 1].muros[direccion_opuesta] = true;
 8000c18:	7b3b      	ldrb	r3, [r7, #12]
 8000c1a:	1e59      	subs	r1, r3, #1
 8000c1c:	7b7b      	ldrb	r3, [r7, #13]
 8000c1e:	3b01      	subs	r3, #1
 8000c20:	7bf8      	ldrb	r0, [r7, #15]
 8000c22:	4c0a      	ldr	r4, [pc, #40]	@ (8000c4c <laberinto_set_muro+0xc0>)
 8000c24:	461a      	mov	r2, r3
 8000c26:	00d2      	lsls	r2, r2, #3
 8000c28:	1ad2      	subs	r2, r2, r3
 8000c2a:	460b      	mov	r3, r1
 8000c2c:	00db      	lsls	r3, r3, #3
 8000c2e:	1a5b      	subs	r3, r3, r1
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	4413      	add	r3, r2
 8000c34:	4423      	add	r3, r4
 8000c36:	4403      	add	r3, r0
 8000c38:	3303      	adds	r3, #3
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	701a      	strb	r2, [r3, #0]
    }

    // Recalcular pesos después de agregar muro
    laberinto_recalcular_pesos();
 8000c3e:	f000 f807 	bl	8000c50 <laberinto_recalcular_pesos>
 8000c42:	e000      	b.n	8000c46 <laberinto_set_muro+0xba>
        return;
 8000c44:	bf00      	nop
}
 8000c46:	3714      	adds	r7, #20
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd90      	pop	{r4, r7, pc}
 8000c4c:	200000d4 	.word	0x200000d4

08000c50 <laberinto_recalcular_pesos>:

void laberinto_recalcular_pesos(void)
{
 8000c50:	b590      	push	{r4, r7, lr}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
    bool cambio_detectado = true;
 8000c56:	2301      	movs	r3, #1
 8000c58:	73fb      	strb	r3, [r7, #15]
    uint8_t iteraciones = 0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	73bb      	strb	r3, [r7, #14]
    const uint8_t MAX_ITERACIONES = 20; // Evitar bucles infinitos Protección contra boludos
 8000c5e:	2314      	movs	r3, #20
 8000c60:	727b      	strb	r3, [r7, #9]

    // Algoritmo Flood Fill iterativo
    while (cambio_detectado && iteraciones < MAX_ITERACIONES)
 8000c62:	e092      	b.n	8000d8a <laberinto_recalcular_pesos+0x13a>
    {
        cambio_detectado = false;
 8000c64:	2300      	movs	r3, #0
 8000c66:	73fb      	strb	r3, [r7, #15]
        iteraciones++;
 8000c68:	7bbb      	ldrb	r3, [r7, #14]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	73bb      	strb	r3, [r7, #14]

        for (uint8_t fila = 1; fila <= TAMAÑO_LABERINTO; fila++) // se propaga desde (1,1) hacia afuera
 8000c6e:	2301      	movs	r3, #1
 8000c70:	737b      	strb	r3, [r7, #13]
 8000c72:	e086      	b.n	8000d82 <laberinto_recalcular_pesos+0x132>
        {
            for (uint8_t columna = 1; columna <= TAMAÑO_LABERINTO; columna++)
 8000c74:	2301      	movs	r3, #1
 8000c76:	733b      	strb	r3, [r7, #12]
 8000c78:	e07c      	b.n	8000d74 <laberinto_recalcular_pesos+0x124>
            {

                // No recalcular la meta
                if (fila == POSICION_META_FILA && columna == POSICION_META_COLUMNA)
 8000c7a:	7b7b      	ldrb	r3, [r7, #13]
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d102      	bne.n	8000c86 <laberinto_recalcular_pesos+0x36>
 8000c80:	7b3b      	ldrb	r3, [r7, #12]
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d072      	beq.n	8000d6c <laberinto_recalcular_pesos+0x11c>
                {
                    continue;
                }

                uint8_t peso_minimo = PESO_MAXIMO;
 8000c86:	23ff      	movs	r3, #255	@ 0xff
 8000c88:	72fb      	strb	r3, [r7, #11]

                // Verificar todas las direcciones adyacentes
                for (brujula dir = norte; dir <= oeste; dir++)
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	72bb      	strb	r3, [r7, #10]
 8000c8e:	e03a      	b.n	8000d06 <laberinto_recalcular_pesos+0xb6>
                {

                    // Saltar si hay muro en esta dirección
                    if (laberinto[fila - 1][columna - 1].muros[dir])
 8000c90:	7b7b      	ldrb	r3, [r7, #13]
 8000c92:	1e59      	subs	r1, r3, #1
 8000c94:	7b3b      	ldrb	r3, [r7, #12]
 8000c96:	3b01      	subs	r3, #1
 8000c98:	7ab8      	ldrb	r0, [r7, #10]
 8000c9a:	4c42      	ldr	r4, [pc, #264]	@ (8000da4 <laberinto_recalcular_pesos+0x154>)
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	00d2      	lsls	r2, r2, #3
 8000ca0:	1ad2      	subs	r2, r2, r3
 8000ca2:	460b      	mov	r3, r1
 8000ca4:	00db      	lsls	r3, r3, #3
 8000ca6:	1a5b      	subs	r3, r3, r1
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	4413      	add	r3, r2
 8000cac:	4423      	add	r3, r4
 8000cae:	4403      	add	r3, r0
 8000cb0:	3303      	adds	r3, #3
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d122      	bne.n	8000cfe <laberinto_recalcular_pesos+0xae>
                    {
                        continue;
                    }

                    posicion_t pos_adyacente = laberinto_get_posicion_adyacente(
                        (posicion_t){fila, columna}, dir);
 8000cb8:	7b7b      	ldrb	r3, [r7, #13]
 8000cba:	703b      	strb	r3, [r7, #0]
 8000cbc:	7b3b      	ldrb	r3, [r7, #12]
 8000cbe:	707b      	strb	r3, [r7, #1]
                    posicion_t pos_adyacente = laberinto_get_posicion_adyacente(
 8000cc0:	7abb      	ldrb	r3, [r7, #10]
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	6838      	ldr	r0, [r7, #0]
 8000cc6:	f000 f89f 	bl	8000e08 <laberinto_get_posicion_adyacente>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	80bb      	strh	r3, [r7, #4]

                    if (laberinto_posicion_valida(pos_adyacente.fila, pos_adyacente.columna))
 8000cce:	793b      	ldrb	r3, [r7, #4]
 8000cd0:	797a      	ldrb	r2, [r7, #5]
 8000cd2:	4611      	mov	r1, r2
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f000 f8d1 	bl	8000e7c <laberinto_posicion_valida>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d00f      	beq.n	8000d00 <laberinto_recalcular_pesos+0xb0>
                    {
                        uint8_t peso_adyacente = laberinto_get_peso(
 8000ce0:	793b      	ldrb	r3, [r7, #4]
 8000ce2:	797a      	ldrb	r2, [r7, #5]
 8000ce4:	4611      	mov	r1, r2
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff ff24 	bl	8000b34 <laberinto_get_peso>
 8000cec:	4603      	mov	r3, r0
 8000cee:	71fb      	strb	r3, [r7, #7]
                            pos_adyacente.fila, pos_adyacente.columna);

                        if (peso_adyacente < peso_minimo)
 8000cf0:	79fa      	ldrb	r2, [r7, #7]
 8000cf2:	7afb      	ldrb	r3, [r7, #11]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d203      	bcs.n	8000d00 <laberinto_recalcular_pesos+0xb0>
                        {
                            peso_minimo = peso_adyacente;
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	72fb      	strb	r3, [r7, #11]
 8000cfc:	e000      	b.n	8000d00 <laberinto_recalcular_pesos+0xb0>
                        continue;
 8000cfe:	bf00      	nop
                for (brujula dir = norte; dir <= oeste; dir++)
 8000d00:	7abb      	ldrb	r3, [r7, #10]
 8000d02:	3301      	adds	r3, #1
 8000d04:	72bb      	strb	r3, [r7, #10]
 8000d06:	7abb      	ldrb	r3, [r7, #10]
 8000d08:	2b03      	cmp	r3, #3
 8000d0a:	d9c1      	bls.n	8000c90 <laberinto_recalcular_pesos+0x40>
                        }
                    }
                }

                // Nuevo peso = menor peso adyacente + 1
                uint8_t nuevo_peso = (peso_minimo == PESO_MAXIMO) ? PESO_MAXIMO : peso_minimo + 1;
 8000d0c:	7afb      	ldrb	r3, [r7, #11]
 8000d0e:	2bff      	cmp	r3, #255	@ 0xff
 8000d10:	d003      	beq.n	8000d1a <laberinto_recalcular_pesos+0xca>
 8000d12:	7afb      	ldrb	r3, [r7, #11]
 8000d14:	3301      	adds	r3, #1
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	e000      	b.n	8000d1c <laberinto_recalcular_pesos+0xcc>
 8000d1a:	23ff      	movs	r3, #255	@ 0xff
 8000d1c:	723b      	strb	r3, [r7, #8]

                // Actualizar si hay cambio
                if (nuevo_peso != laberinto[fila - 1][columna - 1].peso)
 8000d1e:	7b7b      	ldrb	r3, [r7, #13]
 8000d20:	1e59      	subs	r1, r3, #1
 8000d22:	7b3b      	ldrb	r3, [r7, #12]
 8000d24:	3b01      	subs	r3, #1
 8000d26:	481f      	ldr	r0, [pc, #124]	@ (8000da4 <laberinto_recalcular_pesos+0x154>)
 8000d28:	461a      	mov	r2, r3
 8000d2a:	00d2      	lsls	r2, r2, #3
 8000d2c:	1ad2      	subs	r2, r2, r3
 8000d2e:	460b      	mov	r3, r1
 8000d30:	00db      	lsls	r3, r3, #3
 8000d32:	1a5b      	subs	r3, r3, r1
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	4413      	add	r3, r2
 8000d38:	4403      	add	r3, r0
 8000d3a:	3302      	adds	r3, #2
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	7a3a      	ldrb	r2, [r7, #8]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d014      	beq.n	8000d6e <laberinto_recalcular_pesos+0x11e>
                {
                    laberinto[fila - 1][columna - 1].peso = nuevo_peso;
 8000d44:	7b7b      	ldrb	r3, [r7, #13]
 8000d46:	1e59      	subs	r1, r3, #1
 8000d48:	7b3b      	ldrb	r3, [r7, #12]
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	4815      	ldr	r0, [pc, #84]	@ (8000da4 <laberinto_recalcular_pesos+0x154>)
 8000d4e:	461a      	mov	r2, r3
 8000d50:	00d2      	lsls	r2, r2, #3
 8000d52:	1ad2      	subs	r2, r2, r3
 8000d54:	460b      	mov	r3, r1
 8000d56:	00db      	lsls	r3, r3, #3
 8000d58:	1a5b      	subs	r3, r3, r1
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	4413      	add	r3, r2
 8000d5e:	4403      	add	r3, r0
 8000d60:	3302      	adds	r3, #2
 8000d62:	7a3a      	ldrb	r2, [r7, #8]
 8000d64:	701a      	strb	r2, [r3, #0]
                    cambio_detectado = true;
 8000d66:	2301      	movs	r3, #1
 8000d68:	73fb      	strb	r3, [r7, #15]
 8000d6a:	e000      	b.n	8000d6e <laberinto_recalcular_pesos+0x11e>
                    continue;
 8000d6c:	bf00      	nop
            for (uint8_t columna = 1; columna <= TAMAÑO_LABERINTO; columna++)
 8000d6e:	7b3b      	ldrb	r3, [r7, #12]
 8000d70:	3301      	adds	r3, #1
 8000d72:	733b      	strb	r3, [r7, #12]
 8000d74:	7b3b      	ldrb	r3, [r7, #12]
 8000d76:	2b04      	cmp	r3, #4
 8000d78:	f67f af7f 	bls.w	8000c7a <laberinto_recalcular_pesos+0x2a>
        for (uint8_t fila = 1; fila <= TAMAÑO_LABERINTO; fila++) // se propaga desde (1,1) hacia afuera
 8000d7c:	7b7b      	ldrb	r3, [r7, #13]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	737b      	strb	r3, [r7, #13]
 8000d82:	7b7b      	ldrb	r3, [r7, #13]
 8000d84:	2b04      	cmp	r3, #4
 8000d86:	f67f af75 	bls.w	8000c74 <laberinto_recalcular_pesos+0x24>
    while (cambio_detectado && iteraciones < MAX_ITERACIONES)
 8000d8a:	7bfb      	ldrb	r3, [r7, #15]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d004      	beq.n	8000d9a <laberinto_recalcular_pesos+0x14a>
 8000d90:	7bba      	ldrb	r2, [r7, #14]
 8000d92:	7a7b      	ldrb	r3, [r7, #9]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	f4ff af65 	bcc.w	8000c64 <laberinto_recalcular_pesos+0x14>
                }
            }
        }
    }
}
 8000d9a:	bf00      	nop
 8000d9c:	3714      	adds	r7, #20
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd90      	pop	{r4, r7, pc}
 8000da2:	bf00      	nop
 8000da4:	200000d4 	.word	0x200000d4

08000da8 <laberinto_hay_muro>:

bool laberinto_hay_muro(uint8_t fila, uint8_t columna, brujula direccion)
{
 8000da8:	b590      	push	{r4, r7, lr}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	71fb      	strb	r3, [r7, #7]
 8000db2:	460b      	mov	r3, r1
 8000db4:	71bb      	strb	r3, [r7, #6]
 8000db6:	4613      	mov	r3, r2
 8000db8:	717b      	strb	r3, [r7, #5]
    if (!laberinto_posicion_valida(fila, columna))
 8000dba:	79ba      	ldrb	r2, [r7, #6]
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	4611      	mov	r1, r2
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f000 f85b 	bl	8000e7c <laberinto_posicion_valida>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	f083 0301 	eor.w	r3, r3, #1
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <laberinto_hay_muro+0x2e>
    {
        return true; // Considerar bordes como muros
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e011      	b.n	8000dfa <laberinto_hay_muro+0x52>
    }

    return laberinto[fila - 1][columna - 1].muros[direccion];
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	1e59      	subs	r1, r3, #1
 8000dda:	79bb      	ldrb	r3, [r7, #6]
 8000ddc:	3b01      	subs	r3, #1
 8000dde:	7978      	ldrb	r0, [r7, #5]
 8000de0:	4c08      	ldr	r4, [pc, #32]	@ (8000e04 <laberinto_hay_muro+0x5c>)
 8000de2:	461a      	mov	r2, r3
 8000de4:	00d2      	lsls	r2, r2, #3
 8000de6:	1ad2      	subs	r2, r2, r3
 8000de8:	460b      	mov	r3, r1
 8000dea:	00db      	lsls	r3, r3, #3
 8000dec:	1a5b      	subs	r3, r3, r1
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	4413      	add	r3, r2
 8000df2:	4423      	add	r3, r4
 8000df4:	4403      	add	r3, r0
 8000df6:	3303      	adds	r3, #3
 8000df8:	781b      	ldrb	r3, [r3, #0]
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	370c      	adds	r7, #12
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd90      	pop	{r4, r7, pc}
 8000e02:	bf00      	nop
 8000e04:	200000d4 	.word	0x200000d4

08000e08 <laberinto_get_posicion_adyacente>:

posicion_t laberinto_get_posicion_adyacente(posicion_t pos_actual, brujula direccion)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	80b8      	strh	r0, [r7, #4]
 8000e10:	460b      	mov	r3, r1
 8000e12:	70fb      	strb	r3, [r7, #3]
    posicion_t nueva_pos = pos_actual;
 8000e14:	88bb      	ldrh	r3, [r7, #4]
 8000e16:	813b      	strh	r3, [r7, #8]

    switch (direccion)
 8000e18:	78fb      	ldrb	r3, [r7, #3]
 8000e1a:	2b03      	cmp	r3, #3
 8000e1c:	d81e      	bhi.n	8000e5c <laberinto_get_posicion_adyacente+0x54>
 8000e1e:	a201      	add	r2, pc, #4	@ (adr r2, 8000e24 <laberinto_get_posicion_adyacente+0x1c>)
 8000e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e24:	08000e35 	.word	0x08000e35
 8000e28:	08000e3f 	.word	0x08000e3f
 8000e2c:	08000e49 	.word	0x08000e49
 8000e30:	08000e53 	.word	0x08000e53
    {
    case norte:
        nueva_pos.fila = pos_actual.fila - 1;
 8000e34:	793b      	ldrb	r3, [r7, #4]
 8000e36:	3b01      	subs	r3, #1
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	723b      	strb	r3, [r7, #8]
        break;
 8000e3c:	e00e      	b.n	8000e5c <laberinto_get_posicion_adyacente+0x54>
    case este:
        nueva_pos.columna = pos_actual.columna + 1;
 8000e3e:	797b      	ldrb	r3, [r7, #5]
 8000e40:	3301      	adds	r3, #1
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	727b      	strb	r3, [r7, #9]
        break;
 8000e46:	e009      	b.n	8000e5c <laberinto_get_posicion_adyacente+0x54>
    case sur:
        nueva_pos.fila = pos_actual.fila + 1;
 8000e48:	793b      	ldrb	r3, [r7, #4]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	723b      	strb	r3, [r7, #8]
        break;
 8000e50:	e004      	b.n	8000e5c <laberinto_get_posicion_adyacente+0x54>
    case oeste:
        nueva_pos.columna = pos_actual.columna - 1;
 8000e52:	797b      	ldrb	r3, [r7, #5]
 8000e54:	3b01      	subs	r3, #1
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	727b      	strb	r3, [r7, #9]
        break;
 8000e5a:	bf00      	nop
    }

    return nueva_pos;
 8000e5c:	893b      	ldrh	r3, [r7, #8]
 8000e5e:	81bb      	strh	r3, [r7, #12]
 8000e60:	2300      	movs	r3, #0
 8000e62:	7b3a      	ldrb	r2, [r7, #12]
 8000e64:	f362 0307 	bfi	r3, r2, #0, #8
 8000e68:	7b7a      	ldrb	r2, [r7, #13]
 8000e6a:	f362 230f 	bfi	r3, r2, #8, #8
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3714      	adds	r7, #20
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop

08000e7c <laberinto_posicion_valida>:

bool laberinto_posicion_valida(uint8_t fila, uint8_t columna)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	460a      	mov	r2, r1
 8000e86:	71fb      	strb	r3, [r7, #7]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	71bb      	strb	r3, [r7, #6]
    return (fila >= 1 && fila <= TAMAÑO_LABERINTO &&
            columna >= 1 && columna <= TAMAÑO_LABERINTO);
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d00a      	beq.n	8000ea8 <laberinto_posicion_valida+0x2c>
    return (fila >= 1 && fila <= TAMAÑO_LABERINTO &&
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	2b04      	cmp	r3, #4
 8000e96:	d807      	bhi.n	8000ea8 <laberinto_posicion_valida+0x2c>
 8000e98:	79bb      	ldrb	r3, [r7, #6]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d004      	beq.n	8000ea8 <laberinto_posicion_valida+0x2c>
            columna >= 1 && columna <= TAMAÑO_LABERINTO);
 8000e9e:	79bb      	ldrb	r3, [r7, #6]
 8000ea0:	2b04      	cmp	r3, #4
 8000ea2:	d801      	bhi.n	8000ea8 <laberinto_posicion_valida+0x2c>
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	e000      	b.n	8000eaa <laberinto_posicion_valida+0x2e>
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ec0:	f000 fffc 	bl	8001ebc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ec4:	f000 f848 	bl	8000f58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ec8:	f000 fa44 	bl	8001354 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ecc:	f000 fa22 	bl	8001314 <MX_DMA_Init>
  MX_I2C1_Init();
 8000ed0:	f000 f90c 	bl	80010ec <MX_I2C1_Init>
  MX_I2S3_Init();
 8000ed4:	f000 f938 	bl	8001148 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000ed8:	f000 f964 	bl	80011a4 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000edc:	f00a f90e 	bl	800b0fc <MX_USB_HOST_Init>
  MX_ADC1_Init();
 8000ee0:	f000 f8a4 	bl	800102c <MX_ADC1_Init>
  MX_TIM3_Init();
 8000ee4:	f000 f994 	bl	8001210 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  // Inicializar ADC con DMA primero
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)dma_buffer, BUFFER_TOTAL);
 8000ee8:	22c8      	movs	r2, #200	@ 0xc8
 8000eea:	4916      	ldr	r1, [pc, #88]	@ (8000f44 <main+0x88>)
 8000eec:	4816      	ldr	r0, [pc, #88]	@ (8000f48 <main+0x8c>)
 8000eee:	f001 f8bf 	bl	8002070 <HAL_ADC_Start_DMA>

  // Auto-calibración (sin motores activos)
  auto_calibracion();
 8000ef2:	f7ff fbab 	bl	800064c <auto_calibracion>
  // Inicializar el módulo de motores
  control_motor_init();
 8000ef6:	f7ff fca1 	bl	800083c <control_motor_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000efa:	f00a f925 	bl	800b148 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    if (!terminado)
 8000efe:	4b13      	ldr	r3, [pc, #76]	@ (8000f4c <main+0x90>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	f083 0301 	eor.w	r3, r3, #1
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d017      	beq.n	8000f3c <main+0x80>
    {
      // PROCESAR FLAGS CON PRIORIDAD: LÍNEA > MURO

      if (flag_linea_detectada)
 8000f0c:	4b10      	ldr	r3, [pc, #64]	@ (8000f50 <main+0x94>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d005      	beq.n	8000f22 <main+0x66>
      {
        flag_linea_detectada = false; // Clear flag PRIMERO
 8000f16:	4b0e      	ldr	r3, [pc, #56]	@ (8000f50 <main+0x94>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	701a      	strb	r2, [r3, #0]
        chequeolinea();               // Ejecutar función completa
 8000f1c:	f000 fb78 	bl	8001610 <chequeolinea>
 8000f20:	e00c      	b.n	8000f3c <main+0x80>
      }
      else if (flag_muro_detectado)
 8000f22:	4b0c      	ldr	r3, [pc, #48]	@ (8000f54 <main+0x98>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d005      	beq.n	8000f38 <main+0x7c>
      {                              // else if = prioridad a línea
        flag_muro_detectado = false; // Clear flag PRIMERO
 8000f2c:	4b09      	ldr	r3, [pc, #36]	@ (8000f54 <main+0x98>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	701a      	strb	r2, [r3, #0]
        chequeomuro();               // Ejecutar función completa
 8000f32:	f000 fbb3 	bl	800169c <chequeomuro>
 8000f36:	e001      	b.n	8000f3c <main+0x80>
      }
      else
      {
        // Solo ejecutar control de línea recta si NO hay interrupciones pendientes
        // FALTA HACER: HACER BREAKS DENTRO DE CONTROLAR_LINEA_RECTA PARA VERIFICAR SI HAY MURO O LINEA
        controlar_linea_recta();
 8000f38:	f7ff fc10 	bl	800075c <controlar_linea_recta>
      }
    }

    reset_posicion_pushbutton(); // ⚡ I AM SPEED button
 8000f3c:	f000 fbe2 	bl	8001704 <reset_posicion_pushbutton>
    MX_USB_HOST_Process();
 8000f40:	e7db      	b.n	8000efa <main+0x3e>
 8000f42:	bf00      	nop
 8000f44:	2000032c 	.word	0x2000032c
 8000f48:	20000144 	.word	0x20000144
 8000f4c:	20000329 	.word	0x20000329
 8000f50:	200004bc 	.word	0x200004bc
 8000f54:	200004bd 	.word	0x200004bd

08000f58 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b094      	sub	sp, #80	@ 0x50
 8000f5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f5e:	f107 0320 	add.w	r3, r7, #32
 8000f62:	2230      	movs	r2, #48	@ 0x30
 8000f64:	2100      	movs	r1, #0
 8000f66:	4618      	mov	r0, r3
 8000f68:	f00a fc90 	bl	800b88c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f6c:	f107 030c 	add.w	r3, r7, #12
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	60bb      	str	r3, [r7, #8]
 8000f80:	4b28      	ldr	r3, [pc, #160]	@ (8001024 <SystemClock_Config+0xcc>)
 8000f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f84:	4a27      	ldr	r2, [pc, #156]	@ (8001024 <SystemClock_Config+0xcc>)
 8000f86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f8a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f8c:	4b25      	ldr	r3, [pc, #148]	@ (8001024 <SystemClock_Config+0xcc>)
 8000f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f94:	60bb      	str	r3, [r7, #8]
 8000f96:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f98:	2300      	movs	r3, #0
 8000f9a:	607b      	str	r3, [r7, #4]
 8000f9c:	4b22      	ldr	r3, [pc, #136]	@ (8001028 <SystemClock_Config+0xd0>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a21      	ldr	r2, [pc, #132]	@ (8001028 <SystemClock_Config+0xd0>)
 8000fa2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fa6:	6013      	str	r3, [r2, #0]
 8000fa8:	4b1f      	ldr	r3, [pc, #124]	@ (8001028 <SystemClock_Config+0xd0>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fb0:	607b      	str	r3, [r7, #4]
 8000fb2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fb8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fbc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fc2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fc8:	2308      	movs	r3, #8
 8000fca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000fcc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000fd0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000fd6:	2307      	movs	r3, #7
 8000fd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fda:	f107 0320 	add.w	r3, r7, #32
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f005 f9b6 	bl	8006350 <HAL_RCC_OscConfig>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000fea:	f000 fc05 	bl	80017f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000fee:	230f      	movs	r3, #15
 8000ff0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ffa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ffe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001000:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001004:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001006:	f107 030c 	add.w	r3, r7, #12
 800100a:	2105      	movs	r1, #5
 800100c:	4618      	mov	r0, r3
 800100e:	f005 fc17 	bl	8006840 <HAL_RCC_ClockConfig>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001018:	f000 fbee 	bl	80017f8 <Error_Handler>
  }
}
 800101c:	bf00      	nop
 800101e:	3750      	adds	r7, #80	@ 0x50
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40023800 	.word	0x40023800
 8001028:	40007000 	.word	0x40007000

0800102c <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001032:	463b      	mov	r3, r7
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
   */
  hadc1.Instance = ADC1;
 800103e:	4b28      	ldr	r3, [pc, #160]	@ (80010e0 <MX_ADC1_Init+0xb4>)
 8001040:	4a28      	ldr	r2, [pc, #160]	@ (80010e4 <MX_ADC1_Init+0xb8>)
 8001042:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001044:	4b26      	ldr	r3, [pc, #152]	@ (80010e0 <MX_ADC1_Init+0xb4>)
 8001046:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800104a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800104c:	4b24      	ldr	r3, [pc, #144]	@ (80010e0 <MX_ADC1_Init+0xb4>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001052:	4b23      	ldr	r3, [pc, #140]	@ (80010e0 <MX_ADC1_Init+0xb4>)
 8001054:	2201      	movs	r2, #1
 8001056:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001058:	4b21      	ldr	r3, [pc, #132]	@ (80010e0 <MX_ADC1_Init+0xb4>)
 800105a:	2201      	movs	r2, #1
 800105c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800105e:	4b20      	ldr	r3, [pc, #128]	@ (80010e0 <MX_ADC1_Init+0xb4>)
 8001060:	2200      	movs	r2, #0
 8001062:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001066:	4b1e      	ldr	r3, [pc, #120]	@ (80010e0 <MX_ADC1_Init+0xb4>)
 8001068:	2200      	movs	r2, #0
 800106a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800106c:	4b1c      	ldr	r3, [pc, #112]	@ (80010e0 <MX_ADC1_Init+0xb4>)
 800106e:	4a1e      	ldr	r2, [pc, #120]	@ (80010e8 <MX_ADC1_Init+0xbc>)
 8001070:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001072:	4b1b      	ldr	r3, [pc, #108]	@ (80010e0 <MX_ADC1_Init+0xb4>)
 8001074:	2200      	movs	r2, #0
 8001076:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001078:	4b19      	ldr	r3, [pc, #100]	@ (80010e0 <MX_ADC1_Init+0xb4>)
 800107a:	2202      	movs	r2, #2
 800107c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800107e:	4b18      	ldr	r3, [pc, #96]	@ (80010e0 <MX_ADC1_Init+0xb4>)
 8001080:	2201      	movs	r2, #1
 8001082:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001086:	4b16      	ldr	r3, [pc, #88]	@ (80010e0 <MX_ADC1_Init+0xb4>)
 8001088:	2200      	movs	r2, #0
 800108a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800108c:	4814      	ldr	r0, [pc, #80]	@ (80010e0 <MX_ADC1_Init+0xb4>)
 800108e:	f000 ffab 	bl	8001fe8 <HAL_ADC_Init>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001098:	f000 fbae 	bl	80017f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_8;
 800109c:	2308      	movs	r3, #8
 800109e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010a0:	2301      	movs	r3, #1
 80010a2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 80010a4:	2305      	movs	r3, #5
 80010a6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010a8:	463b      	mov	r3, r7
 80010aa:	4619      	mov	r1, r3
 80010ac:	480c      	ldr	r0, [pc, #48]	@ (80010e0 <MX_ADC1_Init+0xb4>)
 80010ae:	f001 f8fd 	bl	80022ac <HAL_ADC_ConfigChannel>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80010b8:	f000 fb9e 	bl	80017f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_9;
 80010bc:	2309      	movs	r3, #9
 80010be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80010c0:	2302      	movs	r3, #2
 80010c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010c4:	463b      	mov	r3, r7
 80010c6:	4619      	mov	r1, r3
 80010c8:	4805      	ldr	r0, [pc, #20]	@ (80010e0 <MX_ADC1_Init+0xb4>)
 80010ca:	f001 f8ef 	bl	80022ac <HAL_ADC_ConfigChannel>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80010d4:	f000 fb90 	bl	80017f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 80010d8:	bf00      	nop
 80010da:	3710      	adds	r7, #16
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20000144 	.word	0x20000144
 80010e4:	40012000 	.word	0x40012000
 80010e8:	0f000001 	.word	0x0f000001

080010ec <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010f0:	4b12      	ldr	r3, [pc, #72]	@ (800113c <MX_I2C1_Init+0x50>)
 80010f2:	4a13      	ldr	r2, [pc, #76]	@ (8001140 <MX_I2C1_Init+0x54>)
 80010f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010f6:	4b11      	ldr	r3, [pc, #68]	@ (800113c <MX_I2C1_Init+0x50>)
 80010f8:	4a12      	ldr	r2, [pc, #72]	@ (8001144 <MX_I2C1_Init+0x58>)
 80010fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010fc:	4b0f      	ldr	r3, [pc, #60]	@ (800113c <MX_I2C1_Init+0x50>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001102:	4b0e      	ldr	r3, [pc, #56]	@ (800113c <MX_I2C1_Init+0x50>)
 8001104:	2200      	movs	r2, #0
 8001106:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001108:	4b0c      	ldr	r3, [pc, #48]	@ (800113c <MX_I2C1_Init+0x50>)
 800110a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800110e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001110:	4b0a      	ldr	r3, [pc, #40]	@ (800113c <MX_I2C1_Init+0x50>)
 8001112:	2200      	movs	r2, #0
 8001114:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001116:	4b09      	ldr	r3, [pc, #36]	@ (800113c <MX_I2C1_Init+0x50>)
 8001118:	2200      	movs	r2, #0
 800111a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800111c:	4b07      	ldr	r3, [pc, #28]	@ (800113c <MX_I2C1_Init+0x50>)
 800111e:	2200      	movs	r2, #0
 8001120:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001122:	4b06      	ldr	r3, [pc, #24]	@ (800113c <MX_I2C1_Init+0x50>)
 8001124:	2200      	movs	r2, #0
 8001126:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001128:	4804      	ldr	r0, [pc, #16]	@ (800113c <MX_I2C1_Init+0x50>)
 800112a:	f004 fb2d 	bl	8005788 <HAL_I2C_Init>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001134:	f000 fb60 	bl	80017f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}
 800113c:	200001ec 	.word	0x200001ec
 8001140:	40005400 	.word	0x40005400
 8001144:	000186a0 	.word	0x000186a0

08001148 <MX_I2S3_Init>:
 * @brief I2S3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S3_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800114c:	4b13      	ldr	r3, [pc, #76]	@ (800119c <MX_I2S3_Init+0x54>)
 800114e:	4a14      	ldr	r2, [pc, #80]	@ (80011a0 <MX_I2S3_Init+0x58>)
 8001150:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001152:	4b12      	ldr	r3, [pc, #72]	@ (800119c <MX_I2S3_Init+0x54>)
 8001154:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001158:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800115a:	4b10      	ldr	r3, [pc, #64]	@ (800119c <MX_I2S3_Init+0x54>)
 800115c:	2200      	movs	r2, #0
 800115e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001160:	4b0e      	ldr	r3, [pc, #56]	@ (800119c <MX_I2S3_Init+0x54>)
 8001162:	2200      	movs	r2, #0
 8001164:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001166:	4b0d      	ldr	r3, [pc, #52]	@ (800119c <MX_I2S3_Init+0x54>)
 8001168:	2200      	movs	r2, #0
 800116a:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 800116c:	4b0b      	ldr	r3, [pc, #44]	@ (800119c <MX_I2S3_Init+0x54>)
 800116e:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8001172:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001174:	4b09      	ldr	r3, [pc, #36]	@ (800119c <MX_I2S3_Init+0x54>)
 8001176:	2200      	movs	r2, #0
 8001178:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800117a:	4b08      	ldr	r3, [pc, #32]	@ (800119c <MX_I2S3_Init+0x54>)
 800117c:	2200      	movs	r2, #0
 800117e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001180:	4b06      	ldr	r3, [pc, #24]	@ (800119c <MX_I2S3_Init+0x54>)
 8001182:	2200      	movs	r2, #0
 8001184:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001186:	4805      	ldr	r0, [pc, #20]	@ (800119c <MX_I2S3_Init+0x54>)
 8001188:	f004 fc42 	bl	8005a10 <HAL_I2S_Init>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001192:	f000 fb31 	bl	80017f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000240 	.word	0x20000240
 80011a0:	40003c00 	.word	0x40003c00

080011a4 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011a8:	4b17      	ldr	r3, [pc, #92]	@ (8001208 <MX_SPI1_Init+0x64>)
 80011aa:	4a18      	ldr	r2, [pc, #96]	@ (800120c <MX_SPI1_Init+0x68>)
 80011ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011ae:	4b16      	ldr	r3, [pc, #88]	@ (8001208 <MX_SPI1_Init+0x64>)
 80011b0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80011b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011b6:	4b14      	ldr	r3, [pc, #80]	@ (8001208 <MX_SPI1_Init+0x64>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011bc:	4b12      	ldr	r3, [pc, #72]	@ (8001208 <MX_SPI1_Init+0x64>)
 80011be:	2200      	movs	r2, #0
 80011c0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011c2:	4b11      	ldr	r3, [pc, #68]	@ (8001208 <MX_SPI1_Init+0x64>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001208 <MX_SPI1_Init+0x64>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001208 <MX_SPI1_Init+0x64>)
 80011d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011d4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001208 <MX_SPI1_Init+0x64>)
 80011d8:	2200      	movs	r2, #0
 80011da:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001208 <MX_SPI1_Init+0x64>)
 80011de:	2200      	movs	r2, #0
 80011e0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011e2:	4b09      	ldr	r3, [pc, #36]	@ (8001208 <MX_SPI1_Init+0x64>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011e8:	4b07      	ldr	r3, [pc, #28]	@ (8001208 <MX_SPI1_Init+0x64>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011ee:	4b06      	ldr	r3, [pc, #24]	@ (8001208 <MX_SPI1_Init+0x64>)
 80011f0:	220a      	movs	r2, #10
 80011f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011f4:	4804      	ldr	r0, [pc, #16]	@ (8001208 <MX_SPI1_Init+0x64>)
 80011f6:	f005 fe71 	bl	8006edc <HAL_SPI_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001200:	f000 fafa 	bl	80017f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */
}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000288 	.word	0x20000288
 800120c:	40013000 	.word	0x40013000

08001210 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08e      	sub	sp, #56	@ 0x38
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001216:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001224:	f107 0320 	add.w	r3, r7, #32
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800122e:	1d3b      	adds	r3, r7, #4
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]
 800123c:	615a      	str	r2, [r3, #20]
 800123e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001240:	4b32      	ldr	r3, [pc, #200]	@ (800130c <MX_TIM3_Init+0xfc>)
 8001242:	4a33      	ldr	r2, [pc, #204]	@ (8001310 <MX_TIM3_Init+0x100>)
 8001244:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8001246:	4b31      	ldr	r3, [pc, #196]	@ (800130c <MX_TIM3_Init+0xfc>)
 8001248:	2253      	movs	r2, #83	@ 0x53
 800124a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124c:	4b2f      	ldr	r3, [pc, #188]	@ (800130c <MX_TIM3_Init+0xfc>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001252:	4b2e      	ldr	r3, [pc, #184]	@ (800130c <MX_TIM3_Init+0xfc>)
 8001254:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001258:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800125a:	4b2c      	ldr	r3, [pc, #176]	@ (800130c <MX_TIM3_Init+0xfc>)
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001260:	4b2a      	ldr	r3, [pc, #168]	@ (800130c <MX_TIM3_Init+0xfc>)
 8001262:	2200      	movs	r2, #0
 8001264:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001266:	4829      	ldr	r0, [pc, #164]	@ (800130c <MX_TIM3_Init+0xfc>)
 8001268:	f005 fec1 	bl	8006fee <HAL_TIM_Base_Init>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001272:	f000 fac1 	bl	80017f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001276:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800127a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800127c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001280:	4619      	mov	r1, r3
 8001282:	4822      	ldr	r0, [pc, #136]	@ (800130c <MX_TIM3_Init+0xfc>)
 8001284:	f006 f8e6 	bl	8007454 <HAL_TIM_ConfigClockSource>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800128e:	f000 fab3 	bl	80017f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001292:	481e      	ldr	r0, [pc, #120]	@ (800130c <MX_TIM3_Init+0xfc>)
 8001294:	f005 fefa 	bl	800708c <HAL_TIM_PWM_Init>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800129e:	f000 faab 	bl	80017f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a2:	2300      	movs	r3, #0
 80012a4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a6:	2300      	movs	r3, #0
 80012a8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012aa:	f107 0320 	add.w	r3, r7, #32
 80012ae:	4619      	mov	r1, r3
 80012b0:	4816      	ldr	r0, [pc, #88]	@ (800130c <MX_TIM3_Init+0xfc>)
 80012b2:	f006 fcad 	bl	8007c10 <HAL_TIMEx_MasterConfigSynchronization>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80012bc:	f000 fa9c 	bl	80017f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012c0:	2360      	movs	r3, #96	@ 0x60
 80012c2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012c8:	2300      	movs	r3, #0
 80012ca:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012d0:	1d3b      	adds	r3, r7, #4
 80012d2:	2208      	movs	r2, #8
 80012d4:	4619      	mov	r1, r3
 80012d6:	480d      	ldr	r0, [pc, #52]	@ (800130c <MX_TIM3_Init+0xfc>)
 80012d8:	f005 fffa 	bl	80072d0 <HAL_TIM_PWM_ConfigChannel>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80012e2:	f000 fa89 	bl	80017f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	220c      	movs	r2, #12
 80012ea:	4619      	mov	r1, r3
 80012ec:	4807      	ldr	r0, [pc, #28]	@ (800130c <MX_TIM3_Init+0xfc>)
 80012ee:	f005 ffef 	bl	80072d0 <HAL_TIM_PWM_ConfigChannel>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80012f8:	f000 fa7e 	bl	80017f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80012fc:	4803      	ldr	r0, [pc, #12]	@ (800130c <MX_TIM3_Init+0xfc>)
 80012fe:	f000 fce3 	bl	8001cc8 <HAL_TIM_MspPostInit>
}
 8001302:	bf00      	nop
 8001304:	3738      	adds	r7, #56	@ 0x38
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	200002e0 	.word	0x200002e0
 8001310:	40000400 	.word	0x40000400

08001314 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	607b      	str	r3, [r7, #4]
 800131e:	4b0c      	ldr	r3, [pc, #48]	@ (8001350 <MX_DMA_Init+0x3c>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001322:	4a0b      	ldr	r2, [pc, #44]	@ (8001350 <MX_DMA_Init+0x3c>)
 8001324:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001328:	6313      	str	r3, [r2, #48]	@ 0x30
 800132a:	4b09      	ldr	r3, [pc, #36]	@ (8001350 <MX_DMA_Init+0x3c>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001332:	607b      	str	r3, [r7, #4]
 8001334:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001336:	2200      	movs	r2, #0
 8001338:	2100      	movs	r1, #0
 800133a:	2038      	movs	r0, #56	@ 0x38
 800133c:	f001 fb55 	bl	80029ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001340:	2038      	movs	r0, #56	@ 0x38
 8001342:	f001 fb6e 	bl	8002a22 <HAL_NVIC_EnableIRQ>
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40023800 	.word	0x40023800

08001354 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08c      	sub	sp, #48	@ 0x30
 8001358:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135a:	f107 031c 	add.w	r3, r7, #28
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]
 8001364:	609a      	str	r2, [r3, #8]
 8001366:	60da      	str	r2, [r3, #12]
 8001368:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	61bb      	str	r3, [r7, #24]
 800136e:	4b86      	ldr	r3, [pc, #536]	@ (8001588 <MX_GPIO_Init+0x234>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001372:	4a85      	ldr	r2, [pc, #532]	@ (8001588 <MX_GPIO_Init+0x234>)
 8001374:	f043 0310 	orr.w	r3, r3, #16
 8001378:	6313      	str	r3, [r2, #48]	@ 0x30
 800137a:	4b83      	ldr	r3, [pc, #524]	@ (8001588 <MX_GPIO_Init+0x234>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137e:	f003 0310 	and.w	r3, r3, #16
 8001382:	61bb      	str	r3, [r7, #24]
 8001384:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	617b      	str	r3, [r7, #20]
 800138a:	4b7f      	ldr	r3, [pc, #508]	@ (8001588 <MX_GPIO_Init+0x234>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138e:	4a7e      	ldr	r2, [pc, #504]	@ (8001588 <MX_GPIO_Init+0x234>)
 8001390:	f043 0304 	orr.w	r3, r3, #4
 8001394:	6313      	str	r3, [r2, #48]	@ 0x30
 8001396:	4b7c      	ldr	r3, [pc, #496]	@ (8001588 <MX_GPIO_Init+0x234>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139a:	f003 0304 	and.w	r3, r3, #4
 800139e:	617b      	str	r3, [r7, #20]
 80013a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	613b      	str	r3, [r7, #16]
 80013a6:	4b78      	ldr	r3, [pc, #480]	@ (8001588 <MX_GPIO_Init+0x234>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013aa:	4a77      	ldr	r2, [pc, #476]	@ (8001588 <MX_GPIO_Init+0x234>)
 80013ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013b2:	4b75      	ldr	r3, [pc, #468]	@ (8001588 <MX_GPIO_Init+0x234>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013ba:	613b      	str	r3, [r7, #16]
 80013bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	4b71      	ldr	r3, [pc, #452]	@ (8001588 <MX_GPIO_Init+0x234>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c6:	4a70      	ldr	r2, [pc, #448]	@ (8001588 <MX_GPIO_Init+0x234>)
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ce:	4b6e      	ldr	r3, [pc, #440]	@ (8001588 <MX_GPIO_Init+0x234>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	60bb      	str	r3, [r7, #8]
 80013de:	4b6a      	ldr	r3, [pc, #424]	@ (8001588 <MX_GPIO_Init+0x234>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e2:	4a69      	ldr	r2, [pc, #420]	@ (8001588 <MX_GPIO_Init+0x234>)
 80013e4:	f043 0302 	orr.w	r3, r3, #2
 80013e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ea:	4b67      	ldr	r3, [pc, #412]	@ (8001588 <MX_GPIO_Init+0x234>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	60bb      	str	r3, [r7, #8]
 80013f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	607b      	str	r3, [r7, #4]
 80013fa:	4b63      	ldr	r3, [pc, #396]	@ (8001588 <MX_GPIO_Init+0x234>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fe:	4a62      	ldr	r2, [pc, #392]	@ (8001588 <MX_GPIO_Init+0x234>)
 8001400:	f043 0308 	orr.w	r3, r3, #8
 8001404:	6313      	str	r3, [r2, #48]	@ 0x30
 8001406:	4b60      	ldr	r3, [pc, #384]	@ (8001588 <MX_GPIO_Init+0x234>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140a:	f003 0308 	and.w	r3, r3, #8
 800140e:	607b      	str	r3, [r7, #4]
 8001410:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001412:	2200      	movs	r2, #0
 8001414:	2108      	movs	r1, #8
 8001416:	485d      	ldr	r0, [pc, #372]	@ (800158c <MX_GPIO_Init+0x238>)
 8001418:	f002 f850 	bl	80034bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800141c:	2201      	movs	r2, #1
 800141e:	2101      	movs	r1, #1
 8001420:	485b      	ldr	r0, [pc, #364]	@ (8001590 <MX_GPIO_Init+0x23c>)
 8001422:	f002 f84b 	bl	80034bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MI0_Pin | MI1_Pin | MD0_Pin | MD1_Pin, GPIO_PIN_RESET);
 8001426:	2200      	movs	r2, #0
 8001428:	f44f 41f0 	mov.w	r1, #30720	@ 0x7800
 800142c:	4859      	ldr	r0, [pc, #356]	@ (8001594 <MX_GPIO_Init+0x240>)
 800142e:	f002 f845 	bl	80034bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin, GPIO_PIN_RESET);
 8001432:	2200      	movs	r2, #0
 8001434:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8001438:	4857      	ldr	r0, [pc, #348]	@ (8001598 <MX_GPIO_Init+0x244>)
 800143a:	f002 f83f 	bl	80034bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800143e:	2308      	movs	r3, #8
 8001440:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001442:	2301      	movs	r3, #1
 8001444:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144a:	2300      	movs	r3, #0
 800144c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800144e:	f107 031c 	add.w	r3, r7, #28
 8001452:	4619      	mov	r1, r3
 8001454:	484d      	ldr	r0, [pc, #308]	@ (800158c <MX_GPIO_Init+0x238>)
 8001456:	f001 fe7d 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800145a:	2301      	movs	r3, #1
 800145c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145e:	2301      	movs	r3, #1
 8001460:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001466:	2300      	movs	r3, #0
 8001468:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800146a:	f107 031c 	add.w	r3, r7, #28
 800146e:	4619      	mov	r1, r3
 8001470:	4847      	ldr	r0, [pc, #284]	@ (8001590 <MX_GPIO_Init+0x23c>)
 8001472:	f001 fe6f 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001476:	2308      	movs	r3, #8
 8001478:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147a:	2302      	movs	r3, #2
 800147c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001482:	2300      	movs	r3, #0
 8001484:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001486:	2305      	movs	r3, #5
 8001488:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800148a:	f107 031c 	add.w	r3, r7, #28
 800148e:	4619      	mov	r1, r3
 8001490:	483f      	ldr	r0, [pc, #252]	@ (8001590 <MX_GPIO_Init+0x23c>)
 8001492:	f001 fe5f 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pin : i_am_speed_Pin */
  GPIO_InitStruct.Pin = i_am_speed_Pin;
 8001496:	2301      	movs	r3, #1
 8001498:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800149a:	2300      	movs	r3, #0
 800149c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(i_am_speed_GPIO_Port, &GPIO_InitStruct);
 80014a2:	f107 031c 	add.w	r3, r7, #28
 80014a6:	4619      	mov	r1, r3
 80014a8:	483c      	ldr	r0, [pc, #240]	@ (800159c <MX_GPIO_Init+0x248>)
 80014aa:	f001 fe53 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80014ae:	2304      	movs	r3, #4
 80014b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014b2:	2300      	movs	r3, #0
 80014b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80014ba:	f107 031c 	add.w	r3, r7, #28
 80014be:	4619      	mov	r1, r3
 80014c0:	4834      	ldr	r0, [pc, #208]	@ (8001594 <MX_GPIO_Init+0x240>)
 80014c2:	f001 fe47 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80014c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014cc:	2302      	movs	r3, #2
 80014ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d4:	2300      	movs	r3, #0
 80014d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014d8:	2305      	movs	r3, #5
 80014da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80014dc:	f107 031c 	add.w	r3, r7, #28
 80014e0:	4619      	mov	r1, r3
 80014e2:	482c      	ldr	r0, [pc, #176]	@ (8001594 <MX_GPIO_Init+0x240>)
 80014e4:	f001 fe36 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pins : MI0_Pin MI1_Pin MD0_Pin MD1_Pin */
  GPIO_InitStruct.Pin = MI0_Pin | MI1_Pin | MD0_Pin | MD1_Pin;
 80014e8:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 80014ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ee:	2301      	movs	r3, #1
 80014f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f6:	2300      	movs	r3, #0
 80014f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014fa:	f107 031c 	add.w	r3, r7, #28
 80014fe:	4619      	mov	r1, r3
 8001500:	4824      	ldr	r0, [pc, #144]	@ (8001594 <MX_GPIO_Init+0x240>)
 8001502:	f001 fe27 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin;
 8001506:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800150a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150c:	2301      	movs	r3, #1
 800150e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001514:	2300      	movs	r3, #0
 8001516:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001518:	f107 031c 	add.w	r3, r7, #28
 800151c:	4619      	mov	r1, r3
 800151e:	481e      	ldr	r0, [pc, #120]	@ (8001598 <MX_GPIO_Init+0x244>)
 8001520:	f001 fe18 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pins : WallSensor_Pin LineSensor_Pin */
  GPIO_InitStruct.Pin = WallSensor_Pin | LineSensor_Pin;
 8001524:	23c0      	movs	r3, #192	@ 0xc0
 8001526:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001528:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800152c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001532:	f107 031c 	add.w	r3, r7, #28
 8001536:	4619      	mov	r1, r3
 8001538:	4815      	ldr	r0, [pc, #84]	@ (8001590 <MX_GPIO_Init+0x23c>)
 800153a:	f001 fe0b 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800153e:	2320      	movs	r3, #32
 8001540:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001542:	2300      	movs	r3, #0
 8001544:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800154a:	f107 031c 	add.w	r3, r7, #28
 800154e:	4619      	mov	r1, r3
 8001550:	4811      	ldr	r0, [pc, #68]	@ (8001598 <MX_GPIO_Init+0x244>)
 8001552:	f001 fdff 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001556:	2302      	movs	r3, #2
 8001558:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800155a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800155e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001564:	f107 031c 	add.w	r3, r7, #28
 8001568:	4619      	mov	r1, r3
 800156a:	4808      	ldr	r0, [pc, #32]	@ (800158c <MX_GPIO_Init+0x238>)
 800156c:	f001 fdf2 	bl	8003154 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0); // Prioridad alta para ambos sensores
 8001570:	2200      	movs	r2, #0
 8001572:	2101      	movs	r1, #1
 8001574:	2017      	movs	r0, #23
 8001576:	f001 fa38 	bl	80029ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800157a:	2017      	movs	r0, #23
 800157c:	f001 fa51 	bl	8002a22 <HAL_NVIC_EnableIRQ>

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001580:	bf00      	nop
 8001582:	3730      	adds	r7, #48	@ 0x30
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40023800 	.word	0x40023800
 800158c:	40021000 	.word	0x40021000
 8001590:	40020800 	.word	0x40020800
 8001594:	40020400 	.word	0x40020400
 8001598:	40020c00 	.word	0x40020c00
 800159c:	40020000 	.word	0x40020000

080015a0 <actualizar_posicion>:

/* USER CODE BEGIN 4 */
// FUNCION QUE ACTUALIZA LA POSICION CADA VEZ QUE SE CRUZA UNA LINEA
void actualizar_posicion(uint8_t *fila, uint8_t *columna, brujula sentido)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	4613      	mov	r3, r2
 80015ac:	71fb      	strb	r3, [r7, #7]
  switch (sentido)
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	2b03      	cmp	r3, #3
 80015b2:	d827      	bhi.n	8001604 <actualizar_posicion+0x64>
 80015b4:	a201      	add	r2, pc, #4	@ (adr r2, 80015bc <actualizar_posicion+0x1c>)
 80015b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ba:	bf00      	nop
 80015bc:	080015cd 	.word	0x080015cd
 80015c0:	080015db 	.word	0x080015db
 80015c4:	080015e9 	.word	0x080015e9
 80015c8:	080015f7 	.word	0x080015f7
  {
  case norte:
    (*fila)--;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	3b01      	subs	r3, #1
 80015d2:	b2da      	uxtb	r2, r3
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	701a      	strb	r2, [r3, #0]
    break;
 80015d8:	e014      	b.n	8001604 <actualizar_posicion+0x64>
  case este:
    (*columna)++;
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	3301      	adds	r3, #1
 80015e0:	b2da      	uxtb	r2, r3
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	701a      	strb	r2, [r3, #0]
    break;
 80015e6:	e00d      	b.n	8001604 <actualizar_posicion+0x64>
  case sur:
    (*fila)++;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	3301      	adds	r3, #1
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	701a      	strb	r2, [r3, #0]
    break;
 80015f4:	e006      	b.n	8001604 <actualizar_posicion+0x64>
  case oeste:
    (*columna)--;
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	3b01      	subs	r3, #1
 80015fc:	b2da      	uxtb	r2, r3
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	701a      	strb	r2, [r3, #0]
    break;
 8001602:	bf00      	nop
  }
}
 8001604:	bf00      	nop
 8001606:	3714      	adds	r7, #20
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <chequeolinea>:

// FUNCION CHEQUEO LINEA
void chequeolinea(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
  // if (antirebote(LineSensor_GPIO_Port, LineSensor_Pin))
  // {
  // RETARDO DE UNOS MS
  HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8001616:	2017      	movs	r0, #23
 8001618:	f001 fa11 	bl	8002a3e <HAL_NVIC_DisableIRQ>
  HAL_Delay(TIEMPO_AVANCE_LINEA); // por si es sprint o no
 800161c:	4b1a      	ldr	r3, [pc, #104]	@ (8001688 <chequeolinea+0x78>)
 800161e:	881b      	ldrh	r3, [r3, #0]
 8001620:	4618      	mov	r0, r3
 8001622:	f000 fcbd 	bl	8001fa0 <HAL_Delay>

  // Actualizar posición
  actualizar_posicion(&fila_actual, &columna_actual, sentido_actual);
 8001626:	4b19      	ldr	r3, [pc, #100]	@ (800168c <chequeolinea+0x7c>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	461a      	mov	r2, r3
 800162c:	4918      	ldr	r1, [pc, #96]	@ (8001690 <chequeolinea+0x80>)
 800162e:	4819      	ldr	r0, [pc, #100]	@ (8001694 <chequeolinea+0x84>)
 8001630:	f7ff ffb6 	bl	80015a0 <actualizar_posicion>

  // terminó?
  if (fila_actual == 1 && columna_actual == 1)
 8001634:	4b17      	ldr	r3, [pc, #92]	@ (8001694 <chequeolinea+0x84>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d109      	bne.n	8001650 <chequeolinea+0x40>
 800163c:	4b14      	ldr	r3, [pc, #80]	@ (8001690 <chequeolinea+0x80>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d105      	bne.n	8001650 <chequeolinea+0x40>
  {
    termino();
 8001644:	f7ff fa46 	bl	8000ad4 <termino>
    terminado = true;
 8001648:	4b13      	ldr	r3, [pc, #76]	@ (8001698 <chequeolinea+0x88>)
 800164a:	2201      	movs	r2, #1
 800164c:	701a      	strb	r2, [r3, #0]
    return;
 800164e:	e017      	b.n	8001680 <chequeolinea+0x70>
  }

  // Calcular y ejecutar
  brujula sentido_deseado = calcular_mejor_direccion(fila_actual, columna_actual); // funcion definida en navegacion.h
 8001650:	4b10      	ldr	r3, [pc, #64]	@ (8001694 <chequeolinea+0x84>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	4a0e      	ldr	r2, [pc, #56]	@ (8001690 <chequeolinea+0x80>)
 8001656:	7812      	ldrb	r2, [r2, #0]
 8001658:	4611      	mov	r1, r2
 800165a:	4618      	mov	r0, r3
 800165c:	f000 f8d2 	bl	8001804 <calcular_mejor_direccion>
 8001660:	4603      	mov	r3, r0
 8001662:	71fb      	strb	r3, [r7, #7]
  sentido_actual = ejecutar_movimiento(sentido_actual, sentido_deseado);           // funcion definida en navegacion.h
 8001664:	4b09      	ldr	r3, [pc, #36]	@ (800168c <chequeolinea+0x7c>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	79fa      	ldrb	r2, [r7, #7]
 800166a:	4611      	mov	r1, r2
 800166c:	4618      	mov	r0, r3
 800166e:	f000 f917 	bl	80018a0 <ejecutar_movimiento>
 8001672:	4603      	mov	r3, r0
 8001674:	461a      	mov	r2, r3
 8001676:	4b05      	ldr	r3, [pc, #20]	@ (800168c <chequeolinea+0x7c>)
 8001678:	701a      	strb	r2, [r3, #0]
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800167a:	2017      	movs	r0, #23
 800167c:	f001 f9d1 	bl	8002a22 <HAL_NVIC_EnableIRQ>
  //}
}
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000010 	.word	0x20000010
 800168c:	20000328 	.word	0x20000328
 8001690:	2000000f 	.word	0x2000000f
 8001694:	2000000e 	.word	0x2000000e
 8001698:	20000329 	.word	0x20000329

0800169c <chequeomuro>:

// FUNCION CHEQUEO MURO
void chequeomuro(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 80016a2:	2017      	movs	r0, #23
 80016a4:	f001 f9cb 	bl	8002a3e <HAL_NVIC_DisableIRQ>
  // if (antirebote(WallSensor_GPIO_Port, WallSensor_Pin))

  //{

  // 1. Registrar el muro detectado
  laberinto_set_muro(fila_actual, columna_actual, sentido_actual);
 80016a8:	4b13      	ldr	r3, [pc, #76]	@ (80016f8 <chequeomuro+0x5c>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	4a13      	ldr	r2, [pc, #76]	@ (80016fc <chequeomuro+0x60>)
 80016ae:	7811      	ldrb	r1, [r2, #0]
 80016b0:	4a13      	ldr	r2, [pc, #76]	@ (8001700 <chequeomuro+0x64>)
 80016b2:	7812      	ldrb	r2, [r2, #0]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff fa69 	bl	8000b8c <laberinto_set_muro>

  // 2. Recalcular todos los pesos con el nuevo muro
  laberinto_recalcular_pesos();
 80016ba:	f7ff fac9 	bl	8000c50 <laberinto_recalcular_pesos>

  // 3. Calcular nueva mejor dirección
  brujula sentido_deseado = calcular_mejor_direccion(fila_actual, columna_actual);
 80016be:	4b0e      	ldr	r3, [pc, #56]	@ (80016f8 <chequeomuro+0x5c>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	4a0e      	ldr	r2, [pc, #56]	@ (80016fc <chequeomuro+0x60>)
 80016c4:	7812      	ldrb	r2, [r2, #0]
 80016c6:	4611      	mov	r1, r2
 80016c8:	4618      	mov	r0, r3
 80016ca:	f000 f89b 	bl	8001804 <calcular_mejor_direccion>
 80016ce:	4603      	mov	r3, r0
 80016d0:	71fb      	strb	r3, [r7, #7]

  // 4. Ejecutar movimiento LO QUE HIZO EL COLO YA ACTUALIZA EL SENTIDO ACTUAL SOLO
  sentido_actual = ejecutar_movimiento(sentido_actual, sentido_deseado);
 80016d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001700 <chequeomuro+0x64>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	79fa      	ldrb	r2, [r7, #7]
 80016d8:	4611      	mov	r1, r2
 80016da:	4618      	mov	r0, r3
 80016dc:	f000 f8e0 	bl	80018a0 <ejecutar_movimiento>
 80016e0:	4603      	mov	r3, r0
 80016e2:	461a      	mov	r2, r3
 80016e4:	4b06      	ldr	r3, [pc, #24]	@ (8001700 <chequeomuro+0x64>)
 80016e6:	701a      	strb	r2, [r3, #0]
  //}
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80016e8:	2017      	movs	r0, #23
 80016ea:	f001 f99a 	bl	8002a22 <HAL_NVIC_EnableIRQ>
}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	2000000e 	.word	0x2000000e
 80016fc:	2000000f 	.word	0x2000000f
 8001700:	20000328 	.word	0x20000328

08001704 <reset_posicion_pushbutton>:

// VELOCIDAD
void reset_posicion_pushbutton(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  if (antirebote(i_am_speed_GPIO_Port, i_am_speed_Pin))
 8001708:	2101      	movs	r1, #1
 800170a:	480d      	ldr	r0, [pc, #52]	@ (8001740 <reset_posicion_pushbutton+0x3c>)
 800170c:	f7fe fef2 	bl	80004f4 <antirebote>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d011      	beq.n	800173a <reset_posicion_pushbutton+0x36>
  {

    // Resetear posición
    fila_actual = 4;
 8001716:	4b0b      	ldr	r3, [pc, #44]	@ (8001744 <reset_posicion_pushbutton+0x40>)
 8001718:	2204      	movs	r2, #4
 800171a:	701a      	strb	r2, [r3, #0]
    columna_actual = 4;
 800171c:	4b0a      	ldr	r3, [pc, #40]	@ (8001748 <reset_posicion_pushbutton+0x44>)
 800171e:	2204      	movs	r2, #4
 8001720:	701a      	strb	r2, [r3, #0]
    sentido_actual = norte;
 8001722:	4b0a      	ldr	r3, [pc, #40]	@ (800174c <reset_posicion_pushbutton+0x48>)
 8001724:	2200      	movs	r2, #0
 8001726:	701a      	strb	r2, [r3, #0]
    terminado = false;
 8001728:	4b09      	ldr	r3, [pc, #36]	@ (8001750 <reset_posicion_pushbutton+0x4c>)
 800172a:	2200      	movs	r2, #0
 800172c:	701a      	strb	r2, [r3, #0]

    // ⚡ I AM SPEED!
    activar_modo_sprint();     // Esta función está en control_motor.c
 800172e:	f7ff f877 	bl	8000820 <activar_modo_sprint>
    TIEMPO_AVANCE_LINEA = 400; // Reducir tiempo de avance a 400 ms
 8001732:	4b08      	ldr	r3, [pc, #32]	@ (8001754 <reset_posicion_pushbutton+0x50>)
 8001734:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001738:	801a      	strh	r2, [r3, #0]
  }
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40020000 	.word	0x40020000
 8001744:	2000000e 	.word	0x2000000e
 8001748:	2000000f 	.word	0x2000000f
 800174c:	20000328 	.word	0x20000328
 8001750:	20000329 	.word	0x20000329
 8001754:	20000010 	.word	0x20000010

08001758 <HAL_GPIO_EXTI_Callback>:

// ATENCION A LA INTERRUPCION
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == LineSensor_Pin)
 8001762:	88fb      	ldrh	r3, [r7, #6]
 8001764:	2b80      	cmp	r3, #128	@ 0x80
 8001766:	d11b      	bne.n	80017a0 <HAL_GPIO_EXTI_Callback+0x48>
  {
    // Leer estado actual del sensor
    bool estado_actual = HAL_GPIO_ReadPin(LineSensor_GPIO_Port, LineSensor_Pin);
 8001768:	2180      	movs	r1, #128	@ 0x80
 800176a:	481e      	ldr	r0, [pc, #120]	@ (80017e4 <HAL_GPIO_EXTI_Callback+0x8c>)
 800176c:	f001 fe8e 	bl	800348c <HAL_GPIO_ReadPin>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	bf14      	ite	ne
 8001776:	2301      	movne	r3, #1
 8001778:	2300      	moveq	r3, #0
 800177a:	73bb      	strb	r3, [r7, #14]

    // Solo activar flag si hubo transición HIGH → LOW
    if (ultimo_estado_linea == true && estado_actual == false)
 800177c:	4b1a      	ldr	r3, [pc, #104]	@ (80017e8 <HAL_GPIO_EXTI_Callback+0x90>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2b00      	cmp	r3, #0
 8001784:	d008      	beq.n	8001798 <HAL_GPIO_EXTI_Callback+0x40>
 8001786:	7bbb      	ldrb	r3, [r7, #14]
 8001788:	f083 0301 	eor.w	r3, r3, #1
 800178c:	b2db      	uxtb	r3, r3
 800178e:	2b00      	cmp	r3, #0
 8001790:	d002      	beq.n	8001798 <HAL_GPIO_EXTI_Callback+0x40>
    {
      flag_linea_detectada = true;
 8001792:	4b16      	ldr	r3, [pc, #88]	@ (80017ec <HAL_GPIO_EXTI_Callback+0x94>)
 8001794:	2201      	movs	r2, #1
 8001796:	701a      	strb	r2, [r3, #0]
    }

    // Actualizar último estado
    ultimo_estado_linea = estado_actual;
 8001798:	4a13      	ldr	r2, [pc, #76]	@ (80017e8 <HAL_GPIO_EXTI_Callback+0x90>)
 800179a:	7bbb      	ldrb	r3, [r7, #14]
 800179c:	7013      	strb	r3, [r2, #0]
    }

    // Actualizar último estado
    ultimo_estado_muro = estado_actual;
  }
}
 800179e:	e01d      	b.n	80017dc <HAL_GPIO_EXTI_Callback+0x84>
  else if (GPIO_Pin == WallSensor_Pin)
 80017a0:	88fb      	ldrh	r3, [r7, #6]
 80017a2:	2b40      	cmp	r3, #64	@ 0x40
 80017a4:	d11a      	bne.n	80017dc <HAL_GPIO_EXTI_Callback+0x84>
    bool estado_actual = HAL_GPIO_ReadPin(WallSensor_GPIO_Port, WallSensor_Pin);
 80017a6:	2140      	movs	r1, #64	@ 0x40
 80017a8:	480e      	ldr	r0, [pc, #56]	@ (80017e4 <HAL_GPIO_EXTI_Callback+0x8c>)
 80017aa:	f001 fe6f 	bl	800348c <HAL_GPIO_ReadPin>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	bf14      	ite	ne
 80017b4:	2301      	movne	r3, #1
 80017b6:	2300      	moveq	r3, #0
 80017b8:	73fb      	strb	r3, [r7, #15]
    if (ultimo_estado_muro == true && estado_actual == false)
 80017ba:	4b0d      	ldr	r3, [pc, #52]	@ (80017f0 <HAL_GPIO_EXTI_Callback+0x98>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d008      	beq.n	80017d6 <HAL_GPIO_EXTI_Callback+0x7e>
 80017c4:	7bfb      	ldrb	r3, [r7, #15]
 80017c6:	f083 0301 	eor.w	r3, r3, #1
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d002      	beq.n	80017d6 <HAL_GPIO_EXTI_Callback+0x7e>
      flag_muro_detectado = true;
 80017d0:	4b08      	ldr	r3, [pc, #32]	@ (80017f4 <HAL_GPIO_EXTI_Callback+0x9c>)
 80017d2:	2201      	movs	r2, #1
 80017d4:	701a      	strb	r2, [r3, #0]
    ultimo_estado_muro = estado_actual;
 80017d6:	4a06      	ldr	r2, [pc, #24]	@ (80017f0 <HAL_GPIO_EXTI_Callback+0x98>)
 80017d8:	7bfb      	ldrb	r3, [r7, #15]
 80017da:	7013      	strb	r3, [r2, #0]
}
 80017dc:	bf00      	nop
 80017de:	3710      	adds	r7, #16
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40020800 	.word	0x40020800
 80017e8:	20000012 	.word	0x20000012
 80017ec:	200004bc 	.word	0x200004bc
 80017f0:	20000013 	.word	0x20000013
 80017f4:	200004bd 	.word	0x200004bd

080017f8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017fc:	b672      	cpsid	i
}
 80017fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001800:	bf00      	nop
 8001802:	e7fd      	b.n	8001800 <Error_Handler+0x8>

08001804 <calcular_mejor_direccion>:
 */

 #include "navegacion.h"

 brujula calcular_mejor_direccion(uint8_t fila_actual, uint8_t columna_actual) //nos devuelve direccion en TIPO BRUJULA gracias colo
 {
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	460a      	mov	r2, r1
 800180e:	71fb      	strb	r3, [r7, #7]
 8001810:	4613      	mov	r3, r2
 8001812:	71bb      	strb	r3, [r7, #6]
     uint8_t peso_minimo = PESO_MAXIMO;
 8001814:	23ff      	movs	r3, #255	@ 0xff
 8001816:	75fb      	strb	r3, [r7, #23]
     brujula mejor_direccion = norte; // Dirección por defecto
 8001818:	2300      	movs	r3, #0
 800181a:	75bb      	strb	r3, [r7, #22]
     
     // Evaluar las 4 direcciones posibles
     for (brujula direccion = norte; direccion <= oeste; direccion++) {
 800181c:	2300      	movs	r3, #0
 800181e:	757b      	strb	r3, [r7, #21]
 8001820:	e036      	b.n	8001890 <calcular_mejor_direccion+0x8c>
         
         // 1. ¿Hay muro en esta dirección?
         if (laberinto_hay_muro(fila_actual, columna_actual, direccion)) {
 8001822:	7d7a      	ldrb	r2, [r7, #21]
 8001824:	79b9      	ldrb	r1, [r7, #6]
 8001826:	79fb      	ldrb	r3, [r7, #7]
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff fabd 	bl	8000da8 <laberinto_hay_muro>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d127      	bne.n	8001884 <calcular_mejor_direccion+0x80>
             continue; // Saltar si hay muro
         }
         
         // 2. Obtener posición adyacente
         posicion_t pos_adyacente = laberinto_get_posicion_adyacente(
             (posicion_t){fila_actual, columna_actual}, direccion);
 8001834:	79fb      	ldrb	r3, [r7, #7]
 8001836:	733b      	strb	r3, [r7, #12]
 8001838:	79bb      	ldrb	r3, [r7, #6]
 800183a:	737b      	strb	r3, [r7, #13]
         posicion_t pos_adyacente = laberinto_get_posicion_adyacente(
 800183c:	7d7b      	ldrb	r3, [r7, #21]
 800183e:	4619      	mov	r1, r3
 8001840:	68f8      	ldr	r0, [r7, #12]
 8001842:	f7ff fae1 	bl	8000e08 <laberinto_get_posicion_adyacente>
 8001846:	4603      	mov	r3, r0
 8001848:	823b      	strh	r3, [r7, #16]
         
         // 3. ¿Es válida? (no salirse del laberinto)
         if (!laberinto_posicion_valida(pos_adyacente.fila, pos_adyacente.columna)) {
 800184a:	7c3b      	ldrb	r3, [r7, #16]
 800184c:	7c7a      	ldrb	r2, [r7, #17]
 800184e:	4611      	mov	r1, r2
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff fb13 	bl	8000e7c <laberinto_posicion_valida>
 8001856:	4603      	mov	r3, r0
 8001858:	f083 0301 	eor.w	r3, r3, #1
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2b00      	cmp	r3, #0
 8001860:	d112      	bne.n	8001888 <calcular_mejor_direccion+0x84>
             continue; // Saltar si está fuera del laberinto
         }
         
         // 4. Obtener peso de la casilla adyacente
         uint8_t peso_adyacente = laberinto_get_peso(pos_adyacente.fila, pos_adyacente.columna);
 8001862:	7c3b      	ldrb	r3, [r7, #16]
 8001864:	7c7a      	ldrb	r2, [r7, #17]
 8001866:	4611      	mov	r1, r2
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff f963 	bl	8000b34 <laberinto_get_peso>
 800186e:	4603      	mov	r3, r0
 8001870:	753b      	strb	r3, [r7, #20]
         
         // 5. ¿Es el mejor peso hasta ahora?
         if (peso_adyacente < peso_minimo) {
 8001872:	7d3a      	ldrb	r2, [r7, #20]
 8001874:	7dfb      	ldrb	r3, [r7, #23]
 8001876:	429a      	cmp	r2, r3
 8001878:	d207      	bcs.n	800188a <calcular_mejor_direccion+0x86>
             peso_minimo = peso_adyacente;
 800187a:	7d3b      	ldrb	r3, [r7, #20]
 800187c:	75fb      	strb	r3, [r7, #23]
             mejor_direccion = direccion;
 800187e:	7d7b      	ldrb	r3, [r7, #21]
 8001880:	75bb      	strb	r3, [r7, #22]
 8001882:	e002      	b.n	800188a <calcular_mejor_direccion+0x86>
             continue; // Saltar si hay muro
 8001884:	bf00      	nop
 8001886:	e000      	b.n	800188a <calcular_mejor_direccion+0x86>
             continue; // Saltar si está fuera del laberinto
 8001888:	bf00      	nop
     for (brujula direccion = norte; direccion <= oeste; direccion++) {
 800188a:	7d7b      	ldrb	r3, [r7, #21]
 800188c:	3301      	adds	r3, #1
 800188e:	757b      	strb	r3, [r7, #21]
 8001890:	7d7b      	ldrb	r3, [r7, #21]
 8001892:	2b03      	cmp	r3, #3
 8001894:	d9c5      	bls.n	8001822 <calcular_mejor_direccion+0x1e>
         }
     }
     
     return mejor_direccion;
 8001896:	7dbb      	ldrb	r3, [r7, #22]
 }
 8001898:	4618      	mov	r0, r3
 800189a:	3718      	adds	r7, #24
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <ejecutar_movimiento>:

 brujula ejecutar_movimiento(brujula sentido_actual, brujula sentido_deseado)
 {
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	460a      	mov	r2, r1
 80018aa:	71fb      	strb	r3, [r7, #7]
 80018ac:	4613      	mov	r3, r2
 80018ae:	71bb      	strb	r3, [r7, #6]
     // ¿Ya está orientado correctamente?
     if (sentido_actual == sentido_deseado)
 80018b0:	79fa      	ldrb	r2, [r7, #7]
 80018b2:	79bb      	ldrb	r3, [r7, #6]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d103      	bne.n	80018c0 <ejecutar_movimiento+0x20>
     {
         avanza(); // Solo avanzar
 80018b8:	f7ff f858 	bl	800096c <avanza>
         return sentido_actual;
 80018bc:	79fb      	ldrb	r3, [r7, #7]
 80018be:	e02d      	b.n	800191c <ejecutar_movimiento+0x7c>
     }

     // Calcular diferencia usando aritmética xq es un tipo brujula
     // norte=0, este=1, sur=2, oeste=3
     int diferencia = (sentido_deseado - sentido_actual + 4) % 4;
 80018c0:	79ba      	ldrb	r2, [r7, #6]
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	3304      	adds	r3, #4
 80018c8:	425a      	negs	r2, r3
 80018ca:	f003 0303 	and.w	r3, r3, #3
 80018ce:	f002 0203 	and.w	r2, r2, #3
 80018d2:	bf58      	it	pl
 80018d4:	4253      	negpl	r3, r2
 80018d6:	60fb      	str	r3, [r7, #12]

     switch (diferencia)
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2b03      	cmp	r3, #3
 80018dc:	d015      	beq.n	800190a <ejecutar_movimiento+0x6a>
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2b03      	cmp	r3, #3
 80018e2:	dc18      	bgt.n	8001916 <ejecutar_movimiento+0x76>
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d003      	beq.n	80018f2 <ejecutar_movimiento+0x52>
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d006      	beq.n	80018fe <ejecutar_movimiento+0x5e>
 80018f0:	e011      	b.n	8001916 <ejecutar_movimiento+0x76>
     {
     case 1: // Girar 90° a la derecha
         return gira90der(sentido_actual);
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff f881 	bl	80009fc <gira90der>
 80018fa:	4603      	mov	r3, r0
 80018fc:	e00e      	b.n	800191c <ejecutar_movimiento+0x7c>

     case 2: // Girar 180° (media vuelta)
         return gira180(sentido_actual);
 80018fe:	79fb      	ldrb	r3, [r7, #7]
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff f8b1 	bl	8000a68 <gira180>
 8001906:	4603      	mov	r3, r0
 8001908:	e008      	b.n	800191c <ejecutar_movimiento+0x7c>

     case 3: // Girar 90° a la izquierda
         return gira90izq(sentido_actual);
 800190a:	79fb      	ldrb	r3, [r7, #7]
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff f83f 	bl	8000990 <gira90izq>
 8001912:	4603      	mov	r3, r0
 8001914:	e002      	b.n	800191c <ejecutar_movimiento+0x7c>

     default: // No debería pasar (caso 0) pero pola dice que siempre se pone default
         avanza();
 8001916:	f7ff f829 	bl	800096c <avanza>
         return sentido_actual;
 800191a:	79fb      	ldrb	r3, [r7, #7]
     }
 800191c:	4618      	mov	r0, r3
 800191e:	3710      	adds	r7, #16
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	607b      	str	r3, [r7, #4]
 800192e:	4b10      	ldr	r3, [pc, #64]	@ (8001970 <HAL_MspInit+0x4c>)
 8001930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001932:	4a0f      	ldr	r2, [pc, #60]	@ (8001970 <HAL_MspInit+0x4c>)
 8001934:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001938:	6453      	str	r3, [r2, #68]	@ 0x44
 800193a:	4b0d      	ldr	r3, [pc, #52]	@ (8001970 <HAL_MspInit+0x4c>)
 800193c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800193e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001942:	607b      	str	r3, [r7, #4]
 8001944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	603b      	str	r3, [r7, #0]
 800194a:	4b09      	ldr	r3, [pc, #36]	@ (8001970 <HAL_MspInit+0x4c>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194e:	4a08      	ldr	r2, [pc, #32]	@ (8001970 <HAL_MspInit+0x4c>)
 8001950:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001954:	6413      	str	r3, [r2, #64]	@ 0x40
 8001956:	4b06      	ldr	r3, [pc, #24]	@ (8001970 <HAL_MspInit+0x4c>)
 8001958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800195e:	603b      	str	r3, [r7, #0]
 8001960:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001962:	2007      	movs	r0, #7
 8001964:	f001 f836 	bl	80029d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001968:	bf00      	nop
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40023800 	.word	0x40023800

08001974 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b08a      	sub	sp, #40	@ 0x28
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a2f      	ldr	r2, [pc, #188]	@ (8001a50 <HAL_ADC_MspInit+0xdc>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d157      	bne.n	8001a46 <HAL_ADC_MspInit+0xd2>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	613b      	str	r3, [r7, #16]
 800199a:	4b2e      	ldr	r3, [pc, #184]	@ (8001a54 <HAL_ADC_MspInit+0xe0>)
 800199c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800199e:	4a2d      	ldr	r2, [pc, #180]	@ (8001a54 <HAL_ADC_MspInit+0xe0>)
 80019a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80019a6:	4b2b      	ldr	r3, [pc, #172]	@ (8001a54 <HAL_ADC_MspInit+0xe0>)
 80019a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019ae:	613b      	str	r3, [r7, #16]
 80019b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	4b27      	ldr	r3, [pc, #156]	@ (8001a54 <HAL_ADC_MspInit+0xe0>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ba:	4a26      	ldr	r2, [pc, #152]	@ (8001a54 <HAL_ADC_MspInit+0xe0>)
 80019bc:	f043 0302 	orr.w	r3, r3, #2
 80019c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019c2:	4b24      	ldr	r3, [pc, #144]	@ (8001a54 <HAL_ADC_MspInit+0xe0>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = RightSensor_Pin|LeftSensor_Pin;
 80019ce:	2303      	movs	r3, #3
 80019d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019d2:	2303      	movs	r3, #3
 80019d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019da:	f107 0314 	add.w	r3, r7, #20
 80019de:	4619      	mov	r1, r3
 80019e0:	481d      	ldr	r0, [pc, #116]	@ (8001a58 <HAL_ADC_MspInit+0xe4>)
 80019e2:	f001 fbb7 	bl	8003154 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80019e6:	4b1d      	ldr	r3, [pc, #116]	@ (8001a5c <HAL_ADC_MspInit+0xe8>)
 80019e8:	4a1d      	ldr	r2, [pc, #116]	@ (8001a60 <HAL_ADC_MspInit+0xec>)
 80019ea:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80019ec:	4b1b      	ldr	r3, [pc, #108]	@ (8001a5c <HAL_ADC_MspInit+0xe8>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019f2:	4b1a      	ldr	r3, [pc, #104]	@ (8001a5c <HAL_ADC_MspInit+0xe8>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80019f8:	4b18      	ldr	r3, [pc, #96]	@ (8001a5c <HAL_ADC_MspInit+0xe8>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80019fe:	4b17      	ldr	r3, [pc, #92]	@ (8001a5c <HAL_ADC_MspInit+0xe8>)
 8001a00:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a04:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a06:	4b15      	ldr	r3, [pc, #84]	@ (8001a5c <HAL_ADC_MspInit+0xe8>)
 8001a08:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001a0c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a0e:	4b13      	ldr	r3, [pc, #76]	@ (8001a5c <HAL_ADC_MspInit+0xe8>)
 8001a10:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a14:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001a16:	4b11      	ldr	r3, [pc, #68]	@ (8001a5c <HAL_ADC_MspInit+0xe8>)
 8001a18:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a1c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001a1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a5c <HAL_ADC_MspInit+0xe8>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a24:	4b0d      	ldr	r3, [pc, #52]	@ (8001a5c <HAL_ADC_MspInit+0xe8>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a2a:	480c      	ldr	r0, [pc, #48]	@ (8001a5c <HAL_ADC_MspInit+0xe8>)
 8001a2c:	f001 f822 	bl	8002a74 <HAL_DMA_Init>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001a36:	f7ff fedf 	bl	80017f8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a07      	ldr	r2, [pc, #28]	@ (8001a5c <HAL_ADC_MspInit+0xe8>)
 8001a3e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001a40:	4a06      	ldr	r2, [pc, #24]	@ (8001a5c <HAL_ADC_MspInit+0xe8>)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001a46:	bf00      	nop
 8001a48:	3728      	adds	r7, #40	@ 0x28
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40012000 	.word	0x40012000
 8001a54:	40023800 	.word	0x40023800
 8001a58:	40020400 	.word	0x40020400
 8001a5c:	2000018c 	.word	0x2000018c
 8001a60:	40026410 	.word	0x40026410

08001a64 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b08a      	sub	sp, #40	@ 0x28
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6c:	f107 0314 	add.w	r3, r7, #20
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	605a      	str	r2, [r3, #4]
 8001a76:	609a      	str	r2, [r3, #8]
 8001a78:	60da      	str	r2, [r3, #12]
 8001a7a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a19      	ldr	r2, [pc, #100]	@ (8001ae8 <HAL_I2C_MspInit+0x84>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d12c      	bne.n	8001ae0 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	613b      	str	r3, [r7, #16]
 8001a8a:	4b18      	ldr	r3, [pc, #96]	@ (8001aec <HAL_I2C_MspInit+0x88>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8e:	4a17      	ldr	r2, [pc, #92]	@ (8001aec <HAL_I2C_MspInit+0x88>)
 8001a90:	f043 0302 	orr.w	r3, r3, #2
 8001a94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a96:	4b15      	ldr	r3, [pc, #84]	@ (8001aec <HAL_I2C_MspInit+0x88>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	613b      	str	r3, [r7, #16]
 8001aa0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001aa2:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001aa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001aa8:	2312      	movs	r3, #18
 8001aaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aac:	2301      	movs	r3, #1
 8001aae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ab4:	2304      	movs	r3, #4
 8001ab6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab8:	f107 0314 	add.w	r3, r7, #20
 8001abc:	4619      	mov	r1, r3
 8001abe:	480c      	ldr	r0, [pc, #48]	@ (8001af0 <HAL_I2C_MspInit+0x8c>)
 8001ac0:	f001 fb48 	bl	8003154 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	4b08      	ldr	r3, [pc, #32]	@ (8001aec <HAL_I2C_MspInit+0x88>)
 8001aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001acc:	4a07      	ldr	r2, [pc, #28]	@ (8001aec <HAL_I2C_MspInit+0x88>)
 8001ace:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001ad2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ad4:	4b05      	ldr	r3, [pc, #20]	@ (8001aec <HAL_I2C_MspInit+0x88>)
 8001ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001ae0:	bf00      	nop
 8001ae2:	3728      	adds	r7, #40	@ 0x28
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40005400 	.word	0x40005400
 8001aec:	40023800 	.word	0x40023800
 8001af0:	40020400 	.word	0x40020400

08001af4 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b08e      	sub	sp, #56	@ 0x38
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001afc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	605a      	str	r2, [r3, #4]
 8001b06:	609a      	str	r2, [r3, #8]
 8001b08:	60da      	str	r2, [r3, #12]
 8001b0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b0c:	f107 0314 	add.w	r3, r7, #20
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	609a      	str	r2, [r3, #8]
 8001b18:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a31      	ldr	r2, [pc, #196]	@ (8001be4 <HAL_I2S_MspInit+0xf0>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d15a      	bne.n	8001bda <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001b24:	2301      	movs	r3, #1
 8001b26:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001b28:	23c0      	movs	r3, #192	@ 0xc0
 8001b2a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b30:	f107 0314 	add.w	r3, r7, #20
 8001b34:	4618      	mov	r0, r3
 8001b36:	f005 f88f 	bl	8006c58 <HAL_RCCEx_PeriphCLKConfig>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001b40:	f7ff fe5a 	bl	80017f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001b44:	2300      	movs	r3, #0
 8001b46:	613b      	str	r3, [r7, #16]
 8001b48:	4b27      	ldr	r3, [pc, #156]	@ (8001be8 <HAL_I2S_MspInit+0xf4>)
 8001b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4c:	4a26      	ldr	r2, [pc, #152]	@ (8001be8 <HAL_I2S_MspInit+0xf4>)
 8001b4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b52:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b54:	4b24      	ldr	r3, [pc, #144]	@ (8001be8 <HAL_I2S_MspInit+0xf4>)
 8001b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b5c:	613b      	str	r3, [r7, #16]
 8001b5e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b60:	2300      	movs	r3, #0
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	4b20      	ldr	r3, [pc, #128]	@ (8001be8 <HAL_I2S_MspInit+0xf4>)
 8001b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b68:	4a1f      	ldr	r2, [pc, #124]	@ (8001be8 <HAL_I2S_MspInit+0xf4>)
 8001b6a:	f043 0301 	orr.w	r3, r3, #1
 8001b6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b70:	4b1d      	ldr	r3, [pc, #116]	@ (8001be8 <HAL_I2S_MspInit+0xf4>)
 8001b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b74:	f003 0301 	and.w	r3, r3, #1
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	60bb      	str	r3, [r7, #8]
 8001b80:	4b19      	ldr	r3, [pc, #100]	@ (8001be8 <HAL_I2S_MspInit+0xf4>)
 8001b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b84:	4a18      	ldr	r2, [pc, #96]	@ (8001be8 <HAL_I2S_MspInit+0xf4>)
 8001b86:	f043 0304 	orr.w	r3, r3, #4
 8001b8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b8c:	4b16      	ldr	r3, [pc, #88]	@ (8001be8 <HAL_I2S_MspInit+0xf4>)
 8001b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b90:	f003 0304 	and.w	r3, r3, #4
 8001b94:	60bb      	str	r3, [r7, #8]
 8001b96:	68bb      	ldr	r3, [r7, #8]
    /**I2S3 GPIO Configuration
    PA4     ------> I2S3_WS
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001b98:	2310      	movs	r3, #16
 8001b9a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ba8:	2306      	movs	r3, #6
 8001baa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001bac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	480e      	ldr	r0, [pc, #56]	@ (8001bec <HAL_I2S_MspInit+0xf8>)
 8001bb4:	f001 face 	bl	8003154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_SCK_Pin|I2S3_SD_Pin;
 8001bb8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001bbc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001bca:	2306      	movs	r3, #6
 8001bcc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4806      	ldr	r0, [pc, #24]	@ (8001bf0 <HAL_I2S_MspInit+0xfc>)
 8001bd6:	f001 fabd 	bl	8003154 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001bda:	bf00      	nop
 8001bdc:	3738      	adds	r7, #56	@ 0x38
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40003c00 	.word	0x40003c00
 8001be8:	40023800 	.word	0x40023800
 8001bec:	40020000 	.word	0x40020000
 8001bf0:	40020800 	.word	0x40020800

08001bf4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b08a      	sub	sp, #40	@ 0x28
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bfc:	f107 0314 	add.w	r3, r7, #20
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	605a      	str	r2, [r3, #4]
 8001c06:	609a      	str	r2, [r3, #8]
 8001c08:	60da      	str	r2, [r3, #12]
 8001c0a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a19      	ldr	r2, [pc, #100]	@ (8001c78 <HAL_SPI_MspInit+0x84>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d12b      	bne.n	8001c6e <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	613b      	str	r3, [r7, #16]
 8001c1a:	4b18      	ldr	r3, [pc, #96]	@ (8001c7c <HAL_SPI_MspInit+0x88>)
 8001c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c1e:	4a17      	ldr	r2, [pc, #92]	@ (8001c7c <HAL_SPI_MspInit+0x88>)
 8001c20:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c24:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c26:	4b15      	ldr	r3, [pc, #84]	@ (8001c7c <HAL_SPI_MspInit+0x88>)
 8001c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c2e:	613b      	str	r3, [r7, #16]
 8001c30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c32:	2300      	movs	r3, #0
 8001c34:	60fb      	str	r3, [r7, #12]
 8001c36:	4b11      	ldr	r3, [pc, #68]	@ (8001c7c <HAL_SPI_MspInit+0x88>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3a:	4a10      	ldr	r2, [pc, #64]	@ (8001c7c <HAL_SPI_MspInit+0x88>)
 8001c3c:	f043 0301 	orr.w	r3, r3, #1
 8001c40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c42:	4b0e      	ldr	r3, [pc, #56]	@ (8001c7c <HAL_SPI_MspInit+0x88>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001c4e:	23e0      	movs	r3, #224	@ 0xe0
 8001c50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c52:	2302      	movs	r3, #2
 8001c54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c5e:	2305      	movs	r3, #5
 8001c60:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c62:	f107 0314 	add.w	r3, r7, #20
 8001c66:	4619      	mov	r1, r3
 8001c68:	4805      	ldr	r0, [pc, #20]	@ (8001c80 <HAL_SPI_MspInit+0x8c>)
 8001c6a:	f001 fa73 	bl	8003154 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001c6e:	bf00      	nop
 8001c70:	3728      	adds	r7, #40	@ 0x28
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40013000 	.word	0x40013000
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	40020000 	.word	0x40020000

08001c84 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a0b      	ldr	r2, [pc, #44]	@ (8001cc0 <HAL_TIM_Base_MspInit+0x3c>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d10d      	bne.n	8001cb2 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001cc4 <HAL_TIM_Base_MspInit+0x40>)
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9e:	4a09      	ldr	r2, [pc, #36]	@ (8001cc4 <HAL_TIM_Base_MspInit+0x40>)
 8001ca0:	f043 0302 	orr.w	r3, r3, #2
 8001ca4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ca6:	4b07      	ldr	r3, [pc, #28]	@ (8001cc4 <HAL_TIM_Base_MspInit+0x40>)
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	60fb      	str	r3, [r7, #12]
 8001cb0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001cb2:	bf00      	nop
 8001cb4:	3714      	adds	r7, #20
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	40000400 	.word	0x40000400
 8001cc4:	40023800 	.word	0x40023800

08001cc8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b088      	sub	sp, #32
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd0:	f107 030c 	add.w	r3, r7, #12
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	609a      	str	r2, [r3, #8]
 8001cdc:	60da      	str	r2, [r3, #12]
 8001cde:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a12      	ldr	r2, [pc, #72]	@ (8001d30 <HAL_TIM_MspPostInit+0x68>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d11e      	bne.n	8001d28 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	60bb      	str	r3, [r7, #8]
 8001cee:	4b11      	ldr	r3, [pc, #68]	@ (8001d34 <HAL_TIM_MspPostInit+0x6c>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf2:	4a10      	ldr	r2, [pc, #64]	@ (8001d34 <HAL_TIM_MspPostInit+0x6c>)
 8001cf4:	f043 0304 	orr.w	r3, r3, #4
 8001cf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cfa:	4b0e      	ldr	r3, [pc, #56]	@ (8001d34 <HAL_TIM_MspPostInit+0x6c>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfe:	f003 0304 	and.w	r3, r3, #4
 8001d02:	60bb      	str	r3, [r7, #8]
 8001d04:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = Vel_I_Pin|Vel_D_Pin;
 8001d06:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001d0a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d14:	2300      	movs	r3, #0
 8001d16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d18:	2302      	movs	r3, #2
 8001d1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d1c:	f107 030c 	add.w	r3, r7, #12
 8001d20:	4619      	mov	r1, r3
 8001d22:	4805      	ldr	r0, [pc, #20]	@ (8001d38 <HAL_TIM_MspPostInit+0x70>)
 8001d24:	f001 fa16 	bl	8003154 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001d28:	bf00      	nop
 8001d2a:	3720      	adds	r7, #32
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40000400 	.word	0x40000400
 8001d34:	40023800 	.word	0x40023800
 8001d38:	40020800 	.word	0x40020800

08001d3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d40:	bf00      	nop
 8001d42:	e7fd      	b.n	8001d40 <NMI_Handler+0x4>

08001d44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d48:	bf00      	nop
 8001d4a:	e7fd      	b.n	8001d48 <HardFault_Handler+0x4>

08001d4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d50:	bf00      	nop
 8001d52:	e7fd      	b.n	8001d50 <MemManage_Handler+0x4>

08001d54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d58:	bf00      	nop
 8001d5a:	e7fd      	b.n	8001d58 <BusFault_Handler+0x4>

08001d5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d60:	bf00      	nop
 8001d62:	e7fd      	b.n	8001d60 <UsageFault_Handler+0x4>

08001d64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d72:	b480      	push	{r7}
 8001d74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d76:	bf00      	nop
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d84:	bf00      	nop
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d92:	f000 f8e5 	bl	8001f60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d96:	bf00      	nop
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(WallSensor_Pin);
 8001d9e:	2040      	movs	r0, #64	@ 0x40
 8001da0:	f001 fba6 	bl	80034f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LineSensor_Pin);
 8001da4:	2080      	movs	r0, #128	@ 0x80
 8001da6:	f001 fba3 	bl	80034f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001daa:	bf00      	nop
 8001dac:	bd80      	pop	{r7, pc}
	...

08001db0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001db4:	4802      	ldr	r0, [pc, #8]	@ (8001dc0 <DMA2_Stream0_IRQHandler+0x10>)
 8001db6:	f000 ff63 	bl	8002c80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	2000018c 	.word	0x2000018c

08001dc4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001dc8:	4802      	ldr	r0, [pc, #8]	@ (8001dd4 <OTG_FS_IRQHandler+0x10>)
 8001dca:	f001 fe89 	bl	8003ae0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	200008a4 	.word	0x200008a4

08001dd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001de0:	4a14      	ldr	r2, [pc, #80]	@ (8001e34 <_sbrk+0x5c>)
 8001de2:	4b15      	ldr	r3, [pc, #84]	@ (8001e38 <_sbrk+0x60>)
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dec:	4b13      	ldr	r3, [pc, #76]	@ (8001e3c <_sbrk+0x64>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d102      	bne.n	8001dfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001df4:	4b11      	ldr	r3, [pc, #68]	@ (8001e3c <_sbrk+0x64>)
 8001df6:	4a12      	ldr	r2, [pc, #72]	@ (8001e40 <_sbrk+0x68>)
 8001df8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dfa:	4b10      	ldr	r3, [pc, #64]	@ (8001e3c <_sbrk+0x64>)
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4413      	add	r3, r2
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d207      	bcs.n	8001e18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e08:	f009 fd58 	bl	800b8bc <__errno>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	220c      	movs	r2, #12
 8001e10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e16:	e009      	b.n	8001e2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e18:	4b08      	ldr	r3, [pc, #32]	@ (8001e3c <_sbrk+0x64>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e1e:	4b07      	ldr	r3, [pc, #28]	@ (8001e3c <_sbrk+0x64>)
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4413      	add	r3, r2
 8001e26:	4a05      	ldr	r2, [pc, #20]	@ (8001e3c <_sbrk+0x64>)
 8001e28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3718      	adds	r7, #24
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	20020000 	.word	0x20020000
 8001e38:	00000400 	.word	0x00000400
 8001e3c:	200004c0 	.word	0x200004c0
 8001e40:	20000dd0 	.word	0x20000dd0

08001e44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e48:	4b06      	ldr	r3, [pc, #24]	@ (8001e64 <SystemInit+0x20>)
 8001e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e4e:	4a05      	ldr	r2, [pc, #20]	@ (8001e64 <SystemInit+0x20>)
 8001e50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e58:	bf00      	nop
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	e000ed00 	.word	0xe000ed00

08001e68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001e68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ea0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001e6c:	f7ff ffea 	bl	8001e44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e70:	480c      	ldr	r0, [pc, #48]	@ (8001ea4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e72:	490d      	ldr	r1, [pc, #52]	@ (8001ea8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e74:	4a0d      	ldr	r2, [pc, #52]	@ (8001eac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e78:	e002      	b.n	8001e80 <LoopCopyDataInit>

08001e7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e7e:	3304      	adds	r3, #4

08001e80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e84:	d3f9      	bcc.n	8001e7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e86:	4a0a      	ldr	r2, [pc, #40]	@ (8001eb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e88:	4c0a      	ldr	r4, [pc, #40]	@ (8001eb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e8c:	e001      	b.n	8001e92 <LoopFillZerobss>

08001e8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e90:	3204      	adds	r2, #4

08001e92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e94:	d3fb      	bcc.n	8001e8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e96:	f009 fd17 	bl	800b8c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e9a:	f7ff f80f 	bl	8000ebc <main>
  bx  lr    
 8001e9e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ea0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ea4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ea8:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001eac:	0800b9f4 	.word	0x0800b9f4
  ldr r2, =_sbss
 8001eb0:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001eb4:	20000dcc 	.word	0x20000dcc

08001eb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001eb8:	e7fe      	b.n	8001eb8 <ADC_IRQHandler>
	...

08001ebc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ec0:	4b0e      	ldr	r3, [pc, #56]	@ (8001efc <HAL_Init+0x40>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a0d      	ldr	r2, [pc, #52]	@ (8001efc <HAL_Init+0x40>)
 8001ec6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001eca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8001efc <HAL_Init+0x40>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a0a      	ldr	r2, [pc, #40]	@ (8001efc <HAL_Init+0x40>)
 8001ed2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ed6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ed8:	4b08      	ldr	r3, [pc, #32]	@ (8001efc <HAL_Init+0x40>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a07      	ldr	r2, [pc, #28]	@ (8001efc <HAL_Init+0x40>)
 8001ede:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ee2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ee4:	2003      	movs	r0, #3
 8001ee6:	f000 fd75 	bl	80029d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eea:	2000      	movs	r0, #0
 8001eec:	f000 f808 	bl	8001f00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ef0:	f7ff fd18 	bl	8001924 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40023c00 	.word	0x40023c00

08001f00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f08:	4b12      	ldr	r3, [pc, #72]	@ (8001f54 <HAL_InitTick+0x54>)
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	4b12      	ldr	r3, [pc, #72]	@ (8001f58 <HAL_InitTick+0x58>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	4619      	mov	r1, r3
 8001f12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f16:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f000 fd9b 	bl	8002a5a <HAL_SYSTICK_Config>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e00e      	b.n	8001f4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2b0f      	cmp	r3, #15
 8001f32:	d80a      	bhi.n	8001f4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f34:	2200      	movs	r2, #0
 8001f36:	6879      	ldr	r1, [r7, #4]
 8001f38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001f3c:	f000 fd55 	bl	80029ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f40:	4a06      	ldr	r2, [pc, #24]	@ (8001f5c <HAL_InitTick+0x5c>)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f46:	2300      	movs	r3, #0
 8001f48:	e000      	b.n	8001f4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	20000014 	.word	0x20000014
 8001f58:	2000001c 	.word	0x2000001c
 8001f5c:	20000018 	.word	0x20000018

08001f60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f64:	4b06      	ldr	r3, [pc, #24]	@ (8001f80 <HAL_IncTick+0x20>)
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	461a      	mov	r2, r3
 8001f6a:	4b06      	ldr	r3, [pc, #24]	@ (8001f84 <HAL_IncTick+0x24>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4413      	add	r3, r2
 8001f70:	4a04      	ldr	r2, [pc, #16]	@ (8001f84 <HAL_IncTick+0x24>)
 8001f72:	6013      	str	r3, [r2, #0]
}
 8001f74:	bf00      	nop
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	2000001c 	.word	0x2000001c
 8001f84:	200004c4 	.word	0x200004c4

08001f88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f8c:	4b03      	ldr	r3, [pc, #12]	@ (8001f9c <HAL_GetTick+0x14>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	200004c4 	.word	0x200004c4

08001fa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fa8:	f7ff ffee 	bl	8001f88 <HAL_GetTick>
 8001fac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001fb8:	d005      	beq.n	8001fc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fba:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe4 <HAL_Delay+0x44>)
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fc6:	bf00      	nop
 8001fc8:	f7ff ffde 	bl	8001f88 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d8f7      	bhi.n	8001fc8 <HAL_Delay+0x28>
  {
  }
}
 8001fd8:	bf00      	nop
 8001fda:	bf00      	nop
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	2000001c 	.word	0x2000001c

08001fe8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d101      	bne.n	8001ffe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e033      	b.n	8002066 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002002:	2b00      	cmp	r3, #0
 8002004:	d109      	bne.n	800201a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f7ff fcb4 	bl	8001974 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201e:	f003 0310 	and.w	r3, r3, #16
 8002022:	2b00      	cmp	r3, #0
 8002024:	d118      	bne.n	8002058 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800202e:	f023 0302 	bic.w	r3, r3, #2
 8002032:	f043 0202 	orr.w	r2, r3, #2
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 fa58 	bl	80024f0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204a:	f023 0303 	bic.w	r3, r3, #3
 800204e:	f043 0201 	orr.w	r2, r3, #1
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	641a      	str	r2, [r3, #64]	@ 0x40
 8002056:	e001      	b.n	800205c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002064:	7bfb      	ldrb	r3, [r7, #15]
}
 8002066:	4618      	mov	r0, r3
 8002068:	3710      	adds	r7, #16
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
	...

08002070 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b088      	sub	sp, #32
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800207c:	2300      	movs	r3, #0
 800207e:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002080:	2300      	movs	r3, #0
 8002082:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800208a:	2b01      	cmp	r3, #1
 800208c:	d101      	bne.n	8002092 <HAL_ADC_Start_DMA+0x22>
 800208e:	2302      	movs	r3, #2
 8002090:	e0eb      	b.n	800226a <HAL_ADC_Start_DMA+0x1fa>
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2201      	movs	r2, #1
 8002096:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f003 0301 	and.w	r3, r3, #1
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d018      	beq.n	80020da <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	689a      	ldr	r2, [r3, #8]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f042 0201 	orr.w	r2, r2, #1
 80020b6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80020b8:	4b6e      	ldr	r3, [pc, #440]	@ (8002274 <HAL_ADC_Start_DMA+0x204>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a6e      	ldr	r2, [pc, #440]	@ (8002278 <HAL_ADC_Start_DMA+0x208>)
 80020be:	fba2 2303 	umull	r2, r3, r2, r3
 80020c2:	0c9a      	lsrs	r2, r3, #18
 80020c4:	4613      	mov	r3, r2
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	4413      	add	r3, r2
 80020ca:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80020cc:	e002      	b.n	80020d4 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	3b01      	subs	r3, #1
 80020d2:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1f9      	bne.n	80020ce <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020e8:	d107      	bne.n	80020fa <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80020f8:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f003 0301 	and.w	r3, r3, #1
 8002104:	2b01      	cmp	r3, #1
 8002106:	f040 80a3 	bne.w	8002250 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800210e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002112:	f023 0301 	bic.w	r3, r3, #1
 8002116:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002128:	2b00      	cmp	r3, #0
 800212a:	d007      	beq.n	800213c <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002130:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002134:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002140:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002144:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002148:	d106      	bne.n	8002158 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800214e:	f023 0206 	bic.w	r2, r3, #6
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	645a      	str	r2, [r3, #68]	@ 0x44
 8002156:	e002      	b.n	800215e <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2200      	movs	r2, #0
 800215c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002166:	4b45      	ldr	r3, [pc, #276]	@ (800227c <HAL_ADC_Start_DMA+0x20c>)
 8002168:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800216e:	4a44      	ldr	r2, [pc, #272]	@ (8002280 <HAL_ADC_Start_DMA+0x210>)
 8002170:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002176:	4a43      	ldr	r2, [pc, #268]	@ (8002284 <HAL_ADC_Start_DMA+0x214>)
 8002178:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800217e:	4a42      	ldr	r2, [pc, #264]	@ (8002288 <HAL_ADC_Start_DMA+0x218>)
 8002180:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800218a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	685a      	ldr	r2, [r3, #4]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800219a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	689a      	ldr	r2, [r3, #8]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021aa:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	334c      	adds	r3, #76	@ 0x4c
 80021b6:	4619      	mov	r1, r3
 80021b8:	68ba      	ldr	r2, [r7, #8]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f000 fd08 	bl	8002bd0 <HAL_DMA_Start_IT>
 80021c0:	4603      	mov	r3, r0
 80021c2:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f003 031f 	and.w	r3, r3, #31
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d12a      	bne.n	8002226 <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a2d      	ldr	r2, [pc, #180]	@ (800228c <HAL_ADC_Start_DMA+0x21c>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d015      	beq.n	8002206 <HAL_ADC_Start_DMA+0x196>
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a2c      	ldr	r2, [pc, #176]	@ (8002290 <HAL_ADC_Start_DMA+0x220>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d105      	bne.n	80021f0 <HAL_ADC_Start_DMA+0x180>
 80021e4:	4b25      	ldr	r3, [pc, #148]	@ (800227c <HAL_ADC_Start_DMA+0x20c>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f003 031f 	and.w	r3, r3, #31
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d00a      	beq.n	8002206 <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a27      	ldr	r2, [pc, #156]	@ (8002294 <HAL_ADC_Start_DMA+0x224>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d136      	bne.n	8002268 <HAL_ADC_Start_DMA+0x1f8>
 80021fa:	4b20      	ldr	r3, [pc, #128]	@ (800227c <HAL_ADC_Start_DMA+0x20c>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f003 0310 	and.w	r3, r3, #16
 8002202:	2b00      	cmp	r3, #0
 8002204:	d130      	bne.n	8002268 <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d129      	bne.n	8002268 <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	689a      	ldr	r2, [r3, #8]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002222:	609a      	str	r2, [r3, #8]
 8002224:	e020      	b.n	8002268 <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a18      	ldr	r2, [pc, #96]	@ (800228c <HAL_ADC_Start_DMA+0x21c>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d11b      	bne.n	8002268 <HAL_ADC_Start_DMA+0x1f8>
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d114      	bne.n	8002268 <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	689a      	ldr	r2, [r3, #8]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800224c:	609a      	str	r2, [r3, #8]
 800224e:	e00b      	b.n	8002268 <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002254:	f043 0210 	orr.w	r2, r3, #16
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002260:	f043 0201 	orr.w	r2, r3, #1
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8002268:	7ffb      	ldrb	r3, [r7, #31]
}
 800226a:	4618      	mov	r0, r3
 800226c:	3720      	adds	r7, #32
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	20000014 	.word	0x20000014
 8002278:	431bde83 	.word	0x431bde83
 800227c:	40012300 	.word	0x40012300
 8002280:	080026e9 	.word	0x080026e9
 8002284:	080027a3 	.word	0x080027a3
 8002288:	080027bf 	.word	0x080027bf
 800228c:	40012000 	.word	0x40012000
 8002290:	40012100 	.word	0x40012100
 8002294:	40012200 	.word	0x40012200

08002298 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80022b6:	2300      	movs	r3, #0
 80022b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d101      	bne.n	80022c8 <HAL_ADC_ConfigChannel+0x1c>
 80022c4:	2302      	movs	r3, #2
 80022c6:	e105      	b.n	80024d4 <HAL_ADC_ConfigChannel+0x228>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2b09      	cmp	r3, #9
 80022d6:	d925      	bls.n	8002324 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	68d9      	ldr	r1, [r3, #12]
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	461a      	mov	r2, r3
 80022e6:	4613      	mov	r3, r2
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	4413      	add	r3, r2
 80022ec:	3b1e      	subs	r3, #30
 80022ee:	2207      	movs	r2, #7
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	43da      	mvns	r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	400a      	ands	r2, r1
 80022fc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68d9      	ldr	r1, [r3, #12]
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	689a      	ldr	r2, [r3, #8]
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	b29b      	uxth	r3, r3
 800230e:	4618      	mov	r0, r3
 8002310:	4603      	mov	r3, r0
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	4403      	add	r3, r0
 8002316:	3b1e      	subs	r3, #30
 8002318:	409a      	lsls	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	430a      	orrs	r2, r1
 8002320:	60da      	str	r2, [r3, #12]
 8002322:	e022      	b.n	800236a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	6919      	ldr	r1, [r3, #16]
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	b29b      	uxth	r3, r3
 8002330:	461a      	mov	r2, r3
 8002332:	4613      	mov	r3, r2
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	4413      	add	r3, r2
 8002338:	2207      	movs	r2, #7
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	43da      	mvns	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	400a      	ands	r2, r1
 8002346:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6919      	ldr	r1, [r3, #16]
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	689a      	ldr	r2, [r3, #8]
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	b29b      	uxth	r3, r3
 8002358:	4618      	mov	r0, r3
 800235a:	4603      	mov	r3, r0
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	4403      	add	r3, r0
 8002360:	409a      	lsls	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	430a      	orrs	r2, r1
 8002368:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	2b06      	cmp	r3, #6
 8002370:	d824      	bhi.n	80023bc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685a      	ldr	r2, [r3, #4]
 800237c:	4613      	mov	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	4413      	add	r3, r2
 8002382:	3b05      	subs	r3, #5
 8002384:	221f      	movs	r2, #31
 8002386:	fa02 f303 	lsl.w	r3, r2, r3
 800238a:	43da      	mvns	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	400a      	ands	r2, r1
 8002392:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	b29b      	uxth	r3, r3
 80023a0:	4618      	mov	r0, r3
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685a      	ldr	r2, [r3, #4]
 80023a6:	4613      	mov	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4413      	add	r3, r2
 80023ac:	3b05      	subs	r3, #5
 80023ae:	fa00 f203 	lsl.w	r2, r0, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	430a      	orrs	r2, r1
 80023b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80023ba:	e04c      	b.n	8002456 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	2b0c      	cmp	r3, #12
 80023c2:	d824      	bhi.n	800240e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685a      	ldr	r2, [r3, #4]
 80023ce:	4613      	mov	r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	4413      	add	r3, r2
 80023d4:	3b23      	subs	r3, #35	@ 0x23
 80023d6:	221f      	movs	r2, #31
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	43da      	mvns	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	400a      	ands	r2, r1
 80023e4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	4618      	mov	r0, r3
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685a      	ldr	r2, [r3, #4]
 80023f8:	4613      	mov	r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	4413      	add	r3, r2
 80023fe:	3b23      	subs	r3, #35	@ 0x23
 8002400:	fa00 f203 	lsl.w	r2, r0, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	430a      	orrs	r2, r1
 800240a:	631a      	str	r2, [r3, #48]	@ 0x30
 800240c:	e023      	b.n	8002456 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685a      	ldr	r2, [r3, #4]
 8002418:	4613      	mov	r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	4413      	add	r3, r2
 800241e:	3b41      	subs	r3, #65	@ 0x41
 8002420:	221f      	movs	r2, #31
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	43da      	mvns	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	400a      	ands	r2, r1
 800242e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	b29b      	uxth	r3, r3
 800243c:	4618      	mov	r0, r3
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685a      	ldr	r2, [r3, #4]
 8002442:	4613      	mov	r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	4413      	add	r3, r2
 8002448:	3b41      	subs	r3, #65	@ 0x41
 800244a:	fa00 f203 	lsl.w	r2, r0, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	430a      	orrs	r2, r1
 8002454:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002456:	4b22      	ldr	r3, [pc, #136]	@ (80024e0 <HAL_ADC_ConfigChannel+0x234>)
 8002458:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a21      	ldr	r2, [pc, #132]	@ (80024e4 <HAL_ADC_ConfigChannel+0x238>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d109      	bne.n	8002478 <HAL_ADC_ConfigChannel+0x1cc>
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2b12      	cmp	r3, #18
 800246a:	d105      	bne.n	8002478 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a19      	ldr	r2, [pc, #100]	@ (80024e4 <HAL_ADC_ConfigChannel+0x238>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d123      	bne.n	80024ca <HAL_ADC_ConfigChannel+0x21e>
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2b10      	cmp	r3, #16
 8002488:	d003      	beq.n	8002492 <HAL_ADC_ConfigChannel+0x1e6>
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2b11      	cmp	r3, #17
 8002490:	d11b      	bne.n	80024ca <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2b10      	cmp	r3, #16
 80024a4:	d111      	bne.n	80024ca <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024a6:	4b10      	ldr	r3, [pc, #64]	@ (80024e8 <HAL_ADC_ConfigChannel+0x23c>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a10      	ldr	r2, [pc, #64]	@ (80024ec <HAL_ADC_ConfigChannel+0x240>)
 80024ac:	fba2 2303 	umull	r2, r3, r2, r3
 80024b0:	0c9a      	lsrs	r2, r3, #18
 80024b2:	4613      	mov	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	4413      	add	r3, r2
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80024bc:	e002      	b.n	80024c4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	3b01      	subs	r3, #1
 80024c2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1f9      	bne.n	80024be <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3714      	adds	r7, #20
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	40012300 	.word	0x40012300
 80024e4:	40012000 	.word	0x40012000
 80024e8:	20000014 	.word	0x20000014
 80024ec:	431bde83 	.word	0x431bde83

080024f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024f8:	4b79      	ldr	r3, [pc, #484]	@ (80026e0 <ADC_Init+0x1f0>)
 80024fa:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	685a      	ldr	r2, [r3, #4]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	431a      	orrs	r2, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	685a      	ldr	r2, [r3, #4]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002524:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	6859      	ldr	r1, [r3, #4]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	021a      	lsls	r2, r3, #8
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	430a      	orrs	r2, r1
 8002538:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	685a      	ldr	r2, [r3, #4]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002548:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	6859      	ldr	r1, [r3, #4]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689a      	ldr	r2, [r3, #8]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	430a      	orrs	r2, r1
 800255a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	689a      	ldr	r2, [r3, #8]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800256a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	6899      	ldr	r1, [r3, #8]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	68da      	ldr	r2, [r3, #12]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	430a      	orrs	r2, r1
 800257c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002582:	4a58      	ldr	r2, [pc, #352]	@ (80026e4 <ADC_Init+0x1f4>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d022      	beq.n	80025ce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689a      	ldr	r2, [r3, #8]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002596:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6899      	ldr	r1, [r3, #8]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	430a      	orrs	r2, r1
 80025a8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	689a      	ldr	r2, [r3, #8]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80025b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6899      	ldr	r1, [r3, #8]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	430a      	orrs	r2, r1
 80025ca:	609a      	str	r2, [r3, #8]
 80025cc:	e00f      	b.n	80025ee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	689a      	ldr	r2, [r3, #8]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80025dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	689a      	ldr	r2, [r3, #8]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80025ec:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	689a      	ldr	r2, [r3, #8]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 0202 	bic.w	r2, r2, #2
 80025fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	6899      	ldr	r1, [r3, #8]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	7e1b      	ldrb	r3, [r3, #24]
 8002608:	005a      	lsls	r2, r3, #1
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	430a      	orrs	r2, r1
 8002610:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d01b      	beq.n	8002654 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	685a      	ldr	r2, [r3, #4]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800262a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	685a      	ldr	r2, [r3, #4]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800263a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	6859      	ldr	r1, [r3, #4]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002646:	3b01      	subs	r3, #1
 8002648:	035a      	lsls	r2, r3, #13
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	430a      	orrs	r2, r1
 8002650:	605a      	str	r2, [r3, #4]
 8002652:	e007      	b.n	8002664 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002662:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002672:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	3b01      	subs	r3, #1
 8002680:	051a      	lsls	r2, r3, #20
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	430a      	orrs	r2, r1
 8002688:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	689a      	ldr	r2, [r3, #8]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002698:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	6899      	ldr	r1, [r3, #8]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80026a6:	025a      	lsls	r2, r3, #9
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	430a      	orrs	r2, r1
 80026ae:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	689a      	ldr	r2, [r3, #8]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	6899      	ldr	r1, [r3, #8]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	029a      	lsls	r2, r3, #10
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	430a      	orrs	r2, r1
 80026d2:	609a      	str	r2, [r3, #8]
}
 80026d4:	bf00      	nop
 80026d6:	3714      	adds	r7, #20
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	40012300 	.word	0x40012300
 80026e4:	0f000001 	.word	0x0f000001

080026e8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026f4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fa:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d13c      	bne.n	800277c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002706:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d12b      	bne.n	8002774 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002720:	2b00      	cmp	r3, #0
 8002722:	d127      	bne.n	8002774 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800272a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800272e:	2b00      	cmp	r3, #0
 8002730:	d006      	beq.n	8002740 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800273c:	2b00      	cmp	r3, #0
 800273e:	d119      	bne.n	8002774 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	685a      	ldr	r2, [r3, #4]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f022 0220 	bic.w	r2, r2, #32
 800274e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002754:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002760:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d105      	bne.n	8002774 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276c:	f043 0201 	orr.w	r2, r3, #1
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002774:	68f8      	ldr	r0, [r7, #12]
 8002776:	f7fd ff1d 	bl	80005b4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800277a:	e00e      	b.n	800279a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002780:	f003 0310 	and.w	r3, r3, #16
 8002784:	2b00      	cmp	r3, #0
 8002786:	d003      	beq.n	8002790 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f7ff fd85 	bl	8002298 <HAL_ADC_ErrorCallback>
}
 800278e:	e004      	b.n	800279a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	4798      	blx	r3
}
 800279a:	bf00      	nop
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b084      	sub	sp, #16
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027ae:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80027b0:	68f8      	ldr	r0, [r7, #12]
 80027b2:	f7fd fef1 	bl	8000598 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027b6:	bf00      	nop
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b084      	sub	sp, #16
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027ca:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2240      	movs	r2, #64	@ 0x40
 80027d0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027d6:	f043 0204 	orr.w	r2, r3, #4
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80027de:	68f8      	ldr	r0, [r7, #12]
 80027e0:	f7ff fd5a 	bl	8002298 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027e4:	bf00      	nop
 80027e6:	3710      	adds	r7, #16
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f003 0307 	and.w	r3, r3, #7
 80027fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002830 <__NVIC_SetPriorityGrouping+0x44>)
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002802:	68ba      	ldr	r2, [r7, #8]
 8002804:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002808:	4013      	ands	r3, r2
 800280a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002814:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002818:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800281c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800281e:	4a04      	ldr	r2, [pc, #16]	@ (8002830 <__NVIC_SetPriorityGrouping+0x44>)
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	60d3      	str	r3, [r2, #12]
}
 8002824:	bf00      	nop
 8002826:	3714      	adds	r7, #20
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr
 8002830:	e000ed00 	.word	0xe000ed00

08002834 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002838:	4b04      	ldr	r3, [pc, #16]	@ (800284c <__NVIC_GetPriorityGrouping+0x18>)
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	0a1b      	lsrs	r3, r3, #8
 800283e:	f003 0307 	and.w	r3, r3, #7
}
 8002842:	4618      	mov	r0, r3
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr
 800284c:	e000ed00 	.word	0xe000ed00

08002850 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	4603      	mov	r3, r0
 8002858:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800285a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285e:	2b00      	cmp	r3, #0
 8002860:	db0b      	blt.n	800287a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002862:	79fb      	ldrb	r3, [r7, #7]
 8002864:	f003 021f 	and.w	r2, r3, #31
 8002868:	4907      	ldr	r1, [pc, #28]	@ (8002888 <__NVIC_EnableIRQ+0x38>)
 800286a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286e:	095b      	lsrs	r3, r3, #5
 8002870:	2001      	movs	r0, #1
 8002872:	fa00 f202 	lsl.w	r2, r0, r2
 8002876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800287a:	bf00      	nop
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	e000e100 	.word	0xe000e100

0800288c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	4603      	mov	r3, r0
 8002894:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289a:	2b00      	cmp	r3, #0
 800289c:	db12      	blt.n	80028c4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800289e:	79fb      	ldrb	r3, [r7, #7]
 80028a0:	f003 021f 	and.w	r2, r3, #31
 80028a4:	490a      	ldr	r1, [pc, #40]	@ (80028d0 <__NVIC_DisableIRQ+0x44>)
 80028a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028aa:	095b      	lsrs	r3, r3, #5
 80028ac:	2001      	movs	r0, #1
 80028ae:	fa00 f202 	lsl.w	r2, r0, r2
 80028b2:	3320      	adds	r3, #32
 80028b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80028b8:	f3bf 8f4f 	dsb	sy
}
 80028bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80028be:	f3bf 8f6f 	isb	sy
}
 80028c2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80028c4:	bf00      	nop
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr
 80028d0:	e000e100 	.word	0xe000e100

080028d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	4603      	mov	r3, r0
 80028dc:	6039      	str	r1, [r7, #0]
 80028de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	db0a      	blt.n	80028fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	b2da      	uxtb	r2, r3
 80028ec:	490c      	ldr	r1, [pc, #48]	@ (8002920 <__NVIC_SetPriority+0x4c>)
 80028ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f2:	0112      	lsls	r2, r2, #4
 80028f4:	b2d2      	uxtb	r2, r2
 80028f6:	440b      	add	r3, r1
 80028f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028fc:	e00a      	b.n	8002914 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	b2da      	uxtb	r2, r3
 8002902:	4908      	ldr	r1, [pc, #32]	@ (8002924 <__NVIC_SetPriority+0x50>)
 8002904:	79fb      	ldrb	r3, [r7, #7]
 8002906:	f003 030f 	and.w	r3, r3, #15
 800290a:	3b04      	subs	r3, #4
 800290c:	0112      	lsls	r2, r2, #4
 800290e:	b2d2      	uxtb	r2, r2
 8002910:	440b      	add	r3, r1
 8002912:	761a      	strb	r2, [r3, #24]
}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr
 8002920:	e000e100 	.word	0xe000e100
 8002924:	e000ed00 	.word	0xe000ed00

08002928 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002928:	b480      	push	{r7}
 800292a:	b089      	sub	sp, #36	@ 0x24
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f003 0307 	and.w	r3, r3, #7
 800293a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	f1c3 0307 	rsb	r3, r3, #7
 8002942:	2b04      	cmp	r3, #4
 8002944:	bf28      	it	cs
 8002946:	2304      	movcs	r3, #4
 8002948:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	3304      	adds	r3, #4
 800294e:	2b06      	cmp	r3, #6
 8002950:	d902      	bls.n	8002958 <NVIC_EncodePriority+0x30>
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	3b03      	subs	r3, #3
 8002956:	e000      	b.n	800295a <NVIC_EncodePriority+0x32>
 8002958:	2300      	movs	r3, #0
 800295a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800295c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	fa02 f303 	lsl.w	r3, r2, r3
 8002966:	43da      	mvns	r2, r3
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	401a      	ands	r2, r3
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002970:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	fa01 f303 	lsl.w	r3, r1, r3
 800297a:	43d9      	mvns	r1, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002980:	4313      	orrs	r3, r2
         );
}
 8002982:	4618      	mov	r0, r3
 8002984:	3724      	adds	r7, #36	@ 0x24
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
	...

08002990 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	3b01      	subs	r3, #1
 800299c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80029a0:	d301      	bcc.n	80029a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029a2:	2301      	movs	r3, #1
 80029a4:	e00f      	b.n	80029c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029a6:	4a0a      	ldr	r2, [pc, #40]	@ (80029d0 <SysTick_Config+0x40>)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	3b01      	subs	r3, #1
 80029ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029ae:	210f      	movs	r1, #15
 80029b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80029b4:	f7ff ff8e 	bl	80028d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029b8:	4b05      	ldr	r3, [pc, #20]	@ (80029d0 <SysTick_Config+0x40>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029be:	4b04      	ldr	r3, [pc, #16]	@ (80029d0 <SysTick_Config+0x40>)
 80029c0:	2207      	movs	r2, #7
 80029c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	e000e010 	.word	0xe000e010

080029d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f7ff ff05 	bl	80027ec <__NVIC_SetPriorityGrouping>
}
 80029e2:	bf00      	nop
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b086      	sub	sp, #24
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	4603      	mov	r3, r0
 80029f2:	60b9      	str	r1, [r7, #8]
 80029f4:	607a      	str	r2, [r7, #4]
 80029f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029f8:	2300      	movs	r3, #0
 80029fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029fc:	f7ff ff1a 	bl	8002834 <__NVIC_GetPriorityGrouping>
 8002a00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	68b9      	ldr	r1, [r7, #8]
 8002a06:	6978      	ldr	r0, [r7, #20]
 8002a08:	f7ff ff8e 	bl	8002928 <NVIC_EncodePriority>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a12:	4611      	mov	r1, r2
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff ff5d 	bl	80028d4 <__NVIC_SetPriority>
}
 8002a1a:	bf00      	nop
 8002a1c:	3718      	adds	r7, #24
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b082      	sub	sp, #8
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	4603      	mov	r3, r0
 8002a2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7ff ff0d 	bl	8002850 <__NVIC_EnableIRQ>
}
 8002a36:	bf00      	nop
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b082      	sub	sp, #8
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	4603      	mov	r3, r0
 8002a46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7ff ff1d 	bl	800288c <__NVIC_DisableIRQ>
}
 8002a52:	bf00      	nop
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b082      	sub	sp, #8
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f7ff ff94 	bl	8002990 <SysTick_Config>
 8002a68:	4603      	mov	r3, r0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
	...

08002a74 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a80:	f7ff fa82 	bl	8001f88 <HAL_GetTick>
 8002a84:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d101      	bne.n	8002a90 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e099      	b.n	8002bc4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2202      	movs	r2, #2
 8002a94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f022 0201 	bic.w	r2, r2, #1
 8002aae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ab0:	e00f      	b.n	8002ad2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ab2:	f7ff fa69 	bl	8001f88 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	2b05      	cmp	r3, #5
 8002abe:	d908      	bls.n	8002ad2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2220      	movs	r2, #32
 8002ac4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2203      	movs	r2, #3
 8002aca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e078      	b.n	8002bc4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d1e8      	bne.n	8002ab2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ae8:	697a      	ldr	r2, [r7, #20]
 8002aea:	4b38      	ldr	r3, [pc, #224]	@ (8002bcc <HAL_DMA_Init+0x158>)
 8002aec:	4013      	ands	r3, r2
 8002aee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685a      	ldr	r2, [r3, #4]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002afe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a1b      	ldr	r3, [r3, #32]
 8002b1c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b28:	2b04      	cmp	r3, #4
 8002b2a:	d107      	bne.n	8002b3c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b34:	4313      	orrs	r3, r2
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	697a      	ldr	r2, [r7, #20]
 8002b42:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	695b      	ldr	r3, [r3, #20]
 8002b4a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	f023 0307 	bic.w	r3, r3, #7
 8002b52:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b58:	697a      	ldr	r2, [r7, #20]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b62:	2b04      	cmp	r3, #4
 8002b64:	d117      	bne.n	8002b96 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b6a:	697a      	ldr	r2, [r7, #20]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d00e      	beq.n	8002b96 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f000 fa6f 	bl	800305c <DMA_CheckFifoParam>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d008      	beq.n	8002b96 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2240      	movs	r2, #64	@ 0x40
 8002b88:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002b92:	2301      	movs	r3, #1
 8002b94:	e016      	b.n	8002bc4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	697a      	ldr	r2, [r7, #20]
 8002b9c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 fa26 	bl	8002ff0 <DMA_CalcBaseAndBitshift>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bac:	223f      	movs	r2, #63	@ 0x3f
 8002bae:	409a      	lsls	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3718      	adds	r7, #24
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	f010803f 	.word	0xf010803f

08002bd0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
 8002bdc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bde:	2300      	movs	r3, #0
 8002be0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002be6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d101      	bne.n	8002bf6 <HAL_DMA_Start_IT+0x26>
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	e040      	b.n	8002c78 <HAL_DMA_Start_IT+0xa8>
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d12f      	bne.n	8002c6a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2202      	movs	r2, #2
 8002c0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2200      	movs	r2, #0
 8002c16:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	68b9      	ldr	r1, [r7, #8]
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f000 f9b8 	bl	8002f94 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c28:	223f      	movs	r2, #63	@ 0x3f
 8002c2a:	409a      	lsls	r2, r3
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f042 0216 	orr.w	r2, r2, #22
 8002c3e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d007      	beq.n	8002c58 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f042 0208 	orr.w	r2, r2, #8
 8002c56:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f042 0201 	orr.w	r2, r2, #1
 8002c66:	601a      	str	r2, [r3, #0]
 8002c68:	e005      	b.n	8002c76 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002c72:	2302      	movs	r3, #2
 8002c74:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002c76:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3718      	adds	r7, #24
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b086      	sub	sp, #24
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c8c:	4b8e      	ldr	r3, [pc, #568]	@ (8002ec8 <HAL_DMA_IRQHandler+0x248>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a8e      	ldr	r2, [pc, #568]	@ (8002ecc <HAL_DMA_IRQHandler+0x24c>)
 8002c92:	fba2 2303 	umull	r2, r3, r2, r3
 8002c96:	0a9b      	lsrs	r3, r3, #10
 8002c98:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c9e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002caa:	2208      	movs	r2, #8
 8002cac:	409a      	lsls	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d01a      	beq.n	8002cec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0304 	and.w	r3, r3, #4
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d013      	beq.n	8002cec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f022 0204 	bic.w	r2, r2, #4
 8002cd2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cd8:	2208      	movs	r2, #8
 8002cda:	409a      	lsls	r2, r3
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ce4:	f043 0201 	orr.w	r2, r3, #1
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	409a      	lsls	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d012      	beq.n	8002d22 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	695b      	ldr	r3, [r3, #20]
 8002d02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00b      	beq.n	8002d22 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d0e:	2201      	movs	r2, #1
 8002d10:	409a      	lsls	r2, r3
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d1a:	f043 0202 	orr.w	r2, r3, #2
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d26:	2204      	movs	r2, #4
 8002d28:	409a      	lsls	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d012      	beq.n	8002d58 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00b      	beq.n	8002d58 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d44:	2204      	movs	r2, #4
 8002d46:	409a      	lsls	r2, r3
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d50:	f043 0204 	orr.w	r2, r3, #4
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d5c:	2210      	movs	r2, #16
 8002d5e:	409a      	lsls	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	4013      	ands	r3, r2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d043      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0308 	and.w	r3, r3, #8
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d03c      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d7a:	2210      	movs	r2, #16
 8002d7c:	409a      	lsls	r2, r3
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d018      	beq.n	8002dc2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d108      	bne.n	8002db0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d024      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	4798      	blx	r3
 8002dae:	e01f      	b.n	8002df0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d01b      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	4798      	blx	r3
 8002dc0:	e016      	b.n	8002df0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d107      	bne.n	8002de0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f022 0208 	bic.w	r2, r2, #8
 8002dde:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d003      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002df4:	2220      	movs	r2, #32
 8002df6:	409a      	lsls	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	f000 808f 	beq.w	8002f20 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0310 	and.w	r3, r3, #16
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f000 8087 	beq.w	8002f20 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e16:	2220      	movs	r2, #32
 8002e18:	409a      	lsls	r2, r3
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b05      	cmp	r3, #5
 8002e28:	d136      	bne.n	8002e98 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 0216 	bic.w	r2, r2, #22
 8002e38:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	695a      	ldr	r2, [r3, #20]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e48:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d103      	bne.n	8002e5a <HAL_DMA_IRQHandler+0x1da>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d007      	beq.n	8002e6a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f022 0208 	bic.w	r2, r2, #8
 8002e68:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e6e:	223f      	movs	r2, #63	@ 0x3f
 8002e70:	409a      	lsls	r2, r3
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d07e      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	4798      	blx	r3
        }
        return;
 8002e96:	e079      	b.n	8002f8c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d01d      	beq.n	8002ee2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d10d      	bne.n	8002ed0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d031      	beq.n	8002f20 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	4798      	blx	r3
 8002ec4:	e02c      	b.n	8002f20 <HAL_DMA_IRQHandler+0x2a0>
 8002ec6:	bf00      	nop
 8002ec8:	20000014 	.word	0x20000014
 8002ecc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d023      	beq.n	8002f20 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	4798      	blx	r3
 8002ee0:	e01e      	b.n	8002f20 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d10f      	bne.n	8002f10 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0210 	bic.w	r2, r2, #16
 8002efe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d003      	beq.n	8002f20 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d032      	beq.n	8002f8e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f2c:	f003 0301 	and.w	r3, r3, #1
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d022      	beq.n	8002f7a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2205      	movs	r2, #5
 8002f38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f022 0201 	bic.w	r2, r2, #1
 8002f4a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	3301      	adds	r3, #1
 8002f50:	60bb      	str	r3, [r7, #8]
 8002f52:	697a      	ldr	r2, [r7, #20]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d307      	bcc.n	8002f68 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1f2      	bne.n	8002f4c <HAL_DMA_IRQHandler+0x2cc>
 8002f66:	e000      	b.n	8002f6a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002f68:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d005      	beq.n	8002f8e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	4798      	blx	r3
 8002f8a:	e000      	b.n	8002f8e <HAL_DMA_IRQHandler+0x30e>
        return;
 8002f8c:	bf00      	nop
    }
  }
}
 8002f8e:	3718      	adds	r7, #24
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
 8002fa0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002fb0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	683a      	ldr	r2, [r7, #0]
 8002fb8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	2b40      	cmp	r3, #64	@ 0x40
 8002fc0:	d108      	bne.n	8002fd4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68ba      	ldr	r2, [r7, #8]
 8002fd0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002fd2:	e007      	b.n	8002fe4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68ba      	ldr	r2, [r7, #8]
 8002fda:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	60da      	str	r2, [r3, #12]
}
 8002fe4:	bf00      	nop
 8002fe6:	3714      	adds	r7, #20
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	3b10      	subs	r3, #16
 8003000:	4a14      	ldr	r2, [pc, #80]	@ (8003054 <DMA_CalcBaseAndBitshift+0x64>)
 8003002:	fba2 2303 	umull	r2, r3, r2, r3
 8003006:	091b      	lsrs	r3, r3, #4
 8003008:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800300a:	4a13      	ldr	r2, [pc, #76]	@ (8003058 <DMA_CalcBaseAndBitshift+0x68>)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	4413      	add	r3, r2
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	461a      	mov	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2b03      	cmp	r3, #3
 800301c:	d909      	bls.n	8003032 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003026:	f023 0303 	bic.w	r3, r3, #3
 800302a:	1d1a      	adds	r2, r3, #4
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003030:	e007      	b.n	8003042 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800303a:	f023 0303 	bic.w	r3, r3, #3
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003046:	4618      	mov	r0, r3
 8003048:	3714      	adds	r7, #20
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	aaaaaaab 	.word	0xaaaaaaab
 8003058:	0800b9dc 	.word	0x0800b9dc

0800305c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800305c:	b480      	push	{r7}
 800305e:	b085      	sub	sp, #20
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003064:	2300      	movs	r3, #0
 8003066:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800306c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d11f      	bne.n	80030b6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	2b03      	cmp	r3, #3
 800307a:	d856      	bhi.n	800312a <DMA_CheckFifoParam+0xce>
 800307c:	a201      	add	r2, pc, #4	@ (adr r2, 8003084 <DMA_CheckFifoParam+0x28>)
 800307e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003082:	bf00      	nop
 8003084:	08003095 	.word	0x08003095
 8003088:	080030a7 	.word	0x080030a7
 800308c:	08003095 	.word	0x08003095
 8003090:	0800312b 	.word	0x0800312b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003098:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d046      	beq.n	800312e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030a4:	e043      	b.n	800312e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030aa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80030ae:	d140      	bne.n	8003132 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030b4:	e03d      	b.n	8003132 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030be:	d121      	bne.n	8003104 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	2b03      	cmp	r3, #3
 80030c4:	d837      	bhi.n	8003136 <DMA_CheckFifoParam+0xda>
 80030c6:	a201      	add	r2, pc, #4	@ (adr r2, 80030cc <DMA_CheckFifoParam+0x70>)
 80030c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030cc:	080030dd 	.word	0x080030dd
 80030d0:	080030e3 	.word	0x080030e3
 80030d4:	080030dd 	.word	0x080030dd
 80030d8:	080030f5 	.word	0x080030f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	73fb      	strb	r3, [r7, #15]
      break;
 80030e0:	e030      	b.n	8003144 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030e6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d025      	beq.n	800313a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030f2:	e022      	b.n	800313a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030f8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80030fc:	d11f      	bne.n	800313e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003102:	e01c      	b.n	800313e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	2b02      	cmp	r3, #2
 8003108:	d903      	bls.n	8003112 <DMA_CheckFifoParam+0xb6>
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	2b03      	cmp	r3, #3
 800310e:	d003      	beq.n	8003118 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003110:	e018      	b.n	8003144 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	73fb      	strb	r3, [r7, #15]
      break;
 8003116:	e015      	b.n	8003144 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800311c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d00e      	beq.n	8003142 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	73fb      	strb	r3, [r7, #15]
      break;
 8003128:	e00b      	b.n	8003142 <DMA_CheckFifoParam+0xe6>
      break;
 800312a:	bf00      	nop
 800312c:	e00a      	b.n	8003144 <DMA_CheckFifoParam+0xe8>
      break;
 800312e:	bf00      	nop
 8003130:	e008      	b.n	8003144 <DMA_CheckFifoParam+0xe8>
      break;
 8003132:	bf00      	nop
 8003134:	e006      	b.n	8003144 <DMA_CheckFifoParam+0xe8>
      break;
 8003136:	bf00      	nop
 8003138:	e004      	b.n	8003144 <DMA_CheckFifoParam+0xe8>
      break;
 800313a:	bf00      	nop
 800313c:	e002      	b.n	8003144 <DMA_CheckFifoParam+0xe8>
      break;   
 800313e:	bf00      	nop
 8003140:	e000      	b.n	8003144 <DMA_CheckFifoParam+0xe8>
      break;
 8003142:	bf00      	nop
    }
  } 
  
  return status; 
 8003144:	7bfb      	ldrb	r3, [r7, #15]
}
 8003146:	4618      	mov	r0, r3
 8003148:	3714      	adds	r7, #20
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop

08003154 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003154:	b480      	push	{r7}
 8003156:	b089      	sub	sp, #36	@ 0x24
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800315e:	2300      	movs	r3, #0
 8003160:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003162:	2300      	movs	r3, #0
 8003164:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003166:	2300      	movs	r3, #0
 8003168:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800316a:	2300      	movs	r3, #0
 800316c:	61fb      	str	r3, [r7, #28]
 800316e:	e16b      	b.n	8003448 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003170:	2201      	movs	r2, #1
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	fa02 f303 	lsl.w	r3, r2, r3
 8003178:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	4013      	ands	r3, r2
 8003182:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	429a      	cmp	r2, r3
 800318a:	f040 815a 	bne.w	8003442 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f003 0303 	and.w	r3, r3, #3
 8003196:	2b01      	cmp	r3, #1
 8003198:	d005      	beq.n	80031a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d130      	bne.n	8003208 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	2203      	movs	r2, #3
 80031b2:	fa02 f303 	lsl.w	r3, r2, r3
 80031b6:	43db      	mvns	r3, r3
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	4013      	ands	r3, r2
 80031bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	68da      	ldr	r2, [r3, #12]
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	005b      	lsls	r3, r3, #1
 80031c6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	69ba      	ldr	r2, [r7, #24]
 80031d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031dc:	2201      	movs	r2, #1
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	43db      	mvns	r3, r3
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	4013      	ands	r3, r2
 80031ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	091b      	lsrs	r3, r3, #4
 80031f2:	f003 0201 	and.w	r2, r3, #1
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	4313      	orrs	r3, r2
 8003200:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f003 0303 	and.w	r3, r3, #3
 8003210:	2b03      	cmp	r3, #3
 8003212:	d017      	beq.n	8003244 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	2203      	movs	r2, #3
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	43db      	mvns	r3, r3
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	4013      	ands	r3, r2
 800322a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	689a      	ldr	r2, [r3, #8]
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	4313      	orrs	r3, r2
 800323c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f003 0303 	and.w	r3, r3, #3
 800324c:	2b02      	cmp	r3, #2
 800324e:	d123      	bne.n	8003298 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	08da      	lsrs	r2, r3, #3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	3208      	adds	r2, #8
 8003258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800325c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	f003 0307 	and.w	r3, r3, #7
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	220f      	movs	r2, #15
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	43db      	mvns	r3, r3
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	4013      	ands	r3, r2
 8003272:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	691a      	ldr	r2, [r3, #16]
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	f003 0307 	and.w	r3, r3, #7
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	fa02 f303 	lsl.w	r3, r2, r3
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	4313      	orrs	r3, r2
 8003288:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	08da      	lsrs	r2, r3, #3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	3208      	adds	r2, #8
 8003292:	69b9      	ldr	r1, [r7, #24]
 8003294:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	005b      	lsls	r3, r3, #1
 80032a2:	2203      	movs	r2, #3
 80032a4:	fa02 f303 	lsl.w	r3, r2, r3
 80032a8:	43db      	mvns	r3, r3
 80032aa:	69ba      	ldr	r2, [r7, #24]
 80032ac:	4013      	ands	r3, r2
 80032ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f003 0203 	and.w	r2, r3, #3
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	fa02 f303 	lsl.w	r3, r2, r3
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f000 80b4 	beq.w	8003442 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032da:	2300      	movs	r3, #0
 80032dc:	60fb      	str	r3, [r7, #12]
 80032de:	4b60      	ldr	r3, [pc, #384]	@ (8003460 <HAL_GPIO_Init+0x30c>)
 80032e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032e2:	4a5f      	ldr	r2, [pc, #380]	@ (8003460 <HAL_GPIO_Init+0x30c>)
 80032e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80032ea:	4b5d      	ldr	r3, [pc, #372]	@ (8003460 <HAL_GPIO_Init+0x30c>)
 80032ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032f2:	60fb      	str	r3, [r7, #12]
 80032f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032f6:	4a5b      	ldr	r2, [pc, #364]	@ (8003464 <HAL_GPIO_Init+0x310>)
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	089b      	lsrs	r3, r3, #2
 80032fc:	3302      	adds	r3, #2
 80032fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003302:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	f003 0303 	and.w	r3, r3, #3
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	220f      	movs	r2, #15
 800330e:	fa02 f303 	lsl.w	r3, r2, r3
 8003312:	43db      	mvns	r3, r3
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	4013      	ands	r3, r2
 8003318:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a52      	ldr	r2, [pc, #328]	@ (8003468 <HAL_GPIO_Init+0x314>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d02b      	beq.n	800337a <HAL_GPIO_Init+0x226>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a51      	ldr	r2, [pc, #324]	@ (800346c <HAL_GPIO_Init+0x318>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d025      	beq.n	8003376 <HAL_GPIO_Init+0x222>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a50      	ldr	r2, [pc, #320]	@ (8003470 <HAL_GPIO_Init+0x31c>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d01f      	beq.n	8003372 <HAL_GPIO_Init+0x21e>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a4f      	ldr	r2, [pc, #316]	@ (8003474 <HAL_GPIO_Init+0x320>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d019      	beq.n	800336e <HAL_GPIO_Init+0x21a>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a4e      	ldr	r2, [pc, #312]	@ (8003478 <HAL_GPIO_Init+0x324>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d013      	beq.n	800336a <HAL_GPIO_Init+0x216>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a4d      	ldr	r2, [pc, #308]	@ (800347c <HAL_GPIO_Init+0x328>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d00d      	beq.n	8003366 <HAL_GPIO_Init+0x212>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a4c      	ldr	r2, [pc, #304]	@ (8003480 <HAL_GPIO_Init+0x32c>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d007      	beq.n	8003362 <HAL_GPIO_Init+0x20e>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a4b      	ldr	r2, [pc, #300]	@ (8003484 <HAL_GPIO_Init+0x330>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d101      	bne.n	800335e <HAL_GPIO_Init+0x20a>
 800335a:	2307      	movs	r3, #7
 800335c:	e00e      	b.n	800337c <HAL_GPIO_Init+0x228>
 800335e:	2308      	movs	r3, #8
 8003360:	e00c      	b.n	800337c <HAL_GPIO_Init+0x228>
 8003362:	2306      	movs	r3, #6
 8003364:	e00a      	b.n	800337c <HAL_GPIO_Init+0x228>
 8003366:	2305      	movs	r3, #5
 8003368:	e008      	b.n	800337c <HAL_GPIO_Init+0x228>
 800336a:	2304      	movs	r3, #4
 800336c:	e006      	b.n	800337c <HAL_GPIO_Init+0x228>
 800336e:	2303      	movs	r3, #3
 8003370:	e004      	b.n	800337c <HAL_GPIO_Init+0x228>
 8003372:	2302      	movs	r3, #2
 8003374:	e002      	b.n	800337c <HAL_GPIO_Init+0x228>
 8003376:	2301      	movs	r3, #1
 8003378:	e000      	b.n	800337c <HAL_GPIO_Init+0x228>
 800337a:	2300      	movs	r3, #0
 800337c:	69fa      	ldr	r2, [r7, #28]
 800337e:	f002 0203 	and.w	r2, r2, #3
 8003382:	0092      	lsls	r2, r2, #2
 8003384:	4093      	lsls	r3, r2
 8003386:	69ba      	ldr	r2, [r7, #24]
 8003388:	4313      	orrs	r3, r2
 800338a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800338c:	4935      	ldr	r1, [pc, #212]	@ (8003464 <HAL_GPIO_Init+0x310>)
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	089b      	lsrs	r3, r3, #2
 8003392:	3302      	adds	r3, #2
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800339a:	4b3b      	ldr	r3, [pc, #236]	@ (8003488 <HAL_GPIO_Init+0x334>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	43db      	mvns	r3, r3
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	4013      	ands	r3, r2
 80033a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d003      	beq.n	80033be <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80033b6:	69ba      	ldr	r2, [r7, #24]
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033be:	4a32      	ldr	r2, [pc, #200]	@ (8003488 <HAL_GPIO_Init+0x334>)
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033c4:	4b30      	ldr	r3, [pc, #192]	@ (8003488 <HAL_GPIO_Init+0x334>)
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	43db      	mvns	r3, r3
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	4013      	ands	r3, r2
 80033d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d003      	beq.n	80033e8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033e8:	4a27      	ldr	r2, [pc, #156]	@ (8003488 <HAL_GPIO_Init+0x334>)
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80033ee:	4b26      	ldr	r3, [pc, #152]	@ (8003488 <HAL_GPIO_Init+0x334>)
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	43db      	mvns	r3, r3
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	4013      	ands	r3, r2
 80033fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d003      	beq.n	8003412 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800340a:	69ba      	ldr	r2, [r7, #24]
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	4313      	orrs	r3, r2
 8003410:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003412:	4a1d      	ldr	r2, [pc, #116]	@ (8003488 <HAL_GPIO_Init+0x334>)
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003418:	4b1b      	ldr	r3, [pc, #108]	@ (8003488 <HAL_GPIO_Init+0x334>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	43db      	mvns	r3, r3
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	4013      	ands	r3, r2
 8003426:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d003      	beq.n	800343c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	4313      	orrs	r3, r2
 800343a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800343c:	4a12      	ldr	r2, [pc, #72]	@ (8003488 <HAL_GPIO_Init+0x334>)
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	3301      	adds	r3, #1
 8003446:	61fb      	str	r3, [r7, #28]
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	2b0f      	cmp	r3, #15
 800344c:	f67f ae90 	bls.w	8003170 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003450:	bf00      	nop
 8003452:	bf00      	nop
 8003454:	3724      	adds	r7, #36	@ 0x24
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	40023800 	.word	0x40023800
 8003464:	40013800 	.word	0x40013800
 8003468:	40020000 	.word	0x40020000
 800346c:	40020400 	.word	0x40020400
 8003470:	40020800 	.word	0x40020800
 8003474:	40020c00 	.word	0x40020c00
 8003478:	40021000 	.word	0x40021000
 800347c:	40021400 	.word	0x40021400
 8003480:	40021800 	.word	0x40021800
 8003484:	40021c00 	.word	0x40021c00
 8003488:	40013c00 	.word	0x40013c00

0800348c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	460b      	mov	r3, r1
 8003496:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	691a      	ldr	r2, [r3, #16]
 800349c:	887b      	ldrh	r3, [r7, #2]
 800349e:	4013      	ands	r3, r2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d002      	beq.n	80034aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034a4:	2301      	movs	r3, #1
 80034a6:	73fb      	strb	r3, [r7, #15]
 80034a8:	e001      	b.n	80034ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034aa:	2300      	movs	r3, #0
 80034ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3714      	adds	r7, #20
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	460b      	mov	r3, r1
 80034c6:	807b      	strh	r3, [r7, #2]
 80034c8:	4613      	mov	r3, r2
 80034ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034cc:	787b      	ldrb	r3, [r7, #1]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d003      	beq.n	80034da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034d2:	887a      	ldrh	r2, [r7, #2]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80034d8:	e003      	b.n	80034e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80034da:	887b      	ldrh	r3, [r7, #2]
 80034dc:	041a      	lsls	r2, r3, #16
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	619a      	str	r2, [r3, #24]
}
 80034e2:	bf00      	nop
 80034e4:	370c      	adds	r7, #12
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
	...

080034f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	4603      	mov	r3, r0
 80034f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80034fa:	4b08      	ldr	r3, [pc, #32]	@ (800351c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034fc:	695a      	ldr	r2, [r3, #20]
 80034fe:	88fb      	ldrh	r3, [r7, #6]
 8003500:	4013      	ands	r3, r2
 8003502:	2b00      	cmp	r3, #0
 8003504:	d006      	beq.n	8003514 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003506:	4a05      	ldr	r2, [pc, #20]	@ (800351c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003508:	88fb      	ldrh	r3, [r7, #6]
 800350a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800350c:	88fb      	ldrh	r3, [r7, #6]
 800350e:	4618      	mov	r0, r3
 8003510:	f7fe f922 	bl	8001758 <HAL_GPIO_EXTI_Callback>
  }
}
 8003514:	bf00      	nop
 8003516:	3708      	adds	r7, #8
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	40013c00 	.word	0x40013c00

08003520 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af02      	add	r7, sp, #8
 8003526:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e059      	b.n	80035e6 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 800353e:	b2db      	uxtb	r3, r3
 8003540:	2b00      	cmp	r3, #0
 8003542:	d106      	bne.n	8003552 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f007 fe33 	bl	800b1b8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2203      	movs	r2, #3
 8003556:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003560:	d102      	bne.n	8003568 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4618      	mov	r0, r3
 800356e:	f004 fc40 	bl	8007df2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6818      	ldr	r0, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	7c1a      	ldrb	r2, [r3, #16]
 800357a:	f88d 2000 	strb.w	r2, [sp]
 800357e:	3304      	adds	r3, #4
 8003580:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003582:	f004 fbc1 	bl	8007d08 <USB_CoreInit>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d005      	beq.n	8003598 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2202      	movs	r2, #2
 8003590:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e026      	b.n	80035e6 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2101      	movs	r1, #1
 800359e:	4618      	mov	r0, r3
 80035a0:	f004 fc38 	bl	8007e14 <USB_SetCurrentMode>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d005      	beq.n	80035b6 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2202      	movs	r2, #2
 80035ae:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e017      	b.n	80035e6 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6818      	ldr	r0, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	7c1a      	ldrb	r2, [r3, #16]
 80035be:	f88d 2000 	strb.w	r2, [sp]
 80035c2:	3304      	adds	r3, #4
 80035c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035c6:	f004 fde1 	bl	800818c <USB_HostInit>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d005      	beq.n	80035dc <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2202      	movs	r2, #2
 80035d4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e004      	b.n	80035e6 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80035ee:	b590      	push	{r4, r7, lr}
 80035f0:	b08b      	sub	sp, #44	@ 0x2c
 80035f2:	af04      	add	r7, sp, #16
 80035f4:	6078      	str	r0, [r7, #4]
 80035f6:	4608      	mov	r0, r1
 80035f8:	4611      	mov	r1, r2
 80035fa:	461a      	mov	r2, r3
 80035fc:	4603      	mov	r3, r0
 80035fe:	70fb      	strb	r3, [r7, #3]
 8003600:	460b      	mov	r3, r1
 8003602:	70bb      	strb	r3, [r7, #2]
 8003604:	4613      	mov	r3, r2
 8003606:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8003608:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800360a:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003612:	2b01      	cmp	r3, #1
 8003614:	d101      	bne.n	800361a <HAL_HCD_HC_Init+0x2c>
 8003616:	2302      	movs	r3, #2
 8003618:	e09d      	b.n	8003756 <HAL_HCD_HC_Init+0x168>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2201      	movs	r2, #1
 800361e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8003622:	78fa      	ldrb	r2, [r7, #3]
 8003624:	6879      	ldr	r1, [r7, #4]
 8003626:	4613      	mov	r3, r2
 8003628:	011b      	lsls	r3, r3, #4
 800362a:	1a9b      	subs	r3, r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	440b      	add	r3, r1
 8003630:	3319      	adds	r3, #25
 8003632:	2200      	movs	r2, #0
 8003634:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003636:	78fa      	ldrb	r2, [r7, #3]
 8003638:	6879      	ldr	r1, [r7, #4]
 800363a:	4613      	mov	r3, r2
 800363c:	011b      	lsls	r3, r3, #4
 800363e:	1a9b      	subs	r3, r3, r2
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	440b      	add	r3, r1
 8003644:	3314      	adds	r3, #20
 8003646:	787a      	ldrb	r2, [r7, #1]
 8003648:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800364a:	78fa      	ldrb	r2, [r7, #3]
 800364c:	6879      	ldr	r1, [r7, #4]
 800364e:	4613      	mov	r3, r2
 8003650:	011b      	lsls	r3, r3, #4
 8003652:	1a9b      	subs	r3, r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	440b      	add	r3, r1
 8003658:	3315      	adds	r3, #21
 800365a:	78fa      	ldrb	r2, [r7, #3]
 800365c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800365e:	78fa      	ldrb	r2, [r7, #3]
 8003660:	6879      	ldr	r1, [r7, #4]
 8003662:	4613      	mov	r3, r2
 8003664:	011b      	lsls	r3, r3, #4
 8003666:	1a9b      	subs	r3, r3, r2
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	440b      	add	r3, r1
 800366c:	3326      	adds	r3, #38	@ 0x26
 800366e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8003672:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003674:	78fa      	ldrb	r2, [r7, #3]
 8003676:	78bb      	ldrb	r3, [r7, #2]
 8003678:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800367c:	b2d8      	uxtb	r0, r3
 800367e:	6879      	ldr	r1, [r7, #4]
 8003680:	4613      	mov	r3, r2
 8003682:	011b      	lsls	r3, r3, #4
 8003684:	1a9b      	subs	r3, r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	440b      	add	r3, r1
 800368a:	3316      	adds	r3, #22
 800368c:	4602      	mov	r2, r0
 800368e:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8003690:	78fb      	ldrb	r3, [r7, #3]
 8003692:	4619      	mov	r1, r3
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 fbc7 	bl	8003e28 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 800369a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	da0a      	bge.n	80036b8 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80036a2:	78fa      	ldrb	r2, [r7, #3]
 80036a4:	6879      	ldr	r1, [r7, #4]
 80036a6:	4613      	mov	r3, r2
 80036a8:	011b      	lsls	r3, r3, #4
 80036aa:	1a9b      	subs	r3, r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	440b      	add	r3, r1
 80036b0:	3317      	adds	r3, #23
 80036b2:	2201      	movs	r2, #1
 80036b4:	701a      	strb	r2, [r3, #0]
 80036b6:	e009      	b.n	80036cc <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80036b8:	78fa      	ldrb	r2, [r7, #3]
 80036ba:	6879      	ldr	r1, [r7, #4]
 80036bc:	4613      	mov	r3, r2
 80036be:	011b      	lsls	r3, r3, #4
 80036c0:	1a9b      	subs	r3, r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	440b      	add	r3, r1
 80036c6:	3317      	adds	r3, #23
 80036c8:	2200      	movs	r2, #0
 80036ca:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f004 febf 	bl	8008454 <USB_GetHostSpeed>
 80036d6:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80036d8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d10b      	bne.n	80036f8 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80036e0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d107      	bne.n	80036f8 <HAL_HCD_HC_Init+0x10a>
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d104      	bne.n	80036f8 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	2bbc      	cmp	r3, #188	@ 0xbc
 80036f2:	d901      	bls.n	80036f8 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80036f4:	23bc      	movs	r3, #188	@ 0xbc
 80036f6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80036f8:	78fa      	ldrb	r2, [r7, #3]
 80036fa:	6879      	ldr	r1, [r7, #4]
 80036fc:	4613      	mov	r3, r2
 80036fe:	011b      	lsls	r3, r3, #4
 8003700:	1a9b      	subs	r3, r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	440b      	add	r3, r1
 8003706:	3318      	adds	r3, #24
 8003708:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800370c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 800370e:	78fa      	ldrb	r2, [r7, #3]
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	b298      	uxth	r0, r3
 8003714:	6879      	ldr	r1, [r7, #4]
 8003716:	4613      	mov	r3, r2
 8003718:	011b      	lsls	r3, r3, #4
 800371a:	1a9b      	subs	r3, r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	440b      	add	r3, r1
 8003720:	3328      	adds	r3, #40	@ 0x28
 8003722:	4602      	mov	r2, r0
 8003724:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6818      	ldr	r0, [r3, #0]
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	b29b      	uxth	r3, r3
 800372e:	787c      	ldrb	r4, [r7, #1]
 8003730:	78ba      	ldrb	r2, [r7, #2]
 8003732:	78f9      	ldrb	r1, [r7, #3]
 8003734:	9302      	str	r3, [sp, #8]
 8003736:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800373a:	9301      	str	r3, [sp, #4]
 800373c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003740:	9300      	str	r3, [sp, #0]
 8003742:	4623      	mov	r3, r4
 8003744:	f004 feae 	bl	80084a4 <USB_HC_Init>
 8003748:	4603      	mov	r3, r0
 800374a:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8003754:	7bfb      	ldrb	r3, [r7, #15]
}
 8003756:	4618      	mov	r0, r3
 8003758:	371c      	adds	r7, #28
 800375a:	46bd      	mov	sp, r7
 800375c:	bd90      	pop	{r4, r7, pc}

0800375e <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800375e:	b580      	push	{r7, lr}
 8003760:	b084      	sub	sp, #16
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
 8003766:	460b      	mov	r3, r1
 8003768:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800376a:	2300      	movs	r3, #0
 800376c:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003774:	2b01      	cmp	r3, #1
 8003776:	d101      	bne.n	800377c <HAL_HCD_HC_Halt+0x1e>
 8003778:	2302      	movs	r3, #2
 800377a:	e00f      	b.n	800379c <HAL_HCD_HC_Halt+0x3e>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	78fa      	ldrb	r2, [r7, #3]
 800378a:	4611      	mov	r1, r2
 800378c:	4618      	mov	r0, r3
 800378e:	f005 fa40 	bl	8008c12 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800379a:	7bfb      	ldrb	r3, [r7, #15]
}
 800379c:	4618      	mov	r0, r3
 800379e:	3710      	adds	r7, #16
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	4608      	mov	r0, r1
 80037ae:	4611      	mov	r1, r2
 80037b0:	461a      	mov	r2, r3
 80037b2:	4603      	mov	r3, r0
 80037b4:	70fb      	strb	r3, [r7, #3]
 80037b6:	460b      	mov	r3, r1
 80037b8:	70bb      	strb	r3, [r7, #2]
 80037ba:	4613      	mov	r3, r2
 80037bc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80037be:	78fa      	ldrb	r2, [r7, #3]
 80037c0:	6879      	ldr	r1, [r7, #4]
 80037c2:	4613      	mov	r3, r2
 80037c4:	011b      	lsls	r3, r3, #4
 80037c6:	1a9b      	subs	r3, r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	440b      	add	r3, r1
 80037cc:	3317      	adds	r3, #23
 80037ce:	78ba      	ldrb	r2, [r7, #2]
 80037d0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80037d2:	78fa      	ldrb	r2, [r7, #3]
 80037d4:	6879      	ldr	r1, [r7, #4]
 80037d6:	4613      	mov	r3, r2
 80037d8:	011b      	lsls	r3, r3, #4
 80037da:	1a9b      	subs	r3, r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	440b      	add	r3, r1
 80037e0:	3326      	adds	r3, #38	@ 0x26
 80037e2:	787a      	ldrb	r2, [r7, #1]
 80037e4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80037e6:	7c3b      	ldrb	r3, [r7, #16]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d114      	bne.n	8003816 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80037ec:	78fa      	ldrb	r2, [r7, #3]
 80037ee:	6879      	ldr	r1, [r7, #4]
 80037f0:	4613      	mov	r3, r2
 80037f2:	011b      	lsls	r3, r3, #4
 80037f4:	1a9b      	subs	r3, r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	440b      	add	r3, r1
 80037fa:	332a      	adds	r3, #42	@ 0x2a
 80037fc:	2203      	movs	r2, #3
 80037fe:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003800:	78fa      	ldrb	r2, [r7, #3]
 8003802:	6879      	ldr	r1, [r7, #4]
 8003804:	4613      	mov	r3, r2
 8003806:	011b      	lsls	r3, r3, #4
 8003808:	1a9b      	subs	r3, r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	440b      	add	r3, r1
 800380e:	3319      	adds	r3, #25
 8003810:	7f3a      	ldrb	r2, [r7, #28]
 8003812:	701a      	strb	r2, [r3, #0]
 8003814:	e009      	b.n	800382a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003816:	78fa      	ldrb	r2, [r7, #3]
 8003818:	6879      	ldr	r1, [r7, #4]
 800381a:	4613      	mov	r3, r2
 800381c:	011b      	lsls	r3, r3, #4
 800381e:	1a9b      	subs	r3, r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	440b      	add	r3, r1
 8003824:	332a      	adds	r3, #42	@ 0x2a
 8003826:	2202      	movs	r2, #2
 8003828:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800382a:	787b      	ldrb	r3, [r7, #1]
 800382c:	2b03      	cmp	r3, #3
 800382e:	f200 8102 	bhi.w	8003a36 <HAL_HCD_HC_SubmitRequest+0x292>
 8003832:	a201      	add	r2, pc, #4	@ (adr r2, 8003838 <HAL_HCD_HC_SubmitRequest+0x94>)
 8003834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003838:	08003849 	.word	0x08003849
 800383c:	08003a21 	.word	0x08003a21
 8003840:	0800390d 	.word	0x0800390d
 8003844:	08003997 	.word	0x08003997
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8003848:	7c3b      	ldrb	r3, [r7, #16]
 800384a:	2b01      	cmp	r3, #1
 800384c:	f040 80f5 	bne.w	8003a3a <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8003850:	78bb      	ldrb	r3, [r7, #2]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d12d      	bne.n	80038b2 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8003856:	8b3b      	ldrh	r3, [r7, #24]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d109      	bne.n	8003870 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 800385c:	78fa      	ldrb	r2, [r7, #3]
 800385e:	6879      	ldr	r1, [r7, #4]
 8003860:	4613      	mov	r3, r2
 8003862:	011b      	lsls	r3, r3, #4
 8003864:	1a9b      	subs	r3, r3, r2
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	440b      	add	r3, r1
 800386a:	333d      	adds	r3, #61	@ 0x3d
 800386c:	2201      	movs	r2, #1
 800386e:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8003870:	78fa      	ldrb	r2, [r7, #3]
 8003872:	6879      	ldr	r1, [r7, #4]
 8003874:	4613      	mov	r3, r2
 8003876:	011b      	lsls	r3, r3, #4
 8003878:	1a9b      	subs	r3, r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	440b      	add	r3, r1
 800387e:	333d      	adds	r3, #61	@ 0x3d
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d10a      	bne.n	800389c <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003886:	78fa      	ldrb	r2, [r7, #3]
 8003888:	6879      	ldr	r1, [r7, #4]
 800388a:	4613      	mov	r3, r2
 800388c:	011b      	lsls	r3, r3, #4
 800388e:	1a9b      	subs	r3, r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	440b      	add	r3, r1
 8003894:	332a      	adds	r3, #42	@ 0x2a
 8003896:	2200      	movs	r2, #0
 8003898:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800389a:	e0ce      	b.n	8003a3a <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800389c:	78fa      	ldrb	r2, [r7, #3]
 800389e:	6879      	ldr	r1, [r7, #4]
 80038a0:	4613      	mov	r3, r2
 80038a2:	011b      	lsls	r3, r3, #4
 80038a4:	1a9b      	subs	r3, r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	440b      	add	r3, r1
 80038aa:	332a      	adds	r3, #42	@ 0x2a
 80038ac:	2202      	movs	r2, #2
 80038ae:	701a      	strb	r2, [r3, #0]
      break;
 80038b0:	e0c3      	b.n	8003a3a <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80038b2:	78fa      	ldrb	r2, [r7, #3]
 80038b4:	6879      	ldr	r1, [r7, #4]
 80038b6:	4613      	mov	r3, r2
 80038b8:	011b      	lsls	r3, r3, #4
 80038ba:	1a9b      	subs	r3, r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	440b      	add	r3, r1
 80038c0:	331a      	adds	r3, #26
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	f040 80b8 	bne.w	8003a3a <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80038ca:	78fa      	ldrb	r2, [r7, #3]
 80038cc:	6879      	ldr	r1, [r7, #4]
 80038ce:	4613      	mov	r3, r2
 80038d0:	011b      	lsls	r3, r3, #4
 80038d2:	1a9b      	subs	r3, r3, r2
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	440b      	add	r3, r1
 80038d8:	333c      	adds	r3, #60	@ 0x3c
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d10a      	bne.n	80038f6 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80038e0:	78fa      	ldrb	r2, [r7, #3]
 80038e2:	6879      	ldr	r1, [r7, #4]
 80038e4:	4613      	mov	r3, r2
 80038e6:	011b      	lsls	r3, r3, #4
 80038e8:	1a9b      	subs	r3, r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	440b      	add	r3, r1
 80038ee:	332a      	adds	r3, #42	@ 0x2a
 80038f0:	2200      	movs	r2, #0
 80038f2:	701a      	strb	r2, [r3, #0]
      break;
 80038f4:	e0a1      	b.n	8003a3a <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80038f6:	78fa      	ldrb	r2, [r7, #3]
 80038f8:	6879      	ldr	r1, [r7, #4]
 80038fa:	4613      	mov	r3, r2
 80038fc:	011b      	lsls	r3, r3, #4
 80038fe:	1a9b      	subs	r3, r3, r2
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	440b      	add	r3, r1
 8003904:	332a      	adds	r3, #42	@ 0x2a
 8003906:	2202      	movs	r2, #2
 8003908:	701a      	strb	r2, [r3, #0]
      break;
 800390a:	e096      	b.n	8003a3a <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800390c:	78bb      	ldrb	r3, [r7, #2]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d120      	bne.n	8003954 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003912:	78fa      	ldrb	r2, [r7, #3]
 8003914:	6879      	ldr	r1, [r7, #4]
 8003916:	4613      	mov	r3, r2
 8003918:	011b      	lsls	r3, r3, #4
 800391a:	1a9b      	subs	r3, r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	440b      	add	r3, r1
 8003920:	333d      	adds	r3, #61	@ 0x3d
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d10a      	bne.n	800393e <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003928:	78fa      	ldrb	r2, [r7, #3]
 800392a:	6879      	ldr	r1, [r7, #4]
 800392c:	4613      	mov	r3, r2
 800392e:	011b      	lsls	r3, r3, #4
 8003930:	1a9b      	subs	r3, r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	440b      	add	r3, r1
 8003936:	332a      	adds	r3, #42	@ 0x2a
 8003938:	2200      	movs	r2, #0
 800393a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800393c:	e07e      	b.n	8003a3c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800393e:	78fa      	ldrb	r2, [r7, #3]
 8003940:	6879      	ldr	r1, [r7, #4]
 8003942:	4613      	mov	r3, r2
 8003944:	011b      	lsls	r3, r3, #4
 8003946:	1a9b      	subs	r3, r3, r2
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	440b      	add	r3, r1
 800394c:	332a      	adds	r3, #42	@ 0x2a
 800394e:	2202      	movs	r2, #2
 8003950:	701a      	strb	r2, [r3, #0]
      break;
 8003952:	e073      	b.n	8003a3c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003954:	78fa      	ldrb	r2, [r7, #3]
 8003956:	6879      	ldr	r1, [r7, #4]
 8003958:	4613      	mov	r3, r2
 800395a:	011b      	lsls	r3, r3, #4
 800395c:	1a9b      	subs	r3, r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	440b      	add	r3, r1
 8003962:	333c      	adds	r3, #60	@ 0x3c
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d10a      	bne.n	8003980 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800396a:	78fa      	ldrb	r2, [r7, #3]
 800396c:	6879      	ldr	r1, [r7, #4]
 800396e:	4613      	mov	r3, r2
 8003970:	011b      	lsls	r3, r3, #4
 8003972:	1a9b      	subs	r3, r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	440b      	add	r3, r1
 8003978:	332a      	adds	r3, #42	@ 0x2a
 800397a:	2200      	movs	r2, #0
 800397c:	701a      	strb	r2, [r3, #0]
      break;
 800397e:	e05d      	b.n	8003a3c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003980:	78fa      	ldrb	r2, [r7, #3]
 8003982:	6879      	ldr	r1, [r7, #4]
 8003984:	4613      	mov	r3, r2
 8003986:	011b      	lsls	r3, r3, #4
 8003988:	1a9b      	subs	r3, r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	440b      	add	r3, r1
 800398e:	332a      	adds	r3, #42	@ 0x2a
 8003990:	2202      	movs	r2, #2
 8003992:	701a      	strb	r2, [r3, #0]
      break;
 8003994:	e052      	b.n	8003a3c <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003996:	78bb      	ldrb	r3, [r7, #2]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d120      	bne.n	80039de <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800399c:	78fa      	ldrb	r2, [r7, #3]
 800399e:	6879      	ldr	r1, [r7, #4]
 80039a0:	4613      	mov	r3, r2
 80039a2:	011b      	lsls	r3, r3, #4
 80039a4:	1a9b      	subs	r3, r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	440b      	add	r3, r1
 80039aa:	333d      	adds	r3, #61	@ 0x3d
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10a      	bne.n	80039c8 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80039b2:	78fa      	ldrb	r2, [r7, #3]
 80039b4:	6879      	ldr	r1, [r7, #4]
 80039b6:	4613      	mov	r3, r2
 80039b8:	011b      	lsls	r3, r3, #4
 80039ba:	1a9b      	subs	r3, r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	440b      	add	r3, r1
 80039c0:	332a      	adds	r3, #42	@ 0x2a
 80039c2:	2200      	movs	r2, #0
 80039c4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80039c6:	e039      	b.n	8003a3c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80039c8:	78fa      	ldrb	r2, [r7, #3]
 80039ca:	6879      	ldr	r1, [r7, #4]
 80039cc:	4613      	mov	r3, r2
 80039ce:	011b      	lsls	r3, r3, #4
 80039d0:	1a9b      	subs	r3, r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	440b      	add	r3, r1
 80039d6:	332a      	adds	r3, #42	@ 0x2a
 80039d8:	2202      	movs	r2, #2
 80039da:	701a      	strb	r2, [r3, #0]
      break;
 80039dc:	e02e      	b.n	8003a3c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80039de:	78fa      	ldrb	r2, [r7, #3]
 80039e0:	6879      	ldr	r1, [r7, #4]
 80039e2:	4613      	mov	r3, r2
 80039e4:	011b      	lsls	r3, r3, #4
 80039e6:	1a9b      	subs	r3, r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	440b      	add	r3, r1
 80039ec:	333c      	adds	r3, #60	@ 0x3c
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d10a      	bne.n	8003a0a <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80039f4:	78fa      	ldrb	r2, [r7, #3]
 80039f6:	6879      	ldr	r1, [r7, #4]
 80039f8:	4613      	mov	r3, r2
 80039fa:	011b      	lsls	r3, r3, #4
 80039fc:	1a9b      	subs	r3, r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	440b      	add	r3, r1
 8003a02:	332a      	adds	r3, #42	@ 0x2a
 8003a04:	2200      	movs	r2, #0
 8003a06:	701a      	strb	r2, [r3, #0]
      break;
 8003a08:	e018      	b.n	8003a3c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003a0a:	78fa      	ldrb	r2, [r7, #3]
 8003a0c:	6879      	ldr	r1, [r7, #4]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	011b      	lsls	r3, r3, #4
 8003a12:	1a9b      	subs	r3, r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	440b      	add	r3, r1
 8003a18:	332a      	adds	r3, #42	@ 0x2a
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	701a      	strb	r2, [r3, #0]
      break;
 8003a1e:	e00d      	b.n	8003a3c <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003a20:	78fa      	ldrb	r2, [r7, #3]
 8003a22:	6879      	ldr	r1, [r7, #4]
 8003a24:	4613      	mov	r3, r2
 8003a26:	011b      	lsls	r3, r3, #4
 8003a28:	1a9b      	subs	r3, r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	440b      	add	r3, r1
 8003a2e:	332a      	adds	r3, #42	@ 0x2a
 8003a30:	2200      	movs	r2, #0
 8003a32:	701a      	strb	r2, [r3, #0]
      break;
 8003a34:	e002      	b.n	8003a3c <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8003a36:	bf00      	nop
 8003a38:	e000      	b.n	8003a3c <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8003a3a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003a3c:	78fa      	ldrb	r2, [r7, #3]
 8003a3e:	6879      	ldr	r1, [r7, #4]
 8003a40:	4613      	mov	r3, r2
 8003a42:	011b      	lsls	r3, r3, #4
 8003a44:	1a9b      	subs	r3, r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	440b      	add	r3, r1
 8003a4a:	332c      	adds	r3, #44	@ 0x2c
 8003a4c:	697a      	ldr	r2, [r7, #20]
 8003a4e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003a50:	78fa      	ldrb	r2, [r7, #3]
 8003a52:	8b39      	ldrh	r1, [r7, #24]
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	4613      	mov	r3, r2
 8003a58:	011b      	lsls	r3, r3, #4
 8003a5a:	1a9b      	subs	r3, r3, r2
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	4403      	add	r3, r0
 8003a60:	3334      	adds	r3, #52	@ 0x34
 8003a62:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003a64:	78fa      	ldrb	r2, [r7, #3]
 8003a66:	6879      	ldr	r1, [r7, #4]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	011b      	lsls	r3, r3, #4
 8003a6c:	1a9b      	subs	r3, r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	440b      	add	r3, r1
 8003a72:	334c      	adds	r3, #76	@ 0x4c
 8003a74:	2200      	movs	r2, #0
 8003a76:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003a78:	78fa      	ldrb	r2, [r7, #3]
 8003a7a:	6879      	ldr	r1, [r7, #4]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	011b      	lsls	r3, r3, #4
 8003a80:	1a9b      	subs	r3, r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	440b      	add	r3, r1
 8003a86:	3338      	adds	r3, #56	@ 0x38
 8003a88:	2200      	movs	r2, #0
 8003a8a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003a8c:	78fa      	ldrb	r2, [r7, #3]
 8003a8e:	6879      	ldr	r1, [r7, #4]
 8003a90:	4613      	mov	r3, r2
 8003a92:	011b      	lsls	r3, r3, #4
 8003a94:	1a9b      	subs	r3, r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	440b      	add	r3, r1
 8003a9a:	3315      	adds	r3, #21
 8003a9c:	78fa      	ldrb	r2, [r7, #3]
 8003a9e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003aa0:	78fa      	ldrb	r2, [r7, #3]
 8003aa2:	6879      	ldr	r1, [r7, #4]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	011b      	lsls	r3, r3, #4
 8003aa8:	1a9b      	subs	r3, r3, r2
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	440b      	add	r3, r1
 8003aae:	334d      	adds	r3, #77	@ 0x4d
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6818      	ldr	r0, [r3, #0]
 8003ab8:	78fa      	ldrb	r2, [r7, #3]
 8003aba:	4613      	mov	r3, r2
 8003abc:	011b      	lsls	r3, r3, #4
 8003abe:	1a9b      	subs	r3, r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	3310      	adds	r3, #16
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	1d19      	adds	r1, r3, #4
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	799b      	ldrb	r3, [r3, #6]
 8003ace:	461a      	mov	r2, r3
 8003ad0:	f004 fe14 	bl	80086fc <USB_HC_StartXfer>
 8003ad4:	4603      	mov	r3, r0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3708      	adds	r7, #8
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop

08003ae0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b086      	sub	sp, #24
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f004 fb02 	bl	8008100 <USB_GetMode>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	f040 80fb 	bne.w	8003cfa <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f004 fac5 	bl	8008098 <USB_ReadInterrupts>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	f000 80f1 	beq.w	8003cf8 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f004 fabc 	bl	8008098 <USB_ReadInterrupts>
 8003b20:	4603      	mov	r3, r0
 8003b22:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b26:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b2a:	d104      	bne.n	8003b36 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003b34:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f004 faac 	bl	8008098 <USB_ReadInterrupts>
 8003b40:	4603      	mov	r3, r0
 8003b42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b4a:	d104      	bne.n	8003b56 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003b54:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f004 fa9c 	bl	8008098 <USB_ReadInterrupts>
 8003b60:	4603      	mov	r3, r0
 8003b62:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003b66:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003b6a:	d104      	bne.n	8003b76 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003b74:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f004 fa8c 	bl	8008098 <USB_ReadInterrupts>
 8003b80:	4603      	mov	r3, r0
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d103      	bne.n	8003b92 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2202      	movs	r2, #2
 8003b90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f004 fa7e 	bl	8008098 <USB_ReadInterrupts>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ba2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ba6:	d120      	bne.n	8003bea <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003bb0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d113      	bne.n	8003bea <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003bc2:	2110      	movs	r1, #16
 8003bc4:	6938      	ldr	r0, [r7, #16]
 8003bc6:	f004 f971 	bl	8007eac <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003bca:	6938      	ldr	r0, [r7, #16]
 8003bcc:	f004 f9a0 	bl	8007f10 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	7a5b      	ldrb	r3, [r3, #9]
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d105      	bne.n	8003be4 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2101      	movs	r1, #1
 8003bde:	4618      	mov	r0, r3
 8003be0:	f004 fb98 	bl	8008314 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f007 fb65 	bl	800b2b4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f004 fa52 	bl	8008098 <USB_ReadInterrupts>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003bfa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003bfe:	d102      	bne.n	8003c06 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f001 fd4d 	bl	80056a0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f004 fa44 	bl	8008098 <USB_ReadInterrupts>
 8003c10:	4603      	mov	r3, r0
 8003c12:	f003 0308 	and.w	r3, r3, #8
 8003c16:	2b08      	cmp	r3, #8
 8003c18:	d106      	bne.n	8003c28 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f007 fb2e 	bl	800b27c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2208      	movs	r2, #8
 8003c26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f004 fa33 	bl	8008098 <USB_ReadInterrupts>
 8003c32:	4603      	mov	r3, r0
 8003c34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c38:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c3c:	d139      	bne.n	8003cb2 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4618      	mov	r0, r3
 8003c44:	f004 ffd4 	bl	8008bf0 <USB_HC_ReadInterrupt>
 8003c48:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	617b      	str	r3, [r7, #20]
 8003c4e:	e025      	b.n	8003c9c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	f003 030f 	and.w	r3, r3, #15
 8003c56:	68ba      	ldr	r2, [r7, #8]
 8003c58:	fa22 f303 	lsr.w	r3, r2, r3
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d018      	beq.n	8003c96 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	015a      	lsls	r2, r3, #5
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	4413      	add	r3, r2
 8003c6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c7a:	d106      	bne.n	8003c8a <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	4619      	mov	r1, r3
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f905 	bl	8003e92 <HCD_HC_IN_IRQHandler>
 8003c88:	e005      	b.n	8003c96 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	4619      	mov	r1, r3
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 ff67 	bl	8004b64 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	3301      	adds	r3, #1
 8003c9a:	617b      	str	r3, [r7, #20]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	795b      	ldrb	r3, [r3, #5]
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d3d3      	bcc.n	8003c50 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003cb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f004 f9ee 	bl	8008098 <USB_ReadInterrupts>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	f003 0310 	and.w	r3, r3, #16
 8003cc2:	2b10      	cmp	r3, #16
 8003cc4:	d101      	bne.n	8003cca <HAL_HCD_IRQHandler+0x1ea>
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e000      	b.n	8003ccc <HAL_HCD_IRQHandler+0x1ec>
 8003cca:	2300      	movs	r3, #0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d014      	beq.n	8003cfa <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	699a      	ldr	r2, [r3, #24]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f022 0210 	bic.w	r2, r2, #16
 8003cde:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f001 fbfe 	bl	80054e2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	699a      	ldr	r2, [r3, #24]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f042 0210 	orr.w	r2, r2, #16
 8003cf4:	619a      	str	r2, [r3, #24]
 8003cf6:	e000      	b.n	8003cfa <HAL_HCD_IRQHandler+0x21a>
      return;
 8003cf8:	bf00      	nop
    }
  }
}
 8003cfa:	3718      	adds	r7, #24
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d101      	bne.n	8003d16 <HAL_HCD_Start+0x16>
 8003d12:	2302      	movs	r3, #2
 8003d14:	e013      	b.n	8003d3e <HAL_HCD_Start+0x3e>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2101      	movs	r1, #1
 8003d24:	4618      	mov	r0, r3
 8003d26:	f004 fb5c 	bl	80083e2 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f004 f84e 	bl	8007dd0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3708      	adds	r7, #8
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b082      	sub	sp, #8
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d101      	bne.n	8003d5c <HAL_HCD_Stop+0x16>
 8003d58:	2302      	movs	r3, #2
 8003d5a:	e00d      	b.n	8003d78 <HAL_HCD_Stop+0x32>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f005 f8af 	bl	8008ecc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003d76:	2300      	movs	r3, #0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3708      	adds	r7, #8
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f004 fafe 	bl	800838e <USB_ResetPort>
 8003d92:	4603      	mov	r3, r0
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3708      	adds	r7, #8
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	460b      	mov	r3, r1
 8003da6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003da8:	78fa      	ldrb	r2, [r7, #3]
 8003daa:	6879      	ldr	r1, [r7, #4]
 8003dac:	4613      	mov	r3, r2
 8003dae:	011b      	lsls	r3, r3, #4
 8003db0:	1a9b      	subs	r3, r3, r2
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	440b      	add	r3, r1
 8003db6:	334c      	adds	r3, #76	@ 0x4c
 8003db8:	781b      	ldrb	r3, [r3, #0]
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr

08003dc6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	b083      	sub	sp, #12
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
 8003dce:	460b      	mov	r3, r1
 8003dd0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003dd2:	78fa      	ldrb	r2, [r7, #3]
 8003dd4:	6879      	ldr	r1, [r7, #4]
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	011b      	lsls	r3, r3, #4
 8003dda:	1a9b      	subs	r3, r3, r2
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	440b      	add	r3, r1
 8003de0:	3338      	adds	r3, #56	@ 0x38
 8003de2:	681b      	ldr	r3, [r3, #0]
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f004 fb40 	bl	8008482 <USB_GetCurrentFrame>
 8003e02:	4603      	mov	r3, r0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3708      	adds	r7, #8
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f004 fb1b 	bl	8008454 <USB_GetHostSpeed>
 8003e1e:	4603      	mov	r3, r0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3708      	adds	r7, #8
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	460b      	mov	r3, r1
 8003e32:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8003e34:	78fa      	ldrb	r2, [r7, #3]
 8003e36:	6879      	ldr	r1, [r7, #4]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	011b      	lsls	r3, r3, #4
 8003e3c:	1a9b      	subs	r3, r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	440b      	add	r3, r1
 8003e42:	331a      	adds	r3, #26
 8003e44:	2200      	movs	r2, #0
 8003e46:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8003e48:	78fa      	ldrb	r2, [r7, #3]
 8003e4a:	6879      	ldr	r1, [r7, #4]
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	011b      	lsls	r3, r3, #4
 8003e50:	1a9b      	subs	r3, r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	440b      	add	r3, r1
 8003e56:	331b      	adds	r3, #27
 8003e58:	2200      	movs	r2, #0
 8003e5a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8003e5c:	78fa      	ldrb	r2, [r7, #3]
 8003e5e:	6879      	ldr	r1, [r7, #4]
 8003e60:	4613      	mov	r3, r2
 8003e62:	011b      	lsls	r3, r3, #4
 8003e64:	1a9b      	subs	r3, r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	440b      	add	r3, r1
 8003e6a:	3325      	adds	r3, #37	@ 0x25
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8003e70:	78fa      	ldrb	r2, [r7, #3]
 8003e72:	6879      	ldr	r1, [r7, #4]
 8003e74:	4613      	mov	r3, r2
 8003e76:	011b      	lsls	r3, r3, #4
 8003e78:	1a9b      	subs	r3, r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	440b      	add	r3, r1
 8003e7e:	3324      	adds	r3, #36	@ 0x24
 8003e80:	2200      	movs	r2, #0
 8003e82:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	370c      	adds	r7, #12
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr

08003e92 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003e92:	b580      	push	{r7, lr}
 8003e94:	b086      	sub	sp, #24
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	78fa      	ldrb	r2, [r7, #3]
 8003eae:	4611      	mov	r1, r2
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f004 f904 	bl	80080be <USB_ReadChInterrupts>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	f003 0304 	and.w	r3, r3, #4
 8003ebc:	2b04      	cmp	r3, #4
 8003ebe:	d11a      	bne.n	8003ef6 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003ec0:	78fb      	ldrb	r3, [r7, #3]
 8003ec2:	015a      	lsls	r2, r3, #5
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ecc:	461a      	mov	r2, r3
 8003ece:	2304      	movs	r3, #4
 8003ed0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003ed2:	78fa      	ldrb	r2, [r7, #3]
 8003ed4:	6879      	ldr	r1, [r7, #4]
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	011b      	lsls	r3, r3, #4
 8003eda:	1a9b      	subs	r3, r3, r2
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	440b      	add	r3, r1
 8003ee0:	334d      	adds	r3, #77	@ 0x4d
 8003ee2:	2207      	movs	r2, #7
 8003ee4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	78fa      	ldrb	r2, [r7, #3]
 8003eec:	4611      	mov	r1, r2
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f004 fe8f 	bl	8008c12 <USB_HC_Halt>
 8003ef4:	e09e      	b.n	8004034 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	78fa      	ldrb	r2, [r7, #3]
 8003efc:	4611      	mov	r1, r2
 8003efe:	4618      	mov	r0, r3
 8003f00:	f004 f8dd 	bl	80080be <USB_ReadChInterrupts>
 8003f04:	4603      	mov	r3, r0
 8003f06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f0e:	d11b      	bne.n	8003f48 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8003f10:	78fb      	ldrb	r3, [r7, #3]
 8003f12:	015a      	lsls	r2, r3, #5
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	4413      	add	r3, r2
 8003f18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003f22:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8003f24:	78fa      	ldrb	r2, [r7, #3]
 8003f26:	6879      	ldr	r1, [r7, #4]
 8003f28:	4613      	mov	r3, r2
 8003f2a:	011b      	lsls	r3, r3, #4
 8003f2c:	1a9b      	subs	r3, r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	440b      	add	r3, r1
 8003f32:	334d      	adds	r3, #77	@ 0x4d
 8003f34:	2208      	movs	r2, #8
 8003f36:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	78fa      	ldrb	r2, [r7, #3]
 8003f3e:	4611      	mov	r1, r2
 8003f40:	4618      	mov	r0, r3
 8003f42:	f004 fe66 	bl	8008c12 <USB_HC_Halt>
 8003f46:	e075      	b.n	8004034 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	78fa      	ldrb	r2, [r7, #3]
 8003f4e:	4611      	mov	r1, r2
 8003f50:	4618      	mov	r0, r3
 8003f52:	f004 f8b4 	bl	80080be <USB_ReadChInterrupts>
 8003f56:	4603      	mov	r3, r0
 8003f58:	f003 0308 	and.w	r3, r3, #8
 8003f5c:	2b08      	cmp	r3, #8
 8003f5e:	d11a      	bne.n	8003f96 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003f60:	78fb      	ldrb	r3, [r7, #3]
 8003f62:	015a      	lsls	r2, r3, #5
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	4413      	add	r3, r2
 8003f68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	2308      	movs	r3, #8
 8003f70:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003f72:	78fa      	ldrb	r2, [r7, #3]
 8003f74:	6879      	ldr	r1, [r7, #4]
 8003f76:	4613      	mov	r3, r2
 8003f78:	011b      	lsls	r3, r3, #4
 8003f7a:	1a9b      	subs	r3, r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	440b      	add	r3, r1
 8003f80:	334d      	adds	r3, #77	@ 0x4d
 8003f82:	2206      	movs	r2, #6
 8003f84:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	78fa      	ldrb	r2, [r7, #3]
 8003f8c:	4611      	mov	r1, r2
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f004 fe3f 	bl	8008c12 <USB_HC_Halt>
 8003f94:	e04e      	b.n	8004034 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	78fa      	ldrb	r2, [r7, #3]
 8003f9c:	4611      	mov	r1, r2
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f004 f88d 	bl	80080be <USB_ReadChInterrupts>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003faa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fae:	d11b      	bne.n	8003fe8 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003fb0:	78fb      	ldrb	r3, [r7, #3]
 8003fb2:	015a      	lsls	r2, r3, #5
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003fc2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003fc4:	78fa      	ldrb	r2, [r7, #3]
 8003fc6:	6879      	ldr	r1, [r7, #4]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	011b      	lsls	r3, r3, #4
 8003fcc:	1a9b      	subs	r3, r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	440b      	add	r3, r1
 8003fd2:	334d      	adds	r3, #77	@ 0x4d
 8003fd4:	2209      	movs	r2, #9
 8003fd6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	78fa      	ldrb	r2, [r7, #3]
 8003fde:	4611      	mov	r1, r2
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f004 fe16 	bl	8008c12 <USB_HC_Halt>
 8003fe6:	e025      	b.n	8004034 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	78fa      	ldrb	r2, [r7, #3]
 8003fee:	4611      	mov	r1, r2
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f004 f864 	bl	80080be <USB_ReadChInterrupts>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ffc:	2b80      	cmp	r3, #128	@ 0x80
 8003ffe:	d119      	bne.n	8004034 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004000:	78fb      	ldrb	r3, [r7, #3]
 8004002:	015a      	lsls	r2, r3, #5
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	4413      	add	r3, r2
 8004008:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800400c:	461a      	mov	r2, r3
 800400e:	2380      	movs	r3, #128	@ 0x80
 8004010:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004012:	78fa      	ldrb	r2, [r7, #3]
 8004014:	6879      	ldr	r1, [r7, #4]
 8004016:	4613      	mov	r3, r2
 8004018:	011b      	lsls	r3, r3, #4
 800401a:	1a9b      	subs	r3, r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	440b      	add	r3, r1
 8004020:	334d      	adds	r3, #77	@ 0x4d
 8004022:	2207      	movs	r2, #7
 8004024:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	78fa      	ldrb	r2, [r7, #3]
 800402c:	4611      	mov	r1, r2
 800402e:	4618      	mov	r0, r3
 8004030:	f004 fdef 	bl	8008c12 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	78fa      	ldrb	r2, [r7, #3]
 800403a:	4611      	mov	r1, r2
 800403c:	4618      	mov	r0, r3
 800403e:	f004 f83e 	bl	80080be <USB_ReadChInterrupts>
 8004042:	4603      	mov	r3, r0
 8004044:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004048:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800404c:	d112      	bne.n	8004074 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	78fa      	ldrb	r2, [r7, #3]
 8004054:	4611      	mov	r1, r2
 8004056:	4618      	mov	r0, r3
 8004058:	f004 fddb 	bl	8008c12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800405c:	78fb      	ldrb	r3, [r7, #3]
 800405e:	015a      	lsls	r2, r3, #5
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	4413      	add	r3, r2
 8004064:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004068:	461a      	mov	r2, r3
 800406a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800406e:	6093      	str	r3, [r2, #8]
 8004070:	f000 bd75 	b.w	8004b5e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	78fa      	ldrb	r2, [r7, #3]
 800407a:	4611      	mov	r1, r2
 800407c:	4618      	mov	r0, r3
 800407e:	f004 f81e 	bl	80080be <USB_ReadChInterrupts>
 8004082:	4603      	mov	r3, r0
 8004084:	f003 0301 	and.w	r3, r3, #1
 8004088:	2b01      	cmp	r3, #1
 800408a:	f040 8128 	bne.w	80042de <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800408e:	78fb      	ldrb	r3, [r7, #3]
 8004090:	015a      	lsls	r2, r3, #5
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	4413      	add	r3, r2
 8004096:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800409a:	461a      	mov	r2, r3
 800409c:	2320      	movs	r3, #32
 800409e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80040a0:	78fa      	ldrb	r2, [r7, #3]
 80040a2:	6879      	ldr	r1, [r7, #4]
 80040a4:	4613      	mov	r3, r2
 80040a6:	011b      	lsls	r3, r3, #4
 80040a8:	1a9b      	subs	r3, r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	440b      	add	r3, r1
 80040ae:	331b      	adds	r3, #27
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d119      	bne.n	80040ea <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80040b6:	78fa      	ldrb	r2, [r7, #3]
 80040b8:	6879      	ldr	r1, [r7, #4]
 80040ba:	4613      	mov	r3, r2
 80040bc:	011b      	lsls	r3, r3, #4
 80040be:	1a9b      	subs	r3, r3, r2
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	440b      	add	r3, r1
 80040c4:	331b      	adds	r3, #27
 80040c6:	2200      	movs	r2, #0
 80040c8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80040ca:	78fb      	ldrb	r3, [r7, #3]
 80040cc:	015a      	lsls	r2, r3, #5
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	4413      	add	r3, r2
 80040d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	78fa      	ldrb	r2, [r7, #3]
 80040da:	0151      	lsls	r1, r2, #5
 80040dc:	693a      	ldr	r2, [r7, #16]
 80040de:	440a      	add	r2, r1
 80040e0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80040e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040e8:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	799b      	ldrb	r3, [r3, #6]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d01b      	beq.n	800412a <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80040f2:	78fa      	ldrb	r2, [r7, #3]
 80040f4:	6879      	ldr	r1, [r7, #4]
 80040f6:	4613      	mov	r3, r2
 80040f8:	011b      	lsls	r3, r3, #4
 80040fa:	1a9b      	subs	r3, r3, r2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	440b      	add	r3, r1
 8004100:	3330      	adds	r3, #48	@ 0x30
 8004102:	6819      	ldr	r1, [r3, #0]
 8004104:	78fb      	ldrb	r3, [r7, #3]
 8004106:	015a      	lsls	r2, r3, #5
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	4413      	add	r3, r2
 800410c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004116:	78fa      	ldrb	r2, [r7, #3]
 8004118:	1ac9      	subs	r1, r1, r3
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	4613      	mov	r3, r2
 800411e:	011b      	lsls	r3, r3, #4
 8004120:	1a9b      	subs	r3, r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	4403      	add	r3, r0
 8004126:	3338      	adds	r3, #56	@ 0x38
 8004128:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800412a:	78fa      	ldrb	r2, [r7, #3]
 800412c:	6879      	ldr	r1, [r7, #4]
 800412e:	4613      	mov	r3, r2
 8004130:	011b      	lsls	r3, r3, #4
 8004132:	1a9b      	subs	r3, r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	440b      	add	r3, r1
 8004138:	334d      	adds	r3, #77	@ 0x4d
 800413a:	2201      	movs	r2, #1
 800413c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800413e:	78fa      	ldrb	r2, [r7, #3]
 8004140:	6879      	ldr	r1, [r7, #4]
 8004142:	4613      	mov	r3, r2
 8004144:	011b      	lsls	r3, r3, #4
 8004146:	1a9b      	subs	r3, r3, r2
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	440b      	add	r3, r1
 800414c:	3344      	adds	r3, #68	@ 0x44
 800414e:	2200      	movs	r2, #0
 8004150:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004152:	78fb      	ldrb	r3, [r7, #3]
 8004154:	015a      	lsls	r2, r3, #5
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	4413      	add	r3, r2
 800415a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800415e:	461a      	mov	r2, r3
 8004160:	2301      	movs	r3, #1
 8004162:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004164:	78fa      	ldrb	r2, [r7, #3]
 8004166:	6879      	ldr	r1, [r7, #4]
 8004168:	4613      	mov	r3, r2
 800416a:	011b      	lsls	r3, r3, #4
 800416c:	1a9b      	subs	r3, r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	440b      	add	r3, r1
 8004172:	3326      	adds	r3, #38	@ 0x26
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00a      	beq.n	8004190 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800417a:	78fa      	ldrb	r2, [r7, #3]
 800417c:	6879      	ldr	r1, [r7, #4]
 800417e:	4613      	mov	r3, r2
 8004180:	011b      	lsls	r3, r3, #4
 8004182:	1a9b      	subs	r3, r3, r2
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	440b      	add	r3, r1
 8004188:	3326      	adds	r3, #38	@ 0x26
 800418a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800418c:	2b02      	cmp	r3, #2
 800418e:	d110      	bne.n	80041b2 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	78fa      	ldrb	r2, [r7, #3]
 8004196:	4611      	mov	r1, r2
 8004198:	4618      	mov	r0, r3
 800419a:	f004 fd3a 	bl	8008c12 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800419e:	78fb      	ldrb	r3, [r7, #3]
 80041a0:	015a      	lsls	r2, r3, #5
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	4413      	add	r3, r2
 80041a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041aa:	461a      	mov	r2, r3
 80041ac:	2310      	movs	r3, #16
 80041ae:	6093      	str	r3, [r2, #8]
 80041b0:	e03d      	b.n	800422e <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80041b2:	78fa      	ldrb	r2, [r7, #3]
 80041b4:	6879      	ldr	r1, [r7, #4]
 80041b6:	4613      	mov	r3, r2
 80041b8:	011b      	lsls	r3, r3, #4
 80041ba:	1a9b      	subs	r3, r3, r2
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	440b      	add	r3, r1
 80041c0:	3326      	adds	r3, #38	@ 0x26
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	2b03      	cmp	r3, #3
 80041c6:	d00a      	beq.n	80041de <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80041c8:	78fa      	ldrb	r2, [r7, #3]
 80041ca:	6879      	ldr	r1, [r7, #4]
 80041cc:	4613      	mov	r3, r2
 80041ce:	011b      	lsls	r3, r3, #4
 80041d0:	1a9b      	subs	r3, r3, r2
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	440b      	add	r3, r1
 80041d6:	3326      	adds	r3, #38	@ 0x26
 80041d8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d127      	bne.n	800422e <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80041de:	78fb      	ldrb	r3, [r7, #3]
 80041e0:	015a      	lsls	r2, r3, #5
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	4413      	add	r3, r2
 80041e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	78fa      	ldrb	r2, [r7, #3]
 80041ee:	0151      	lsls	r1, r2, #5
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	440a      	add	r2, r1
 80041f4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80041f8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80041fc:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80041fe:	78fa      	ldrb	r2, [r7, #3]
 8004200:	6879      	ldr	r1, [r7, #4]
 8004202:	4613      	mov	r3, r2
 8004204:	011b      	lsls	r3, r3, #4
 8004206:	1a9b      	subs	r3, r3, r2
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	440b      	add	r3, r1
 800420c:	334c      	adds	r3, #76	@ 0x4c
 800420e:	2201      	movs	r2, #1
 8004210:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004212:	78fa      	ldrb	r2, [r7, #3]
 8004214:	6879      	ldr	r1, [r7, #4]
 8004216:	4613      	mov	r3, r2
 8004218:	011b      	lsls	r3, r3, #4
 800421a:	1a9b      	subs	r3, r3, r2
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	440b      	add	r3, r1
 8004220:	334c      	adds	r3, #76	@ 0x4c
 8004222:	781a      	ldrb	r2, [r3, #0]
 8004224:	78fb      	ldrb	r3, [r7, #3]
 8004226:	4619      	mov	r1, r3
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f007 f851 	bl	800b2d0 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	799b      	ldrb	r3, [r3, #6]
 8004232:	2b01      	cmp	r3, #1
 8004234:	d13b      	bne.n	80042ae <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8004236:	78fa      	ldrb	r2, [r7, #3]
 8004238:	6879      	ldr	r1, [r7, #4]
 800423a:	4613      	mov	r3, r2
 800423c:	011b      	lsls	r3, r3, #4
 800423e:	1a9b      	subs	r3, r3, r2
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	440b      	add	r3, r1
 8004244:	3338      	adds	r3, #56	@ 0x38
 8004246:	6819      	ldr	r1, [r3, #0]
 8004248:	78fa      	ldrb	r2, [r7, #3]
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	4613      	mov	r3, r2
 800424e:	011b      	lsls	r3, r3, #4
 8004250:	1a9b      	subs	r3, r3, r2
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	4403      	add	r3, r0
 8004256:	3328      	adds	r3, #40	@ 0x28
 8004258:	881b      	ldrh	r3, [r3, #0]
 800425a:	440b      	add	r3, r1
 800425c:	1e59      	subs	r1, r3, #1
 800425e:	78fa      	ldrb	r2, [r7, #3]
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	4613      	mov	r3, r2
 8004264:	011b      	lsls	r3, r3, #4
 8004266:	1a9b      	subs	r3, r3, r2
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	4403      	add	r3, r0
 800426c:	3328      	adds	r3, #40	@ 0x28
 800426e:	881b      	ldrh	r3, [r3, #0]
 8004270:	fbb1 f3f3 	udiv	r3, r1, r3
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	2b00      	cmp	r3, #0
 800427a:	f000 8470 	beq.w	8004b5e <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800427e:	78fa      	ldrb	r2, [r7, #3]
 8004280:	6879      	ldr	r1, [r7, #4]
 8004282:	4613      	mov	r3, r2
 8004284:	011b      	lsls	r3, r3, #4
 8004286:	1a9b      	subs	r3, r3, r2
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	440b      	add	r3, r1
 800428c:	333c      	adds	r3, #60	@ 0x3c
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	78fa      	ldrb	r2, [r7, #3]
 8004292:	f083 0301 	eor.w	r3, r3, #1
 8004296:	b2d8      	uxtb	r0, r3
 8004298:	6879      	ldr	r1, [r7, #4]
 800429a:	4613      	mov	r3, r2
 800429c:	011b      	lsls	r3, r3, #4
 800429e:	1a9b      	subs	r3, r3, r2
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	440b      	add	r3, r1
 80042a4:	333c      	adds	r3, #60	@ 0x3c
 80042a6:	4602      	mov	r2, r0
 80042a8:	701a      	strb	r2, [r3, #0]
 80042aa:	f000 bc58 	b.w	8004b5e <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80042ae:	78fa      	ldrb	r2, [r7, #3]
 80042b0:	6879      	ldr	r1, [r7, #4]
 80042b2:	4613      	mov	r3, r2
 80042b4:	011b      	lsls	r3, r3, #4
 80042b6:	1a9b      	subs	r3, r3, r2
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	440b      	add	r3, r1
 80042bc:	333c      	adds	r3, #60	@ 0x3c
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	78fa      	ldrb	r2, [r7, #3]
 80042c2:	f083 0301 	eor.w	r3, r3, #1
 80042c6:	b2d8      	uxtb	r0, r3
 80042c8:	6879      	ldr	r1, [r7, #4]
 80042ca:	4613      	mov	r3, r2
 80042cc:	011b      	lsls	r3, r3, #4
 80042ce:	1a9b      	subs	r3, r3, r2
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	440b      	add	r3, r1
 80042d4:	333c      	adds	r3, #60	@ 0x3c
 80042d6:	4602      	mov	r2, r0
 80042d8:	701a      	strb	r2, [r3, #0]
 80042da:	f000 bc40 	b.w	8004b5e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	78fa      	ldrb	r2, [r7, #3]
 80042e4:	4611      	mov	r1, r2
 80042e6:	4618      	mov	r0, r3
 80042e8:	f003 fee9 	bl	80080be <USB_ReadChInterrupts>
 80042ec:	4603      	mov	r3, r0
 80042ee:	f003 0320 	and.w	r3, r3, #32
 80042f2:	2b20      	cmp	r3, #32
 80042f4:	d131      	bne.n	800435a <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80042f6:	78fb      	ldrb	r3, [r7, #3]
 80042f8:	015a      	lsls	r2, r3, #5
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	4413      	add	r3, r2
 80042fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004302:	461a      	mov	r2, r3
 8004304:	2320      	movs	r3, #32
 8004306:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8004308:	78fa      	ldrb	r2, [r7, #3]
 800430a:	6879      	ldr	r1, [r7, #4]
 800430c:	4613      	mov	r3, r2
 800430e:	011b      	lsls	r3, r3, #4
 8004310:	1a9b      	subs	r3, r3, r2
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	440b      	add	r3, r1
 8004316:	331a      	adds	r3, #26
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	2b01      	cmp	r3, #1
 800431c:	f040 841f 	bne.w	8004b5e <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8004320:	78fa      	ldrb	r2, [r7, #3]
 8004322:	6879      	ldr	r1, [r7, #4]
 8004324:	4613      	mov	r3, r2
 8004326:	011b      	lsls	r3, r3, #4
 8004328:	1a9b      	subs	r3, r3, r2
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	440b      	add	r3, r1
 800432e:	331b      	adds	r3, #27
 8004330:	2201      	movs	r2, #1
 8004332:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004334:	78fa      	ldrb	r2, [r7, #3]
 8004336:	6879      	ldr	r1, [r7, #4]
 8004338:	4613      	mov	r3, r2
 800433a:	011b      	lsls	r3, r3, #4
 800433c:	1a9b      	subs	r3, r3, r2
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	440b      	add	r3, r1
 8004342:	334d      	adds	r3, #77	@ 0x4d
 8004344:	2203      	movs	r2, #3
 8004346:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	78fa      	ldrb	r2, [r7, #3]
 800434e:	4611      	mov	r1, r2
 8004350:	4618      	mov	r0, r3
 8004352:	f004 fc5e 	bl	8008c12 <USB_HC_Halt>
 8004356:	f000 bc02 	b.w	8004b5e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	78fa      	ldrb	r2, [r7, #3]
 8004360:	4611      	mov	r1, r2
 8004362:	4618      	mov	r0, r3
 8004364:	f003 feab 	bl	80080be <USB_ReadChInterrupts>
 8004368:	4603      	mov	r3, r0
 800436a:	f003 0302 	and.w	r3, r3, #2
 800436e:	2b02      	cmp	r3, #2
 8004370:	f040 8305 	bne.w	800497e <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004374:	78fb      	ldrb	r3, [r7, #3]
 8004376:	015a      	lsls	r2, r3, #5
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	4413      	add	r3, r2
 800437c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004380:	461a      	mov	r2, r3
 8004382:	2302      	movs	r3, #2
 8004384:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004386:	78fa      	ldrb	r2, [r7, #3]
 8004388:	6879      	ldr	r1, [r7, #4]
 800438a:	4613      	mov	r3, r2
 800438c:	011b      	lsls	r3, r3, #4
 800438e:	1a9b      	subs	r3, r3, r2
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	440b      	add	r3, r1
 8004394:	334d      	adds	r3, #77	@ 0x4d
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d114      	bne.n	80043c6 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800439c:	78fa      	ldrb	r2, [r7, #3]
 800439e:	6879      	ldr	r1, [r7, #4]
 80043a0:	4613      	mov	r3, r2
 80043a2:	011b      	lsls	r3, r3, #4
 80043a4:	1a9b      	subs	r3, r3, r2
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	440b      	add	r3, r1
 80043aa:	334d      	adds	r3, #77	@ 0x4d
 80043ac:	2202      	movs	r2, #2
 80043ae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80043b0:	78fa      	ldrb	r2, [r7, #3]
 80043b2:	6879      	ldr	r1, [r7, #4]
 80043b4:	4613      	mov	r3, r2
 80043b6:	011b      	lsls	r3, r3, #4
 80043b8:	1a9b      	subs	r3, r3, r2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	440b      	add	r3, r1
 80043be:	334c      	adds	r3, #76	@ 0x4c
 80043c0:	2201      	movs	r2, #1
 80043c2:	701a      	strb	r2, [r3, #0]
 80043c4:	e2cc      	b.n	8004960 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80043c6:	78fa      	ldrb	r2, [r7, #3]
 80043c8:	6879      	ldr	r1, [r7, #4]
 80043ca:	4613      	mov	r3, r2
 80043cc:	011b      	lsls	r3, r3, #4
 80043ce:	1a9b      	subs	r3, r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	440b      	add	r3, r1
 80043d4:	334d      	adds	r3, #77	@ 0x4d
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	2b06      	cmp	r3, #6
 80043da:	d114      	bne.n	8004406 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80043dc:	78fa      	ldrb	r2, [r7, #3]
 80043de:	6879      	ldr	r1, [r7, #4]
 80043e0:	4613      	mov	r3, r2
 80043e2:	011b      	lsls	r3, r3, #4
 80043e4:	1a9b      	subs	r3, r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	440b      	add	r3, r1
 80043ea:	334d      	adds	r3, #77	@ 0x4d
 80043ec:	2202      	movs	r2, #2
 80043ee:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80043f0:	78fa      	ldrb	r2, [r7, #3]
 80043f2:	6879      	ldr	r1, [r7, #4]
 80043f4:	4613      	mov	r3, r2
 80043f6:	011b      	lsls	r3, r3, #4
 80043f8:	1a9b      	subs	r3, r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	440b      	add	r3, r1
 80043fe:	334c      	adds	r3, #76	@ 0x4c
 8004400:	2205      	movs	r2, #5
 8004402:	701a      	strb	r2, [r3, #0]
 8004404:	e2ac      	b.n	8004960 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004406:	78fa      	ldrb	r2, [r7, #3]
 8004408:	6879      	ldr	r1, [r7, #4]
 800440a:	4613      	mov	r3, r2
 800440c:	011b      	lsls	r3, r3, #4
 800440e:	1a9b      	subs	r3, r3, r2
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	440b      	add	r3, r1
 8004414:	334d      	adds	r3, #77	@ 0x4d
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	2b07      	cmp	r3, #7
 800441a:	d00b      	beq.n	8004434 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800441c:	78fa      	ldrb	r2, [r7, #3]
 800441e:	6879      	ldr	r1, [r7, #4]
 8004420:	4613      	mov	r3, r2
 8004422:	011b      	lsls	r3, r3, #4
 8004424:	1a9b      	subs	r3, r3, r2
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	440b      	add	r3, r1
 800442a:	334d      	adds	r3, #77	@ 0x4d
 800442c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800442e:	2b09      	cmp	r3, #9
 8004430:	f040 80a6 	bne.w	8004580 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004434:	78fa      	ldrb	r2, [r7, #3]
 8004436:	6879      	ldr	r1, [r7, #4]
 8004438:	4613      	mov	r3, r2
 800443a:	011b      	lsls	r3, r3, #4
 800443c:	1a9b      	subs	r3, r3, r2
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	440b      	add	r3, r1
 8004442:	334d      	adds	r3, #77	@ 0x4d
 8004444:	2202      	movs	r2, #2
 8004446:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004448:	78fa      	ldrb	r2, [r7, #3]
 800444a:	6879      	ldr	r1, [r7, #4]
 800444c:	4613      	mov	r3, r2
 800444e:	011b      	lsls	r3, r3, #4
 8004450:	1a9b      	subs	r3, r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	440b      	add	r3, r1
 8004456:	3344      	adds	r3, #68	@ 0x44
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	1c59      	adds	r1, r3, #1
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	4613      	mov	r3, r2
 8004460:	011b      	lsls	r3, r3, #4
 8004462:	1a9b      	subs	r3, r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	4403      	add	r3, r0
 8004468:	3344      	adds	r3, #68	@ 0x44
 800446a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800446c:	78fa      	ldrb	r2, [r7, #3]
 800446e:	6879      	ldr	r1, [r7, #4]
 8004470:	4613      	mov	r3, r2
 8004472:	011b      	lsls	r3, r3, #4
 8004474:	1a9b      	subs	r3, r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	440b      	add	r3, r1
 800447a:	3344      	adds	r3, #68	@ 0x44
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2b02      	cmp	r3, #2
 8004480:	d943      	bls.n	800450a <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004482:	78fa      	ldrb	r2, [r7, #3]
 8004484:	6879      	ldr	r1, [r7, #4]
 8004486:	4613      	mov	r3, r2
 8004488:	011b      	lsls	r3, r3, #4
 800448a:	1a9b      	subs	r3, r3, r2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	440b      	add	r3, r1
 8004490:	3344      	adds	r3, #68	@ 0x44
 8004492:	2200      	movs	r2, #0
 8004494:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8004496:	78fa      	ldrb	r2, [r7, #3]
 8004498:	6879      	ldr	r1, [r7, #4]
 800449a:	4613      	mov	r3, r2
 800449c:	011b      	lsls	r3, r3, #4
 800449e:	1a9b      	subs	r3, r3, r2
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	440b      	add	r3, r1
 80044a4:	331a      	adds	r3, #26
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d123      	bne.n	80044f4 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80044ac:	78fa      	ldrb	r2, [r7, #3]
 80044ae:	6879      	ldr	r1, [r7, #4]
 80044b0:	4613      	mov	r3, r2
 80044b2:	011b      	lsls	r3, r3, #4
 80044b4:	1a9b      	subs	r3, r3, r2
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	440b      	add	r3, r1
 80044ba:	331b      	adds	r3, #27
 80044bc:	2200      	movs	r2, #0
 80044be:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80044c0:	78fa      	ldrb	r2, [r7, #3]
 80044c2:	6879      	ldr	r1, [r7, #4]
 80044c4:	4613      	mov	r3, r2
 80044c6:	011b      	lsls	r3, r3, #4
 80044c8:	1a9b      	subs	r3, r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	440b      	add	r3, r1
 80044ce:	331c      	adds	r3, #28
 80044d0:	2200      	movs	r2, #0
 80044d2:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80044d4:	78fb      	ldrb	r3, [r7, #3]
 80044d6:	015a      	lsls	r2, r3, #5
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	4413      	add	r3, r2
 80044dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	78fa      	ldrb	r2, [r7, #3]
 80044e4:	0151      	lsls	r1, r2, #5
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	440a      	add	r2, r1
 80044ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80044ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044f2:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80044f4:	78fa      	ldrb	r2, [r7, #3]
 80044f6:	6879      	ldr	r1, [r7, #4]
 80044f8:	4613      	mov	r3, r2
 80044fa:	011b      	lsls	r3, r3, #4
 80044fc:	1a9b      	subs	r3, r3, r2
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	440b      	add	r3, r1
 8004502:	334c      	adds	r3, #76	@ 0x4c
 8004504:	2204      	movs	r2, #4
 8004506:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004508:	e229      	b.n	800495e <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800450a:	78fa      	ldrb	r2, [r7, #3]
 800450c:	6879      	ldr	r1, [r7, #4]
 800450e:	4613      	mov	r3, r2
 8004510:	011b      	lsls	r3, r3, #4
 8004512:	1a9b      	subs	r3, r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	440b      	add	r3, r1
 8004518:	334c      	adds	r3, #76	@ 0x4c
 800451a:	2202      	movs	r2, #2
 800451c:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800451e:	78fa      	ldrb	r2, [r7, #3]
 8004520:	6879      	ldr	r1, [r7, #4]
 8004522:	4613      	mov	r3, r2
 8004524:	011b      	lsls	r3, r3, #4
 8004526:	1a9b      	subs	r3, r3, r2
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	440b      	add	r3, r1
 800452c:	3326      	adds	r3, #38	@ 0x26
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d00b      	beq.n	800454c <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004534:	78fa      	ldrb	r2, [r7, #3]
 8004536:	6879      	ldr	r1, [r7, #4]
 8004538:	4613      	mov	r3, r2
 800453a:	011b      	lsls	r3, r3, #4
 800453c:	1a9b      	subs	r3, r3, r2
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	440b      	add	r3, r1
 8004542:	3326      	adds	r3, #38	@ 0x26
 8004544:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004546:	2b02      	cmp	r3, #2
 8004548:	f040 8209 	bne.w	800495e <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800454c:	78fb      	ldrb	r3, [r7, #3]
 800454e:	015a      	lsls	r2, r3, #5
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	4413      	add	r3, r2
 8004554:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004562:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800456a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800456c:	78fb      	ldrb	r3, [r7, #3]
 800456e:	015a      	lsls	r2, r3, #5
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	4413      	add	r3, r2
 8004574:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004578:	461a      	mov	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800457e:	e1ee      	b.n	800495e <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004580:	78fa      	ldrb	r2, [r7, #3]
 8004582:	6879      	ldr	r1, [r7, #4]
 8004584:	4613      	mov	r3, r2
 8004586:	011b      	lsls	r3, r3, #4
 8004588:	1a9b      	subs	r3, r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	440b      	add	r3, r1
 800458e:	334d      	adds	r3, #77	@ 0x4d
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	2b05      	cmp	r3, #5
 8004594:	f040 80c8 	bne.w	8004728 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004598:	78fa      	ldrb	r2, [r7, #3]
 800459a:	6879      	ldr	r1, [r7, #4]
 800459c:	4613      	mov	r3, r2
 800459e:	011b      	lsls	r3, r3, #4
 80045a0:	1a9b      	subs	r3, r3, r2
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	440b      	add	r3, r1
 80045a6:	334d      	adds	r3, #77	@ 0x4d
 80045a8:	2202      	movs	r2, #2
 80045aa:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80045ac:	78fa      	ldrb	r2, [r7, #3]
 80045ae:	6879      	ldr	r1, [r7, #4]
 80045b0:	4613      	mov	r3, r2
 80045b2:	011b      	lsls	r3, r3, #4
 80045b4:	1a9b      	subs	r3, r3, r2
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	440b      	add	r3, r1
 80045ba:	331b      	adds	r3, #27
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	2b01      	cmp	r3, #1
 80045c0:	f040 81ce 	bne.w	8004960 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80045c4:	78fa      	ldrb	r2, [r7, #3]
 80045c6:	6879      	ldr	r1, [r7, #4]
 80045c8:	4613      	mov	r3, r2
 80045ca:	011b      	lsls	r3, r3, #4
 80045cc:	1a9b      	subs	r3, r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	440b      	add	r3, r1
 80045d2:	3326      	adds	r3, #38	@ 0x26
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	2b03      	cmp	r3, #3
 80045d8:	d16b      	bne.n	80046b2 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80045da:	78fa      	ldrb	r2, [r7, #3]
 80045dc:	6879      	ldr	r1, [r7, #4]
 80045de:	4613      	mov	r3, r2
 80045e0:	011b      	lsls	r3, r3, #4
 80045e2:	1a9b      	subs	r3, r3, r2
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	440b      	add	r3, r1
 80045e8:	3348      	adds	r3, #72	@ 0x48
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	1c59      	adds	r1, r3, #1
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	4613      	mov	r3, r2
 80045f2:	011b      	lsls	r3, r3, #4
 80045f4:	1a9b      	subs	r3, r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	4403      	add	r3, r0
 80045fa:	3348      	adds	r3, #72	@ 0x48
 80045fc:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80045fe:	78fa      	ldrb	r2, [r7, #3]
 8004600:	6879      	ldr	r1, [r7, #4]
 8004602:	4613      	mov	r3, r2
 8004604:	011b      	lsls	r3, r3, #4
 8004606:	1a9b      	subs	r3, r3, r2
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	440b      	add	r3, r1
 800460c:	3348      	adds	r3, #72	@ 0x48
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2b02      	cmp	r3, #2
 8004612:	d943      	bls.n	800469c <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8004614:	78fa      	ldrb	r2, [r7, #3]
 8004616:	6879      	ldr	r1, [r7, #4]
 8004618:	4613      	mov	r3, r2
 800461a:	011b      	lsls	r3, r3, #4
 800461c:	1a9b      	subs	r3, r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	440b      	add	r3, r1
 8004622:	3348      	adds	r3, #72	@ 0x48
 8004624:	2200      	movs	r2, #0
 8004626:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8004628:	78fa      	ldrb	r2, [r7, #3]
 800462a:	6879      	ldr	r1, [r7, #4]
 800462c:	4613      	mov	r3, r2
 800462e:	011b      	lsls	r3, r3, #4
 8004630:	1a9b      	subs	r3, r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	440b      	add	r3, r1
 8004636:	331b      	adds	r3, #27
 8004638:	2200      	movs	r2, #0
 800463a:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 800463c:	78fa      	ldrb	r2, [r7, #3]
 800463e:	6879      	ldr	r1, [r7, #4]
 8004640:	4613      	mov	r3, r2
 8004642:	011b      	lsls	r3, r3, #4
 8004644:	1a9b      	subs	r3, r3, r2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	440b      	add	r3, r1
 800464a:	3344      	adds	r3, #68	@ 0x44
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2b02      	cmp	r3, #2
 8004650:	d809      	bhi.n	8004666 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8004652:	78fa      	ldrb	r2, [r7, #3]
 8004654:	6879      	ldr	r1, [r7, #4]
 8004656:	4613      	mov	r3, r2
 8004658:	011b      	lsls	r3, r3, #4
 800465a:	1a9b      	subs	r3, r3, r2
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	440b      	add	r3, r1
 8004660:	331c      	adds	r3, #28
 8004662:	2201      	movs	r2, #1
 8004664:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004666:	78fb      	ldrb	r3, [r7, #3]
 8004668:	015a      	lsls	r2, r3, #5
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	4413      	add	r3, r2
 800466e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	78fa      	ldrb	r2, [r7, #3]
 8004676:	0151      	lsls	r1, r2, #5
 8004678:	693a      	ldr	r2, [r7, #16]
 800467a:	440a      	add	r2, r1
 800467c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004680:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004684:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8004686:	78fa      	ldrb	r2, [r7, #3]
 8004688:	6879      	ldr	r1, [r7, #4]
 800468a:	4613      	mov	r3, r2
 800468c:	011b      	lsls	r3, r3, #4
 800468e:	1a9b      	subs	r3, r3, r2
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	440b      	add	r3, r1
 8004694:	334c      	adds	r3, #76	@ 0x4c
 8004696:	2204      	movs	r2, #4
 8004698:	701a      	strb	r2, [r3, #0]
 800469a:	e014      	b.n	80046c6 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800469c:	78fa      	ldrb	r2, [r7, #3]
 800469e:	6879      	ldr	r1, [r7, #4]
 80046a0:	4613      	mov	r3, r2
 80046a2:	011b      	lsls	r3, r3, #4
 80046a4:	1a9b      	subs	r3, r3, r2
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	440b      	add	r3, r1
 80046aa:	334c      	adds	r3, #76	@ 0x4c
 80046ac:	2202      	movs	r2, #2
 80046ae:	701a      	strb	r2, [r3, #0]
 80046b0:	e009      	b.n	80046c6 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80046b2:	78fa      	ldrb	r2, [r7, #3]
 80046b4:	6879      	ldr	r1, [r7, #4]
 80046b6:	4613      	mov	r3, r2
 80046b8:	011b      	lsls	r3, r3, #4
 80046ba:	1a9b      	subs	r3, r3, r2
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	440b      	add	r3, r1
 80046c0:	334c      	adds	r3, #76	@ 0x4c
 80046c2:	2202      	movs	r2, #2
 80046c4:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80046c6:	78fa      	ldrb	r2, [r7, #3]
 80046c8:	6879      	ldr	r1, [r7, #4]
 80046ca:	4613      	mov	r3, r2
 80046cc:	011b      	lsls	r3, r3, #4
 80046ce:	1a9b      	subs	r3, r3, r2
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	440b      	add	r3, r1
 80046d4:	3326      	adds	r3, #38	@ 0x26
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00b      	beq.n	80046f4 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80046dc:	78fa      	ldrb	r2, [r7, #3]
 80046de:	6879      	ldr	r1, [r7, #4]
 80046e0:	4613      	mov	r3, r2
 80046e2:	011b      	lsls	r3, r3, #4
 80046e4:	1a9b      	subs	r3, r3, r2
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	440b      	add	r3, r1
 80046ea:	3326      	adds	r3, #38	@ 0x26
 80046ec:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	f040 8136 	bne.w	8004960 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80046f4:	78fb      	ldrb	r3, [r7, #3]
 80046f6:	015a      	lsls	r2, r3, #5
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	4413      	add	r3, r2
 80046fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800470a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004712:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004714:	78fb      	ldrb	r3, [r7, #3]
 8004716:	015a      	lsls	r2, r3, #5
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	4413      	add	r3, r2
 800471c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004720:	461a      	mov	r2, r3
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6013      	str	r3, [r2, #0]
 8004726:	e11b      	b.n	8004960 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004728:	78fa      	ldrb	r2, [r7, #3]
 800472a:	6879      	ldr	r1, [r7, #4]
 800472c:	4613      	mov	r3, r2
 800472e:	011b      	lsls	r3, r3, #4
 8004730:	1a9b      	subs	r3, r3, r2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	440b      	add	r3, r1
 8004736:	334d      	adds	r3, #77	@ 0x4d
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	2b03      	cmp	r3, #3
 800473c:	f040 8081 	bne.w	8004842 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004740:	78fa      	ldrb	r2, [r7, #3]
 8004742:	6879      	ldr	r1, [r7, #4]
 8004744:	4613      	mov	r3, r2
 8004746:	011b      	lsls	r3, r3, #4
 8004748:	1a9b      	subs	r3, r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	440b      	add	r3, r1
 800474e:	334d      	adds	r3, #77	@ 0x4d
 8004750:	2202      	movs	r2, #2
 8004752:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004754:	78fa      	ldrb	r2, [r7, #3]
 8004756:	6879      	ldr	r1, [r7, #4]
 8004758:	4613      	mov	r3, r2
 800475a:	011b      	lsls	r3, r3, #4
 800475c:	1a9b      	subs	r3, r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	440b      	add	r3, r1
 8004762:	331b      	adds	r3, #27
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	2b01      	cmp	r3, #1
 8004768:	f040 80fa 	bne.w	8004960 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800476c:	78fa      	ldrb	r2, [r7, #3]
 800476e:	6879      	ldr	r1, [r7, #4]
 8004770:	4613      	mov	r3, r2
 8004772:	011b      	lsls	r3, r3, #4
 8004774:	1a9b      	subs	r3, r3, r2
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	440b      	add	r3, r1
 800477a:	334c      	adds	r3, #76	@ 0x4c
 800477c:	2202      	movs	r2, #2
 800477e:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8004780:	78fb      	ldrb	r3, [r7, #3]
 8004782:	015a      	lsls	r2, r3, #5
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	4413      	add	r3, r2
 8004788:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	78fa      	ldrb	r2, [r7, #3]
 8004790:	0151      	lsls	r1, r2, #5
 8004792:	693a      	ldr	r2, [r7, #16]
 8004794:	440a      	add	r2, r1
 8004796:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800479a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800479e:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80047a0:	78fb      	ldrb	r3, [r7, #3]
 80047a2:	015a      	lsls	r2, r3, #5
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	4413      	add	r3, r2
 80047a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	78fa      	ldrb	r2, [r7, #3]
 80047b0:	0151      	lsls	r1, r2, #5
 80047b2:	693a      	ldr	r2, [r7, #16]
 80047b4:	440a      	add	r2, r1
 80047b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80047ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047be:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80047c0:	78fb      	ldrb	r3, [r7, #3]
 80047c2:	015a      	lsls	r2, r3, #5
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	4413      	add	r3, r2
 80047c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	78fa      	ldrb	r2, [r7, #3]
 80047d0:	0151      	lsls	r1, r2, #5
 80047d2:	693a      	ldr	r2, [r7, #16]
 80047d4:	440a      	add	r2, r1
 80047d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80047da:	f023 0320 	bic.w	r3, r3, #32
 80047de:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80047e0:	78fa      	ldrb	r2, [r7, #3]
 80047e2:	6879      	ldr	r1, [r7, #4]
 80047e4:	4613      	mov	r3, r2
 80047e6:	011b      	lsls	r3, r3, #4
 80047e8:	1a9b      	subs	r3, r3, r2
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	440b      	add	r3, r1
 80047ee:	3326      	adds	r3, #38	@ 0x26
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00b      	beq.n	800480e <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80047f6:	78fa      	ldrb	r2, [r7, #3]
 80047f8:	6879      	ldr	r1, [r7, #4]
 80047fa:	4613      	mov	r3, r2
 80047fc:	011b      	lsls	r3, r3, #4
 80047fe:	1a9b      	subs	r3, r3, r2
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	440b      	add	r3, r1
 8004804:	3326      	adds	r3, #38	@ 0x26
 8004806:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004808:	2b02      	cmp	r3, #2
 800480a:	f040 80a9 	bne.w	8004960 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800480e:	78fb      	ldrb	r3, [r7, #3]
 8004810:	015a      	lsls	r2, r3, #5
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	4413      	add	r3, r2
 8004816:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004824:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800482c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800482e:	78fb      	ldrb	r3, [r7, #3]
 8004830:	015a      	lsls	r2, r3, #5
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	4413      	add	r3, r2
 8004836:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800483a:	461a      	mov	r2, r3
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6013      	str	r3, [r2, #0]
 8004840:	e08e      	b.n	8004960 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004842:	78fa      	ldrb	r2, [r7, #3]
 8004844:	6879      	ldr	r1, [r7, #4]
 8004846:	4613      	mov	r3, r2
 8004848:	011b      	lsls	r3, r3, #4
 800484a:	1a9b      	subs	r3, r3, r2
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	440b      	add	r3, r1
 8004850:	334d      	adds	r3, #77	@ 0x4d
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	2b04      	cmp	r3, #4
 8004856:	d143      	bne.n	80048e0 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004858:	78fa      	ldrb	r2, [r7, #3]
 800485a:	6879      	ldr	r1, [r7, #4]
 800485c:	4613      	mov	r3, r2
 800485e:	011b      	lsls	r3, r3, #4
 8004860:	1a9b      	subs	r3, r3, r2
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	440b      	add	r3, r1
 8004866:	334d      	adds	r3, #77	@ 0x4d
 8004868:	2202      	movs	r2, #2
 800486a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800486c:	78fa      	ldrb	r2, [r7, #3]
 800486e:	6879      	ldr	r1, [r7, #4]
 8004870:	4613      	mov	r3, r2
 8004872:	011b      	lsls	r3, r3, #4
 8004874:	1a9b      	subs	r3, r3, r2
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	440b      	add	r3, r1
 800487a:	334c      	adds	r3, #76	@ 0x4c
 800487c:	2202      	movs	r2, #2
 800487e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004880:	78fa      	ldrb	r2, [r7, #3]
 8004882:	6879      	ldr	r1, [r7, #4]
 8004884:	4613      	mov	r3, r2
 8004886:	011b      	lsls	r3, r3, #4
 8004888:	1a9b      	subs	r3, r3, r2
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	440b      	add	r3, r1
 800488e:	3326      	adds	r3, #38	@ 0x26
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00a      	beq.n	80048ac <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004896:	78fa      	ldrb	r2, [r7, #3]
 8004898:	6879      	ldr	r1, [r7, #4]
 800489a:	4613      	mov	r3, r2
 800489c:	011b      	lsls	r3, r3, #4
 800489e:	1a9b      	subs	r3, r3, r2
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	440b      	add	r3, r1
 80048a4:	3326      	adds	r3, #38	@ 0x26
 80048a6:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d159      	bne.n	8004960 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80048ac:	78fb      	ldrb	r3, [r7, #3]
 80048ae:	015a      	lsls	r2, r3, #5
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	4413      	add	r3, r2
 80048b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80048c2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80048ca:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80048cc:	78fb      	ldrb	r3, [r7, #3]
 80048ce:	015a      	lsls	r2, r3, #5
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	4413      	add	r3, r2
 80048d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048d8:	461a      	mov	r2, r3
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6013      	str	r3, [r2, #0]
 80048de:	e03f      	b.n	8004960 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80048e0:	78fa      	ldrb	r2, [r7, #3]
 80048e2:	6879      	ldr	r1, [r7, #4]
 80048e4:	4613      	mov	r3, r2
 80048e6:	011b      	lsls	r3, r3, #4
 80048e8:	1a9b      	subs	r3, r3, r2
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	440b      	add	r3, r1
 80048ee:	334d      	adds	r3, #77	@ 0x4d
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	2b08      	cmp	r3, #8
 80048f4:	d126      	bne.n	8004944 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80048f6:	78fa      	ldrb	r2, [r7, #3]
 80048f8:	6879      	ldr	r1, [r7, #4]
 80048fa:	4613      	mov	r3, r2
 80048fc:	011b      	lsls	r3, r3, #4
 80048fe:	1a9b      	subs	r3, r3, r2
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	440b      	add	r3, r1
 8004904:	334d      	adds	r3, #77	@ 0x4d
 8004906:	2202      	movs	r2, #2
 8004908:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800490a:	78fa      	ldrb	r2, [r7, #3]
 800490c:	6879      	ldr	r1, [r7, #4]
 800490e:	4613      	mov	r3, r2
 8004910:	011b      	lsls	r3, r3, #4
 8004912:	1a9b      	subs	r3, r3, r2
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	440b      	add	r3, r1
 8004918:	3344      	adds	r3, #68	@ 0x44
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	1c59      	adds	r1, r3, #1
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	4613      	mov	r3, r2
 8004922:	011b      	lsls	r3, r3, #4
 8004924:	1a9b      	subs	r3, r3, r2
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	4403      	add	r3, r0
 800492a:	3344      	adds	r3, #68	@ 0x44
 800492c:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800492e:	78fa      	ldrb	r2, [r7, #3]
 8004930:	6879      	ldr	r1, [r7, #4]
 8004932:	4613      	mov	r3, r2
 8004934:	011b      	lsls	r3, r3, #4
 8004936:	1a9b      	subs	r3, r3, r2
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	440b      	add	r3, r1
 800493c:	334c      	adds	r3, #76	@ 0x4c
 800493e:	2204      	movs	r2, #4
 8004940:	701a      	strb	r2, [r3, #0]
 8004942:	e00d      	b.n	8004960 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8004944:	78fa      	ldrb	r2, [r7, #3]
 8004946:	6879      	ldr	r1, [r7, #4]
 8004948:	4613      	mov	r3, r2
 800494a:	011b      	lsls	r3, r3, #4
 800494c:	1a9b      	subs	r3, r3, r2
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	440b      	add	r3, r1
 8004952:	334d      	adds	r3, #77	@ 0x4d
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	2b02      	cmp	r3, #2
 8004958:	f000 8100 	beq.w	8004b5c <HCD_HC_IN_IRQHandler+0xcca>
 800495c:	e000      	b.n	8004960 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800495e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004960:	78fa      	ldrb	r2, [r7, #3]
 8004962:	6879      	ldr	r1, [r7, #4]
 8004964:	4613      	mov	r3, r2
 8004966:	011b      	lsls	r3, r3, #4
 8004968:	1a9b      	subs	r3, r3, r2
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	440b      	add	r3, r1
 800496e:	334c      	adds	r3, #76	@ 0x4c
 8004970:	781a      	ldrb	r2, [r3, #0]
 8004972:	78fb      	ldrb	r3, [r7, #3]
 8004974:	4619      	mov	r1, r3
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f006 fcaa 	bl	800b2d0 <HAL_HCD_HC_NotifyURBChange_Callback>
 800497c:	e0ef      	b.n	8004b5e <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	78fa      	ldrb	r2, [r7, #3]
 8004984:	4611      	mov	r1, r2
 8004986:	4618      	mov	r0, r3
 8004988:	f003 fb99 	bl	80080be <USB_ReadChInterrupts>
 800498c:	4603      	mov	r3, r0
 800498e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004992:	2b40      	cmp	r3, #64	@ 0x40
 8004994:	d12f      	bne.n	80049f6 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004996:	78fb      	ldrb	r3, [r7, #3]
 8004998:	015a      	lsls	r2, r3, #5
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	4413      	add	r3, r2
 800499e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049a2:	461a      	mov	r2, r3
 80049a4:	2340      	movs	r3, #64	@ 0x40
 80049a6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80049a8:	78fa      	ldrb	r2, [r7, #3]
 80049aa:	6879      	ldr	r1, [r7, #4]
 80049ac:	4613      	mov	r3, r2
 80049ae:	011b      	lsls	r3, r3, #4
 80049b0:	1a9b      	subs	r3, r3, r2
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	440b      	add	r3, r1
 80049b6:	334d      	adds	r3, #77	@ 0x4d
 80049b8:	2205      	movs	r2, #5
 80049ba:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80049bc:	78fa      	ldrb	r2, [r7, #3]
 80049be:	6879      	ldr	r1, [r7, #4]
 80049c0:	4613      	mov	r3, r2
 80049c2:	011b      	lsls	r3, r3, #4
 80049c4:	1a9b      	subs	r3, r3, r2
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	440b      	add	r3, r1
 80049ca:	331a      	adds	r3, #26
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d109      	bne.n	80049e6 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80049d2:	78fa      	ldrb	r2, [r7, #3]
 80049d4:	6879      	ldr	r1, [r7, #4]
 80049d6:	4613      	mov	r3, r2
 80049d8:	011b      	lsls	r3, r3, #4
 80049da:	1a9b      	subs	r3, r3, r2
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	440b      	add	r3, r1
 80049e0:	3344      	adds	r3, #68	@ 0x44
 80049e2:	2200      	movs	r2, #0
 80049e4:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	78fa      	ldrb	r2, [r7, #3]
 80049ec:	4611      	mov	r1, r2
 80049ee:	4618      	mov	r0, r3
 80049f0:	f004 f90f 	bl	8008c12 <USB_HC_Halt>
 80049f4:	e0b3      	b.n	8004b5e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	78fa      	ldrb	r2, [r7, #3]
 80049fc:	4611      	mov	r1, r2
 80049fe:	4618      	mov	r0, r3
 8004a00:	f003 fb5d 	bl	80080be <USB_ReadChInterrupts>
 8004a04:	4603      	mov	r3, r0
 8004a06:	f003 0310 	and.w	r3, r3, #16
 8004a0a:	2b10      	cmp	r3, #16
 8004a0c:	f040 80a7 	bne.w	8004b5e <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004a10:	78fa      	ldrb	r2, [r7, #3]
 8004a12:	6879      	ldr	r1, [r7, #4]
 8004a14:	4613      	mov	r3, r2
 8004a16:	011b      	lsls	r3, r3, #4
 8004a18:	1a9b      	subs	r3, r3, r2
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	440b      	add	r3, r1
 8004a1e:	3326      	adds	r3, #38	@ 0x26
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	2b03      	cmp	r3, #3
 8004a24:	d11b      	bne.n	8004a5e <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004a26:	78fa      	ldrb	r2, [r7, #3]
 8004a28:	6879      	ldr	r1, [r7, #4]
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	011b      	lsls	r3, r3, #4
 8004a2e:	1a9b      	subs	r3, r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	440b      	add	r3, r1
 8004a34:	3344      	adds	r3, #68	@ 0x44
 8004a36:	2200      	movs	r2, #0
 8004a38:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8004a3a:	78fa      	ldrb	r2, [r7, #3]
 8004a3c:	6879      	ldr	r1, [r7, #4]
 8004a3e:	4613      	mov	r3, r2
 8004a40:	011b      	lsls	r3, r3, #4
 8004a42:	1a9b      	subs	r3, r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	440b      	add	r3, r1
 8004a48:	334d      	adds	r3, #77	@ 0x4d
 8004a4a:	2204      	movs	r2, #4
 8004a4c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	78fa      	ldrb	r2, [r7, #3]
 8004a54:	4611      	mov	r1, r2
 8004a56:	4618      	mov	r0, r3
 8004a58:	f004 f8db 	bl	8008c12 <USB_HC_Halt>
 8004a5c:	e03f      	b.n	8004ade <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004a5e:	78fa      	ldrb	r2, [r7, #3]
 8004a60:	6879      	ldr	r1, [r7, #4]
 8004a62:	4613      	mov	r3, r2
 8004a64:	011b      	lsls	r3, r3, #4
 8004a66:	1a9b      	subs	r3, r3, r2
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	440b      	add	r3, r1
 8004a6c:	3326      	adds	r3, #38	@ 0x26
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d00a      	beq.n	8004a8a <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004a74:	78fa      	ldrb	r2, [r7, #3]
 8004a76:	6879      	ldr	r1, [r7, #4]
 8004a78:	4613      	mov	r3, r2
 8004a7a:	011b      	lsls	r3, r3, #4
 8004a7c:	1a9b      	subs	r3, r3, r2
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	440b      	add	r3, r1
 8004a82:	3326      	adds	r3, #38	@ 0x26
 8004a84:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d129      	bne.n	8004ade <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004a8a:	78fa      	ldrb	r2, [r7, #3]
 8004a8c:	6879      	ldr	r1, [r7, #4]
 8004a8e:	4613      	mov	r3, r2
 8004a90:	011b      	lsls	r3, r3, #4
 8004a92:	1a9b      	subs	r3, r3, r2
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	440b      	add	r3, r1
 8004a98:	3344      	adds	r3, #68	@ 0x44
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	799b      	ldrb	r3, [r3, #6]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00a      	beq.n	8004abc <HCD_HC_IN_IRQHandler+0xc2a>
 8004aa6:	78fa      	ldrb	r2, [r7, #3]
 8004aa8:	6879      	ldr	r1, [r7, #4]
 8004aaa:	4613      	mov	r3, r2
 8004aac:	011b      	lsls	r3, r3, #4
 8004aae:	1a9b      	subs	r3, r3, r2
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	440b      	add	r3, r1
 8004ab4:	331b      	adds	r3, #27
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d110      	bne.n	8004ade <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8004abc:	78fa      	ldrb	r2, [r7, #3]
 8004abe:	6879      	ldr	r1, [r7, #4]
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	011b      	lsls	r3, r3, #4
 8004ac4:	1a9b      	subs	r3, r3, r2
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	440b      	add	r3, r1
 8004aca:	334d      	adds	r3, #77	@ 0x4d
 8004acc:	2204      	movs	r2, #4
 8004ace:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	78fa      	ldrb	r2, [r7, #3]
 8004ad6:	4611      	mov	r1, r2
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f004 f89a 	bl	8008c12 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004ade:	78fa      	ldrb	r2, [r7, #3]
 8004ae0:	6879      	ldr	r1, [r7, #4]
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	011b      	lsls	r3, r3, #4
 8004ae6:	1a9b      	subs	r3, r3, r2
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	440b      	add	r3, r1
 8004aec:	331b      	adds	r3, #27
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d129      	bne.n	8004b48 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004af4:	78fa      	ldrb	r2, [r7, #3]
 8004af6:	6879      	ldr	r1, [r7, #4]
 8004af8:	4613      	mov	r3, r2
 8004afa:	011b      	lsls	r3, r3, #4
 8004afc:	1a9b      	subs	r3, r3, r2
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	440b      	add	r3, r1
 8004b02:	331b      	adds	r3, #27
 8004b04:	2200      	movs	r2, #0
 8004b06:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004b08:	78fb      	ldrb	r3, [r7, #3]
 8004b0a:	015a      	lsls	r2, r3, #5
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	4413      	add	r3, r2
 8004b10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	78fa      	ldrb	r2, [r7, #3]
 8004b18:	0151      	lsls	r1, r2, #5
 8004b1a:	693a      	ldr	r2, [r7, #16]
 8004b1c:	440a      	add	r2, r1
 8004b1e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004b22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b26:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8004b28:	78fb      	ldrb	r3, [r7, #3]
 8004b2a:	015a      	lsls	r2, r3, #5
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	4413      	add	r3, r2
 8004b30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	78fa      	ldrb	r2, [r7, #3]
 8004b38:	0151      	lsls	r1, r2, #5
 8004b3a:	693a      	ldr	r2, [r7, #16]
 8004b3c:	440a      	add	r2, r1
 8004b3e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004b42:	f043 0320 	orr.w	r3, r3, #32
 8004b46:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004b48:	78fb      	ldrb	r3, [r7, #3]
 8004b4a:	015a      	lsls	r2, r3, #5
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	4413      	add	r3, r2
 8004b50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b54:	461a      	mov	r2, r3
 8004b56:	2310      	movs	r3, #16
 8004b58:	6093      	str	r3, [r2, #8]
 8004b5a:	e000      	b.n	8004b5e <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8004b5c:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8004b5e:	3718      	adds	r7, #24
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b086      	sub	sp, #24
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	78fa      	ldrb	r2, [r7, #3]
 8004b80:	4611      	mov	r1, r2
 8004b82:	4618      	mov	r0, r3
 8004b84:	f003 fa9b 	bl	80080be <USB_ReadChInterrupts>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	f003 0304 	and.w	r3, r3, #4
 8004b8e:	2b04      	cmp	r3, #4
 8004b90:	d11b      	bne.n	8004bca <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004b92:	78fb      	ldrb	r3, [r7, #3]
 8004b94:	015a      	lsls	r2, r3, #5
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	4413      	add	r3, r2
 8004b9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	2304      	movs	r3, #4
 8004ba2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004ba4:	78fa      	ldrb	r2, [r7, #3]
 8004ba6:	6879      	ldr	r1, [r7, #4]
 8004ba8:	4613      	mov	r3, r2
 8004baa:	011b      	lsls	r3, r3, #4
 8004bac:	1a9b      	subs	r3, r3, r2
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	440b      	add	r3, r1
 8004bb2:	334d      	adds	r3, #77	@ 0x4d
 8004bb4:	2207      	movs	r2, #7
 8004bb6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	78fa      	ldrb	r2, [r7, #3]
 8004bbe:	4611      	mov	r1, r2
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f004 f826 	bl	8008c12 <USB_HC_Halt>
 8004bc6:	f000 bc89 	b.w	80054dc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	78fa      	ldrb	r2, [r7, #3]
 8004bd0:	4611      	mov	r1, r2
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f003 fa73 	bl	80080be <USB_ReadChInterrupts>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	f003 0320 	and.w	r3, r3, #32
 8004bde:	2b20      	cmp	r3, #32
 8004be0:	f040 8082 	bne.w	8004ce8 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004be4:	78fb      	ldrb	r3, [r7, #3]
 8004be6:	015a      	lsls	r2, r3, #5
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	4413      	add	r3, r2
 8004bec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	2320      	movs	r3, #32
 8004bf4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8004bf6:	78fa      	ldrb	r2, [r7, #3]
 8004bf8:	6879      	ldr	r1, [r7, #4]
 8004bfa:	4613      	mov	r3, r2
 8004bfc:	011b      	lsls	r3, r3, #4
 8004bfe:	1a9b      	subs	r3, r3, r2
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	440b      	add	r3, r1
 8004c04:	3319      	adds	r3, #25
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d124      	bne.n	8004c56 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8004c0c:	78fa      	ldrb	r2, [r7, #3]
 8004c0e:	6879      	ldr	r1, [r7, #4]
 8004c10:	4613      	mov	r3, r2
 8004c12:	011b      	lsls	r3, r3, #4
 8004c14:	1a9b      	subs	r3, r3, r2
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	440b      	add	r3, r1
 8004c1a:	3319      	adds	r3, #25
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004c20:	78fa      	ldrb	r2, [r7, #3]
 8004c22:	6879      	ldr	r1, [r7, #4]
 8004c24:	4613      	mov	r3, r2
 8004c26:	011b      	lsls	r3, r3, #4
 8004c28:	1a9b      	subs	r3, r3, r2
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	440b      	add	r3, r1
 8004c2e:	334c      	adds	r3, #76	@ 0x4c
 8004c30:	2202      	movs	r2, #2
 8004c32:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004c34:	78fa      	ldrb	r2, [r7, #3]
 8004c36:	6879      	ldr	r1, [r7, #4]
 8004c38:	4613      	mov	r3, r2
 8004c3a:	011b      	lsls	r3, r3, #4
 8004c3c:	1a9b      	subs	r3, r3, r2
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	440b      	add	r3, r1
 8004c42:	334d      	adds	r3, #77	@ 0x4d
 8004c44:	2203      	movs	r2, #3
 8004c46:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	78fa      	ldrb	r2, [r7, #3]
 8004c4e:	4611      	mov	r1, r2
 8004c50:	4618      	mov	r0, r3
 8004c52:	f003 ffde 	bl	8008c12 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8004c56:	78fa      	ldrb	r2, [r7, #3]
 8004c58:	6879      	ldr	r1, [r7, #4]
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	011b      	lsls	r3, r3, #4
 8004c5e:	1a9b      	subs	r3, r3, r2
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	440b      	add	r3, r1
 8004c64:	331a      	adds	r3, #26
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	f040 8437 	bne.w	80054dc <HCD_HC_OUT_IRQHandler+0x978>
 8004c6e:	78fa      	ldrb	r2, [r7, #3]
 8004c70:	6879      	ldr	r1, [r7, #4]
 8004c72:	4613      	mov	r3, r2
 8004c74:	011b      	lsls	r3, r3, #4
 8004c76:	1a9b      	subs	r3, r3, r2
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	440b      	add	r3, r1
 8004c7c:	331b      	adds	r3, #27
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	f040 842b 	bne.w	80054dc <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8004c86:	78fa      	ldrb	r2, [r7, #3]
 8004c88:	6879      	ldr	r1, [r7, #4]
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	011b      	lsls	r3, r3, #4
 8004c8e:	1a9b      	subs	r3, r3, r2
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	440b      	add	r3, r1
 8004c94:	3326      	adds	r3, #38	@ 0x26
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d009      	beq.n	8004cb0 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004c9c:	78fa      	ldrb	r2, [r7, #3]
 8004c9e:	6879      	ldr	r1, [r7, #4]
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	011b      	lsls	r3, r3, #4
 8004ca4:	1a9b      	subs	r3, r3, r2
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	440b      	add	r3, r1
 8004caa:	331b      	adds	r3, #27
 8004cac:	2201      	movs	r2, #1
 8004cae:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004cb0:	78fa      	ldrb	r2, [r7, #3]
 8004cb2:	6879      	ldr	r1, [r7, #4]
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	011b      	lsls	r3, r3, #4
 8004cb8:	1a9b      	subs	r3, r3, r2
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	440b      	add	r3, r1
 8004cbe:	334d      	adds	r3, #77	@ 0x4d
 8004cc0:	2203      	movs	r2, #3
 8004cc2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	78fa      	ldrb	r2, [r7, #3]
 8004cca:	4611      	mov	r1, r2
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f003 ffa0 	bl	8008c12 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8004cd2:	78fa      	ldrb	r2, [r7, #3]
 8004cd4:	6879      	ldr	r1, [r7, #4]
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	011b      	lsls	r3, r3, #4
 8004cda:	1a9b      	subs	r3, r3, r2
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	440b      	add	r3, r1
 8004ce0:	3344      	adds	r3, #68	@ 0x44
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	601a      	str	r2, [r3, #0]
 8004ce6:	e3f9      	b.n	80054dc <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	78fa      	ldrb	r2, [r7, #3]
 8004cee:	4611      	mov	r1, r2
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f003 f9e4 	bl	80080be <USB_ReadChInterrupts>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004cfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d00:	d111      	bne.n	8004d26 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004d02:	78fb      	ldrb	r3, [r7, #3]
 8004d04:	015a      	lsls	r2, r3, #5
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	4413      	add	r3, r2
 8004d0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d0e:	461a      	mov	r2, r3
 8004d10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004d14:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	78fa      	ldrb	r2, [r7, #3]
 8004d1c:	4611      	mov	r1, r2
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f003 ff77 	bl	8008c12 <USB_HC_Halt>
 8004d24:	e3da      	b.n	80054dc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	78fa      	ldrb	r2, [r7, #3]
 8004d2c:	4611      	mov	r1, r2
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f003 f9c5 	bl	80080be <USB_ReadChInterrupts>
 8004d34:	4603      	mov	r3, r0
 8004d36:	f003 0301 	and.w	r3, r3, #1
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d168      	bne.n	8004e10 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004d3e:	78fa      	ldrb	r2, [r7, #3]
 8004d40:	6879      	ldr	r1, [r7, #4]
 8004d42:	4613      	mov	r3, r2
 8004d44:	011b      	lsls	r3, r3, #4
 8004d46:	1a9b      	subs	r3, r3, r2
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	440b      	add	r3, r1
 8004d4c:	3344      	adds	r3, #68	@ 0x44
 8004d4e:	2200      	movs	r2, #0
 8004d50:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	78fa      	ldrb	r2, [r7, #3]
 8004d58:	4611      	mov	r1, r2
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f003 f9af 	bl	80080be <USB_ReadChInterrupts>
 8004d60:	4603      	mov	r3, r0
 8004d62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d66:	2b40      	cmp	r3, #64	@ 0x40
 8004d68:	d112      	bne.n	8004d90 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004d6a:	78fa      	ldrb	r2, [r7, #3]
 8004d6c:	6879      	ldr	r1, [r7, #4]
 8004d6e:	4613      	mov	r3, r2
 8004d70:	011b      	lsls	r3, r3, #4
 8004d72:	1a9b      	subs	r3, r3, r2
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	440b      	add	r3, r1
 8004d78:	3319      	adds	r3, #25
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004d7e:	78fb      	ldrb	r3, [r7, #3]
 8004d80:	015a      	lsls	r2, r3, #5
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	4413      	add	r3, r2
 8004d86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	2340      	movs	r3, #64	@ 0x40
 8004d8e:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004d90:	78fa      	ldrb	r2, [r7, #3]
 8004d92:	6879      	ldr	r1, [r7, #4]
 8004d94:	4613      	mov	r3, r2
 8004d96:	011b      	lsls	r3, r3, #4
 8004d98:	1a9b      	subs	r3, r3, r2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	440b      	add	r3, r1
 8004d9e:	331b      	adds	r3, #27
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d019      	beq.n	8004dda <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004da6:	78fa      	ldrb	r2, [r7, #3]
 8004da8:	6879      	ldr	r1, [r7, #4]
 8004daa:	4613      	mov	r3, r2
 8004dac:	011b      	lsls	r3, r3, #4
 8004dae:	1a9b      	subs	r3, r3, r2
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	440b      	add	r3, r1
 8004db4:	331b      	adds	r3, #27
 8004db6:	2200      	movs	r2, #0
 8004db8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004dba:	78fb      	ldrb	r3, [r7, #3]
 8004dbc:	015a      	lsls	r2, r3, #5
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	78fa      	ldrb	r2, [r7, #3]
 8004dca:	0151      	lsls	r1, r2, #5
 8004dcc:	693a      	ldr	r2, [r7, #16]
 8004dce:	440a      	add	r2, r1
 8004dd0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004dd4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004dd8:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004dda:	78fb      	ldrb	r3, [r7, #3]
 8004ddc:	015a      	lsls	r2, r3, #5
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	4413      	add	r3, r2
 8004de2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004de6:	461a      	mov	r2, r3
 8004de8:	2301      	movs	r3, #1
 8004dea:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8004dec:	78fa      	ldrb	r2, [r7, #3]
 8004dee:	6879      	ldr	r1, [r7, #4]
 8004df0:	4613      	mov	r3, r2
 8004df2:	011b      	lsls	r3, r3, #4
 8004df4:	1a9b      	subs	r3, r3, r2
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	440b      	add	r3, r1
 8004dfa:	334d      	adds	r3, #77	@ 0x4d
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	78fa      	ldrb	r2, [r7, #3]
 8004e06:	4611      	mov	r1, r2
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f003 ff02 	bl	8008c12 <USB_HC_Halt>
 8004e0e:	e365      	b.n	80054dc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	78fa      	ldrb	r2, [r7, #3]
 8004e16:	4611      	mov	r1, r2
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f003 f950 	bl	80080be <USB_ReadChInterrupts>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e24:	2b40      	cmp	r3, #64	@ 0x40
 8004e26:	d139      	bne.n	8004e9c <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8004e28:	78fa      	ldrb	r2, [r7, #3]
 8004e2a:	6879      	ldr	r1, [r7, #4]
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	011b      	lsls	r3, r3, #4
 8004e30:	1a9b      	subs	r3, r3, r2
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	440b      	add	r3, r1
 8004e36:	334d      	adds	r3, #77	@ 0x4d
 8004e38:	2205      	movs	r2, #5
 8004e3a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004e3c:	78fa      	ldrb	r2, [r7, #3]
 8004e3e:	6879      	ldr	r1, [r7, #4]
 8004e40:	4613      	mov	r3, r2
 8004e42:	011b      	lsls	r3, r3, #4
 8004e44:	1a9b      	subs	r3, r3, r2
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	440b      	add	r3, r1
 8004e4a:	331a      	adds	r3, #26
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d109      	bne.n	8004e66 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004e52:	78fa      	ldrb	r2, [r7, #3]
 8004e54:	6879      	ldr	r1, [r7, #4]
 8004e56:	4613      	mov	r3, r2
 8004e58:	011b      	lsls	r3, r3, #4
 8004e5a:	1a9b      	subs	r3, r3, r2
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	440b      	add	r3, r1
 8004e60:	3319      	adds	r3, #25
 8004e62:	2201      	movs	r2, #1
 8004e64:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8004e66:	78fa      	ldrb	r2, [r7, #3]
 8004e68:	6879      	ldr	r1, [r7, #4]
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	011b      	lsls	r3, r3, #4
 8004e6e:	1a9b      	subs	r3, r3, r2
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	440b      	add	r3, r1
 8004e74:	3344      	adds	r3, #68	@ 0x44
 8004e76:	2200      	movs	r2, #0
 8004e78:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	78fa      	ldrb	r2, [r7, #3]
 8004e80:	4611      	mov	r1, r2
 8004e82:	4618      	mov	r0, r3
 8004e84:	f003 fec5 	bl	8008c12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004e88:	78fb      	ldrb	r3, [r7, #3]
 8004e8a:	015a      	lsls	r2, r3, #5
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	4413      	add	r3, r2
 8004e90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e94:	461a      	mov	r2, r3
 8004e96:	2340      	movs	r3, #64	@ 0x40
 8004e98:	6093      	str	r3, [r2, #8]
 8004e9a:	e31f      	b.n	80054dc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	78fa      	ldrb	r2, [r7, #3]
 8004ea2:	4611      	mov	r1, r2
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f003 f90a 	bl	80080be <USB_ReadChInterrupts>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	f003 0308 	and.w	r3, r3, #8
 8004eb0:	2b08      	cmp	r3, #8
 8004eb2:	d11a      	bne.n	8004eea <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004eb4:	78fb      	ldrb	r3, [r7, #3]
 8004eb6:	015a      	lsls	r2, r3, #5
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	4413      	add	r3, r2
 8004ebc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	2308      	movs	r3, #8
 8004ec4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004ec6:	78fa      	ldrb	r2, [r7, #3]
 8004ec8:	6879      	ldr	r1, [r7, #4]
 8004eca:	4613      	mov	r3, r2
 8004ecc:	011b      	lsls	r3, r3, #4
 8004ece:	1a9b      	subs	r3, r3, r2
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	440b      	add	r3, r1
 8004ed4:	334d      	adds	r3, #77	@ 0x4d
 8004ed6:	2206      	movs	r2, #6
 8004ed8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	78fa      	ldrb	r2, [r7, #3]
 8004ee0:	4611      	mov	r1, r2
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f003 fe95 	bl	8008c12 <USB_HC_Halt>
 8004ee8:	e2f8      	b.n	80054dc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	78fa      	ldrb	r2, [r7, #3]
 8004ef0:	4611      	mov	r1, r2
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f003 f8e3 	bl	80080be <USB_ReadChInterrupts>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	f003 0310 	and.w	r3, r3, #16
 8004efe:	2b10      	cmp	r3, #16
 8004f00:	d144      	bne.n	8004f8c <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004f02:	78fa      	ldrb	r2, [r7, #3]
 8004f04:	6879      	ldr	r1, [r7, #4]
 8004f06:	4613      	mov	r3, r2
 8004f08:	011b      	lsls	r3, r3, #4
 8004f0a:	1a9b      	subs	r3, r3, r2
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	440b      	add	r3, r1
 8004f10:	3344      	adds	r3, #68	@ 0x44
 8004f12:	2200      	movs	r2, #0
 8004f14:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8004f16:	78fa      	ldrb	r2, [r7, #3]
 8004f18:	6879      	ldr	r1, [r7, #4]
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	011b      	lsls	r3, r3, #4
 8004f1e:	1a9b      	subs	r3, r3, r2
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	440b      	add	r3, r1
 8004f24:	334d      	adds	r3, #77	@ 0x4d
 8004f26:	2204      	movs	r2, #4
 8004f28:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8004f2a:	78fa      	ldrb	r2, [r7, #3]
 8004f2c:	6879      	ldr	r1, [r7, #4]
 8004f2e:	4613      	mov	r3, r2
 8004f30:	011b      	lsls	r3, r3, #4
 8004f32:	1a9b      	subs	r3, r3, r2
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	440b      	add	r3, r1
 8004f38:	3319      	adds	r3, #25
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d114      	bne.n	8004f6a <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8004f40:	78fa      	ldrb	r2, [r7, #3]
 8004f42:	6879      	ldr	r1, [r7, #4]
 8004f44:	4613      	mov	r3, r2
 8004f46:	011b      	lsls	r3, r3, #4
 8004f48:	1a9b      	subs	r3, r3, r2
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	440b      	add	r3, r1
 8004f4e:	3318      	adds	r3, #24
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d109      	bne.n	8004f6a <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8004f56:	78fa      	ldrb	r2, [r7, #3]
 8004f58:	6879      	ldr	r1, [r7, #4]
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	011b      	lsls	r3, r3, #4
 8004f5e:	1a9b      	subs	r3, r3, r2
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	440b      	add	r3, r1
 8004f64:	3319      	adds	r3, #25
 8004f66:	2201      	movs	r2, #1
 8004f68:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	78fa      	ldrb	r2, [r7, #3]
 8004f70:	4611      	mov	r1, r2
 8004f72:	4618      	mov	r0, r3
 8004f74:	f003 fe4d 	bl	8008c12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004f78:	78fb      	ldrb	r3, [r7, #3]
 8004f7a:	015a      	lsls	r2, r3, #5
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	4413      	add	r3, r2
 8004f80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f84:	461a      	mov	r2, r3
 8004f86:	2310      	movs	r3, #16
 8004f88:	6093      	str	r3, [r2, #8]
 8004f8a:	e2a7      	b.n	80054dc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	78fa      	ldrb	r2, [r7, #3]
 8004f92:	4611      	mov	r1, r2
 8004f94:	4618      	mov	r0, r3
 8004f96:	f003 f892 	bl	80080be <USB_ReadChInterrupts>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fa0:	2b80      	cmp	r3, #128	@ 0x80
 8004fa2:	f040 8083 	bne.w	80050ac <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	799b      	ldrb	r3, [r3, #6]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d111      	bne.n	8004fd2 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004fae:	78fa      	ldrb	r2, [r7, #3]
 8004fb0:	6879      	ldr	r1, [r7, #4]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	011b      	lsls	r3, r3, #4
 8004fb6:	1a9b      	subs	r3, r3, r2
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	440b      	add	r3, r1
 8004fbc:	334d      	adds	r3, #77	@ 0x4d
 8004fbe:	2207      	movs	r2, #7
 8004fc0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	78fa      	ldrb	r2, [r7, #3]
 8004fc8:	4611      	mov	r1, r2
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f003 fe21 	bl	8008c12 <USB_HC_Halt>
 8004fd0:	e062      	b.n	8005098 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8004fd2:	78fa      	ldrb	r2, [r7, #3]
 8004fd4:	6879      	ldr	r1, [r7, #4]
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	011b      	lsls	r3, r3, #4
 8004fda:	1a9b      	subs	r3, r3, r2
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	440b      	add	r3, r1
 8004fe0:	3344      	adds	r3, #68	@ 0x44
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	1c59      	adds	r1, r3, #1
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	4613      	mov	r3, r2
 8004fea:	011b      	lsls	r3, r3, #4
 8004fec:	1a9b      	subs	r3, r3, r2
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	4403      	add	r3, r0
 8004ff2:	3344      	adds	r3, #68	@ 0x44
 8004ff4:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004ff6:	78fa      	ldrb	r2, [r7, #3]
 8004ff8:	6879      	ldr	r1, [r7, #4]
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	011b      	lsls	r3, r3, #4
 8004ffe:	1a9b      	subs	r3, r3, r2
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	440b      	add	r3, r1
 8005004:	3344      	adds	r3, #68	@ 0x44
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	2b02      	cmp	r3, #2
 800500a:	d922      	bls.n	8005052 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800500c:	78fa      	ldrb	r2, [r7, #3]
 800500e:	6879      	ldr	r1, [r7, #4]
 8005010:	4613      	mov	r3, r2
 8005012:	011b      	lsls	r3, r3, #4
 8005014:	1a9b      	subs	r3, r3, r2
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	440b      	add	r3, r1
 800501a:	3344      	adds	r3, #68	@ 0x44
 800501c:	2200      	movs	r2, #0
 800501e:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005020:	78fa      	ldrb	r2, [r7, #3]
 8005022:	6879      	ldr	r1, [r7, #4]
 8005024:	4613      	mov	r3, r2
 8005026:	011b      	lsls	r3, r3, #4
 8005028:	1a9b      	subs	r3, r3, r2
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	440b      	add	r3, r1
 800502e:	334c      	adds	r3, #76	@ 0x4c
 8005030:	2204      	movs	r2, #4
 8005032:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005034:	78fa      	ldrb	r2, [r7, #3]
 8005036:	6879      	ldr	r1, [r7, #4]
 8005038:	4613      	mov	r3, r2
 800503a:	011b      	lsls	r3, r3, #4
 800503c:	1a9b      	subs	r3, r3, r2
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	440b      	add	r3, r1
 8005042:	334c      	adds	r3, #76	@ 0x4c
 8005044:	781a      	ldrb	r2, [r3, #0]
 8005046:	78fb      	ldrb	r3, [r7, #3]
 8005048:	4619      	mov	r1, r3
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f006 f940 	bl	800b2d0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005050:	e022      	b.n	8005098 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005052:	78fa      	ldrb	r2, [r7, #3]
 8005054:	6879      	ldr	r1, [r7, #4]
 8005056:	4613      	mov	r3, r2
 8005058:	011b      	lsls	r3, r3, #4
 800505a:	1a9b      	subs	r3, r3, r2
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	440b      	add	r3, r1
 8005060:	334c      	adds	r3, #76	@ 0x4c
 8005062:	2202      	movs	r2, #2
 8005064:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005066:	78fb      	ldrb	r3, [r7, #3]
 8005068:	015a      	lsls	r2, r3, #5
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	4413      	add	r3, r2
 800506e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800507c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005084:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005086:	78fb      	ldrb	r3, [r7, #3]
 8005088:	015a      	lsls	r2, r3, #5
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	4413      	add	r3, r2
 800508e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005092:	461a      	mov	r2, r3
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8005098:	78fb      	ldrb	r3, [r7, #3]
 800509a:	015a      	lsls	r2, r3, #5
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	4413      	add	r3, r2
 80050a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050a4:	461a      	mov	r2, r3
 80050a6:	2380      	movs	r3, #128	@ 0x80
 80050a8:	6093      	str	r3, [r2, #8]
 80050aa:	e217      	b.n	80054dc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	78fa      	ldrb	r2, [r7, #3]
 80050b2:	4611      	mov	r1, r2
 80050b4:	4618      	mov	r0, r3
 80050b6:	f003 f802 	bl	80080be <USB_ReadChInterrupts>
 80050ba:	4603      	mov	r3, r0
 80050bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050c4:	d11b      	bne.n	80050fe <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80050c6:	78fa      	ldrb	r2, [r7, #3]
 80050c8:	6879      	ldr	r1, [r7, #4]
 80050ca:	4613      	mov	r3, r2
 80050cc:	011b      	lsls	r3, r3, #4
 80050ce:	1a9b      	subs	r3, r3, r2
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	440b      	add	r3, r1
 80050d4:	334d      	adds	r3, #77	@ 0x4d
 80050d6:	2209      	movs	r2, #9
 80050d8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	78fa      	ldrb	r2, [r7, #3]
 80050e0:	4611      	mov	r1, r2
 80050e2:	4618      	mov	r0, r3
 80050e4:	f003 fd95 	bl	8008c12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80050e8:	78fb      	ldrb	r3, [r7, #3]
 80050ea:	015a      	lsls	r2, r3, #5
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	4413      	add	r3, r2
 80050f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050f4:	461a      	mov	r2, r3
 80050f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80050fa:	6093      	str	r3, [r2, #8]
 80050fc:	e1ee      	b.n	80054dc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	78fa      	ldrb	r2, [r7, #3]
 8005104:	4611      	mov	r1, r2
 8005106:	4618      	mov	r0, r3
 8005108:	f002 ffd9 	bl	80080be <USB_ReadChInterrupts>
 800510c:	4603      	mov	r3, r0
 800510e:	f003 0302 	and.w	r3, r3, #2
 8005112:	2b02      	cmp	r3, #2
 8005114:	f040 81df 	bne.w	80054d6 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8005118:	78fb      	ldrb	r3, [r7, #3]
 800511a:	015a      	lsls	r2, r3, #5
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	4413      	add	r3, r2
 8005120:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005124:	461a      	mov	r2, r3
 8005126:	2302      	movs	r3, #2
 8005128:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800512a:	78fa      	ldrb	r2, [r7, #3]
 800512c:	6879      	ldr	r1, [r7, #4]
 800512e:	4613      	mov	r3, r2
 8005130:	011b      	lsls	r3, r3, #4
 8005132:	1a9b      	subs	r3, r3, r2
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	440b      	add	r3, r1
 8005138:	334d      	adds	r3, #77	@ 0x4d
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	2b01      	cmp	r3, #1
 800513e:	f040 8093 	bne.w	8005268 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005142:	78fa      	ldrb	r2, [r7, #3]
 8005144:	6879      	ldr	r1, [r7, #4]
 8005146:	4613      	mov	r3, r2
 8005148:	011b      	lsls	r3, r3, #4
 800514a:	1a9b      	subs	r3, r3, r2
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	440b      	add	r3, r1
 8005150:	334d      	adds	r3, #77	@ 0x4d
 8005152:	2202      	movs	r2, #2
 8005154:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005156:	78fa      	ldrb	r2, [r7, #3]
 8005158:	6879      	ldr	r1, [r7, #4]
 800515a:	4613      	mov	r3, r2
 800515c:	011b      	lsls	r3, r3, #4
 800515e:	1a9b      	subs	r3, r3, r2
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	440b      	add	r3, r1
 8005164:	334c      	adds	r3, #76	@ 0x4c
 8005166:	2201      	movs	r2, #1
 8005168:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800516a:	78fa      	ldrb	r2, [r7, #3]
 800516c:	6879      	ldr	r1, [r7, #4]
 800516e:	4613      	mov	r3, r2
 8005170:	011b      	lsls	r3, r3, #4
 8005172:	1a9b      	subs	r3, r3, r2
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	440b      	add	r3, r1
 8005178:	3326      	adds	r3, #38	@ 0x26
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	2b02      	cmp	r3, #2
 800517e:	d00b      	beq.n	8005198 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8005180:	78fa      	ldrb	r2, [r7, #3]
 8005182:	6879      	ldr	r1, [r7, #4]
 8005184:	4613      	mov	r3, r2
 8005186:	011b      	lsls	r3, r3, #4
 8005188:	1a9b      	subs	r3, r3, r2
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	440b      	add	r3, r1
 800518e:	3326      	adds	r3, #38	@ 0x26
 8005190:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005192:	2b03      	cmp	r3, #3
 8005194:	f040 8190 	bne.w	80054b8 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	799b      	ldrb	r3, [r3, #6]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d115      	bne.n	80051cc <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80051a0:	78fa      	ldrb	r2, [r7, #3]
 80051a2:	6879      	ldr	r1, [r7, #4]
 80051a4:	4613      	mov	r3, r2
 80051a6:	011b      	lsls	r3, r3, #4
 80051a8:	1a9b      	subs	r3, r3, r2
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	440b      	add	r3, r1
 80051ae:	333d      	adds	r3, #61	@ 0x3d
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	78fa      	ldrb	r2, [r7, #3]
 80051b4:	f083 0301 	eor.w	r3, r3, #1
 80051b8:	b2d8      	uxtb	r0, r3
 80051ba:	6879      	ldr	r1, [r7, #4]
 80051bc:	4613      	mov	r3, r2
 80051be:	011b      	lsls	r3, r3, #4
 80051c0:	1a9b      	subs	r3, r3, r2
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	440b      	add	r3, r1
 80051c6:	333d      	adds	r3, #61	@ 0x3d
 80051c8:	4602      	mov	r2, r0
 80051ca:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	799b      	ldrb	r3, [r3, #6]
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	f040 8171 	bne.w	80054b8 <HCD_HC_OUT_IRQHandler+0x954>
 80051d6:	78fa      	ldrb	r2, [r7, #3]
 80051d8:	6879      	ldr	r1, [r7, #4]
 80051da:	4613      	mov	r3, r2
 80051dc:	011b      	lsls	r3, r3, #4
 80051de:	1a9b      	subs	r3, r3, r2
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	440b      	add	r3, r1
 80051e4:	3334      	adds	r3, #52	@ 0x34
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	f000 8165 	beq.w	80054b8 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80051ee:	78fa      	ldrb	r2, [r7, #3]
 80051f0:	6879      	ldr	r1, [r7, #4]
 80051f2:	4613      	mov	r3, r2
 80051f4:	011b      	lsls	r3, r3, #4
 80051f6:	1a9b      	subs	r3, r3, r2
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	440b      	add	r3, r1
 80051fc:	3334      	adds	r3, #52	@ 0x34
 80051fe:	6819      	ldr	r1, [r3, #0]
 8005200:	78fa      	ldrb	r2, [r7, #3]
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	4613      	mov	r3, r2
 8005206:	011b      	lsls	r3, r3, #4
 8005208:	1a9b      	subs	r3, r3, r2
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	4403      	add	r3, r0
 800520e:	3328      	adds	r3, #40	@ 0x28
 8005210:	881b      	ldrh	r3, [r3, #0]
 8005212:	440b      	add	r3, r1
 8005214:	1e59      	subs	r1, r3, #1
 8005216:	78fa      	ldrb	r2, [r7, #3]
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	4613      	mov	r3, r2
 800521c:	011b      	lsls	r3, r3, #4
 800521e:	1a9b      	subs	r3, r3, r2
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	4403      	add	r3, r0
 8005224:	3328      	adds	r3, #40	@ 0x28
 8005226:	881b      	ldrh	r3, [r3, #0]
 8005228:	fbb1 f3f3 	udiv	r3, r1, r3
 800522c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	f003 0301 	and.w	r3, r3, #1
 8005234:	2b00      	cmp	r3, #0
 8005236:	f000 813f 	beq.w	80054b8 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800523a:	78fa      	ldrb	r2, [r7, #3]
 800523c:	6879      	ldr	r1, [r7, #4]
 800523e:	4613      	mov	r3, r2
 8005240:	011b      	lsls	r3, r3, #4
 8005242:	1a9b      	subs	r3, r3, r2
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	440b      	add	r3, r1
 8005248:	333d      	adds	r3, #61	@ 0x3d
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	78fa      	ldrb	r2, [r7, #3]
 800524e:	f083 0301 	eor.w	r3, r3, #1
 8005252:	b2d8      	uxtb	r0, r3
 8005254:	6879      	ldr	r1, [r7, #4]
 8005256:	4613      	mov	r3, r2
 8005258:	011b      	lsls	r3, r3, #4
 800525a:	1a9b      	subs	r3, r3, r2
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	440b      	add	r3, r1
 8005260:	333d      	adds	r3, #61	@ 0x3d
 8005262:	4602      	mov	r2, r0
 8005264:	701a      	strb	r2, [r3, #0]
 8005266:	e127      	b.n	80054b8 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8005268:	78fa      	ldrb	r2, [r7, #3]
 800526a:	6879      	ldr	r1, [r7, #4]
 800526c:	4613      	mov	r3, r2
 800526e:	011b      	lsls	r3, r3, #4
 8005270:	1a9b      	subs	r3, r3, r2
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	440b      	add	r3, r1
 8005276:	334d      	adds	r3, #77	@ 0x4d
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	2b03      	cmp	r3, #3
 800527c:	d120      	bne.n	80052c0 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800527e:	78fa      	ldrb	r2, [r7, #3]
 8005280:	6879      	ldr	r1, [r7, #4]
 8005282:	4613      	mov	r3, r2
 8005284:	011b      	lsls	r3, r3, #4
 8005286:	1a9b      	subs	r3, r3, r2
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	440b      	add	r3, r1
 800528c:	334d      	adds	r3, #77	@ 0x4d
 800528e:	2202      	movs	r2, #2
 8005290:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005292:	78fa      	ldrb	r2, [r7, #3]
 8005294:	6879      	ldr	r1, [r7, #4]
 8005296:	4613      	mov	r3, r2
 8005298:	011b      	lsls	r3, r3, #4
 800529a:	1a9b      	subs	r3, r3, r2
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	440b      	add	r3, r1
 80052a0:	331b      	adds	r3, #27
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	f040 8107 	bne.w	80054b8 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80052aa:	78fa      	ldrb	r2, [r7, #3]
 80052ac:	6879      	ldr	r1, [r7, #4]
 80052ae:	4613      	mov	r3, r2
 80052b0:	011b      	lsls	r3, r3, #4
 80052b2:	1a9b      	subs	r3, r3, r2
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	440b      	add	r3, r1
 80052b8:	334c      	adds	r3, #76	@ 0x4c
 80052ba:	2202      	movs	r2, #2
 80052bc:	701a      	strb	r2, [r3, #0]
 80052be:	e0fb      	b.n	80054b8 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80052c0:	78fa      	ldrb	r2, [r7, #3]
 80052c2:	6879      	ldr	r1, [r7, #4]
 80052c4:	4613      	mov	r3, r2
 80052c6:	011b      	lsls	r3, r3, #4
 80052c8:	1a9b      	subs	r3, r3, r2
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	440b      	add	r3, r1
 80052ce:	334d      	adds	r3, #77	@ 0x4d
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	2b04      	cmp	r3, #4
 80052d4:	d13a      	bne.n	800534c <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80052d6:	78fa      	ldrb	r2, [r7, #3]
 80052d8:	6879      	ldr	r1, [r7, #4]
 80052da:	4613      	mov	r3, r2
 80052dc:	011b      	lsls	r3, r3, #4
 80052de:	1a9b      	subs	r3, r3, r2
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	440b      	add	r3, r1
 80052e4:	334d      	adds	r3, #77	@ 0x4d
 80052e6:	2202      	movs	r2, #2
 80052e8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80052ea:	78fa      	ldrb	r2, [r7, #3]
 80052ec:	6879      	ldr	r1, [r7, #4]
 80052ee:	4613      	mov	r3, r2
 80052f0:	011b      	lsls	r3, r3, #4
 80052f2:	1a9b      	subs	r3, r3, r2
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	440b      	add	r3, r1
 80052f8:	334c      	adds	r3, #76	@ 0x4c
 80052fa:	2202      	movs	r2, #2
 80052fc:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80052fe:	78fa      	ldrb	r2, [r7, #3]
 8005300:	6879      	ldr	r1, [r7, #4]
 8005302:	4613      	mov	r3, r2
 8005304:	011b      	lsls	r3, r3, #4
 8005306:	1a9b      	subs	r3, r3, r2
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	440b      	add	r3, r1
 800530c:	331b      	adds	r3, #27
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	2b01      	cmp	r3, #1
 8005312:	f040 80d1 	bne.w	80054b8 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8005316:	78fa      	ldrb	r2, [r7, #3]
 8005318:	6879      	ldr	r1, [r7, #4]
 800531a:	4613      	mov	r3, r2
 800531c:	011b      	lsls	r3, r3, #4
 800531e:	1a9b      	subs	r3, r3, r2
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	440b      	add	r3, r1
 8005324:	331b      	adds	r3, #27
 8005326:	2200      	movs	r2, #0
 8005328:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800532a:	78fb      	ldrb	r3, [r7, #3]
 800532c:	015a      	lsls	r2, r3, #5
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	4413      	add	r3, r2
 8005332:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	78fa      	ldrb	r2, [r7, #3]
 800533a:	0151      	lsls	r1, r2, #5
 800533c:	693a      	ldr	r2, [r7, #16]
 800533e:	440a      	add	r2, r1
 8005340:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005344:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005348:	6053      	str	r3, [r2, #4]
 800534a:	e0b5      	b.n	80054b8 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800534c:	78fa      	ldrb	r2, [r7, #3]
 800534e:	6879      	ldr	r1, [r7, #4]
 8005350:	4613      	mov	r3, r2
 8005352:	011b      	lsls	r3, r3, #4
 8005354:	1a9b      	subs	r3, r3, r2
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	440b      	add	r3, r1
 800535a:	334d      	adds	r3, #77	@ 0x4d
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	2b05      	cmp	r3, #5
 8005360:	d114      	bne.n	800538c <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005362:	78fa      	ldrb	r2, [r7, #3]
 8005364:	6879      	ldr	r1, [r7, #4]
 8005366:	4613      	mov	r3, r2
 8005368:	011b      	lsls	r3, r3, #4
 800536a:	1a9b      	subs	r3, r3, r2
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	440b      	add	r3, r1
 8005370:	334d      	adds	r3, #77	@ 0x4d
 8005372:	2202      	movs	r2, #2
 8005374:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8005376:	78fa      	ldrb	r2, [r7, #3]
 8005378:	6879      	ldr	r1, [r7, #4]
 800537a:	4613      	mov	r3, r2
 800537c:	011b      	lsls	r3, r3, #4
 800537e:	1a9b      	subs	r3, r3, r2
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	440b      	add	r3, r1
 8005384:	334c      	adds	r3, #76	@ 0x4c
 8005386:	2202      	movs	r2, #2
 8005388:	701a      	strb	r2, [r3, #0]
 800538a:	e095      	b.n	80054b8 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800538c:	78fa      	ldrb	r2, [r7, #3]
 800538e:	6879      	ldr	r1, [r7, #4]
 8005390:	4613      	mov	r3, r2
 8005392:	011b      	lsls	r3, r3, #4
 8005394:	1a9b      	subs	r3, r3, r2
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	440b      	add	r3, r1
 800539a:	334d      	adds	r3, #77	@ 0x4d
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	2b06      	cmp	r3, #6
 80053a0:	d114      	bne.n	80053cc <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80053a2:	78fa      	ldrb	r2, [r7, #3]
 80053a4:	6879      	ldr	r1, [r7, #4]
 80053a6:	4613      	mov	r3, r2
 80053a8:	011b      	lsls	r3, r3, #4
 80053aa:	1a9b      	subs	r3, r3, r2
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	440b      	add	r3, r1
 80053b0:	334d      	adds	r3, #77	@ 0x4d
 80053b2:	2202      	movs	r2, #2
 80053b4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80053b6:	78fa      	ldrb	r2, [r7, #3]
 80053b8:	6879      	ldr	r1, [r7, #4]
 80053ba:	4613      	mov	r3, r2
 80053bc:	011b      	lsls	r3, r3, #4
 80053be:	1a9b      	subs	r3, r3, r2
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	440b      	add	r3, r1
 80053c4:	334c      	adds	r3, #76	@ 0x4c
 80053c6:	2205      	movs	r2, #5
 80053c8:	701a      	strb	r2, [r3, #0]
 80053ca:	e075      	b.n	80054b8 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80053cc:	78fa      	ldrb	r2, [r7, #3]
 80053ce:	6879      	ldr	r1, [r7, #4]
 80053d0:	4613      	mov	r3, r2
 80053d2:	011b      	lsls	r3, r3, #4
 80053d4:	1a9b      	subs	r3, r3, r2
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	440b      	add	r3, r1
 80053da:	334d      	adds	r3, #77	@ 0x4d
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	2b07      	cmp	r3, #7
 80053e0:	d00a      	beq.n	80053f8 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80053e2:	78fa      	ldrb	r2, [r7, #3]
 80053e4:	6879      	ldr	r1, [r7, #4]
 80053e6:	4613      	mov	r3, r2
 80053e8:	011b      	lsls	r3, r3, #4
 80053ea:	1a9b      	subs	r3, r3, r2
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	440b      	add	r3, r1
 80053f0:	334d      	adds	r3, #77	@ 0x4d
 80053f2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80053f4:	2b09      	cmp	r3, #9
 80053f6:	d170      	bne.n	80054da <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80053f8:	78fa      	ldrb	r2, [r7, #3]
 80053fa:	6879      	ldr	r1, [r7, #4]
 80053fc:	4613      	mov	r3, r2
 80053fe:	011b      	lsls	r3, r3, #4
 8005400:	1a9b      	subs	r3, r3, r2
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	440b      	add	r3, r1
 8005406:	334d      	adds	r3, #77	@ 0x4d
 8005408:	2202      	movs	r2, #2
 800540a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800540c:	78fa      	ldrb	r2, [r7, #3]
 800540e:	6879      	ldr	r1, [r7, #4]
 8005410:	4613      	mov	r3, r2
 8005412:	011b      	lsls	r3, r3, #4
 8005414:	1a9b      	subs	r3, r3, r2
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	440b      	add	r3, r1
 800541a:	3344      	adds	r3, #68	@ 0x44
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	1c59      	adds	r1, r3, #1
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	4613      	mov	r3, r2
 8005424:	011b      	lsls	r3, r3, #4
 8005426:	1a9b      	subs	r3, r3, r2
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	4403      	add	r3, r0
 800542c:	3344      	adds	r3, #68	@ 0x44
 800542e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005430:	78fa      	ldrb	r2, [r7, #3]
 8005432:	6879      	ldr	r1, [r7, #4]
 8005434:	4613      	mov	r3, r2
 8005436:	011b      	lsls	r3, r3, #4
 8005438:	1a9b      	subs	r3, r3, r2
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	440b      	add	r3, r1
 800543e:	3344      	adds	r3, #68	@ 0x44
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2b02      	cmp	r3, #2
 8005444:	d914      	bls.n	8005470 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005446:	78fa      	ldrb	r2, [r7, #3]
 8005448:	6879      	ldr	r1, [r7, #4]
 800544a:	4613      	mov	r3, r2
 800544c:	011b      	lsls	r3, r3, #4
 800544e:	1a9b      	subs	r3, r3, r2
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	440b      	add	r3, r1
 8005454:	3344      	adds	r3, #68	@ 0x44
 8005456:	2200      	movs	r2, #0
 8005458:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800545a:	78fa      	ldrb	r2, [r7, #3]
 800545c:	6879      	ldr	r1, [r7, #4]
 800545e:	4613      	mov	r3, r2
 8005460:	011b      	lsls	r3, r3, #4
 8005462:	1a9b      	subs	r3, r3, r2
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	440b      	add	r3, r1
 8005468:	334c      	adds	r3, #76	@ 0x4c
 800546a:	2204      	movs	r2, #4
 800546c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800546e:	e022      	b.n	80054b6 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005470:	78fa      	ldrb	r2, [r7, #3]
 8005472:	6879      	ldr	r1, [r7, #4]
 8005474:	4613      	mov	r3, r2
 8005476:	011b      	lsls	r3, r3, #4
 8005478:	1a9b      	subs	r3, r3, r2
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	440b      	add	r3, r1
 800547e:	334c      	adds	r3, #76	@ 0x4c
 8005480:	2202      	movs	r2, #2
 8005482:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005484:	78fb      	ldrb	r3, [r7, #3]
 8005486:	015a      	lsls	r2, r3, #5
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	4413      	add	r3, r2
 800548c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800549a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80054a2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80054a4:	78fb      	ldrb	r3, [r7, #3]
 80054a6:	015a      	lsls	r2, r3, #5
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	4413      	add	r3, r2
 80054ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054b0:	461a      	mov	r2, r3
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80054b6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80054b8:	78fa      	ldrb	r2, [r7, #3]
 80054ba:	6879      	ldr	r1, [r7, #4]
 80054bc:	4613      	mov	r3, r2
 80054be:	011b      	lsls	r3, r3, #4
 80054c0:	1a9b      	subs	r3, r3, r2
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	440b      	add	r3, r1
 80054c6:	334c      	adds	r3, #76	@ 0x4c
 80054c8:	781a      	ldrb	r2, [r3, #0]
 80054ca:	78fb      	ldrb	r3, [r7, #3]
 80054cc:	4619      	mov	r1, r3
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f005 fefe 	bl	800b2d0 <HAL_HCD_HC_NotifyURBChange_Callback>
 80054d4:	e002      	b.n	80054dc <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80054d6:	bf00      	nop
 80054d8:	e000      	b.n	80054dc <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80054da:	bf00      	nop
  }
}
 80054dc:	3718      	adds	r7, #24
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}

080054e2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80054e2:	b580      	push	{r7, lr}
 80054e4:	b08a      	sub	sp, #40	@ 0x28
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	6a1b      	ldr	r3, [r3, #32]
 80054fa:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	f003 030f 	and.w	r3, r3, #15
 8005502:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	0c5b      	lsrs	r3, r3, #17
 8005508:	f003 030f 	and.w	r3, r3, #15
 800550c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	091b      	lsrs	r3, r3, #4
 8005512:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005516:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	2b02      	cmp	r3, #2
 800551c:	d004      	beq.n	8005528 <HCD_RXQLVL_IRQHandler+0x46>
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	2b05      	cmp	r3, #5
 8005522:	f000 80b6 	beq.w	8005692 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005526:	e0b7      	b.n	8005698 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	2b00      	cmp	r3, #0
 800552c:	f000 80b3 	beq.w	8005696 <HCD_RXQLVL_IRQHandler+0x1b4>
 8005530:	6879      	ldr	r1, [r7, #4]
 8005532:	69ba      	ldr	r2, [r7, #24]
 8005534:	4613      	mov	r3, r2
 8005536:	011b      	lsls	r3, r3, #4
 8005538:	1a9b      	subs	r3, r3, r2
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	440b      	add	r3, r1
 800553e:	332c      	adds	r3, #44	@ 0x2c
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2b00      	cmp	r3, #0
 8005544:	f000 80a7 	beq.w	8005696 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8005548:	6879      	ldr	r1, [r7, #4]
 800554a:	69ba      	ldr	r2, [r7, #24]
 800554c:	4613      	mov	r3, r2
 800554e:	011b      	lsls	r3, r3, #4
 8005550:	1a9b      	subs	r3, r3, r2
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	440b      	add	r3, r1
 8005556:	3338      	adds	r3, #56	@ 0x38
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	18d1      	adds	r1, r2, r3
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	69ba      	ldr	r2, [r7, #24]
 8005562:	4613      	mov	r3, r2
 8005564:	011b      	lsls	r3, r3, #4
 8005566:	1a9b      	subs	r3, r3, r2
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	4403      	add	r3, r0
 800556c:	3334      	adds	r3, #52	@ 0x34
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4299      	cmp	r1, r3
 8005572:	f200 8083 	bhi.w	800567c <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6818      	ldr	r0, [r3, #0]
 800557a:	6879      	ldr	r1, [r7, #4]
 800557c:	69ba      	ldr	r2, [r7, #24]
 800557e:	4613      	mov	r3, r2
 8005580:	011b      	lsls	r3, r3, #4
 8005582:	1a9b      	subs	r3, r3, r2
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	440b      	add	r3, r1
 8005588:	332c      	adds	r3, #44	@ 0x2c
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	693a      	ldr	r2, [r7, #16]
 800558e:	b292      	uxth	r2, r2
 8005590:	4619      	mov	r1, r3
 8005592:	f002 fd29 	bl	8007fe8 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8005596:	6879      	ldr	r1, [r7, #4]
 8005598:	69ba      	ldr	r2, [r7, #24]
 800559a:	4613      	mov	r3, r2
 800559c:	011b      	lsls	r3, r3, #4
 800559e:	1a9b      	subs	r3, r3, r2
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	440b      	add	r3, r1
 80055a4:	332c      	adds	r3, #44	@ 0x2c
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	18d1      	adds	r1, r2, r3
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	69ba      	ldr	r2, [r7, #24]
 80055b0:	4613      	mov	r3, r2
 80055b2:	011b      	lsls	r3, r3, #4
 80055b4:	1a9b      	subs	r3, r3, r2
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	4403      	add	r3, r0
 80055ba:	332c      	adds	r3, #44	@ 0x2c
 80055bc:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80055be:	6879      	ldr	r1, [r7, #4]
 80055c0:	69ba      	ldr	r2, [r7, #24]
 80055c2:	4613      	mov	r3, r2
 80055c4:	011b      	lsls	r3, r3, #4
 80055c6:	1a9b      	subs	r3, r3, r2
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	440b      	add	r3, r1
 80055cc:	3338      	adds	r3, #56	@ 0x38
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	18d1      	adds	r1, r2, r3
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	69ba      	ldr	r2, [r7, #24]
 80055d8:	4613      	mov	r3, r2
 80055da:	011b      	lsls	r3, r3, #4
 80055dc:	1a9b      	subs	r3, r3, r2
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	4403      	add	r3, r0
 80055e2:	3338      	adds	r3, #56	@ 0x38
 80055e4:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	015a      	lsls	r2, r3, #5
 80055ea:	6a3b      	ldr	r3, [r7, #32]
 80055ec:	4413      	add	r3, r2
 80055ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	0cdb      	lsrs	r3, r3, #19
 80055f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055fa:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80055fc:	6879      	ldr	r1, [r7, #4]
 80055fe:	69ba      	ldr	r2, [r7, #24]
 8005600:	4613      	mov	r3, r2
 8005602:	011b      	lsls	r3, r3, #4
 8005604:	1a9b      	subs	r3, r3, r2
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	440b      	add	r3, r1
 800560a:	3328      	adds	r3, #40	@ 0x28
 800560c:	881b      	ldrh	r3, [r3, #0]
 800560e:	461a      	mov	r2, r3
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	4293      	cmp	r3, r2
 8005614:	d13f      	bne.n	8005696 <HCD_RXQLVL_IRQHandler+0x1b4>
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d03c      	beq.n	8005696 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	015a      	lsls	r2, r3, #5
 8005620:	6a3b      	ldr	r3, [r7, #32]
 8005622:	4413      	add	r3, r2
 8005624:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005632:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800563a:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800563c:	69bb      	ldr	r3, [r7, #24]
 800563e:	015a      	lsls	r2, r3, #5
 8005640:	6a3b      	ldr	r3, [r7, #32]
 8005642:	4413      	add	r3, r2
 8005644:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005648:	461a      	mov	r2, r3
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800564e:	6879      	ldr	r1, [r7, #4]
 8005650:	69ba      	ldr	r2, [r7, #24]
 8005652:	4613      	mov	r3, r2
 8005654:	011b      	lsls	r3, r3, #4
 8005656:	1a9b      	subs	r3, r3, r2
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	440b      	add	r3, r1
 800565c:	333c      	adds	r3, #60	@ 0x3c
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	f083 0301 	eor.w	r3, r3, #1
 8005664:	b2d8      	uxtb	r0, r3
 8005666:	6879      	ldr	r1, [r7, #4]
 8005668:	69ba      	ldr	r2, [r7, #24]
 800566a:	4613      	mov	r3, r2
 800566c:	011b      	lsls	r3, r3, #4
 800566e:	1a9b      	subs	r3, r3, r2
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	440b      	add	r3, r1
 8005674:	333c      	adds	r3, #60	@ 0x3c
 8005676:	4602      	mov	r2, r0
 8005678:	701a      	strb	r2, [r3, #0]
      break;
 800567a:	e00c      	b.n	8005696 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800567c:	6879      	ldr	r1, [r7, #4]
 800567e:	69ba      	ldr	r2, [r7, #24]
 8005680:	4613      	mov	r3, r2
 8005682:	011b      	lsls	r3, r3, #4
 8005684:	1a9b      	subs	r3, r3, r2
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	440b      	add	r3, r1
 800568a:	334c      	adds	r3, #76	@ 0x4c
 800568c:	2204      	movs	r2, #4
 800568e:	701a      	strb	r2, [r3, #0]
      break;
 8005690:	e001      	b.n	8005696 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8005692:	bf00      	nop
 8005694:	e000      	b.n	8005698 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8005696:	bf00      	nop
  }
}
 8005698:	bf00      	nop
 800569a:	3728      	adds	r7, #40	@ 0x28
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b086      	sub	sp, #24
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80056cc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f003 0302 	and.w	r3, r3, #2
 80056d4:	2b02      	cmp	r3, #2
 80056d6:	d10b      	bne.n	80056f0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f003 0301 	and.w	r3, r3, #1
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d102      	bne.n	80056e8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f005 fdd8 	bl	800b298 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	f043 0302 	orr.w	r3, r3, #2
 80056ee:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f003 0308 	and.w	r3, r3, #8
 80056f6:	2b08      	cmp	r3, #8
 80056f8:	d132      	bne.n	8005760 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	f043 0308 	orr.w	r3, r3, #8
 8005700:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f003 0304 	and.w	r3, r3, #4
 8005708:	2b04      	cmp	r3, #4
 800570a:	d126      	bne.n	800575a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	7a5b      	ldrb	r3, [r3, #9]
 8005710:	2b02      	cmp	r3, #2
 8005712:	d113      	bne.n	800573c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800571a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800571e:	d106      	bne.n	800572e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2102      	movs	r1, #2
 8005726:	4618      	mov	r0, r3
 8005728:	f002 fdf4 	bl	8008314 <USB_InitFSLSPClkSel>
 800572c:	e011      	b.n	8005752 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2101      	movs	r1, #1
 8005734:	4618      	mov	r0, r3
 8005736:	f002 fded 	bl	8008314 <USB_InitFSLSPClkSel>
 800573a:	e00a      	b.n	8005752 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	79db      	ldrb	r3, [r3, #7]
 8005740:	2b01      	cmp	r3, #1
 8005742:	d106      	bne.n	8005752 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800574a:	461a      	mov	r2, r3
 800574c:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8005750:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f005 fdca 	bl	800b2ec <HAL_HCD_PortEnabled_Callback>
 8005758:	e002      	b.n	8005760 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f005 fdd4 	bl	800b308 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f003 0320 	and.w	r3, r3, #32
 8005766:	2b20      	cmp	r3, #32
 8005768:	d103      	bne.n	8005772 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	f043 0320 	orr.w	r3, r3, #32
 8005770:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005778:	461a      	mov	r2, r3
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	6013      	str	r3, [r2, #0]
}
 800577e:	bf00      	nop
 8005780:	3718      	adds	r7, #24
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
	...

08005788 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d101      	bne.n	800579a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e12b      	b.n	80059f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d106      	bne.n	80057b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f7fc f958 	bl	8001a64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2224      	movs	r2, #36	@ 0x24
 80057b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f022 0201 	bic.w	r2, r2, #1
 80057ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80057da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80057ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80057ec:	f001 fa20 	bl	8006c30 <HAL_RCC_GetPCLK1Freq>
 80057f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	4a81      	ldr	r2, [pc, #516]	@ (80059fc <HAL_I2C_Init+0x274>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d807      	bhi.n	800580c <HAL_I2C_Init+0x84>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	4a80      	ldr	r2, [pc, #512]	@ (8005a00 <HAL_I2C_Init+0x278>)
 8005800:	4293      	cmp	r3, r2
 8005802:	bf94      	ite	ls
 8005804:	2301      	movls	r3, #1
 8005806:	2300      	movhi	r3, #0
 8005808:	b2db      	uxtb	r3, r3
 800580a:	e006      	b.n	800581a <HAL_I2C_Init+0x92>
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	4a7d      	ldr	r2, [pc, #500]	@ (8005a04 <HAL_I2C_Init+0x27c>)
 8005810:	4293      	cmp	r3, r2
 8005812:	bf94      	ite	ls
 8005814:	2301      	movls	r3, #1
 8005816:	2300      	movhi	r3, #0
 8005818:	b2db      	uxtb	r3, r3
 800581a:	2b00      	cmp	r3, #0
 800581c:	d001      	beq.n	8005822 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e0e7      	b.n	80059f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	4a78      	ldr	r2, [pc, #480]	@ (8005a08 <HAL_I2C_Init+0x280>)
 8005826:	fba2 2303 	umull	r2, r3, r2, r3
 800582a:	0c9b      	lsrs	r3, r3, #18
 800582c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68ba      	ldr	r2, [r7, #8]
 800583e:	430a      	orrs	r2, r1
 8005840:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	6a1b      	ldr	r3, [r3, #32]
 8005848:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	4a6a      	ldr	r2, [pc, #424]	@ (80059fc <HAL_I2C_Init+0x274>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d802      	bhi.n	800585c <HAL_I2C_Init+0xd4>
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	3301      	adds	r3, #1
 800585a:	e009      	b.n	8005870 <HAL_I2C_Init+0xe8>
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005862:	fb02 f303 	mul.w	r3, r2, r3
 8005866:	4a69      	ldr	r2, [pc, #420]	@ (8005a0c <HAL_I2C_Init+0x284>)
 8005868:	fba2 2303 	umull	r2, r3, r2, r3
 800586c:	099b      	lsrs	r3, r3, #6
 800586e:	3301      	adds	r3, #1
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	6812      	ldr	r2, [r2, #0]
 8005874:	430b      	orrs	r3, r1
 8005876:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	69db      	ldr	r3, [r3, #28]
 800587e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005882:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	495c      	ldr	r1, [pc, #368]	@ (80059fc <HAL_I2C_Init+0x274>)
 800588c:	428b      	cmp	r3, r1
 800588e:	d819      	bhi.n	80058c4 <HAL_I2C_Init+0x13c>
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	1e59      	subs	r1, r3, #1
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	005b      	lsls	r3, r3, #1
 800589a:	fbb1 f3f3 	udiv	r3, r1, r3
 800589e:	1c59      	adds	r1, r3, #1
 80058a0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80058a4:	400b      	ands	r3, r1
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d00a      	beq.n	80058c0 <HAL_I2C_Init+0x138>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	1e59      	subs	r1, r3, #1
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	005b      	lsls	r3, r3, #1
 80058b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80058b8:	3301      	adds	r3, #1
 80058ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058be:	e051      	b.n	8005964 <HAL_I2C_Init+0x1dc>
 80058c0:	2304      	movs	r3, #4
 80058c2:	e04f      	b.n	8005964 <HAL_I2C_Init+0x1dc>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d111      	bne.n	80058f0 <HAL_I2C_Init+0x168>
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	1e58      	subs	r0, r3, #1
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6859      	ldr	r1, [r3, #4]
 80058d4:	460b      	mov	r3, r1
 80058d6:	005b      	lsls	r3, r3, #1
 80058d8:	440b      	add	r3, r1
 80058da:	fbb0 f3f3 	udiv	r3, r0, r3
 80058de:	3301      	adds	r3, #1
 80058e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	bf0c      	ite	eq
 80058e8:	2301      	moveq	r3, #1
 80058ea:	2300      	movne	r3, #0
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	e012      	b.n	8005916 <HAL_I2C_Init+0x18e>
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	1e58      	subs	r0, r3, #1
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6859      	ldr	r1, [r3, #4]
 80058f8:	460b      	mov	r3, r1
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	440b      	add	r3, r1
 80058fe:	0099      	lsls	r1, r3, #2
 8005900:	440b      	add	r3, r1
 8005902:	fbb0 f3f3 	udiv	r3, r0, r3
 8005906:	3301      	adds	r3, #1
 8005908:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800590c:	2b00      	cmp	r3, #0
 800590e:	bf0c      	ite	eq
 8005910:	2301      	moveq	r3, #1
 8005912:	2300      	movne	r3, #0
 8005914:	b2db      	uxtb	r3, r3
 8005916:	2b00      	cmp	r3, #0
 8005918:	d001      	beq.n	800591e <HAL_I2C_Init+0x196>
 800591a:	2301      	movs	r3, #1
 800591c:	e022      	b.n	8005964 <HAL_I2C_Init+0x1dc>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d10e      	bne.n	8005944 <HAL_I2C_Init+0x1bc>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	1e58      	subs	r0, r3, #1
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6859      	ldr	r1, [r3, #4]
 800592e:	460b      	mov	r3, r1
 8005930:	005b      	lsls	r3, r3, #1
 8005932:	440b      	add	r3, r1
 8005934:	fbb0 f3f3 	udiv	r3, r0, r3
 8005938:	3301      	adds	r3, #1
 800593a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800593e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005942:	e00f      	b.n	8005964 <HAL_I2C_Init+0x1dc>
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	1e58      	subs	r0, r3, #1
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6859      	ldr	r1, [r3, #4]
 800594c:	460b      	mov	r3, r1
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	440b      	add	r3, r1
 8005952:	0099      	lsls	r1, r3, #2
 8005954:	440b      	add	r3, r1
 8005956:	fbb0 f3f3 	udiv	r3, r0, r3
 800595a:	3301      	adds	r3, #1
 800595c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005960:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005964:	6879      	ldr	r1, [r7, #4]
 8005966:	6809      	ldr	r1, [r1, #0]
 8005968:	4313      	orrs	r3, r2
 800596a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	69da      	ldr	r2, [r3, #28]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a1b      	ldr	r3, [r3, #32]
 800597e:	431a      	orrs	r2, r3
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	430a      	orrs	r2, r1
 8005986:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005992:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	6911      	ldr	r1, [r2, #16]
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	68d2      	ldr	r2, [r2, #12]
 800599e:	4311      	orrs	r1, r2
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	6812      	ldr	r2, [r2, #0]
 80059a4:	430b      	orrs	r3, r1
 80059a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	695a      	ldr	r2, [r3, #20]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	699b      	ldr	r3, [r3, #24]
 80059ba:	431a      	orrs	r2, r3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	430a      	orrs	r2, r1
 80059c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f042 0201 	orr.w	r2, r2, #1
 80059d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2220      	movs	r2, #32
 80059de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80059f0:	2300      	movs	r3, #0
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3710      	adds	r7, #16
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	000186a0 	.word	0x000186a0
 8005a00:	001e847f 	.word	0x001e847f
 8005a04:	003d08ff 	.word	0x003d08ff
 8005a08:	431bde83 	.word	0x431bde83
 8005a0c:	10624dd3 	.word	0x10624dd3

08005a10 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b088      	sub	sp, #32
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d101      	bne.n	8005a22 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e128      	b.n	8005c74 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d109      	bne.n	8005a42 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a90      	ldr	r2, [pc, #576]	@ (8005c7c <HAL_I2S_Init+0x26c>)
 8005a3a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f7fc f859 	bl	8001af4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2202      	movs	r2, #2
 8005a46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	69db      	ldr	r3, [r3, #28]
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	6812      	ldr	r2, [r2, #0]
 8005a54:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005a58:	f023 030f 	bic.w	r3, r3, #15
 8005a5c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2202      	movs	r2, #2
 8005a64:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	695b      	ldr	r3, [r3, #20]
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	d060      	beq.n	8005b30 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d102      	bne.n	8005a7c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005a76:	2310      	movs	r3, #16
 8005a78:	617b      	str	r3, [r7, #20]
 8005a7a:	e001      	b.n	8005a80 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005a7c:	2320      	movs	r3, #32
 8005a7e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	2b20      	cmp	r3, #32
 8005a86:	d802      	bhi.n	8005a8e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	005b      	lsls	r3, r3, #1
 8005a8c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005a8e:	2001      	movs	r0, #1
 8005a90:	f001 f9c4 	bl	8006e1c <HAL_RCCEx_GetPeriphCLKFreq>
 8005a94:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a9e:	d125      	bne.n	8005aec <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d010      	beq.n	8005aca <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	4413      	add	r3, r2
 8005ab8:	005b      	lsls	r3, r3, #1
 8005aba:	461a      	mov	r2, r3
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	695b      	ldr	r3, [r3, #20]
 8005ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ac4:	3305      	adds	r3, #5
 8005ac6:	613b      	str	r3, [r7, #16]
 8005ac8:	e01f      	b.n	8005b0a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	00db      	lsls	r3, r3, #3
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	4413      	add	r3, r2
 8005ada:	005b      	lsls	r3, r3, #1
 8005adc:	461a      	mov	r2, r3
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ae6:	3305      	adds	r3, #5
 8005ae8:	613b      	str	r3, [r7, #16]
 8005aea:	e00e      	b.n	8005b0a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005aec:	68fa      	ldr	r2, [r7, #12]
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005af4:	4613      	mov	r3, r2
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	4413      	add	r3, r2
 8005afa:	005b      	lsls	r3, r3, #1
 8005afc:	461a      	mov	r2, r3
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	695b      	ldr	r3, [r3, #20]
 8005b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b06:	3305      	adds	r3, #5
 8005b08:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	4a5c      	ldr	r2, [pc, #368]	@ (8005c80 <HAL_I2S_Init+0x270>)
 8005b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b12:	08db      	lsrs	r3, r3, #3
 8005b14:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	f003 0301 	and.w	r3, r3, #1
 8005b1c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005b1e:	693a      	ldr	r2, [r7, #16]
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	1ad3      	subs	r3, r2, r3
 8005b24:	085b      	lsrs	r3, r3, #1
 8005b26:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	021b      	lsls	r3, r3, #8
 8005b2c:	61bb      	str	r3, [r7, #24]
 8005b2e:	e003      	b.n	8005b38 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005b30:	2302      	movs	r3, #2
 8005b32:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005b34:	2300      	movs	r3, #0
 8005b36:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d902      	bls.n	8005b44 <HAL_I2S_Init+0x134>
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	2bff      	cmp	r3, #255	@ 0xff
 8005b42:	d907      	bls.n	8005b54 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b48:	f043 0210 	orr.w	r2, r3, #16
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	e08f      	b.n	8005c74 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	691a      	ldr	r2, [r3, #16]
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	ea42 0103 	orr.w	r1, r2, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	69fa      	ldr	r2, [r7, #28]
 8005b64:	430a      	orrs	r2, r1
 8005b66:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	69db      	ldr	r3, [r3, #28]
 8005b6e:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005b72:	f023 030f 	bic.w	r3, r3, #15
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	6851      	ldr	r1, [r2, #4]
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	6892      	ldr	r2, [r2, #8]
 8005b7e:	4311      	orrs	r1, r2
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	68d2      	ldr	r2, [r2, #12]
 8005b84:	4311      	orrs	r1, r2
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	6992      	ldr	r2, [r2, #24]
 8005b8a:	430a      	orrs	r2, r1
 8005b8c:	431a      	orrs	r2, r3
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b96:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6a1b      	ldr	r3, [r3, #32]
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d161      	bne.n	8005c64 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a38      	ldr	r2, [pc, #224]	@ (8005c84 <HAL_I2S_Init+0x274>)
 8005ba4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a37      	ldr	r2, [pc, #220]	@ (8005c88 <HAL_I2S_Init+0x278>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d101      	bne.n	8005bb4 <HAL_I2S_Init+0x1a4>
 8005bb0:	4b36      	ldr	r3, [pc, #216]	@ (8005c8c <HAL_I2S_Init+0x27c>)
 8005bb2:	e001      	b.n	8005bb8 <HAL_I2S_Init+0x1a8>
 8005bb4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005bb8:	69db      	ldr	r3, [r3, #28]
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	6812      	ldr	r2, [r2, #0]
 8005bbe:	4932      	ldr	r1, [pc, #200]	@ (8005c88 <HAL_I2S_Init+0x278>)
 8005bc0:	428a      	cmp	r2, r1
 8005bc2:	d101      	bne.n	8005bc8 <HAL_I2S_Init+0x1b8>
 8005bc4:	4a31      	ldr	r2, [pc, #196]	@ (8005c8c <HAL_I2S_Init+0x27c>)
 8005bc6:	e001      	b.n	8005bcc <HAL_I2S_Init+0x1bc>
 8005bc8:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8005bcc:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005bd0:	f023 030f 	bic.w	r3, r3, #15
 8005bd4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a2b      	ldr	r2, [pc, #172]	@ (8005c88 <HAL_I2S_Init+0x278>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d101      	bne.n	8005be4 <HAL_I2S_Init+0x1d4>
 8005be0:	4b2a      	ldr	r3, [pc, #168]	@ (8005c8c <HAL_I2S_Init+0x27c>)
 8005be2:	e001      	b.n	8005be8 <HAL_I2S_Init+0x1d8>
 8005be4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005be8:	2202      	movs	r2, #2
 8005bea:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a25      	ldr	r2, [pc, #148]	@ (8005c88 <HAL_I2S_Init+0x278>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d101      	bne.n	8005bfa <HAL_I2S_Init+0x1ea>
 8005bf6:	4b25      	ldr	r3, [pc, #148]	@ (8005c8c <HAL_I2S_Init+0x27c>)
 8005bf8:	e001      	b.n	8005bfe <HAL_I2S_Init+0x1ee>
 8005bfa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005bfe:	69db      	ldr	r3, [r3, #28]
 8005c00:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c0a:	d003      	beq.n	8005c14 <HAL_I2S_Init+0x204>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d103      	bne.n	8005c1c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005c14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005c18:	613b      	str	r3, [r7, #16]
 8005c1a:	e001      	b.n	8005c20 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005c34:	4313      	orrs	r3, r2
 8005c36:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	699b      	ldr	r3, [r3, #24]
 8005c3c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	b29a      	uxth	r2, r3
 8005c42:	897b      	ldrh	r3, [r7, #10]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005c4c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a0d      	ldr	r2, [pc, #52]	@ (8005c88 <HAL_I2S_Init+0x278>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d101      	bne.n	8005c5c <HAL_I2S_Init+0x24c>
 8005c58:	4b0c      	ldr	r3, [pc, #48]	@ (8005c8c <HAL_I2S_Init+0x27c>)
 8005c5a:	e001      	b.n	8005c60 <HAL_I2S_Init+0x250>
 8005c5c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005c60:	897a      	ldrh	r2, [r7, #10]
 8005c62:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8005c72:	2300      	movs	r3, #0
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3720      	adds	r7, #32
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	08005d87 	.word	0x08005d87
 8005c80:	cccccccd 	.word	0xcccccccd
 8005c84:	08005e9d 	.word	0x08005e9d
 8005c88:	40003800 	.word	0x40003800
 8005c8c:	40003400 	.word	0x40003400

08005c90 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005c98:	bf00      	nop
 8005c9a:	370c      	adds	r7, #12
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005cac:	bf00      	nop
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005cc0:	bf00      	nop
 8005cc2:	370c      	adds	r7, #12
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr

08005ccc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b082      	sub	sp, #8
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cd8:	881a      	ldrh	r2, [r3, #0]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ce4:	1c9a      	adds	r2, r3, #2
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	3b01      	subs	r3, #1
 8005cf2:	b29a      	uxth	r2, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d10e      	bne.n	8005d20 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	685a      	ldr	r2, [r3, #4]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005d10:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2201      	movs	r2, #1
 8005d16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f7ff ffb8 	bl	8005c90 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005d20:	bf00      	nop
 8005d22:	3708      	adds	r7, #8
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68da      	ldr	r2, [r3, #12]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d3a:	b292      	uxth	r2, r2
 8005d3c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d42:	1c9a      	adds	r2, r3, #2
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	3b01      	subs	r3, #1
 8005d50:	b29a      	uxth	r2, r3
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d10e      	bne.n	8005d7e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	685a      	ldr	r2, [r3, #4]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005d6e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f7ff ff93 	bl	8005ca4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005d7e:	bf00      	nop
 8005d80:	3708      	adds	r7, #8
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}

08005d86 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005d86:	b580      	push	{r7, lr}
 8005d88:	b086      	sub	sp, #24
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	2b04      	cmp	r3, #4
 8005da0:	d13a      	bne.n	8005e18 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	f003 0301 	and.w	r3, r3, #1
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d109      	bne.n	8005dc0 <I2S_IRQHandler+0x3a>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005db6:	2b40      	cmp	r3, #64	@ 0x40
 8005db8:	d102      	bne.n	8005dc0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f7ff ffb4 	bl	8005d28 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dc6:	2b40      	cmp	r3, #64	@ 0x40
 8005dc8:	d126      	bne.n	8005e18 <I2S_IRQHandler+0x92>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	f003 0320 	and.w	r3, r3, #32
 8005dd4:	2b20      	cmp	r3, #32
 8005dd6:	d11f      	bne.n	8005e18 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	685a      	ldr	r2, [r3, #4]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005de6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005de8:	2300      	movs	r3, #0
 8005dea:	613b      	str	r3, [r7, #16]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	613b      	str	r3, [r7, #16]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	613b      	str	r3, [r7, #16]
 8005dfc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2201      	movs	r2, #1
 8005e02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e0a:	f043 0202 	orr.w	r2, r3, #2
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f7ff ff50 	bl	8005cb8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	2b03      	cmp	r3, #3
 8005e22:	d136      	bne.n	8005e92 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	f003 0302 	and.w	r3, r3, #2
 8005e2a:	2b02      	cmp	r3, #2
 8005e2c:	d109      	bne.n	8005e42 <I2S_IRQHandler+0xbc>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e38:	2b80      	cmp	r3, #128	@ 0x80
 8005e3a:	d102      	bne.n	8005e42 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f7ff ff45 	bl	8005ccc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	f003 0308 	and.w	r3, r3, #8
 8005e48:	2b08      	cmp	r3, #8
 8005e4a:	d122      	bne.n	8005e92 <I2S_IRQHandler+0x10c>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	f003 0320 	and.w	r3, r3, #32
 8005e56:	2b20      	cmp	r3, #32
 8005e58:	d11b      	bne.n	8005e92 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	685a      	ldr	r2, [r3, #4]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005e68:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	60fb      	str	r3, [r7, #12]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	60fb      	str	r3, [r7, #12]
 8005e76:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e84:	f043 0204 	orr.w	r2, r3, #4
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f7ff ff13 	bl	8005cb8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005e92:	bf00      	nop
 8005e94:	3718      	adds	r7, #24
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
	...

08005e9c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b088      	sub	sp, #32
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a92      	ldr	r2, [pc, #584]	@ (80060fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d101      	bne.n	8005eba <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005eb6:	4b92      	ldr	r3, [pc, #584]	@ (8006100 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005eb8:	e001      	b.n	8005ebe <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005eba:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a8b      	ldr	r2, [pc, #556]	@ (80060fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d101      	bne.n	8005ed8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005ed4:	4b8a      	ldr	r3, [pc, #552]	@ (8006100 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005ed6:	e001      	b.n	8005edc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005ed8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ee8:	d004      	beq.n	8005ef4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	f040 8099 	bne.w	8006026 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	f003 0302 	and.w	r3, r3, #2
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	d107      	bne.n	8005f0e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d002      	beq.n	8005f0e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 f925 	bl	8006158 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005f0e:	69bb      	ldr	r3, [r7, #24]
 8005f10:	f003 0301 	and.w	r3, r3, #1
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d107      	bne.n	8005f28 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d002      	beq.n	8005f28 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 f9c8 	bl	80062b8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005f28:	69bb      	ldr	r3, [r7, #24]
 8005f2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f2e:	2b40      	cmp	r3, #64	@ 0x40
 8005f30:	d13a      	bne.n	8005fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	f003 0320 	and.w	r3, r3, #32
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d035      	beq.n	8005fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a6e      	ldr	r2, [pc, #440]	@ (80060fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d101      	bne.n	8005f4a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005f46:	4b6e      	ldr	r3, [pc, #440]	@ (8006100 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005f48:	e001      	b.n	8005f4e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005f4a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005f4e:	685a      	ldr	r2, [r3, #4]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4969      	ldr	r1, [pc, #420]	@ (80060fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005f56:	428b      	cmp	r3, r1
 8005f58:	d101      	bne.n	8005f5e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005f5a:	4b69      	ldr	r3, [pc, #420]	@ (8006100 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005f5c:	e001      	b.n	8005f62 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005f5e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005f62:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005f66:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	685a      	ldr	r2, [r3, #4]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005f76:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005f78:	2300      	movs	r3, #0
 8005f7a:	60fb      	str	r3, [r7, #12]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	60fb      	str	r3, [r7, #12]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	60fb      	str	r3, [r7, #12]
 8005f8c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2201      	movs	r2, #1
 8005f92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f9a:	f043 0202 	orr.w	r2, r3, #2
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f7ff fe88 	bl	8005cb8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	f003 0308 	and.w	r3, r3, #8
 8005fae:	2b08      	cmp	r3, #8
 8005fb0:	f040 80c3 	bne.w	800613a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	f003 0320 	and.w	r3, r3, #32
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	f000 80bd 	beq.w	800613a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	685a      	ldr	r2, [r3, #4]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005fce:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a49      	ldr	r2, [pc, #292]	@ (80060fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d101      	bne.n	8005fde <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005fda:	4b49      	ldr	r3, [pc, #292]	@ (8006100 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005fdc:	e001      	b.n	8005fe2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005fde:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005fe2:	685a      	ldr	r2, [r3, #4]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4944      	ldr	r1, [pc, #272]	@ (80060fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005fea:	428b      	cmp	r3, r1
 8005fec:	d101      	bne.n	8005ff2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005fee:	4b44      	ldr	r3, [pc, #272]	@ (8006100 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005ff0:	e001      	b.n	8005ff6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005ff2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005ff6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005ffa:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	60bb      	str	r3, [r7, #8]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	60bb      	str	r3, [r7, #8]
 8006008:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2201      	movs	r2, #1
 800600e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006016:	f043 0204 	orr.w	r2, r3, #4
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f7ff fe4a 	bl	8005cb8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006024:	e089      	b.n	800613a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	f003 0302 	and.w	r3, r3, #2
 800602c:	2b02      	cmp	r3, #2
 800602e:	d107      	bne.n	8006040 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006036:	2b00      	cmp	r3, #0
 8006038:	d002      	beq.n	8006040 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 f8be 	bl	80061bc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	f003 0301 	and.w	r3, r3, #1
 8006046:	2b01      	cmp	r3, #1
 8006048:	d107      	bne.n	800605a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006050:	2b00      	cmp	r3, #0
 8006052:	d002      	beq.n	800605a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f000 f8fd 	bl	8006254 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006060:	2b40      	cmp	r3, #64	@ 0x40
 8006062:	d12f      	bne.n	80060c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	f003 0320 	and.w	r3, r3, #32
 800606a:	2b00      	cmp	r3, #0
 800606c:	d02a      	beq.n	80060c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	685a      	ldr	r2, [r3, #4]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800607c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a1e      	ldr	r2, [pc, #120]	@ (80060fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d101      	bne.n	800608c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006088:	4b1d      	ldr	r3, [pc, #116]	@ (8006100 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800608a:	e001      	b.n	8006090 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800608c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006090:	685a      	ldr	r2, [r3, #4]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4919      	ldr	r1, [pc, #100]	@ (80060fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006098:	428b      	cmp	r3, r1
 800609a:	d101      	bne.n	80060a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800609c:	4b18      	ldr	r3, [pc, #96]	@ (8006100 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800609e:	e001      	b.n	80060a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80060a0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80060a4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80060a8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2201      	movs	r2, #1
 80060ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060b6:	f043 0202 	orr.w	r2, r3, #2
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f7ff fdfa 	bl	8005cb8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80060c4:	69bb      	ldr	r3, [r7, #24]
 80060c6:	f003 0308 	and.w	r3, r3, #8
 80060ca:	2b08      	cmp	r3, #8
 80060cc:	d136      	bne.n	800613c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	f003 0320 	and.w	r3, r3, #32
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d031      	beq.n	800613c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a07      	ldr	r2, [pc, #28]	@ (80060fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d101      	bne.n	80060e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80060e2:	4b07      	ldr	r3, [pc, #28]	@ (8006100 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80060e4:	e001      	b.n	80060ea <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80060e6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80060ea:	685a      	ldr	r2, [r3, #4]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4902      	ldr	r1, [pc, #8]	@ (80060fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80060f2:	428b      	cmp	r3, r1
 80060f4:	d106      	bne.n	8006104 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80060f6:	4b02      	ldr	r3, [pc, #8]	@ (8006100 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80060f8:	e006      	b.n	8006108 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80060fa:	bf00      	nop
 80060fc:	40003800 	.word	0x40003800
 8006100:	40003400 	.word	0x40003400
 8006104:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006108:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800610c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	685a      	ldr	r2, [r3, #4]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800611c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2201      	movs	r2, #1
 8006122:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800612a:	f043 0204 	orr.w	r2, r3, #4
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f7ff fdc0 	bl	8005cb8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006138:	e000      	b.n	800613c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800613a:	bf00      	nop
}
 800613c:	bf00      	nop
 800613e:	3720      	adds	r7, #32
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800614c:	bf00      	nop
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b082      	sub	sp, #8
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006164:	1c99      	adds	r1, r3, #2
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	6251      	str	r1, [r2, #36]	@ 0x24
 800616a:	881a      	ldrh	r2, [r3, #0]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006176:	b29b      	uxth	r3, r3
 8006178:	3b01      	subs	r3, #1
 800617a:	b29a      	uxth	r2, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006184:	b29b      	uxth	r3, r3
 8006186:	2b00      	cmp	r3, #0
 8006188:	d113      	bne.n	80061b2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	685a      	ldr	r2, [r3, #4]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006198:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800619e:	b29b      	uxth	r3, r3
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d106      	bne.n	80061b2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f7ff ffc9 	bl	8006144 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80061b2:	bf00      	nop
 80061b4:	3708      	adds	r7, #8
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
	...

080061bc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061c8:	1c99      	adds	r1, r3, #2
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	6251      	str	r1, [r2, #36]	@ 0x24
 80061ce:	8819      	ldrh	r1, [r3, #0]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a1d      	ldr	r2, [pc, #116]	@ (800624c <I2SEx_TxISR_I2SExt+0x90>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d101      	bne.n	80061de <I2SEx_TxISR_I2SExt+0x22>
 80061da:	4b1d      	ldr	r3, [pc, #116]	@ (8006250 <I2SEx_TxISR_I2SExt+0x94>)
 80061dc:	e001      	b.n	80061e2 <I2SEx_TxISR_I2SExt+0x26>
 80061de:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80061e2:	460a      	mov	r2, r1
 80061e4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	3b01      	subs	r3, #1
 80061ee:	b29a      	uxth	r2, r3
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d121      	bne.n	8006242 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a12      	ldr	r2, [pc, #72]	@ (800624c <I2SEx_TxISR_I2SExt+0x90>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d101      	bne.n	800620c <I2SEx_TxISR_I2SExt+0x50>
 8006208:	4b11      	ldr	r3, [pc, #68]	@ (8006250 <I2SEx_TxISR_I2SExt+0x94>)
 800620a:	e001      	b.n	8006210 <I2SEx_TxISR_I2SExt+0x54>
 800620c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006210:	685a      	ldr	r2, [r3, #4]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	490d      	ldr	r1, [pc, #52]	@ (800624c <I2SEx_TxISR_I2SExt+0x90>)
 8006218:	428b      	cmp	r3, r1
 800621a:	d101      	bne.n	8006220 <I2SEx_TxISR_I2SExt+0x64>
 800621c:	4b0c      	ldr	r3, [pc, #48]	@ (8006250 <I2SEx_TxISR_I2SExt+0x94>)
 800621e:	e001      	b.n	8006224 <I2SEx_TxISR_I2SExt+0x68>
 8006220:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006224:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006228:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800622e:	b29b      	uxth	r3, r3
 8006230:	2b00      	cmp	r3, #0
 8006232:	d106      	bne.n	8006242 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f7ff ff81 	bl	8006144 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006242:	bf00      	nop
 8006244:	3708      	adds	r7, #8
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop
 800624c:	40003800 	.word	0x40003800
 8006250:	40003400 	.word	0x40003400

08006254 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b082      	sub	sp, #8
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	68d8      	ldr	r0, [r3, #12]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006266:	1c99      	adds	r1, r3, #2
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800626c:	b282      	uxth	r2, r0
 800626e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006274:	b29b      	uxth	r3, r3
 8006276:	3b01      	subs	r3, #1
 8006278:	b29a      	uxth	r2, r3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006282:	b29b      	uxth	r3, r3
 8006284:	2b00      	cmp	r3, #0
 8006286:	d113      	bne.n	80062b0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	685a      	ldr	r2, [r3, #4]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006296:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800629c:	b29b      	uxth	r3, r3
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d106      	bne.n	80062b0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2201      	movs	r2, #1
 80062a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f7ff ff4a 	bl	8006144 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80062b0:	bf00      	nop
 80062b2:	3708      	adds	r7, #8
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}

080062b8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a20      	ldr	r2, [pc, #128]	@ (8006348 <I2SEx_RxISR_I2SExt+0x90>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d101      	bne.n	80062ce <I2SEx_RxISR_I2SExt+0x16>
 80062ca:	4b20      	ldr	r3, [pc, #128]	@ (800634c <I2SEx_RxISR_I2SExt+0x94>)
 80062cc:	e001      	b.n	80062d2 <I2SEx_RxISR_I2SExt+0x1a>
 80062ce:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80062d2:	68d8      	ldr	r0, [r3, #12]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062d8:	1c99      	adds	r1, r3, #2
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80062de:	b282      	uxth	r2, r0
 80062e0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	3b01      	subs	r3, #1
 80062ea:	b29a      	uxth	r2, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d121      	bne.n	800633e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a12      	ldr	r2, [pc, #72]	@ (8006348 <I2SEx_RxISR_I2SExt+0x90>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d101      	bne.n	8006308 <I2SEx_RxISR_I2SExt+0x50>
 8006304:	4b11      	ldr	r3, [pc, #68]	@ (800634c <I2SEx_RxISR_I2SExt+0x94>)
 8006306:	e001      	b.n	800630c <I2SEx_RxISR_I2SExt+0x54>
 8006308:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800630c:	685a      	ldr	r2, [r3, #4]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	490d      	ldr	r1, [pc, #52]	@ (8006348 <I2SEx_RxISR_I2SExt+0x90>)
 8006314:	428b      	cmp	r3, r1
 8006316:	d101      	bne.n	800631c <I2SEx_RxISR_I2SExt+0x64>
 8006318:	4b0c      	ldr	r3, [pc, #48]	@ (800634c <I2SEx_RxISR_I2SExt+0x94>)
 800631a:	e001      	b.n	8006320 <I2SEx_RxISR_I2SExt+0x68>
 800631c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006320:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006324:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800632a:	b29b      	uxth	r3, r3
 800632c:	2b00      	cmp	r3, #0
 800632e:	d106      	bne.n	800633e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f7ff ff03 	bl	8006144 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800633e:	bf00      	nop
 8006340:	3708      	adds	r7, #8
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	40003800 	.word	0x40003800
 800634c:	40003400 	.word	0x40003400

08006350 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b086      	sub	sp, #24
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d101      	bne.n	8006362 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e267      	b.n	8006832 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 0301 	and.w	r3, r3, #1
 800636a:	2b00      	cmp	r3, #0
 800636c:	d075      	beq.n	800645a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800636e:	4b88      	ldr	r3, [pc, #544]	@ (8006590 <HAL_RCC_OscConfig+0x240>)
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	f003 030c 	and.w	r3, r3, #12
 8006376:	2b04      	cmp	r3, #4
 8006378:	d00c      	beq.n	8006394 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800637a:	4b85      	ldr	r3, [pc, #532]	@ (8006590 <HAL_RCC_OscConfig+0x240>)
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006382:	2b08      	cmp	r3, #8
 8006384:	d112      	bne.n	80063ac <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006386:	4b82      	ldr	r3, [pc, #520]	@ (8006590 <HAL_RCC_OscConfig+0x240>)
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800638e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006392:	d10b      	bne.n	80063ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006394:	4b7e      	ldr	r3, [pc, #504]	@ (8006590 <HAL_RCC_OscConfig+0x240>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800639c:	2b00      	cmp	r3, #0
 800639e:	d05b      	beq.n	8006458 <HAL_RCC_OscConfig+0x108>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d157      	bne.n	8006458 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	e242      	b.n	8006832 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063b4:	d106      	bne.n	80063c4 <HAL_RCC_OscConfig+0x74>
 80063b6:	4b76      	ldr	r3, [pc, #472]	@ (8006590 <HAL_RCC_OscConfig+0x240>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a75      	ldr	r2, [pc, #468]	@ (8006590 <HAL_RCC_OscConfig+0x240>)
 80063bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063c0:	6013      	str	r3, [r2, #0]
 80063c2:	e01d      	b.n	8006400 <HAL_RCC_OscConfig+0xb0>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80063cc:	d10c      	bne.n	80063e8 <HAL_RCC_OscConfig+0x98>
 80063ce:	4b70      	ldr	r3, [pc, #448]	@ (8006590 <HAL_RCC_OscConfig+0x240>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a6f      	ldr	r2, [pc, #444]	@ (8006590 <HAL_RCC_OscConfig+0x240>)
 80063d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80063d8:	6013      	str	r3, [r2, #0]
 80063da:	4b6d      	ldr	r3, [pc, #436]	@ (8006590 <HAL_RCC_OscConfig+0x240>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a6c      	ldr	r2, [pc, #432]	@ (8006590 <HAL_RCC_OscConfig+0x240>)
 80063e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063e4:	6013      	str	r3, [r2, #0]
 80063e6:	e00b      	b.n	8006400 <HAL_RCC_OscConfig+0xb0>
 80063e8:	4b69      	ldr	r3, [pc, #420]	@ (8006590 <HAL_RCC_OscConfig+0x240>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a68      	ldr	r2, [pc, #416]	@ (8006590 <HAL_RCC_OscConfig+0x240>)
 80063ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063f2:	6013      	str	r3, [r2, #0]
 80063f4:	4b66      	ldr	r3, [pc, #408]	@ (8006590 <HAL_RCC_OscConfig+0x240>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a65      	ldr	r2, [pc, #404]	@ (8006590 <HAL_RCC_OscConfig+0x240>)
 80063fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80063fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d013      	beq.n	8006430 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006408:	f7fb fdbe 	bl	8001f88 <HAL_GetTick>
 800640c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800640e:	e008      	b.n	8006422 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006410:	f7fb fdba 	bl	8001f88 <HAL_GetTick>
 8006414:	4602      	mov	r2, r0
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	1ad3      	subs	r3, r2, r3
 800641a:	2b64      	cmp	r3, #100	@ 0x64
 800641c:	d901      	bls.n	8006422 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800641e:	2303      	movs	r3, #3
 8006420:	e207      	b.n	8006832 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006422:	4b5b      	ldr	r3, [pc, #364]	@ (8006590 <HAL_RCC_OscConfig+0x240>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800642a:	2b00      	cmp	r3, #0
 800642c:	d0f0      	beq.n	8006410 <HAL_RCC_OscConfig+0xc0>
 800642e:	e014      	b.n	800645a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006430:	f7fb fdaa 	bl	8001f88 <HAL_GetTick>
 8006434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006436:	e008      	b.n	800644a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006438:	f7fb fda6 	bl	8001f88 <HAL_GetTick>
 800643c:	4602      	mov	r2, r0
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	1ad3      	subs	r3, r2, r3
 8006442:	2b64      	cmp	r3, #100	@ 0x64
 8006444:	d901      	bls.n	800644a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006446:	2303      	movs	r3, #3
 8006448:	e1f3      	b.n	8006832 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800644a:	4b51      	ldr	r3, [pc, #324]	@ (8006590 <HAL_RCC_OscConfig+0x240>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006452:	2b00      	cmp	r3, #0
 8006454:	d1f0      	bne.n	8006438 <HAL_RCC_OscConfig+0xe8>
 8006456:	e000      	b.n	800645a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006458:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f003 0302 	and.w	r3, r3, #2
 8006462:	2b00      	cmp	r3, #0
 8006464:	d063      	beq.n	800652e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006466:	4b4a      	ldr	r3, [pc, #296]	@ (8006590 <HAL_RCC_OscConfig+0x240>)
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	f003 030c 	and.w	r3, r3, #12
 800646e:	2b00      	cmp	r3, #0
 8006470:	d00b      	beq.n	800648a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006472:	4b47      	ldr	r3, [pc, #284]	@ (8006590 <HAL_RCC_OscConfig+0x240>)
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800647a:	2b08      	cmp	r3, #8
 800647c:	d11c      	bne.n	80064b8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800647e:	4b44      	ldr	r3, [pc, #272]	@ (8006590 <HAL_RCC_OscConfig+0x240>)
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006486:	2b00      	cmp	r3, #0
 8006488:	d116      	bne.n	80064b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800648a:	4b41      	ldr	r3, [pc, #260]	@ (8006590 <HAL_RCC_OscConfig+0x240>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 0302 	and.w	r3, r3, #2
 8006492:	2b00      	cmp	r3, #0
 8006494:	d005      	beq.n	80064a2 <HAL_RCC_OscConfig+0x152>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	2b01      	cmp	r3, #1
 800649c:	d001      	beq.n	80064a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e1c7      	b.n	8006832 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064a2:	4b3b      	ldr	r3, [pc, #236]	@ (8006590 <HAL_RCC_OscConfig+0x240>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	00db      	lsls	r3, r3, #3
 80064b0:	4937      	ldr	r1, [pc, #220]	@ (8006590 <HAL_RCC_OscConfig+0x240>)
 80064b2:	4313      	orrs	r3, r2
 80064b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064b6:	e03a      	b.n	800652e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d020      	beq.n	8006502 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064c0:	4b34      	ldr	r3, [pc, #208]	@ (8006594 <HAL_RCC_OscConfig+0x244>)
 80064c2:	2201      	movs	r2, #1
 80064c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064c6:	f7fb fd5f 	bl	8001f88 <HAL_GetTick>
 80064ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064cc:	e008      	b.n	80064e0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064ce:	f7fb fd5b 	bl	8001f88 <HAL_GetTick>
 80064d2:	4602      	mov	r2, r0
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	1ad3      	subs	r3, r2, r3
 80064d8:	2b02      	cmp	r3, #2
 80064da:	d901      	bls.n	80064e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80064dc:	2303      	movs	r3, #3
 80064de:	e1a8      	b.n	8006832 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064e0:	4b2b      	ldr	r3, [pc, #172]	@ (8006590 <HAL_RCC_OscConfig+0x240>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 0302 	and.w	r3, r3, #2
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d0f0      	beq.n	80064ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064ec:	4b28      	ldr	r3, [pc, #160]	@ (8006590 <HAL_RCC_OscConfig+0x240>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	691b      	ldr	r3, [r3, #16]
 80064f8:	00db      	lsls	r3, r3, #3
 80064fa:	4925      	ldr	r1, [pc, #148]	@ (8006590 <HAL_RCC_OscConfig+0x240>)
 80064fc:	4313      	orrs	r3, r2
 80064fe:	600b      	str	r3, [r1, #0]
 8006500:	e015      	b.n	800652e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006502:	4b24      	ldr	r3, [pc, #144]	@ (8006594 <HAL_RCC_OscConfig+0x244>)
 8006504:	2200      	movs	r2, #0
 8006506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006508:	f7fb fd3e 	bl	8001f88 <HAL_GetTick>
 800650c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800650e:	e008      	b.n	8006522 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006510:	f7fb fd3a 	bl	8001f88 <HAL_GetTick>
 8006514:	4602      	mov	r2, r0
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	1ad3      	subs	r3, r2, r3
 800651a:	2b02      	cmp	r3, #2
 800651c:	d901      	bls.n	8006522 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800651e:	2303      	movs	r3, #3
 8006520:	e187      	b.n	8006832 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006522:	4b1b      	ldr	r3, [pc, #108]	@ (8006590 <HAL_RCC_OscConfig+0x240>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f003 0302 	and.w	r3, r3, #2
 800652a:	2b00      	cmp	r3, #0
 800652c:	d1f0      	bne.n	8006510 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f003 0308 	and.w	r3, r3, #8
 8006536:	2b00      	cmp	r3, #0
 8006538:	d036      	beq.n	80065a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	695b      	ldr	r3, [r3, #20]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d016      	beq.n	8006570 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006542:	4b15      	ldr	r3, [pc, #84]	@ (8006598 <HAL_RCC_OscConfig+0x248>)
 8006544:	2201      	movs	r2, #1
 8006546:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006548:	f7fb fd1e 	bl	8001f88 <HAL_GetTick>
 800654c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800654e:	e008      	b.n	8006562 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006550:	f7fb fd1a 	bl	8001f88 <HAL_GetTick>
 8006554:	4602      	mov	r2, r0
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	2b02      	cmp	r3, #2
 800655c:	d901      	bls.n	8006562 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800655e:	2303      	movs	r3, #3
 8006560:	e167      	b.n	8006832 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006562:	4b0b      	ldr	r3, [pc, #44]	@ (8006590 <HAL_RCC_OscConfig+0x240>)
 8006564:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006566:	f003 0302 	and.w	r3, r3, #2
 800656a:	2b00      	cmp	r3, #0
 800656c:	d0f0      	beq.n	8006550 <HAL_RCC_OscConfig+0x200>
 800656e:	e01b      	b.n	80065a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006570:	4b09      	ldr	r3, [pc, #36]	@ (8006598 <HAL_RCC_OscConfig+0x248>)
 8006572:	2200      	movs	r2, #0
 8006574:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006576:	f7fb fd07 	bl	8001f88 <HAL_GetTick>
 800657a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800657c:	e00e      	b.n	800659c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800657e:	f7fb fd03 	bl	8001f88 <HAL_GetTick>
 8006582:	4602      	mov	r2, r0
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	1ad3      	subs	r3, r2, r3
 8006588:	2b02      	cmp	r3, #2
 800658a:	d907      	bls.n	800659c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800658c:	2303      	movs	r3, #3
 800658e:	e150      	b.n	8006832 <HAL_RCC_OscConfig+0x4e2>
 8006590:	40023800 	.word	0x40023800
 8006594:	42470000 	.word	0x42470000
 8006598:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800659c:	4b88      	ldr	r3, [pc, #544]	@ (80067c0 <HAL_RCC_OscConfig+0x470>)
 800659e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065a0:	f003 0302 	and.w	r3, r3, #2
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d1ea      	bne.n	800657e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 0304 	and.w	r3, r3, #4
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	f000 8097 	beq.w	80066e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065b6:	2300      	movs	r3, #0
 80065b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065ba:	4b81      	ldr	r3, [pc, #516]	@ (80067c0 <HAL_RCC_OscConfig+0x470>)
 80065bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d10f      	bne.n	80065e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065c6:	2300      	movs	r3, #0
 80065c8:	60bb      	str	r3, [r7, #8]
 80065ca:	4b7d      	ldr	r3, [pc, #500]	@ (80067c0 <HAL_RCC_OscConfig+0x470>)
 80065cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ce:	4a7c      	ldr	r2, [pc, #496]	@ (80067c0 <HAL_RCC_OscConfig+0x470>)
 80065d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80065d6:	4b7a      	ldr	r3, [pc, #488]	@ (80067c0 <HAL_RCC_OscConfig+0x470>)
 80065d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065de:	60bb      	str	r3, [r7, #8]
 80065e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065e2:	2301      	movs	r3, #1
 80065e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065e6:	4b77      	ldr	r3, [pc, #476]	@ (80067c4 <HAL_RCC_OscConfig+0x474>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d118      	bne.n	8006624 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80065f2:	4b74      	ldr	r3, [pc, #464]	@ (80067c4 <HAL_RCC_OscConfig+0x474>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a73      	ldr	r2, [pc, #460]	@ (80067c4 <HAL_RCC_OscConfig+0x474>)
 80065f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065fe:	f7fb fcc3 	bl	8001f88 <HAL_GetTick>
 8006602:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006604:	e008      	b.n	8006618 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006606:	f7fb fcbf 	bl	8001f88 <HAL_GetTick>
 800660a:	4602      	mov	r2, r0
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	1ad3      	subs	r3, r2, r3
 8006610:	2b02      	cmp	r3, #2
 8006612:	d901      	bls.n	8006618 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006614:	2303      	movs	r3, #3
 8006616:	e10c      	b.n	8006832 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006618:	4b6a      	ldr	r3, [pc, #424]	@ (80067c4 <HAL_RCC_OscConfig+0x474>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006620:	2b00      	cmp	r3, #0
 8006622:	d0f0      	beq.n	8006606 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	2b01      	cmp	r3, #1
 800662a:	d106      	bne.n	800663a <HAL_RCC_OscConfig+0x2ea>
 800662c:	4b64      	ldr	r3, [pc, #400]	@ (80067c0 <HAL_RCC_OscConfig+0x470>)
 800662e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006630:	4a63      	ldr	r2, [pc, #396]	@ (80067c0 <HAL_RCC_OscConfig+0x470>)
 8006632:	f043 0301 	orr.w	r3, r3, #1
 8006636:	6713      	str	r3, [r2, #112]	@ 0x70
 8006638:	e01c      	b.n	8006674 <HAL_RCC_OscConfig+0x324>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	2b05      	cmp	r3, #5
 8006640:	d10c      	bne.n	800665c <HAL_RCC_OscConfig+0x30c>
 8006642:	4b5f      	ldr	r3, [pc, #380]	@ (80067c0 <HAL_RCC_OscConfig+0x470>)
 8006644:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006646:	4a5e      	ldr	r2, [pc, #376]	@ (80067c0 <HAL_RCC_OscConfig+0x470>)
 8006648:	f043 0304 	orr.w	r3, r3, #4
 800664c:	6713      	str	r3, [r2, #112]	@ 0x70
 800664e:	4b5c      	ldr	r3, [pc, #368]	@ (80067c0 <HAL_RCC_OscConfig+0x470>)
 8006650:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006652:	4a5b      	ldr	r2, [pc, #364]	@ (80067c0 <HAL_RCC_OscConfig+0x470>)
 8006654:	f043 0301 	orr.w	r3, r3, #1
 8006658:	6713      	str	r3, [r2, #112]	@ 0x70
 800665a:	e00b      	b.n	8006674 <HAL_RCC_OscConfig+0x324>
 800665c:	4b58      	ldr	r3, [pc, #352]	@ (80067c0 <HAL_RCC_OscConfig+0x470>)
 800665e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006660:	4a57      	ldr	r2, [pc, #348]	@ (80067c0 <HAL_RCC_OscConfig+0x470>)
 8006662:	f023 0301 	bic.w	r3, r3, #1
 8006666:	6713      	str	r3, [r2, #112]	@ 0x70
 8006668:	4b55      	ldr	r3, [pc, #340]	@ (80067c0 <HAL_RCC_OscConfig+0x470>)
 800666a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800666c:	4a54      	ldr	r2, [pc, #336]	@ (80067c0 <HAL_RCC_OscConfig+0x470>)
 800666e:	f023 0304 	bic.w	r3, r3, #4
 8006672:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d015      	beq.n	80066a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800667c:	f7fb fc84 	bl	8001f88 <HAL_GetTick>
 8006680:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006682:	e00a      	b.n	800669a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006684:	f7fb fc80 	bl	8001f88 <HAL_GetTick>
 8006688:	4602      	mov	r2, r0
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	1ad3      	subs	r3, r2, r3
 800668e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006692:	4293      	cmp	r3, r2
 8006694:	d901      	bls.n	800669a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006696:	2303      	movs	r3, #3
 8006698:	e0cb      	b.n	8006832 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800669a:	4b49      	ldr	r3, [pc, #292]	@ (80067c0 <HAL_RCC_OscConfig+0x470>)
 800669c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800669e:	f003 0302 	and.w	r3, r3, #2
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d0ee      	beq.n	8006684 <HAL_RCC_OscConfig+0x334>
 80066a6:	e014      	b.n	80066d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066a8:	f7fb fc6e 	bl	8001f88 <HAL_GetTick>
 80066ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066ae:	e00a      	b.n	80066c6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066b0:	f7fb fc6a 	bl	8001f88 <HAL_GetTick>
 80066b4:	4602      	mov	r2, r0
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066be:	4293      	cmp	r3, r2
 80066c0:	d901      	bls.n	80066c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80066c2:	2303      	movs	r3, #3
 80066c4:	e0b5      	b.n	8006832 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066c6:	4b3e      	ldr	r3, [pc, #248]	@ (80067c0 <HAL_RCC_OscConfig+0x470>)
 80066c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066ca:	f003 0302 	and.w	r3, r3, #2
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d1ee      	bne.n	80066b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80066d2:	7dfb      	ldrb	r3, [r7, #23]
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d105      	bne.n	80066e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066d8:	4b39      	ldr	r3, [pc, #228]	@ (80067c0 <HAL_RCC_OscConfig+0x470>)
 80066da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066dc:	4a38      	ldr	r2, [pc, #224]	@ (80067c0 <HAL_RCC_OscConfig+0x470>)
 80066de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80066e2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	699b      	ldr	r3, [r3, #24]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	f000 80a1 	beq.w	8006830 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80066ee:	4b34      	ldr	r3, [pc, #208]	@ (80067c0 <HAL_RCC_OscConfig+0x470>)
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	f003 030c 	and.w	r3, r3, #12
 80066f6:	2b08      	cmp	r3, #8
 80066f8:	d05c      	beq.n	80067b4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	699b      	ldr	r3, [r3, #24]
 80066fe:	2b02      	cmp	r3, #2
 8006700:	d141      	bne.n	8006786 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006702:	4b31      	ldr	r3, [pc, #196]	@ (80067c8 <HAL_RCC_OscConfig+0x478>)
 8006704:	2200      	movs	r2, #0
 8006706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006708:	f7fb fc3e 	bl	8001f88 <HAL_GetTick>
 800670c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800670e:	e008      	b.n	8006722 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006710:	f7fb fc3a 	bl	8001f88 <HAL_GetTick>
 8006714:	4602      	mov	r2, r0
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	1ad3      	subs	r3, r2, r3
 800671a:	2b02      	cmp	r3, #2
 800671c:	d901      	bls.n	8006722 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800671e:	2303      	movs	r3, #3
 8006720:	e087      	b.n	8006832 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006722:	4b27      	ldr	r3, [pc, #156]	@ (80067c0 <HAL_RCC_OscConfig+0x470>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800672a:	2b00      	cmp	r3, #0
 800672c:	d1f0      	bne.n	8006710 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	69da      	ldr	r2, [r3, #28]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a1b      	ldr	r3, [r3, #32]
 8006736:	431a      	orrs	r2, r3
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800673c:	019b      	lsls	r3, r3, #6
 800673e:	431a      	orrs	r2, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006744:	085b      	lsrs	r3, r3, #1
 8006746:	3b01      	subs	r3, #1
 8006748:	041b      	lsls	r3, r3, #16
 800674a:	431a      	orrs	r2, r3
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006750:	061b      	lsls	r3, r3, #24
 8006752:	491b      	ldr	r1, [pc, #108]	@ (80067c0 <HAL_RCC_OscConfig+0x470>)
 8006754:	4313      	orrs	r3, r2
 8006756:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006758:	4b1b      	ldr	r3, [pc, #108]	@ (80067c8 <HAL_RCC_OscConfig+0x478>)
 800675a:	2201      	movs	r2, #1
 800675c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800675e:	f7fb fc13 	bl	8001f88 <HAL_GetTick>
 8006762:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006764:	e008      	b.n	8006778 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006766:	f7fb fc0f 	bl	8001f88 <HAL_GetTick>
 800676a:	4602      	mov	r2, r0
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	1ad3      	subs	r3, r2, r3
 8006770:	2b02      	cmp	r3, #2
 8006772:	d901      	bls.n	8006778 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006774:	2303      	movs	r3, #3
 8006776:	e05c      	b.n	8006832 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006778:	4b11      	ldr	r3, [pc, #68]	@ (80067c0 <HAL_RCC_OscConfig+0x470>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006780:	2b00      	cmp	r3, #0
 8006782:	d0f0      	beq.n	8006766 <HAL_RCC_OscConfig+0x416>
 8006784:	e054      	b.n	8006830 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006786:	4b10      	ldr	r3, [pc, #64]	@ (80067c8 <HAL_RCC_OscConfig+0x478>)
 8006788:	2200      	movs	r2, #0
 800678a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800678c:	f7fb fbfc 	bl	8001f88 <HAL_GetTick>
 8006790:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006792:	e008      	b.n	80067a6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006794:	f7fb fbf8 	bl	8001f88 <HAL_GetTick>
 8006798:	4602      	mov	r2, r0
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	1ad3      	subs	r3, r2, r3
 800679e:	2b02      	cmp	r3, #2
 80067a0:	d901      	bls.n	80067a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80067a2:	2303      	movs	r3, #3
 80067a4:	e045      	b.n	8006832 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067a6:	4b06      	ldr	r3, [pc, #24]	@ (80067c0 <HAL_RCC_OscConfig+0x470>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d1f0      	bne.n	8006794 <HAL_RCC_OscConfig+0x444>
 80067b2:	e03d      	b.n	8006830 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	699b      	ldr	r3, [r3, #24]
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d107      	bne.n	80067cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80067bc:	2301      	movs	r3, #1
 80067be:	e038      	b.n	8006832 <HAL_RCC_OscConfig+0x4e2>
 80067c0:	40023800 	.word	0x40023800
 80067c4:	40007000 	.word	0x40007000
 80067c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80067cc:	4b1b      	ldr	r3, [pc, #108]	@ (800683c <HAL_RCC_OscConfig+0x4ec>)
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	699b      	ldr	r3, [r3, #24]
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d028      	beq.n	800682c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d121      	bne.n	800682c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d11a      	bne.n	800682c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80067f6:	68fa      	ldr	r2, [r7, #12]
 80067f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80067fc:	4013      	ands	r3, r2
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006802:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006804:	4293      	cmp	r3, r2
 8006806:	d111      	bne.n	800682c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006812:	085b      	lsrs	r3, r3, #1
 8006814:	3b01      	subs	r3, #1
 8006816:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006818:	429a      	cmp	r2, r3
 800681a:	d107      	bne.n	800682c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006826:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006828:	429a      	cmp	r2, r3
 800682a:	d001      	beq.n	8006830 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	e000      	b.n	8006832 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006830:	2300      	movs	r3, #0
}
 8006832:	4618      	mov	r0, r3
 8006834:	3718      	adds	r7, #24
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
 800683a:	bf00      	nop
 800683c:	40023800 	.word	0x40023800

08006840 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b084      	sub	sp, #16
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d101      	bne.n	8006854 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	e0cc      	b.n	80069ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006854:	4b68      	ldr	r3, [pc, #416]	@ (80069f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f003 0307 	and.w	r3, r3, #7
 800685c:	683a      	ldr	r2, [r7, #0]
 800685e:	429a      	cmp	r2, r3
 8006860:	d90c      	bls.n	800687c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006862:	4b65      	ldr	r3, [pc, #404]	@ (80069f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006864:	683a      	ldr	r2, [r7, #0]
 8006866:	b2d2      	uxtb	r2, r2
 8006868:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800686a:	4b63      	ldr	r3, [pc, #396]	@ (80069f8 <HAL_RCC_ClockConfig+0x1b8>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f003 0307 	and.w	r3, r3, #7
 8006872:	683a      	ldr	r2, [r7, #0]
 8006874:	429a      	cmp	r2, r3
 8006876:	d001      	beq.n	800687c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	e0b8      	b.n	80069ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 0302 	and.w	r3, r3, #2
 8006884:	2b00      	cmp	r3, #0
 8006886:	d020      	beq.n	80068ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f003 0304 	and.w	r3, r3, #4
 8006890:	2b00      	cmp	r3, #0
 8006892:	d005      	beq.n	80068a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006894:	4b59      	ldr	r3, [pc, #356]	@ (80069fc <HAL_RCC_ClockConfig+0x1bc>)
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	4a58      	ldr	r2, [pc, #352]	@ (80069fc <HAL_RCC_ClockConfig+0x1bc>)
 800689a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800689e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 0308 	and.w	r3, r3, #8
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d005      	beq.n	80068b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80068ac:	4b53      	ldr	r3, [pc, #332]	@ (80069fc <HAL_RCC_ClockConfig+0x1bc>)
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	4a52      	ldr	r2, [pc, #328]	@ (80069fc <HAL_RCC_ClockConfig+0x1bc>)
 80068b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80068b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068b8:	4b50      	ldr	r3, [pc, #320]	@ (80069fc <HAL_RCC_ClockConfig+0x1bc>)
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	494d      	ldr	r1, [pc, #308]	@ (80069fc <HAL_RCC_ClockConfig+0x1bc>)
 80068c6:	4313      	orrs	r3, r2
 80068c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f003 0301 	and.w	r3, r3, #1
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d044      	beq.n	8006960 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d107      	bne.n	80068ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068de:	4b47      	ldr	r3, [pc, #284]	@ (80069fc <HAL_RCC_ClockConfig+0x1bc>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d119      	bne.n	800691e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	e07f      	b.n	80069ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	2b02      	cmp	r3, #2
 80068f4:	d003      	beq.n	80068fe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80068fa:	2b03      	cmp	r3, #3
 80068fc:	d107      	bne.n	800690e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068fe:	4b3f      	ldr	r3, [pc, #252]	@ (80069fc <HAL_RCC_ClockConfig+0x1bc>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006906:	2b00      	cmp	r3, #0
 8006908:	d109      	bne.n	800691e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e06f      	b.n	80069ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800690e:	4b3b      	ldr	r3, [pc, #236]	@ (80069fc <HAL_RCC_ClockConfig+0x1bc>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f003 0302 	and.w	r3, r3, #2
 8006916:	2b00      	cmp	r3, #0
 8006918:	d101      	bne.n	800691e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	e067      	b.n	80069ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800691e:	4b37      	ldr	r3, [pc, #220]	@ (80069fc <HAL_RCC_ClockConfig+0x1bc>)
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	f023 0203 	bic.w	r2, r3, #3
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	4934      	ldr	r1, [pc, #208]	@ (80069fc <HAL_RCC_ClockConfig+0x1bc>)
 800692c:	4313      	orrs	r3, r2
 800692e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006930:	f7fb fb2a 	bl	8001f88 <HAL_GetTick>
 8006934:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006936:	e00a      	b.n	800694e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006938:	f7fb fb26 	bl	8001f88 <HAL_GetTick>
 800693c:	4602      	mov	r2, r0
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	1ad3      	subs	r3, r2, r3
 8006942:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006946:	4293      	cmp	r3, r2
 8006948:	d901      	bls.n	800694e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800694a:	2303      	movs	r3, #3
 800694c:	e04f      	b.n	80069ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800694e:	4b2b      	ldr	r3, [pc, #172]	@ (80069fc <HAL_RCC_ClockConfig+0x1bc>)
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	f003 020c 	and.w	r2, r3, #12
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	429a      	cmp	r2, r3
 800695e:	d1eb      	bne.n	8006938 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006960:	4b25      	ldr	r3, [pc, #148]	@ (80069f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f003 0307 	and.w	r3, r3, #7
 8006968:	683a      	ldr	r2, [r7, #0]
 800696a:	429a      	cmp	r2, r3
 800696c:	d20c      	bcs.n	8006988 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800696e:	4b22      	ldr	r3, [pc, #136]	@ (80069f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006970:	683a      	ldr	r2, [r7, #0]
 8006972:	b2d2      	uxtb	r2, r2
 8006974:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006976:	4b20      	ldr	r3, [pc, #128]	@ (80069f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f003 0307 	and.w	r3, r3, #7
 800697e:	683a      	ldr	r2, [r7, #0]
 8006980:	429a      	cmp	r2, r3
 8006982:	d001      	beq.n	8006988 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006984:	2301      	movs	r3, #1
 8006986:	e032      	b.n	80069ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 0304 	and.w	r3, r3, #4
 8006990:	2b00      	cmp	r3, #0
 8006992:	d008      	beq.n	80069a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006994:	4b19      	ldr	r3, [pc, #100]	@ (80069fc <HAL_RCC_ClockConfig+0x1bc>)
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	4916      	ldr	r1, [pc, #88]	@ (80069fc <HAL_RCC_ClockConfig+0x1bc>)
 80069a2:	4313      	orrs	r3, r2
 80069a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f003 0308 	and.w	r3, r3, #8
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d009      	beq.n	80069c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80069b2:	4b12      	ldr	r3, [pc, #72]	@ (80069fc <HAL_RCC_ClockConfig+0x1bc>)
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	691b      	ldr	r3, [r3, #16]
 80069be:	00db      	lsls	r3, r3, #3
 80069c0:	490e      	ldr	r1, [pc, #56]	@ (80069fc <HAL_RCC_ClockConfig+0x1bc>)
 80069c2:	4313      	orrs	r3, r2
 80069c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80069c6:	f000 f821 	bl	8006a0c <HAL_RCC_GetSysClockFreq>
 80069ca:	4602      	mov	r2, r0
 80069cc:	4b0b      	ldr	r3, [pc, #44]	@ (80069fc <HAL_RCC_ClockConfig+0x1bc>)
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	091b      	lsrs	r3, r3, #4
 80069d2:	f003 030f 	and.w	r3, r3, #15
 80069d6:	490a      	ldr	r1, [pc, #40]	@ (8006a00 <HAL_RCC_ClockConfig+0x1c0>)
 80069d8:	5ccb      	ldrb	r3, [r1, r3]
 80069da:	fa22 f303 	lsr.w	r3, r2, r3
 80069de:	4a09      	ldr	r2, [pc, #36]	@ (8006a04 <HAL_RCC_ClockConfig+0x1c4>)
 80069e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80069e2:	4b09      	ldr	r3, [pc, #36]	@ (8006a08 <HAL_RCC_ClockConfig+0x1c8>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4618      	mov	r0, r3
 80069e8:	f7fb fa8a 	bl	8001f00 <HAL_InitTick>

  return HAL_OK;
 80069ec:	2300      	movs	r3, #0
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3710      	adds	r7, #16
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop
 80069f8:	40023c00 	.word	0x40023c00
 80069fc:	40023800 	.word	0x40023800
 8006a00:	0800b9c4 	.word	0x0800b9c4
 8006a04:	20000014 	.word	0x20000014
 8006a08:	20000018 	.word	0x20000018

08006a0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a10:	b094      	sub	sp, #80	@ 0x50
 8006a12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006a14:	2300      	movs	r3, #0
 8006a16:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006a20:	2300      	movs	r3, #0
 8006a22:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a24:	4b79      	ldr	r3, [pc, #484]	@ (8006c0c <HAL_RCC_GetSysClockFreq+0x200>)
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	f003 030c 	and.w	r3, r3, #12
 8006a2c:	2b08      	cmp	r3, #8
 8006a2e:	d00d      	beq.n	8006a4c <HAL_RCC_GetSysClockFreq+0x40>
 8006a30:	2b08      	cmp	r3, #8
 8006a32:	f200 80e1 	bhi.w	8006bf8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d002      	beq.n	8006a40 <HAL_RCC_GetSysClockFreq+0x34>
 8006a3a:	2b04      	cmp	r3, #4
 8006a3c:	d003      	beq.n	8006a46 <HAL_RCC_GetSysClockFreq+0x3a>
 8006a3e:	e0db      	b.n	8006bf8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006a40:	4b73      	ldr	r3, [pc, #460]	@ (8006c10 <HAL_RCC_GetSysClockFreq+0x204>)
 8006a42:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006a44:	e0db      	b.n	8006bfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006a46:	4b73      	ldr	r3, [pc, #460]	@ (8006c14 <HAL_RCC_GetSysClockFreq+0x208>)
 8006a48:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006a4a:	e0d8      	b.n	8006bfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006a4c:	4b6f      	ldr	r3, [pc, #444]	@ (8006c0c <HAL_RCC_GetSysClockFreq+0x200>)
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a54:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006a56:	4b6d      	ldr	r3, [pc, #436]	@ (8006c0c <HAL_RCC_GetSysClockFreq+0x200>)
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d063      	beq.n	8006b2a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a62:	4b6a      	ldr	r3, [pc, #424]	@ (8006c0c <HAL_RCC_GetSysClockFreq+0x200>)
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	099b      	lsrs	r3, r3, #6
 8006a68:	2200      	movs	r2, #0
 8006a6a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a6c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006a6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a74:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a76:	2300      	movs	r3, #0
 8006a78:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a7a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006a7e:	4622      	mov	r2, r4
 8006a80:	462b      	mov	r3, r5
 8006a82:	f04f 0000 	mov.w	r0, #0
 8006a86:	f04f 0100 	mov.w	r1, #0
 8006a8a:	0159      	lsls	r1, r3, #5
 8006a8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a90:	0150      	lsls	r0, r2, #5
 8006a92:	4602      	mov	r2, r0
 8006a94:	460b      	mov	r3, r1
 8006a96:	4621      	mov	r1, r4
 8006a98:	1a51      	subs	r1, r2, r1
 8006a9a:	6139      	str	r1, [r7, #16]
 8006a9c:	4629      	mov	r1, r5
 8006a9e:	eb63 0301 	sbc.w	r3, r3, r1
 8006aa2:	617b      	str	r3, [r7, #20]
 8006aa4:	f04f 0200 	mov.w	r2, #0
 8006aa8:	f04f 0300 	mov.w	r3, #0
 8006aac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006ab0:	4659      	mov	r1, fp
 8006ab2:	018b      	lsls	r3, r1, #6
 8006ab4:	4651      	mov	r1, sl
 8006ab6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006aba:	4651      	mov	r1, sl
 8006abc:	018a      	lsls	r2, r1, #6
 8006abe:	4651      	mov	r1, sl
 8006ac0:	ebb2 0801 	subs.w	r8, r2, r1
 8006ac4:	4659      	mov	r1, fp
 8006ac6:	eb63 0901 	sbc.w	r9, r3, r1
 8006aca:	f04f 0200 	mov.w	r2, #0
 8006ace:	f04f 0300 	mov.w	r3, #0
 8006ad2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006ad6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006ada:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006ade:	4690      	mov	r8, r2
 8006ae0:	4699      	mov	r9, r3
 8006ae2:	4623      	mov	r3, r4
 8006ae4:	eb18 0303 	adds.w	r3, r8, r3
 8006ae8:	60bb      	str	r3, [r7, #8]
 8006aea:	462b      	mov	r3, r5
 8006aec:	eb49 0303 	adc.w	r3, r9, r3
 8006af0:	60fb      	str	r3, [r7, #12]
 8006af2:	f04f 0200 	mov.w	r2, #0
 8006af6:	f04f 0300 	mov.w	r3, #0
 8006afa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006afe:	4629      	mov	r1, r5
 8006b00:	024b      	lsls	r3, r1, #9
 8006b02:	4621      	mov	r1, r4
 8006b04:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006b08:	4621      	mov	r1, r4
 8006b0a:	024a      	lsls	r2, r1, #9
 8006b0c:	4610      	mov	r0, r2
 8006b0e:	4619      	mov	r1, r3
 8006b10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b12:	2200      	movs	r2, #0
 8006b14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006b1c:	f7f9 fb54 	bl	80001c8 <__aeabi_uldivmod>
 8006b20:	4602      	mov	r2, r0
 8006b22:	460b      	mov	r3, r1
 8006b24:	4613      	mov	r3, r2
 8006b26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b28:	e058      	b.n	8006bdc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b2a:	4b38      	ldr	r3, [pc, #224]	@ (8006c0c <HAL_RCC_GetSysClockFreq+0x200>)
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	099b      	lsrs	r3, r3, #6
 8006b30:	2200      	movs	r2, #0
 8006b32:	4618      	mov	r0, r3
 8006b34:	4611      	mov	r1, r2
 8006b36:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006b3a:	623b      	str	r3, [r7, #32]
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b40:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006b44:	4642      	mov	r2, r8
 8006b46:	464b      	mov	r3, r9
 8006b48:	f04f 0000 	mov.w	r0, #0
 8006b4c:	f04f 0100 	mov.w	r1, #0
 8006b50:	0159      	lsls	r1, r3, #5
 8006b52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006b56:	0150      	lsls	r0, r2, #5
 8006b58:	4602      	mov	r2, r0
 8006b5a:	460b      	mov	r3, r1
 8006b5c:	4641      	mov	r1, r8
 8006b5e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006b62:	4649      	mov	r1, r9
 8006b64:	eb63 0b01 	sbc.w	fp, r3, r1
 8006b68:	f04f 0200 	mov.w	r2, #0
 8006b6c:	f04f 0300 	mov.w	r3, #0
 8006b70:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006b74:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006b78:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006b7c:	ebb2 040a 	subs.w	r4, r2, sl
 8006b80:	eb63 050b 	sbc.w	r5, r3, fp
 8006b84:	f04f 0200 	mov.w	r2, #0
 8006b88:	f04f 0300 	mov.w	r3, #0
 8006b8c:	00eb      	lsls	r3, r5, #3
 8006b8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b92:	00e2      	lsls	r2, r4, #3
 8006b94:	4614      	mov	r4, r2
 8006b96:	461d      	mov	r5, r3
 8006b98:	4643      	mov	r3, r8
 8006b9a:	18e3      	adds	r3, r4, r3
 8006b9c:	603b      	str	r3, [r7, #0]
 8006b9e:	464b      	mov	r3, r9
 8006ba0:	eb45 0303 	adc.w	r3, r5, r3
 8006ba4:	607b      	str	r3, [r7, #4]
 8006ba6:	f04f 0200 	mov.w	r2, #0
 8006baa:	f04f 0300 	mov.w	r3, #0
 8006bae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006bb2:	4629      	mov	r1, r5
 8006bb4:	028b      	lsls	r3, r1, #10
 8006bb6:	4621      	mov	r1, r4
 8006bb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006bbc:	4621      	mov	r1, r4
 8006bbe:	028a      	lsls	r2, r1, #10
 8006bc0:	4610      	mov	r0, r2
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	61bb      	str	r3, [r7, #24]
 8006bca:	61fa      	str	r2, [r7, #28]
 8006bcc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006bd0:	f7f9 fafa 	bl	80001c8 <__aeabi_uldivmod>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	460b      	mov	r3, r1
 8006bd8:	4613      	mov	r3, r2
 8006bda:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006bdc:	4b0b      	ldr	r3, [pc, #44]	@ (8006c0c <HAL_RCC_GetSysClockFreq+0x200>)
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	0c1b      	lsrs	r3, r3, #16
 8006be2:	f003 0303 	and.w	r3, r3, #3
 8006be6:	3301      	adds	r3, #1
 8006be8:	005b      	lsls	r3, r3, #1
 8006bea:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006bec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006bee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bf4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006bf6:	e002      	b.n	8006bfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006bf8:	4b05      	ldr	r3, [pc, #20]	@ (8006c10 <HAL_RCC_GetSysClockFreq+0x204>)
 8006bfa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006bfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006bfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3750      	adds	r7, #80	@ 0x50
 8006c04:	46bd      	mov	sp, r7
 8006c06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c0a:	bf00      	nop
 8006c0c:	40023800 	.word	0x40023800
 8006c10:	00f42400 	.word	0x00f42400
 8006c14:	007a1200 	.word	0x007a1200

08006c18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c1c:	4b03      	ldr	r3, [pc, #12]	@ (8006c2c <HAL_RCC_GetHCLKFreq+0x14>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr
 8006c2a:	bf00      	nop
 8006c2c:	20000014 	.word	0x20000014

08006c30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006c34:	f7ff fff0 	bl	8006c18 <HAL_RCC_GetHCLKFreq>
 8006c38:	4602      	mov	r2, r0
 8006c3a:	4b05      	ldr	r3, [pc, #20]	@ (8006c50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	0a9b      	lsrs	r3, r3, #10
 8006c40:	f003 0307 	and.w	r3, r3, #7
 8006c44:	4903      	ldr	r1, [pc, #12]	@ (8006c54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c46:	5ccb      	ldrb	r3, [r1, r3]
 8006c48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	bd80      	pop	{r7, pc}
 8006c50:	40023800 	.word	0x40023800
 8006c54:	0800b9d4 	.word	0x0800b9d4

08006c58 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b086      	sub	sp, #24
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006c60:	2300      	movs	r3, #0
 8006c62:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006c64:	2300      	movs	r3, #0
 8006c66:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 0301 	and.w	r3, r3, #1
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d105      	bne.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d035      	beq.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006c80:	4b62      	ldr	r3, [pc, #392]	@ (8006e0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006c82:	2200      	movs	r2, #0
 8006c84:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006c86:	f7fb f97f 	bl	8001f88 <HAL_GetTick>
 8006c8a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006c8c:	e008      	b.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006c8e:	f7fb f97b 	bl	8001f88 <HAL_GetTick>
 8006c92:	4602      	mov	r2, r0
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	1ad3      	subs	r3, r2, r3
 8006c98:	2b02      	cmp	r3, #2
 8006c9a:	d901      	bls.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c9c:	2303      	movs	r3, #3
 8006c9e:	e0b0      	b.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006ca0:	4b5b      	ldr	r3, [pc, #364]	@ (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d1f0      	bne.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	019a      	lsls	r2, r3, #6
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	071b      	lsls	r3, r3, #28
 8006cb8:	4955      	ldr	r1, [pc, #340]	@ (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006cc0:	4b52      	ldr	r3, [pc, #328]	@ (8006e0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006cc6:	f7fb f95f 	bl	8001f88 <HAL_GetTick>
 8006cca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006ccc:	e008      	b.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006cce:	f7fb f95b 	bl	8001f88 <HAL_GetTick>
 8006cd2:	4602      	mov	r2, r0
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	1ad3      	subs	r3, r2, r3
 8006cd8:	2b02      	cmp	r3, #2
 8006cda:	d901      	bls.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006cdc:	2303      	movs	r3, #3
 8006cde:	e090      	b.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006ce0:	4b4b      	ldr	r3, [pc, #300]	@ (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d0f0      	beq.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f003 0302 	and.w	r3, r3, #2
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	f000 8083 	beq.w	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	60fb      	str	r3, [r7, #12]
 8006cfe:	4b44      	ldr	r3, [pc, #272]	@ (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d02:	4a43      	ldr	r2, [pc, #268]	@ (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d08:	6413      	str	r3, [r2, #64]	@ 0x40
 8006d0a:	4b41      	ldr	r3, [pc, #260]	@ (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d12:	60fb      	str	r3, [r7, #12]
 8006d14:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006d16:	4b3f      	ldr	r3, [pc, #252]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a3e      	ldr	r2, [pc, #248]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006d1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d20:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006d22:	f7fb f931 	bl	8001f88 <HAL_GetTick>
 8006d26:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006d28:	e008      	b.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d2a:	f7fb f92d 	bl	8001f88 <HAL_GetTick>
 8006d2e:	4602      	mov	r2, r0
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	1ad3      	subs	r3, r2, r3
 8006d34:	2b02      	cmp	r3, #2
 8006d36:	d901      	bls.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006d38:	2303      	movs	r3, #3
 8006d3a:	e062      	b.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006d3c:	4b35      	ldr	r3, [pc, #212]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d0f0      	beq.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006d48:	4b31      	ldr	r3, [pc, #196]	@ (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d4c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d50:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d02f      	beq.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d60:	693a      	ldr	r2, [r7, #16]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d028      	beq.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006d66:	4b2a      	ldr	r3, [pc, #168]	@ (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d6e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006d70:	4b29      	ldr	r3, [pc, #164]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006d72:	2201      	movs	r2, #1
 8006d74:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006d76:	4b28      	ldr	r3, [pc, #160]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006d78:	2200      	movs	r2, #0
 8006d7a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006d7c:	4a24      	ldr	r2, [pc, #144]	@ (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006d82:	4b23      	ldr	r3, [pc, #140]	@ (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d86:	f003 0301 	and.w	r3, r3, #1
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d114      	bne.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006d8e:	f7fb f8fb 	bl	8001f88 <HAL_GetTick>
 8006d92:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d94:	e00a      	b.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d96:	f7fb f8f7 	bl	8001f88 <HAL_GetTick>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	1ad3      	subs	r3, r2, r3
 8006da0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d901      	bls.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006da8:	2303      	movs	r3, #3
 8006daa:	e02a      	b.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dac:	4b18      	ldr	r3, [pc, #96]	@ (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006dae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006db0:	f003 0302 	and.w	r3, r3, #2
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d0ee      	beq.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006dc0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006dc4:	d10d      	bne.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006dc6:	4b12      	ldr	r3, [pc, #72]	@ (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006dd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006dda:	490d      	ldr	r1, [pc, #52]	@ (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	608b      	str	r3, [r1, #8]
 8006de0:	e005      	b.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006de2:	4b0b      	ldr	r3, [pc, #44]	@ (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	4a0a      	ldr	r2, [pc, #40]	@ (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006de8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006dec:	6093      	str	r3, [r2, #8]
 8006dee:	4b08      	ldr	r3, [pc, #32]	@ (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006df0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006dfa:	4905      	ldr	r1, [pc, #20]	@ (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006e00:	2300      	movs	r3, #0
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3718      	adds	r7, #24
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	bf00      	nop
 8006e0c:	42470068 	.word	0x42470068
 8006e10:	40023800 	.word	0x40023800
 8006e14:	40007000 	.word	0x40007000
 8006e18:	42470e40 	.word	0x42470e40

08006e1c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b087      	sub	sp, #28
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006e24:	2300      	movs	r3, #0
 8006e26:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006e30:	2300      	movs	r3, #0
 8006e32:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d13f      	bne.n	8006eba <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006e3a:	4b24      	ldr	r3, [pc, #144]	@ (8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e42:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d006      	beq.n	8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006e50:	d12f      	bne.n	8006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006e52:	4b1f      	ldr	r3, [pc, #124]	@ (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006e54:	617b      	str	r3, [r7, #20]
          break;
 8006e56:	e02f      	b.n	8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006e58:	4b1c      	ldr	r3, [pc, #112]	@ (8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e60:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006e64:	d108      	bne.n	8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006e66:	4b19      	ldr	r3, [pc, #100]	@ (8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e6e:	4a19      	ldr	r2, [pc, #100]	@ (8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e74:	613b      	str	r3, [r7, #16]
 8006e76:	e007      	b.n	8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006e78:	4b14      	ldr	r3, [pc, #80]	@ (8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e80:	4a15      	ldr	r2, [pc, #84]	@ (8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8006e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e86:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006e88:	4b10      	ldr	r3, [pc, #64]	@ (8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006e8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e8e:	099b      	lsrs	r3, r3, #6
 8006e90:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	fb02 f303 	mul.w	r3, r2, r3
 8006e9a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006e9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ea2:	0f1b      	lsrs	r3, r3, #28
 8006ea4:	f003 0307 	and.w	r3, r3, #7
 8006ea8:	68ba      	ldr	r2, [r7, #8]
 8006eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eae:	617b      	str	r3, [r7, #20]
          break;
 8006eb0:	e002      	b.n	8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	617b      	str	r3, [r7, #20]
          break;
 8006eb6:	bf00      	nop
        }
      }
      break;
 8006eb8:	e000      	b.n	8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8006eba:	bf00      	nop
    }
  }
  return frequency;
 8006ebc:	697b      	ldr	r3, [r7, #20]
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	371c      	adds	r7, #28
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr
 8006eca:	bf00      	nop
 8006ecc:	40023800 	.word	0x40023800
 8006ed0:	00bb8000 	.word	0x00bb8000
 8006ed4:	007a1200 	.word	0x007a1200
 8006ed8:	00f42400 	.word	0x00f42400

08006edc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b082      	sub	sp, #8
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d101      	bne.n	8006eee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
 8006eec:	e07b      	b.n	8006fe6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d108      	bne.n	8006f08 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006efe:	d009      	beq.n	8006f14 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2200      	movs	r2, #0
 8006f04:	61da      	str	r2, [r3, #28]
 8006f06:	e005      	b.n	8006f14 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d106      	bne.n	8006f34 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f7fa fe60 	bl	8001bf4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2202      	movs	r2, #2
 8006f38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f4a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006f5c:	431a      	orrs	r2, r3
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f66:	431a      	orrs	r2, r3
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	691b      	ldr	r3, [r3, #16]
 8006f6c:	f003 0302 	and.w	r3, r3, #2
 8006f70:	431a      	orrs	r2, r3
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	695b      	ldr	r3, [r3, #20]
 8006f76:	f003 0301 	and.w	r3, r3, #1
 8006f7a:	431a      	orrs	r2, r3
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	699b      	ldr	r3, [r3, #24]
 8006f80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f84:	431a      	orrs	r2, r3
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	69db      	ldr	r3, [r3, #28]
 8006f8a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006f8e:	431a      	orrs	r2, r3
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6a1b      	ldr	r3, [r3, #32]
 8006f94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f98:	ea42 0103 	orr.w	r1, r2, r3
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fa0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	430a      	orrs	r2, r1
 8006faa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	699b      	ldr	r3, [r3, #24]
 8006fb0:	0c1b      	lsrs	r3, r3, #16
 8006fb2:	f003 0104 	and.w	r1, r3, #4
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fba:	f003 0210 	and.w	r2, r3, #16
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	430a      	orrs	r2, r1
 8006fc4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	69da      	ldr	r2, [r3, #28]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006fd4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006fe4:	2300      	movs	r3, #0
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3708      	adds	r7, #8
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}

08006fee <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006fee:	b580      	push	{r7, lr}
 8006ff0:	b082      	sub	sp, #8
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d101      	bne.n	8007000 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	e041      	b.n	8007084 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007006:	b2db      	uxtb	r3, r3
 8007008:	2b00      	cmp	r3, #0
 800700a:	d106      	bne.n	800701a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f7fa fe35 	bl	8001c84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2202      	movs	r2, #2
 800701e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	3304      	adds	r3, #4
 800702a:	4619      	mov	r1, r3
 800702c:	4610      	mov	r0, r2
 800702e:	f000 fad9 	bl	80075e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2201      	movs	r2, #1
 8007036:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2201      	movs	r2, #1
 800703e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2201      	movs	r2, #1
 8007046:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2201      	movs	r2, #1
 800704e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2201      	movs	r2, #1
 8007056:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2201      	movs	r2, #1
 800705e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2201      	movs	r2, #1
 8007066:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2201      	movs	r2, #1
 800706e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2201      	movs	r2, #1
 8007076:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2201      	movs	r2, #1
 800707e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007082:	2300      	movs	r3, #0
}
 8007084:	4618      	mov	r0, r3
 8007086:	3708      	adds	r7, #8
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b082      	sub	sp, #8
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d101      	bne.n	800709e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	e041      	b.n	8007122 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d106      	bne.n	80070b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 f839 	bl	800712a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2202      	movs	r2, #2
 80070bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	3304      	adds	r3, #4
 80070c8:	4619      	mov	r1, r3
 80070ca:	4610      	mov	r0, r2
 80070cc:	f000 fa8a 	bl	80075e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2201      	movs	r2, #1
 80070d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2201      	movs	r2, #1
 80070dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2201      	movs	r2, #1
 80070e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2201      	movs	r2, #1
 80070ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2201      	movs	r2, #1
 80070fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2201      	movs	r2, #1
 8007104:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2201      	movs	r2, #1
 800710c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2201      	movs	r2, #1
 8007114:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2201      	movs	r2, #1
 800711c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007120:	2300      	movs	r3, #0
}
 8007122:	4618      	mov	r0, r3
 8007124:	3708      	adds	r7, #8
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}

0800712a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800712a:	b480      	push	{r7}
 800712c:	b083      	sub	sp, #12
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007132:	bf00      	nop
 8007134:	370c      	adds	r7, #12
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr
	...

08007140 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d109      	bne.n	8007164 <HAL_TIM_PWM_Start+0x24>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007156:	b2db      	uxtb	r3, r3
 8007158:	2b01      	cmp	r3, #1
 800715a:	bf14      	ite	ne
 800715c:	2301      	movne	r3, #1
 800715e:	2300      	moveq	r3, #0
 8007160:	b2db      	uxtb	r3, r3
 8007162:	e022      	b.n	80071aa <HAL_TIM_PWM_Start+0x6a>
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	2b04      	cmp	r3, #4
 8007168:	d109      	bne.n	800717e <HAL_TIM_PWM_Start+0x3e>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007170:	b2db      	uxtb	r3, r3
 8007172:	2b01      	cmp	r3, #1
 8007174:	bf14      	ite	ne
 8007176:	2301      	movne	r3, #1
 8007178:	2300      	moveq	r3, #0
 800717a:	b2db      	uxtb	r3, r3
 800717c:	e015      	b.n	80071aa <HAL_TIM_PWM_Start+0x6a>
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	2b08      	cmp	r3, #8
 8007182:	d109      	bne.n	8007198 <HAL_TIM_PWM_Start+0x58>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800718a:	b2db      	uxtb	r3, r3
 800718c:	2b01      	cmp	r3, #1
 800718e:	bf14      	ite	ne
 8007190:	2301      	movne	r3, #1
 8007192:	2300      	moveq	r3, #0
 8007194:	b2db      	uxtb	r3, r3
 8007196:	e008      	b.n	80071aa <HAL_TIM_PWM_Start+0x6a>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	bf14      	ite	ne
 80071a4:	2301      	movne	r3, #1
 80071a6:	2300      	moveq	r3, #0
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d001      	beq.n	80071b2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80071ae:	2301      	movs	r3, #1
 80071b0:	e07c      	b.n	80072ac <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d104      	bne.n	80071c2 <HAL_TIM_PWM_Start+0x82>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2202      	movs	r2, #2
 80071bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80071c0:	e013      	b.n	80071ea <HAL_TIM_PWM_Start+0xaa>
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	2b04      	cmp	r3, #4
 80071c6:	d104      	bne.n	80071d2 <HAL_TIM_PWM_Start+0x92>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2202      	movs	r2, #2
 80071cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80071d0:	e00b      	b.n	80071ea <HAL_TIM_PWM_Start+0xaa>
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	2b08      	cmp	r3, #8
 80071d6:	d104      	bne.n	80071e2 <HAL_TIM_PWM_Start+0xa2>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2202      	movs	r2, #2
 80071dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80071e0:	e003      	b.n	80071ea <HAL_TIM_PWM_Start+0xaa>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2202      	movs	r2, #2
 80071e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	2201      	movs	r2, #1
 80071f0:	6839      	ldr	r1, [r7, #0]
 80071f2:	4618      	mov	r0, r3
 80071f4:	f000 fce6 	bl	8007bc4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a2d      	ldr	r2, [pc, #180]	@ (80072b4 <HAL_TIM_PWM_Start+0x174>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d004      	beq.n	800720c <HAL_TIM_PWM_Start+0xcc>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a2c      	ldr	r2, [pc, #176]	@ (80072b8 <HAL_TIM_PWM_Start+0x178>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d101      	bne.n	8007210 <HAL_TIM_PWM_Start+0xd0>
 800720c:	2301      	movs	r3, #1
 800720e:	e000      	b.n	8007212 <HAL_TIM_PWM_Start+0xd2>
 8007210:	2300      	movs	r3, #0
 8007212:	2b00      	cmp	r3, #0
 8007214:	d007      	beq.n	8007226 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007224:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a22      	ldr	r2, [pc, #136]	@ (80072b4 <HAL_TIM_PWM_Start+0x174>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d022      	beq.n	8007276 <HAL_TIM_PWM_Start+0x136>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007238:	d01d      	beq.n	8007276 <HAL_TIM_PWM_Start+0x136>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a1f      	ldr	r2, [pc, #124]	@ (80072bc <HAL_TIM_PWM_Start+0x17c>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d018      	beq.n	8007276 <HAL_TIM_PWM_Start+0x136>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a1d      	ldr	r2, [pc, #116]	@ (80072c0 <HAL_TIM_PWM_Start+0x180>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d013      	beq.n	8007276 <HAL_TIM_PWM_Start+0x136>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a1c      	ldr	r2, [pc, #112]	@ (80072c4 <HAL_TIM_PWM_Start+0x184>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d00e      	beq.n	8007276 <HAL_TIM_PWM_Start+0x136>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a16      	ldr	r2, [pc, #88]	@ (80072b8 <HAL_TIM_PWM_Start+0x178>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d009      	beq.n	8007276 <HAL_TIM_PWM_Start+0x136>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a18      	ldr	r2, [pc, #96]	@ (80072c8 <HAL_TIM_PWM_Start+0x188>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d004      	beq.n	8007276 <HAL_TIM_PWM_Start+0x136>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a16      	ldr	r2, [pc, #88]	@ (80072cc <HAL_TIM_PWM_Start+0x18c>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d111      	bne.n	800729a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	f003 0307 	and.w	r3, r3, #7
 8007280:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2b06      	cmp	r3, #6
 8007286:	d010      	beq.n	80072aa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f042 0201 	orr.w	r2, r2, #1
 8007296:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007298:	e007      	b.n	80072aa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f042 0201 	orr.w	r2, r2, #1
 80072a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80072aa:	2300      	movs	r3, #0
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3710      	adds	r7, #16
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	40010000 	.word	0x40010000
 80072b8:	40010400 	.word	0x40010400
 80072bc:	40000400 	.word	0x40000400
 80072c0:	40000800 	.word	0x40000800
 80072c4:	40000c00 	.word	0x40000c00
 80072c8:	40014000 	.word	0x40014000
 80072cc:	40001800 	.word	0x40001800

080072d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b086      	sub	sp, #24
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	60f8      	str	r0, [r7, #12]
 80072d8:	60b9      	str	r1, [r7, #8]
 80072da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072dc:	2300      	movs	r3, #0
 80072de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	d101      	bne.n	80072ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80072ea:	2302      	movs	r3, #2
 80072ec:	e0ae      	b.n	800744c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2201      	movs	r2, #1
 80072f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2b0c      	cmp	r3, #12
 80072fa:	f200 809f 	bhi.w	800743c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80072fe:	a201      	add	r2, pc, #4	@ (adr r2, 8007304 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007304:	08007339 	.word	0x08007339
 8007308:	0800743d 	.word	0x0800743d
 800730c:	0800743d 	.word	0x0800743d
 8007310:	0800743d 	.word	0x0800743d
 8007314:	08007379 	.word	0x08007379
 8007318:	0800743d 	.word	0x0800743d
 800731c:	0800743d 	.word	0x0800743d
 8007320:	0800743d 	.word	0x0800743d
 8007324:	080073bb 	.word	0x080073bb
 8007328:	0800743d 	.word	0x0800743d
 800732c:	0800743d 	.word	0x0800743d
 8007330:	0800743d 	.word	0x0800743d
 8007334:	080073fb 	.word	0x080073fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	68b9      	ldr	r1, [r7, #8]
 800733e:	4618      	mov	r0, r3
 8007340:	f000 f9f6 	bl	8007730 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	699a      	ldr	r2, [r3, #24]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f042 0208 	orr.w	r2, r2, #8
 8007352:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	699a      	ldr	r2, [r3, #24]
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f022 0204 	bic.w	r2, r2, #4
 8007362:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	6999      	ldr	r1, [r3, #24]
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	691a      	ldr	r2, [r3, #16]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	430a      	orrs	r2, r1
 8007374:	619a      	str	r2, [r3, #24]
      break;
 8007376:	e064      	b.n	8007442 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	68b9      	ldr	r1, [r7, #8]
 800737e:	4618      	mov	r0, r3
 8007380:	f000 fa46 	bl	8007810 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	699a      	ldr	r2, [r3, #24]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007392:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	699a      	ldr	r2, [r3, #24]
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80073a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	6999      	ldr	r1, [r3, #24]
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	691b      	ldr	r3, [r3, #16]
 80073ae:	021a      	lsls	r2, r3, #8
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	430a      	orrs	r2, r1
 80073b6:	619a      	str	r2, [r3, #24]
      break;
 80073b8:	e043      	b.n	8007442 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	68b9      	ldr	r1, [r7, #8]
 80073c0:	4618      	mov	r0, r3
 80073c2:	f000 fa9b 	bl	80078fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	69da      	ldr	r2, [r3, #28]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f042 0208 	orr.w	r2, r2, #8
 80073d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	69da      	ldr	r2, [r3, #28]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f022 0204 	bic.w	r2, r2, #4
 80073e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	69d9      	ldr	r1, [r3, #28]
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	691a      	ldr	r2, [r3, #16]
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	430a      	orrs	r2, r1
 80073f6:	61da      	str	r2, [r3, #28]
      break;
 80073f8:	e023      	b.n	8007442 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	68b9      	ldr	r1, [r7, #8]
 8007400:	4618      	mov	r0, r3
 8007402:	f000 faef 	bl	80079e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	69da      	ldr	r2, [r3, #28]
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007414:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	69da      	ldr	r2, [r3, #28]
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007424:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	69d9      	ldr	r1, [r3, #28]
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	691b      	ldr	r3, [r3, #16]
 8007430:	021a      	lsls	r2, r3, #8
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	430a      	orrs	r2, r1
 8007438:	61da      	str	r2, [r3, #28]
      break;
 800743a:	e002      	b.n	8007442 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800743c:	2301      	movs	r3, #1
 800743e:	75fb      	strb	r3, [r7, #23]
      break;
 8007440:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2200      	movs	r2, #0
 8007446:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800744a:	7dfb      	ldrb	r3, [r7, #23]
}
 800744c:	4618      	mov	r0, r3
 800744e:	3718      	adds	r7, #24
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b084      	sub	sp, #16
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800745e:	2300      	movs	r3, #0
 8007460:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007468:	2b01      	cmp	r3, #1
 800746a:	d101      	bne.n	8007470 <HAL_TIM_ConfigClockSource+0x1c>
 800746c:	2302      	movs	r3, #2
 800746e:	e0b4      	b.n	80075da <HAL_TIM_ConfigClockSource+0x186>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2201      	movs	r2, #1
 8007474:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2202      	movs	r2, #2
 800747c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800748e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007496:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	68ba      	ldr	r2, [r7, #8]
 800749e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074a8:	d03e      	beq.n	8007528 <HAL_TIM_ConfigClockSource+0xd4>
 80074aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074ae:	f200 8087 	bhi.w	80075c0 <HAL_TIM_ConfigClockSource+0x16c>
 80074b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074b6:	f000 8086 	beq.w	80075c6 <HAL_TIM_ConfigClockSource+0x172>
 80074ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074be:	d87f      	bhi.n	80075c0 <HAL_TIM_ConfigClockSource+0x16c>
 80074c0:	2b70      	cmp	r3, #112	@ 0x70
 80074c2:	d01a      	beq.n	80074fa <HAL_TIM_ConfigClockSource+0xa6>
 80074c4:	2b70      	cmp	r3, #112	@ 0x70
 80074c6:	d87b      	bhi.n	80075c0 <HAL_TIM_ConfigClockSource+0x16c>
 80074c8:	2b60      	cmp	r3, #96	@ 0x60
 80074ca:	d050      	beq.n	800756e <HAL_TIM_ConfigClockSource+0x11a>
 80074cc:	2b60      	cmp	r3, #96	@ 0x60
 80074ce:	d877      	bhi.n	80075c0 <HAL_TIM_ConfigClockSource+0x16c>
 80074d0:	2b50      	cmp	r3, #80	@ 0x50
 80074d2:	d03c      	beq.n	800754e <HAL_TIM_ConfigClockSource+0xfa>
 80074d4:	2b50      	cmp	r3, #80	@ 0x50
 80074d6:	d873      	bhi.n	80075c0 <HAL_TIM_ConfigClockSource+0x16c>
 80074d8:	2b40      	cmp	r3, #64	@ 0x40
 80074da:	d058      	beq.n	800758e <HAL_TIM_ConfigClockSource+0x13a>
 80074dc:	2b40      	cmp	r3, #64	@ 0x40
 80074de:	d86f      	bhi.n	80075c0 <HAL_TIM_ConfigClockSource+0x16c>
 80074e0:	2b30      	cmp	r3, #48	@ 0x30
 80074e2:	d064      	beq.n	80075ae <HAL_TIM_ConfigClockSource+0x15a>
 80074e4:	2b30      	cmp	r3, #48	@ 0x30
 80074e6:	d86b      	bhi.n	80075c0 <HAL_TIM_ConfigClockSource+0x16c>
 80074e8:	2b20      	cmp	r3, #32
 80074ea:	d060      	beq.n	80075ae <HAL_TIM_ConfigClockSource+0x15a>
 80074ec:	2b20      	cmp	r3, #32
 80074ee:	d867      	bhi.n	80075c0 <HAL_TIM_ConfigClockSource+0x16c>
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d05c      	beq.n	80075ae <HAL_TIM_ConfigClockSource+0x15a>
 80074f4:	2b10      	cmp	r3, #16
 80074f6:	d05a      	beq.n	80075ae <HAL_TIM_ConfigClockSource+0x15a>
 80074f8:	e062      	b.n	80075c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800750a:	f000 fb3b 	bl	8007b84 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800751c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	68ba      	ldr	r2, [r7, #8]
 8007524:	609a      	str	r2, [r3, #8]
      break;
 8007526:	e04f      	b.n	80075c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007538:	f000 fb24 	bl	8007b84 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	689a      	ldr	r2, [r3, #8]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800754a:	609a      	str	r2, [r3, #8]
      break;
 800754c:	e03c      	b.n	80075c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800755a:	461a      	mov	r2, r3
 800755c:	f000 fa98 	bl	8007a90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	2150      	movs	r1, #80	@ 0x50
 8007566:	4618      	mov	r0, r3
 8007568:	f000 faf1 	bl	8007b4e <TIM_ITRx_SetConfig>
      break;
 800756c:	e02c      	b.n	80075c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800757a:	461a      	mov	r2, r3
 800757c:	f000 fab7 	bl	8007aee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	2160      	movs	r1, #96	@ 0x60
 8007586:	4618      	mov	r0, r3
 8007588:	f000 fae1 	bl	8007b4e <TIM_ITRx_SetConfig>
      break;
 800758c:	e01c      	b.n	80075c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800759a:	461a      	mov	r2, r3
 800759c:	f000 fa78 	bl	8007a90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	2140      	movs	r1, #64	@ 0x40
 80075a6:	4618      	mov	r0, r3
 80075a8:	f000 fad1 	bl	8007b4e <TIM_ITRx_SetConfig>
      break;
 80075ac:	e00c      	b.n	80075c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681a      	ldr	r2, [r3, #0]
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4619      	mov	r1, r3
 80075b8:	4610      	mov	r0, r2
 80075ba:	f000 fac8 	bl	8007b4e <TIM_ITRx_SetConfig>
      break;
 80075be:	e003      	b.n	80075c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80075c0:	2301      	movs	r3, #1
 80075c2:	73fb      	strb	r3, [r7, #15]
      break;
 80075c4:	e000      	b.n	80075c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80075c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2201      	movs	r2, #1
 80075cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80075d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3710      	adds	r7, #16
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}
	...

080075e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b085      	sub	sp, #20
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	4a43      	ldr	r2, [pc, #268]	@ (8007704 <TIM_Base_SetConfig+0x120>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d013      	beq.n	8007624 <TIM_Base_SetConfig+0x40>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007602:	d00f      	beq.n	8007624 <TIM_Base_SetConfig+0x40>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	4a40      	ldr	r2, [pc, #256]	@ (8007708 <TIM_Base_SetConfig+0x124>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d00b      	beq.n	8007624 <TIM_Base_SetConfig+0x40>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	4a3f      	ldr	r2, [pc, #252]	@ (800770c <TIM_Base_SetConfig+0x128>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d007      	beq.n	8007624 <TIM_Base_SetConfig+0x40>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	4a3e      	ldr	r2, [pc, #248]	@ (8007710 <TIM_Base_SetConfig+0x12c>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d003      	beq.n	8007624 <TIM_Base_SetConfig+0x40>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	4a3d      	ldr	r2, [pc, #244]	@ (8007714 <TIM_Base_SetConfig+0x130>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d108      	bne.n	8007636 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800762a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	68fa      	ldr	r2, [r7, #12]
 8007632:	4313      	orrs	r3, r2
 8007634:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	4a32      	ldr	r2, [pc, #200]	@ (8007704 <TIM_Base_SetConfig+0x120>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d02b      	beq.n	8007696 <TIM_Base_SetConfig+0xb2>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007644:	d027      	beq.n	8007696 <TIM_Base_SetConfig+0xb2>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	4a2f      	ldr	r2, [pc, #188]	@ (8007708 <TIM_Base_SetConfig+0x124>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d023      	beq.n	8007696 <TIM_Base_SetConfig+0xb2>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	4a2e      	ldr	r2, [pc, #184]	@ (800770c <TIM_Base_SetConfig+0x128>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d01f      	beq.n	8007696 <TIM_Base_SetConfig+0xb2>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	4a2d      	ldr	r2, [pc, #180]	@ (8007710 <TIM_Base_SetConfig+0x12c>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d01b      	beq.n	8007696 <TIM_Base_SetConfig+0xb2>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	4a2c      	ldr	r2, [pc, #176]	@ (8007714 <TIM_Base_SetConfig+0x130>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d017      	beq.n	8007696 <TIM_Base_SetConfig+0xb2>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	4a2b      	ldr	r2, [pc, #172]	@ (8007718 <TIM_Base_SetConfig+0x134>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d013      	beq.n	8007696 <TIM_Base_SetConfig+0xb2>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	4a2a      	ldr	r2, [pc, #168]	@ (800771c <TIM_Base_SetConfig+0x138>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d00f      	beq.n	8007696 <TIM_Base_SetConfig+0xb2>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	4a29      	ldr	r2, [pc, #164]	@ (8007720 <TIM_Base_SetConfig+0x13c>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d00b      	beq.n	8007696 <TIM_Base_SetConfig+0xb2>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	4a28      	ldr	r2, [pc, #160]	@ (8007724 <TIM_Base_SetConfig+0x140>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d007      	beq.n	8007696 <TIM_Base_SetConfig+0xb2>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	4a27      	ldr	r2, [pc, #156]	@ (8007728 <TIM_Base_SetConfig+0x144>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d003      	beq.n	8007696 <TIM_Base_SetConfig+0xb2>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	4a26      	ldr	r2, [pc, #152]	@ (800772c <TIM_Base_SetConfig+0x148>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d108      	bne.n	80076a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800769c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	68db      	ldr	r3, [r3, #12]
 80076a2:	68fa      	ldr	r2, [r7, #12]
 80076a4:	4313      	orrs	r3, r2
 80076a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	695b      	ldr	r3, [r3, #20]
 80076b2:	4313      	orrs	r3, r2
 80076b4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	689a      	ldr	r2, [r3, #8]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	4a0e      	ldr	r2, [pc, #56]	@ (8007704 <TIM_Base_SetConfig+0x120>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d003      	beq.n	80076d6 <TIM_Base_SetConfig+0xf2>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	4a10      	ldr	r2, [pc, #64]	@ (8007714 <TIM_Base_SetConfig+0x130>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d103      	bne.n	80076de <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	691a      	ldr	r2, [r3, #16]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f043 0204 	orr.w	r2, r3, #4
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2201      	movs	r2, #1
 80076ee:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	68fa      	ldr	r2, [r7, #12]
 80076f4:	601a      	str	r2, [r3, #0]
}
 80076f6:	bf00      	nop
 80076f8:	3714      	adds	r7, #20
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr
 8007702:	bf00      	nop
 8007704:	40010000 	.word	0x40010000
 8007708:	40000400 	.word	0x40000400
 800770c:	40000800 	.word	0x40000800
 8007710:	40000c00 	.word	0x40000c00
 8007714:	40010400 	.word	0x40010400
 8007718:	40014000 	.word	0x40014000
 800771c:	40014400 	.word	0x40014400
 8007720:	40014800 	.word	0x40014800
 8007724:	40001800 	.word	0x40001800
 8007728:	40001c00 	.word	0x40001c00
 800772c:	40002000 	.word	0x40002000

08007730 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007730:	b480      	push	{r7}
 8007732:	b087      	sub	sp, #28
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6a1b      	ldr	r3, [r3, #32]
 800773e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6a1b      	ldr	r3, [r3, #32]
 8007744:	f023 0201 	bic.w	r2, r3, #1
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	699b      	ldr	r3, [r3, #24]
 8007756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800775e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f023 0303 	bic.w	r3, r3, #3
 8007766:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	68fa      	ldr	r2, [r7, #12]
 800776e:	4313      	orrs	r3, r2
 8007770:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	f023 0302 	bic.w	r3, r3, #2
 8007778:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	697a      	ldr	r2, [r7, #20]
 8007780:	4313      	orrs	r3, r2
 8007782:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	4a20      	ldr	r2, [pc, #128]	@ (8007808 <TIM_OC1_SetConfig+0xd8>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d003      	beq.n	8007794 <TIM_OC1_SetConfig+0x64>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	4a1f      	ldr	r2, [pc, #124]	@ (800780c <TIM_OC1_SetConfig+0xdc>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d10c      	bne.n	80077ae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	f023 0308 	bic.w	r3, r3, #8
 800779a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	68db      	ldr	r3, [r3, #12]
 80077a0:	697a      	ldr	r2, [r7, #20]
 80077a2:	4313      	orrs	r3, r2
 80077a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	f023 0304 	bic.w	r3, r3, #4
 80077ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	4a15      	ldr	r2, [pc, #84]	@ (8007808 <TIM_OC1_SetConfig+0xd8>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d003      	beq.n	80077be <TIM_OC1_SetConfig+0x8e>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	4a14      	ldr	r2, [pc, #80]	@ (800780c <TIM_OC1_SetConfig+0xdc>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d111      	bne.n	80077e2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80077c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80077cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	695b      	ldr	r3, [r3, #20]
 80077d2:	693a      	ldr	r2, [r7, #16]
 80077d4:	4313      	orrs	r3, r2
 80077d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	699b      	ldr	r3, [r3, #24]
 80077dc:	693a      	ldr	r2, [r7, #16]
 80077de:	4313      	orrs	r3, r2
 80077e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	693a      	ldr	r2, [r7, #16]
 80077e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	68fa      	ldr	r2, [r7, #12]
 80077ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	685a      	ldr	r2, [r3, #4]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	697a      	ldr	r2, [r7, #20]
 80077fa:	621a      	str	r2, [r3, #32]
}
 80077fc:	bf00      	nop
 80077fe:	371c      	adds	r7, #28
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr
 8007808:	40010000 	.word	0x40010000
 800780c:	40010400 	.word	0x40010400

08007810 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007810:	b480      	push	{r7}
 8007812:	b087      	sub	sp, #28
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6a1b      	ldr	r3, [r3, #32]
 800781e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6a1b      	ldr	r3, [r3, #32]
 8007824:	f023 0210 	bic.w	r2, r3, #16
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	699b      	ldr	r3, [r3, #24]
 8007836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800783e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007846:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	021b      	lsls	r3, r3, #8
 800784e:	68fa      	ldr	r2, [r7, #12]
 8007850:	4313      	orrs	r3, r2
 8007852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	f023 0320 	bic.w	r3, r3, #32
 800785a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	011b      	lsls	r3, r3, #4
 8007862:	697a      	ldr	r2, [r7, #20]
 8007864:	4313      	orrs	r3, r2
 8007866:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	4a22      	ldr	r2, [pc, #136]	@ (80078f4 <TIM_OC2_SetConfig+0xe4>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d003      	beq.n	8007878 <TIM_OC2_SetConfig+0x68>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	4a21      	ldr	r2, [pc, #132]	@ (80078f8 <TIM_OC2_SetConfig+0xe8>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d10d      	bne.n	8007894 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800787e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	68db      	ldr	r3, [r3, #12]
 8007884:	011b      	lsls	r3, r3, #4
 8007886:	697a      	ldr	r2, [r7, #20]
 8007888:	4313      	orrs	r3, r2
 800788a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007892:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	4a17      	ldr	r2, [pc, #92]	@ (80078f4 <TIM_OC2_SetConfig+0xe4>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d003      	beq.n	80078a4 <TIM_OC2_SetConfig+0x94>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	4a16      	ldr	r2, [pc, #88]	@ (80078f8 <TIM_OC2_SetConfig+0xe8>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d113      	bne.n	80078cc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80078aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80078b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	695b      	ldr	r3, [r3, #20]
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	693a      	ldr	r2, [r7, #16]
 80078bc:	4313      	orrs	r3, r2
 80078be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	699b      	ldr	r3, [r3, #24]
 80078c4:	009b      	lsls	r3, r3, #2
 80078c6:	693a      	ldr	r2, [r7, #16]
 80078c8:	4313      	orrs	r3, r2
 80078ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	693a      	ldr	r2, [r7, #16]
 80078d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	68fa      	ldr	r2, [r7, #12]
 80078d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	685a      	ldr	r2, [r3, #4]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	697a      	ldr	r2, [r7, #20]
 80078e4:	621a      	str	r2, [r3, #32]
}
 80078e6:	bf00      	nop
 80078e8:	371c      	adds	r7, #28
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr
 80078f2:	bf00      	nop
 80078f4:	40010000 	.word	0x40010000
 80078f8:	40010400 	.word	0x40010400

080078fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b087      	sub	sp, #28
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6a1b      	ldr	r3, [r3, #32]
 800790a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6a1b      	ldr	r3, [r3, #32]
 8007910:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	69db      	ldr	r3, [r3, #28]
 8007922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800792a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f023 0303 	bic.w	r3, r3, #3
 8007932:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	68fa      	ldr	r2, [r7, #12]
 800793a:	4313      	orrs	r3, r2
 800793c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007944:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	689b      	ldr	r3, [r3, #8]
 800794a:	021b      	lsls	r3, r3, #8
 800794c:	697a      	ldr	r2, [r7, #20]
 800794e:	4313      	orrs	r3, r2
 8007950:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	4a21      	ldr	r2, [pc, #132]	@ (80079dc <TIM_OC3_SetConfig+0xe0>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d003      	beq.n	8007962 <TIM_OC3_SetConfig+0x66>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	4a20      	ldr	r2, [pc, #128]	@ (80079e0 <TIM_OC3_SetConfig+0xe4>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d10d      	bne.n	800797e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007968:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	68db      	ldr	r3, [r3, #12]
 800796e:	021b      	lsls	r3, r3, #8
 8007970:	697a      	ldr	r2, [r7, #20]
 8007972:	4313      	orrs	r3, r2
 8007974:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800797c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	4a16      	ldr	r2, [pc, #88]	@ (80079dc <TIM_OC3_SetConfig+0xe0>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d003      	beq.n	800798e <TIM_OC3_SetConfig+0x92>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	4a15      	ldr	r2, [pc, #84]	@ (80079e0 <TIM_OC3_SetConfig+0xe4>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d113      	bne.n	80079b6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007994:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800799c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	695b      	ldr	r3, [r3, #20]
 80079a2:	011b      	lsls	r3, r3, #4
 80079a4:	693a      	ldr	r2, [r7, #16]
 80079a6:	4313      	orrs	r3, r2
 80079a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	699b      	ldr	r3, [r3, #24]
 80079ae:	011b      	lsls	r3, r3, #4
 80079b0:	693a      	ldr	r2, [r7, #16]
 80079b2:	4313      	orrs	r3, r2
 80079b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	693a      	ldr	r2, [r7, #16]
 80079ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	68fa      	ldr	r2, [r7, #12]
 80079c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	685a      	ldr	r2, [r3, #4]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	697a      	ldr	r2, [r7, #20]
 80079ce:	621a      	str	r2, [r3, #32]
}
 80079d0:	bf00      	nop
 80079d2:	371c      	adds	r7, #28
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr
 80079dc:	40010000 	.word	0x40010000
 80079e0:	40010400 	.word	0x40010400

080079e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b087      	sub	sp, #28
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6a1b      	ldr	r3, [r3, #32]
 80079f2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6a1b      	ldr	r3, [r3, #32]
 80079f8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	69db      	ldr	r3, [r3, #28]
 8007a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	021b      	lsls	r3, r3, #8
 8007a22:	68fa      	ldr	r2, [r7, #12]
 8007a24:	4313      	orrs	r3, r2
 8007a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007a2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	031b      	lsls	r3, r3, #12
 8007a36:	693a      	ldr	r2, [r7, #16]
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	4a12      	ldr	r2, [pc, #72]	@ (8007a88 <TIM_OC4_SetConfig+0xa4>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d003      	beq.n	8007a4c <TIM_OC4_SetConfig+0x68>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	4a11      	ldr	r2, [pc, #68]	@ (8007a8c <TIM_OC4_SetConfig+0xa8>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d109      	bne.n	8007a60 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007a52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	695b      	ldr	r3, [r3, #20]
 8007a58:	019b      	lsls	r3, r3, #6
 8007a5a:	697a      	ldr	r2, [r7, #20]
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	697a      	ldr	r2, [r7, #20]
 8007a64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	68fa      	ldr	r2, [r7, #12]
 8007a6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	685a      	ldr	r2, [r3, #4]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	693a      	ldr	r2, [r7, #16]
 8007a78:	621a      	str	r2, [r3, #32]
}
 8007a7a:	bf00      	nop
 8007a7c:	371c      	adds	r7, #28
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr
 8007a86:	bf00      	nop
 8007a88:	40010000 	.word	0x40010000
 8007a8c:	40010400 	.word	0x40010400

08007a90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b087      	sub	sp, #28
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	60f8      	str	r0, [r7, #12]
 8007a98:	60b9      	str	r1, [r7, #8]
 8007a9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	6a1b      	ldr	r3, [r3, #32]
 8007aa0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	6a1b      	ldr	r3, [r3, #32]
 8007aa6:	f023 0201 	bic.w	r2, r3, #1
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	699b      	ldr	r3, [r3, #24]
 8007ab2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007aba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	011b      	lsls	r3, r3, #4
 8007ac0:	693a      	ldr	r2, [r7, #16]
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	f023 030a 	bic.w	r3, r3, #10
 8007acc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007ace:	697a      	ldr	r2, [r7, #20]
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	693a      	ldr	r2, [r7, #16]
 8007ada:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	697a      	ldr	r2, [r7, #20]
 8007ae0:	621a      	str	r2, [r3, #32]
}
 8007ae2:	bf00      	nop
 8007ae4:	371c      	adds	r7, #28
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aec:	4770      	bx	lr

08007aee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007aee:	b480      	push	{r7}
 8007af0:	b087      	sub	sp, #28
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	60f8      	str	r0, [r7, #12]
 8007af6:	60b9      	str	r1, [r7, #8]
 8007af8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	6a1b      	ldr	r3, [r3, #32]
 8007afe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	6a1b      	ldr	r3, [r3, #32]
 8007b04:	f023 0210 	bic.w	r2, r3, #16
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	699b      	ldr	r3, [r3, #24]
 8007b10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007b18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	031b      	lsls	r3, r3, #12
 8007b1e:	693a      	ldr	r2, [r7, #16]
 8007b20:	4313      	orrs	r3, r2
 8007b22:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007b2a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	011b      	lsls	r3, r3, #4
 8007b30:	697a      	ldr	r2, [r7, #20]
 8007b32:	4313      	orrs	r3, r2
 8007b34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	693a      	ldr	r2, [r7, #16]
 8007b3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	697a      	ldr	r2, [r7, #20]
 8007b40:	621a      	str	r2, [r3, #32]
}
 8007b42:	bf00      	nop
 8007b44:	371c      	adds	r7, #28
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr

08007b4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007b4e:	b480      	push	{r7}
 8007b50:	b085      	sub	sp, #20
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	6078      	str	r0, [r7, #4]
 8007b56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007b66:	683a      	ldr	r2, [r7, #0]
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	f043 0307 	orr.w	r3, r3, #7
 8007b70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	68fa      	ldr	r2, [r7, #12]
 8007b76:	609a      	str	r2, [r3, #8]
}
 8007b78:	bf00      	nop
 8007b7a:	3714      	adds	r7, #20
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b82:	4770      	bx	lr

08007b84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b087      	sub	sp, #28
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	60f8      	str	r0, [r7, #12]
 8007b8c:	60b9      	str	r1, [r7, #8]
 8007b8e:	607a      	str	r2, [r7, #4]
 8007b90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007b9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	021a      	lsls	r2, r3, #8
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	431a      	orrs	r2, r3
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	4313      	orrs	r3, r2
 8007bac:	697a      	ldr	r2, [r7, #20]
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	697a      	ldr	r2, [r7, #20]
 8007bb6:	609a      	str	r2, [r3, #8]
}
 8007bb8:	bf00      	nop
 8007bba:	371c      	adds	r7, #28
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr

08007bc4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b087      	sub	sp, #28
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	60f8      	str	r0, [r7, #12]
 8007bcc:	60b9      	str	r1, [r7, #8]
 8007bce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	f003 031f 	and.w	r3, r3, #31
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8007bdc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	6a1a      	ldr	r2, [r3, #32]
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	43db      	mvns	r3, r3
 8007be6:	401a      	ands	r2, r3
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	6a1a      	ldr	r2, [r3, #32]
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	f003 031f 	and.w	r3, r3, #31
 8007bf6:	6879      	ldr	r1, [r7, #4]
 8007bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8007bfc:	431a      	orrs	r2, r3
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	621a      	str	r2, [r3, #32]
}
 8007c02:	bf00      	nop
 8007c04:	371c      	adds	r7, #28
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr
	...

08007c10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b085      	sub	sp, #20
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d101      	bne.n	8007c28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c24:	2302      	movs	r3, #2
 8007c26:	e05a      	b.n	8007cde <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2202      	movs	r2, #2
 8007c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	689b      	ldr	r3, [r3, #8]
 8007c46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	68fa      	ldr	r2, [r7, #12]
 8007c56:	4313      	orrs	r3, r2
 8007c58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	68fa      	ldr	r2, [r7, #12]
 8007c60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a21      	ldr	r2, [pc, #132]	@ (8007cec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d022      	beq.n	8007cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c74:	d01d      	beq.n	8007cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a1d      	ldr	r2, [pc, #116]	@ (8007cf0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d018      	beq.n	8007cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a1b      	ldr	r2, [pc, #108]	@ (8007cf4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d013      	beq.n	8007cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a1a      	ldr	r2, [pc, #104]	@ (8007cf8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d00e      	beq.n	8007cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a18      	ldr	r2, [pc, #96]	@ (8007cfc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d009      	beq.n	8007cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a17      	ldr	r2, [pc, #92]	@ (8007d00 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d004      	beq.n	8007cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a15      	ldr	r2, [pc, #84]	@ (8007d04 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d10c      	bne.n	8007ccc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007cb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	68ba      	ldr	r2, [r7, #8]
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	68ba      	ldr	r2, [r7, #8]
 8007cca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2201      	movs	r2, #1
 8007cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007cdc:	2300      	movs	r3, #0
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3714      	adds	r7, #20
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce8:	4770      	bx	lr
 8007cea:	bf00      	nop
 8007cec:	40010000 	.word	0x40010000
 8007cf0:	40000400 	.word	0x40000400
 8007cf4:	40000800 	.word	0x40000800
 8007cf8:	40000c00 	.word	0x40000c00
 8007cfc:	40010400 	.word	0x40010400
 8007d00:	40014000 	.word	0x40014000
 8007d04:	40001800 	.word	0x40001800

08007d08 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d08:	b084      	sub	sp, #16
 8007d0a:	b580      	push	{r7, lr}
 8007d0c:	b084      	sub	sp, #16
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	6078      	str	r0, [r7, #4]
 8007d12:	f107 001c 	add.w	r0, r7, #28
 8007d16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007d1a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d123      	bne.n	8007d6a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d26:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	68db      	ldr	r3, [r3, #12]
 8007d32:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007d36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d3a:	687a      	ldr	r2, [r7, #4]
 8007d3c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	68db      	ldr	r3, [r3, #12]
 8007d42:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007d4a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007d4e:	2b01      	cmp	r3, #1
 8007d50:	d105      	bne.n	8007d5e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	68db      	ldr	r3, [r3, #12]
 8007d56:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 f9dc 	bl	800811c <USB_CoreReset>
 8007d64:	4603      	mov	r3, r0
 8007d66:	73fb      	strb	r3, [r7, #15]
 8007d68:	e01b      	b.n	8007da2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	68db      	ldr	r3, [r3, #12]
 8007d6e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f000 f9d0 	bl	800811c <USB_CoreReset>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007d80:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d106      	bne.n	8007d96 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d8c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	639a      	str	r2, [r3, #56]	@ 0x38
 8007d94:	e005      	b.n	8007da2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d9a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007da2:	7fbb      	ldrb	r3, [r7, #30]
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d10b      	bne.n	8007dc0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	f043 0206 	orr.w	r2, r3, #6
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	689b      	ldr	r3, [r3, #8]
 8007db8:	f043 0220 	orr.w	r2, r3, #32
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3710      	adds	r7, #16
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007dcc:	b004      	add	sp, #16
 8007dce:	4770      	bx	lr

08007dd0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	f043 0201 	orr.w	r2, r3, #1
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007de4:	2300      	movs	r3, #0
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	370c      	adds	r7, #12
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr

08007df2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007df2:	b480      	push	{r7}
 8007df4:	b083      	sub	sp, #12
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	689b      	ldr	r3, [r3, #8]
 8007dfe:	f023 0201 	bic.w	r2, r3, #1
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007e06:	2300      	movs	r3, #0
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	370c      	adds	r7, #12
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr

08007e14 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b084      	sub	sp, #16
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007e20:	2300      	movs	r3, #0
 8007e22:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	68db      	ldr	r3, [r3, #12]
 8007e28:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007e30:	78fb      	ldrb	r3, [r7, #3]
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d115      	bne.n	8007e62 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	68db      	ldr	r3, [r3, #12]
 8007e3a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007e42:	200a      	movs	r0, #10
 8007e44:	f7fa f8ac 	bl	8001fa0 <HAL_Delay>
      ms += 10U;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	330a      	adds	r3, #10
 8007e4c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f000 f956 	bl	8008100 <USB_GetMode>
 8007e54:	4603      	mov	r3, r0
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	d01e      	beq.n	8007e98 <USB_SetCurrentMode+0x84>
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	2bc7      	cmp	r3, #199	@ 0xc7
 8007e5e:	d9f0      	bls.n	8007e42 <USB_SetCurrentMode+0x2e>
 8007e60:	e01a      	b.n	8007e98 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007e62:	78fb      	ldrb	r3, [r7, #3]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d115      	bne.n	8007e94 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	68db      	ldr	r3, [r3, #12]
 8007e6c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007e74:	200a      	movs	r0, #10
 8007e76:	f7fa f893 	bl	8001fa0 <HAL_Delay>
      ms += 10U;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	330a      	adds	r3, #10
 8007e7e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f000 f93d 	bl	8008100 <USB_GetMode>
 8007e86:	4603      	mov	r3, r0
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d005      	beq.n	8007e98 <USB_SetCurrentMode+0x84>
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2bc7      	cmp	r3, #199	@ 0xc7
 8007e90:	d9f0      	bls.n	8007e74 <USB_SetCurrentMode+0x60>
 8007e92:	e001      	b.n	8007e98 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007e94:	2301      	movs	r3, #1
 8007e96:	e005      	b.n	8007ea4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2bc8      	cmp	r3, #200	@ 0xc8
 8007e9c:	d101      	bne.n	8007ea2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	e000      	b.n	8007ea4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007ea2:	2300      	movs	r3, #0
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3710      	adds	r7, #16
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b085      	sub	sp, #20
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	3301      	adds	r3, #1
 8007ebe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007ec6:	d901      	bls.n	8007ecc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007ec8:	2303      	movs	r3, #3
 8007eca:	e01b      	b.n	8007f04 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	691b      	ldr	r3, [r3, #16]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	daf2      	bge.n	8007eba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	019b      	lsls	r3, r3, #6
 8007edc:	f043 0220 	orr.w	r2, r3, #32
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007ef0:	d901      	bls.n	8007ef6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007ef2:	2303      	movs	r3, #3
 8007ef4:	e006      	b.n	8007f04 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	691b      	ldr	r3, [r3, #16]
 8007efa:	f003 0320 	and.w	r3, r3, #32
 8007efe:	2b20      	cmp	r3, #32
 8007f00:	d0f0      	beq.n	8007ee4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007f02:	2300      	movs	r3, #0
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3714      	adds	r7, #20
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr

08007f10 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b085      	sub	sp, #20
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	3301      	adds	r3, #1
 8007f20:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007f28:	d901      	bls.n	8007f2e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007f2a:	2303      	movs	r3, #3
 8007f2c:	e018      	b.n	8007f60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	691b      	ldr	r3, [r3, #16]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	daf2      	bge.n	8007f1c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007f36:	2300      	movs	r3, #0
 8007f38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2210      	movs	r2, #16
 8007f3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	3301      	adds	r3, #1
 8007f44:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007f4c:	d901      	bls.n	8007f52 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007f4e:	2303      	movs	r3, #3
 8007f50:	e006      	b.n	8007f60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	691b      	ldr	r3, [r3, #16]
 8007f56:	f003 0310 	and.w	r3, r3, #16
 8007f5a:	2b10      	cmp	r3, #16
 8007f5c:	d0f0      	beq.n	8007f40 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007f5e:	2300      	movs	r3, #0
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3714      	adds	r7, #20
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr

08007f6c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b089      	sub	sp, #36	@ 0x24
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	60f8      	str	r0, [r7, #12]
 8007f74:	60b9      	str	r1, [r7, #8]
 8007f76:	4611      	mov	r1, r2
 8007f78:	461a      	mov	r2, r3
 8007f7a:	460b      	mov	r3, r1
 8007f7c:	71fb      	strb	r3, [r7, #7]
 8007f7e:	4613      	mov	r3, r2
 8007f80:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007f8a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d123      	bne.n	8007fda <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007f92:	88bb      	ldrh	r3, [r7, #4]
 8007f94:	3303      	adds	r3, #3
 8007f96:	089b      	lsrs	r3, r3, #2
 8007f98:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	61bb      	str	r3, [r7, #24]
 8007f9e:	e018      	b.n	8007fd2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007fa0:	79fb      	ldrb	r3, [r7, #7]
 8007fa2:	031a      	lsls	r2, r3, #12
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	4413      	add	r3, r2
 8007fa8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007fac:	461a      	mov	r2, r3
 8007fae:	69fb      	ldr	r3, [r7, #28]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007fb4:	69fb      	ldr	r3, [r7, #28]
 8007fb6:	3301      	adds	r3, #1
 8007fb8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007fba:	69fb      	ldr	r3, [r7, #28]
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007fc0:	69fb      	ldr	r3, [r7, #28]
 8007fc2:	3301      	adds	r3, #1
 8007fc4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007fc6:	69fb      	ldr	r3, [r7, #28]
 8007fc8:	3301      	adds	r3, #1
 8007fca:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007fcc:	69bb      	ldr	r3, [r7, #24]
 8007fce:	3301      	adds	r3, #1
 8007fd0:	61bb      	str	r3, [r7, #24]
 8007fd2:	69ba      	ldr	r2, [r7, #24]
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	d3e2      	bcc.n	8007fa0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007fda:	2300      	movs	r3, #0
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3724      	adds	r7, #36	@ 0x24
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr

08007fe8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b08b      	sub	sp, #44	@ 0x2c
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	60b9      	str	r1, [r7, #8]
 8007ff2:	4613      	mov	r3, r2
 8007ff4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007ffe:	88fb      	ldrh	r3, [r7, #6]
 8008000:	089b      	lsrs	r3, r3, #2
 8008002:	b29b      	uxth	r3, r3
 8008004:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008006:	88fb      	ldrh	r3, [r7, #6]
 8008008:	f003 0303 	and.w	r3, r3, #3
 800800c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800800e:	2300      	movs	r3, #0
 8008010:	623b      	str	r3, [r7, #32]
 8008012:	e014      	b.n	800803e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008014:	69bb      	ldr	r3, [r7, #24]
 8008016:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800801a:	681a      	ldr	r2, [r3, #0]
 800801c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800801e:	601a      	str	r2, [r3, #0]
    pDest++;
 8008020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008022:	3301      	adds	r3, #1
 8008024:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008028:	3301      	adds	r3, #1
 800802a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800802c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800802e:	3301      	adds	r3, #1
 8008030:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008034:	3301      	adds	r3, #1
 8008036:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008038:	6a3b      	ldr	r3, [r7, #32]
 800803a:	3301      	adds	r3, #1
 800803c:	623b      	str	r3, [r7, #32]
 800803e:	6a3a      	ldr	r2, [r7, #32]
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	429a      	cmp	r2, r3
 8008044:	d3e6      	bcc.n	8008014 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008046:	8bfb      	ldrh	r3, [r7, #30]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d01e      	beq.n	800808a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800804c:	2300      	movs	r3, #0
 800804e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008050:	69bb      	ldr	r3, [r7, #24]
 8008052:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008056:	461a      	mov	r2, r3
 8008058:	f107 0310 	add.w	r3, r7, #16
 800805c:	6812      	ldr	r2, [r2, #0]
 800805e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008060:	693a      	ldr	r2, [r7, #16]
 8008062:	6a3b      	ldr	r3, [r7, #32]
 8008064:	b2db      	uxtb	r3, r3
 8008066:	00db      	lsls	r3, r3, #3
 8008068:	fa22 f303 	lsr.w	r3, r2, r3
 800806c:	b2da      	uxtb	r2, r3
 800806e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008070:	701a      	strb	r2, [r3, #0]
      i++;
 8008072:	6a3b      	ldr	r3, [r7, #32]
 8008074:	3301      	adds	r3, #1
 8008076:	623b      	str	r3, [r7, #32]
      pDest++;
 8008078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800807a:	3301      	adds	r3, #1
 800807c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800807e:	8bfb      	ldrh	r3, [r7, #30]
 8008080:	3b01      	subs	r3, #1
 8008082:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008084:	8bfb      	ldrh	r3, [r7, #30]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d1ea      	bne.n	8008060 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800808a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800808c:	4618      	mov	r0, r3
 800808e:	372c      	adds	r7, #44	@ 0x2c
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr

08008098 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008098:	b480      	push	{r7}
 800809a:	b085      	sub	sp, #20
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	695b      	ldr	r3, [r3, #20]
 80080a4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	699b      	ldr	r3, [r3, #24]
 80080aa:	68fa      	ldr	r2, [r7, #12]
 80080ac:	4013      	ands	r3, r2
 80080ae:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80080b0:	68fb      	ldr	r3, [r7, #12]
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3714      	adds	r7, #20
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr

080080be <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80080be:	b480      	push	{r7}
 80080c0:	b085      	sub	sp, #20
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
 80080c6:	460b      	mov	r3, r1
 80080c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80080ce:	78fb      	ldrb	r3, [r7, #3]
 80080d0:	015a      	lsls	r2, r3, #5
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	4413      	add	r3, r2
 80080d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080da:	689b      	ldr	r3, [r3, #8]
 80080dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80080de:	78fb      	ldrb	r3, [r7, #3]
 80080e0:	015a      	lsls	r2, r3, #5
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	4413      	add	r3, r2
 80080e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080ea:	68db      	ldr	r3, [r3, #12]
 80080ec:	68ba      	ldr	r2, [r7, #8]
 80080ee:	4013      	ands	r3, r2
 80080f0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80080f2:	68bb      	ldr	r3, [r7, #8]
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3714      	adds	r7, #20
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr

08008100 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008100:	b480      	push	{r7}
 8008102:	b083      	sub	sp, #12
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	695b      	ldr	r3, [r3, #20]
 800810c:	f003 0301 	and.w	r3, r3, #1
}
 8008110:	4618      	mov	r0, r3
 8008112:	370c      	adds	r7, #12
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr

0800811c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800811c:	b480      	push	{r7}
 800811e:	b085      	sub	sp, #20
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008124:	2300      	movs	r3, #0
 8008126:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	3301      	adds	r3, #1
 800812c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008134:	d901      	bls.n	800813a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008136:	2303      	movs	r3, #3
 8008138:	e022      	b.n	8008180 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	691b      	ldr	r3, [r3, #16]
 800813e:	2b00      	cmp	r3, #0
 8008140:	daf2      	bge.n	8008128 <USB_CoreReset+0xc>

  count = 10U;
 8008142:	230a      	movs	r3, #10
 8008144:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8008146:	e002      	b.n	800814e <USB_CoreReset+0x32>
  {
    count--;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	3b01      	subs	r3, #1
 800814c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d1f9      	bne.n	8008148 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	691b      	ldr	r3, [r3, #16]
 8008158:	f043 0201 	orr.w	r2, r3, #1
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	3301      	adds	r3, #1
 8008164:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800816c:	d901      	bls.n	8008172 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800816e:	2303      	movs	r3, #3
 8008170:	e006      	b.n	8008180 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	691b      	ldr	r3, [r3, #16]
 8008176:	f003 0301 	and.w	r3, r3, #1
 800817a:	2b01      	cmp	r3, #1
 800817c:	d0f0      	beq.n	8008160 <USB_CoreReset+0x44>

  return HAL_OK;
 800817e:	2300      	movs	r3, #0
}
 8008180:	4618      	mov	r0, r3
 8008182:	3714      	adds	r7, #20
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr

0800818c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800818c:	b084      	sub	sp, #16
 800818e:	b580      	push	{r7, lr}
 8008190:	b086      	sub	sp, #24
 8008192:	af00      	add	r7, sp, #0
 8008194:	6078      	str	r0, [r7, #4]
 8008196:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800819a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800819e:	2300      	movs	r3, #0
 80081a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80081ac:	461a      	mov	r2, r3
 80081ae:	2300      	movs	r3, #0
 80081b0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081b6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081c2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081ce:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	68db      	ldr	r3, [r3, #12]
 80081da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d119      	bne.n	8008216 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80081e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80081e6:	2b01      	cmp	r3, #1
 80081e8:	d10a      	bne.n	8008200 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	68fa      	ldr	r2, [r7, #12]
 80081f4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80081f8:	f043 0304 	orr.w	r3, r3, #4
 80081fc:	6013      	str	r3, [r2, #0]
 80081fe:	e014      	b.n	800822a <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	68fa      	ldr	r2, [r7, #12]
 800820a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800820e:	f023 0304 	bic.w	r3, r3, #4
 8008212:	6013      	str	r3, [r2, #0]
 8008214:	e009      	b.n	800822a <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	68fa      	ldr	r2, [r7, #12]
 8008220:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008224:	f023 0304 	bic.w	r3, r3, #4
 8008228:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800822a:	2110      	movs	r1, #16
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f7ff fe3d 	bl	8007eac <USB_FlushTxFifo>
 8008232:	4603      	mov	r3, r0
 8008234:	2b00      	cmp	r3, #0
 8008236:	d001      	beq.n	800823c <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8008238:	2301      	movs	r3, #1
 800823a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f7ff fe67 	bl	8007f10 <USB_FlushRxFifo>
 8008242:	4603      	mov	r3, r0
 8008244:	2b00      	cmp	r3, #0
 8008246:	d001      	beq.n	800824c <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8008248:	2301      	movs	r3, #1
 800824a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800824c:	2300      	movs	r3, #0
 800824e:	613b      	str	r3, [r7, #16]
 8008250:	e015      	b.n	800827e <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	015a      	lsls	r2, r3, #5
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	4413      	add	r3, r2
 800825a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800825e:	461a      	mov	r2, r3
 8008260:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008264:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	015a      	lsls	r2, r3, #5
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	4413      	add	r3, r2
 800826e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008272:	461a      	mov	r2, r3
 8008274:	2300      	movs	r3, #0
 8008276:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	3301      	adds	r3, #1
 800827c:	613b      	str	r3, [r7, #16]
 800827e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008282:	461a      	mov	r2, r3
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	4293      	cmp	r3, r2
 8008288:	d3e3      	bcc.n	8008252 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2200      	movs	r2, #0
 800828e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008296:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	4a18      	ldr	r2, [pc, #96]	@ (80082fc <USB_HostInit+0x170>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d10b      	bne.n	80082b8 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80082a6:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	4a15      	ldr	r2, [pc, #84]	@ (8008300 <USB_HostInit+0x174>)
 80082ac:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	4a14      	ldr	r2, [pc, #80]	@ (8008304 <USB_HostInit+0x178>)
 80082b2:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80082b6:	e009      	b.n	80082cc <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2280      	movs	r2, #128	@ 0x80
 80082bc:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	4a11      	ldr	r2, [pc, #68]	@ (8008308 <USB_HostInit+0x17c>)
 80082c2:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	4a11      	ldr	r2, [pc, #68]	@ (800830c <USB_HostInit+0x180>)
 80082c8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80082cc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d105      	bne.n	80082e0 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	699b      	ldr	r3, [r3, #24]
 80082d8:	f043 0210 	orr.w	r2, r3, #16
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	699a      	ldr	r2, [r3, #24]
 80082e4:	4b0a      	ldr	r3, [pc, #40]	@ (8008310 <USB_HostInit+0x184>)
 80082e6:	4313      	orrs	r3, r2
 80082e8:	687a      	ldr	r2, [r7, #4]
 80082ea:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80082ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3718      	adds	r7, #24
 80082f2:	46bd      	mov	sp, r7
 80082f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80082f8:	b004      	add	sp, #16
 80082fa:	4770      	bx	lr
 80082fc:	40040000 	.word	0x40040000
 8008300:	01000200 	.word	0x01000200
 8008304:	00e00300 	.word	0x00e00300
 8008308:	00600080 	.word	0x00600080
 800830c:	004000e0 	.word	0x004000e0
 8008310:	a3200008 	.word	0xa3200008

08008314 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008314:	b480      	push	{r7}
 8008316:	b085      	sub	sp, #20
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	460b      	mov	r3, r1
 800831e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	68fa      	ldr	r2, [r7, #12]
 800832e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008332:	f023 0303 	bic.w	r3, r3, #3
 8008336:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800833e:	681a      	ldr	r2, [r3, #0]
 8008340:	78fb      	ldrb	r3, [r7, #3]
 8008342:	f003 0303 	and.w	r3, r3, #3
 8008346:	68f9      	ldr	r1, [r7, #12]
 8008348:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800834c:	4313      	orrs	r3, r2
 800834e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008350:	78fb      	ldrb	r3, [r7, #3]
 8008352:	2b01      	cmp	r3, #1
 8008354:	d107      	bne.n	8008366 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800835c:	461a      	mov	r2, r3
 800835e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008362:	6053      	str	r3, [r2, #4]
 8008364:	e00c      	b.n	8008380 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8008366:	78fb      	ldrb	r3, [r7, #3]
 8008368:	2b02      	cmp	r3, #2
 800836a:	d107      	bne.n	800837c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008372:	461a      	mov	r2, r3
 8008374:	f241 7370 	movw	r3, #6000	@ 0x1770
 8008378:	6053      	str	r3, [r2, #4]
 800837a:	e001      	b.n	8008380 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800837c:	2301      	movs	r3, #1
 800837e:	e000      	b.n	8008382 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8008380:	2300      	movs	r3, #0
}
 8008382:	4618      	mov	r0, r3
 8008384:	3714      	adds	r7, #20
 8008386:	46bd      	mov	sp, r7
 8008388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838c:	4770      	bx	lr

0800838e <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800838e:	b580      	push	{r7, lr}
 8008390:	b084      	sub	sp, #16
 8008392:	af00      	add	r7, sp, #0
 8008394:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800839a:	2300      	movs	r3, #0
 800839c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80083ae:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	68fa      	ldr	r2, [r7, #12]
 80083b4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80083b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80083bc:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80083be:	2064      	movs	r0, #100	@ 0x64
 80083c0:	f7f9 fdee 	bl	8001fa0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	68fa      	ldr	r2, [r7, #12]
 80083c8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80083cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80083d0:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80083d2:	200a      	movs	r0, #10
 80083d4:	f7f9 fde4 	bl	8001fa0 <HAL_Delay>

  return HAL_OK;
 80083d8:	2300      	movs	r3, #0
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3710      	adds	r7, #16
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}

080083e2 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80083e2:	b480      	push	{r7}
 80083e4:	b085      	sub	sp, #20
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	6078      	str	r0, [r7, #4]
 80083ea:	460b      	mov	r3, r1
 80083ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80083f2:	2300      	movs	r3, #0
 80083f4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8008406:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800840e:	2b00      	cmp	r3, #0
 8008410:	d109      	bne.n	8008426 <USB_DriveVbus+0x44>
 8008412:	78fb      	ldrb	r3, [r7, #3]
 8008414:	2b01      	cmp	r3, #1
 8008416:	d106      	bne.n	8008426 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	68fa      	ldr	r2, [r7, #12]
 800841c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008420:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008424:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800842c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008430:	d109      	bne.n	8008446 <USB_DriveVbus+0x64>
 8008432:	78fb      	ldrb	r3, [r7, #3]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d106      	bne.n	8008446 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	68fa      	ldr	r2, [r7, #12]
 800843c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008440:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008444:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008446:	2300      	movs	r3, #0
}
 8008448:	4618      	mov	r0, r3
 800844a:	3714      	adds	r7, #20
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr

08008454 <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8008454:	b480      	push	{r7}
 8008456:	b085      	sub	sp, #20
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008460:	2300      	movs	r3, #0
 8008462:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	0c5b      	lsrs	r3, r3, #17
 8008472:	f003 0303 	and.w	r3, r3, #3
}
 8008476:	4618      	mov	r0, r3
 8008478:	3714      	adds	r7, #20
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr

08008482 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8008482:	b480      	push	{r7}
 8008484:	b085      	sub	sp, #20
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008494:	689b      	ldr	r3, [r3, #8]
 8008496:	b29b      	uxth	r3, r3
}
 8008498:	4618      	mov	r0, r3
 800849a:	3714      	adds	r7, #20
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr

080084a4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b088      	sub	sp, #32
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	4608      	mov	r0, r1
 80084ae:	4611      	mov	r1, r2
 80084b0:	461a      	mov	r2, r3
 80084b2:	4603      	mov	r3, r0
 80084b4:	70fb      	strb	r3, [r7, #3]
 80084b6:	460b      	mov	r3, r1
 80084b8:	70bb      	strb	r3, [r7, #2]
 80084ba:	4613      	mov	r3, r2
 80084bc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80084be:	2300      	movs	r3, #0
 80084c0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80084c6:	78fb      	ldrb	r3, [r7, #3]
 80084c8:	015a      	lsls	r2, r3, #5
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	4413      	add	r3, r2
 80084ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084d2:	461a      	mov	r2, r3
 80084d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80084d8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80084da:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80084de:	2b03      	cmp	r3, #3
 80084e0:	d87c      	bhi.n	80085dc <USB_HC_Init+0x138>
 80084e2:	a201      	add	r2, pc, #4	@ (adr r2, 80084e8 <USB_HC_Init+0x44>)
 80084e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e8:	080084f9 	.word	0x080084f9
 80084ec:	0800859f 	.word	0x0800859f
 80084f0:	080084f9 	.word	0x080084f9
 80084f4:	08008561 	.word	0x08008561
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80084f8:	78fb      	ldrb	r3, [r7, #3]
 80084fa:	015a      	lsls	r2, r3, #5
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	4413      	add	r3, r2
 8008500:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008504:	461a      	mov	r2, r3
 8008506:	f240 439d 	movw	r3, #1181	@ 0x49d
 800850a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800850c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008510:	2b00      	cmp	r3, #0
 8008512:	da10      	bge.n	8008536 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008514:	78fb      	ldrb	r3, [r7, #3]
 8008516:	015a      	lsls	r2, r3, #5
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	4413      	add	r3, r2
 800851c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008520:	68db      	ldr	r3, [r3, #12]
 8008522:	78fa      	ldrb	r2, [r7, #3]
 8008524:	0151      	lsls	r1, r2, #5
 8008526:	693a      	ldr	r2, [r7, #16]
 8008528:	440a      	add	r2, r1
 800852a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800852e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008532:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8008534:	e055      	b.n	80085e2 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	4a6f      	ldr	r2, [pc, #444]	@ (80086f8 <USB_HC_Init+0x254>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d151      	bne.n	80085e2 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800853e:	78fb      	ldrb	r3, [r7, #3]
 8008540:	015a      	lsls	r2, r3, #5
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	4413      	add	r3, r2
 8008546:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800854a:	68db      	ldr	r3, [r3, #12]
 800854c:	78fa      	ldrb	r2, [r7, #3]
 800854e:	0151      	lsls	r1, r2, #5
 8008550:	693a      	ldr	r2, [r7, #16]
 8008552:	440a      	add	r2, r1
 8008554:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008558:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800855c:	60d3      	str	r3, [r2, #12]
      break;
 800855e:	e040      	b.n	80085e2 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008560:	78fb      	ldrb	r3, [r7, #3]
 8008562:	015a      	lsls	r2, r3, #5
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	4413      	add	r3, r2
 8008568:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800856c:	461a      	mov	r2, r3
 800856e:	f240 639d 	movw	r3, #1693	@ 0x69d
 8008572:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008574:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008578:	2b00      	cmp	r3, #0
 800857a:	da34      	bge.n	80085e6 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800857c:	78fb      	ldrb	r3, [r7, #3]
 800857e:	015a      	lsls	r2, r3, #5
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	4413      	add	r3, r2
 8008584:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008588:	68db      	ldr	r3, [r3, #12]
 800858a:	78fa      	ldrb	r2, [r7, #3]
 800858c:	0151      	lsls	r1, r2, #5
 800858e:	693a      	ldr	r2, [r7, #16]
 8008590:	440a      	add	r2, r1
 8008592:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008596:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800859a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800859c:	e023      	b.n	80085e6 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800859e:	78fb      	ldrb	r3, [r7, #3]
 80085a0:	015a      	lsls	r2, r3, #5
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	4413      	add	r3, r2
 80085a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085aa:	461a      	mov	r2, r3
 80085ac:	f240 2325 	movw	r3, #549	@ 0x225
 80085b0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80085b2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	da17      	bge.n	80085ea <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80085ba:	78fb      	ldrb	r3, [r7, #3]
 80085bc:	015a      	lsls	r2, r3, #5
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	4413      	add	r3, r2
 80085c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085c6:	68db      	ldr	r3, [r3, #12]
 80085c8:	78fa      	ldrb	r2, [r7, #3]
 80085ca:	0151      	lsls	r1, r2, #5
 80085cc:	693a      	ldr	r2, [r7, #16]
 80085ce:	440a      	add	r2, r1
 80085d0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80085d4:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80085d8:	60d3      	str	r3, [r2, #12]
      }
      break;
 80085da:	e006      	b.n	80085ea <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 80085dc:	2301      	movs	r3, #1
 80085de:	77fb      	strb	r3, [r7, #31]
      break;
 80085e0:	e004      	b.n	80085ec <USB_HC_Init+0x148>
      break;
 80085e2:	bf00      	nop
 80085e4:	e002      	b.n	80085ec <USB_HC_Init+0x148>
      break;
 80085e6:	bf00      	nop
 80085e8:	e000      	b.n	80085ec <USB_HC_Init+0x148>
      break;
 80085ea:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80085ec:	78fb      	ldrb	r3, [r7, #3]
 80085ee:	015a      	lsls	r2, r3, #5
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	4413      	add	r3, r2
 80085f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085f8:	461a      	mov	r2, r3
 80085fa:	2300      	movs	r3, #0
 80085fc:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80085fe:	78fb      	ldrb	r3, [r7, #3]
 8008600:	015a      	lsls	r2, r3, #5
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	4413      	add	r3, r2
 8008606:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800860a:	68db      	ldr	r3, [r3, #12]
 800860c:	78fa      	ldrb	r2, [r7, #3]
 800860e:	0151      	lsls	r1, r2, #5
 8008610:	693a      	ldr	r2, [r7, #16]
 8008612:	440a      	add	r2, r1
 8008614:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008618:	f043 0302 	orr.w	r3, r3, #2
 800861c:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008624:	699a      	ldr	r2, [r3, #24]
 8008626:	78fb      	ldrb	r3, [r7, #3]
 8008628:	f003 030f 	and.w	r3, r3, #15
 800862c:	2101      	movs	r1, #1
 800862e:	fa01 f303 	lsl.w	r3, r1, r3
 8008632:	6939      	ldr	r1, [r7, #16]
 8008634:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008638:	4313      	orrs	r3, r2
 800863a:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	699b      	ldr	r3, [r3, #24]
 8008640:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008648:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800864c:	2b00      	cmp	r3, #0
 800864e:	da03      	bge.n	8008658 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008650:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008654:	61bb      	str	r3, [r7, #24]
 8008656:	e001      	b.n	800865c <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8008658:	2300      	movs	r3, #0
 800865a:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f7ff fef9 	bl	8008454 <USB_GetHostSpeed>
 8008662:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008664:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008668:	2b02      	cmp	r3, #2
 800866a:	d106      	bne.n	800867a <USB_HC_Init+0x1d6>
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2b02      	cmp	r3, #2
 8008670:	d003      	beq.n	800867a <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008672:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8008676:	617b      	str	r3, [r7, #20]
 8008678:	e001      	b.n	800867e <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800867a:	2300      	movs	r3, #0
 800867c:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800867e:	787b      	ldrb	r3, [r7, #1]
 8008680:	059b      	lsls	r3, r3, #22
 8008682:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008686:	78bb      	ldrb	r3, [r7, #2]
 8008688:	02db      	lsls	r3, r3, #11
 800868a:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800868e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008690:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008694:	049b      	lsls	r3, r3, #18
 8008696:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800869a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800869c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800869e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80086a2:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80086a4:	69bb      	ldr	r3, [r7, #24]
 80086a6:	431a      	orrs	r2, r3
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80086ac:	78fa      	ldrb	r2, [r7, #3]
 80086ae:	0151      	lsls	r1, r2, #5
 80086b0:	693a      	ldr	r2, [r7, #16]
 80086b2:	440a      	add	r2, r1
 80086b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80086b8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80086bc:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80086be:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80086c2:	2b03      	cmp	r3, #3
 80086c4:	d003      	beq.n	80086ce <USB_HC_Init+0x22a>
 80086c6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80086ca:	2b01      	cmp	r3, #1
 80086cc:	d10f      	bne.n	80086ee <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80086ce:	78fb      	ldrb	r3, [r7, #3]
 80086d0:	015a      	lsls	r2, r3, #5
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	4413      	add	r3, r2
 80086d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	78fa      	ldrb	r2, [r7, #3]
 80086de:	0151      	lsls	r1, r2, #5
 80086e0:	693a      	ldr	r2, [r7, #16]
 80086e2:	440a      	add	r2, r1
 80086e4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80086e8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80086ec:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80086ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3720      	adds	r7, #32
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}
 80086f8:	40040000 	.word	0x40040000

080086fc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b08c      	sub	sp, #48	@ 0x30
 8008700:	af02      	add	r7, sp, #8
 8008702:	60f8      	str	r0, [r7, #12]
 8008704:	60b9      	str	r1, [r7, #8]
 8008706:	4613      	mov	r3, r2
 8008708:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	785b      	ldrb	r3, [r3, #1]
 8008712:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8008714:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008718:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	4a5d      	ldr	r2, [pc, #372]	@ (8008894 <USB_HC_StartXfer+0x198>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d12f      	bne.n	8008782 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8008722:	79fb      	ldrb	r3, [r7, #7]
 8008724:	2b01      	cmp	r3, #1
 8008726:	d11c      	bne.n	8008762 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	7c9b      	ldrb	r3, [r3, #18]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d003      	beq.n	8008738 <USB_HC_StartXfer+0x3c>
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	7c9b      	ldrb	r3, [r3, #18]
 8008734:	2b02      	cmp	r3, #2
 8008736:	d124      	bne.n	8008782 <USB_HC_StartXfer+0x86>
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	799b      	ldrb	r3, [r3, #6]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d120      	bne.n	8008782 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008740:	69fb      	ldr	r3, [r7, #28]
 8008742:	015a      	lsls	r2, r3, #5
 8008744:	6a3b      	ldr	r3, [r7, #32]
 8008746:	4413      	add	r3, r2
 8008748:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800874c:	68db      	ldr	r3, [r3, #12]
 800874e:	69fa      	ldr	r2, [r7, #28]
 8008750:	0151      	lsls	r1, r2, #5
 8008752:	6a3a      	ldr	r2, [r7, #32]
 8008754:	440a      	add	r2, r1
 8008756:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800875a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800875e:	60d3      	str	r3, [r2, #12]
 8008760:	e00f      	b.n	8008782 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	791b      	ldrb	r3, [r3, #4]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d10b      	bne.n	8008782 <USB_HC_StartXfer+0x86>
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	795b      	ldrb	r3, [r3, #5]
 800876e:	2b01      	cmp	r3, #1
 8008770:	d107      	bne.n	8008782 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	785b      	ldrb	r3, [r3, #1]
 8008776:	4619      	mov	r1, r3
 8008778:	68f8      	ldr	r0, [r7, #12]
 800877a:	f000 fb6b 	bl	8008e54 <USB_DoPing>
        return HAL_OK;
 800877e:	2300      	movs	r3, #0
 8008780:	e232      	b.n	8008be8 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	799b      	ldrb	r3, [r3, #6]
 8008786:	2b01      	cmp	r3, #1
 8008788:	d158      	bne.n	800883c <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800878a:	2301      	movs	r3, #1
 800878c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	78db      	ldrb	r3, [r3, #3]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d007      	beq.n	80087a6 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008796:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008798:	68ba      	ldr	r2, [r7, #8]
 800879a:	8a92      	ldrh	r2, [r2, #20]
 800879c:	fb03 f202 	mul.w	r2, r3, r2
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	61da      	str	r2, [r3, #28]
 80087a4:	e07c      	b.n	80088a0 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	7c9b      	ldrb	r3, [r3, #18]
 80087aa:	2b01      	cmp	r3, #1
 80087ac:	d130      	bne.n	8008810 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	6a1b      	ldr	r3, [r3, #32]
 80087b2:	2bbc      	cmp	r3, #188	@ 0xbc
 80087b4:	d918      	bls.n	80087e8 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	8a9b      	ldrh	r3, [r3, #20]
 80087ba:	461a      	mov	r2, r3
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	69da      	ldr	r2, [r3, #28]
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	68db      	ldr	r3, [r3, #12]
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d003      	beq.n	80087d8 <USB_HC_StartXfer+0xdc>
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	68db      	ldr	r3, [r3, #12]
 80087d4:	2b02      	cmp	r3, #2
 80087d6:	d103      	bne.n	80087e0 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	2202      	movs	r2, #2
 80087dc:	60da      	str	r2, [r3, #12]
 80087de:	e05f      	b.n	80088a0 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	2201      	movs	r2, #1
 80087e4:	60da      	str	r2, [r3, #12]
 80087e6:	e05b      	b.n	80088a0 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	6a1a      	ldr	r2, [r3, #32]
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	68db      	ldr	r3, [r3, #12]
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	d007      	beq.n	8008808 <USB_HC_StartXfer+0x10c>
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	68db      	ldr	r3, [r3, #12]
 80087fc:	2b02      	cmp	r3, #2
 80087fe:	d003      	beq.n	8008808 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	2204      	movs	r2, #4
 8008804:	60da      	str	r2, [r3, #12]
 8008806:	e04b      	b.n	80088a0 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	2203      	movs	r2, #3
 800880c:	60da      	str	r2, [r3, #12]
 800880e:	e047      	b.n	80088a0 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8008810:	79fb      	ldrb	r3, [r7, #7]
 8008812:	2b01      	cmp	r3, #1
 8008814:	d10d      	bne.n	8008832 <USB_HC_StartXfer+0x136>
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	6a1b      	ldr	r3, [r3, #32]
 800881a:	68ba      	ldr	r2, [r7, #8]
 800881c:	8a92      	ldrh	r2, [r2, #20]
 800881e:	4293      	cmp	r3, r2
 8008820:	d907      	bls.n	8008832 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008822:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008824:	68ba      	ldr	r2, [r7, #8]
 8008826:	8a92      	ldrh	r2, [r2, #20]
 8008828:	fb03 f202 	mul.w	r2, r3, r2
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	61da      	str	r2, [r3, #28]
 8008830:	e036      	b.n	80088a0 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	6a1a      	ldr	r2, [r3, #32]
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	61da      	str	r2, [r3, #28]
 800883a:	e031      	b.n	80088a0 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	6a1b      	ldr	r3, [r3, #32]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d018      	beq.n	8008876 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	6a1b      	ldr	r3, [r3, #32]
 8008848:	68ba      	ldr	r2, [r7, #8]
 800884a:	8a92      	ldrh	r2, [r2, #20]
 800884c:	4413      	add	r3, r2
 800884e:	3b01      	subs	r3, #1
 8008850:	68ba      	ldr	r2, [r7, #8]
 8008852:	8a92      	ldrh	r2, [r2, #20]
 8008854:	fbb3 f3f2 	udiv	r3, r3, r2
 8008858:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800885a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800885c:	8b7b      	ldrh	r3, [r7, #26]
 800885e:	429a      	cmp	r2, r3
 8008860:	d90b      	bls.n	800887a <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8008862:	8b7b      	ldrh	r3, [r7, #26]
 8008864:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008866:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008868:	68ba      	ldr	r2, [r7, #8]
 800886a:	8a92      	ldrh	r2, [r2, #20]
 800886c:	fb03 f202 	mul.w	r2, r3, r2
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	61da      	str	r2, [r3, #28]
 8008874:	e001      	b.n	800887a <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8008876:	2301      	movs	r3, #1
 8008878:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	78db      	ldrb	r3, [r3, #3]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d00a      	beq.n	8008898 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008882:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008884:	68ba      	ldr	r2, [r7, #8]
 8008886:	8a92      	ldrh	r2, [r2, #20]
 8008888:	fb03 f202 	mul.w	r2, r3, r2
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	61da      	str	r2, [r3, #28]
 8008890:	e006      	b.n	80088a0 <USB_HC_StartXfer+0x1a4>
 8008892:	bf00      	nop
 8008894:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	6a1a      	ldr	r2, [r3, #32]
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	69db      	ldr	r3, [r3, #28]
 80088a4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80088a8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80088aa:	04d9      	lsls	r1, r3, #19
 80088ac:	4ba3      	ldr	r3, [pc, #652]	@ (8008b3c <USB_HC_StartXfer+0x440>)
 80088ae:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80088b0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	7d9b      	ldrb	r3, [r3, #22]
 80088b6:	075b      	lsls	r3, r3, #29
 80088b8:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80088bc:	69f9      	ldr	r1, [r7, #28]
 80088be:	0148      	lsls	r0, r1, #5
 80088c0:	6a39      	ldr	r1, [r7, #32]
 80088c2:	4401      	add	r1, r0
 80088c4:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80088c8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80088ca:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80088cc:	79fb      	ldrb	r3, [r7, #7]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d009      	beq.n	80088e6 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	6999      	ldr	r1, [r3, #24]
 80088d6:	69fb      	ldr	r3, [r7, #28]
 80088d8:	015a      	lsls	r2, r3, #5
 80088da:	6a3b      	ldr	r3, [r7, #32]
 80088dc:	4413      	add	r3, r2
 80088de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088e2:	460a      	mov	r2, r1
 80088e4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80088e6:	6a3b      	ldr	r3, [r7, #32]
 80088e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80088ec:	689b      	ldr	r3, [r3, #8]
 80088ee:	f003 0301 	and.w	r3, r3, #1
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	bf0c      	ite	eq
 80088f6:	2301      	moveq	r3, #1
 80088f8:	2300      	movne	r3, #0
 80088fa:	b2db      	uxtb	r3, r3
 80088fc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80088fe:	69fb      	ldr	r3, [r7, #28]
 8008900:	015a      	lsls	r2, r3, #5
 8008902:	6a3b      	ldr	r3, [r7, #32]
 8008904:	4413      	add	r3, r2
 8008906:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	69fa      	ldr	r2, [r7, #28]
 800890e:	0151      	lsls	r1, r2, #5
 8008910:	6a3a      	ldr	r2, [r7, #32]
 8008912:	440a      	add	r2, r1
 8008914:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008918:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800891c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800891e:	69fb      	ldr	r3, [r7, #28]
 8008920:	015a      	lsls	r2, r3, #5
 8008922:	6a3b      	ldr	r3, [r7, #32]
 8008924:	4413      	add	r3, r2
 8008926:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800892a:	681a      	ldr	r2, [r3, #0]
 800892c:	7e7b      	ldrb	r3, [r7, #25]
 800892e:	075b      	lsls	r3, r3, #29
 8008930:	69f9      	ldr	r1, [r7, #28]
 8008932:	0148      	lsls	r0, r1, #5
 8008934:	6a39      	ldr	r1, [r7, #32]
 8008936:	4401      	add	r1, r0
 8008938:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800893c:	4313      	orrs	r3, r2
 800893e:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	799b      	ldrb	r3, [r3, #6]
 8008944:	2b01      	cmp	r3, #1
 8008946:	f040 80c3 	bne.w	8008ad0 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	7c5b      	ldrb	r3, [r3, #17]
 800894e:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008950:	68ba      	ldr	r2, [r7, #8]
 8008952:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008954:	4313      	orrs	r3, r2
 8008956:	69fa      	ldr	r2, [r7, #28]
 8008958:	0151      	lsls	r1, r2, #5
 800895a:	6a3a      	ldr	r2, [r7, #32]
 800895c:	440a      	add	r2, r1
 800895e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008962:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008966:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8008968:	69fb      	ldr	r3, [r7, #28]
 800896a:	015a      	lsls	r2, r3, #5
 800896c:	6a3b      	ldr	r3, [r7, #32]
 800896e:	4413      	add	r3, r2
 8008970:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008974:	68db      	ldr	r3, [r3, #12]
 8008976:	69fa      	ldr	r2, [r7, #28]
 8008978:	0151      	lsls	r1, r2, #5
 800897a:	6a3a      	ldr	r2, [r7, #32]
 800897c:	440a      	add	r2, r1
 800897e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008982:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008986:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	79db      	ldrb	r3, [r3, #7]
 800898c:	2b01      	cmp	r3, #1
 800898e:	d123      	bne.n	80089d8 <USB_HC_StartXfer+0x2dc>
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	78db      	ldrb	r3, [r3, #3]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d11f      	bne.n	80089d8 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008998:	69fb      	ldr	r3, [r7, #28]
 800899a:	015a      	lsls	r2, r3, #5
 800899c:	6a3b      	ldr	r3, [r7, #32]
 800899e:	4413      	add	r3, r2
 80089a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	69fa      	ldr	r2, [r7, #28]
 80089a8:	0151      	lsls	r1, r2, #5
 80089aa:	6a3a      	ldr	r2, [r7, #32]
 80089ac:	440a      	add	r2, r1
 80089ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80089b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80089b6:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80089b8:	69fb      	ldr	r3, [r7, #28]
 80089ba:	015a      	lsls	r2, r3, #5
 80089bc:	6a3b      	ldr	r3, [r7, #32]
 80089be:	4413      	add	r3, r2
 80089c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089c4:	68db      	ldr	r3, [r3, #12]
 80089c6:	69fa      	ldr	r2, [r7, #28]
 80089c8:	0151      	lsls	r1, r2, #5
 80089ca:	6a3a      	ldr	r2, [r7, #32]
 80089cc:	440a      	add	r2, r1
 80089ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80089d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089d6:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	7c9b      	ldrb	r3, [r3, #18]
 80089dc:	2b01      	cmp	r3, #1
 80089de:	d003      	beq.n	80089e8 <USB_HC_StartXfer+0x2ec>
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	7c9b      	ldrb	r3, [r3, #18]
 80089e4:	2b03      	cmp	r3, #3
 80089e6:	d117      	bne.n	8008a18 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	d113      	bne.n	8008a18 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	78db      	ldrb	r3, [r3, #3]
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	d10f      	bne.n	8008a18 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80089f8:	69fb      	ldr	r3, [r7, #28]
 80089fa:	015a      	lsls	r2, r3, #5
 80089fc:	6a3b      	ldr	r3, [r7, #32]
 80089fe:	4413      	add	r3, r2
 8008a00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	69fa      	ldr	r2, [r7, #28]
 8008a08:	0151      	lsls	r1, r2, #5
 8008a0a:	6a3a      	ldr	r2, [r7, #32]
 8008a0c:	440a      	add	r2, r1
 8008a0e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008a12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008a16:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	7c9b      	ldrb	r3, [r3, #18]
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d162      	bne.n	8008ae6 <USB_HC_StartXfer+0x3ea>
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	78db      	ldrb	r3, [r3, #3]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d15e      	bne.n	8008ae6 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	68db      	ldr	r3, [r3, #12]
 8008a2c:	3b01      	subs	r3, #1
 8008a2e:	2b03      	cmp	r3, #3
 8008a30:	d858      	bhi.n	8008ae4 <USB_HC_StartXfer+0x3e8>
 8008a32:	a201      	add	r2, pc, #4	@ (adr r2, 8008a38 <USB_HC_StartXfer+0x33c>)
 8008a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a38:	08008a49 	.word	0x08008a49
 8008a3c:	08008a6b 	.word	0x08008a6b
 8008a40:	08008a8d 	.word	0x08008a8d
 8008a44:	08008aaf 	.word	0x08008aaf
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8008a48:	69fb      	ldr	r3, [r7, #28]
 8008a4a:	015a      	lsls	r2, r3, #5
 8008a4c:	6a3b      	ldr	r3, [r7, #32]
 8008a4e:	4413      	add	r3, r2
 8008a50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a54:	685b      	ldr	r3, [r3, #4]
 8008a56:	69fa      	ldr	r2, [r7, #28]
 8008a58:	0151      	lsls	r1, r2, #5
 8008a5a:	6a3a      	ldr	r2, [r7, #32]
 8008a5c:	440a      	add	r2, r1
 8008a5e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008a62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a66:	6053      	str	r3, [r2, #4]
          break;
 8008a68:	e03d      	b.n	8008ae6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8008a6a:	69fb      	ldr	r3, [r7, #28]
 8008a6c:	015a      	lsls	r2, r3, #5
 8008a6e:	6a3b      	ldr	r3, [r7, #32]
 8008a70:	4413      	add	r3, r2
 8008a72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a76:	685b      	ldr	r3, [r3, #4]
 8008a78:	69fa      	ldr	r2, [r7, #28]
 8008a7a:	0151      	lsls	r1, r2, #5
 8008a7c:	6a3a      	ldr	r2, [r7, #32]
 8008a7e:	440a      	add	r2, r1
 8008a80:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008a84:	f043 030e 	orr.w	r3, r3, #14
 8008a88:	6053      	str	r3, [r2, #4]
          break;
 8008a8a:	e02c      	b.n	8008ae6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8008a8c:	69fb      	ldr	r3, [r7, #28]
 8008a8e:	015a      	lsls	r2, r3, #5
 8008a90:	6a3b      	ldr	r3, [r7, #32]
 8008a92:	4413      	add	r3, r2
 8008a94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	69fa      	ldr	r2, [r7, #28]
 8008a9c:	0151      	lsls	r1, r2, #5
 8008a9e:	6a3a      	ldr	r2, [r7, #32]
 8008aa0:	440a      	add	r2, r1
 8008aa2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008aa6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008aaa:	6053      	str	r3, [r2, #4]
          break;
 8008aac:	e01b      	b.n	8008ae6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8008aae:	69fb      	ldr	r3, [r7, #28]
 8008ab0:	015a      	lsls	r2, r3, #5
 8008ab2:	6a3b      	ldr	r3, [r7, #32]
 8008ab4:	4413      	add	r3, r2
 8008ab6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	69fa      	ldr	r2, [r7, #28]
 8008abe:	0151      	lsls	r1, r2, #5
 8008ac0:	6a3a      	ldr	r2, [r7, #32]
 8008ac2:	440a      	add	r2, r1
 8008ac4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008ac8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008acc:	6053      	str	r3, [r2, #4]
          break;
 8008ace:	e00a      	b.n	8008ae6 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008ad0:	69fb      	ldr	r3, [r7, #28]
 8008ad2:	015a      	lsls	r2, r3, #5
 8008ad4:	6a3b      	ldr	r3, [r7, #32]
 8008ad6:	4413      	add	r3, r2
 8008ad8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008adc:	461a      	mov	r2, r3
 8008ade:	2300      	movs	r3, #0
 8008ae0:	6053      	str	r3, [r2, #4]
 8008ae2:	e000      	b.n	8008ae6 <USB_HC_StartXfer+0x3ea>
          break;
 8008ae4:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008ae6:	69fb      	ldr	r3, [r7, #28]
 8008ae8:	015a      	lsls	r2, r3, #5
 8008aea:	6a3b      	ldr	r3, [r7, #32]
 8008aec:	4413      	add	r3, r2
 8008aee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008afc:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	78db      	ldrb	r3, [r3, #3]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d004      	beq.n	8008b10 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b0c:	613b      	str	r3, [r7, #16]
 8008b0e:	e003      	b.n	8008b18 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008b16:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008b1e:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008b20:	69fb      	ldr	r3, [r7, #28]
 8008b22:	015a      	lsls	r2, r3, #5
 8008b24:	6a3b      	ldr	r3, [r7, #32]
 8008b26:	4413      	add	r3, r2
 8008b28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b2c:	461a      	mov	r2, r3
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008b32:	79fb      	ldrb	r3, [r7, #7]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d003      	beq.n	8008b40 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	e055      	b.n	8008be8 <USB_HC_StartXfer+0x4ec>
 8008b3c:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	78db      	ldrb	r3, [r3, #3]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d14e      	bne.n	8008be6 <USB_HC_StartXfer+0x4ea>
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	6a1b      	ldr	r3, [r3, #32]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d04a      	beq.n	8008be6 <USB_HC_StartXfer+0x4ea>
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	79db      	ldrb	r3, [r3, #7]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d146      	bne.n	8008be6 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	7c9b      	ldrb	r3, [r3, #18]
 8008b5c:	2b03      	cmp	r3, #3
 8008b5e:	d831      	bhi.n	8008bc4 <USB_HC_StartXfer+0x4c8>
 8008b60:	a201      	add	r2, pc, #4	@ (adr r2, 8008b68 <USB_HC_StartXfer+0x46c>)
 8008b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b66:	bf00      	nop
 8008b68:	08008b79 	.word	0x08008b79
 8008b6c:	08008b9d 	.word	0x08008b9d
 8008b70:	08008b79 	.word	0x08008b79
 8008b74:	08008b9d 	.word	0x08008b9d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	6a1b      	ldr	r3, [r3, #32]
 8008b7c:	3303      	adds	r3, #3
 8008b7e:	089b      	lsrs	r3, r3, #2
 8008b80:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008b82:	8afa      	ldrh	r2, [r7, #22]
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d91c      	bls.n	8008bc8 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	699b      	ldr	r3, [r3, #24]
 8008b92:	f043 0220 	orr.w	r2, r3, #32
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	619a      	str	r2, [r3, #24]
        }
        break;
 8008b9a:	e015      	b.n	8008bc8 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	6a1b      	ldr	r3, [r3, #32]
 8008ba0:	3303      	adds	r3, #3
 8008ba2:	089b      	lsrs	r3, r3, #2
 8008ba4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008ba6:	8afa      	ldrh	r2, [r7, #22]
 8008ba8:	6a3b      	ldr	r3, [r7, #32]
 8008baa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008bae:	691b      	ldr	r3, [r3, #16]
 8008bb0:	b29b      	uxth	r3, r3
 8008bb2:	429a      	cmp	r2, r3
 8008bb4:	d90a      	bls.n	8008bcc <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	699b      	ldr	r3, [r3, #24]
 8008bba:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	619a      	str	r2, [r3, #24]
        }
        break;
 8008bc2:	e003      	b.n	8008bcc <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8008bc4:	bf00      	nop
 8008bc6:	e002      	b.n	8008bce <USB_HC_StartXfer+0x4d2>
        break;
 8008bc8:	bf00      	nop
 8008bca:	e000      	b.n	8008bce <USB_HC_StartXfer+0x4d2>
        break;
 8008bcc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	6999      	ldr	r1, [r3, #24]
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	785a      	ldrb	r2, [r3, #1]
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	6a1b      	ldr	r3, [r3, #32]
 8008bda:	b29b      	uxth	r3, r3
 8008bdc:	2000      	movs	r0, #0
 8008bde:	9000      	str	r0, [sp, #0]
 8008be0:	68f8      	ldr	r0, [r7, #12]
 8008be2:	f7ff f9c3 	bl	8007f6c <USB_WritePacket>
  }

  return HAL_OK;
 8008be6:	2300      	movs	r3, #0
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3728      	adds	r7, #40	@ 0x28
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}

08008bf0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b085      	sub	sp, #20
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008c02:	695b      	ldr	r3, [r3, #20]
 8008c04:	b29b      	uxth	r3, r3
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3714      	adds	r7, #20
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c10:	4770      	bx	lr

08008c12 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008c12:	b480      	push	{r7}
 8008c14:	b089      	sub	sp, #36	@ 0x24
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	6078      	str	r0, [r7, #4]
 8008c1a:	460b      	mov	r3, r1
 8008c1c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8008c22:	78fb      	ldrb	r3, [r7, #3]
 8008c24:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8008c26:	2300      	movs	r3, #0
 8008c28:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008c2a:	69bb      	ldr	r3, [r7, #24]
 8008c2c:	015a      	lsls	r2, r3, #5
 8008c2e:	69fb      	ldr	r3, [r7, #28]
 8008c30:	4413      	add	r3, r2
 8008c32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	0c9b      	lsrs	r3, r3, #18
 8008c3a:	f003 0303 	and.w	r3, r3, #3
 8008c3e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008c40:	69bb      	ldr	r3, [r7, #24]
 8008c42:	015a      	lsls	r2, r3, #5
 8008c44:	69fb      	ldr	r3, [r7, #28]
 8008c46:	4413      	add	r3, r2
 8008c48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	0fdb      	lsrs	r3, r3, #31
 8008c50:	f003 0301 	and.w	r3, r3, #1
 8008c54:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8008c56:	69bb      	ldr	r3, [r7, #24]
 8008c58:	015a      	lsls	r2, r3, #5
 8008c5a:	69fb      	ldr	r3, [r7, #28]
 8008c5c:	4413      	add	r3, r2
 8008c5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	0fdb      	lsrs	r3, r3, #31
 8008c66:	f003 0301 	and.w	r3, r3, #1
 8008c6a:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	689b      	ldr	r3, [r3, #8]
 8008c70:	f003 0320 	and.w	r3, r3, #32
 8008c74:	2b20      	cmp	r3, #32
 8008c76:	d10d      	bne.n	8008c94 <USB_HC_Halt+0x82>
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d10a      	bne.n	8008c94 <USB_HC_Halt+0x82>
 8008c7e:	693b      	ldr	r3, [r7, #16]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d005      	beq.n	8008c90 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	2b01      	cmp	r3, #1
 8008c88:	d002      	beq.n	8008c90 <USB_HC_Halt+0x7e>
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	2b03      	cmp	r3, #3
 8008c8e:	d101      	bne.n	8008c94 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8008c90:	2300      	movs	r3, #0
 8008c92:	e0d8      	b.n	8008e46 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008c94:	697b      	ldr	r3, [r7, #20]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d002      	beq.n	8008ca0 <USB_HC_Halt+0x8e>
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	2b02      	cmp	r3, #2
 8008c9e:	d173      	bne.n	8008d88 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008ca0:	69bb      	ldr	r3, [r7, #24]
 8008ca2:	015a      	lsls	r2, r3, #5
 8008ca4:	69fb      	ldr	r3, [r7, #28]
 8008ca6:	4413      	add	r3, r2
 8008ca8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	69ba      	ldr	r2, [r7, #24]
 8008cb0:	0151      	lsls	r1, r2, #5
 8008cb2:	69fa      	ldr	r2, [r7, #28]
 8008cb4:	440a      	add	r2, r1
 8008cb6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008cba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008cbe:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	689b      	ldr	r3, [r3, #8]
 8008cc4:	f003 0320 	and.w	r3, r3, #32
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d14a      	bne.n	8008d62 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cd0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d133      	bne.n	8008d40 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008cd8:	69bb      	ldr	r3, [r7, #24]
 8008cda:	015a      	lsls	r2, r3, #5
 8008cdc:	69fb      	ldr	r3, [r7, #28]
 8008cde:	4413      	add	r3, r2
 8008ce0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	69ba      	ldr	r2, [r7, #24]
 8008ce8:	0151      	lsls	r1, r2, #5
 8008cea:	69fa      	ldr	r2, [r7, #28]
 8008cec:	440a      	add	r2, r1
 8008cee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008cf2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008cf6:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008cf8:	69bb      	ldr	r3, [r7, #24]
 8008cfa:	015a      	lsls	r2, r3, #5
 8008cfc:	69fb      	ldr	r3, [r7, #28]
 8008cfe:	4413      	add	r3, r2
 8008d00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	69ba      	ldr	r2, [r7, #24]
 8008d08:	0151      	lsls	r1, r2, #5
 8008d0a:	69fa      	ldr	r2, [r7, #28]
 8008d0c:	440a      	add	r2, r1
 8008d0e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008d12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008d16:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008d24:	d82e      	bhi.n	8008d84 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008d26:	69bb      	ldr	r3, [r7, #24]
 8008d28:	015a      	lsls	r2, r3, #5
 8008d2a:	69fb      	ldr	r3, [r7, #28]
 8008d2c:	4413      	add	r3, r2
 8008d2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008d38:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008d3c:	d0ec      	beq.n	8008d18 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008d3e:	e081      	b.n	8008e44 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008d40:	69bb      	ldr	r3, [r7, #24]
 8008d42:	015a      	lsls	r2, r3, #5
 8008d44:	69fb      	ldr	r3, [r7, #28]
 8008d46:	4413      	add	r3, r2
 8008d48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	69ba      	ldr	r2, [r7, #24]
 8008d50:	0151      	lsls	r1, r2, #5
 8008d52:	69fa      	ldr	r2, [r7, #28]
 8008d54:	440a      	add	r2, r1
 8008d56:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008d5a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008d5e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008d60:	e070      	b.n	8008e44 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008d62:	69bb      	ldr	r3, [r7, #24]
 8008d64:	015a      	lsls	r2, r3, #5
 8008d66:	69fb      	ldr	r3, [r7, #28]
 8008d68:	4413      	add	r3, r2
 8008d6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	69ba      	ldr	r2, [r7, #24]
 8008d72:	0151      	lsls	r1, r2, #5
 8008d74:	69fa      	ldr	r2, [r7, #28]
 8008d76:	440a      	add	r2, r1
 8008d78:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008d7c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008d80:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008d82:	e05f      	b.n	8008e44 <USB_HC_Halt+0x232>
            break;
 8008d84:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008d86:	e05d      	b.n	8008e44 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008d88:	69bb      	ldr	r3, [r7, #24]
 8008d8a:	015a      	lsls	r2, r3, #5
 8008d8c:	69fb      	ldr	r3, [r7, #28]
 8008d8e:	4413      	add	r3, r2
 8008d90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	69ba      	ldr	r2, [r7, #24]
 8008d98:	0151      	lsls	r1, r2, #5
 8008d9a:	69fa      	ldr	r2, [r7, #28]
 8008d9c:	440a      	add	r2, r1
 8008d9e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008da2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008da6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008da8:	69fb      	ldr	r3, [r7, #28]
 8008daa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008dae:	691b      	ldr	r3, [r3, #16]
 8008db0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d133      	bne.n	8008e20 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008db8:	69bb      	ldr	r3, [r7, #24]
 8008dba:	015a      	lsls	r2, r3, #5
 8008dbc:	69fb      	ldr	r3, [r7, #28]
 8008dbe:	4413      	add	r3, r2
 8008dc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	69ba      	ldr	r2, [r7, #24]
 8008dc8:	0151      	lsls	r1, r2, #5
 8008dca:	69fa      	ldr	r2, [r7, #28]
 8008dcc:	440a      	add	r2, r1
 8008dce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008dd2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008dd6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008dd8:	69bb      	ldr	r3, [r7, #24]
 8008dda:	015a      	lsls	r2, r3, #5
 8008ddc:	69fb      	ldr	r3, [r7, #28]
 8008dde:	4413      	add	r3, r2
 8008de0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	69ba      	ldr	r2, [r7, #24]
 8008de8:	0151      	lsls	r1, r2, #5
 8008dea:	69fa      	ldr	r2, [r7, #28]
 8008dec:	440a      	add	r2, r1
 8008dee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008df2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008df6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	3301      	adds	r3, #1
 8008dfc:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008e04:	d81d      	bhi.n	8008e42 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008e06:	69bb      	ldr	r3, [r7, #24]
 8008e08:	015a      	lsls	r2, r3, #5
 8008e0a:	69fb      	ldr	r3, [r7, #28]
 8008e0c:	4413      	add	r3, r2
 8008e0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008e18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008e1c:	d0ec      	beq.n	8008df8 <USB_HC_Halt+0x1e6>
 8008e1e:	e011      	b.n	8008e44 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008e20:	69bb      	ldr	r3, [r7, #24]
 8008e22:	015a      	lsls	r2, r3, #5
 8008e24:	69fb      	ldr	r3, [r7, #28]
 8008e26:	4413      	add	r3, r2
 8008e28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	69ba      	ldr	r2, [r7, #24]
 8008e30:	0151      	lsls	r1, r2, #5
 8008e32:	69fa      	ldr	r2, [r7, #28]
 8008e34:	440a      	add	r2, r1
 8008e36:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008e3a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008e3e:	6013      	str	r3, [r2, #0]
 8008e40:	e000      	b.n	8008e44 <USB_HC_Halt+0x232>
          break;
 8008e42:	bf00      	nop
    }
  }

  return HAL_OK;
 8008e44:	2300      	movs	r3, #0
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3724      	adds	r7, #36	@ 0x24
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e50:	4770      	bx	lr
	...

08008e54 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b087      	sub	sp, #28
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	460b      	mov	r3, r1
 8008e5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008e64:	78fb      	ldrb	r3, [r7, #3]
 8008e66:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	04da      	lsls	r2, r3, #19
 8008e70:	4b15      	ldr	r3, [pc, #84]	@ (8008ec8 <USB_DoPing+0x74>)
 8008e72:	4013      	ands	r3, r2
 8008e74:	693a      	ldr	r2, [r7, #16]
 8008e76:	0151      	lsls	r1, r2, #5
 8008e78:	697a      	ldr	r2, [r7, #20]
 8008e7a:	440a      	add	r2, r1
 8008e7c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008e80:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008e84:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008e86:	693b      	ldr	r3, [r7, #16]
 8008e88:	015a      	lsls	r2, r3, #5
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	4413      	add	r3, r2
 8008e8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008e9c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008ea4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	015a      	lsls	r2, r3, #5
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	4413      	add	r3, r2
 8008eae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008eb2:	461a      	mov	r2, r3
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008eb8:	2300      	movs	r3, #0
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	371c      	adds	r7, #28
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec4:	4770      	bx	lr
 8008ec6:	bf00      	nop
 8008ec8:	1ff80000 	.word	0x1ff80000

08008ecc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b088      	sub	sp, #32
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008edc:	2300      	movs	r3, #0
 8008ede:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f7fe ff86 	bl	8007df2 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008ee6:	2110      	movs	r1, #16
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f7fe ffdf 	bl	8007eac <USB_FlushTxFifo>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d001      	beq.n	8008ef8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f7ff f809 	bl	8007f10 <USB_FlushRxFifo>
 8008efe:	4603      	mov	r3, r0
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d001      	beq.n	8008f08 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008f04:	2301      	movs	r3, #1
 8008f06:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008f08:	2300      	movs	r3, #0
 8008f0a:	61bb      	str	r3, [r7, #24]
 8008f0c:	e01f      	b.n	8008f4e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008f0e:	69bb      	ldr	r3, [r7, #24]
 8008f10:	015a      	lsls	r2, r3, #5
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	4413      	add	r3, r2
 8008f16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008f24:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008f26:	693b      	ldr	r3, [r7, #16]
 8008f28:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008f2c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008f34:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008f36:	69bb      	ldr	r3, [r7, #24]
 8008f38:	015a      	lsls	r2, r3, #5
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	4413      	add	r3, r2
 8008f3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f42:	461a      	mov	r2, r3
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008f48:	69bb      	ldr	r3, [r7, #24]
 8008f4a:	3301      	adds	r3, #1
 8008f4c:	61bb      	str	r3, [r7, #24]
 8008f4e:	69bb      	ldr	r3, [r7, #24]
 8008f50:	2b0f      	cmp	r3, #15
 8008f52:	d9dc      	bls.n	8008f0e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008f54:	2300      	movs	r3, #0
 8008f56:	61bb      	str	r3, [r7, #24]
 8008f58:	e034      	b.n	8008fc4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008f5a:	69bb      	ldr	r3, [r7, #24]
 8008f5c:	015a      	lsls	r2, r3, #5
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	4413      	add	r3, r2
 8008f62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008f70:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008f78:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008f80:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008f82:	69bb      	ldr	r3, [r7, #24]
 8008f84:	015a      	lsls	r2, r3, #5
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	4413      	add	r3, r2
 8008f8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f8e:	461a      	mov	r2, r3
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	3301      	adds	r3, #1
 8008f98:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008fa0:	d80c      	bhi.n	8008fbc <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008fa2:	69bb      	ldr	r3, [r7, #24]
 8008fa4:	015a      	lsls	r2, r3, #5
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	4413      	add	r3, r2
 8008faa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008fb4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008fb8:	d0ec      	beq.n	8008f94 <USB_StopHost+0xc8>
 8008fba:	e000      	b.n	8008fbe <USB_StopHost+0xf2>
        break;
 8008fbc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008fbe:	69bb      	ldr	r3, [r7, #24]
 8008fc0:	3301      	adds	r3, #1
 8008fc2:	61bb      	str	r3, [r7, #24]
 8008fc4:	69bb      	ldr	r3, [r7, #24]
 8008fc6:	2b0f      	cmp	r3, #15
 8008fc8:	d9c7      	bls.n	8008f5a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008fd0:	461a      	mov	r2, r3
 8008fd2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008fd6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008fde:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f7fe fef5 	bl	8007dd0 <USB_EnableGlobalInt>

  return ret;
 8008fe6:	7ffb      	ldrb	r3, [r7, #31]
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3720      	adds	r7, #32
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008ff0:	b590      	push	{r4, r7, lr}
 8008ff2:	b089      	sub	sp, #36	@ 0x24
 8008ff4:	af04      	add	r7, sp, #16
 8008ff6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	2202      	movs	r2, #2
 8008ffc:	2102      	movs	r1, #2
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f000 fc83 	bl	800990a <USBH_FindInterface>
 8009004:	4603      	mov	r3, r0
 8009006:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009008:	7bfb      	ldrb	r3, [r7, #15]
 800900a:	2bff      	cmp	r3, #255	@ 0xff
 800900c:	d002      	beq.n	8009014 <USBH_CDC_InterfaceInit+0x24>
 800900e:	7bfb      	ldrb	r3, [r7, #15]
 8009010:	2b01      	cmp	r3, #1
 8009012:	d901      	bls.n	8009018 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009014:	2302      	movs	r3, #2
 8009016:	e13d      	b.n	8009294 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8009018:	7bfb      	ldrb	r3, [r7, #15]
 800901a:	4619      	mov	r1, r3
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f000 fc58 	bl	80098d2 <USBH_SelectInterface>
 8009022:	4603      	mov	r3, r0
 8009024:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009026:	7bbb      	ldrb	r3, [r7, #14]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d001      	beq.n	8009030 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800902c:	2302      	movs	r3, #2
 800902e:	e131      	b.n	8009294 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8009036:	2050      	movs	r0, #80	@ 0x50
 8009038:	f002 fb6a 	bl	800b710 <malloc>
 800903c:	4603      	mov	r3, r0
 800903e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009046:	69db      	ldr	r3, [r3, #28]
 8009048:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d101      	bne.n	8009054 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8009050:	2302      	movs	r3, #2
 8009052:	e11f      	b.n	8009294 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8009054:	2250      	movs	r2, #80	@ 0x50
 8009056:	2100      	movs	r1, #0
 8009058:	68b8      	ldr	r0, [r7, #8]
 800905a:	f002 fc17 	bl	800b88c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800905e:	7bfb      	ldrb	r3, [r7, #15]
 8009060:	687a      	ldr	r2, [r7, #4]
 8009062:	211a      	movs	r1, #26
 8009064:	fb01 f303 	mul.w	r3, r1, r3
 8009068:	4413      	add	r3, r2
 800906a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800906e:	781b      	ldrb	r3, [r3, #0]
 8009070:	b25b      	sxtb	r3, r3
 8009072:	2b00      	cmp	r3, #0
 8009074:	da15      	bge.n	80090a2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009076:	7bfb      	ldrb	r3, [r7, #15]
 8009078:	687a      	ldr	r2, [r7, #4]
 800907a:	211a      	movs	r1, #26
 800907c:	fb01 f303 	mul.w	r3, r1, r3
 8009080:	4413      	add	r3, r2
 8009082:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009086:	781a      	ldrb	r2, [r3, #0]
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800908c:	7bfb      	ldrb	r3, [r7, #15]
 800908e:	687a      	ldr	r2, [r7, #4]
 8009090:	211a      	movs	r1, #26
 8009092:	fb01 f303 	mul.w	r3, r1, r3
 8009096:	4413      	add	r3, r2
 8009098:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800909c:	881a      	ldrh	r2, [r3, #0]
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	785b      	ldrb	r3, [r3, #1]
 80090a6:	4619      	mov	r1, r3
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f001 ffc4 	bl	800b036 <USBH_AllocPipe>
 80090ae:	4603      	mov	r3, r0
 80090b0:	461a      	mov	r2, r3
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	7819      	ldrb	r1, [r3, #0]
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	7858      	ldrb	r0, [r3, #1]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80090ca:	68ba      	ldr	r2, [r7, #8]
 80090cc:	8952      	ldrh	r2, [r2, #10]
 80090ce:	9202      	str	r2, [sp, #8]
 80090d0:	2203      	movs	r2, #3
 80090d2:	9201      	str	r2, [sp, #4]
 80090d4:	9300      	str	r3, [sp, #0]
 80090d6:	4623      	mov	r3, r4
 80090d8:	4602      	mov	r2, r0
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f001 ff7c 	bl	800afd8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	781b      	ldrb	r3, [r3, #0]
 80090e4:	2200      	movs	r2, #0
 80090e6:	4619      	mov	r1, r3
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f002 fa8b 	bl	800b604 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80090ee:	2300      	movs	r3, #0
 80090f0:	2200      	movs	r2, #0
 80090f2:	210a      	movs	r1, #10
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f000 fc08 	bl	800990a <USBH_FindInterface>
 80090fa:	4603      	mov	r3, r0
 80090fc:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80090fe:	7bfb      	ldrb	r3, [r7, #15]
 8009100:	2bff      	cmp	r3, #255	@ 0xff
 8009102:	d002      	beq.n	800910a <USBH_CDC_InterfaceInit+0x11a>
 8009104:	7bfb      	ldrb	r3, [r7, #15]
 8009106:	2b01      	cmp	r3, #1
 8009108:	d901      	bls.n	800910e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800910a:	2302      	movs	r3, #2
 800910c:	e0c2      	b.n	8009294 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800910e:	7bfb      	ldrb	r3, [r7, #15]
 8009110:	687a      	ldr	r2, [r7, #4]
 8009112:	211a      	movs	r1, #26
 8009114:	fb01 f303 	mul.w	r3, r1, r3
 8009118:	4413      	add	r3, r2
 800911a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800911e:	781b      	ldrb	r3, [r3, #0]
 8009120:	b25b      	sxtb	r3, r3
 8009122:	2b00      	cmp	r3, #0
 8009124:	da16      	bge.n	8009154 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009126:	7bfb      	ldrb	r3, [r7, #15]
 8009128:	687a      	ldr	r2, [r7, #4]
 800912a:	211a      	movs	r1, #26
 800912c:	fb01 f303 	mul.w	r3, r1, r3
 8009130:	4413      	add	r3, r2
 8009132:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009136:	781a      	ldrb	r2, [r3, #0]
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800913c:	7bfb      	ldrb	r3, [r7, #15]
 800913e:	687a      	ldr	r2, [r7, #4]
 8009140:	211a      	movs	r1, #26
 8009142:	fb01 f303 	mul.w	r3, r1, r3
 8009146:	4413      	add	r3, r2
 8009148:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800914c:	881a      	ldrh	r2, [r3, #0]
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	835a      	strh	r2, [r3, #26]
 8009152:	e015      	b.n	8009180 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009154:	7bfb      	ldrb	r3, [r7, #15]
 8009156:	687a      	ldr	r2, [r7, #4]
 8009158:	211a      	movs	r1, #26
 800915a:	fb01 f303 	mul.w	r3, r1, r3
 800915e:	4413      	add	r3, r2
 8009160:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009164:	781a      	ldrb	r2, [r3, #0]
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800916a:	7bfb      	ldrb	r3, [r7, #15]
 800916c:	687a      	ldr	r2, [r7, #4]
 800916e:	211a      	movs	r1, #26
 8009170:	fb01 f303 	mul.w	r3, r1, r3
 8009174:	4413      	add	r3, r2
 8009176:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800917a:	881a      	ldrh	r2, [r3, #0]
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8009180:	7bfb      	ldrb	r3, [r7, #15]
 8009182:	687a      	ldr	r2, [r7, #4]
 8009184:	211a      	movs	r1, #26
 8009186:	fb01 f303 	mul.w	r3, r1, r3
 800918a:	4413      	add	r3, r2
 800918c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009190:	781b      	ldrb	r3, [r3, #0]
 8009192:	b25b      	sxtb	r3, r3
 8009194:	2b00      	cmp	r3, #0
 8009196:	da16      	bge.n	80091c6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009198:	7bfb      	ldrb	r3, [r7, #15]
 800919a:	687a      	ldr	r2, [r7, #4]
 800919c:	211a      	movs	r1, #26
 800919e:	fb01 f303 	mul.w	r3, r1, r3
 80091a2:	4413      	add	r3, r2
 80091a4:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80091a8:	781a      	ldrb	r2, [r3, #0]
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80091ae:	7bfb      	ldrb	r3, [r7, #15]
 80091b0:	687a      	ldr	r2, [r7, #4]
 80091b2:	211a      	movs	r1, #26
 80091b4:	fb01 f303 	mul.w	r3, r1, r3
 80091b8:	4413      	add	r3, r2
 80091ba:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80091be:	881a      	ldrh	r2, [r3, #0]
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	835a      	strh	r2, [r3, #26]
 80091c4:	e015      	b.n	80091f2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80091c6:	7bfb      	ldrb	r3, [r7, #15]
 80091c8:	687a      	ldr	r2, [r7, #4]
 80091ca:	211a      	movs	r1, #26
 80091cc:	fb01 f303 	mul.w	r3, r1, r3
 80091d0:	4413      	add	r3, r2
 80091d2:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80091d6:	781a      	ldrb	r2, [r3, #0]
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80091dc:	7bfb      	ldrb	r3, [r7, #15]
 80091de:	687a      	ldr	r2, [r7, #4]
 80091e0:	211a      	movs	r1, #26
 80091e2:	fb01 f303 	mul.w	r3, r1, r3
 80091e6:	4413      	add	r3, r2
 80091e8:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80091ec:	881a      	ldrh	r2, [r3, #0]
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	7b9b      	ldrb	r3, [r3, #14]
 80091f6:	4619      	mov	r1, r3
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f001 ff1c 	bl	800b036 <USBH_AllocPipe>
 80091fe:	4603      	mov	r3, r0
 8009200:	461a      	mov	r2, r3
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	7bdb      	ldrb	r3, [r3, #15]
 800920a:	4619      	mov	r1, r3
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f001 ff12 	bl	800b036 <USBH_AllocPipe>
 8009212:	4603      	mov	r3, r0
 8009214:	461a      	mov	r2, r3
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	7b59      	ldrb	r1, [r3, #13]
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	7b98      	ldrb	r0, [r3, #14]
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800922e:	68ba      	ldr	r2, [r7, #8]
 8009230:	8b12      	ldrh	r2, [r2, #24]
 8009232:	9202      	str	r2, [sp, #8]
 8009234:	2202      	movs	r2, #2
 8009236:	9201      	str	r2, [sp, #4]
 8009238:	9300      	str	r3, [sp, #0]
 800923a:	4623      	mov	r3, r4
 800923c:	4602      	mov	r2, r0
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f001 feca 	bl	800afd8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	7b19      	ldrb	r1, [r3, #12]
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	7bd8      	ldrb	r0, [r3, #15]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009258:	68ba      	ldr	r2, [r7, #8]
 800925a:	8b52      	ldrh	r2, [r2, #26]
 800925c:	9202      	str	r2, [sp, #8]
 800925e:	2202      	movs	r2, #2
 8009260:	9201      	str	r2, [sp, #4]
 8009262:	9300      	str	r3, [sp, #0]
 8009264:	4623      	mov	r3, r4
 8009266:	4602      	mov	r2, r0
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f001 feb5 	bl	800afd8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	2200      	movs	r2, #0
 8009272:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	7b5b      	ldrb	r3, [r3, #13]
 800927a:	2200      	movs	r2, #0
 800927c:	4619      	mov	r1, r3
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f002 f9c0 	bl	800b604 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	7b1b      	ldrb	r3, [r3, #12]
 8009288:	2200      	movs	r2, #0
 800928a:	4619      	mov	r1, r3
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f002 f9b9 	bl	800b604 <USBH_LL_SetToggle>

  return USBH_OK;
 8009292:	2300      	movs	r3, #0
}
 8009294:	4618      	mov	r0, r3
 8009296:	3714      	adds	r7, #20
 8009298:	46bd      	mov	sp, r7
 800929a:	bd90      	pop	{r4, r7, pc}

0800929c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b084      	sub	sp, #16
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80092aa:	69db      	ldr	r3, [r3, #28]
 80092ac:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	781b      	ldrb	r3, [r3, #0]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d00e      	beq.n	80092d4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	781b      	ldrb	r3, [r3, #0]
 80092ba:	4619      	mov	r1, r3
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f001 feaa 	bl	800b016 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	781b      	ldrb	r3, [r3, #0]
 80092c6:	4619      	mov	r1, r3
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f001 fed5 	bl	800b078 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	2200      	movs	r2, #0
 80092d2:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	7b1b      	ldrb	r3, [r3, #12]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d00e      	beq.n	80092fa <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	7b1b      	ldrb	r3, [r3, #12]
 80092e0:	4619      	mov	r1, r3
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f001 fe97 	bl	800b016 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	7b1b      	ldrb	r3, [r3, #12]
 80092ec:	4619      	mov	r1, r3
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f001 fec2 	bl	800b078 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	2200      	movs	r2, #0
 80092f8:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	7b5b      	ldrb	r3, [r3, #13]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d00e      	beq.n	8009320 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	7b5b      	ldrb	r3, [r3, #13]
 8009306:	4619      	mov	r1, r3
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f001 fe84 	bl	800b016 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	7b5b      	ldrb	r3, [r3, #13]
 8009312:	4619      	mov	r1, r3
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f001 feaf 	bl	800b078 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2200      	movs	r2, #0
 800931e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009326:	69db      	ldr	r3, [r3, #28]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d00b      	beq.n	8009344 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009332:	69db      	ldr	r3, [r3, #28]
 8009334:	4618      	mov	r0, r3
 8009336:	f002 f9f3 	bl	800b720 <free>
    phost->pActiveClass->pData = 0U;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009340:	2200      	movs	r2, #0
 8009342:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009344:	2300      	movs	r3, #0
}
 8009346:	4618      	mov	r0, r3
 8009348:	3710      	adds	r7, #16
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}

0800934e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800934e:	b580      	push	{r7, lr}
 8009350:	b084      	sub	sp, #16
 8009352:	af00      	add	r7, sp, #0
 8009354:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800935c:	69db      	ldr	r3, [r3, #28]
 800935e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	3340      	adds	r3, #64	@ 0x40
 8009364:	4619      	mov	r1, r3
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 f8b1 	bl	80094ce <GetLineCoding>
 800936c:	4603      	mov	r3, r0
 800936e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8009370:	7afb      	ldrb	r3, [r7, #11]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d105      	bne.n	8009382 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800937c:	2102      	movs	r1, #2
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8009382:	7afb      	ldrb	r3, [r7, #11]
}
 8009384:	4618      	mov	r0, r3
 8009386:	3710      	adds	r7, #16
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}

0800938c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b084      	sub	sp, #16
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009394:	2301      	movs	r3, #1
 8009396:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009398:	2300      	movs	r3, #0
 800939a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80093a2:	69db      	ldr	r3, [r3, #28]
 80093a4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80093ac:	2b04      	cmp	r3, #4
 80093ae:	d877      	bhi.n	80094a0 <USBH_CDC_Process+0x114>
 80093b0:	a201      	add	r2, pc, #4	@ (adr r2, 80093b8 <USBH_CDC_Process+0x2c>)
 80093b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093b6:	bf00      	nop
 80093b8:	080093cd 	.word	0x080093cd
 80093bc:	080093d3 	.word	0x080093d3
 80093c0:	08009403 	.word	0x08009403
 80093c4:	08009477 	.word	0x08009477
 80093c8:	08009485 	.word	0x08009485
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80093cc:	2300      	movs	r3, #0
 80093ce:	73fb      	strb	r3, [r7, #15]
      break;
 80093d0:	e06d      	b.n	80094ae <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80093d6:	4619      	mov	r1, r3
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f000 f897 	bl	800950c <SetLineCoding>
 80093de:	4603      	mov	r3, r0
 80093e0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80093e2:	7bbb      	ldrb	r3, [r7, #14]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d104      	bne.n	80093f2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	2202      	movs	r2, #2
 80093ec:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80093f0:	e058      	b.n	80094a4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80093f2:	7bbb      	ldrb	r3, [r7, #14]
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	d055      	beq.n	80094a4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	2204      	movs	r2, #4
 80093fc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8009400:	e050      	b.n	80094a4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	3340      	adds	r3, #64	@ 0x40
 8009406:	4619      	mov	r1, r3
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f000 f860 	bl	80094ce <GetLineCoding>
 800940e:	4603      	mov	r3, r0
 8009410:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009412:	7bbb      	ldrb	r3, [r7, #14]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d126      	bne.n	8009466 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	2200      	movs	r2, #0
 800941c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800942a:	791b      	ldrb	r3, [r3, #4]
 800942c:	429a      	cmp	r2, r3
 800942e:	d13b      	bne.n	80094a8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800943a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800943c:	429a      	cmp	r2, r3
 800943e:	d133      	bne.n	80094a8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800944a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800944c:	429a      	cmp	r2, r3
 800944e:	d12b      	bne.n	80094a8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009458:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800945a:	429a      	cmp	r2, r3
 800945c:	d124      	bne.n	80094a8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f000 f958 	bl	8009714 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009464:	e020      	b.n	80094a8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8009466:	7bbb      	ldrb	r3, [r7, #14]
 8009468:	2b01      	cmp	r3, #1
 800946a:	d01d      	beq.n	80094a8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	2204      	movs	r2, #4
 8009470:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8009474:	e018      	b.n	80094a8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f000 f867 	bl	800954a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f000 f8da 	bl	8009636 <CDC_ProcessReception>
      break;
 8009482:	e014      	b.n	80094ae <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8009484:	2100      	movs	r1, #0
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f001 f81e 	bl	800a4c8 <USBH_ClrFeature>
 800948c:	4603      	mov	r3, r0
 800948e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009490:	7bbb      	ldrb	r3, [r7, #14]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d10a      	bne.n	80094ac <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	2200      	movs	r2, #0
 800949a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800949e:	e005      	b.n	80094ac <USBH_CDC_Process+0x120>

    default:
      break;
 80094a0:	bf00      	nop
 80094a2:	e004      	b.n	80094ae <USBH_CDC_Process+0x122>
      break;
 80094a4:	bf00      	nop
 80094a6:	e002      	b.n	80094ae <USBH_CDC_Process+0x122>
      break;
 80094a8:	bf00      	nop
 80094aa:	e000      	b.n	80094ae <USBH_CDC_Process+0x122>
      break;
 80094ac:	bf00      	nop

  }

  return status;
 80094ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	3710      	adds	r7, #16
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}

080094b8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b083      	sub	sp, #12
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80094c0:	2300      	movs	r3, #0
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	370c      	adds	r7, #12
 80094c6:	46bd      	mov	sp, r7
 80094c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094cc:	4770      	bx	lr

080094ce <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80094ce:	b580      	push	{r7, lr}
 80094d0:	b082      	sub	sp, #8
 80094d2:	af00      	add	r7, sp, #0
 80094d4:	6078      	str	r0, [r7, #4]
 80094d6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	22a1      	movs	r2, #161	@ 0xa1
 80094dc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2221      	movs	r2, #33	@ 0x21
 80094e2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2200      	movs	r2, #0
 80094e8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2200      	movs	r2, #0
 80094ee:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2207      	movs	r2, #7
 80094f4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	2207      	movs	r2, #7
 80094fa:	4619      	mov	r1, r3
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f001 fb17 	bl	800ab30 <USBH_CtlReq>
 8009502:	4603      	mov	r3, r0
}
 8009504:	4618      	mov	r0, r3
 8009506:	3708      	adds	r7, #8
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}

0800950c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b082      	sub	sp, #8
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
 8009514:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2221      	movs	r2, #33	@ 0x21
 800951a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2220      	movs	r2, #32
 8009520:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2200      	movs	r2, #0
 8009526:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2200      	movs	r2, #0
 800952c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2207      	movs	r2, #7
 8009532:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	2207      	movs	r2, #7
 8009538:	4619      	mov	r1, r3
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f001 faf8 	bl	800ab30 <USBH_CtlReq>
 8009540:	4603      	mov	r3, r0
}
 8009542:	4618      	mov	r0, r3
 8009544:	3708      	adds	r7, #8
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}

0800954a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800954a:	b580      	push	{r7, lr}
 800954c:	b086      	sub	sp, #24
 800954e:	af02      	add	r7, sp, #8
 8009550:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009558:	69db      	ldr	r3, [r3, #28]
 800955a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800955c:	2300      	movs	r3, #0
 800955e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8009566:	2b01      	cmp	r3, #1
 8009568:	d002      	beq.n	8009570 <CDC_ProcessTransmission+0x26>
 800956a:	2b02      	cmp	r3, #2
 800956c:	d023      	beq.n	80095b6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800956e:	e05e      	b.n	800962e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009574:	68fa      	ldr	r2, [r7, #12]
 8009576:	8b12      	ldrh	r2, [r2, #24]
 8009578:	4293      	cmp	r3, r2
 800957a:	d90b      	bls.n	8009594 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	69d9      	ldr	r1, [r3, #28]
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	8b1a      	ldrh	r2, [r3, #24]
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	7b5b      	ldrb	r3, [r3, #13]
 8009588:	2001      	movs	r0, #1
 800958a:	9000      	str	r0, [sp, #0]
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f001 fce0 	bl	800af52 <USBH_BulkSendData>
 8009592:	e00b      	b.n	80095ac <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800959c:	b29a      	uxth	r2, r3
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	7b5b      	ldrb	r3, [r3, #13]
 80095a2:	2001      	movs	r0, #1
 80095a4:	9000      	str	r0, [sp, #0]
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f001 fcd3 	bl	800af52 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	2202      	movs	r2, #2
 80095b0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80095b4:	e03b      	b.n	800962e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	7b5b      	ldrb	r3, [r3, #13]
 80095ba:	4619      	mov	r1, r3
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f001 fff7 	bl	800b5b0 <USBH_LL_GetURBState>
 80095c2:	4603      	mov	r3, r0
 80095c4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80095c6:	7afb      	ldrb	r3, [r7, #11]
 80095c8:	2b01      	cmp	r3, #1
 80095ca:	d128      	bne.n	800961e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095d0:	68fa      	ldr	r2, [r7, #12]
 80095d2:	8b12      	ldrh	r2, [r2, #24]
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d90e      	bls.n	80095f6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095dc:	68fa      	ldr	r2, [r7, #12]
 80095de:	8b12      	ldrh	r2, [r2, #24]
 80095e0:	1a9a      	subs	r2, r3, r2
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	69db      	ldr	r3, [r3, #28]
 80095ea:	68fa      	ldr	r2, [r7, #12]
 80095ec:	8b12      	ldrh	r2, [r2, #24]
 80095ee:	441a      	add	r2, r3
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	61da      	str	r2, [r3, #28]
 80095f4:	e002      	b.n	80095fc <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	2200      	movs	r2, #0
 80095fa:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009600:	2b00      	cmp	r3, #0
 8009602:	d004      	beq.n	800960e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2201      	movs	r2, #1
 8009608:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800960c:	e00e      	b.n	800962c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	2200      	movs	r2, #0
 8009612:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f000 f868 	bl	80096ec <USBH_CDC_TransmitCallback>
      break;
 800961c:	e006      	b.n	800962c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800961e:	7afb      	ldrb	r3, [r7, #11]
 8009620:	2b02      	cmp	r3, #2
 8009622:	d103      	bne.n	800962c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	2201      	movs	r2, #1
 8009628:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800962c:	bf00      	nop
  }
}
 800962e:	bf00      	nop
 8009630:	3710      	adds	r7, #16
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}

08009636 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8009636:	b580      	push	{r7, lr}
 8009638:	b086      	sub	sp, #24
 800963a:	af00      	add	r7, sp, #0
 800963c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009644:	69db      	ldr	r3, [r3, #28]
 8009646:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009648:	2300      	movs	r3, #0
 800964a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800964c:	697b      	ldr	r3, [r7, #20]
 800964e:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8009652:	2b03      	cmp	r3, #3
 8009654:	d002      	beq.n	800965c <CDC_ProcessReception+0x26>
 8009656:	2b04      	cmp	r3, #4
 8009658:	d00e      	beq.n	8009678 <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 800965a:	e043      	b.n	80096e4 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	6a19      	ldr	r1, [r3, #32]
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	8b5a      	ldrh	r2, [r3, #26]
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	7b1b      	ldrb	r3, [r3, #12]
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f001 fc97 	bl	800af9c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	2204      	movs	r2, #4
 8009672:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8009676:	e035      	b.n	80096e4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8009678:	697b      	ldr	r3, [r7, #20]
 800967a:	7b1b      	ldrb	r3, [r3, #12]
 800967c:	4619      	mov	r1, r3
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f001 ff96 	bl	800b5b0 <USBH_LL_GetURBState>
 8009684:	4603      	mov	r3, r0
 8009686:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8009688:	7cfb      	ldrb	r3, [r7, #19]
 800968a:	2b01      	cmp	r3, #1
 800968c:	d129      	bne.n	80096e2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	7b1b      	ldrb	r3, [r3, #12]
 8009692:	4619      	mov	r1, r3
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f001 fef9 	bl	800b48c <USBH_LL_GetLastXferSize>
 800969a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096a0:	68fa      	ldr	r2, [r7, #12]
 80096a2:	429a      	cmp	r2, r3
 80096a4:	d016      	beq.n	80096d4 <CDC_ProcessReception+0x9e>
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	8b5b      	ldrh	r3, [r3, #26]
 80096aa:	461a      	mov	r2, r3
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d110      	bne.n	80096d4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	1ad2      	subs	r2, r2, r3
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	6a1a      	ldr	r2, [r3, #32]
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	441a      	add	r2, r3
 80096c6:	697b      	ldr	r3, [r7, #20]
 80096c8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	2203      	movs	r2, #3
 80096ce:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80096d2:	e006      	b.n	80096e2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	2200      	movs	r2, #0
 80096d8:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f000 f80f 	bl	8009700 <USBH_CDC_ReceiveCallback>
      break;
 80096e2:	bf00      	nop
  }
}
 80096e4:	bf00      	nop
 80096e6:	3718      	adds	r7, #24
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd80      	pop	{r7, pc}

080096ec <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80096ec:	b480      	push	{r7}
 80096ee:	b083      	sub	sp, #12
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80096f4:	bf00      	nop
 80096f6:	370c      	adds	r7, #12
 80096f8:	46bd      	mov	sp, r7
 80096fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fe:	4770      	bx	lr

08009700 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009700:	b480      	push	{r7}
 8009702:	b083      	sub	sp, #12
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009708:	bf00      	nop
 800970a:	370c      	adds	r7, #12
 800970c:	46bd      	mov	sp, r7
 800970e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009712:	4770      	bx	lr

08009714 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009714:	b480      	push	{r7}
 8009716:	b083      	sub	sp, #12
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800971c:	bf00      	nop
 800971e:	370c      	adds	r7, #12
 8009720:	46bd      	mov	sp, r7
 8009722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009726:	4770      	bx	lr

08009728 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b084      	sub	sp, #16
 800972c:	af00      	add	r7, sp, #0
 800972e:	60f8      	str	r0, [r7, #12]
 8009730:	60b9      	str	r1, [r7, #8]
 8009732:	4613      	mov	r3, r2
 8009734:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d101      	bne.n	8009740 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800973c:	2302      	movs	r3, #2
 800973e:	e029      	b.n	8009794 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	79fa      	ldrb	r2, [r7, #7]
 8009744:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2200      	movs	r2, #0
 800974c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	2200      	movs	r2, #0
 8009754:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8009758:	68f8      	ldr	r0, [r7, #12]
 800975a:	f000 f81f 	bl	800979c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2200      	movs	r2, #0
 8009762:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	2200      	movs	r2, #0
 800976a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	2200      	movs	r2, #0
 8009772:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	2200      	movs	r2, #0
 800977a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d003      	beq.n	800978c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	68ba      	ldr	r2, [r7, #8]
 8009788:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800978c:	68f8      	ldr	r0, [r7, #12]
 800978e:	f001 fdc9 	bl	800b324 <USBH_LL_Init>

  return USBH_OK;
 8009792:	2300      	movs	r3, #0
}
 8009794:	4618      	mov	r0, r3
 8009796:	3710      	adds	r7, #16
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}

0800979c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b084      	sub	sp, #16
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80097a4:	2300      	movs	r3, #0
 80097a6:	60fb      	str	r3, [r7, #12]
 80097a8:	e009      	b.n	80097be <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 80097aa:	687a      	ldr	r2, [r7, #4]
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	33e0      	adds	r3, #224	@ 0xe0
 80097b0:	009b      	lsls	r3, r3, #2
 80097b2:	4413      	add	r3, r2
 80097b4:	2200      	movs	r2, #0
 80097b6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	3301      	adds	r3, #1
 80097bc:	60fb      	str	r3, [r7, #12]
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	2b0f      	cmp	r3, #15
 80097c2:	d9f2      	bls.n	80097aa <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80097c4:	2300      	movs	r3, #0
 80097c6:	60fb      	str	r3, [r7, #12]
 80097c8:	e009      	b.n	80097de <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 80097ca:	687a      	ldr	r2, [r7, #4]
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	4413      	add	r3, r2
 80097d0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80097d4:	2200      	movs	r2, #0
 80097d6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	3301      	adds	r3, #1
 80097dc:	60fb      	str	r3, [r7, #12]
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097e4:	d3f1      	bcc.n	80097ca <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2200      	movs	r2, #0
 80097ea:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2200      	movs	r2, #0
 80097f0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2201      	movs	r2, #1
 80097f6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2200      	movs	r2, #0
 80097fc:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2201      	movs	r2, #1
 8009804:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2240      	movs	r2, #64	@ 0x40
 800980a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2200      	movs	r2, #0
 8009810:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2200      	movs	r2, #0
 8009816:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2201      	movs	r2, #1
 800981e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2200      	movs	r2, #0
 8009826:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2200      	movs	r2, #0
 800982e:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	331c      	adds	r3, #28
 8009836:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800983a:	2100      	movs	r1, #0
 800983c:	4618      	mov	r0, r3
 800983e:	f002 f825 	bl	800b88c <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009848:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800984c:	2100      	movs	r1, #0
 800984e:	4618      	mov	r0, r3
 8009850:	f002 f81c 	bl	800b88c <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800985a:	2212      	movs	r2, #18
 800985c:	2100      	movs	r1, #0
 800985e:	4618      	mov	r0, r3
 8009860:	f002 f814 	bl	800b88c <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800986a:	223e      	movs	r2, #62	@ 0x3e
 800986c:	2100      	movs	r1, #0
 800986e:	4618      	mov	r0, r3
 8009870:	f002 f80c 	bl	800b88c <memset>

  return USBH_OK;
 8009874:	2300      	movs	r3, #0
}
 8009876:	4618      	mov	r0, r3
 8009878:	3710      	adds	r7, #16
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}

0800987e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800987e:	b480      	push	{r7}
 8009880:	b085      	sub	sp, #20
 8009882:	af00      	add	r7, sp, #0
 8009884:	6078      	str	r0, [r7, #4]
 8009886:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009888:	2300      	movs	r3, #0
 800988a:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d016      	beq.n	80098c0 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009898:	2b00      	cmp	r3, #0
 800989a:	d10e      	bne.n	80098ba <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80098a2:	1c59      	adds	r1, r3, #1
 80098a4:	687a      	ldr	r2, [r7, #4]
 80098a6:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 80098aa:	687a      	ldr	r2, [r7, #4]
 80098ac:	33de      	adds	r3, #222	@ 0xde
 80098ae:	6839      	ldr	r1, [r7, #0]
 80098b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80098b4:	2300      	movs	r3, #0
 80098b6:	73fb      	strb	r3, [r7, #15]
 80098b8:	e004      	b.n	80098c4 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80098ba:	2302      	movs	r3, #2
 80098bc:	73fb      	strb	r3, [r7, #15]
 80098be:	e001      	b.n	80098c4 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80098c0:	2302      	movs	r3, #2
 80098c2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80098c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	3714      	adds	r7, #20
 80098ca:	46bd      	mov	sp, r7
 80098cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d0:	4770      	bx	lr

080098d2 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80098d2:	b480      	push	{r7}
 80098d4:	b085      	sub	sp, #20
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	6078      	str	r0, [r7, #4]
 80098da:	460b      	mov	r3, r1
 80098dc:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80098de:	2300      	movs	r3, #0
 80098e0:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 80098e8:	78fa      	ldrb	r2, [r7, #3]
 80098ea:	429a      	cmp	r2, r3
 80098ec:	d204      	bcs.n	80098f8 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	78fa      	ldrb	r2, [r7, #3]
 80098f2:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 80098f6:	e001      	b.n	80098fc <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80098f8:	2302      	movs	r3, #2
 80098fa:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80098fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80098fe:	4618      	mov	r0, r3
 8009900:	3714      	adds	r7, #20
 8009902:	46bd      	mov	sp, r7
 8009904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009908:	4770      	bx	lr

0800990a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800990a:	b480      	push	{r7}
 800990c:	b087      	sub	sp, #28
 800990e:	af00      	add	r7, sp, #0
 8009910:	6078      	str	r0, [r7, #4]
 8009912:	4608      	mov	r0, r1
 8009914:	4611      	mov	r1, r2
 8009916:	461a      	mov	r2, r3
 8009918:	4603      	mov	r3, r0
 800991a:	70fb      	strb	r3, [r7, #3]
 800991c:	460b      	mov	r3, r1
 800991e:	70bb      	strb	r3, [r7, #2]
 8009920:	4613      	mov	r3, r2
 8009922:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009924:	2300      	movs	r3, #0
 8009926:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009928:	2300      	movs	r3, #0
 800992a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009932:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009934:	e025      	b.n	8009982 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009936:	7dfb      	ldrb	r3, [r7, #23]
 8009938:	221a      	movs	r2, #26
 800993a:	fb02 f303 	mul.w	r3, r2, r3
 800993e:	3308      	adds	r3, #8
 8009940:	68fa      	ldr	r2, [r7, #12]
 8009942:	4413      	add	r3, r2
 8009944:	3302      	adds	r3, #2
 8009946:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009948:	693b      	ldr	r3, [r7, #16]
 800994a:	795b      	ldrb	r3, [r3, #5]
 800994c:	78fa      	ldrb	r2, [r7, #3]
 800994e:	429a      	cmp	r2, r3
 8009950:	d002      	beq.n	8009958 <USBH_FindInterface+0x4e>
 8009952:	78fb      	ldrb	r3, [r7, #3]
 8009954:	2bff      	cmp	r3, #255	@ 0xff
 8009956:	d111      	bne.n	800997c <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009958:	693b      	ldr	r3, [r7, #16]
 800995a:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800995c:	78ba      	ldrb	r2, [r7, #2]
 800995e:	429a      	cmp	r2, r3
 8009960:	d002      	beq.n	8009968 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009962:	78bb      	ldrb	r3, [r7, #2]
 8009964:	2bff      	cmp	r3, #255	@ 0xff
 8009966:	d109      	bne.n	800997c <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009968:	693b      	ldr	r3, [r7, #16]
 800996a:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800996c:	787a      	ldrb	r2, [r7, #1]
 800996e:	429a      	cmp	r2, r3
 8009970:	d002      	beq.n	8009978 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009972:	787b      	ldrb	r3, [r7, #1]
 8009974:	2bff      	cmp	r3, #255	@ 0xff
 8009976:	d101      	bne.n	800997c <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009978:	7dfb      	ldrb	r3, [r7, #23]
 800997a:	e006      	b.n	800998a <USBH_FindInterface+0x80>
    }
    if_ix++;
 800997c:	7dfb      	ldrb	r3, [r7, #23]
 800997e:	3301      	adds	r3, #1
 8009980:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009982:	7dfb      	ldrb	r3, [r7, #23]
 8009984:	2b01      	cmp	r3, #1
 8009986:	d9d6      	bls.n	8009936 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009988:	23ff      	movs	r3, #255	@ 0xff
}
 800998a:	4618      	mov	r0, r3
 800998c:	371c      	adds	r7, #28
 800998e:	46bd      	mov	sp, r7
 8009990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009994:	4770      	bx	lr

08009996 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8009996:	b580      	push	{r7, lr}
 8009998:	b082      	sub	sp, #8
 800999a:	af00      	add	r7, sp, #0
 800999c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f001 fcfc 	bl	800b39c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80099a4:	2101      	movs	r1, #1
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f001 fe15 	bl	800b5d6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80099ac:	2300      	movs	r3, #0
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3708      	adds	r7, #8
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}
	...

080099b8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b088      	sub	sp, #32
 80099bc:	af04      	add	r7, sp, #16
 80099be:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80099c0:	2302      	movs	r3, #2
 80099c2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80099c4:	2300      	movs	r3, #0
 80099c6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 80099ce:	b2db      	uxtb	r3, r3
 80099d0:	2b01      	cmp	r3, #1
 80099d2:	d102      	bne.n	80099da <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2203      	movs	r2, #3
 80099d8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	781b      	ldrb	r3, [r3, #0]
 80099de:	b2db      	uxtb	r3, r3
 80099e0:	2b0b      	cmp	r3, #11
 80099e2:	f200 81bc 	bhi.w	8009d5e <USBH_Process+0x3a6>
 80099e6:	a201      	add	r2, pc, #4	@ (adr r2, 80099ec <USBH_Process+0x34>)
 80099e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ec:	08009a1d 	.word	0x08009a1d
 80099f0:	08009a4f 	.word	0x08009a4f
 80099f4:	08009ab9 	.word	0x08009ab9
 80099f8:	08009cf9 	.word	0x08009cf9
 80099fc:	08009d5f 	.word	0x08009d5f
 8009a00:	08009b59 	.word	0x08009b59
 8009a04:	08009c9f 	.word	0x08009c9f
 8009a08:	08009b8f 	.word	0x08009b8f
 8009a0c:	08009baf 	.word	0x08009baf
 8009a10:	08009bcd 	.word	0x08009bcd
 8009a14:	08009c11 	.word	0x08009c11
 8009a18:	08009ce1 	.word	0x08009ce1
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8009a22:	b2db      	uxtb	r3, r3
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	f000 819c 	beq.w	8009d62 <USBH_Process+0x3aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2201      	movs	r2, #1
 8009a2e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009a30:	20c8      	movs	r0, #200	@ 0xc8
 8009a32:	f001 fe1a 	bl	800b66a <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f001 fd0d 	bl	800b456 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2200      	movs	r2, #0
 8009a48:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8009a4c:	e189      	b.n	8009d62 <USBH_Process+0x3aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8009a54:	b2db      	uxtb	r3, r3
 8009a56:	2b01      	cmp	r3, #1
 8009a58:	d107      	bne.n	8009a6a <USBH_Process+0xb2>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2202      	movs	r2, #2
 8009a66:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009a68:	e18a      	b.n	8009d80 <USBH_Process+0x3c8>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8009a70:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009a74:	d914      	bls.n	8009aa0 <USBH_Process+0xe8>
          phost->device.RstCnt++;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8009a7c:	3301      	adds	r3, #1
 8009a7e:	b2da      	uxtb	r2, r3
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8009a8c:	2b03      	cmp	r3, #3
 8009a8e:	d903      	bls.n	8009a98 <USBH_Process+0xe0>
            phost->gState = HOST_ABORT_STATE;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	220d      	movs	r2, #13
 8009a94:	701a      	strb	r2, [r3, #0]
      break;
 8009a96:	e173      	b.n	8009d80 <USBH_Process+0x3c8>
            phost->gState = HOST_IDLE;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	701a      	strb	r2, [r3, #0]
      break;
 8009a9e:	e16f      	b.n	8009d80 <USBH_Process+0x3c8>
          phost->Timeout += 10U;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8009aa6:	f103 020a 	add.w	r2, r3, #10
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8009ab0:	200a      	movs	r0, #10
 8009ab2:	f001 fdda 	bl	800b66a <USBH_Delay>
      break;
 8009ab6:	e163      	b.n	8009d80 <USBH_Process+0x3c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d005      	beq.n	8009ace <USBH_Process+0x116>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009ac8:	2104      	movs	r1, #4
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009ace:	2064      	movs	r0, #100	@ 0x64
 8009ad0:	f001 fdcb 	bl	800b66a <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f001 fc97 	bl	800b408 <USBH_LL_GetSpeed>
 8009ada:	4603      	mov	r3, r0
 8009adc:	461a      	mov	r2, r3
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2205      	movs	r2, #5
 8009ae8:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009aea:	2100      	movs	r1, #0
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f001 faa2 	bl	800b036 <USBH_AllocPipe>
 8009af2:	4603      	mov	r3, r0
 8009af4:	461a      	mov	r2, r3
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009afa:	2180      	movs	r1, #128	@ 0x80
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f001 fa9a 	bl	800b036 <USBH_AllocPipe>
 8009b02:	4603      	mov	r3, r0
 8009b04:	461a      	mov	r2, r3
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	7919      	ldrb	r1, [r3, #4]
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009b1a:	687a      	ldr	r2, [r7, #4]
 8009b1c:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009b1e:	9202      	str	r2, [sp, #8]
 8009b20:	2200      	movs	r2, #0
 8009b22:	9201      	str	r2, [sp, #4]
 8009b24:	9300      	str	r3, [sp, #0]
 8009b26:	4603      	mov	r3, r0
 8009b28:	2280      	movs	r2, #128	@ 0x80
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f001 fa54 	bl	800afd8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	7959      	ldrb	r1, [r3, #5]
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009b40:	687a      	ldr	r2, [r7, #4]
 8009b42:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009b44:	9202      	str	r2, [sp, #8]
 8009b46:	2200      	movs	r2, #0
 8009b48:	9201      	str	r2, [sp, #4]
 8009b4a:	9300      	str	r3, [sp, #0]
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	2200      	movs	r2, #0
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f001 fa41 	bl	800afd8 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009b56:	e113      	b.n	8009d80 <USBH_Process+0x3c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f000 f917 	bl	8009d8c <USBH_HandleEnum>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009b62:	7bbb      	ldrb	r3, [r7, #14]
 8009b64:	b2db      	uxtb	r3, r3
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	f040 80fd 	bne.w	8009d66 <USBH_Process+0x3ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8009b7a:	2b01      	cmp	r3, #1
 8009b7c:	d103      	bne.n	8009b86 <USBH_Process+0x1ce>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2208      	movs	r2, #8
 8009b82:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8009b84:	e0ef      	b.n	8009d66 <USBH_Process+0x3ae>
          phost->gState = HOST_INPUT;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2207      	movs	r2, #7
 8009b8a:	701a      	strb	r2, [r3, #0]
      break;
 8009b8c:	e0eb      	b.n	8009d66 <USBH_Process+0x3ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	f000 80e8 	beq.w	8009d6a <USBH_Process+0x3b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009ba0:	2101      	movs	r1, #1
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2208      	movs	r2, #8
 8009baa:	701a      	strb	r2, [r3, #0]
#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 8009bac:	e0dd      	b.n	8009d6a <USBH_Process+0x3b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8009bb4:	4619      	mov	r1, r3
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f000 fc3f 	bl	800a43a <USBH_SetCfg>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	f040 80d5 	bne.w	8009d6e <USBH_Process+0x3b6>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2209      	movs	r2, #9
 8009bc8:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009bca:	e0d0      	b.n	8009d6e <USBH_Process+0x3b6>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8009bd2:	f003 0320 	and.w	r3, r3, #32
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d016      	beq.n	8009c08 <USBH_Process+0x250>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8009bda:	2101      	movs	r1, #1
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f000 fc4f 	bl	800a480 <USBH_SetFeature>
 8009be2:	4603      	mov	r3, r0
 8009be4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009be6:	7bbb      	ldrb	r3, [r7, #14]
 8009be8:	b2db      	uxtb	r3, r3
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d103      	bne.n	8009bf6 <USBH_Process+0x23e>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	220a      	movs	r2, #10
 8009bf2:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009bf4:	e0bd      	b.n	8009d72 <USBH_Process+0x3ba>
        else if (status == USBH_NOT_SUPPORTED)
 8009bf6:	7bbb      	ldrb	r3, [r7, #14]
 8009bf8:	b2db      	uxtb	r3, r3
 8009bfa:	2b03      	cmp	r3, #3
 8009bfc:	f040 80b9 	bne.w	8009d72 <USBH_Process+0x3ba>
          phost->gState = HOST_CHECK_CLASS;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	220a      	movs	r2, #10
 8009c04:	701a      	strb	r2, [r3, #0]
      break;
 8009c06:	e0b4      	b.n	8009d72 <USBH_Process+0x3ba>
        phost->gState = HOST_CHECK_CLASS;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	220a      	movs	r2, #10
 8009c0c:	701a      	strb	r2, [r3, #0]
      break;
 8009c0e:	e0b0      	b.n	8009d72 <USBH_Process+0x3ba>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	f000 80ad 	beq.w	8009d76 <USBH_Process+0x3be>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009c24:	2300      	movs	r3, #0
 8009c26:	73fb      	strb	r3, [r7, #15]
 8009c28:	e016      	b.n	8009c58 <USBH_Process+0x2a0>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009c2a:	7bfa      	ldrb	r2, [r7, #15]
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	32de      	adds	r2, #222	@ 0xde
 8009c30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c34:	791a      	ldrb	r2, [r3, #4]
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	d108      	bne.n	8009c52 <USBH_Process+0x29a>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009c40:	7bfa      	ldrb	r2, [r7, #15]
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	32de      	adds	r2, #222	@ 0xde
 8009c46:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8009c50:	e005      	b.n	8009c5e <USBH_Process+0x2a6>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009c52:	7bfb      	ldrb	r3, [r7, #15]
 8009c54:	3301      	adds	r3, #1
 8009c56:	73fb      	strb	r3, [r7, #15]
 8009c58:	7bfb      	ldrb	r3, [r7, #15]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d0e5      	beq.n	8009c2a <USBH_Process+0x272>
          }
        }

        if (phost->pActiveClass != NULL)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d016      	beq.n	8009c96 <USBH_Process+0x2de>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009c6e:	689b      	ldr	r3, [r3, #8]
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	4798      	blx	r3
 8009c74:	4603      	mov	r3, r0
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d109      	bne.n	8009c8e <USBH_Process+0x2d6>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2206      	movs	r2, #6
 8009c7e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009c86:	2103      	movs	r1, #3
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	4798      	blx	r3
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009c8c:	e073      	b.n	8009d76 <USBH_Process+0x3be>
            phost->gState = HOST_ABORT_STATE;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	220d      	movs	r2, #13
 8009c92:	701a      	strb	r2, [r3, #0]
      break;
 8009c94:	e06f      	b.n	8009d76 <USBH_Process+0x3be>
          phost->gState = HOST_ABORT_STATE;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	220d      	movs	r2, #13
 8009c9a:	701a      	strb	r2, [r3, #0]
      break;
 8009c9c:	e06b      	b.n	8009d76 <USBH_Process+0x3be>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d017      	beq.n	8009cd8 <USBH_Process+0x320>
      {
        status = phost->pActiveClass->Requests(phost);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009cae:	691b      	ldr	r3, [r3, #16]
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	4798      	blx	r3
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009cb8:	7bbb      	ldrb	r3, [r7, #14]
 8009cba:	b2db      	uxtb	r3, r3
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d103      	bne.n	8009cc8 <USBH_Process+0x310>
        {
          phost->gState = HOST_CLASS;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	220b      	movs	r2, #11
 8009cc4:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009cc6:	e058      	b.n	8009d7a <USBH_Process+0x3c2>
        else if (status == USBH_FAIL)
 8009cc8:	7bbb      	ldrb	r3, [r7, #14]
 8009cca:	b2db      	uxtb	r3, r3
 8009ccc:	2b02      	cmp	r3, #2
 8009cce:	d154      	bne.n	8009d7a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	220d      	movs	r2, #13
 8009cd4:	701a      	strb	r2, [r3, #0]
      break;
 8009cd6:	e050      	b.n	8009d7a <USBH_Process+0x3c2>
        phost->gState = HOST_ABORT_STATE;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	220d      	movs	r2, #13
 8009cdc:	701a      	strb	r2, [r3, #0]
      break;
 8009cde:	e04c      	b.n	8009d7a <USBH_Process+0x3c2>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d049      	beq.n	8009d7e <USBH_Process+0x3c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009cf0:	695b      	ldr	r3, [r3, #20]
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	4798      	blx	r3
      }
      break;
 8009cf6:	e042      	b.n	8009d7e <USBH_Process+0x3c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f7ff fd4b 	bl	800979c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d009      	beq.n	8009d24 <USBH_Process+0x36c>
      {
        phost->pActiveClass->DeInit(phost);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009d16:	68db      	ldr	r3, [r3, #12]
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d005      	beq.n	8009d3a <USBH_Process+0x382>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009d34:	2105      	movs	r1, #5
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8009d40:	b2db      	uxtb	r3, r3
 8009d42:	2b01      	cmp	r3, #1
 8009d44:	d107      	bne.n	8009d56 <USBH_Process+0x39e>
      {
        phost->device.is_ReEnumerated = 0U;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f7ff fe21 	bl	8009996 <USBH_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009d54:	e014      	b.n	8009d80 <USBH_Process+0x3c8>
        (void)USBH_LL_Start(phost);
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f001 fb20 	bl	800b39c <USBH_LL_Start>
      break;
 8009d5c:	e010      	b.n	8009d80 <USBH_Process+0x3c8>

    case HOST_ABORT_STATE:
    default :
      break;
 8009d5e:	bf00      	nop
 8009d60:	e00e      	b.n	8009d80 <USBH_Process+0x3c8>
      break;
 8009d62:	bf00      	nop
 8009d64:	e00c      	b.n	8009d80 <USBH_Process+0x3c8>
      break;
 8009d66:	bf00      	nop
 8009d68:	e00a      	b.n	8009d80 <USBH_Process+0x3c8>
    break;
 8009d6a:	bf00      	nop
 8009d6c:	e008      	b.n	8009d80 <USBH_Process+0x3c8>
      break;
 8009d6e:	bf00      	nop
 8009d70:	e006      	b.n	8009d80 <USBH_Process+0x3c8>
      break;
 8009d72:	bf00      	nop
 8009d74:	e004      	b.n	8009d80 <USBH_Process+0x3c8>
      break;
 8009d76:	bf00      	nop
 8009d78:	e002      	b.n	8009d80 <USBH_Process+0x3c8>
      break;
 8009d7a:	bf00      	nop
 8009d7c:	e000      	b.n	8009d80 <USBH_Process+0x3c8>
      break;
 8009d7e:	bf00      	nop
  }
  return USBH_OK;
 8009d80:	2300      	movs	r3, #0
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3710      	adds	r7, #16
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}
 8009d8a:	bf00      	nop

08009d8c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b088      	sub	sp, #32
 8009d90:	af04      	add	r7, sp, #16
 8009d92:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009d94:	2301      	movs	r3, #1
 8009d96:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009d98:	2301      	movs	r3, #1
 8009d9a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	785b      	ldrb	r3, [r3, #1]
 8009da0:	2b07      	cmp	r3, #7
 8009da2:	f200 81bd 	bhi.w	800a120 <USBH_HandleEnum+0x394>
 8009da6:	a201      	add	r2, pc, #4	@ (adr r2, 8009dac <USBH_HandleEnum+0x20>)
 8009da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dac:	08009dcd 	.word	0x08009dcd
 8009db0:	08009e87 	.word	0x08009e87
 8009db4:	08009ef1 	.word	0x08009ef1
 8009db8:	08009f7b 	.word	0x08009f7b
 8009dbc:	08009fe5 	.word	0x08009fe5
 8009dc0:	0800a055 	.word	0x0800a055
 8009dc4:	0800a09b 	.word	0x0800a09b
 8009dc8:	0800a0e1 	.word	0x0800a0e1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009dcc:	2108      	movs	r1, #8
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f000 fa50 	bl	800a274 <USBH_Get_DevDesc>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009dd8:	7bbb      	ldrb	r3, [r7, #14]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d12e      	bne.n	8009e3c <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2201      	movs	r2, #1
 8009dec:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	7919      	ldrb	r1, [r3, #4]
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009dfe:	687a      	ldr	r2, [r7, #4]
 8009e00:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009e02:	9202      	str	r2, [sp, #8]
 8009e04:	2200      	movs	r2, #0
 8009e06:	9201      	str	r2, [sp, #4]
 8009e08:	9300      	str	r3, [sp, #0]
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	2280      	movs	r2, #128	@ 0x80
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f001 f8e2 	bl	800afd8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	7959      	ldrb	r1, [r3, #5]
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009e24:	687a      	ldr	r2, [r7, #4]
 8009e26:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009e28:	9202      	str	r2, [sp, #8]
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	9201      	str	r2, [sp, #4]
 8009e2e:	9300      	str	r3, [sp, #0]
 8009e30:	4603      	mov	r3, r0
 8009e32:	2200      	movs	r2, #0
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f001 f8cf 	bl	800afd8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009e3a:	e173      	b.n	800a124 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009e3c:	7bbb      	ldrb	r3, [r7, #14]
 8009e3e:	2b03      	cmp	r3, #3
 8009e40:	f040 8170 	bne.w	800a124 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009e4a:	3301      	adds	r3, #1
 8009e4c:	b2da      	uxtb	r2, r3
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009e5a:	2b03      	cmp	r3, #3
 8009e5c:	d903      	bls.n	8009e66 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	220d      	movs	r2, #13
 8009e62:	701a      	strb	r2, [r3, #0]
      break;
 8009e64:	e15e      	b.n	800a124 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	795b      	ldrb	r3, [r3, #5]
 8009e6a:	4619      	mov	r1, r3
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f001 f903 	bl	800b078 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	791b      	ldrb	r3, [r3, #4]
 8009e76:	4619      	mov	r1, r3
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f001 f8fd 	bl	800b078 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2200      	movs	r2, #0
 8009e82:	701a      	strb	r2, [r3, #0]
      break;
 8009e84:	e14e      	b.n	800a124 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009e86:	2112      	movs	r1, #18
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f000 f9f3 	bl	800a274 <USBH_Get_DevDesc>
 8009e8e:	4603      	mov	r3, r0
 8009e90:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009e92:	7bbb      	ldrb	r3, [r7, #14]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d103      	bne.n	8009ea0 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2202      	movs	r2, #2
 8009e9c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009e9e:	e143      	b.n	800a128 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009ea0:	7bbb      	ldrb	r3, [r7, #14]
 8009ea2:	2b03      	cmp	r3, #3
 8009ea4:	f040 8140 	bne.w	800a128 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009eae:	3301      	adds	r3, #1
 8009eb0:	b2da      	uxtb	r2, r3
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009ebe:	2b03      	cmp	r3, #3
 8009ec0:	d903      	bls.n	8009eca <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	220d      	movs	r2, #13
 8009ec6:	701a      	strb	r2, [r3, #0]
      break;
 8009ec8:	e12e      	b.n	800a128 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	795b      	ldrb	r3, [r3, #5]
 8009ece:	4619      	mov	r1, r3
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f001 f8d1 	bl	800b078 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	791b      	ldrb	r3, [r3, #4]
 8009eda:	4619      	mov	r1, r3
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f001 f8cb 	bl	800b078 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2200      	movs	r2, #0
 8009eec:	701a      	strb	r2, [r3, #0]
      break;
 8009eee:	e11b      	b.n	800a128 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009ef0:	2101      	movs	r1, #1
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f000 fa7d 	bl	800a3f2 <USBH_SetAddress>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009efc:	7bbb      	ldrb	r3, [r7, #14]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d130      	bne.n	8009f64 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8009f02:	2002      	movs	r0, #2
 8009f04:	f001 fbb1 	bl	800b66a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2201      	movs	r2, #1
 8009f0c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2203      	movs	r2, #3
 8009f14:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	7919      	ldrb	r1, [r3, #4]
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009f26:	687a      	ldr	r2, [r7, #4]
 8009f28:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009f2a:	9202      	str	r2, [sp, #8]
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	9201      	str	r2, [sp, #4]
 8009f30:	9300      	str	r3, [sp, #0]
 8009f32:	4603      	mov	r3, r0
 8009f34:	2280      	movs	r2, #128	@ 0x80
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f001 f84e 	bl	800afd8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	7959      	ldrb	r1, [r3, #5]
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009f4c:	687a      	ldr	r2, [r7, #4]
 8009f4e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009f50:	9202      	str	r2, [sp, #8]
 8009f52:	2200      	movs	r2, #0
 8009f54:	9201      	str	r2, [sp, #4]
 8009f56:	9300      	str	r3, [sp, #0]
 8009f58:	4603      	mov	r3, r0
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f001 f83b 	bl	800afd8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009f62:	e0e3      	b.n	800a12c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009f64:	7bbb      	ldrb	r3, [r7, #14]
 8009f66:	2b03      	cmp	r3, #3
 8009f68:	f040 80e0 	bne.w	800a12c <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	220d      	movs	r2, #13
 8009f70:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2200      	movs	r2, #0
 8009f76:	705a      	strb	r2, [r3, #1]
      break;
 8009f78:	e0d8      	b.n	800a12c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009f7a:	2109      	movs	r1, #9
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f000 f9a5 	bl	800a2cc <USBH_Get_CfgDesc>
 8009f82:	4603      	mov	r3, r0
 8009f84:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009f86:	7bbb      	ldrb	r3, [r7, #14]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d103      	bne.n	8009f94 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2204      	movs	r2, #4
 8009f90:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009f92:	e0cd      	b.n	800a130 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009f94:	7bbb      	ldrb	r3, [r7, #14]
 8009f96:	2b03      	cmp	r3, #3
 8009f98:	f040 80ca 	bne.w	800a130 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009fa2:	3301      	adds	r3, #1
 8009fa4:	b2da      	uxtb	r2, r3
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009fb2:	2b03      	cmp	r3, #3
 8009fb4:	d903      	bls.n	8009fbe <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	220d      	movs	r2, #13
 8009fba:	701a      	strb	r2, [r3, #0]
      break;
 8009fbc:	e0b8      	b.n	800a130 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	795b      	ldrb	r3, [r3, #5]
 8009fc2:	4619      	mov	r1, r3
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f001 f857 	bl	800b078 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	791b      	ldrb	r3, [r3, #4]
 8009fce:	4619      	mov	r1, r3
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f001 f851 	bl	800b078 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	701a      	strb	r2, [r3, #0]
      break;
 8009fe2:	e0a5      	b.n	800a130 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8009fea:	4619      	mov	r1, r3
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f000 f96d 	bl	800a2cc <USBH_Get_CfgDesc>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009ff6:	7bbb      	ldrb	r3, [r7, #14]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d103      	bne.n	800a004 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2205      	movs	r2, #5
 800a000:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a002:	e097      	b.n	800a134 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a004:	7bbb      	ldrb	r3, [r7, #14]
 800a006:	2b03      	cmp	r3, #3
 800a008:	f040 8094 	bne.w	800a134 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a012:	3301      	adds	r3, #1
 800a014:	b2da      	uxtb	r2, r3
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a022:	2b03      	cmp	r3, #3
 800a024:	d903      	bls.n	800a02e <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	220d      	movs	r2, #13
 800a02a:	701a      	strb	r2, [r3, #0]
      break;
 800a02c:	e082      	b.n	800a134 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	795b      	ldrb	r3, [r3, #5]
 800a032:	4619      	mov	r1, r3
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f001 f81f 	bl	800b078 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	791b      	ldrb	r3, [r3, #4]
 800a03e:	4619      	mov	r1, r3
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	f001 f819 	bl	800b078 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2200      	movs	r2, #0
 800a04a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2200      	movs	r2, #0
 800a050:	701a      	strb	r2, [r3, #0]
      break;
 800a052:	e06f      	b.n	800a134 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d019      	beq.n	800a092 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a06a:	23ff      	movs	r3, #255	@ 0xff
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f000 f957 	bl	800a320 <USBH_Get_StringDesc>
 800a072:	4603      	mov	r3, r0
 800a074:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a076:	7bbb      	ldrb	r3, [r7, #14]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d103      	bne.n	800a084 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2206      	movs	r2, #6
 800a080:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800a082:	e059      	b.n	800a138 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a084:	7bbb      	ldrb	r3, [r7, #14]
 800a086:	2b03      	cmp	r3, #3
 800a088:	d156      	bne.n	800a138 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2206      	movs	r2, #6
 800a08e:	705a      	strb	r2, [r3, #1]
      break;
 800a090:	e052      	b.n	800a138 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2206      	movs	r2, #6
 800a096:	705a      	strb	r2, [r3, #1]
      break;
 800a098:	e04e      	b.n	800a138 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d019      	beq.n	800a0d8 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a0b0:	23ff      	movs	r3, #255	@ 0xff
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f000 f934 	bl	800a320 <USBH_Get_StringDesc>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a0bc:	7bbb      	ldrb	r3, [r7, #14]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d103      	bne.n	800a0ca <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2207      	movs	r2, #7
 800a0c6:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800a0c8:	e038      	b.n	800a13c <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a0ca:	7bbb      	ldrb	r3, [r7, #14]
 800a0cc:	2b03      	cmp	r3, #3
 800a0ce:	d135      	bne.n	800a13c <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2207      	movs	r2, #7
 800a0d4:	705a      	strb	r2, [r3, #1]
      break;
 800a0d6:	e031      	b.n	800a13c <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2207      	movs	r2, #7
 800a0dc:	705a      	strb	r2, [r3, #1]
      break;
 800a0de:	e02d      	b.n	800a13c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d017      	beq.n	800a11a <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a0f6:	23ff      	movs	r3, #255	@ 0xff
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f000 f911 	bl	800a320 <USBH_Get_StringDesc>
 800a0fe:	4603      	mov	r3, r0
 800a100:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a102:	7bbb      	ldrb	r3, [r7, #14]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d102      	bne.n	800a10e <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a108:	2300      	movs	r3, #0
 800a10a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a10c:	e018      	b.n	800a140 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a10e:	7bbb      	ldrb	r3, [r7, #14]
 800a110:	2b03      	cmp	r3, #3
 800a112:	d115      	bne.n	800a140 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800a114:	2300      	movs	r3, #0
 800a116:	73fb      	strb	r3, [r7, #15]
      break;
 800a118:	e012      	b.n	800a140 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800a11a:	2300      	movs	r3, #0
 800a11c:	73fb      	strb	r3, [r7, #15]
      break;
 800a11e:	e00f      	b.n	800a140 <USBH_HandleEnum+0x3b4>

    default:
      break;
 800a120:	bf00      	nop
 800a122:	e00e      	b.n	800a142 <USBH_HandleEnum+0x3b6>
      break;
 800a124:	bf00      	nop
 800a126:	e00c      	b.n	800a142 <USBH_HandleEnum+0x3b6>
      break;
 800a128:	bf00      	nop
 800a12a:	e00a      	b.n	800a142 <USBH_HandleEnum+0x3b6>
      break;
 800a12c:	bf00      	nop
 800a12e:	e008      	b.n	800a142 <USBH_HandleEnum+0x3b6>
      break;
 800a130:	bf00      	nop
 800a132:	e006      	b.n	800a142 <USBH_HandleEnum+0x3b6>
      break;
 800a134:	bf00      	nop
 800a136:	e004      	b.n	800a142 <USBH_HandleEnum+0x3b6>
      break;
 800a138:	bf00      	nop
 800a13a:	e002      	b.n	800a142 <USBH_HandleEnum+0x3b6>
      break;
 800a13c:	bf00      	nop
 800a13e:	e000      	b.n	800a142 <USBH_HandleEnum+0x3b6>
      break;
 800a140:	bf00      	nop
  }
  return Status;
 800a142:	7bfb      	ldrb	r3, [r7, #15]
}
 800a144:	4618      	mov	r0, r3
 800a146:	3710      	adds	r7, #16
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}

0800a14c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a14c:	b480      	push	{r7}
 800a14e:	b083      	sub	sp, #12
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
 800a154:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	683a      	ldr	r2, [r7, #0]
 800a15a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800a15e:	bf00      	nop
 800a160:	370c      	adds	r7, #12
 800a162:	46bd      	mov	sp, r7
 800a164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a168:	4770      	bx	lr

0800a16a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a16a:	b580      	push	{r7, lr}
 800a16c:	b082      	sub	sp, #8
 800a16e:	af00      	add	r7, sp, #0
 800a170:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a178:	1c5a      	adds	r2, r3, #1
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f000 f804 	bl	800a18e <USBH_HandleSof>
}
 800a186:	bf00      	nop
 800a188:	3708      	adds	r7, #8
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}

0800a18e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a18e:	b580      	push	{r7, lr}
 800a190:	b082      	sub	sp, #8
 800a192:	af00      	add	r7, sp, #0
 800a194:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	781b      	ldrb	r3, [r3, #0]
 800a19a:	b2db      	uxtb	r3, r3
 800a19c:	2b0b      	cmp	r3, #11
 800a19e:	d10a      	bne.n	800a1b6 <USBH_HandleSof+0x28>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d005      	beq.n	800a1b6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a1b0:	699b      	ldr	r3, [r3, #24]
 800a1b2:	6878      	ldr	r0, [r7, #4]
 800a1b4:	4798      	blx	r3
  }
}
 800a1b6:	bf00      	nop
 800a1b8:	3708      	adds	r7, #8
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}

0800a1be <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a1be:	b480      	push	{r7}
 800a1c0:	b083      	sub	sp, #12
 800a1c2:	af00      	add	r7, sp, #0
 800a1c4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2201      	movs	r2, #1
 800a1ca:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
 800a1ce:	bf00      	nop
}
 800a1d0:	370c      	adds	r7, #12
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d8:	4770      	bx	lr

0800a1da <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a1da:	b480      	push	{r7}
 800a1dc:	b083      	sub	sp, #12
 800a1de:	af00      	add	r7, sp, #0
 800a1e0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2201      	movs	r2, #1
 800a1ee:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 800a1f2:	bf00      	nop
}
 800a1f4:	370c      	adds	r7, #12
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fc:	4770      	bx	lr

0800a1fe <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a1fe:	b480      	push	{r7}
 800a200:	b083      	sub	sp, #12
 800a202:	af00      	add	r7, sp, #0
 800a204:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2201      	movs	r2, #1
 800a20a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2200      	movs	r2, #0
 800a212:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2200      	movs	r2, #0
 800a21a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800a21e:	2300      	movs	r3, #0
}
 800a220:	4618      	mov	r0, r3
 800a222:	370c      	adds	r7, #12
 800a224:	46bd      	mov	sp, r7
 800a226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22a:	4770      	bx	lr

0800a22c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b082      	sub	sp, #8
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2201      	movs	r2, #1
 800a238:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2200      	movs	r2, #0
 800a240:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2200      	movs	r2, #0
 800a248:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800a24c:	6878      	ldr	r0, [r7, #4]
 800a24e:	f001 f8c0 	bl	800b3d2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	791b      	ldrb	r3, [r3, #4]
 800a256:	4619      	mov	r1, r3
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	f000 ff0d 	bl	800b078 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	795b      	ldrb	r3, [r3, #5]
 800a262:	4619      	mov	r1, r3
 800a264:	6878      	ldr	r0, [r7, #4]
 800a266:	f000 ff07 	bl	800b078 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800a26a:	2300      	movs	r3, #0
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	3708      	adds	r7, #8
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}

0800a274 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b086      	sub	sp, #24
 800a278:	af02      	add	r7, sp, #8
 800a27a:	6078      	str	r0, [r7, #4]
 800a27c:	460b      	mov	r3, r1
 800a27e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800a280:	887b      	ldrh	r3, [r7, #2]
 800a282:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a286:	d901      	bls.n	800a28c <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a288:	2303      	movs	r3, #3
 800a28a:	e01b      	b.n	800a2c4 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800a292:	887b      	ldrh	r3, [r7, #2]
 800a294:	9300      	str	r3, [sp, #0]
 800a296:	4613      	mov	r3, r2
 800a298:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a29c:	2100      	movs	r1, #0
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f000 f872 	bl	800a388 <USBH_GetDescriptor>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800a2a8:	7bfb      	ldrb	r3, [r7, #15]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d109      	bne.n	800a2c2 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a2b4:	887a      	ldrh	r2, [r7, #2]
 800a2b6:	4619      	mov	r1, r3
 800a2b8:	6878      	ldr	r0, [r7, #4]
 800a2ba:	f000 f929 	bl	800a510 <USBH_ParseDevDesc>
 800a2be:	4603      	mov	r3, r0
 800a2c0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a2c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3710      	adds	r7, #16
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}

0800a2cc <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b086      	sub	sp, #24
 800a2d0:	af02      	add	r7, sp, #8
 800a2d2:	6078      	str	r0, [r7, #4]
 800a2d4:	460b      	mov	r3, r1
 800a2d6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	331c      	adds	r3, #28
 800a2dc:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800a2de:	887b      	ldrh	r3, [r7, #2]
 800a2e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a2e4:	d901      	bls.n	800a2ea <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a2e6:	2303      	movs	r3, #3
 800a2e8:	e016      	b.n	800a318 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a2ea:	887b      	ldrh	r3, [r7, #2]
 800a2ec:	9300      	str	r3, [sp, #0]
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a2f4:	2100      	movs	r1, #0
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f000 f846 	bl	800a388 <USBH_GetDescriptor>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800a300:	7bfb      	ldrb	r3, [r7, #15]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d107      	bne.n	800a316 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800a306:	887b      	ldrh	r3, [r7, #2]
 800a308:	461a      	mov	r2, r3
 800a30a:	68b9      	ldr	r1, [r7, #8]
 800a30c:	6878      	ldr	r0, [r7, #4]
 800a30e:	f000 f9af 	bl	800a670 <USBH_ParseCfgDesc>
 800a312:	4603      	mov	r3, r0
 800a314:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a316:	7bfb      	ldrb	r3, [r7, #15]
}
 800a318:	4618      	mov	r0, r3
 800a31a:	3710      	adds	r7, #16
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}

0800a320 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b088      	sub	sp, #32
 800a324:	af02      	add	r7, sp, #8
 800a326:	60f8      	str	r0, [r7, #12]
 800a328:	607a      	str	r2, [r7, #4]
 800a32a:	461a      	mov	r2, r3
 800a32c:	460b      	mov	r3, r1
 800a32e:	72fb      	strb	r3, [r7, #11]
 800a330:	4613      	mov	r3, r2
 800a332:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800a334:	893b      	ldrh	r3, [r7, #8]
 800a336:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a33a:	d802      	bhi.n	800a342 <USBH_Get_StringDesc+0x22>
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d101      	bne.n	800a346 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a342:	2303      	movs	r3, #3
 800a344:	e01c      	b.n	800a380 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800a346:	7afb      	ldrb	r3, [r7, #11]
 800a348:	b29b      	uxth	r3, r3
 800a34a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800a34e:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800a356:	893b      	ldrh	r3, [r7, #8]
 800a358:	9300      	str	r3, [sp, #0]
 800a35a:	460b      	mov	r3, r1
 800a35c:	2100      	movs	r1, #0
 800a35e:	68f8      	ldr	r0, [r7, #12]
 800a360:	f000 f812 	bl	800a388 <USBH_GetDescriptor>
 800a364:	4603      	mov	r3, r0
 800a366:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800a368:	7dfb      	ldrb	r3, [r7, #23]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d107      	bne.n	800a37e <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a374:	893a      	ldrh	r2, [r7, #8]
 800a376:	6879      	ldr	r1, [r7, #4]
 800a378:	4618      	mov	r0, r3
 800a37a:	f000 fb8c 	bl	800aa96 <USBH_ParseStringDesc>
  }

  return status;
 800a37e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a380:	4618      	mov	r0, r3
 800a382:	3718      	adds	r7, #24
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}

0800a388 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b084      	sub	sp, #16
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	60f8      	str	r0, [r7, #12]
 800a390:	607b      	str	r3, [r7, #4]
 800a392:	460b      	mov	r3, r1
 800a394:	72fb      	strb	r3, [r7, #11]
 800a396:	4613      	mov	r3, r2
 800a398:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	789b      	ldrb	r3, [r3, #2]
 800a39e:	2b01      	cmp	r3, #1
 800a3a0:	d11c      	bne.n	800a3dc <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a3a2:	7afb      	ldrb	r3, [r7, #11]
 800a3a4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a3a8:	b2da      	uxtb	r2, r3
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	2206      	movs	r2, #6
 800a3b2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	893a      	ldrh	r2, [r7, #8]
 800a3b8:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a3ba:	893b      	ldrh	r3, [r7, #8]
 800a3bc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a3c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a3c4:	d104      	bne.n	800a3d0 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	f240 4209 	movw	r2, #1033	@ 0x409
 800a3cc:	829a      	strh	r2, [r3, #20]
 800a3ce:	e002      	b.n	800a3d6 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	8b3a      	ldrh	r2, [r7, #24]
 800a3da:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a3dc:	8b3b      	ldrh	r3, [r7, #24]
 800a3de:	461a      	mov	r2, r3
 800a3e0:	6879      	ldr	r1, [r7, #4]
 800a3e2:	68f8      	ldr	r0, [r7, #12]
 800a3e4:	f000 fba4 	bl	800ab30 <USBH_CtlReq>
 800a3e8:	4603      	mov	r3, r0
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3710      	adds	r7, #16
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}

0800a3f2 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a3f2:	b580      	push	{r7, lr}
 800a3f4:	b082      	sub	sp, #8
 800a3f6:	af00      	add	r7, sp, #0
 800a3f8:	6078      	str	r0, [r7, #4]
 800a3fa:	460b      	mov	r3, r1
 800a3fc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	789b      	ldrb	r3, [r3, #2]
 800a402:	2b01      	cmp	r3, #1
 800a404:	d10f      	bne.n	800a426 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2200      	movs	r2, #0
 800a40a:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2205      	movs	r2, #5
 800a410:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a412:	78fb      	ldrb	r3, [r7, #3]
 800a414:	b29a      	uxth	r2, r3
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2200      	movs	r2, #0
 800a41e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2200      	movs	r2, #0
 800a424:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a426:	2200      	movs	r2, #0
 800a428:	2100      	movs	r1, #0
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f000 fb80 	bl	800ab30 <USBH_CtlReq>
 800a430:	4603      	mov	r3, r0
}
 800a432:	4618      	mov	r0, r3
 800a434:	3708      	adds	r7, #8
 800a436:	46bd      	mov	sp, r7
 800a438:	bd80      	pop	{r7, pc}

0800a43a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a43a:	b580      	push	{r7, lr}
 800a43c:	b082      	sub	sp, #8
 800a43e:	af00      	add	r7, sp, #0
 800a440:	6078      	str	r0, [r7, #4]
 800a442:	460b      	mov	r3, r1
 800a444:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	789b      	ldrb	r3, [r3, #2]
 800a44a:	2b01      	cmp	r3, #1
 800a44c:	d10e      	bne.n	800a46c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2200      	movs	r2, #0
 800a452:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2209      	movs	r2, #9
 800a458:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	887a      	ldrh	r2, [r7, #2]
 800a45e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2200      	movs	r2, #0
 800a464:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2200      	movs	r2, #0
 800a46a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a46c:	2200      	movs	r2, #0
 800a46e:	2100      	movs	r1, #0
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f000 fb5d 	bl	800ab30 <USBH_CtlReq>
 800a476:	4603      	mov	r3, r0
}
 800a478:	4618      	mov	r0, r3
 800a47a:	3708      	adds	r7, #8
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}

0800a480 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b082      	sub	sp, #8
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
 800a488:	460b      	mov	r3, r1
 800a48a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	789b      	ldrb	r3, [r3, #2]
 800a490:	2b01      	cmp	r3, #1
 800a492:	d10f      	bne.n	800a4b4 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2200      	movs	r2, #0
 800a498:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2203      	movs	r2, #3
 800a49e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a4a0:	78fb      	ldrb	r3, [r7, #3]
 800a4a2:	b29a      	uxth	r2, r3
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	2100      	movs	r1, #0
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f000 fb39 	bl	800ab30 <USBH_CtlReq>
 800a4be:	4603      	mov	r3, r0
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	3708      	adds	r7, #8
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}

0800a4c8 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b082      	sub	sp, #8
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
 800a4d0:	460b      	mov	r3, r1
 800a4d2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	789b      	ldrb	r3, [r3, #2]
 800a4d8:	2b01      	cmp	r3, #1
 800a4da:	d10f      	bne.n	800a4fc <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2202      	movs	r2, #2
 800a4e0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2201      	movs	r2, #1
 800a4e6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a4ee:	78fb      	ldrb	r3, [r7, #3]
 800a4f0:	b29a      	uxth	r2, r3
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	2100      	movs	r1, #0
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f000 fb15 	bl	800ab30 <USBH_CtlReq>
 800a506:	4603      	mov	r3, r0
}
 800a508:	4618      	mov	r0, r3
 800a50a:	3708      	adds	r7, #8
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}

0800a510 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a510:	b480      	push	{r7}
 800a512:	b087      	sub	sp, #28
 800a514:	af00      	add	r7, sp, #0
 800a516:	60f8      	str	r0, [r7, #12]
 800a518:	60b9      	str	r1, [r7, #8]
 800a51a:	4613      	mov	r3, r2
 800a51c:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800a524:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800a526:	2300      	movs	r3, #0
 800a528:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800a52a:	68bb      	ldr	r3, [r7, #8]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d101      	bne.n	800a534 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800a530:	2302      	movs	r3, #2
 800a532:	e094      	b.n	800a65e <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	781a      	ldrb	r2, [r3, #0]
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	785a      	ldrb	r2, [r3, #1]
 800a540:	693b      	ldr	r3, [r7, #16]
 800a542:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	3302      	adds	r3, #2
 800a548:	781b      	ldrb	r3, [r3, #0]
 800a54a:	461a      	mov	r2, r3
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	3303      	adds	r3, #3
 800a550:	781b      	ldrb	r3, [r3, #0]
 800a552:	021b      	lsls	r3, r3, #8
 800a554:	b29b      	uxth	r3, r3
 800a556:	4313      	orrs	r3, r2
 800a558:	b29a      	uxth	r2, r3
 800a55a:	693b      	ldr	r3, [r7, #16]
 800a55c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800a55e:	68bb      	ldr	r3, [r7, #8]
 800a560:	791a      	ldrb	r2, [r3, #4]
 800a562:	693b      	ldr	r3, [r7, #16]
 800a564:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	795a      	ldrb	r2, [r3, #5]
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	799a      	ldrb	r2, [r3, #6]
 800a572:	693b      	ldr	r3, [r7, #16]
 800a574:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	79da      	ldrb	r2, [r3, #7]
 800a57a:	693b      	ldr	r3, [r7, #16]
 800a57c:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a584:	2b00      	cmp	r3, #0
 800a586:	d004      	beq.n	800a592 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a58e:	2b01      	cmp	r3, #1
 800a590:	d11b      	bne.n	800a5ca <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800a592:	693b      	ldr	r3, [r7, #16]
 800a594:	79db      	ldrb	r3, [r3, #7]
 800a596:	2b20      	cmp	r3, #32
 800a598:	dc0f      	bgt.n	800a5ba <USBH_ParseDevDesc+0xaa>
 800a59a:	2b08      	cmp	r3, #8
 800a59c:	db0f      	blt.n	800a5be <USBH_ParseDevDesc+0xae>
 800a59e:	3b08      	subs	r3, #8
 800a5a0:	4a32      	ldr	r2, [pc, #200]	@ (800a66c <USBH_ParseDevDesc+0x15c>)
 800a5a2:	fa22 f303 	lsr.w	r3, r2, r3
 800a5a6:	f003 0301 	and.w	r3, r3, #1
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	bf14      	ite	ne
 800a5ae:	2301      	movne	r3, #1
 800a5b0:	2300      	moveq	r3, #0
 800a5b2:	b2db      	uxtb	r3, r3
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d106      	bne.n	800a5c6 <USBH_ParseDevDesc+0xb6>
 800a5b8:	e001      	b.n	800a5be <USBH_ParseDevDesc+0xae>
 800a5ba:	2b40      	cmp	r3, #64	@ 0x40
 800a5bc:	d003      	beq.n	800a5c6 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800a5be:	693b      	ldr	r3, [r7, #16]
 800a5c0:	2208      	movs	r2, #8
 800a5c2:	71da      	strb	r2, [r3, #7]
        break;
 800a5c4:	e000      	b.n	800a5c8 <USBH_ParseDevDesc+0xb8>
        break;
 800a5c6:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800a5c8:	e00e      	b.n	800a5e8 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a5d0:	2b02      	cmp	r3, #2
 800a5d2:	d107      	bne.n	800a5e4 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800a5d4:	693b      	ldr	r3, [r7, #16]
 800a5d6:	79db      	ldrb	r3, [r3, #7]
 800a5d8:	2b08      	cmp	r3, #8
 800a5da:	d005      	beq.n	800a5e8 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800a5dc:	693b      	ldr	r3, [r7, #16]
 800a5de:	2208      	movs	r2, #8
 800a5e0:	71da      	strb	r2, [r3, #7]
 800a5e2:	e001      	b.n	800a5e8 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a5e4:	2303      	movs	r3, #3
 800a5e6:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800a5e8:	88fb      	ldrh	r3, [r7, #6]
 800a5ea:	2b08      	cmp	r3, #8
 800a5ec:	d936      	bls.n	800a65c <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	3308      	adds	r3, #8
 800a5f2:	781b      	ldrb	r3, [r3, #0]
 800a5f4:	461a      	mov	r2, r3
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	3309      	adds	r3, #9
 800a5fa:	781b      	ldrb	r3, [r3, #0]
 800a5fc:	021b      	lsls	r3, r3, #8
 800a5fe:	b29b      	uxth	r3, r3
 800a600:	4313      	orrs	r3, r2
 800a602:	b29a      	uxth	r2, r3
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	330a      	adds	r3, #10
 800a60c:	781b      	ldrb	r3, [r3, #0]
 800a60e:	461a      	mov	r2, r3
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	330b      	adds	r3, #11
 800a614:	781b      	ldrb	r3, [r3, #0]
 800a616:	021b      	lsls	r3, r3, #8
 800a618:	b29b      	uxth	r3, r3
 800a61a:	4313      	orrs	r3, r2
 800a61c:	b29a      	uxth	r2, r3
 800a61e:	693b      	ldr	r3, [r7, #16]
 800a620:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	330c      	adds	r3, #12
 800a626:	781b      	ldrb	r3, [r3, #0]
 800a628:	461a      	mov	r2, r3
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	330d      	adds	r3, #13
 800a62e:	781b      	ldrb	r3, [r3, #0]
 800a630:	021b      	lsls	r3, r3, #8
 800a632:	b29b      	uxth	r3, r3
 800a634:	4313      	orrs	r3, r2
 800a636:	b29a      	uxth	r2, r3
 800a638:	693b      	ldr	r3, [r7, #16]
 800a63a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	7b9a      	ldrb	r2, [r3, #14]
 800a640:	693b      	ldr	r3, [r7, #16]
 800a642:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	7bda      	ldrb	r2, [r3, #15]
 800a648:	693b      	ldr	r3, [r7, #16]
 800a64a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	7c1a      	ldrb	r2, [r3, #16]
 800a650:	693b      	ldr	r3, [r7, #16]
 800a652:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800a654:	68bb      	ldr	r3, [r7, #8]
 800a656:	7c5a      	ldrb	r2, [r3, #17]
 800a658:	693b      	ldr	r3, [r7, #16]
 800a65a:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800a65c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a65e:	4618      	mov	r0, r3
 800a660:	371c      	adds	r7, #28
 800a662:	46bd      	mov	sp, r7
 800a664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a668:	4770      	bx	lr
 800a66a:	bf00      	nop
 800a66c:	01000101 	.word	0x01000101

0800a670 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b08c      	sub	sp, #48	@ 0x30
 800a674:	af00      	add	r7, sp, #0
 800a676:	60f8      	str	r0, [r7, #12]
 800a678:	60b9      	str	r1, [r7, #8]
 800a67a:	4613      	mov	r3, r2
 800a67c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a684:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800a686:	2300      	movs	r3, #0
 800a688:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a68c:	2300      	movs	r3, #0
 800a68e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800a692:	2300      	movs	r3, #0
 800a694:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d101      	bne.n	800a6a2 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800a69e:	2302      	movs	r3, #2
 800a6a0:	e0de      	b.n	800a860 <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800a6a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6a8:	781b      	ldrb	r3, [r3, #0]
 800a6aa:	2b09      	cmp	r3, #9
 800a6ac:	d002      	beq.n	800a6b4 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800a6ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6b0:	2209      	movs	r2, #9
 800a6b2:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	781a      	ldrb	r2, [r3, #0]
 800a6b8:	6a3b      	ldr	r3, [r7, #32]
 800a6ba:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800a6bc:	68bb      	ldr	r3, [r7, #8]
 800a6be:	785a      	ldrb	r2, [r3, #1]
 800a6c0:	6a3b      	ldr	r3, [r7, #32]
 800a6c2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	3302      	adds	r3, #2
 800a6c8:	781b      	ldrb	r3, [r3, #0]
 800a6ca:	461a      	mov	r2, r3
 800a6cc:	68bb      	ldr	r3, [r7, #8]
 800a6ce:	3303      	adds	r3, #3
 800a6d0:	781b      	ldrb	r3, [r3, #0]
 800a6d2:	021b      	lsls	r3, r3, #8
 800a6d4:	b29b      	uxth	r3, r3
 800a6d6:	4313      	orrs	r3, r2
 800a6d8:	b29b      	uxth	r3, r3
 800a6da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a6de:	bf28      	it	cs
 800a6e0:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800a6e4:	b29a      	uxth	r2, r3
 800a6e6:	6a3b      	ldr	r3, [r7, #32]
 800a6e8:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	791a      	ldrb	r2, [r3, #4]
 800a6ee:	6a3b      	ldr	r3, [r7, #32]
 800a6f0:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800a6f2:	68bb      	ldr	r3, [r7, #8]
 800a6f4:	795a      	ldrb	r2, [r3, #5]
 800a6f6:	6a3b      	ldr	r3, [r7, #32]
 800a6f8:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800a6fa:	68bb      	ldr	r3, [r7, #8]
 800a6fc:	799a      	ldrb	r2, [r3, #6]
 800a6fe:	6a3b      	ldr	r3, [r7, #32]
 800a700:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800a702:	68bb      	ldr	r3, [r7, #8]
 800a704:	79da      	ldrb	r2, [r3, #7]
 800a706:	6a3b      	ldr	r3, [r7, #32]
 800a708:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	7a1a      	ldrb	r2, [r3, #8]
 800a70e:	6a3b      	ldr	r3, [r7, #32]
 800a710:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a712:	88fb      	ldrh	r3, [r7, #6]
 800a714:	2b09      	cmp	r3, #9
 800a716:	f240 80a1 	bls.w	800a85c <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 800a71a:	2309      	movs	r3, #9
 800a71c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a71e:	2300      	movs	r3, #0
 800a720:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a722:	e085      	b.n	800a830 <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a724:	f107 0316 	add.w	r3, r7, #22
 800a728:	4619      	mov	r1, r3
 800a72a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a72c:	f000 f9e6 	bl	800aafc <USBH_GetNextDesc>
 800a730:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800a732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a734:	785b      	ldrb	r3, [r3, #1]
 800a736:	2b04      	cmp	r3, #4
 800a738:	d17a      	bne.n	800a830 <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800a73a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a73c:	781b      	ldrb	r3, [r3, #0]
 800a73e:	2b09      	cmp	r3, #9
 800a740:	d002      	beq.n	800a748 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800a742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a744:	2209      	movs	r2, #9
 800a746:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800a748:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a74c:	221a      	movs	r2, #26
 800a74e:	fb02 f303 	mul.w	r3, r2, r3
 800a752:	3308      	adds	r3, #8
 800a754:	6a3a      	ldr	r2, [r7, #32]
 800a756:	4413      	add	r3, r2
 800a758:	3302      	adds	r3, #2
 800a75a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a75c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a75e:	69f8      	ldr	r0, [r7, #28]
 800a760:	f000 f882 	bl	800a868 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a764:	2300      	movs	r3, #0
 800a766:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800a76a:	2300      	movs	r3, #0
 800a76c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a76e:	e043      	b.n	800a7f8 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a770:	f107 0316 	add.w	r3, r7, #22
 800a774:	4619      	mov	r1, r3
 800a776:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a778:	f000 f9c0 	bl	800aafc <USBH_GetNextDesc>
 800a77c:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a77e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a780:	785b      	ldrb	r3, [r3, #1]
 800a782:	2b05      	cmp	r3, #5
 800a784:	d138      	bne.n	800a7f8 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800a786:	69fb      	ldr	r3, [r7, #28]
 800a788:	795b      	ldrb	r3, [r3, #5]
 800a78a:	2b01      	cmp	r3, #1
 800a78c:	d113      	bne.n	800a7b6 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a78e:	69fb      	ldr	r3, [r7, #28]
 800a790:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800a792:	2b02      	cmp	r3, #2
 800a794:	d003      	beq.n	800a79e <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a796:	69fb      	ldr	r3, [r7, #28]
 800a798:	799b      	ldrb	r3, [r3, #6]
 800a79a:	2b03      	cmp	r3, #3
 800a79c:	d10b      	bne.n	800a7b6 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a79e:	69fb      	ldr	r3, [r7, #28]
 800a7a0:	79db      	ldrb	r3, [r3, #7]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d10b      	bne.n	800a7be <USBH_ParseCfgDesc+0x14e>
 800a7a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7a8:	781b      	ldrb	r3, [r3, #0]
 800a7aa:	2b09      	cmp	r3, #9
 800a7ac:	d007      	beq.n	800a7be <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800a7ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7b0:	2209      	movs	r2, #9
 800a7b2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a7b4:	e003      	b.n	800a7be <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800a7b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7b8:	2207      	movs	r2, #7
 800a7ba:	701a      	strb	r2, [r3, #0]
 800a7bc:	e000      	b.n	800a7c0 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a7be:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a7c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a7c4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a7c8:	3201      	adds	r2, #1
 800a7ca:	00d2      	lsls	r2, r2, #3
 800a7cc:	211a      	movs	r1, #26
 800a7ce:	fb01 f303 	mul.w	r3, r1, r3
 800a7d2:	4413      	add	r3, r2
 800a7d4:	3308      	adds	r3, #8
 800a7d6:	6a3a      	ldr	r2, [r7, #32]
 800a7d8:	4413      	add	r3, r2
 800a7da:	3304      	adds	r3, #4
 800a7dc:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800a7de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a7e0:	69b9      	ldr	r1, [r7, #24]
 800a7e2:	68f8      	ldr	r0, [r7, #12]
 800a7e4:	f000 f86f 	bl	800a8c6 <USBH_ParseEPDesc>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800a7ee:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a7f2:	3301      	adds	r3, #1
 800a7f4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a7f8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a7fc:	2b01      	cmp	r3, #1
 800a7fe:	d80a      	bhi.n	800a816 <USBH_ParseCfgDesc+0x1a6>
 800a800:	69fb      	ldr	r3, [r7, #28]
 800a802:	791b      	ldrb	r3, [r3, #4]
 800a804:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a808:	429a      	cmp	r2, r3
 800a80a:	d204      	bcs.n	800a816 <USBH_ParseCfgDesc+0x1a6>
 800a80c:	6a3b      	ldr	r3, [r7, #32]
 800a80e:	885a      	ldrh	r2, [r3, #2]
 800a810:	8afb      	ldrh	r3, [r7, #22]
 800a812:	429a      	cmp	r2, r3
 800a814:	d8ac      	bhi.n	800a770 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800a816:	69fb      	ldr	r3, [r7, #28]
 800a818:	791b      	ldrb	r3, [r3, #4]
 800a81a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a81e:	429a      	cmp	r2, r3
 800a820:	d201      	bcs.n	800a826 <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 800a822:	2303      	movs	r3, #3
 800a824:	e01c      	b.n	800a860 <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 800a826:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a82a:	3301      	adds	r3, #1
 800a82c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a830:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a834:	2b01      	cmp	r3, #1
 800a836:	d805      	bhi.n	800a844 <USBH_ParseCfgDesc+0x1d4>
 800a838:	6a3b      	ldr	r3, [r7, #32]
 800a83a:	885a      	ldrh	r2, [r3, #2]
 800a83c:	8afb      	ldrh	r3, [r7, #22]
 800a83e:	429a      	cmp	r2, r3
 800a840:	f63f af70 	bhi.w	800a724 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800a844:	6a3b      	ldr	r3, [r7, #32]
 800a846:	791b      	ldrb	r3, [r3, #4]
 800a848:	2b02      	cmp	r3, #2
 800a84a:	bf28      	it	cs
 800a84c:	2302      	movcs	r3, #2
 800a84e:	b2db      	uxtb	r3, r3
 800a850:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a854:	429a      	cmp	r2, r3
 800a856:	d201      	bcs.n	800a85c <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 800a858:	2303      	movs	r3, #3
 800a85a:	e001      	b.n	800a860 <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 800a85c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800a860:	4618      	mov	r0, r3
 800a862:	3730      	adds	r7, #48	@ 0x30
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}

0800a868 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800a868:	b480      	push	{r7}
 800a86a:	b083      	sub	sp, #12
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
 800a870:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	781a      	ldrb	r2, [r3, #0]
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	785a      	ldrb	r2, [r3, #1]
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	789a      	ldrb	r2, [r3, #2]
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	78da      	ldrb	r2, [r3, #3]
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	791a      	ldrb	r2, [r3, #4]
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	795a      	ldrb	r2, [r3, #5]
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	799a      	ldrb	r2, [r3, #6]
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	79da      	ldrb	r2, [r3, #7]
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	7a1a      	ldrb	r2, [r3, #8]
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	721a      	strb	r2, [r3, #8]
}
 800a8ba:	bf00      	nop
 800a8bc:	370c      	adds	r7, #12
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c4:	4770      	bx	lr

0800a8c6 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800a8c6:	b480      	push	{r7}
 800a8c8:	b087      	sub	sp, #28
 800a8ca:	af00      	add	r7, sp, #0
 800a8cc:	60f8      	str	r0, [r7, #12]
 800a8ce:	60b9      	str	r1, [r7, #8]
 800a8d0:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	781a      	ldrb	r2, [r3, #0]
 800a8da:	68bb      	ldr	r3, [r7, #8]
 800a8dc:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	785a      	ldrb	r2, [r3, #1]
 800a8e2:	68bb      	ldr	r3, [r7, #8]
 800a8e4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	789a      	ldrb	r2, [r3, #2]
 800a8ea:	68bb      	ldr	r3, [r7, #8]
 800a8ec:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	78da      	ldrb	r2, [r3, #3]
 800a8f2:	68bb      	ldr	r3, [r7, #8]
 800a8f4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	3304      	adds	r3, #4
 800a8fa:	781b      	ldrb	r3, [r3, #0]
 800a8fc:	461a      	mov	r2, r3
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	3305      	adds	r3, #5
 800a902:	781b      	ldrb	r3, [r3, #0]
 800a904:	021b      	lsls	r3, r3, #8
 800a906:	b29b      	uxth	r3, r3
 800a908:	4313      	orrs	r3, r2
 800a90a:	b29a      	uxth	r2, r3
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	799a      	ldrb	r2, [r3, #6]
 800a914:	68bb      	ldr	r3, [r7, #8]
 800a916:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	889b      	ldrh	r3, [r3, #4]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d009      	beq.n	800a934 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a924:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a928:	d804      	bhi.n	800a934 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a92e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a932:	d901      	bls.n	800a938 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800a934:	2303      	movs	r3, #3
 800a936:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d136      	bne.n	800a9b0 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	78db      	ldrb	r3, [r3, #3]
 800a946:	f003 0303 	and.w	r3, r3, #3
 800a94a:	2b02      	cmp	r3, #2
 800a94c:	d108      	bne.n	800a960 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800a94e:	68bb      	ldr	r3, [r7, #8]
 800a950:	889b      	ldrh	r3, [r3, #4]
 800a952:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a956:	f240 8097 	bls.w	800aa88 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a95a:	2303      	movs	r3, #3
 800a95c:	75fb      	strb	r3, [r7, #23]
 800a95e:	e093      	b.n	800aa88 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	78db      	ldrb	r3, [r3, #3]
 800a964:	f003 0303 	and.w	r3, r3, #3
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d107      	bne.n	800a97c <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	889b      	ldrh	r3, [r3, #4]
 800a970:	2b40      	cmp	r3, #64	@ 0x40
 800a972:	f240 8089 	bls.w	800aa88 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a976:	2303      	movs	r3, #3
 800a978:	75fb      	strb	r3, [r7, #23]
 800a97a:	e085      	b.n	800aa88 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	78db      	ldrb	r3, [r3, #3]
 800a980:	f003 0303 	and.w	r3, r3, #3
 800a984:	2b01      	cmp	r3, #1
 800a986:	d005      	beq.n	800a994 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800a988:	68bb      	ldr	r3, [r7, #8]
 800a98a:	78db      	ldrb	r3, [r3, #3]
 800a98c:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a990:	2b03      	cmp	r3, #3
 800a992:	d10a      	bne.n	800a9aa <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	799b      	ldrb	r3, [r3, #6]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d003      	beq.n	800a9a4 <USBH_ParseEPDesc+0xde>
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	799b      	ldrb	r3, [r3, #6]
 800a9a0:	2b10      	cmp	r3, #16
 800a9a2:	d970      	bls.n	800aa86 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800a9a4:	2303      	movs	r3, #3
 800a9a6:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a9a8:	e06d      	b.n	800aa86 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a9aa:	2303      	movs	r3, #3
 800a9ac:	75fb      	strb	r3, [r7, #23]
 800a9ae:	e06b      	b.n	800aa88 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a9b6:	2b01      	cmp	r3, #1
 800a9b8:	d13c      	bne.n	800aa34 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a9ba:	68bb      	ldr	r3, [r7, #8]
 800a9bc:	78db      	ldrb	r3, [r3, #3]
 800a9be:	f003 0303 	and.w	r3, r3, #3
 800a9c2:	2b02      	cmp	r3, #2
 800a9c4:	d005      	beq.n	800a9d2 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800a9c6:	68bb      	ldr	r3, [r7, #8]
 800a9c8:	78db      	ldrb	r3, [r3, #3]
 800a9ca:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d106      	bne.n	800a9e0 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	889b      	ldrh	r3, [r3, #4]
 800a9d6:	2b40      	cmp	r3, #64	@ 0x40
 800a9d8:	d956      	bls.n	800aa88 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a9da:	2303      	movs	r3, #3
 800a9dc:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a9de:	e053      	b.n	800aa88 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	78db      	ldrb	r3, [r3, #3]
 800a9e4:	f003 0303 	and.w	r3, r3, #3
 800a9e8:	2b01      	cmp	r3, #1
 800a9ea:	d10e      	bne.n	800aa0a <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	799b      	ldrb	r3, [r3, #6]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d007      	beq.n	800aa04 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800a9f4:	68bb      	ldr	r3, [r7, #8]
 800a9f6:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800a9f8:	2b10      	cmp	r3, #16
 800a9fa:	d803      	bhi.n	800aa04 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800aa00:	2b40      	cmp	r3, #64	@ 0x40
 800aa02:	d941      	bls.n	800aa88 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800aa04:	2303      	movs	r3, #3
 800aa06:	75fb      	strb	r3, [r7, #23]
 800aa08:	e03e      	b.n	800aa88 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800aa0a:	68bb      	ldr	r3, [r7, #8]
 800aa0c:	78db      	ldrb	r3, [r3, #3]
 800aa0e:	f003 0303 	and.w	r3, r3, #3
 800aa12:	2b03      	cmp	r3, #3
 800aa14:	d10b      	bne.n	800aa2e <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	799b      	ldrb	r3, [r3, #6]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d004      	beq.n	800aa28 <USBH_ParseEPDesc+0x162>
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	889b      	ldrh	r3, [r3, #4]
 800aa22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aa26:	d32f      	bcc.n	800aa88 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800aa28:	2303      	movs	r3, #3
 800aa2a:	75fb      	strb	r3, [r7, #23]
 800aa2c:	e02c      	b.n	800aa88 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800aa2e:	2303      	movs	r3, #3
 800aa30:	75fb      	strb	r3, [r7, #23]
 800aa32:	e029      	b.n	800aa88 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800aa3a:	2b02      	cmp	r3, #2
 800aa3c:	d120      	bne.n	800aa80 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800aa3e:	68bb      	ldr	r3, [r7, #8]
 800aa40:	78db      	ldrb	r3, [r3, #3]
 800aa42:	f003 0303 	and.w	r3, r3, #3
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d106      	bne.n	800aa58 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800aa4a:	68bb      	ldr	r3, [r7, #8]
 800aa4c:	889b      	ldrh	r3, [r3, #4]
 800aa4e:	2b08      	cmp	r3, #8
 800aa50:	d01a      	beq.n	800aa88 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800aa52:	2303      	movs	r3, #3
 800aa54:	75fb      	strb	r3, [r7, #23]
 800aa56:	e017      	b.n	800aa88 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	78db      	ldrb	r3, [r3, #3]
 800aa5c:	f003 0303 	and.w	r3, r3, #3
 800aa60:	2b03      	cmp	r3, #3
 800aa62:	d10a      	bne.n	800aa7a <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	799b      	ldrb	r3, [r3, #6]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d003      	beq.n	800aa74 <USBH_ParseEPDesc+0x1ae>
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	889b      	ldrh	r3, [r3, #4]
 800aa70:	2b08      	cmp	r3, #8
 800aa72:	d909      	bls.n	800aa88 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800aa74:	2303      	movs	r3, #3
 800aa76:	75fb      	strb	r3, [r7, #23]
 800aa78:	e006      	b.n	800aa88 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800aa7a:	2303      	movs	r3, #3
 800aa7c:	75fb      	strb	r3, [r7, #23]
 800aa7e:	e003      	b.n	800aa88 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800aa80:	2303      	movs	r3, #3
 800aa82:	75fb      	strb	r3, [r7, #23]
 800aa84:	e000      	b.n	800aa88 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800aa86:	bf00      	nop
  }

  return status;
 800aa88:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	371c      	adds	r7, #28
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa94:	4770      	bx	lr

0800aa96 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800aa96:	b480      	push	{r7}
 800aa98:	b087      	sub	sp, #28
 800aa9a:	af00      	add	r7, sp, #0
 800aa9c:	60f8      	str	r0, [r7, #12]
 800aa9e:	60b9      	str	r1, [r7, #8]
 800aaa0:	4613      	mov	r3, r2
 800aaa2:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	3301      	adds	r3, #1
 800aaa8:	781b      	ldrb	r3, [r3, #0]
 800aaaa:	2b03      	cmp	r3, #3
 800aaac:	d120      	bne.n	800aaf0 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	781b      	ldrb	r3, [r3, #0]
 800aab2:	1e9a      	subs	r2, r3, #2
 800aab4:	88fb      	ldrh	r3, [r7, #6]
 800aab6:	4293      	cmp	r3, r2
 800aab8:	bf28      	it	cs
 800aaba:	4613      	movcs	r3, r2
 800aabc:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	3302      	adds	r3, #2
 800aac2:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800aac4:	2300      	movs	r3, #0
 800aac6:	82fb      	strh	r3, [r7, #22]
 800aac8:	e00b      	b.n	800aae2 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800aaca:	8afb      	ldrh	r3, [r7, #22]
 800aacc:	68fa      	ldr	r2, [r7, #12]
 800aace:	4413      	add	r3, r2
 800aad0:	781a      	ldrb	r2, [r3, #0]
 800aad2:	68bb      	ldr	r3, [r7, #8]
 800aad4:	701a      	strb	r2, [r3, #0]
      pdest++;
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	3301      	adds	r3, #1
 800aada:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800aadc:	8afb      	ldrh	r3, [r7, #22]
 800aade:	3302      	adds	r3, #2
 800aae0:	82fb      	strh	r3, [r7, #22]
 800aae2:	8afa      	ldrh	r2, [r7, #22]
 800aae4:	8abb      	ldrh	r3, [r7, #20]
 800aae6:	429a      	cmp	r2, r3
 800aae8:	d3ef      	bcc.n	800aaca <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	2200      	movs	r2, #0
 800aaee:	701a      	strb	r2, [r3, #0]
  }
}
 800aaf0:	bf00      	nop
 800aaf2:	371c      	adds	r7, #28
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafa:	4770      	bx	lr

0800aafc <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800aafc:	b480      	push	{r7}
 800aafe:	b085      	sub	sp, #20
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
 800ab04:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	881b      	ldrh	r3, [r3, #0]
 800ab0a:	687a      	ldr	r2, [r7, #4]
 800ab0c:	7812      	ldrb	r2, [r2, #0]
 800ab0e:	4413      	add	r3, r2
 800ab10:	b29a      	uxth	r2, r3
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	781b      	ldrb	r3, [r3, #0]
 800ab1a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	4413      	add	r3, r2
 800ab20:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ab22:	68fb      	ldr	r3, [r7, #12]
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3714      	adds	r7, #20
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2e:	4770      	bx	lr

0800ab30 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b086      	sub	sp, #24
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	60f8      	str	r0, [r7, #12]
 800ab38:	60b9      	str	r1, [r7, #8]
 800ab3a:	4613      	mov	r3, r2
 800ab3c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800ab3e:	2301      	movs	r3, #1
 800ab40:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	789b      	ldrb	r3, [r3, #2]
 800ab46:	2b01      	cmp	r3, #1
 800ab48:	d002      	beq.n	800ab50 <USBH_CtlReq+0x20>
 800ab4a:	2b02      	cmp	r3, #2
 800ab4c:	d00f      	beq.n	800ab6e <USBH_CtlReq+0x3e>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 800ab4e:	e027      	b.n	800aba0 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	68ba      	ldr	r2, [r7, #8]
 800ab54:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	88fa      	ldrh	r2, [r7, #6]
 800ab5a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	2201      	movs	r2, #1
 800ab60:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	2202      	movs	r2, #2
 800ab66:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800ab68:	2301      	movs	r3, #1
 800ab6a:	75fb      	strb	r3, [r7, #23]
      break;
 800ab6c:	e018      	b.n	800aba0 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800ab6e:	68f8      	ldr	r0, [r7, #12]
 800ab70:	f000 f81c 	bl	800abac <USBH_HandleControl>
 800ab74:	4603      	mov	r3, r0
 800ab76:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800ab78:	7dfb      	ldrb	r3, [r7, #23]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d002      	beq.n	800ab84 <USBH_CtlReq+0x54>
 800ab7e:	7dfb      	ldrb	r3, [r7, #23]
 800ab80:	2b03      	cmp	r3, #3
 800ab82:	d106      	bne.n	800ab92 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	2201      	movs	r2, #1
 800ab88:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	761a      	strb	r2, [r3, #24]
      break;
 800ab90:	e005      	b.n	800ab9e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800ab92:	7dfb      	ldrb	r3, [r7, #23]
 800ab94:	2b02      	cmp	r3, #2
 800ab96:	d102      	bne.n	800ab9e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	2201      	movs	r2, #1
 800ab9c:	709a      	strb	r2, [r3, #2]
      break;
 800ab9e:	bf00      	nop
  }
  return status;
 800aba0:	7dfb      	ldrb	r3, [r7, #23]
}
 800aba2:	4618      	mov	r0, r3
 800aba4:	3718      	adds	r7, #24
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd80      	pop	{r7, pc}
	...

0800abac <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b086      	sub	sp, #24
 800abb0:	af02      	add	r7, sp, #8
 800abb2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800abb4:	2301      	movs	r3, #1
 800abb6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800abb8:	2300      	movs	r3, #0
 800abba:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	7e1b      	ldrb	r3, [r3, #24]
 800abc0:	3b01      	subs	r3, #1
 800abc2:	2b0a      	cmp	r3, #10
 800abc4:	f200 8157 	bhi.w	800ae76 <USBH_HandleControl+0x2ca>
 800abc8:	a201      	add	r2, pc, #4	@ (adr r2, 800abd0 <USBH_HandleControl+0x24>)
 800abca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abce:	bf00      	nop
 800abd0:	0800abfd 	.word	0x0800abfd
 800abd4:	0800ac17 	.word	0x0800ac17
 800abd8:	0800ac81 	.word	0x0800ac81
 800abdc:	0800aca7 	.word	0x0800aca7
 800abe0:	0800ace1 	.word	0x0800ace1
 800abe4:	0800ad0b 	.word	0x0800ad0b
 800abe8:	0800ad5d 	.word	0x0800ad5d
 800abec:	0800ad7f 	.word	0x0800ad7f
 800abf0:	0800adbb 	.word	0x0800adbb
 800abf4:	0800ade1 	.word	0x0800ade1
 800abf8:	0800ae1f 	.word	0x0800ae1f
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f103 0110 	add.w	r1, r3, #16
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	795b      	ldrb	r3, [r3, #5]
 800ac06:	461a      	mov	r2, r3
 800ac08:	6878      	ldr	r0, [r7, #4]
 800ac0a:	f000 f945 	bl	800ae98 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2202      	movs	r2, #2
 800ac12:	761a      	strb	r2, [r3, #24]
      break;
 800ac14:	e13a      	b.n	800ae8c <USBH_HandleControl+0x2e0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	795b      	ldrb	r3, [r3, #5]
 800ac1a:	4619      	mov	r1, r3
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	f000 fcc7 	bl	800b5b0 <USBH_LL_GetURBState>
 800ac22:	4603      	mov	r3, r0
 800ac24:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800ac26:	7bbb      	ldrb	r3, [r7, #14]
 800ac28:	2b01      	cmp	r3, #1
 800ac2a:	d11e      	bne.n	800ac6a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	7c1b      	ldrb	r3, [r3, #16]
 800ac30:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ac34:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	8adb      	ldrh	r3, [r3, #22]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d00a      	beq.n	800ac54 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800ac3e:	7b7b      	ldrb	r3, [r7, #13]
 800ac40:	2b80      	cmp	r3, #128	@ 0x80
 800ac42:	d103      	bne.n	800ac4c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2203      	movs	r2, #3
 800ac48:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800ac4a:	e116      	b.n	800ae7a <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_DATA_OUT;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2205      	movs	r2, #5
 800ac50:	761a      	strb	r2, [r3, #24]
      break;
 800ac52:	e112      	b.n	800ae7a <USBH_HandleControl+0x2ce>
          if (direction == USB_D2H)
 800ac54:	7b7b      	ldrb	r3, [r7, #13]
 800ac56:	2b80      	cmp	r3, #128	@ 0x80
 800ac58:	d103      	bne.n	800ac62 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2209      	movs	r2, #9
 800ac5e:	761a      	strb	r2, [r3, #24]
      break;
 800ac60:	e10b      	b.n	800ae7a <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_STATUS_IN;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2207      	movs	r2, #7
 800ac66:	761a      	strb	r2, [r3, #24]
      break;
 800ac68:	e107      	b.n	800ae7a <USBH_HandleControl+0x2ce>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800ac6a:	7bbb      	ldrb	r3, [r7, #14]
 800ac6c:	2b04      	cmp	r3, #4
 800ac6e:	d003      	beq.n	800ac78 <USBH_HandleControl+0xcc>
 800ac70:	7bbb      	ldrb	r3, [r7, #14]
 800ac72:	2b02      	cmp	r3, #2
 800ac74:	f040 8101 	bne.w	800ae7a <USBH_HandleControl+0x2ce>
          phost->Control.state = CTRL_ERROR;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	220b      	movs	r2, #11
 800ac7c:	761a      	strb	r2, [r3, #24]
      break;
 800ac7e:	e0fc      	b.n	800ae7a <USBH_HandleControl+0x2ce>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ac86:	b29a      	uxth	r2, r3
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6899      	ldr	r1, [r3, #8]
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	899a      	ldrh	r2, [r3, #12]
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	791b      	ldrb	r3, [r3, #4]
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	f000 f93c 	bl	800af16 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2204      	movs	r2, #4
 800aca2:	761a      	strb	r2, [r3, #24]
      break;
 800aca4:	e0f2      	b.n	800ae8c <USBH_HandleControl+0x2e0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	791b      	ldrb	r3, [r3, #4]
 800acaa:	4619      	mov	r1, r3
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f000 fc7f 	bl	800b5b0 <USBH_LL_GetURBState>
 800acb2:	4603      	mov	r3, r0
 800acb4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800acb6:	7bbb      	ldrb	r3, [r7, #14]
 800acb8:	2b01      	cmp	r3, #1
 800acba:	d103      	bne.n	800acc4 <USBH_HandleControl+0x118>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2209      	movs	r2, #9
 800acc0:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800acc2:	e0dc      	b.n	800ae7e <USBH_HandleControl+0x2d2>
      else if (URB_Status == USBH_URB_STALL)
 800acc4:	7bbb      	ldrb	r3, [r7, #14]
 800acc6:	2b05      	cmp	r3, #5
 800acc8:	d102      	bne.n	800acd0 <USBH_HandleControl+0x124>
        status = USBH_NOT_SUPPORTED;
 800acca:	2303      	movs	r3, #3
 800accc:	73fb      	strb	r3, [r7, #15]
      break;
 800acce:	e0d6      	b.n	800ae7e <USBH_HandleControl+0x2d2>
        if (URB_Status == USBH_URB_ERROR)
 800acd0:	7bbb      	ldrb	r3, [r7, #14]
 800acd2:	2b04      	cmp	r3, #4
 800acd4:	f040 80d3 	bne.w	800ae7e <USBH_HandleControl+0x2d2>
          phost->Control.state = CTRL_ERROR;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	220b      	movs	r2, #11
 800acdc:	761a      	strb	r2, [r3, #24]
      break;
 800acde:	e0ce      	b.n	800ae7e <USBH_HandleControl+0x2d2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	6899      	ldr	r1, [r3, #8]
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	899a      	ldrh	r2, [r3, #12]
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	795b      	ldrb	r3, [r3, #5]
 800acec:	2001      	movs	r0, #1
 800acee:	9000      	str	r0, [sp, #0]
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	f000 f8eb 	bl	800aecc <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800acfc:	b29a      	uxth	r2, r3
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2206      	movs	r2, #6
 800ad06:	761a      	strb	r2, [r3, #24]
      break;
 800ad08:	e0c0      	b.n	800ae8c <USBH_HandleControl+0x2e0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	795b      	ldrb	r3, [r3, #5]
 800ad0e:	4619      	mov	r1, r3
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	f000 fc4d 	bl	800b5b0 <USBH_LL_GetURBState>
 800ad16:	4603      	mov	r3, r0
 800ad18:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ad1a:	7bbb      	ldrb	r3, [r7, #14]
 800ad1c:	2b01      	cmp	r3, #1
 800ad1e:	d103      	bne.n	800ad28 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2207      	movs	r2, #7
 800ad24:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800ad26:	e0ac      	b.n	800ae82 <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_STALL)
 800ad28:	7bbb      	ldrb	r3, [r7, #14]
 800ad2a:	2b05      	cmp	r3, #5
 800ad2c:	d105      	bne.n	800ad3a <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	220c      	movs	r2, #12
 800ad32:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800ad34:	2303      	movs	r3, #3
 800ad36:	73fb      	strb	r3, [r7, #15]
      break;
 800ad38:	e0a3      	b.n	800ae82 <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ad3a:	7bbb      	ldrb	r3, [r7, #14]
 800ad3c:	2b02      	cmp	r3, #2
 800ad3e:	d103      	bne.n	800ad48 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2205      	movs	r2, #5
 800ad44:	761a      	strb	r2, [r3, #24]
      break;
 800ad46:	e09c      	b.n	800ae82 <USBH_HandleControl+0x2d6>
        if (URB_Status == USBH_URB_ERROR)
 800ad48:	7bbb      	ldrb	r3, [r7, #14]
 800ad4a:	2b04      	cmp	r3, #4
 800ad4c:	f040 8099 	bne.w	800ae82 <USBH_HandleControl+0x2d6>
          phost->Control.state = CTRL_ERROR;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	220b      	movs	r2, #11
 800ad54:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800ad56:	2302      	movs	r3, #2
 800ad58:	73fb      	strb	r3, [r7, #15]
      break;
 800ad5a:	e092      	b.n	800ae82 <USBH_HandleControl+0x2d6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	791b      	ldrb	r3, [r3, #4]
 800ad60:	2200      	movs	r2, #0
 800ad62:	2100      	movs	r1, #0
 800ad64:	6878      	ldr	r0, [r7, #4]
 800ad66:	f000 f8d6 	bl	800af16 <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ad70:	b29a      	uxth	r2, r3
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2208      	movs	r2, #8
 800ad7a:	761a      	strb	r2, [r3, #24]

      break;
 800ad7c:	e086      	b.n	800ae8c <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	791b      	ldrb	r3, [r3, #4]
 800ad82:	4619      	mov	r1, r3
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	f000 fc13 	bl	800b5b0 <USBH_LL_GetURBState>
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ad8e:	7bbb      	ldrb	r3, [r7, #14]
 800ad90:	2b01      	cmp	r3, #1
 800ad92:	d105      	bne.n	800ada0 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	220d      	movs	r2, #13
 800ad98:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	73fb      	strb	r3, [r7, #15]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800ad9e:	e072      	b.n	800ae86 <USBH_HandleControl+0x2da>
      else if (URB_Status == USBH_URB_ERROR)
 800ada0:	7bbb      	ldrb	r3, [r7, #14]
 800ada2:	2b04      	cmp	r3, #4
 800ada4:	d103      	bne.n	800adae <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	220b      	movs	r2, #11
 800adaa:	761a      	strb	r2, [r3, #24]
      break;
 800adac:	e06b      	b.n	800ae86 <USBH_HandleControl+0x2da>
        if (URB_Status == USBH_URB_STALL)
 800adae:	7bbb      	ldrb	r3, [r7, #14]
 800adb0:	2b05      	cmp	r3, #5
 800adb2:	d168      	bne.n	800ae86 <USBH_HandleControl+0x2da>
          status = USBH_NOT_SUPPORTED;
 800adb4:	2303      	movs	r3, #3
 800adb6:	73fb      	strb	r3, [r7, #15]
      break;
 800adb8:	e065      	b.n	800ae86 <USBH_HandleControl+0x2da>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	795b      	ldrb	r3, [r3, #5]
 800adbe:	2201      	movs	r2, #1
 800adc0:	9200      	str	r2, [sp, #0]
 800adc2:	2200      	movs	r2, #0
 800adc4:	2100      	movs	r1, #0
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f000 f880 	bl	800aecc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800add2:	b29a      	uxth	r2, r3
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	220a      	movs	r2, #10
 800addc:	761a      	strb	r2, [r3, #24]
      break;
 800adde:	e055      	b.n	800ae8c <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	795b      	ldrb	r3, [r3, #5]
 800ade4:	4619      	mov	r1, r3
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f000 fbe2 	bl	800b5b0 <USBH_LL_GetURBState>
 800adec:	4603      	mov	r3, r0
 800adee:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800adf0:	7bbb      	ldrb	r3, [r7, #14]
 800adf2:	2b01      	cmp	r3, #1
 800adf4:	d105      	bne.n	800ae02 <USBH_HandleControl+0x256>
      {
        status = USBH_OK;
 800adf6:	2300      	movs	r3, #0
 800adf8:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	220d      	movs	r2, #13
 800adfe:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800ae00:	e043      	b.n	800ae8a <USBH_HandleControl+0x2de>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ae02:	7bbb      	ldrb	r3, [r7, #14]
 800ae04:	2b02      	cmp	r3, #2
 800ae06:	d103      	bne.n	800ae10 <USBH_HandleControl+0x264>
        phost->Control.state = CTRL_STATUS_OUT;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2209      	movs	r2, #9
 800ae0c:	761a      	strb	r2, [r3, #24]
      break;
 800ae0e:	e03c      	b.n	800ae8a <USBH_HandleControl+0x2de>
        if (URB_Status == USBH_URB_ERROR)
 800ae10:	7bbb      	ldrb	r3, [r7, #14]
 800ae12:	2b04      	cmp	r3, #4
 800ae14:	d139      	bne.n	800ae8a <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	220b      	movs	r2, #11
 800ae1a:	761a      	strb	r2, [r3, #24]
      break;
 800ae1c:	e035      	b.n	800ae8a <USBH_HandleControl+0x2de>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	7e5b      	ldrb	r3, [r3, #25]
 800ae22:	3301      	adds	r3, #1
 800ae24:	b2da      	uxtb	r2, r3
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	765a      	strb	r2, [r3, #25]
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	7e5b      	ldrb	r3, [r3, #25]
 800ae2e:	2b02      	cmp	r3, #2
 800ae30:	d806      	bhi.n	800ae40 <USBH_HandleControl+0x294>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2201      	movs	r2, #1
 800ae36:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2201      	movs	r2, #1
 800ae3c:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800ae3e:	e025      	b.n	800ae8c <USBH_HandleControl+0x2e0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ae46:	2106      	movs	r1, #6
 800ae48:	6878      	ldr	r0, [r7, #4]
 800ae4a:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2200      	movs	r2, #0
 800ae50:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	795b      	ldrb	r3, [r3, #5]
 800ae56:	4619      	mov	r1, r3
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	f000 f90d 	bl	800b078 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	791b      	ldrb	r3, [r3, #4]
 800ae62:	4619      	mov	r1, r3
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f000 f907 	bl	800b078 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800ae70:	2302      	movs	r3, #2
 800ae72:	73fb      	strb	r3, [r7, #15]
      break;
 800ae74:	e00a      	b.n	800ae8c <USBH_HandleControl+0x2e0>

    default:
      break;
 800ae76:	bf00      	nop
 800ae78:	e008      	b.n	800ae8c <USBH_HandleControl+0x2e0>
      break;
 800ae7a:	bf00      	nop
 800ae7c:	e006      	b.n	800ae8c <USBH_HandleControl+0x2e0>
      break;
 800ae7e:	bf00      	nop
 800ae80:	e004      	b.n	800ae8c <USBH_HandleControl+0x2e0>
      break;
 800ae82:	bf00      	nop
 800ae84:	e002      	b.n	800ae8c <USBH_HandleControl+0x2e0>
      break;
 800ae86:	bf00      	nop
 800ae88:	e000      	b.n	800ae8c <USBH_HandleControl+0x2e0>
      break;
 800ae8a:	bf00      	nop
  }

  return status;
 800ae8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae8e:	4618      	mov	r0, r3
 800ae90:	3710      	adds	r7, #16
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}
 800ae96:	bf00      	nop

0800ae98 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b088      	sub	sp, #32
 800ae9c:	af04      	add	r7, sp, #16
 800ae9e:	60f8      	str	r0, [r7, #12]
 800aea0:	60b9      	str	r1, [r7, #8]
 800aea2:	4613      	mov	r3, r2
 800aea4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800aea6:	79f9      	ldrb	r1, [r7, #7]
 800aea8:	2300      	movs	r3, #0
 800aeaa:	9303      	str	r3, [sp, #12]
 800aeac:	2308      	movs	r3, #8
 800aeae:	9302      	str	r3, [sp, #8]
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	9301      	str	r3, [sp, #4]
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	9300      	str	r3, [sp, #0]
 800aeb8:	2300      	movs	r3, #0
 800aeba:	2200      	movs	r2, #0
 800aebc:	68f8      	ldr	r0, [r7, #12]
 800aebe:	f000 fb46 	bl	800b54e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800aec2:	2300      	movs	r3, #0
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	3710      	adds	r7, #16
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bd80      	pop	{r7, pc}

0800aecc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b088      	sub	sp, #32
 800aed0:	af04      	add	r7, sp, #16
 800aed2:	60f8      	str	r0, [r7, #12]
 800aed4:	60b9      	str	r1, [r7, #8]
 800aed6:	4611      	mov	r1, r2
 800aed8:	461a      	mov	r2, r3
 800aeda:	460b      	mov	r3, r1
 800aedc:	80fb      	strh	r3, [r7, #6]
 800aede:	4613      	mov	r3, r2
 800aee0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d001      	beq.n	800aef0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800aeec:	2300      	movs	r3, #0
 800aeee:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800aef0:	7979      	ldrb	r1, [r7, #5]
 800aef2:	7e3b      	ldrb	r3, [r7, #24]
 800aef4:	9303      	str	r3, [sp, #12]
 800aef6:	88fb      	ldrh	r3, [r7, #6]
 800aef8:	9302      	str	r3, [sp, #8]
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	9301      	str	r3, [sp, #4]
 800aefe:	2301      	movs	r3, #1
 800af00:	9300      	str	r3, [sp, #0]
 800af02:	2300      	movs	r3, #0
 800af04:	2200      	movs	r2, #0
 800af06:	68f8      	ldr	r0, [r7, #12]
 800af08:	f000 fb21 	bl	800b54e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800af0c:	2300      	movs	r3, #0
}
 800af0e:	4618      	mov	r0, r3
 800af10:	3710      	adds	r7, #16
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}

0800af16 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800af16:	b580      	push	{r7, lr}
 800af18:	b088      	sub	sp, #32
 800af1a:	af04      	add	r7, sp, #16
 800af1c:	60f8      	str	r0, [r7, #12]
 800af1e:	60b9      	str	r1, [r7, #8]
 800af20:	4611      	mov	r1, r2
 800af22:	461a      	mov	r2, r3
 800af24:	460b      	mov	r3, r1
 800af26:	80fb      	strh	r3, [r7, #6]
 800af28:	4613      	mov	r3, r2
 800af2a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800af2c:	7979      	ldrb	r1, [r7, #5]
 800af2e:	2300      	movs	r3, #0
 800af30:	9303      	str	r3, [sp, #12]
 800af32:	88fb      	ldrh	r3, [r7, #6]
 800af34:	9302      	str	r3, [sp, #8]
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	9301      	str	r3, [sp, #4]
 800af3a:	2301      	movs	r3, #1
 800af3c:	9300      	str	r3, [sp, #0]
 800af3e:	2300      	movs	r3, #0
 800af40:	2201      	movs	r2, #1
 800af42:	68f8      	ldr	r0, [r7, #12]
 800af44:	f000 fb03 	bl	800b54e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800af48:	2300      	movs	r3, #0

}
 800af4a:	4618      	mov	r0, r3
 800af4c:	3710      	adds	r7, #16
 800af4e:	46bd      	mov	sp, r7
 800af50:	bd80      	pop	{r7, pc}

0800af52 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800af52:	b580      	push	{r7, lr}
 800af54:	b088      	sub	sp, #32
 800af56:	af04      	add	r7, sp, #16
 800af58:	60f8      	str	r0, [r7, #12]
 800af5a:	60b9      	str	r1, [r7, #8]
 800af5c:	4611      	mov	r1, r2
 800af5e:	461a      	mov	r2, r3
 800af60:	460b      	mov	r3, r1
 800af62:	80fb      	strh	r3, [r7, #6]
 800af64:	4613      	mov	r3, r2
 800af66:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d001      	beq.n	800af76 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800af72:	2300      	movs	r3, #0
 800af74:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800af76:	7979      	ldrb	r1, [r7, #5]
 800af78:	7e3b      	ldrb	r3, [r7, #24]
 800af7a:	9303      	str	r3, [sp, #12]
 800af7c:	88fb      	ldrh	r3, [r7, #6]
 800af7e:	9302      	str	r3, [sp, #8]
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	9301      	str	r3, [sp, #4]
 800af84:	2301      	movs	r3, #1
 800af86:	9300      	str	r3, [sp, #0]
 800af88:	2302      	movs	r3, #2
 800af8a:	2200      	movs	r2, #0
 800af8c:	68f8      	ldr	r0, [r7, #12]
 800af8e:	f000 fade 	bl	800b54e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800af92:	2300      	movs	r3, #0
}
 800af94:	4618      	mov	r0, r3
 800af96:	3710      	adds	r7, #16
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}

0800af9c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b088      	sub	sp, #32
 800afa0:	af04      	add	r7, sp, #16
 800afa2:	60f8      	str	r0, [r7, #12]
 800afa4:	60b9      	str	r1, [r7, #8]
 800afa6:	4611      	mov	r1, r2
 800afa8:	461a      	mov	r2, r3
 800afaa:	460b      	mov	r3, r1
 800afac:	80fb      	strh	r3, [r7, #6]
 800afae:	4613      	mov	r3, r2
 800afb0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800afb2:	7979      	ldrb	r1, [r7, #5]
 800afb4:	2300      	movs	r3, #0
 800afb6:	9303      	str	r3, [sp, #12]
 800afb8:	88fb      	ldrh	r3, [r7, #6]
 800afba:	9302      	str	r3, [sp, #8]
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	9301      	str	r3, [sp, #4]
 800afc0:	2301      	movs	r3, #1
 800afc2:	9300      	str	r3, [sp, #0]
 800afc4:	2302      	movs	r3, #2
 800afc6:	2201      	movs	r2, #1
 800afc8:	68f8      	ldr	r0, [r7, #12]
 800afca:	f000 fac0 	bl	800b54e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800afce:	2300      	movs	r3, #0
}
 800afd0:	4618      	mov	r0, r3
 800afd2:	3710      	adds	r7, #16
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bd80      	pop	{r7, pc}

0800afd8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b086      	sub	sp, #24
 800afdc:	af04      	add	r7, sp, #16
 800afde:	6078      	str	r0, [r7, #4]
 800afe0:	4608      	mov	r0, r1
 800afe2:	4611      	mov	r1, r2
 800afe4:	461a      	mov	r2, r3
 800afe6:	4603      	mov	r3, r0
 800afe8:	70fb      	strb	r3, [r7, #3]
 800afea:	460b      	mov	r3, r1
 800afec:	70bb      	strb	r3, [r7, #2]
 800afee:	4613      	mov	r3, r2
 800aff0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800aff2:	7878      	ldrb	r0, [r7, #1]
 800aff4:	78ba      	ldrb	r2, [r7, #2]
 800aff6:	78f9      	ldrb	r1, [r7, #3]
 800aff8:	8b3b      	ldrh	r3, [r7, #24]
 800affa:	9302      	str	r3, [sp, #8]
 800affc:	7d3b      	ldrb	r3, [r7, #20]
 800affe:	9301      	str	r3, [sp, #4]
 800b000:	7c3b      	ldrb	r3, [r7, #16]
 800b002:	9300      	str	r3, [sp, #0]
 800b004:	4603      	mov	r3, r0
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	f000 fa53 	bl	800b4b2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800b00c:	2300      	movs	r3, #0
}
 800b00e:	4618      	mov	r0, r3
 800b010:	3708      	adds	r7, #8
 800b012:	46bd      	mov	sp, r7
 800b014:	bd80      	pop	{r7, pc}

0800b016 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b016:	b580      	push	{r7, lr}
 800b018:	b082      	sub	sp, #8
 800b01a:	af00      	add	r7, sp, #0
 800b01c:	6078      	str	r0, [r7, #4]
 800b01e:	460b      	mov	r3, r1
 800b020:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800b022:	78fb      	ldrb	r3, [r7, #3]
 800b024:	4619      	mov	r1, r3
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f000 fa72 	bl	800b510 <USBH_LL_ClosePipe>

  return USBH_OK;
 800b02c:	2300      	movs	r3, #0
}
 800b02e:	4618      	mov	r0, r3
 800b030:	3708      	adds	r7, #8
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}

0800b036 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b036:	b580      	push	{r7, lr}
 800b038:	b084      	sub	sp, #16
 800b03a:	af00      	add	r7, sp, #0
 800b03c:	6078      	str	r0, [r7, #4]
 800b03e:	460b      	mov	r3, r1
 800b040:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	f000 f836 	bl	800b0b4 <USBH_GetFreePipe>
 800b048:	4603      	mov	r3, r0
 800b04a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b04c:	89fb      	ldrh	r3, [r7, #14]
 800b04e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b052:	4293      	cmp	r3, r2
 800b054:	d00a      	beq.n	800b06c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800b056:	78fa      	ldrb	r2, [r7, #3]
 800b058:	89fb      	ldrh	r3, [r7, #14]
 800b05a:	f003 030f 	and.w	r3, r3, #15
 800b05e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b062:	6879      	ldr	r1, [r7, #4]
 800b064:	33e0      	adds	r3, #224	@ 0xe0
 800b066:	009b      	lsls	r3, r3, #2
 800b068:	440b      	add	r3, r1
 800b06a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b06c:	89fb      	ldrh	r3, [r7, #14]
 800b06e:	b2db      	uxtb	r3, r3
}
 800b070:	4618      	mov	r0, r3
 800b072:	3710      	adds	r7, #16
 800b074:	46bd      	mov	sp, r7
 800b076:	bd80      	pop	{r7, pc}

0800b078 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b078:	b480      	push	{r7}
 800b07a:	b083      	sub	sp, #12
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
 800b080:	460b      	mov	r3, r1
 800b082:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800b084:	78fb      	ldrb	r3, [r7, #3]
 800b086:	2b0f      	cmp	r3, #15
 800b088:	d80d      	bhi.n	800b0a6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b08a:	78fb      	ldrb	r3, [r7, #3]
 800b08c:	687a      	ldr	r2, [r7, #4]
 800b08e:	33e0      	adds	r3, #224	@ 0xe0
 800b090:	009b      	lsls	r3, r3, #2
 800b092:	4413      	add	r3, r2
 800b094:	685a      	ldr	r2, [r3, #4]
 800b096:	78fb      	ldrb	r3, [r7, #3]
 800b098:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b09c:	6879      	ldr	r1, [r7, #4]
 800b09e:	33e0      	adds	r3, #224	@ 0xe0
 800b0a0:	009b      	lsls	r3, r3, #2
 800b0a2:	440b      	add	r3, r1
 800b0a4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b0a6:	2300      	movs	r3, #0
}
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	370c      	adds	r7, #12
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b2:	4770      	bx	lr

0800b0b4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b0b4:	b480      	push	{r7}
 800b0b6:	b085      	sub	sp, #20
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b0bc:	2300      	movs	r3, #0
 800b0be:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	73fb      	strb	r3, [r7, #15]
 800b0c4:	e00f      	b.n	800b0e6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b0c6:	7bfb      	ldrb	r3, [r7, #15]
 800b0c8:	687a      	ldr	r2, [r7, #4]
 800b0ca:	33e0      	adds	r3, #224	@ 0xe0
 800b0cc:	009b      	lsls	r3, r3, #2
 800b0ce:	4413      	add	r3, r2
 800b0d0:	685b      	ldr	r3, [r3, #4]
 800b0d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d102      	bne.n	800b0e0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b0da:	7bfb      	ldrb	r3, [r7, #15]
 800b0dc:	b29b      	uxth	r3, r3
 800b0de:	e007      	b.n	800b0f0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800b0e0:	7bfb      	ldrb	r3, [r7, #15]
 800b0e2:	3301      	adds	r3, #1
 800b0e4:	73fb      	strb	r3, [r7, #15]
 800b0e6:	7bfb      	ldrb	r3, [r7, #15]
 800b0e8:	2b0f      	cmp	r3, #15
 800b0ea:	d9ec      	bls.n	800b0c6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b0ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	3714      	adds	r7, #20
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fa:	4770      	bx	lr

0800b0fc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b100:	2201      	movs	r2, #1
 800b102:	490e      	ldr	r1, [pc, #56]	@ (800b13c <MX_USB_HOST_Init+0x40>)
 800b104:	480e      	ldr	r0, [pc, #56]	@ (800b140 <MX_USB_HOST_Init+0x44>)
 800b106:	f7fe fb0f 	bl	8009728 <USBH_Init>
 800b10a:	4603      	mov	r3, r0
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d001      	beq.n	800b114 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b110:	f7f6 fb72 	bl	80017f8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800b114:	490b      	ldr	r1, [pc, #44]	@ (800b144 <MX_USB_HOST_Init+0x48>)
 800b116:	480a      	ldr	r0, [pc, #40]	@ (800b140 <MX_USB_HOST_Init+0x44>)
 800b118:	f7fe fbb1 	bl	800987e <USBH_RegisterClass>
 800b11c:	4603      	mov	r3, r0
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d001      	beq.n	800b126 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b122:	f7f6 fb69 	bl	80017f8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b126:	4806      	ldr	r0, [pc, #24]	@ (800b140 <MX_USB_HOST_Init+0x44>)
 800b128:	f7fe fc35 	bl	8009996 <USBH_Start>
 800b12c:	4603      	mov	r3, r0
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d001      	beq.n	800b136 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b132:	f7f6 fb61 	bl	80017f8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b136:	bf00      	nop
 800b138:	bd80      	pop	{r7, pc}
 800b13a:	bf00      	nop
 800b13c:	0800b15d 	.word	0x0800b15d
 800b140:	200004c8 	.word	0x200004c8
 800b144:	20000020 	.word	0x20000020

0800b148 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800b14c:	4802      	ldr	r0, [pc, #8]	@ (800b158 <MX_USB_HOST_Process+0x10>)
 800b14e:	f7fe fc33 	bl	80099b8 <USBH_Process>
}
 800b152:	bf00      	nop
 800b154:	bd80      	pop	{r7, pc}
 800b156:	bf00      	nop
 800b158:	200004c8 	.word	0x200004c8

0800b15c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b15c:	b480      	push	{r7}
 800b15e:	b083      	sub	sp, #12
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
 800b164:	460b      	mov	r3, r1
 800b166:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b168:	78fb      	ldrb	r3, [r7, #3]
 800b16a:	3b01      	subs	r3, #1
 800b16c:	2b04      	cmp	r3, #4
 800b16e:	d819      	bhi.n	800b1a4 <USBH_UserProcess+0x48>
 800b170:	a201      	add	r2, pc, #4	@ (adr r2, 800b178 <USBH_UserProcess+0x1c>)
 800b172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b176:	bf00      	nop
 800b178:	0800b1a5 	.word	0x0800b1a5
 800b17c:	0800b195 	.word	0x0800b195
 800b180:	0800b1a5 	.word	0x0800b1a5
 800b184:	0800b19d 	.word	0x0800b19d
 800b188:	0800b18d 	.word	0x0800b18d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b18c:	4b09      	ldr	r3, [pc, #36]	@ (800b1b4 <USBH_UserProcess+0x58>)
 800b18e:	2203      	movs	r2, #3
 800b190:	701a      	strb	r2, [r3, #0]
  break;
 800b192:	e008      	b.n	800b1a6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b194:	4b07      	ldr	r3, [pc, #28]	@ (800b1b4 <USBH_UserProcess+0x58>)
 800b196:	2202      	movs	r2, #2
 800b198:	701a      	strb	r2, [r3, #0]
  break;
 800b19a:	e004      	b.n	800b1a6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b19c:	4b05      	ldr	r3, [pc, #20]	@ (800b1b4 <USBH_UserProcess+0x58>)
 800b19e:	2201      	movs	r2, #1
 800b1a0:	701a      	strb	r2, [r3, #0]
  break;
 800b1a2:	e000      	b.n	800b1a6 <USBH_UserProcess+0x4a>

  default:
  break;
 800b1a4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b1a6:	bf00      	nop
 800b1a8:	370c      	adds	r7, #12
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b0:	4770      	bx	lr
 800b1b2:	bf00      	nop
 800b1b4:	200008a0 	.word	0x200008a0

0800b1b8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b08a      	sub	sp, #40	@ 0x28
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b1c0:	f107 0314 	add.w	r3, r7, #20
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	601a      	str	r2, [r3, #0]
 800b1c8:	605a      	str	r2, [r3, #4]
 800b1ca:	609a      	str	r2, [r3, #8]
 800b1cc:	60da      	str	r2, [r3, #12]
 800b1ce:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b1d8:	d147      	bne.n	800b26a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b1da:	2300      	movs	r3, #0
 800b1dc:	613b      	str	r3, [r7, #16]
 800b1de:	4b25      	ldr	r3, [pc, #148]	@ (800b274 <HAL_HCD_MspInit+0xbc>)
 800b1e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1e2:	4a24      	ldr	r2, [pc, #144]	@ (800b274 <HAL_HCD_MspInit+0xbc>)
 800b1e4:	f043 0301 	orr.w	r3, r3, #1
 800b1e8:	6313      	str	r3, [r2, #48]	@ 0x30
 800b1ea:	4b22      	ldr	r3, [pc, #136]	@ (800b274 <HAL_HCD_MspInit+0xbc>)
 800b1ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1ee:	f003 0301 	and.w	r3, r3, #1
 800b1f2:	613b      	str	r3, [r7, #16]
 800b1f4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b1f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b1fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b200:	2300      	movs	r3, #0
 800b202:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b204:	f107 0314 	add.w	r3, r7, #20
 800b208:	4619      	mov	r1, r3
 800b20a:	481b      	ldr	r0, [pc, #108]	@ (800b278 <HAL_HCD_MspInit+0xc0>)
 800b20c:	f7f7 ffa2 	bl	8003154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b210:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800b214:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b216:	2302      	movs	r3, #2
 800b218:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b21a:	2300      	movs	r3, #0
 800b21c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b21e:	2300      	movs	r3, #0
 800b220:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b222:	230a      	movs	r3, #10
 800b224:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b226:	f107 0314 	add.w	r3, r7, #20
 800b22a:	4619      	mov	r1, r3
 800b22c:	4812      	ldr	r0, [pc, #72]	@ (800b278 <HAL_HCD_MspInit+0xc0>)
 800b22e:	f7f7 ff91 	bl	8003154 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b232:	4b10      	ldr	r3, [pc, #64]	@ (800b274 <HAL_HCD_MspInit+0xbc>)
 800b234:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b236:	4a0f      	ldr	r2, [pc, #60]	@ (800b274 <HAL_HCD_MspInit+0xbc>)
 800b238:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b23c:	6353      	str	r3, [r2, #52]	@ 0x34
 800b23e:	2300      	movs	r3, #0
 800b240:	60fb      	str	r3, [r7, #12]
 800b242:	4b0c      	ldr	r3, [pc, #48]	@ (800b274 <HAL_HCD_MspInit+0xbc>)
 800b244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b246:	4a0b      	ldr	r2, [pc, #44]	@ (800b274 <HAL_HCD_MspInit+0xbc>)
 800b248:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b24c:	6453      	str	r3, [r2, #68]	@ 0x44
 800b24e:	4b09      	ldr	r3, [pc, #36]	@ (800b274 <HAL_HCD_MspInit+0xbc>)
 800b250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b252:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b256:	60fb      	str	r3, [r7, #12]
 800b258:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b25a:	2200      	movs	r2, #0
 800b25c:	2100      	movs	r1, #0
 800b25e:	2043      	movs	r0, #67	@ 0x43
 800b260:	f7f7 fbc3 	bl	80029ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b264:	2043      	movs	r0, #67	@ 0x43
 800b266:	f7f7 fbdc 	bl	8002a22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b26a:	bf00      	nop
 800b26c:	3728      	adds	r7, #40	@ 0x28
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}
 800b272:	bf00      	nop
 800b274:	40023800 	.word	0x40023800
 800b278:	40020000 	.word	0x40020000

0800b27c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b082      	sub	sp, #8
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b28a:	4618      	mov	r0, r3
 800b28c:	f7fe ff6d 	bl	800a16a <USBH_LL_IncTimer>
}
 800b290:	bf00      	nop
 800b292:	3708      	adds	r7, #8
 800b294:	46bd      	mov	sp, r7
 800b296:	bd80      	pop	{r7, pc}

0800b298 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b082      	sub	sp, #8
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f7fe ffa9 	bl	800a1fe <USBH_LL_Connect>
}
 800b2ac:	bf00      	nop
 800b2ae:	3708      	adds	r7, #8
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}

0800b2b4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b082      	sub	sp, #8
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	f7fe ffb2 	bl	800a22c <USBH_LL_Disconnect>
}
 800b2c8:	bf00      	nop
 800b2ca:	3708      	adds	r7, #8
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bd80      	pop	{r7, pc}

0800b2d0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b2d0:	b480      	push	{r7}
 800b2d2:	b083      	sub	sp, #12
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
 800b2d8:	460b      	mov	r3, r1
 800b2da:	70fb      	strb	r3, [r7, #3]
 800b2dc:	4613      	mov	r3, r2
 800b2de:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b2e0:	bf00      	nop
 800b2e2:	370c      	adds	r7, #12
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ea:	4770      	bx	lr

0800b2ec <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b082      	sub	sp, #8
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	f7fe ff5f 	bl	800a1be <USBH_LL_PortEnabled>
}
 800b300:	bf00      	nop
 800b302:	3708      	adds	r7, #8
 800b304:	46bd      	mov	sp, r7
 800b306:	bd80      	pop	{r7, pc}

0800b308 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b082      	sub	sp, #8
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b316:	4618      	mov	r0, r3
 800b318:	f7fe ff5f 	bl	800a1da <USBH_LL_PortDisabled>
}
 800b31c:	bf00      	nop
 800b31e:	3708      	adds	r7, #8
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}

0800b324 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b082      	sub	sp, #8
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800b332:	2b01      	cmp	r3, #1
 800b334:	d12a      	bne.n	800b38c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b336:	4a18      	ldr	r2, [pc, #96]	@ (800b398 <USBH_LL_Init+0x74>)
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	4a15      	ldr	r2, [pc, #84]	@ (800b398 <USBH_LL_Init+0x74>)
 800b342:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b346:	4b14      	ldr	r3, [pc, #80]	@ (800b398 <USBH_LL_Init+0x74>)
 800b348:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800b34c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b34e:	4b12      	ldr	r3, [pc, #72]	@ (800b398 <USBH_LL_Init+0x74>)
 800b350:	2208      	movs	r2, #8
 800b352:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b354:	4b10      	ldr	r3, [pc, #64]	@ (800b398 <USBH_LL_Init+0x74>)
 800b356:	2201      	movs	r2, #1
 800b358:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b35a:	4b0f      	ldr	r3, [pc, #60]	@ (800b398 <USBH_LL_Init+0x74>)
 800b35c:	2200      	movs	r2, #0
 800b35e:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b360:	4b0d      	ldr	r3, [pc, #52]	@ (800b398 <USBH_LL_Init+0x74>)
 800b362:	2202      	movs	r2, #2
 800b364:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b366:	4b0c      	ldr	r3, [pc, #48]	@ (800b398 <USBH_LL_Init+0x74>)
 800b368:	2200      	movs	r2, #0
 800b36a:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b36c:	480a      	ldr	r0, [pc, #40]	@ (800b398 <USBH_LL_Init+0x74>)
 800b36e:	f7f8 f8d7 	bl	8003520 <HAL_HCD_Init>
 800b372:	4603      	mov	r3, r0
 800b374:	2b00      	cmp	r3, #0
 800b376:	d001      	beq.n	800b37c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b378:	f7f6 fa3e 	bl	80017f8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b37c:	4806      	ldr	r0, [pc, #24]	@ (800b398 <USBH_LL_Init+0x74>)
 800b37e:	f7f8 fd37 	bl	8003df0 <HAL_HCD_GetCurrentFrame>
 800b382:	4603      	mov	r3, r0
 800b384:	4619      	mov	r1, r3
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	f7fe fee0 	bl	800a14c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b38c:	2300      	movs	r3, #0
}
 800b38e:	4618      	mov	r0, r3
 800b390:	3708      	adds	r7, #8
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}
 800b396:	bf00      	nop
 800b398:	200008a4 	.word	0x200008a4

0800b39c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b084      	sub	sp, #16
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	f7f8 fca4 	bl	8003d00 <HAL_HCD_Start>
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b3bc:	7bfb      	ldrb	r3, [r7, #15]
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f000 f95e 	bl	800b680 <USBH_Get_USB_Status>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b3c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	3710      	adds	r7, #16
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	bd80      	pop	{r7, pc}

0800b3d2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b3d2:	b580      	push	{r7, lr}
 800b3d4:	b084      	sub	sp, #16
 800b3d6:	af00      	add	r7, sp, #0
 800b3d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3da:	2300      	movs	r3, #0
 800b3dc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b3de:	2300      	movs	r3, #0
 800b3e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	f7f8 fcac 	bl	8003d46 <HAL_HCD_Stop>
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b3f2:	7bfb      	ldrb	r3, [r7, #15]
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	f000 f943 	bl	800b680 <USBH_Get_USB_Status>
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b3fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800b400:	4618      	mov	r0, r3
 800b402:	3710      	adds	r7, #16
 800b404:	46bd      	mov	sp, r7
 800b406:	bd80      	pop	{r7, pc}

0800b408 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b084      	sub	sp, #16
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b410:	2301      	movs	r3, #1
 800b412:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b41a:	4618      	mov	r0, r3
 800b41c:	f7f8 fcf6 	bl	8003e0c <HAL_HCD_GetCurrentSpeed>
 800b420:	4603      	mov	r3, r0
 800b422:	2b02      	cmp	r3, #2
 800b424:	d00c      	beq.n	800b440 <USBH_LL_GetSpeed+0x38>
 800b426:	2b02      	cmp	r3, #2
 800b428:	d80d      	bhi.n	800b446 <USBH_LL_GetSpeed+0x3e>
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d002      	beq.n	800b434 <USBH_LL_GetSpeed+0x2c>
 800b42e:	2b01      	cmp	r3, #1
 800b430:	d003      	beq.n	800b43a <USBH_LL_GetSpeed+0x32>
 800b432:	e008      	b.n	800b446 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b434:	2300      	movs	r3, #0
 800b436:	73fb      	strb	r3, [r7, #15]
    break;
 800b438:	e008      	b.n	800b44c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b43a:	2301      	movs	r3, #1
 800b43c:	73fb      	strb	r3, [r7, #15]
    break;
 800b43e:	e005      	b.n	800b44c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b440:	2302      	movs	r3, #2
 800b442:	73fb      	strb	r3, [r7, #15]
    break;
 800b444:	e002      	b.n	800b44c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b446:	2301      	movs	r3, #1
 800b448:	73fb      	strb	r3, [r7, #15]
    break;
 800b44a:	bf00      	nop
  }
  return  speed;
 800b44c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b44e:	4618      	mov	r0, r3
 800b450:	3710      	adds	r7, #16
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}

0800b456 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b456:	b580      	push	{r7, lr}
 800b458:	b084      	sub	sp, #16
 800b45a:	af00      	add	r7, sp, #0
 800b45c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b45e:	2300      	movs	r3, #0
 800b460:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b462:	2300      	movs	r3, #0
 800b464:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b46c:	4618      	mov	r0, r3
 800b46e:	f7f8 fc87 	bl	8003d80 <HAL_HCD_ResetPort>
 800b472:	4603      	mov	r3, r0
 800b474:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b476:	7bfb      	ldrb	r3, [r7, #15]
 800b478:	4618      	mov	r0, r3
 800b47a:	f000 f901 	bl	800b680 <USBH_Get_USB_Status>
 800b47e:	4603      	mov	r3, r0
 800b480:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b482:	7bbb      	ldrb	r3, [r7, #14]
}
 800b484:	4618      	mov	r0, r3
 800b486:	3710      	adds	r7, #16
 800b488:	46bd      	mov	sp, r7
 800b48a:	bd80      	pop	{r7, pc}

0800b48c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b082      	sub	sp, #8
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
 800b494:	460b      	mov	r3, r1
 800b496:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b49e:	78fa      	ldrb	r2, [r7, #3]
 800b4a0:	4611      	mov	r1, r2
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	f7f8 fc8f 	bl	8003dc6 <HAL_HCD_HC_GetXferCount>
 800b4a8:	4603      	mov	r3, r0
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3708      	adds	r7, #8
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}

0800b4b2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b4b2:	b590      	push	{r4, r7, lr}
 800b4b4:	b089      	sub	sp, #36	@ 0x24
 800b4b6:	af04      	add	r7, sp, #16
 800b4b8:	6078      	str	r0, [r7, #4]
 800b4ba:	4608      	mov	r0, r1
 800b4bc:	4611      	mov	r1, r2
 800b4be:	461a      	mov	r2, r3
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	70fb      	strb	r3, [r7, #3]
 800b4c4:	460b      	mov	r3, r1
 800b4c6:	70bb      	strb	r3, [r7, #2]
 800b4c8:	4613      	mov	r3, r2
 800b4ca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800b4da:	787c      	ldrb	r4, [r7, #1]
 800b4dc:	78ba      	ldrb	r2, [r7, #2]
 800b4de:	78f9      	ldrb	r1, [r7, #3]
 800b4e0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b4e2:	9302      	str	r3, [sp, #8]
 800b4e4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b4e8:	9301      	str	r3, [sp, #4]
 800b4ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b4ee:	9300      	str	r3, [sp, #0]
 800b4f0:	4623      	mov	r3, r4
 800b4f2:	f7f8 f87c 	bl	80035ee <HAL_HCD_HC_Init>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b4fa:	7bfb      	ldrb	r3, [r7, #15]
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	f000 f8bf 	bl	800b680 <USBH_Get_USB_Status>
 800b502:	4603      	mov	r3, r0
 800b504:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b506:	7bbb      	ldrb	r3, [r7, #14]
}
 800b508:	4618      	mov	r0, r3
 800b50a:	3714      	adds	r7, #20
 800b50c:	46bd      	mov	sp, r7
 800b50e:	bd90      	pop	{r4, r7, pc}

0800b510 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b084      	sub	sp, #16
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
 800b518:	460b      	mov	r3, r1
 800b51a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b51c:	2300      	movs	r3, #0
 800b51e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b520:	2300      	movs	r3, #0
 800b522:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b52a:	78fa      	ldrb	r2, [r7, #3]
 800b52c:	4611      	mov	r1, r2
 800b52e:	4618      	mov	r0, r3
 800b530:	f7f8 f915 	bl	800375e <HAL_HCD_HC_Halt>
 800b534:	4603      	mov	r3, r0
 800b536:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b538:	7bfb      	ldrb	r3, [r7, #15]
 800b53a:	4618      	mov	r0, r3
 800b53c:	f000 f8a0 	bl	800b680 <USBH_Get_USB_Status>
 800b540:	4603      	mov	r3, r0
 800b542:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b544:	7bbb      	ldrb	r3, [r7, #14]
}
 800b546:	4618      	mov	r0, r3
 800b548:	3710      	adds	r7, #16
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bd80      	pop	{r7, pc}

0800b54e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b54e:	b590      	push	{r4, r7, lr}
 800b550:	b089      	sub	sp, #36	@ 0x24
 800b552:	af04      	add	r7, sp, #16
 800b554:	6078      	str	r0, [r7, #4]
 800b556:	4608      	mov	r0, r1
 800b558:	4611      	mov	r1, r2
 800b55a:	461a      	mov	r2, r3
 800b55c:	4603      	mov	r3, r0
 800b55e:	70fb      	strb	r3, [r7, #3]
 800b560:	460b      	mov	r3, r1
 800b562:	70bb      	strb	r3, [r7, #2]
 800b564:	4613      	mov	r3, r2
 800b566:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b568:	2300      	movs	r3, #0
 800b56a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b56c:	2300      	movs	r3, #0
 800b56e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800b576:	787c      	ldrb	r4, [r7, #1]
 800b578:	78ba      	ldrb	r2, [r7, #2]
 800b57a:	78f9      	ldrb	r1, [r7, #3]
 800b57c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b580:	9303      	str	r3, [sp, #12]
 800b582:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b584:	9302      	str	r3, [sp, #8]
 800b586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b588:	9301      	str	r3, [sp, #4]
 800b58a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b58e:	9300      	str	r3, [sp, #0]
 800b590:	4623      	mov	r3, r4
 800b592:	f7f8 f907 	bl	80037a4 <HAL_HCD_HC_SubmitRequest>
 800b596:	4603      	mov	r3, r0
 800b598:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b59a:	7bfb      	ldrb	r3, [r7, #15]
 800b59c:	4618      	mov	r0, r3
 800b59e:	f000 f86f 	bl	800b680 <USBH_Get_USB_Status>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b5a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	3714      	adds	r7, #20
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	bd90      	pop	{r4, r7, pc}

0800b5b0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b082      	sub	sp, #8
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
 800b5b8:	460b      	mov	r3, r1
 800b5ba:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b5c2:	78fa      	ldrb	r2, [r7, #3]
 800b5c4:	4611      	mov	r1, r2
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f7f8 fbe8 	bl	8003d9c <HAL_HCD_HC_GetURBState>
 800b5cc:	4603      	mov	r3, r0
}
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	3708      	adds	r7, #8
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	bd80      	pop	{r7, pc}

0800b5d6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b5d6:	b580      	push	{r7, lr}
 800b5d8:	b082      	sub	sp, #8
 800b5da:	af00      	add	r7, sp, #0
 800b5dc:	6078      	str	r0, [r7, #4]
 800b5de:	460b      	mov	r3, r1
 800b5e0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800b5e8:	2b01      	cmp	r3, #1
 800b5ea:	d103      	bne.n	800b5f4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b5ec:	78fb      	ldrb	r3, [r7, #3]
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f000 f872 	bl	800b6d8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b5f4:	20c8      	movs	r0, #200	@ 0xc8
 800b5f6:	f7f6 fcd3 	bl	8001fa0 <HAL_Delay>
  return USBH_OK;
 800b5fa:	2300      	movs	r3, #0
}
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	3708      	adds	r7, #8
 800b600:	46bd      	mov	sp, r7
 800b602:	bd80      	pop	{r7, pc}

0800b604 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b604:	b480      	push	{r7}
 800b606:	b085      	sub	sp, #20
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
 800b60c:	460b      	mov	r3, r1
 800b60e:	70fb      	strb	r3, [r7, #3]
 800b610:	4613      	mov	r3, r2
 800b612:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b61a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b61c:	78fa      	ldrb	r2, [r7, #3]
 800b61e:	68f9      	ldr	r1, [r7, #12]
 800b620:	4613      	mov	r3, r2
 800b622:	011b      	lsls	r3, r3, #4
 800b624:	1a9b      	subs	r3, r3, r2
 800b626:	009b      	lsls	r3, r3, #2
 800b628:	440b      	add	r3, r1
 800b62a:	3317      	adds	r3, #23
 800b62c:	781b      	ldrb	r3, [r3, #0]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d00a      	beq.n	800b648 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b632:	78fa      	ldrb	r2, [r7, #3]
 800b634:	68f9      	ldr	r1, [r7, #12]
 800b636:	4613      	mov	r3, r2
 800b638:	011b      	lsls	r3, r3, #4
 800b63a:	1a9b      	subs	r3, r3, r2
 800b63c:	009b      	lsls	r3, r3, #2
 800b63e:	440b      	add	r3, r1
 800b640:	333c      	adds	r3, #60	@ 0x3c
 800b642:	78ba      	ldrb	r2, [r7, #2]
 800b644:	701a      	strb	r2, [r3, #0]
 800b646:	e009      	b.n	800b65c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b648:	78fa      	ldrb	r2, [r7, #3]
 800b64a:	68f9      	ldr	r1, [r7, #12]
 800b64c:	4613      	mov	r3, r2
 800b64e:	011b      	lsls	r3, r3, #4
 800b650:	1a9b      	subs	r3, r3, r2
 800b652:	009b      	lsls	r3, r3, #2
 800b654:	440b      	add	r3, r1
 800b656:	333d      	adds	r3, #61	@ 0x3d
 800b658:	78ba      	ldrb	r2, [r7, #2]
 800b65a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b65c:	2300      	movs	r3, #0
}
 800b65e:	4618      	mov	r0, r3
 800b660:	3714      	adds	r7, #20
 800b662:	46bd      	mov	sp, r7
 800b664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b668:	4770      	bx	lr

0800b66a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b66a:	b580      	push	{r7, lr}
 800b66c:	b082      	sub	sp, #8
 800b66e:	af00      	add	r7, sp, #0
 800b670:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	f7f6 fc94 	bl	8001fa0 <HAL_Delay>
}
 800b678:	bf00      	nop
 800b67a:	3708      	adds	r7, #8
 800b67c:	46bd      	mov	sp, r7
 800b67e:	bd80      	pop	{r7, pc}

0800b680 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b680:	b480      	push	{r7}
 800b682:	b085      	sub	sp, #20
 800b684:	af00      	add	r7, sp, #0
 800b686:	4603      	mov	r3, r0
 800b688:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b68a:	2300      	movs	r3, #0
 800b68c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b68e:	79fb      	ldrb	r3, [r7, #7]
 800b690:	2b03      	cmp	r3, #3
 800b692:	d817      	bhi.n	800b6c4 <USBH_Get_USB_Status+0x44>
 800b694:	a201      	add	r2, pc, #4	@ (adr r2, 800b69c <USBH_Get_USB_Status+0x1c>)
 800b696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b69a:	bf00      	nop
 800b69c:	0800b6ad 	.word	0x0800b6ad
 800b6a0:	0800b6b3 	.word	0x0800b6b3
 800b6a4:	0800b6b9 	.word	0x0800b6b9
 800b6a8:	0800b6bf 	.word	0x0800b6bf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	73fb      	strb	r3, [r7, #15]
    break;
 800b6b0:	e00b      	b.n	800b6ca <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b6b2:	2302      	movs	r3, #2
 800b6b4:	73fb      	strb	r3, [r7, #15]
    break;
 800b6b6:	e008      	b.n	800b6ca <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b6b8:	2301      	movs	r3, #1
 800b6ba:	73fb      	strb	r3, [r7, #15]
    break;
 800b6bc:	e005      	b.n	800b6ca <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b6be:	2302      	movs	r3, #2
 800b6c0:	73fb      	strb	r3, [r7, #15]
    break;
 800b6c2:	e002      	b.n	800b6ca <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b6c4:	2302      	movs	r3, #2
 800b6c6:	73fb      	strb	r3, [r7, #15]
    break;
 800b6c8:	bf00      	nop
  }
  return usb_status;
 800b6ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	3714      	adds	r7, #20
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d6:	4770      	bx	lr

0800b6d8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b084      	sub	sp, #16
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	4603      	mov	r3, r0
 800b6e0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b6e2:	79fb      	ldrb	r3, [r7, #7]
 800b6e4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b6e6:	79fb      	ldrb	r3, [r7, #7]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d102      	bne.n	800b6f2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	73fb      	strb	r3, [r7, #15]
 800b6f0:	e001      	b.n	800b6f6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800b6f2:	2301      	movs	r3, #1
 800b6f4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b6f6:	7bfb      	ldrb	r3, [r7, #15]
 800b6f8:	461a      	mov	r2, r3
 800b6fa:	2101      	movs	r1, #1
 800b6fc:	4803      	ldr	r0, [pc, #12]	@ (800b70c <MX_DriverVbusFS+0x34>)
 800b6fe:	f7f7 fedd 	bl	80034bc <HAL_GPIO_WritePin>
}
 800b702:	bf00      	nop
 800b704:	3710      	adds	r7, #16
 800b706:	46bd      	mov	sp, r7
 800b708:	bd80      	pop	{r7, pc}
 800b70a:	bf00      	nop
 800b70c:	40020800 	.word	0x40020800

0800b710 <malloc>:
 800b710:	4b02      	ldr	r3, [pc, #8]	@ (800b71c <malloc+0xc>)
 800b712:	4601      	mov	r1, r0
 800b714:	6818      	ldr	r0, [r3, #0]
 800b716:	f000 b82d 	b.w	800b774 <_malloc_r>
 800b71a:	bf00      	nop
 800b71c:	20000040 	.word	0x20000040

0800b720 <free>:
 800b720:	4b02      	ldr	r3, [pc, #8]	@ (800b72c <free+0xc>)
 800b722:	4601      	mov	r1, r0
 800b724:	6818      	ldr	r0, [r3, #0]
 800b726:	f000 b8f5 	b.w	800b914 <_free_r>
 800b72a:	bf00      	nop
 800b72c:	20000040 	.word	0x20000040

0800b730 <sbrk_aligned>:
 800b730:	b570      	push	{r4, r5, r6, lr}
 800b732:	4e0f      	ldr	r6, [pc, #60]	@ (800b770 <sbrk_aligned+0x40>)
 800b734:	460c      	mov	r4, r1
 800b736:	6831      	ldr	r1, [r6, #0]
 800b738:	4605      	mov	r5, r0
 800b73a:	b911      	cbnz	r1, 800b742 <sbrk_aligned+0x12>
 800b73c:	f000 f8ae 	bl	800b89c <_sbrk_r>
 800b740:	6030      	str	r0, [r6, #0]
 800b742:	4621      	mov	r1, r4
 800b744:	4628      	mov	r0, r5
 800b746:	f000 f8a9 	bl	800b89c <_sbrk_r>
 800b74a:	1c43      	adds	r3, r0, #1
 800b74c:	d103      	bne.n	800b756 <sbrk_aligned+0x26>
 800b74e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800b752:	4620      	mov	r0, r4
 800b754:	bd70      	pop	{r4, r5, r6, pc}
 800b756:	1cc4      	adds	r4, r0, #3
 800b758:	f024 0403 	bic.w	r4, r4, #3
 800b75c:	42a0      	cmp	r0, r4
 800b75e:	d0f8      	beq.n	800b752 <sbrk_aligned+0x22>
 800b760:	1a21      	subs	r1, r4, r0
 800b762:	4628      	mov	r0, r5
 800b764:	f000 f89a 	bl	800b89c <_sbrk_r>
 800b768:	3001      	adds	r0, #1
 800b76a:	d1f2      	bne.n	800b752 <sbrk_aligned+0x22>
 800b76c:	e7ef      	b.n	800b74e <sbrk_aligned+0x1e>
 800b76e:	bf00      	nop
 800b770:	20000c84 	.word	0x20000c84

0800b774 <_malloc_r>:
 800b774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b778:	1ccd      	adds	r5, r1, #3
 800b77a:	f025 0503 	bic.w	r5, r5, #3
 800b77e:	3508      	adds	r5, #8
 800b780:	2d0c      	cmp	r5, #12
 800b782:	bf38      	it	cc
 800b784:	250c      	movcc	r5, #12
 800b786:	2d00      	cmp	r5, #0
 800b788:	4606      	mov	r6, r0
 800b78a:	db01      	blt.n	800b790 <_malloc_r+0x1c>
 800b78c:	42a9      	cmp	r1, r5
 800b78e:	d904      	bls.n	800b79a <_malloc_r+0x26>
 800b790:	230c      	movs	r3, #12
 800b792:	6033      	str	r3, [r6, #0]
 800b794:	2000      	movs	r0, #0
 800b796:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b79a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b870 <_malloc_r+0xfc>
 800b79e:	f000 f869 	bl	800b874 <__malloc_lock>
 800b7a2:	f8d8 3000 	ldr.w	r3, [r8]
 800b7a6:	461c      	mov	r4, r3
 800b7a8:	bb44      	cbnz	r4, 800b7fc <_malloc_r+0x88>
 800b7aa:	4629      	mov	r1, r5
 800b7ac:	4630      	mov	r0, r6
 800b7ae:	f7ff ffbf 	bl	800b730 <sbrk_aligned>
 800b7b2:	1c43      	adds	r3, r0, #1
 800b7b4:	4604      	mov	r4, r0
 800b7b6:	d158      	bne.n	800b86a <_malloc_r+0xf6>
 800b7b8:	f8d8 4000 	ldr.w	r4, [r8]
 800b7bc:	4627      	mov	r7, r4
 800b7be:	2f00      	cmp	r7, #0
 800b7c0:	d143      	bne.n	800b84a <_malloc_r+0xd6>
 800b7c2:	2c00      	cmp	r4, #0
 800b7c4:	d04b      	beq.n	800b85e <_malloc_r+0xea>
 800b7c6:	6823      	ldr	r3, [r4, #0]
 800b7c8:	4639      	mov	r1, r7
 800b7ca:	4630      	mov	r0, r6
 800b7cc:	eb04 0903 	add.w	r9, r4, r3
 800b7d0:	f000 f864 	bl	800b89c <_sbrk_r>
 800b7d4:	4581      	cmp	r9, r0
 800b7d6:	d142      	bne.n	800b85e <_malloc_r+0xea>
 800b7d8:	6821      	ldr	r1, [r4, #0]
 800b7da:	1a6d      	subs	r5, r5, r1
 800b7dc:	4629      	mov	r1, r5
 800b7de:	4630      	mov	r0, r6
 800b7e0:	f7ff ffa6 	bl	800b730 <sbrk_aligned>
 800b7e4:	3001      	adds	r0, #1
 800b7e6:	d03a      	beq.n	800b85e <_malloc_r+0xea>
 800b7e8:	6823      	ldr	r3, [r4, #0]
 800b7ea:	442b      	add	r3, r5
 800b7ec:	6023      	str	r3, [r4, #0]
 800b7ee:	f8d8 3000 	ldr.w	r3, [r8]
 800b7f2:	685a      	ldr	r2, [r3, #4]
 800b7f4:	bb62      	cbnz	r2, 800b850 <_malloc_r+0xdc>
 800b7f6:	f8c8 7000 	str.w	r7, [r8]
 800b7fa:	e00f      	b.n	800b81c <_malloc_r+0xa8>
 800b7fc:	6822      	ldr	r2, [r4, #0]
 800b7fe:	1b52      	subs	r2, r2, r5
 800b800:	d420      	bmi.n	800b844 <_malloc_r+0xd0>
 800b802:	2a0b      	cmp	r2, #11
 800b804:	d917      	bls.n	800b836 <_malloc_r+0xc2>
 800b806:	1961      	adds	r1, r4, r5
 800b808:	42a3      	cmp	r3, r4
 800b80a:	6025      	str	r5, [r4, #0]
 800b80c:	bf18      	it	ne
 800b80e:	6059      	strne	r1, [r3, #4]
 800b810:	6863      	ldr	r3, [r4, #4]
 800b812:	bf08      	it	eq
 800b814:	f8c8 1000 	streq.w	r1, [r8]
 800b818:	5162      	str	r2, [r4, r5]
 800b81a:	604b      	str	r3, [r1, #4]
 800b81c:	4630      	mov	r0, r6
 800b81e:	f000 f82f 	bl	800b880 <__malloc_unlock>
 800b822:	f104 000b 	add.w	r0, r4, #11
 800b826:	1d23      	adds	r3, r4, #4
 800b828:	f020 0007 	bic.w	r0, r0, #7
 800b82c:	1ac2      	subs	r2, r0, r3
 800b82e:	bf1c      	itt	ne
 800b830:	1a1b      	subne	r3, r3, r0
 800b832:	50a3      	strne	r3, [r4, r2]
 800b834:	e7af      	b.n	800b796 <_malloc_r+0x22>
 800b836:	6862      	ldr	r2, [r4, #4]
 800b838:	42a3      	cmp	r3, r4
 800b83a:	bf0c      	ite	eq
 800b83c:	f8c8 2000 	streq.w	r2, [r8]
 800b840:	605a      	strne	r2, [r3, #4]
 800b842:	e7eb      	b.n	800b81c <_malloc_r+0xa8>
 800b844:	4623      	mov	r3, r4
 800b846:	6864      	ldr	r4, [r4, #4]
 800b848:	e7ae      	b.n	800b7a8 <_malloc_r+0x34>
 800b84a:	463c      	mov	r4, r7
 800b84c:	687f      	ldr	r7, [r7, #4]
 800b84e:	e7b6      	b.n	800b7be <_malloc_r+0x4a>
 800b850:	461a      	mov	r2, r3
 800b852:	685b      	ldr	r3, [r3, #4]
 800b854:	42a3      	cmp	r3, r4
 800b856:	d1fb      	bne.n	800b850 <_malloc_r+0xdc>
 800b858:	2300      	movs	r3, #0
 800b85a:	6053      	str	r3, [r2, #4]
 800b85c:	e7de      	b.n	800b81c <_malloc_r+0xa8>
 800b85e:	230c      	movs	r3, #12
 800b860:	6033      	str	r3, [r6, #0]
 800b862:	4630      	mov	r0, r6
 800b864:	f000 f80c 	bl	800b880 <__malloc_unlock>
 800b868:	e794      	b.n	800b794 <_malloc_r+0x20>
 800b86a:	6005      	str	r5, [r0, #0]
 800b86c:	e7d6      	b.n	800b81c <_malloc_r+0xa8>
 800b86e:	bf00      	nop
 800b870:	20000c88 	.word	0x20000c88

0800b874 <__malloc_lock>:
 800b874:	4801      	ldr	r0, [pc, #4]	@ (800b87c <__malloc_lock+0x8>)
 800b876:	f000 b84b 	b.w	800b910 <__retarget_lock_acquire_recursive>
 800b87a:	bf00      	nop
 800b87c:	20000dc4 	.word	0x20000dc4

0800b880 <__malloc_unlock>:
 800b880:	4801      	ldr	r0, [pc, #4]	@ (800b888 <__malloc_unlock+0x8>)
 800b882:	f000 b846 	b.w	800b912 <__retarget_lock_release_recursive>
 800b886:	bf00      	nop
 800b888:	20000dc4 	.word	0x20000dc4

0800b88c <memset>:
 800b88c:	4402      	add	r2, r0
 800b88e:	4603      	mov	r3, r0
 800b890:	4293      	cmp	r3, r2
 800b892:	d100      	bne.n	800b896 <memset+0xa>
 800b894:	4770      	bx	lr
 800b896:	f803 1b01 	strb.w	r1, [r3], #1
 800b89a:	e7f9      	b.n	800b890 <memset+0x4>

0800b89c <_sbrk_r>:
 800b89c:	b538      	push	{r3, r4, r5, lr}
 800b89e:	4d06      	ldr	r5, [pc, #24]	@ (800b8b8 <_sbrk_r+0x1c>)
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	4604      	mov	r4, r0
 800b8a4:	4608      	mov	r0, r1
 800b8a6:	602b      	str	r3, [r5, #0]
 800b8a8:	f7f6 fa96 	bl	8001dd8 <_sbrk>
 800b8ac:	1c43      	adds	r3, r0, #1
 800b8ae:	d102      	bne.n	800b8b6 <_sbrk_r+0x1a>
 800b8b0:	682b      	ldr	r3, [r5, #0]
 800b8b2:	b103      	cbz	r3, 800b8b6 <_sbrk_r+0x1a>
 800b8b4:	6023      	str	r3, [r4, #0]
 800b8b6:	bd38      	pop	{r3, r4, r5, pc}
 800b8b8:	20000dc8 	.word	0x20000dc8

0800b8bc <__errno>:
 800b8bc:	4b01      	ldr	r3, [pc, #4]	@ (800b8c4 <__errno+0x8>)
 800b8be:	6818      	ldr	r0, [r3, #0]
 800b8c0:	4770      	bx	lr
 800b8c2:	bf00      	nop
 800b8c4:	20000040 	.word	0x20000040

0800b8c8 <__libc_init_array>:
 800b8c8:	b570      	push	{r4, r5, r6, lr}
 800b8ca:	4d0d      	ldr	r5, [pc, #52]	@ (800b900 <__libc_init_array+0x38>)
 800b8cc:	4c0d      	ldr	r4, [pc, #52]	@ (800b904 <__libc_init_array+0x3c>)
 800b8ce:	1b64      	subs	r4, r4, r5
 800b8d0:	10a4      	asrs	r4, r4, #2
 800b8d2:	2600      	movs	r6, #0
 800b8d4:	42a6      	cmp	r6, r4
 800b8d6:	d109      	bne.n	800b8ec <__libc_init_array+0x24>
 800b8d8:	4d0b      	ldr	r5, [pc, #44]	@ (800b908 <__libc_init_array+0x40>)
 800b8da:	4c0c      	ldr	r4, [pc, #48]	@ (800b90c <__libc_init_array+0x44>)
 800b8dc:	f000 f864 	bl	800b9a8 <_init>
 800b8e0:	1b64      	subs	r4, r4, r5
 800b8e2:	10a4      	asrs	r4, r4, #2
 800b8e4:	2600      	movs	r6, #0
 800b8e6:	42a6      	cmp	r6, r4
 800b8e8:	d105      	bne.n	800b8f6 <__libc_init_array+0x2e>
 800b8ea:	bd70      	pop	{r4, r5, r6, pc}
 800b8ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8f0:	4798      	blx	r3
 800b8f2:	3601      	adds	r6, #1
 800b8f4:	e7ee      	b.n	800b8d4 <__libc_init_array+0xc>
 800b8f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8fa:	4798      	blx	r3
 800b8fc:	3601      	adds	r6, #1
 800b8fe:	e7f2      	b.n	800b8e6 <__libc_init_array+0x1e>
 800b900:	0800b9ec 	.word	0x0800b9ec
 800b904:	0800b9ec 	.word	0x0800b9ec
 800b908:	0800b9ec 	.word	0x0800b9ec
 800b90c:	0800b9f0 	.word	0x0800b9f0

0800b910 <__retarget_lock_acquire_recursive>:
 800b910:	4770      	bx	lr

0800b912 <__retarget_lock_release_recursive>:
 800b912:	4770      	bx	lr

0800b914 <_free_r>:
 800b914:	b538      	push	{r3, r4, r5, lr}
 800b916:	4605      	mov	r5, r0
 800b918:	2900      	cmp	r1, #0
 800b91a:	d041      	beq.n	800b9a0 <_free_r+0x8c>
 800b91c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b920:	1f0c      	subs	r4, r1, #4
 800b922:	2b00      	cmp	r3, #0
 800b924:	bfb8      	it	lt
 800b926:	18e4      	addlt	r4, r4, r3
 800b928:	f7ff ffa4 	bl	800b874 <__malloc_lock>
 800b92c:	4a1d      	ldr	r2, [pc, #116]	@ (800b9a4 <_free_r+0x90>)
 800b92e:	6813      	ldr	r3, [r2, #0]
 800b930:	b933      	cbnz	r3, 800b940 <_free_r+0x2c>
 800b932:	6063      	str	r3, [r4, #4]
 800b934:	6014      	str	r4, [r2, #0]
 800b936:	4628      	mov	r0, r5
 800b938:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b93c:	f7ff bfa0 	b.w	800b880 <__malloc_unlock>
 800b940:	42a3      	cmp	r3, r4
 800b942:	d908      	bls.n	800b956 <_free_r+0x42>
 800b944:	6820      	ldr	r0, [r4, #0]
 800b946:	1821      	adds	r1, r4, r0
 800b948:	428b      	cmp	r3, r1
 800b94a:	bf01      	itttt	eq
 800b94c:	6819      	ldreq	r1, [r3, #0]
 800b94e:	685b      	ldreq	r3, [r3, #4]
 800b950:	1809      	addeq	r1, r1, r0
 800b952:	6021      	streq	r1, [r4, #0]
 800b954:	e7ed      	b.n	800b932 <_free_r+0x1e>
 800b956:	461a      	mov	r2, r3
 800b958:	685b      	ldr	r3, [r3, #4]
 800b95a:	b10b      	cbz	r3, 800b960 <_free_r+0x4c>
 800b95c:	42a3      	cmp	r3, r4
 800b95e:	d9fa      	bls.n	800b956 <_free_r+0x42>
 800b960:	6811      	ldr	r1, [r2, #0]
 800b962:	1850      	adds	r0, r2, r1
 800b964:	42a0      	cmp	r0, r4
 800b966:	d10b      	bne.n	800b980 <_free_r+0x6c>
 800b968:	6820      	ldr	r0, [r4, #0]
 800b96a:	4401      	add	r1, r0
 800b96c:	1850      	adds	r0, r2, r1
 800b96e:	4283      	cmp	r3, r0
 800b970:	6011      	str	r1, [r2, #0]
 800b972:	d1e0      	bne.n	800b936 <_free_r+0x22>
 800b974:	6818      	ldr	r0, [r3, #0]
 800b976:	685b      	ldr	r3, [r3, #4]
 800b978:	6053      	str	r3, [r2, #4]
 800b97a:	4408      	add	r0, r1
 800b97c:	6010      	str	r0, [r2, #0]
 800b97e:	e7da      	b.n	800b936 <_free_r+0x22>
 800b980:	d902      	bls.n	800b988 <_free_r+0x74>
 800b982:	230c      	movs	r3, #12
 800b984:	602b      	str	r3, [r5, #0]
 800b986:	e7d6      	b.n	800b936 <_free_r+0x22>
 800b988:	6820      	ldr	r0, [r4, #0]
 800b98a:	1821      	adds	r1, r4, r0
 800b98c:	428b      	cmp	r3, r1
 800b98e:	bf04      	itt	eq
 800b990:	6819      	ldreq	r1, [r3, #0]
 800b992:	685b      	ldreq	r3, [r3, #4]
 800b994:	6063      	str	r3, [r4, #4]
 800b996:	bf04      	itt	eq
 800b998:	1809      	addeq	r1, r1, r0
 800b99a:	6021      	streq	r1, [r4, #0]
 800b99c:	6054      	str	r4, [r2, #4]
 800b99e:	e7ca      	b.n	800b936 <_free_r+0x22>
 800b9a0:	bd38      	pop	{r3, r4, r5, pc}
 800b9a2:	bf00      	nop
 800b9a4:	20000c88 	.word	0x20000c88

0800b9a8 <_init>:
 800b9a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9aa:	bf00      	nop
 800b9ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9ae:	bc08      	pop	{r3}
 800b9b0:	469e      	mov	lr, r3
 800b9b2:	4770      	bx	lr

0800b9b4 <_fini>:
 800b9b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9b6:	bf00      	nop
 800b9b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9ba:	bc08      	pop	{r3}
 800b9bc:	469e      	mov	lr, r3
 800b9be:	4770      	bx	lr
