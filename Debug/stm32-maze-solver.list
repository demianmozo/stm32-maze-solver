
stm32-maze-solver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c9a0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  0800cb30  0800cb30  0000db30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cbb4  0800cbb4  0000e098  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800cbb4  0800cbb4  0000dbb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cbbc  0800cbbc  0000e098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cbbc  0800cbbc  0000dbbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cbc0  0800cbc0  0000dbc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  0800cbc4  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e098  2**0
                  CONTENTS
 10 .bss          00000d5c  20000098  20000098  0000e098  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000df4  20000df4  0000e098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ef9b  00000000  00000000  0000e0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000049a6  00000000  00000000  0002d063  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a18  00000000  00000000  00031a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001441  00000000  00000000  00033428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000273bd  00000000  00000000  00034869  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022585  00000000  00000000  0005bc26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e201c  00000000  00000000  0007e1ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001601c7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007370  00000000  00000000  0016020c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  0016757c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cb18 	.word	0x0800cb18

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	0800cb18 	.word	0x0800cb18

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <antirebote>:
/**
 * @brief Función genérica de antirebote para cualquier pin GPIO
 * @ingroup ANTIREBOTE
 */
bool antirebote(GPIO_TypeDef *puerto, uint16_t pin)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	460b      	mov	r3, r1
 80005b6:	807b      	strh	r3, [r7, #2]
        ultimas_lecturas[16]; // Para hasta 16 pines distintos uso un array, god
    static uint8_t inicializado[16] = {
        0}; // se inicializan en cero solo la 1era vez que llamas la funcion

    // Calcular el índice del pin a partir de la máscara (posición del bit)
    uint8_t index = 0;
 80005b8:	2300      	movs	r3, #0
 80005ba:	73fb      	strb	r3, [r7, #15]
    uint16_t mask = pin;
 80005bc:	887b      	ldrh	r3, [r7, #2]
 80005be:	81bb      	strh	r3, [r7, #12]
    while (mask > 1)
 80005c0:	e005      	b.n	80005ce <antirebote+0x22>
    {
        mask >>= 1; // Desplazar a la derecha el bit
 80005c2:	89bb      	ldrh	r3, [r7, #12]
 80005c4:	085b      	lsrs	r3, r3, #1
 80005c6:	81bb      	strh	r3, [r7, #12]
        index++;    // Contar cuántos desplazamientos hicimos
 80005c8:	7bfb      	ldrb	r3, [r7, #15]
 80005ca:	3301      	adds	r3, #1
 80005cc:	73fb      	strb	r3, [r7, #15]
    while (mask > 1)
 80005ce:	89bb      	ldrh	r3, [r7, #12]
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	d8f6      	bhi.n	80005c2 <antirebote+0x16>
    }

    GPIO_PinState lectura1, lectura2;
    bool pulsado = false;
 80005d4:	2300      	movs	r3, #0
 80005d6:	72fb      	strb	r3, [r7, #11]

    // Leer el estado actual del pin
    lectura1 =
        HAL_GPIO_ReadPin(puerto, pin); //  xq puerto es el puntero al pueertooo
 80005d8:	887b      	ldrh	r3, [r7, #2]
 80005da:	4619      	mov	r1, r3
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f003 fa01 	bl	80039e4 <HAL_GPIO_ReadPin>
 80005e2:	4603      	mov	r3, r0
 80005e4:	72bb      	strb	r3, [r7, #10]

    // Si no se había inicializado antes, guardar lectura inicial y salir
    if (!inicializado[index])
 80005e6:	7bfb      	ldrb	r3, [r7, #15]
 80005e8:	4a17      	ldr	r2, [pc, #92]	@ (8000648 <antirebote+0x9c>)
 80005ea:	5cd3      	ldrb	r3, [r2, r3]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d109      	bne.n	8000604 <antirebote+0x58>
    { // se ejecuta solo la primera vez que se llama a
      // la función para ese pin.
        ultimas_lecturas[index] = lectura1;
 80005f0:	7bfb      	ldrb	r3, [r7, #15]
 80005f2:	4916      	ldr	r1, [pc, #88]	@ (800064c <antirebote+0xa0>)
 80005f4:	7aba      	ldrb	r2, [r7, #10]
 80005f6:	54ca      	strb	r2, [r1, r3]
        inicializado[index] = 1;
 80005f8:	7bfb      	ldrb	r3, [r7, #15]
 80005fa:	4a13      	ldr	r2, [pc, #76]	@ (8000648 <antirebote+0x9c>)
 80005fc:	2101      	movs	r1, #1
 80005fe:	54d1      	strb	r1, [r2, r3]
        return false;
 8000600:	2300      	movs	r3, #0
 8000602:	e01d      	b.n	8000640 <antirebote+0x94>
    }

    // Si detectamos un cambio respecto a la última lectura válida
    if (lectura1 != ultimas_lecturas[index])
 8000604:	7bfb      	ldrb	r3, [r7, #15]
 8000606:	4a11      	ldr	r2, [pc, #68]	@ (800064c <antirebote+0xa0>)
 8000608:	5cd3      	ldrb	r3, [r2, r3]
 800060a:	7aba      	ldrb	r2, [r7, #10]
 800060c:	429a      	cmp	r2, r3
 800060e:	d016      	beq.n	800063e <antirebote+0x92>
    {
        HAL_Delay(TREBOTES); // Esperar para filtrar rebotes
 8000610:	2032      	movs	r0, #50	@ 0x32
 8000612:	f001 fedf 	bl	80023d4 <HAL_Delay>

        // Leer el pin otra vez para confirmar que la lectura es estable
        lectura2 = HAL_GPIO_ReadPin(puerto, pin);
 8000616:	887b      	ldrh	r3, [r7, #2]
 8000618:	4619      	mov	r1, r3
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f003 f9e2 	bl	80039e4 <HAL_GPIO_ReadPin>
 8000620:	4603      	mov	r3, r0
 8000622:	727b      	strb	r3, [r7, #9]

        // Si la segunda lectura coincide con la primera, es válida
        if (lectura1 == lectura2)
 8000624:	7aba      	ldrb	r2, [r7, #10]
 8000626:	7a7b      	ldrb	r3, [r7, #9]
 8000628:	429a      	cmp	r2, r3
 800062a:	d108      	bne.n	800063e <antirebote+0x92>
        {
            ultimas_lecturas[index] = lectura2; // Guardar lectura válida
 800062c:	7bfb      	ldrb	r3, [r7, #15]
 800062e:	4907      	ldr	r1, [pc, #28]	@ (800064c <antirebote+0xa0>)
 8000630:	7a7a      	ldrb	r2, [r7, #9]
 8000632:	54ca      	strb	r2, [r1, r3]

            // Detectar si el botón fue presionado (activo en bajo)
            if (lectura2 == GPIO_PIN_RESET)
 8000634:	7a7b      	ldrb	r3, [r7, #9]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d101      	bne.n	800063e <antirebote+0x92>
            {
                pulsado = true;
 800063a:	2301      	movs	r3, #1
 800063c:	72fb      	strb	r3, [r7, #11]
            }
        }
    }

    return pulsado;
 800063e:	7afb      	ldrb	r3, [r7, #11]
 8000640:	4618      	mov	r0, r3
 8000642:	3710      	adds	r7, #16
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	200000b4 	.word	0x200000b4
 800064c:	200000c4 	.word	0x200000c4

08000650 <HAL_ADC_ConvHalfCpltCallback>:

bool calibrado = false;

// Interrupciones DMA
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
    promediar_sensores(&dma_buffer[0]);
 8000658:	4803      	ldr	r0, [pc, #12]	@ (8000668 <HAL_ADC_ConvHalfCpltCallback+0x18>)
 800065a:	f000 f815 	bl	8000688 <promediar_sensores>
}
 800065e:	bf00      	nop
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000334 	.word	0x20000334

0800066c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
    promediar_sensores(&dma_buffer[BUFFER_MINIMO]);
 8000674:	4803      	ldr	r0, [pc, #12]	@ (8000684 <HAL_ADC_ConvCpltCallback+0x18>)
 8000676:	f000 f807 	bl	8000688 <promediar_sensores>
}
 800067a:	bf00      	nop
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	200003fc 	.word	0x200003fc

08000688 <promediar_sensores>:

// Función promediar se ejecuta constantemente en DMA
void promediar_sensores(uint16_t *buffer)
{
 8000688:	b480      	push	{r7}
 800068a:	b087      	sub	sp, #28
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
    uint32_t izq_sum = 0, der_sum = 0;
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]
 8000694:	2300      	movs	r3, #0
 8000696:	613b      	str	r3, [r7, #16]

    // Canal 8 (derecho), Canal 9 (izquierdo)
    for (int i = 0; i < MUESTRAS; ++i)
 8000698:	2300      	movs	r3, #0
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	e012      	b.n	80006c4 <promediar_sensores+0x3c>
    {
        der_sum += buffer[0]; // Canal 8 (PB0)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	881b      	ldrh	r3, [r3, #0]
 80006a2:	461a      	mov	r2, r3
 80006a4:	693b      	ldr	r3, [r7, #16]
 80006a6:	4413      	add	r3, r2
 80006a8:	613b      	str	r3, [r7, #16]
        izq_sum += buffer[1]; // Canal 9 (PB1)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	3302      	adds	r3, #2
 80006ae:	881b      	ldrh	r3, [r3, #0]
 80006b0:	461a      	mov	r2, r3
 80006b2:	697b      	ldr	r3, [r7, #20]
 80006b4:	4413      	add	r3, r2
 80006b6:	617b      	str	r3, [r7, #20]
        buffer += 2;          // Avanza 2 posiciones
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	3304      	adds	r3, #4
 80006bc:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < MUESTRAS; ++i)
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	3301      	adds	r3, #1
 80006c2:	60fb      	str	r3, [r7, #12]
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	2b13      	cmp	r3, #19
 80006c8:	dde9      	ble.n	800069e <promediar_sensores+0x16>
    }

    sensor_der_avg = der_sum / MUESTRAS;
 80006ca:	693b      	ldr	r3, [r7, #16]
 80006cc:	4a0a      	ldr	r2, [pc, #40]	@ (80006f8 <promediar_sensores+0x70>)
 80006ce:	fba2 2303 	umull	r2, r3, r2, r3
 80006d2:	091b      	lsrs	r3, r3, #4
 80006d4:	b29a      	uxth	r2, r3
 80006d6:	4b09      	ldr	r3, [pc, #36]	@ (80006fc <promediar_sensores+0x74>)
 80006d8:	801a      	strh	r2, [r3, #0]
    sensor_izq_avg = izq_sum / MUESTRAS;
 80006da:	697b      	ldr	r3, [r7, #20]
 80006dc:	4a06      	ldr	r2, [pc, #24]	@ (80006f8 <promediar_sensores+0x70>)
 80006de:	fba2 2303 	umull	r2, r3, r2, r3
 80006e2:	091b      	lsrs	r3, r3, #4
 80006e4:	b29a      	uxth	r2, r3
 80006e6:	4b06      	ldr	r3, [pc, #24]	@ (8000700 <promediar_sensores+0x78>)
 80006e8:	801a      	strh	r2, [r3, #0]
}
 80006ea:	bf00      	nop
 80006ec:	371c      	adds	r7, #28
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	cccccccd 	.word	0xcccccccd
 80006fc:	200000d6 	.word	0x200000d6
 8000700:	200000d4 	.word	0x200000d4

08000704 <auto_calibracion>:

// Auto-calibración
void auto_calibracion(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
    HAL_Delay(1000);
 8000708:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800070c:	f001 fe62 	bl	80023d4 <HAL_Delay>

    // Medición 1: CERCA DE PARED DERECHA
    HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET); // Naranja
 8000710:	2201      	movs	r2, #1
 8000712:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000716:	4835      	ldr	r0, [pc, #212]	@ (80007ec <auto_calibracion+0xe8>)
 8000718:	f003 f97c 	bl	8003a14 <HAL_GPIO_WritePin>
    HAL_Delay(3000);                                         // Tiempo para posicionar cerca de pared derecha
 800071c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000720:	f001 fe58 	bl	80023d4 <HAL_Delay>

    der_cerca = sensor_der_avg;
 8000724:	4b32      	ldr	r3, [pc, #200]	@ (80007f0 <auto_calibracion+0xec>)
 8000726:	881a      	ldrh	r2, [r3, #0]
 8000728:	4b32      	ldr	r3, [pc, #200]	@ (80007f4 <auto_calibracion+0xf0>)
 800072a:	801a      	strh	r2, [r3, #0]

    // Medición 2: CERCA DE PARED IZQUIERDA
    HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 800072c:	2200      	movs	r2, #0
 800072e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000732:	482e      	ldr	r0, [pc, #184]	@ (80007ec <auto_calibracion+0xe8>)
 8000734:	f003 f96e 	bl	8003a14 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET); // Rojo
 8000738:	2201      	movs	r2, #1
 800073a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800073e:	482b      	ldr	r0, [pc, #172]	@ (80007ec <auto_calibracion+0xe8>)
 8000740:	f003 f968 	bl	8003a14 <HAL_GPIO_WritePin>
    HAL_Delay(3000);                                         // Tiempo para posicionar cerca de pared izquierda
 8000744:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000748:	f001 fe44 	bl	80023d4 <HAL_Delay>

    izq_cerca = sensor_izq_avg;
 800074c:	4b2a      	ldr	r3, [pc, #168]	@ (80007f8 <auto_calibracion+0xf4>)
 800074e:	881a      	ldrh	r2, [r3, #0]
 8000750:	4b2a      	ldr	r3, [pc, #168]	@ (80007fc <auto_calibracion+0xf8>)
 8000752:	801a      	strh	r2, [r3, #0]

    // Medición 3: CENTRADO EN PASILLO
    HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 8000754:	2200      	movs	r2, #0
 8000756:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800075a:	4824      	ldr	r0, [pc, #144]	@ (80007ec <auto_calibracion+0xe8>)
 800075c:	f003 f95a 	bl	8003a14 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_SET); // Azul
 8000760:	2201      	movs	r2, #1
 8000762:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000766:	4821      	ldr	r0, [pc, #132]	@ (80007ec <auto_calibracion+0xe8>)
 8000768:	f003 f954 	bl	8003a14 <HAL_GPIO_WritePin>
    HAL_Delay(3000);                                         // Tiempo para centrar
 800076c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000770:	f001 fe30 	bl	80023d4 <HAL_Delay>

    izq_lejos = sensor_izq_avg;
 8000774:	4b20      	ldr	r3, [pc, #128]	@ (80007f8 <auto_calibracion+0xf4>)
 8000776:	881a      	ldrh	r2, [r3, #0]
 8000778:	4b21      	ldr	r3, [pc, #132]	@ (8000800 <auto_calibracion+0xfc>)
 800077a:	801a      	strh	r2, [r3, #0]
    der_lejos = sensor_der_avg;
 800077c:	4b1c      	ldr	r3, [pc, #112]	@ (80007f0 <auto_calibracion+0xec>)
 800077e:	881a      	ldrh	r2, [r3, #0]
 8000780:	4b20      	ldr	r3, [pc, #128]	@ (8000804 <auto_calibracion+0x100>)
 8000782:	801a      	strh	r2, [r3, #0]

    // Calcular valores medios
    izq_centrado = (izq_cerca + izq_lejos) / 2;
 8000784:	4b1d      	ldr	r3, [pc, #116]	@ (80007fc <auto_calibracion+0xf8>)
 8000786:	881b      	ldrh	r3, [r3, #0]
 8000788:	461a      	mov	r2, r3
 800078a:	4b1d      	ldr	r3, [pc, #116]	@ (8000800 <auto_calibracion+0xfc>)
 800078c:	881b      	ldrh	r3, [r3, #0]
 800078e:	4413      	add	r3, r2
 8000790:	0fda      	lsrs	r2, r3, #31
 8000792:	4413      	add	r3, r2
 8000794:	105b      	asrs	r3, r3, #1
 8000796:	b29a      	uxth	r2, r3
 8000798:	4b1b      	ldr	r3, [pc, #108]	@ (8000808 <auto_calibracion+0x104>)
 800079a:	801a      	strh	r2, [r3, #0]
    der_centrado = (der_cerca + der_lejos) / 2;
 800079c:	4b15      	ldr	r3, [pc, #84]	@ (80007f4 <auto_calibracion+0xf0>)
 800079e:	881b      	ldrh	r3, [r3, #0]
 80007a0:	461a      	mov	r2, r3
 80007a2:	4b18      	ldr	r3, [pc, #96]	@ (8000804 <auto_calibracion+0x100>)
 80007a4:	881b      	ldrh	r3, [r3, #0]
 80007a6:	4413      	add	r3, r2
 80007a8:	0fda      	lsrs	r2, r3, #31
 80007aa:	4413      	add	r3, r2
 80007ac:	105b      	asrs	r3, r3, #1
 80007ae:	b29a      	uxth	r2, r3
 80007b0:	4b16      	ldr	r3, [pc, #88]	@ (800080c <auto_calibracion+0x108>)
 80007b2:	801a      	strh	r2, [r3, #0]

    // Calibración completa
    HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 80007b4:	2200      	movs	r2, #0
 80007b6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007ba:	480c      	ldr	r0, [pc, #48]	@ (80007ec <auto_calibracion+0xe8>)
 80007bc:	f003 f92a 	bl	8003a14 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET); // Verde
 80007c0:	2201      	movs	r2, #1
 80007c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007c6:	4809      	ldr	r0, [pc, #36]	@ (80007ec <auto_calibracion+0xe8>)
 80007c8:	f003 f924 	bl	8003a14 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 80007cc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007d0:	f001 fe00 	bl	80023d4 <HAL_Delay>
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80007d4:	2200      	movs	r2, #0
 80007d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007da:	4804      	ldr	r0, [pc, #16]	@ (80007ec <auto_calibracion+0xe8>)
 80007dc:	f003 f91a 	bl	8003a14 <HAL_GPIO_WritePin>

    calibrado = true;
 80007e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000810 <auto_calibracion+0x10c>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	701a      	strb	r2, [r3, #0]
}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40020c00 	.word	0x40020c00
 80007f0:	200000d6 	.word	0x200000d6
 80007f4:	20000006 	.word	0x20000006
 80007f8:	200000d4 	.word	0x200000d4
 80007fc:	20000000 	.word	0x20000000
 8000800:	20000002 	.word	0x20000002
 8000804:	20000008 	.word	0x20000008
 8000808:	20000004 	.word	0x20000004
 800080c:	2000000a 	.word	0x2000000a
 8000810:	200000d8 	.word	0x200000d8

08000814 <controlar_linea_recta>:

// Control de línea recta
void controlar_linea_recta(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
    if (!calibrado)
 800081a:	4b29      	ldr	r3, [pc, #164]	@ (80008c0 <controlar_linea_recta+0xac>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	f083 0301 	eor.w	r3, r3, #1
 8000822:	b2db      	uxtb	r3, r3
 8000824:	2b00      	cmp	r3, #0
 8000826:	d140      	bne.n	80008aa <controlar_linea_recta+0x96>
        return;

    // Verificar flags AL INICIO
    if (flag_linea_detectada || flag_muro_detectado)
 8000828:	4b26      	ldr	r3, [pc, #152]	@ (80008c4 <controlar_linea_recta+0xb0>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	b2db      	uxtb	r3, r3
 800082e:	2b00      	cmp	r3, #0
 8000830:	d13d      	bne.n	80008ae <controlar_linea_recta+0x9a>
 8000832:	4b25      	ldr	r3, [pc, #148]	@ (80008c8 <controlar_linea_recta+0xb4>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	b2db      	uxtb	r3, r3
 8000838:	2b00      	cmp	r3, #0
 800083a:	d138      	bne.n	80008ae <controlar_linea_recta+0x9a>
        return;

    // Determinar posición relativa
    bool muy_cerca_izq = (sensor_izq_avg < izq_cerca + 200);
 800083c:	4b23      	ldr	r3, [pc, #140]	@ (80008cc <controlar_linea_recta+0xb8>)
 800083e:	881b      	ldrh	r3, [r3, #0]
 8000840:	33c7      	adds	r3, #199	@ 0xc7
 8000842:	4a23      	ldr	r2, [pc, #140]	@ (80008d0 <controlar_linea_recta+0xbc>)
 8000844:	8812      	ldrh	r2, [r2, #0]
 8000846:	4293      	cmp	r3, r2
 8000848:	bfac      	ite	ge
 800084a:	2301      	movge	r3, #1
 800084c:	2300      	movlt	r3, #0
 800084e:	71fb      	strb	r3, [r7, #7]
    bool muy_cerca_der = (sensor_der_avg < der_cerca + 200);
 8000850:	4b20      	ldr	r3, [pc, #128]	@ (80008d4 <controlar_linea_recta+0xc0>)
 8000852:	881b      	ldrh	r3, [r3, #0]
 8000854:	33c7      	adds	r3, #199	@ 0xc7
 8000856:	4a20      	ldr	r2, [pc, #128]	@ (80008d8 <controlar_linea_recta+0xc4>)
 8000858:	8812      	ldrh	r2, [r2, #0]
 800085a:	4293      	cmp	r3, r2
 800085c:	bfac      	ite	ge
 800085e:	2301      	movge	r3, #1
 8000860:	2300      	movlt	r3, #0
 8000862:	71bb      	strb	r3, [r7, #6]

    if (muy_cerca_izq)
 8000864:	79fb      	ldrb	r3, [r7, #7]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d00c      	beq.n	8000884 <controlar_linea_recta+0x70>
    {
        // Verificar flags durante ejecución
        if (flag_linea_detectada || flag_muro_detectado)
 800086a:	4b16      	ldr	r3, [pc, #88]	@ (80008c4 <controlar_linea_recta+0xb0>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	b2db      	uxtb	r3, r3
 8000870:	2b00      	cmp	r3, #0
 8000872:	d11e      	bne.n	80008b2 <controlar_linea_recta+0x9e>
 8000874:	4b14      	ldr	r3, [pc, #80]	@ (80008c8 <controlar_linea_recta+0xb4>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	b2db      	uxtb	r3, r3
 800087a:	2b00      	cmp	r3, #0
 800087c:	d119      	bne.n	80008b2 <controlar_linea_recta+0x9e>
        {
            return;
        }
        correccion_derecha(); // Alejarse de pared izquierda
 800087e:	f000 f9d5 	bl	8000c2c <correccion_derecha>
 8000882:	e019      	b.n	80008b8 <controlar_linea_recta+0xa4>
    }
    else if (muy_cerca_der)
 8000884:	79bb      	ldrb	r3, [r7, #6]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d00c      	beq.n	80008a4 <controlar_linea_recta+0x90>
    {
        // Verificar flags durante ejecución
        if (flag_linea_detectada || flag_muro_detectado)
 800088a:	4b0e      	ldr	r3, [pc, #56]	@ (80008c4 <controlar_linea_recta+0xb0>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	b2db      	uxtb	r3, r3
 8000890:	2b00      	cmp	r3, #0
 8000892:	d110      	bne.n	80008b6 <controlar_linea_recta+0xa2>
 8000894:	4b0c      	ldr	r3, [pc, #48]	@ (80008c8 <controlar_linea_recta+0xb4>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	b2db      	uxtb	r3, r3
 800089a:	2b00      	cmp	r3, #0
 800089c:	d10b      	bne.n	80008b6 <controlar_linea_recta+0xa2>
        {
            return;
        }
        correccion_izquierda(); // Alejarse de pared derecha
 800089e:	f000 f997 	bl	8000bd0 <correccion_izquierda>
 80008a2:	e009      	b.n	80008b8 <controlar_linea_recta+0xa4>
    }
    else
    {
        avanza(); // Ir recto si está centrado
 80008a4:	f000 f8c6 	bl	8000a34 <avanza>
 80008a8:	e006      	b.n	80008b8 <controlar_linea_recta+0xa4>
        return;
 80008aa:	bf00      	nop
 80008ac:	e004      	b.n	80008b8 <controlar_linea_recta+0xa4>
        return;
 80008ae:	bf00      	nop
 80008b0:	e002      	b.n	80008b8 <controlar_linea_recta+0xa4>
            return;
 80008b2:	bf00      	nop
 80008b4:	e000      	b.n	80008b8 <controlar_linea_recta+0xa4>
            return;
 80008b6:	bf00      	nop
    }
}
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	200000d8 	.word	0x200000d8
 80008c4:	200004c4 	.word	0x200004c4
 80008c8:	200004c5 	.word	0x200004c5
 80008cc:	20000000 	.word	0x20000000
 80008d0:	200000d4 	.word	0x200000d4
 80008d4:	20000006 	.word	0x20000006
 80008d8:	200000d6 	.word	0x200000d6

080008dc <activar_modo_sprint>:
uint16_t velocidad_actual_der = VELOCIDAD_AVANCE_DER;
uint16_t velocidad_giro_actual_izq = VELOCIDAD_GIRO_IZQ;
uint16_t velocidad_giro_actual_der = VELOCIDAD_GIRO_DER;

void activar_modo_sprint(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
    velocidad_actual_izq = VELOCIDAD_SPRINT_IZQ;
 80008e0:	4b06      	ldr	r3, [pc, #24]	@ (80008fc <activar_modo_sprint+0x20>)
 80008e2:	f44f 7261 	mov.w	r2, #900	@ 0x384
 80008e6:	801a      	strh	r2, [r3, #0]
    velocidad_actual_der = VELOCIDAD_SPRINT_DER;
 80008e8:	4b05      	ldr	r3, [pc, #20]	@ (8000900 <activar_modo_sprint+0x24>)
 80008ea:	f44f 7261 	mov.w	r2, #900	@ 0x384
 80008ee:	801a      	strh	r2, [r3, #0]
}
 80008f0:	bf00      	nop
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	2000000c 	.word	0x2000000c
 8000900:	2000000e 	.word	0x2000000e

08000904 <control_motor_init>:

/**
 * @brief Inicializa el control de motores
 */
void control_motor_init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
    // Iniciar PWM en ambos canales
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // Motor izquierdo (PC8)
 8000908:	2108      	movs	r1, #8
 800090a:	4805      	ldr	r0, [pc, #20]	@ (8000920 <control_motor_init+0x1c>)
 800090c:	f006 f8f6 	bl	8006afc <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // Motor derecho (PC9)
 8000910:	210c      	movs	r1, #12
 8000912:	4803      	ldr	r0, [pc, #12]	@ (8000920 <control_motor_init+0x1c>)
 8000914:	f006 f8f2 	bl	8006afc <HAL_TIM_PWM_Start>

    // comienza yendo para adelante
    avanza();
 8000918:	f000 f88c 	bl	8000a34 <avanza>
}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}
 8000920:	200002a0 	.word	0x200002a0

08000924 <set_motor_izq>:
 * @brief Configura motor izquierdo
 * @param estado: MOTOR_AVANCE, MOTOR_RETROCESO o MOTOR_FRENADO
 * @param pwm: Valor PWM (0-1000)
 */
void set_motor_izq(motor_estado_t estado, uint16_t pwm)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	460a      	mov	r2, r1
 800092e:	71fb      	strb	r3, [r7, #7]
 8000930:	4613      	mov	r3, r2
 8000932:	80bb      	strh	r3, [r7, #4]
    switch (estado)
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d002      	beq.n	8000940 <set_motor_izq+0x1c>
 800093a:	2b01      	cmp	r3, #1
 800093c:	d00d      	beq.n	800095a <set_motor_izq+0x36>
 800093e:	e019      	b.n	8000974 <set_motor_izq+0x50>
    {
    case MOTOR_AVANCE:
        HAL_GPIO_WritePin(MI0_GPIO_Port, MI0_Pin, GPIO_PIN_SET);   // MI0 = 1
 8000940:	2201      	movs	r2, #1
 8000942:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000946:	4817      	ldr	r0, [pc, #92]	@ (80009a4 <set_motor_izq+0x80>)
 8000948:	f003 f864 	bl	8003a14 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MI1_GPIO_Port, MI1_Pin, GPIO_PIN_RESET); // MI1 = 0
 800094c:	2200      	movs	r2, #0
 800094e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000952:	4814      	ldr	r0, [pc, #80]	@ (80009a4 <set_motor_izq+0x80>)
 8000954:	f003 f85e 	bl	8003a14 <HAL_GPIO_WritePin>
        break;
 8000958:	e01b      	b.n	8000992 <set_motor_izq+0x6e>

    case MOTOR_RETROCESO:
        HAL_GPIO_WritePin(MI0_GPIO_Port, MI0_Pin, GPIO_PIN_RESET); // MI0 = 0
 800095a:	2200      	movs	r2, #0
 800095c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000960:	4810      	ldr	r0, [pc, #64]	@ (80009a4 <set_motor_izq+0x80>)
 8000962:	f003 f857 	bl	8003a14 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MI1_GPIO_Port, MI1_Pin, GPIO_PIN_SET);   // MI1 = 1
 8000966:	2201      	movs	r2, #1
 8000968:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800096c:	480d      	ldr	r0, [pc, #52]	@ (80009a4 <set_motor_izq+0x80>)
 800096e:	f003 f851 	bl	8003a14 <HAL_GPIO_WritePin>
        break;
 8000972:	e00e      	b.n	8000992 <set_motor_izq+0x6e>

    case MOTOR_FRENADO:
    default:
        HAL_GPIO_WritePin(MI0_GPIO_Port, MI0_Pin, GPIO_PIN_RESET); // MI0 = 0
 8000974:	2200      	movs	r2, #0
 8000976:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800097a:	480a      	ldr	r0, [pc, #40]	@ (80009a4 <set_motor_izq+0x80>)
 800097c:	f003 f84a 	bl	8003a14 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MI1_GPIO_Port, MI1_Pin, GPIO_PIN_RESET); // MI1 = 0
 8000980:	2200      	movs	r2, #0
 8000982:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000986:	4807      	ldr	r0, [pc, #28]	@ (80009a4 <set_motor_izq+0x80>)
 8000988:	f003 f844 	bl	8003a14 <HAL_GPIO_WritePin>
        pwm = 0;                                                   // Forzar PWM a 0 en frenado
 800098c:	2300      	movs	r3, #0
 800098e:	80bb      	strh	r3, [r7, #4]
        break;
 8000990:	bf00      	nop
    }

    // Establecer PWM, aca le definimos la velocidad
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pwm);
 8000992:	4b05      	ldr	r3, [pc, #20]	@ (80009a8 <set_motor_izq+0x84>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	88ba      	ldrh	r2, [r7, #4]
 8000998:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40020400 	.word	0x40020400
 80009a8:	200002a0 	.word	0x200002a0

080009ac <set_motor_der>:
 * @brief Configura motor derecho
 * @param estado: MOTOR_AVANCE, MOTOR_RETROCESO o MOTOR_FRENADO
 * @param pwm: Valor PWM (0-1000)
 */
void set_motor_der(motor_estado_t estado, uint16_t pwm)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	460a      	mov	r2, r1
 80009b6:	71fb      	strb	r3, [r7, #7]
 80009b8:	4613      	mov	r3, r2
 80009ba:	80bb      	strh	r3, [r7, #4]
    switch (estado)
 80009bc:	79fb      	ldrb	r3, [r7, #7]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d002      	beq.n	80009c8 <set_motor_der+0x1c>
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d00d      	beq.n	80009e2 <set_motor_der+0x36>
 80009c6:	e019      	b.n	80009fc <set_motor_der+0x50>
    {
    case MOTOR_AVANCE:
        HAL_GPIO_WritePin(MD0_GPIO_Port, MD0_Pin, GPIO_PIN_SET);   // MD0 = 1
 80009c8:	2201      	movs	r2, #1
 80009ca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009ce:	4817      	ldr	r0, [pc, #92]	@ (8000a2c <set_motor_der+0x80>)
 80009d0:	f003 f820 	bl	8003a14 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MD1_GPIO_Port, MD1_Pin, GPIO_PIN_RESET); // MD1 = 0
 80009d4:	2200      	movs	r2, #0
 80009d6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009da:	4814      	ldr	r0, [pc, #80]	@ (8000a2c <set_motor_der+0x80>)
 80009dc:	f003 f81a 	bl	8003a14 <HAL_GPIO_WritePin>
        break;
 80009e0:	e01b      	b.n	8000a1a <set_motor_der+0x6e>

    case MOTOR_RETROCESO:
        HAL_GPIO_WritePin(MD0_GPIO_Port, MD0_Pin, GPIO_PIN_RESET); // MD0 = 0
 80009e2:	2200      	movs	r2, #0
 80009e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009e8:	4810      	ldr	r0, [pc, #64]	@ (8000a2c <set_motor_der+0x80>)
 80009ea:	f003 f813 	bl	8003a14 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MD1_GPIO_Port, MD1_Pin, GPIO_PIN_SET);   // MD1 = 1
 80009ee:	2201      	movs	r2, #1
 80009f0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009f4:	480d      	ldr	r0, [pc, #52]	@ (8000a2c <set_motor_der+0x80>)
 80009f6:	f003 f80d 	bl	8003a14 <HAL_GPIO_WritePin>
        break;
 80009fa:	e00e      	b.n	8000a1a <set_motor_der+0x6e>

    case MOTOR_FRENADO:
    default:
        HAL_GPIO_WritePin(MD0_GPIO_Port, MD0_Pin, GPIO_PIN_RESET); // MD0 = 0
 80009fc:	2200      	movs	r2, #0
 80009fe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a02:	480a      	ldr	r0, [pc, #40]	@ (8000a2c <set_motor_der+0x80>)
 8000a04:	f003 f806 	bl	8003a14 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MD1_GPIO_Port, MD1_Pin, GPIO_PIN_RESET); // MD1 = 0
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a0e:	4807      	ldr	r0, [pc, #28]	@ (8000a2c <set_motor_der+0x80>)
 8000a10:	f003 f800 	bl	8003a14 <HAL_GPIO_WritePin>
        pwm = 0;                                                   // Forzar PWM a 0 en frenado
 8000a14:	2300      	movs	r3, #0
 8000a16:	80bb      	strh	r3, [r7, #4]
        break;
 8000a18:	bf00      	nop
    }

    // Establecer VELOCIDAD
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, pwm);
 8000a1a:	4b05      	ldr	r3, [pc, #20]	@ (8000a30 <set_motor_der+0x84>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	88ba      	ldrh	r2, [r7, #4]
 8000a20:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40020400 	.word	0x40020400
 8000a30:	200002a0 	.word	0x200002a0

08000a34 <avanza>:

/**
 * @brief Avanza con ambos motores al 70% de velocidad
 */
void avanza(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
    set_motor_izq(MOTOR_AVANCE, velocidad_actual_izq);
 8000a38:	4b06      	ldr	r3, [pc, #24]	@ (8000a54 <avanza+0x20>)
 8000a3a:	881b      	ldrh	r3, [r3, #0]
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	2000      	movs	r0, #0
 8000a40:	f7ff ff70 	bl	8000924 <set_motor_izq>
    set_motor_der(MOTOR_AVANCE, velocidad_actual_der);
 8000a44:	4b04      	ldr	r3, [pc, #16]	@ (8000a58 <avanza+0x24>)
 8000a46:	881b      	ldrh	r3, [r3, #0]
 8000a48:	4619      	mov	r1, r3
 8000a4a:	2000      	movs	r0, #0
 8000a4c:	f7ff ffae 	bl	80009ac <set_motor_der>
}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	2000000c 	.word	0x2000000c
 8000a58:	2000000e 	.word	0x2000000e

08000a5c <gira90izq>:
/**
 * @brief Gira 90 grados a la izquierda y luego continúa avanzando
 * Motor izq retrocede, motor der avanza al 100%
 */
brujula gira90izq(brujula sentido)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	71fb      	strb	r3, [r7, #7]
    set_motor_izq(MOTOR_RETROCESO, velocidad_giro_actual_izq);
 8000a66:	4b18      	ldr	r3, [pc, #96]	@ (8000ac8 <gira90izq+0x6c>)
 8000a68:	881b      	ldrh	r3, [r3, #0]
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	2001      	movs	r0, #1
 8000a6e:	f7ff ff59 	bl	8000924 <set_motor_izq>
    set_motor_der(MOTOR_AVANCE, velocidad_giro_actual_der);
 8000a72:	4b16      	ldr	r3, [pc, #88]	@ (8000acc <gira90izq+0x70>)
 8000a74:	881b      	ldrh	r3, [r3, #0]
 8000a76:	4619      	mov	r1, r3
 8000a78:	2000      	movs	r0, #0
 8000a7a:	f7ff ff97 	bl	80009ac <set_motor_der>

    HAL_Delay(TIEMPO_GIRO_90_IZQ);
 8000a7e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a82:	f001 fca7 	bl	80023d4 <HAL_Delay>
    switch (sentido)
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	2b03      	cmp	r3, #3
 8000a8a:	d817      	bhi.n	8000abc <gira90izq+0x60>
 8000a8c:	a201      	add	r2, pc, #4	@ (adr r2, 8000a94 <gira90izq+0x38>)
 8000a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a92:	bf00      	nop
 8000a94:	08000aa5 	.word	0x08000aa5
 8000a98:	08000aab 	.word	0x08000aab
 8000a9c:	08000ab1 	.word	0x08000ab1
 8000aa0:	08000ab7 	.word	0x08000ab7
    {
    case norte:
        sentido = oeste;
 8000aa4:	2303      	movs	r3, #3
 8000aa6:	71fb      	strb	r3, [r7, #7]
        break;
 8000aa8:	e008      	b.n	8000abc <gira90izq+0x60>

    case este:
        sentido = norte;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	71fb      	strb	r3, [r7, #7]
        break;
 8000aae:	e005      	b.n	8000abc <gira90izq+0x60>

    case sur:
        sentido = este;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	71fb      	strb	r3, [r7, #7]
        break;
 8000ab4:	e002      	b.n	8000abc <gira90izq+0x60>

    case oeste:
        sentido = sur;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	71fb      	strb	r3, [r7, #7]
        break;
 8000aba:	bf00      	nop
    // Después del giro, continuar avanzando
    //avanza();

    // termina de girar y verifica que no halla un muro adelante

    return sentido;
 8000abc:	79fb      	ldrb	r3, [r7, #7]
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20000010 	.word	0x20000010
 8000acc:	20000012 	.word	0x20000012

08000ad0 <gira90der>:
/**
 * @brief Gira 90 grados a la derecha y luego continúa avanzando
 * Motor der retrocede, motor izq avanza al 100%
 */
brujula gira90der(brujula sentido)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	71fb      	strb	r3, [r7, #7]
    set_motor_izq(MOTOR_AVANCE, velocidad_giro_actual_izq);
 8000ada:	4b18      	ldr	r3, [pc, #96]	@ (8000b3c <gira90der+0x6c>)
 8000adc:	881b      	ldrh	r3, [r3, #0]
 8000ade:	4619      	mov	r1, r3
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	f7ff ff1f 	bl	8000924 <set_motor_izq>
    set_motor_der(MOTOR_RETROCESO, velocidad_giro_actual_der);
 8000ae6:	4b16      	ldr	r3, [pc, #88]	@ (8000b40 <gira90der+0x70>)
 8000ae8:	881b      	ldrh	r3, [r3, #0]
 8000aea:	4619      	mov	r1, r3
 8000aec:	2001      	movs	r0, #1
 8000aee:	f7ff ff5d 	bl	80009ac <set_motor_der>

    HAL_Delay(TIEMPO_GIRO_90_DER);
 8000af2:	f240 2026 	movw	r0, #550	@ 0x226
 8000af6:	f001 fc6d 	bl	80023d4 <HAL_Delay>
    switch (sentido)
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	2b03      	cmp	r3, #3
 8000afe:	d817      	bhi.n	8000b30 <gira90der+0x60>
 8000b00:	a201      	add	r2, pc, #4	@ (adr r2, 8000b08 <gira90der+0x38>)
 8000b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b06:	bf00      	nop
 8000b08:	08000b19 	.word	0x08000b19
 8000b0c:	08000b1f 	.word	0x08000b1f
 8000b10:	08000b25 	.word	0x08000b25
 8000b14:	08000b2b 	.word	0x08000b2b
    {
    case norte:
        sentido = este;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	71fb      	strb	r3, [r7, #7]
        break;
 8000b1c:	e008      	b.n	8000b30 <gira90der+0x60>

    case este:
        sentido = sur;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	71fb      	strb	r3, [r7, #7]
        break;
 8000b22:	e005      	b.n	8000b30 <gira90der+0x60>

    case sur:
        sentido = oeste;
 8000b24:	2303      	movs	r3, #3
 8000b26:	71fb      	strb	r3, [r7, #7]
        break;
 8000b28:	e002      	b.n	8000b30 <gira90der+0x60>

    case oeste:
        sentido = norte;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	71fb      	strb	r3, [r7, #7]
        break;
 8000b2e:	bf00      	nop
    }

    // Después del giro, continuar avanzando
    //avanza();
    
    return sentido;
 8000b30:	79fb      	ldrb	r3, [r7, #7]
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000010 	.word	0x20000010
 8000b40:	20000012 	.word	0x20000012

08000b44 <gira180>:
/**
 * @brief Gira 180 grados y luego continúa avanzando
 * Motor der retrocede, motor izq avanza al 100%
 */
brujula gira180(brujula sentido)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	71fb      	strb	r3, [r7, #7]
    set_motor_izq(MOTOR_AVANCE, velocidad_giro_actual_izq);
 8000b4e:	4b18      	ldr	r3, [pc, #96]	@ (8000bb0 <gira180+0x6c>)
 8000b50:	881b      	ldrh	r3, [r3, #0]
 8000b52:	4619      	mov	r1, r3
 8000b54:	2000      	movs	r0, #0
 8000b56:	f7ff fee5 	bl	8000924 <set_motor_izq>
    set_motor_der(MOTOR_RETROCESO, velocidad_giro_actual_der);
 8000b5a:	4b16      	ldr	r3, [pc, #88]	@ (8000bb4 <gira180+0x70>)
 8000b5c:	881b      	ldrh	r3, [r3, #0]
 8000b5e:	4619      	mov	r1, r3
 8000b60:	2001      	movs	r0, #1
 8000b62:	f7ff ff23 	bl	80009ac <set_motor_der>

    HAL_Delay(TIEMPO_GIRO_180);
 8000b66:	f240 404c 	movw	r0, #1100	@ 0x44c
 8000b6a:	f001 fc33 	bl	80023d4 <HAL_Delay>
    switch (sentido)
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	2b03      	cmp	r3, #3
 8000b72:	d817      	bhi.n	8000ba4 <gira180+0x60>
 8000b74:	a201      	add	r2, pc, #4	@ (adr r2, 8000b7c <gira180+0x38>)
 8000b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b7a:	bf00      	nop
 8000b7c:	08000b8d 	.word	0x08000b8d
 8000b80:	08000b93 	.word	0x08000b93
 8000b84:	08000b99 	.word	0x08000b99
 8000b88:	08000b9f 	.word	0x08000b9f
    {
    case norte:
        sentido = sur;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	71fb      	strb	r3, [r7, #7]
        break;
 8000b90:	e008      	b.n	8000ba4 <gira180+0x60>

    case este:
        sentido = oeste;
 8000b92:	2303      	movs	r3, #3
 8000b94:	71fb      	strb	r3, [r7, #7]
        break;
 8000b96:	e005      	b.n	8000ba4 <gira180+0x60>

    case sur:
        sentido = norte;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	71fb      	strb	r3, [r7, #7]
        break;
 8000b9c:	e002      	b.n	8000ba4 <gira180+0x60>

    case oeste:
        sentido = este;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	71fb      	strb	r3, [r7, #7]
        break;
 8000ba2:	bf00      	nop
    }

    // Después del giro, continuar avanzando
    //avanza();
    return sentido;
 8000ba4:	79fb      	ldrb	r3, [r7, #7]
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	20000010 	.word	0x20000010
 8000bb4:	20000012 	.word	0x20000012

08000bb8 <termino>:

/**
 * @brief Detiene ambos motores (cuando ganemos)
 */
void termino(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
    set_motor_izq(MOTOR_FRENADO, 0);
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	2002      	movs	r0, #2
 8000bc0:	f7ff feb0 	bl	8000924 <set_motor_izq>
    set_motor_der(MOTOR_FRENADO, 0);
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	2002      	movs	r0, #2
 8000bc8:	f7ff fef0 	bl	80009ac <set_motor_der>
}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <correccion_izquierda>:

void correccion_izquierda(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0

    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 100); // Motor izq más lento
 8000bd6:	4b12      	ldr	r3, [pc, #72]	@ (8000c20 <correccion_izquierda+0x50>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	2264      	movs	r2, #100	@ 0x64
 8000bdc:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 700); // Motor der normal
 8000bde:	4b10      	ldr	r3, [pc, #64]	@ (8000c20 <correccion_izquierda+0x50>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 8000be6:	641a      	str	r2, [r3, #64]	@ 0x40
     for (int i = 0; i < 7; i++)                       // 10 ciclos de 10 ms = 100 ms de corrección
 8000be8:	2300      	movs	r3, #0
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	e00f      	b.n	8000c0e <correccion_izquierda+0x3e>
    {
        if (flag_linea_detectada || flag_muro_detectado)
 8000bee:	4b0d      	ldr	r3, [pc, #52]	@ (8000c24 <correccion_izquierda+0x54>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d10e      	bne.n	8000c16 <correccion_izquierda+0x46>
 8000bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8000c28 <correccion_izquierda+0x58>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d109      	bne.n	8000c16 <correccion_izquierda+0x46>
            return; // Salir si hay algo urgente

        HAL_Delay(10);
 8000c02:	200a      	movs	r0, #10
 8000c04:	f001 fbe6 	bl	80023d4 <HAL_Delay>
     for (int i = 0; i < 7; i++)                       // 10 ciclos de 10 ms = 100 ms de corrección
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	607b      	str	r3, [r7, #4]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2b06      	cmp	r3, #6
 8000c12:	ddec      	ble.n	8000bee <correccion_izquierda+0x1e>
 8000c14:	e000      	b.n	8000c18 <correccion_izquierda+0x48>
            return; // Salir si hay algo urgente
 8000c16:	bf00      	nop
    } 
}
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	200002a0 	.word	0x200002a0
 8000c24:	200004c4 	.word	0x200004c4
 8000c28:	200004c5 	.word	0x200004c5

08000c2c <correccion_derecha>:

void correccion_derecha(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 700); // Motor izq normal
 8000c32:	4b12      	ldr	r3, [pc, #72]	@ (8000c7c <correccion_derecha+0x50>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 8000c3a:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 100); // Motor der más lento
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c7c <correccion_derecha+0x50>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2264      	movs	r2, #100	@ 0x64
 8000c42:	641a      	str	r2, [r3, #64]	@ 0x40
     for (int i = 0; i < 7; i++)                       // 10 ciclos de 10 ms = 100 ms de corrección
 8000c44:	2300      	movs	r3, #0
 8000c46:	607b      	str	r3, [r7, #4]
 8000c48:	e00f      	b.n	8000c6a <correccion_derecha+0x3e>
    {
        if (flag_linea_detectada || flag_muro_detectado)
 8000c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c80 <correccion_derecha+0x54>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d10e      	bne.n	8000c72 <correccion_derecha+0x46>
 8000c54:	4b0b      	ldr	r3, [pc, #44]	@ (8000c84 <correccion_derecha+0x58>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d109      	bne.n	8000c72 <correccion_derecha+0x46>
            return; // Salir si hay algo urgente

        HAL_Delay(10);
 8000c5e:	200a      	movs	r0, #10
 8000c60:	f001 fbb8 	bl	80023d4 <HAL_Delay>
     for (int i = 0; i < 7; i++)                       // 10 ciclos de 10 ms = 100 ms de corrección
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	3301      	adds	r3, #1
 8000c68:	607b      	str	r3, [r7, #4]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2b06      	cmp	r3, #6
 8000c6e:	ddec      	ble.n	8000c4a <correccion_derecha+0x1e>
 8000c70:	e000      	b.n	8000c74 <correccion_derecha+0x48>
            return; // Salir si hay algo urgente
 8000c72:	bf00      	nop
    } 
}
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	200002a0 	.word	0x200002a0
 8000c80:	200004c4 	.word	0x200004c4
 8000c84:	200004c5 	.word	0x200004c5

08000c88 <laberinto_get_peso>:
    // La meta tiene peso 0
    laberinto[POSICION_META_FILA - 1][POSICION_META_COLUMNA - 1].peso = 0;
}

uint8_t laberinto_get_peso(uint8_t fila, uint8_t columna)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	460a      	mov	r2, r1
 8000c92:	71fb      	strb	r3, [r7, #7]
 8000c94:	4613      	mov	r3, r2
 8000c96:	71bb      	strb	r3, [r7, #6]
    if (!laberinto_posicion_valida(fila, columna))
 8000c98:	79ba      	ldrb	r2, [r7, #6]
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	4611      	mov	r1, r2
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f000 f996 	bl	8000fd0 <laberinto_posicion_valida>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	f083 0301 	eor.w	r3, r3, #1
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <laberinto_get_peso+0x2c>
    {
        return PESO_MAXIMO;
 8000cb0:	23ff      	movs	r3, #255	@ 0xff
 8000cb2:	e00f      	b.n	8000cd4 <laberinto_get_peso+0x4c>
    }

    return laberinto[fila - 1][columna - 1].peso;
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	1e59      	subs	r1, r3, #1
 8000cb8:	79bb      	ldrb	r3, [r7, #6]
 8000cba:	3b01      	subs	r3, #1
 8000cbc:	4807      	ldr	r0, [pc, #28]	@ (8000cdc <laberinto_get_peso+0x54>)
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	00d2      	lsls	r2, r2, #3
 8000cc2:	1ad2      	subs	r2, r2, r3
 8000cc4:	460b      	mov	r3, r1
 8000cc6:	00db      	lsls	r3, r3, #3
 8000cc8:	1a5b      	subs	r3, r3, r1
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	4413      	add	r3, r2
 8000cce:	4403      	add	r3, r0
 8000cd0:	3302      	adds	r3, #2
 8000cd2:	781b      	ldrb	r3, [r3, #0]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	200000dc 	.word	0x200000dc

08000ce0 <laberinto_set_muro>:

void laberinto_set_muro(uint8_t fila, uint8_t columna, brujula direccion)
{
 8000ce0:	b590      	push	{r4, r7, lr}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	71fb      	strb	r3, [r7, #7]
 8000cea:	460b      	mov	r3, r1
 8000cec:	71bb      	strb	r3, [r7, #6]
 8000cee:	4613      	mov	r3, r2
 8000cf0:	717b      	strb	r3, [r7, #5]
    if (!laberinto_posicion_valida(fila, columna))
 8000cf2:	79ba      	ldrb	r2, [r7, #6]
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	4611      	mov	r1, r2
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f000 f969 	bl	8000fd0 <laberinto_posicion_valida>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	f083 0301 	eor.w	r3, r3, #1
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d146      	bne.n	8000d98 <laberinto_set_muro+0xb8>
    {
        return;
    }

    // Marcar muro en casilla actual
    laberinto[fila - 1][columna - 1].muros[direccion] = true;
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	1e59      	subs	r1, r3, #1
 8000d0e:	79bb      	ldrb	r3, [r7, #6]
 8000d10:	3b01      	subs	r3, #1
 8000d12:	7978      	ldrb	r0, [r7, #5]
 8000d14:	4c22      	ldr	r4, [pc, #136]	@ (8000da0 <laberinto_set_muro+0xc0>)
 8000d16:	461a      	mov	r2, r3
 8000d18:	00d2      	lsls	r2, r2, #3
 8000d1a:	1ad2      	subs	r2, r2, r3
 8000d1c:	460b      	mov	r3, r1
 8000d1e:	00db      	lsls	r3, r3, #3
 8000d20:	1a5b      	subs	r3, r3, r1
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	4413      	add	r3, r2
 8000d26:	4423      	add	r3, r4
 8000d28:	4403      	add	r3, r0
 8000d2a:	3303      	adds	r3, #3
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	701a      	strb	r2, [r3, #0]

    // Marcar muro en casilla adyacente (si existe)
    posicion_t pos_adyacente = laberinto_get_posicion_adyacente(
        (posicion_t){fila, columna}, direccion);
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	723b      	strb	r3, [r7, #8]
 8000d34:	79bb      	ldrb	r3, [r7, #6]
 8000d36:	727b      	strb	r3, [r7, #9]
    posicion_t pos_adyacente = laberinto_get_posicion_adyacente(
 8000d38:	797b      	ldrb	r3, [r7, #5]
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	68b8      	ldr	r0, [r7, #8]
 8000d3e:	f000 f90d 	bl	8000f5c <laberinto_get_posicion_adyacente>
 8000d42:	4603      	mov	r3, r0
 8000d44:	81bb      	strh	r3, [r7, #12]

    if (laberinto_posicion_valida(pos_adyacente.fila, pos_adyacente.columna))
 8000d46:	7b3b      	ldrb	r3, [r7, #12]
 8000d48:	7b7a      	ldrb	r2, [r7, #13]
 8000d4a:	4611      	mov	r1, r2
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f000 f93f 	bl	8000fd0 <laberinto_posicion_valida>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d01c      	beq.n	8000d92 <laberinto_set_muro+0xb2>
    {
        // Dirección opuesta
        brujula direccion_opuesta = (direccion + 2) % 4;
 8000d58:	797b      	ldrb	r3, [r7, #5]
 8000d5a:	3302      	adds	r3, #2
 8000d5c:	425a      	negs	r2, r3
 8000d5e:	f003 0303 	and.w	r3, r3, #3
 8000d62:	f002 0203 	and.w	r2, r2, #3
 8000d66:	bf58      	it	pl
 8000d68:	4253      	negpl	r3, r2
 8000d6a:	73fb      	strb	r3, [r7, #15]
        laberinto[pos_adyacente.fila - 1][pos_adyacente.columna - 1].muros[direccion_opuesta] = true;
 8000d6c:	7b3b      	ldrb	r3, [r7, #12]
 8000d6e:	1e59      	subs	r1, r3, #1
 8000d70:	7b7b      	ldrb	r3, [r7, #13]
 8000d72:	3b01      	subs	r3, #1
 8000d74:	7bf8      	ldrb	r0, [r7, #15]
 8000d76:	4c0a      	ldr	r4, [pc, #40]	@ (8000da0 <laberinto_set_muro+0xc0>)
 8000d78:	461a      	mov	r2, r3
 8000d7a:	00d2      	lsls	r2, r2, #3
 8000d7c:	1ad2      	subs	r2, r2, r3
 8000d7e:	460b      	mov	r3, r1
 8000d80:	00db      	lsls	r3, r3, #3
 8000d82:	1a5b      	subs	r3, r3, r1
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	4413      	add	r3, r2
 8000d88:	4423      	add	r3, r4
 8000d8a:	4403      	add	r3, r0
 8000d8c:	3303      	adds	r3, #3
 8000d8e:	2201      	movs	r2, #1
 8000d90:	701a      	strb	r2, [r3, #0]
    }

    // Recalcular pesos después de agregar muro
    laberinto_recalcular_pesos();
 8000d92:	f000 f807 	bl	8000da4 <laberinto_recalcular_pesos>
 8000d96:	e000      	b.n	8000d9a <laberinto_set_muro+0xba>
        return;
 8000d98:	bf00      	nop
}
 8000d9a:	3714      	adds	r7, #20
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd90      	pop	{r4, r7, pc}
 8000da0:	200000dc 	.word	0x200000dc

08000da4 <laberinto_recalcular_pesos>:

void laberinto_recalcular_pesos(void)
{
 8000da4:	b590      	push	{r4, r7, lr}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
    bool cambio_detectado = true;
 8000daa:	2301      	movs	r3, #1
 8000dac:	73fb      	strb	r3, [r7, #15]
    uint8_t iteraciones = 0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	73bb      	strb	r3, [r7, #14]
    const uint8_t MAX_ITERACIONES = 20; // Evitar bucles infinitos Protección contra boludos
 8000db2:	2314      	movs	r3, #20
 8000db4:	727b      	strb	r3, [r7, #9]

    // Algoritmo Flood Fill iterativo
    while (cambio_detectado && iteraciones < MAX_ITERACIONES)
 8000db6:	e092      	b.n	8000ede <laberinto_recalcular_pesos+0x13a>
    {
        cambio_detectado = false;
 8000db8:	2300      	movs	r3, #0
 8000dba:	73fb      	strb	r3, [r7, #15]
        iteraciones++;
 8000dbc:	7bbb      	ldrb	r3, [r7, #14]
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	73bb      	strb	r3, [r7, #14]

        for (uint8_t fila = 1; fila <= TAMAÑO_LABERINTO; fila++) // se propaga desde (1,1) hacia afuera
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	737b      	strb	r3, [r7, #13]
 8000dc6:	e086      	b.n	8000ed6 <laberinto_recalcular_pesos+0x132>
        {
            for (uint8_t columna = 1; columna <= TAMAÑO_LABERINTO; columna++)
 8000dc8:	2301      	movs	r3, #1
 8000dca:	733b      	strb	r3, [r7, #12]
 8000dcc:	e07c      	b.n	8000ec8 <laberinto_recalcular_pesos+0x124>
            {

                // No recalcular la meta
                if (fila == POSICION_META_FILA && columna == POSICION_META_COLUMNA)
 8000dce:	7b7b      	ldrb	r3, [r7, #13]
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d102      	bne.n	8000dda <laberinto_recalcular_pesos+0x36>
 8000dd4:	7b3b      	ldrb	r3, [r7, #12]
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d072      	beq.n	8000ec0 <laberinto_recalcular_pesos+0x11c>
                {
                    continue;
                }

                uint8_t peso_minimo = PESO_MAXIMO;
 8000dda:	23ff      	movs	r3, #255	@ 0xff
 8000ddc:	72fb      	strb	r3, [r7, #11]

                // Verificar todas las direcciones adyacentes
                for (brujula dir = norte; dir <= oeste; dir++)
 8000dde:	2300      	movs	r3, #0
 8000de0:	72bb      	strb	r3, [r7, #10]
 8000de2:	e03a      	b.n	8000e5a <laberinto_recalcular_pesos+0xb6>
                {

                    // Saltar si hay muro en esta dirección
                    if (laberinto[fila - 1][columna - 1].muros[dir])
 8000de4:	7b7b      	ldrb	r3, [r7, #13]
 8000de6:	1e59      	subs	r1, r3, #1
 8000de8:	7b3b      	ldrb	r3, [r7, #12]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	7ab8      	ldrb	r0, [r7, #10]
 8000dee:	4c42      	ldr	r4, [pc, #264]	@ (8000ef8 <laberinto_recalcular_pesos+0x154>)
 8000df0:	461a      	mov	r2, r3
 8000df2:	00d2      	lsls	r2, r2, #3
 8000df4:	1ad2      	subs	r2, r2, r3
 8000df6:	460b      	mov	r3, r1
 8000df8:	00db      	lsls	r3, r3, #3
 8000dfa:	1a5b      	subs	r3, r3, r1
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	4413      	add	r3, r2
 8000e00:	4423      	add	r3, r4
 8000e02:	4403      	add	r3, r0
 8000e04:	3303      	adds	r3, #3
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d122      	bne.n	8000e52 <laberinto_recalcular_pesos+0xae>
                    {
                        continue;
                    }

                    posicion_t pos_adyacente = laberinto_get_posicion_adyacente(
                        (posicion_t){fila, columna}, dir);
 8000e0c:	7b7b      	ldrb	r3, [r7, #13]
 8000e0e:	703b      	strb	r3, [r7, #0]
 8000e10:	7b3b      	ldrb	r3, [r7, #12]
 8000e12:	707b      	strb	r3, [r7, #1]
                    posicion_t pos_adyacente = laberinto_get_posicion_adyacente(
 8000e14:	7abb      	ldrb	r3, [r7, #10]
 8000e16:	4619      	mov	r1, r3
 8000e18:	6838      	ldr	r0, [r7, #0]
 8000e1a:	f000 f89f 	bl	8000f5c <laberinto_get_posicion_adyacente>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	80bb      	strh	r3, [r7, #4]

                    if (laberinto_posicion_valida(pos_adyacente.fila, pos_adyacente.columna))
 8000e22:	793b      	ldrb	r3, [r7, #4]
 8000e24:	797a      	ldrb	r2, [r7, #5]
 8000e26:	4611      	mov	r1, r2
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f000 f8d1 	bl	8000fd0 <laberinto_posicion_valida>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d00f      	beq.n	8000e54 <laberinto_recalcular_pesos+0xb0>
                    {
                        uint8_t peso_adyacente = laberinto_get_peso(
 8000e34:	793b      	ldrb	r3, [r7, #4]
 8000e36:	797a      	ldrb	r2, [r7, #5]
 8000e38:	4611      	mov	r1, r2
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff ff24 	bl	8000c88 <laberinto_get_peso>
 8000e40:	4603      	mov	r3, r0
 8000e42:	71fb      	strb	r3, [r7, #7]
                            pos_adyacente.fila, pos_adyacente.columna);

                        if (peso_adyacente < peso_minimo)
 8000e44:	79fa      	ldrb	r2, [r7, #7]
 8000e46:	7afb      	ldrb	r3, [r7, #11]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d203      	bcs.n	8000e54 <laberinto_recalcular_pesos+0xb0>
                        {
                            peso_minimo = peso_adyacente;
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	72fb      	strb	r3, [r7, #11]
 8000e50:	e000      	b.n	8000e54 <laberinto_recalcular_pesos+0xb0>
                        continue;
 8000e52:	bf00      	nop
                for (brujula dir = norte; dir <= oeste; dir++)
 8000e54:	7abb      	ldrb	r3, [r7, #10]
 8000e56:	3301      	adds	r3, #1
 8000e58:	72bb      	strb	r3, [r7, #10]
 8000e5a:	7abb      	ldrb	r3, [r7, #10]
 8000e5c:	2b03      	cmp	r3, #3
 8000e5e:	d9c1      	bls.n	8000de4 <laberinto_recalcular_pesos+0x40>
                        }
                    }
                }

                // Nuevo peso = menor peso adyacente + 1
                uint8_t nuevo_peso = (peso_minimo == PESO_MAXIMO) ? PESO_MAXIMO : peso_minimo + 1;
 8000e60:	7afb      	ldrb	r3, [r7, #11]
 8000e62:	2bff      	cmp	r3, #255	@ 0xff
 8000e64:	d003      	beq.n	8000e6e <laberinto_recalcular_pesos+0xca>
 8000e66:	7afb      	ldrb	r3, [r7, #11]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	e000      	b.n	8000e70 <laberinto_recalcular_pesos+0xcc>
 8000e6e:	23ff      	movs	r3, #255	@ 0xff
 8000e70:	723b      	strb	r3, [r7, #8]

                // Actualizar si hay cambio
                if (nuevo_peso != laberinto[fila - 1][columna - 1].peso)
 8000e72:	7b7b      	ldrb	r3, [r7, #13]
 8000e74:	1e59      	subs	r1, r3, #1
 8000e76:	7b3b      	ldrb	r3, [r7, #12]
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	481f      	ldr	r0, [pc, #124]	@ (8000ef8 <laberinto_recalcular_pesos+0x154>)
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	00d2      	lsls	r2, r2, #3
 8000e80:	1ad2      	subs	r2, r2, r3
 8000e82:	460b      	mov	r3, r1
 8000e84:	00db      	lsls	r3, r3, #3
 8000e86:	1a5b      	subs	r3, r3, r1
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	4413      	add	r3, r2
 8000e8c:	4403      	add	r3, r0
 8000e8e:	3302      	adds	r3, #2
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	7a3a      	ldrb	r2, [r7, #8]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d014      	beq.n	8000ec2 <laberinto_recalcular_pesos+0x11e>
                {
                    laberinto[fila - 1][columna - 1].peso = nuevo_peso;
 8000e98:	7b7b      	ldrb	r3, [r7, #13]
 8000e9a:	1e59      	subs	r1, r3, #1
 8000e9c:	7b3b      	ldrb	r3, [r7, #12]
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	4815      	ldr	r0, [pc, #84]	@ (8000ef8 <laberinto_recalcular_pesos+0x154>)
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	00d2      	lsls	r2, r2, #3
 8000ea6:	1ad2      	subs	r2, r2, r3
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	00db      	lsls	r3, r3, #3
 8000eac:	1a5b      	subs	r3, r3, r1
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	4413      	add	r3, r2
 8000eb2:	4403      	add	r3, r0
 8000eb4:	3302      	adds	r3, #2
 8000eb6:	7a3a      	ldrb	r2, [r7, #8]
 8000eb8:	701a      	strb	r2, [r3, #0]
                    cambio_detectado = true;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	73fb      	strb	r3, [r7, #15]
 8000ebe:	e000      	b.n	8000ec2 <laberinto_recalcular_pesos+0x11e>
                    continue;
 8000ec0:	bf00      	nop
            for (uint8_t columna = 1; columna <= TAMAÑO_LABERINTO; columna++)
 8000ec2:	7b3b      	ldrb	r3, [r7, #12]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	733b      	strb	r3, [r7, #12]
 8000ec8:	7b3b      	ldrb	r3, [r7, #12]
 8000eca:	2b04      	cmp	r3, #4
 8000ecc:	f67f af7f 	bls.w	8000dce <laberinto_recalcular_pesos+0x2a>
        for (uint8_t fila = 1; fila <= TAMAÑO_LABERINTO; fila++) // se propaga desde (1,1) hacia afuera
 8000ed0:	7b7b      	ldrb	r3, [r7, #13]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	737b      	strb	r3, [r7, #13]
 8000ed6:	7b7b      	ldrb	r3, [r7, #13]
 8000ed8:	2b04      	cmp	r3, #4
 8000eda:	f67f af75 	bls.w	8000dc8 <laberinto_recalcular_pesos+0x24>
    while (cambio_detectado && iteraciones < MAX_ITERACIONES)
 8000ede:	7bfb      	ldrb	r3, [r7, #15]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d004      	beq.n	8000eee <laberinto_recalcular_pesos+0x14a>
 8000ee4:	7bba      	ldrb	r2, [r7, #14]
 8000ee6:	7a7b      	ldrb	r3, [r7, #9]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	f4ff af65 	bcc.w	8000db8 <laberinto_recalcular_pesos+0x14>
                }
            }
        }
    }
}
 8000eee:	bf00      	nop
 8000ef0:	3714      	adds	r7, #20
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd90      	pop	{r4, r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	200000dc 	.word	0x200000dc

08000efc <laberinto_hay_muro>:

bool laberinto_hay_muro(uint8_t fila, uint8_t columna, brujula direccion)
{
 8000efc:	b590      	push	{r4, r7, lr}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	71fb      	strb	r3, [r7, #7]
 8000f06:	460b      	mov	r3, r1
 8000f08:	71bb      	strb	r3, [r7, #6]
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	717b      	strb	r3, [r7, #5]
    if (!laberinto_posicion_valida(fila, columna))
 8000f0e:	79ba      	ldrb	r2, [r7, #6]
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	4611      	mov	r1, r2
 8000f14:	4618      	mov	r0, r3
 8000f16:	f000 f85b 	bl	8000fd0 <laberinto_posicion_valida>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	f083 0301 	eor.w	r3, r3, #1
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <laberinto_hay_muro+0x2e>
    {
        return true; // Considerar bordes como muros
 8000f26:	2301      	movs	r3, #1
 8000f28:	e011      	b.n	8000f4e <laberinto_hay_muro+0x52>
    }

    return laberinto[fila - 1][columna - 1].muros[direccion];
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	1e59      	subs	r1, r3, #1
 8000f2e:	79bb      	ldrb	r3, [r7, #6]
 8000f30:	3b01      	subs	r3, #1
 8000f32:	7978      	ldrb	r0, [r7, #5]
 8000f34:	4c08      	ldr	r4, [pc, #32]	@ (8000f58 <laberinto_hay_muro+0x5c>)
 8000f36:	461a      	mov	r2, r3
 8000f38:	00d2      	lsls	r2, r2, #3
 8000f3a:	1ad2      	subs	r2, r2, r3
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	00db      	lsls	r3, r3, #3
 8000f40:	1a5b      	subs	r3, r3, r1
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	4413      	add	r3, r2
 8000f46:	4423      	add	r3, r4
 8000f48:	4403      	add	r3, r0
 8000f4a:	3303      	adds	r3, #3
 8000f4c:	781b      	ldrb	r3, [r3, #0]
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd90      	pop	{r4, r7, pc}
 8000f56:	bf00      	nop
 8000f58:	200000dc 	.word	0x200000dc

08000f5c <laberinto_get_posicion_adyacente>:

posicion_t laberinto_get_posicion_adyacente(posicion_t pos_actual, brujula direccion)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	80b8      	strh	r0, [r7, #4]
 8000f64:	460b      	mov	r3, r1
 8000f66:	70fb      	strb	r3, [r7, #3]
    posicion_t nueva_pos = pos_actual;
 8000f68:	88bb      	ldrh	r3, [r7, #4]
 8000f6a:	813b      	strh	r3, [r7, #8]

    switch (direccion)
 8000f6c:	78fb      	ldrb	r3, [r7, #3]
 8000f6e:	2b03      	cmp	r3, #3
 8000f70:	d81e      	bhi.n	8000fb0 <laberinto_get_posicion_adyacente+0x54>
 8000f72:	a201      	add	r2, pc, #4	@ (adr r2, 8000f78 <laberinto_get_posicion_adyacente+0x1c>)
 8000f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f78:	08000f89 	.word	0x08000f89
 8000f7c:	08000f93 	.word	0x08000f93
 8000f80:	08000f9d 	.word	0x08000f9d
 8000f84:	08000fa7 	.word	0x08000fa7
    {
    case norte:
        nueva_pos.fila = pos_actual.fila - 1;
 8000f88:	793b      	ldrb	r3, [r7, #4]
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	723b      	strb	r3, [r7, #8]
        break;
 8000f90:	e00e      	b.n	8000fb0 <laberinto_get_posicion_adyacente+0x54>
    case este:
        nueva_pos.columna = pos_actual.columna + 1;
 8000f92:	797b      	ldrb	r3, [r7, #5]
 8000f94:	3301      	adds	r3, #1
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	727b      	strb	r3, [r7, #9]
        break;
 8000f9a:	e009      	b.n	8000fb0 <laberinto_get_posicion_adyacente+0x54>
    case sur:
        nueva_pos.fila = pos_actual.fila + 1;
 8000f9c:	793b      	ldrb	r3, [r7, #4]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	723b      	strb	r3, [r7, #8]
        break;
 8000fa4:	e004      	b.n	8000fb0 <laberinto_get_posicion_adyacente+0x54>
    case oeste:
        nueva_pos.columna = pos_actual.columna - 1;
 8000fa6:	797b      	ldrb	r3, [r7, #5]
 8000fa8:	3b01      	subs	r3, #1
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	727b      	strb	r3, [r7, #9]
        break;
 8000fae:	bf00      	nop
    }

    return nueva_pos;
 8000fb0:	893b      	ldrh	r3, [r7, #8]
 8000fb2:	81bb      	strh	r3, [r7, #12]
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	7b3a      	ldrb	r2, [r7, #12]
 8000fb8:	f362 0307 	bfi	r3, r2, #0, #8
 8000fbc:	7b7a      	ldrb	r2, [r7, #13]
 8000fbe:	f362 230f 	bfi	r3, r2, #8, #8
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3714      	adds	r7, #20
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop

08000fd0 <laberinto_posicion_valida>:

bool laberinto_posicion_valida(uint8_t fila, uint8_t columna)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	460a      	mov	r2, r1
 8000fda:	71fb      	strb	r3, [r7, #7]
 8000fdc:	4613      	mov	r3, r2
 8000fde:	71bb      	strb	r3, [r7, #6]
    return (fila >= 1 && fila <= TAMAÑO_LABERINTO &&
            columna >= 1 && columna <= TAMAÑO_LABERINTO);
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d00a      	beq.n	8000ffc <laberinto_posicion_valida+0x2c>
    return (fila >= 1 && fila <= TAMAÑO_LABERINTO &&
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	2b04      	cmp	r3, #4
 8000fea:	d807      	bhi.n	8000ffc <laberinto_posicion_valida+0x2c>
 8000fec:	79bb      	ldrb	r3, [r7, #6]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d004      	beq.n	8000ffc <laberinto_posicion_valida+0x2c>
            columna >= 1 && columna <= TAMAÑO_LABERINTO);
 8000ff2:	79bb      	ldrb	r3, [r7, #6]
 8000ff4:	2b04      	cmp	r3, #4
 8000ff6:	d801      	bhi.n	8000ffc <laberinto_posicion_valida+0x2c>
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e000      	b.n	8000ffe <laberinto_posicion_valida+0x2e>
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	b2db      	uxtb	r3, r3
 8001004:	4618      	mov	r0, r3
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001014:	f001 f96c 	bl	80022f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001018:	f000 f864 	bl	80010e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800101c:	f000 fa5c 	bl	80014d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001020:	f000 fa3a 	bl	8001498 <MX_DMA_Init>
  MX_I2C1_Init();
 8001024:	f000 f928 	bl	8001278 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001028:	f000 f954 	bl	80012d4 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800102c:	f00a fdba 	bl	800bba4 <MX_USB_HOST_Init>
  MX_ADC1_Init();
 8001030:	f000 f8c2 	bl	80011b8 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001034:	f000 f984 	bl	8001340 <MX_TIM3_Init>
  MX_UART5_Init();
 8001038:	f000 fa04 	bl	8001444 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  // Inicializar ADC con DMA primero
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)dma_buffer, BUFFER_TOTAL);
 800103c:	22c8      	movs	r2, #200	@ 0xc8
 800103e:	4923      	ldr	r1, [pc, #140]	@ (80010cc <main+0xbc>)
 8001040:	4823      	ldr	r0, [pc, #140]	@ (80010d0 <main+0xc0>)
 8001042:	f001 fa2f 	bl	80024a4 <HAL_ADC_Start_DMA>

  // Auto-calibración (sin motores activos)
  auto_calibracion();
 8001046:	f7ff fb5d 	bl	8000704 <auto_calibracion>
  // Inicializar el módulo de motores
  control_motor_init();
 800104a:	f7ff fc5b 	bl	8000904 <control_motor_init>
  Inicializar_UART();
 800104e:	f001 f8fb 	bl	8002248 <Inicializar_UART>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001052:	f00a fdcd 	bl	800bbf0 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    if (!terminado)
 8001056:	4b1f      	ldr	r3, [pc, #124]	@ (80010d4 <main+0xc4>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	f083 0301 	eor.w	r3, r3, #1
 800105e:	b2db      	uxtb	r3, r3
 8001060:	2b00      	cmp	r3, #0
 8001062:	d02d      	beq.n	80010c0 <main+0xb0>
    {
      // PROCESAR FLAGS CON PRIORIDAD: LÍNEA > MURO

      if (flag_linea_detectada)
 8001064:	4b1c      	ldr	r3, [pc, #112]	@ (80010d8 <main+0xc8>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	b2db      	uxtb	r3, r3
 800106a:	2b00      	cmp	r3, #0
 800106c:	d014      	beq.n	8001098 <main+0x88>
      {
        if (antirrebote())
 800106e:	f000 fcbb 	bl	80019e8 <antirrebote>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d00b      	beq.n	8001090 <main+0x80>
        {
          HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET); // Naranja
 8001078:	2201      	movs	r2, #1
 800107a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800107e:	4817      	ldr	r0, [pc, #92]	@ (80010dc <main+0xcc>)
 8001080:	f002 fcc8 	bl	8003a14 <HAL_GPIO_WritePin>
          flag_linea_detectada = false;                            // Clear flag PRIMERO
 8001084:	4b14      	ldr	r3, [pc, #80]	@ (80010d8 <main+0xc8>)
 8001086:	2200      	movs	r2, #0
 8001088:	701a      	strb	r2, [r3, #0]
          chequeolinea();
 800108a:	f000 fbad 	bl	80017e8 <chequeolinea>
 800108e:	e019      	b.n	80010c4 <main+0xb4>
        }
        else
          flag_linea_detectada = false;
 8001090:	4b11      	ldr	r3, [pc, #68]	@ (80010d8 <main+0xc8>)
 8001092:	2200      	movs	r2, #0
 8001094:	701a      	strb	r2, [r3, #0]
 8001096:	e015      	b.n	80010c4 <main+0xb4>
      }

      else if (flag_muro_detectado) // else if = prioridad a línea
 8001098:	4b11      	ldr	r3, [pc, #68]	@ (80010e0 <main+0xd0>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d00b      	beq.n	80010ba <main+0xaa>
      {
        HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_SET); // Prende LED al detectar muro
 80010a2:	2201      	movs	r2, #1
 80010a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010a8:	480c      	ldr	r0, [pc, #48]	@ (80010dc <main+0xcc>)
 80010aa:	f002 fcb3 	bl	8003a14 <HAL_GPIO_WritePin>
        flag_muro_detectado = false;                             // Clear flag PRIMERO
 80010ae:	4b0c      	ldr	r3, [pc, #48]	@ (80010e0 <main+0xd0>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	701a      	strb	r2, [r3, #0]
        chequeomuro();
 80010b4:	f000 fc0c 	bl	80018d0 <chequeomuro>
 80010b8:	e004      	b.n	80010c4 <main+0xb4>
      }

      else
      {
        // Solo ejecutar control de línea recta si NO hay interrupciones pendientes
        controlar_linea_recta();
 80010ba:	f7ff fbab 	bl	8000814 <controlar_linea_recta>
 80010be:	e001      	b.n	80010c4 <main+0xb4>
      }
    }
    else
    {
      termino();
 80010c0:	f7ff fd7a 	bl	8000bb8 <termino>
    }
    reset_posicion_pushbutton(); // ⚡ I AM SPEED button */
 80010c4:	f000 fc4a 	bl	800195c <reset_posicion_pushbutton>
    MX_USB_HOST_Process();
 80010c8:	e7c3      	b.n	8001052 <main+0x42>
 80010ca:	bf00      	nop
 80010cc:	20000334 	.word	0x20000334
 80010d0:	2000014c 	.word	0x2000014c
 80010d4:	20000331 	.word	0x20000331
 80010d8:	200004c4 	.word	0x200004c4
 80010dc:	40020c00 	.word	0x40020c00
 80010e0:	200004c5 	.word	0x200004c5

080010e4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b094      	sub	sp, #80	@ 0x50
 80010e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ea:	f107 0320 	add.w	r3, r7, #32
 80010ee:	2230      	movs	r2, #48	@ 0x30
 80010f0:	2100      	movs	r1, #0
 80010f2:	4618      	mov	r0, r3
 80010f4:	f00b f940 	bl	800c378 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f8:	f107 030c 	add.w	r3, r7, #12
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001108:	2300      	movs	r3, #0
 800110a:	60bb      	str	r3, [r7, #8]
 800110c:	4b28      	ldr	r3, [pc, #160]	@ (80011b0 <SystemClock_Config+0xcc>)
 800110e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001110:	4a27      	ldr	r2, [pc, #156]	@ (80011b0 <SystemClock_Config+0xcc>)
 8001112:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001116:	6413      	str	r3, [r2, #64]	@ 0x40
 8001118:	4b25      	ldr	r3, [pc, #148]	@ (80011b0 <SystemClock_Config+0xcc>)
 800111a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001120:	60bb      	str	r3, [r7, #8]
 8001122:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001124:	2300      	movs	r3, #0
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	4b22      	ldr	r3, [pc, #136]	@ (80011b4 <SystemClock_Config+0xd0>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a21      	ldr	r2, [pc, #132]	@ (80011b4 <SystemClock_Config+0xd0>)
 800112e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001132:	6013      	str	r3, [r2, #0]
 8001134:	4b1f      	ldr	r3, [pc, #124]	@ (80011b4 <SystemClock_Config+0xd0>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800113c:	607b      	str	r3, [r7, #4]
 800113e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001140:	2301      	movs	r3, #1
 8001142:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001144:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001148:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800114a:	2302      	movs	r3, #2
 800114c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800114e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001152:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001154:	2308      	movs	r3, #8
 8001156:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001158:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800115c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800115e:	2302      	movs	r3, #2
 8001160:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001162:	2307      	movs	r3, #7
 8001164:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001166:	f107 0320 	add.w	r3, r7, #32
 800116a:	4618      	mov	r0, r3
 800116c:	f004 fefc 	bl	8005f68 <HAL_RCC_OscConfig>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001176:	f000 fca5 	bl	8001ac4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800117a:	230f      	movs	r3, #15
 800117c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800117e:	2302      	movs	r3, #2
 8001180:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001182:	2300      	movs	r3, #0
 8001184:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001186:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800118a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800118c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001190:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001192:	f107 030c 	add.w	r3, r7, #12
 8001196:	2105      	movs	r1, #5
 8001198:	4618      	mov	r0, r3
 800119a:	f005 f95d 	bl	8006458 <HAL_RCC_ClockConfig>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80011a4:	f000 fc8e 	bl	8001ac4 <Error_Handler>
  }
}
 80011a8:	bf00      	nop
 80011aa:	3750      	adds	r7, #80	@ 0x50
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40023800 	.word	0x40023800
 80011b4:	40007000 	.word	0x40007000

080011b8 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011be:	463b      	mov	r3, r7
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
   */
  hadc1.Instance = ADC1;
 80011ca:	4b28      	ldr	r3, [pc, #160]	@ (800126c <MX_ADC1_Init+0xb4>)
 80011cc:	4a28      	ldr	r2, [pc, #160]	@ (8001270 <MX_ADC1_Init+0xb8>)
 80011ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80011d0:	4b26      	ldr	r3, [pc, #152]	@ (800126c <MX_ADC1_Init+0xb4>)
 80011d2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80011d6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011d8:	4b24      	ldr	r3, [pc, #144]	@ (800126c <MX_ADC1_Init+0xb4>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80011de:	4b23      	ldr	r3, [pc, #140]	@ (800126c <MX_ADC1_Init+0xb4>)
 80011e0:	2201      	movs	r2, #1
 80011e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011e4:	4b21      	ldr	r3, [pc, #132]	@ (800126c <MX_ADC1_Init+0xb4>)
 80011e6:	2201      	movs	r2, #1
 80011e8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011ea:	4b20      	ldr	r3, [pc, #128]	@ (800126c <MX_ADC1_Init+0xb4>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011f2:	4b1e      	ldr	r3, [pc, #120]	@ (800126c <MX_ADC1_Init+0xb4>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011f8:	4b1c      	ldr	r3, [pc, #112]	@ (800126c <MX_ADC1_Init+0xb4>)
 80011fa:	4a1e      	ldr	r2, [pc, #120]	@ (8001274 <MX_ADC1_Init+0xbc>)
 80011fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011fe:	4b1b      	ldr	r3, [pc, #108]	@ (800126c <MX_ADC1_Init+0xb4>)
 8001200:	2200      	movs	r2, #0
 8001202:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001204:	4b19      	ldr	r3, [pc, #100]	@ (800126c <MX_ADC1_Init+0xb4>)
 8001206:	2202      	movs	r2, #2
 8001208:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800120a:	4b18      	ldr	r3, [pc, #96]	@ (800126c <MX_ADC1_Init+0xb4>)
 800120c:	2201      	movs	r2, #1
 800120e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001212:	4b16      	ldr	r3, [pc, #88]	@ (800126c <MX_ADC1_Init+0xb4>)
 8001214:	2200      	movs	r2, #0
 8001216:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001218:	4814      	ldr	r0, [pc, #80]	@ (800126c <MX_ADC1_Init+0xb4>)
 800121a:	f001 f8ff 	bl	800241c <HAL_ADC_Init>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001224:	f000 fc4e 	bl	8001ac4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_8;
 8001228:	2308      	movs	r3, #8
 800122a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800122c:	2301      	movs	r3, #1
 800122e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8001230:	2305      	movs	r3, #5
 8001232:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001234:	463b      	mov	r3, r7
 8001236:	4619      	mov	r1, r3
 8001238:	480c      	ldr	r0, [pc, #48]	@ (800126c <MX_ADC1_Init+0xb4>)
 800123a:	f001 fa51 	bl	80026e0 <HAL_ADC_ConfigChannel>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001244:	f000 fc3e 	bl	8001ac4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_9;
 8001248:	2309      	movs	r3, #9
 800124a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800124c:	2302      	movs	r3, #2
 800124e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001250:	463b      	mov	r3, r7
 8001252:	4619      	mov	r1, r3
 8001254:	4805      	ldr	r0, [pc, #20]	@ (800126c <MX_ADC1_Init+0xb4>)
 8001256:	f001 fa43 	bl	80026e0 <HAL_ADC_ConfigChannel>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001260:	f000 fc30 	bl	8001ac4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 8001264:	bf00      	nop
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	2000014c 	.word	0x2000014c
 8001270:	40012000 	.word	0x40012000
 8001274:	0f000001 	.word	0x0f000001

08001278 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800127c:	4b12      	ldr	r3, [pc, #72]	@ (80012c8 <MX_I2C1_Init+0x50>)
 800127e:	4a13      	ldr	r2, [pc, #76]	@ (80012cc <MX_I2C1_Init+0x54>)
 8001280:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001282:	4b11      	ldr	r3, [pc, #68]	@ (80012c8 <MX_I2C1_Init+0x50>)
 8001284:	4a12      	ldr	r2, [pc, #72]	@ (80012d0 <MX_I2C1_Init+0x58>)
 8001286:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001288:	4b0f      	ldr	r3, [pc, #60]	@ (80012c8 <MX_I2C1_Init+0x50>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800128e:	4b0e      	ldr	r3, [pc, #56]	@ (80012c8 <MX_I2C1_Init+0x50>)
 8001290:	2200      	movs	r2, #0
 8001292:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001294:	4b0c      	ldr	r3, [pc, #48]	@ (80012c8 <MX_I2C1_Init+0x50>)
 8001296:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800129a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800129c:	4b0a      	ldr	r3, [pc, #40]	@ (80012c8 <MX_I2C1_Init+0x50>)
 800129e:	2200      	movs	r2, #0
 80012a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012a2:	4b09      	ldr	r3, [pc, #36]	@ (80012c8 <MX_I2C1_Init+0x50>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012a8:	4b07      	ldr	r3, [pc, #28]	@ (80012c8 <MX_I2C1_Init+0x50>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012ae:	4b06      	ldr	r3, [pc, #24]	@ (80012c8 <MX_I2C1_Init+0x50>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012b4:	4804      	ldr	r0, [pc, #16]	@ (80012c8 <MX_I2C1_Init+0x50>)
 80012b6:	f004 fd13 	bl	8005ce0 <HAL_I2C_Init>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012c0:	f000 fc00 	bl	8001ac4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 80012c4:	bf00      	nop
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	200001f4 	.word	0x200001f4
 80012cc:	40005400 	.word	0x40005400
 80012d0:	000186a0 	.word	0x000186a0

080012d4 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012d8:	4b17      	ldr	r3, [pc, #92]	@ (8001338 <MX_SPI1_Init+0x64>)
 80012da:	4a18      	ldr	r2, [pc, #96]	@ (800133c <MX_SPI1_Init+0x68>)
 80012dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012de:	4b16      	ldr	r3, [pc, #88]	@ (8001338 <MX_SPI1_Init+0x64>)
 80012e0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80012e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012e6:	4b14      	ldr	r3, [pc, #80]	@ (8001338 <MX_SPI1_Init+0x64>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012ec:	4b12      	ldr	r3, [pc, #72]	@ (8001338 <MX_SPI1_Init+0x64>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012f2:	4b11      	ldr	r3, [pc, #68]	@ (8001338 <MX_SPI1_Init+0x64>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001338 <MX_SPI1_Init+0x64>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001338 <MX_SPI1_Init+0x64>)
 8001300:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001304:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001306:	4b0c      	ldr	r3, [pc, #48]	@ (8001338 <MX_SPI1_Init+0x64>)
 8001308:	2200      	movs	r2, #0
 800130a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800130c:	4b0a      	ldr	r3, [pc, #40]	@ (8001338 <MX_SPI1_Init+0x64>)
 800130e:	2200      	movs	r2, #0
 8001310:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001312:	4b09      	ldr	r3, [pc, #36]	@ (8001338 <MX_SPI1_Init+0x64>)
 8001314:	2200      	movs	r2, #0
 8001316:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001318:	4b07      	ldr	r3, [pc, #28]	@ (8001338 <MX_SPI1_Init+0x64>)
 800131a:	2200      	movs	r2, #0
 800131c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800131e:	4b06      	ldr	r3, [pc, #24]	@ (8001338 <MX_SPI1_Init+0x64>)
 8001320:	220a      	movs	r2, #10
 8001322:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001324:	4804      	ldr	r0, [pc, #16]	@ (8001338 <MX_SPI1_Init+0x64>)
 8001326:	f005 fab7 	bl	8006898 <HAL_SPI_Init>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001330:	f000 fbc8 	bl	8001ac4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */
}
 8001334:	bf00      	nop
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20000248 	.word	0x20000248
 800133c:	40013000 	.word	0x40013000

08001340 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08e      	sub	sp, #56	@ 0x38
 8001344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001346:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001354:	f107 0320 	add.w	r3, r7, #32
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800135e:	1d3b      	adds	r3, r7, #4
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
 800136c:	615a      	str	r2, [r3, #20]
 800136e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001370:	4b32      	ldr	r3, [pc, #200]	@ (800143c <MX_TIM3_Init+0xfc>)
 8001372:	4a33      	ldr	r2, [pc, #204]	@ (8001440 <MX_TIM3_Init+0x100>)
 8001374:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8001376:	4b31      	ldr	r3, [pc, #196]	@ (800143c <MX_TIM3_Init+0xfc>)
 8001378:	2253      	movs	r2, #83	@ 0x53
 800137a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800137c:	4b2f      	ldr	r3, [pc, #188]	@ (800143c <MX_TIM3_Init+0xfc>)
 800137e:	2200      	movs	r2, #0
 8001380:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001382:	4b2e      	ldr	r3, [pc, #184]	@ (800143c <MX_TIM3_Init+0xfc>)
 8001384:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001388:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800138a:	4b2c      	ldr	r3, [pc, #176]	@ (800143c <MX_TIM3_Init+0xfc>)
 800138c:	2200      	movs	r2, #0
 800138e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001390:	4b2a      	ldr	r3, [pc, #168]	@ (800143c <MX_TIM3_Init+0xfc>)
 8001392:	2200      	movs	r2, #0
 8001394:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001396:	4829      	ldr	r0, [pc, #164]	@ (800143c <MX_TIM3_Init+0xfc>)
 8001398:	f005 fb07 	bl	80069aa <HAL_TIM_Base_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80013a2:	f000 fb8f 	bl	8001ac4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013ac:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013b0:	4619      	mov	r1, r3
 80013b2:	4822      	ldr	r0, [pc, #136]	@ (800143c <MX_TIM3_Init+0xfc>)
 80013b4:	f005 fd2c 	bl	8006e10 <HAL_TIM_ConfigClockSource>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80013be:	f000 fb81 	bl	8001ac4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80013c2:	481e      	ldr	r0, [pc, #120]	@ (800143c <MX_TIM3_Init+0xfc>)
 80013c4:	f005 fb40 	bl	8006a48 <HAL_TIM_PWM_Init>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80013ce:	f000 fb79 	bl	8001ac4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013d2:	2300      	movs	r3, #0
 80013d4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013d6:	2300      	movs	r3, #0
 80013d8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013da:	f107 0320 	add.w	r3, r7, #32
 80013de:	4619      	mov	r1, r3
 80013e0:	4816      	ldr	r0, [pc, #88]	@ (800143c <MX_TIM3_Init+0xfc>)
 80013e2:	f006 f8f3 	bl	80075cc <HAL_TIMEx_MasterConfigSynchronization>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80013ec:	f000 fb6a 	bl	8001ac4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013f0:	2360      	movs	r3, #96	@ 0x60
 80013f2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013f4:	2300      	movs	r3, #0
 80013f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013f8:	2300      	movs	r3, #0
 80013fa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	2208      	movs	r2, #8
 8001404:	4619      	mov	r1, r3
 8001406:	480d      	ldr	r0, [pc, #52]	@ (800143c <MX_TIM3_Init+0xfc>)
 8001408:	f005 fc40 	bl	8006c8c <HAL_TIM_PWM_ConfigChannel>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001412:	f000 fb57 	bl	8001ac4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001416:	1d3b      	adds	r3, r7, #4
 8001418:	220c      	movs	r2, #12
 800141a:	4619      	mov	r1, r3
 800141c:	4807      	ldr	r0, [pc, #28]	@ (800143c <MX_TIM3_Init+0xfc>)
 800141e:	f005 fc35 	bl	8006c8c <HAL_TIM_PWM_ConfigChannel>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001428:	f000 fb4c 	bl	8001ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800142c:	4803      	ldr	r0, [pc, #12]	@ (800143c <MX_TIM3_Init+0xfc>)
 800142e:	f000 fda1 	bl	8001f74 <HAL_TIM_MspPostInit>
}
 8001432:	bf00      	nop
 8001434:	3738      	adds	r7, #56	@ 0x38
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	200002a0 	.word	0x200002a0
 8001440:	40000400 	.word	0x40000400

08001444 <MX_UART5_Init>:
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001448:	4b11      	ldr	r3, [pc, #68]	@ (8001490 <MX_UART5_Init+0x4c>)
 800144a:	4a12      	ldr	r2, [pc, #72]	@ (8001494 <MX_UART5_Init+0x50>)
 800144c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800144e:	4b10      	ldr	r3, [pc, #64]	@ (8001490 <MX_UART5_Init+0x4c>)
 8001450:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001454:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001456:	4b0e      	ldr	r3, [pc, #56]	@ (8001490 <MX_UART5_Init+0x4c>)
 8001458:	2200      	movs	r2, #0
 800145a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800145c:	4b0c      	ldr	r3, [pc, #48]	@ (8001490 <MX_UART5_Init+0x4c>)
 800145e:	2200      	movs	r2, #0
 8001460:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001462:	4b0b      	ldr	r3, [pc, #44]	@ (8001490 <MX_UART5_Init+0x4c>)
 8001464:	2200      	movs	r2, #0
 8001466:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001468:	4b09      	ldr	r3, [pc, #36]	@ (8001490 <MX_UART5_Init+0x4c>)
 800146a:	220c      	movs	r2, #12
 800146c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800146e:	4b08      	ldr	r3, [pc, #32]	@ (8001490 <MX_UART5_Init+0x4c>)
 8001470:	2200      	movs	r2, #0
 8001472:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001474:	4b06      	ldr	r3, [pc, #24]	@ (8001490 <MX_UART5_Init+0x4c>)
 8001476:	2200      	movs	r2, #0
 8001478:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800147a:	4805      	ldr	r0, [pc, #20]	@ (8001490 <MX_UART5_Init+0x4c>)
 800147c:	f006 f922 	bl	80076c4 <HAL_UART_Init>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001486:	f000 fb1d 	bl	8001ac4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */
}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	200002e8 	.word	0x200002e8
 8001494:	40005000 	.word	0x40005000

08001498 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	607b      	str	r3, [r7, #4]
 80014a2:	4b0c      	ldr	r3, [pc, #48]	@ (80014d4 <MX_DMA_Init+0x3c>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a6:	4a0b      	ldr	r2, [pc, #44]	@ (80014d4 <MX_DMA_Init+0x3c>)
 80014a8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80014ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ae:	4b09      	ldr	r3, [pc, #36]	@ (80014d4 <MX_DMA_Init+0x3c>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014b6:	607b      	str	r3, [r7, #4]
 80014b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80014ba:	2200      	movs	r2, #0
 80014bc:	2100      	movs	r1, #0
 80014be:	2038      	movs	r0, #56	@ 0x38
 80014c0:	f001 fcad 	bl	8002e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80014c4:	2038      	movs	r0, #56	@ 0x38
 80014c6:	f001 fcc6 	bl	8002e56 <HAL_NVIC_EnableIRQ>
}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40023800 	.word	0x40023800

080014d8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08c      	sub	sp, #48	@ 0x30
 80014dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014de:	f107 031c 	add.w	r3, r7, #28
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	605a      	str	r2, [r3, #4]
 80014e8:	609a      	str	r2, [r3, #8]
 80014ea:	60da      	str	r2, [r3, #12]
 80014ec:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	61bb      	str	r3, [r7, #24]
 80014f2:	4b9b      	ldr	r3, [pc, #620]	@ (8001760 <MX_GPIO_Init+0x288>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f6:	4a9a      	ldr	r2, [pc, #616]	@ (8001760 <MX_GPIO_Init+0x288>)
 80014f8:	f043 0310 	orr.w	r3, r3, #16
 80014fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014fe:	4b98      	ldr	r3, [pc, #608]	@ (8001760 <MX_GPIO_Init+0x288>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001502:	f003 0310 	and.w	r3, r3, #16
 8001506:	61bb      	str	r3, [r7, #24]
 8001508:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	617b      	str	r3, [r7, #20]
 800150e:	4b94      	ldr	r3, [pc, #592]	@ (8001760 <MX_GPIO_Init+0x288>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001512:	4a93      	ldr	r2, [pc, #588]	@ (8001760 <MX_GPIO_Init+0x288>)
 8001514:	f043 0304 	orr.w	r3, r3, #4
 8001518:	6313      	str	r3, [r2, #48]	@ 0x30
 800151a:	4b91      	ldr	r3, [pc, #580]	@ (8001760 <MX_GPIO_Init+0x288>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151e:	f003 0304 	and.w	r3, r3, #4
 8001522:	617b      	str	r3, [r7, #20]
 8001524:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	613b      	str	r3, [r7, #16]
 800152a:	4b8d      	ldr	r3, [pc, #564]	@ (8001760 <MX_GPIO_Init+0x288>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152e:	4a8c      	ldr	r2, [pc, #560]	@ (8001760 <MX_GPIO_Init+0x288>)
 8001530:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001534:	6313      	str	r3, [r2, #48]	@ 0x30
 8001536:	4b8a      	ldr	r3, [pc, #552]	@ (8001760 <MX_GPIO_Init+0x288>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800153e:	613b      	str	r3, [r7, #16]
 8001540:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	4b86      	ldr	r3, [pc, #536]	@ (8001760 <MX_GPIO_Init+0x288>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154a:	4a85      	ldr	r2, [pc, #532]	@ (8001760 <MX_GPIO_Init+0x288>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	6313      	str	r3, [r2, #48]	@ 0x30
 8001552:	4b83      	ldr	r3, [pc, #524]	@ (8001760 <MX_GPIO_Init+0x288>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	60bb      	str	r3, [r7, #8]
 8001562:	4b7f      	ldr	r3, [pc, #508]	@ (8001760 <MX_GPIO_Init+0x288>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001566:	4a7e      	ldr	r2, [pc, #504]	@ (8001760 <MX_GPIO_Init+0x288>)
 8001568:	f043 0302 	orr.w	r3, r3, #2
 800156c:	6313      	str	r3, [r2, #48]	@ 0x30
 800156e:	4b7c      	ldr	r3, [pc, #496]	@ (8001760 <MX_GPIO_Init+0x288>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	60bb      	str	r3, [r7, #8]
 8001578:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	607b      	str	r3, [r7, #4]
 800157e:	4b78      	ldr	r3, [pc, #480]	@ (8001760 <MX_GPIO_Init+0x288>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001582:	4a77      	ldr	r2, [pc, #476]	@ (8001760 <MX_GPIO_Init+0x288>)
 8001584:	f043 0308 	orr.w	r3, r3, #8
 8001588:	6313      	str	r3, [r2, #48]	@ 0x30
 800158a:	4b75      	ldr	r3, [pc, #468]	@ (8001760 <MX_GPIO_Init+0x288>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158e:	f003 0308 	and.w	r3, r3, #8
 8001592:	607b      	str	r3, [r7, #4]
 8001594:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001596:	2200      	movs	r2, #0
 8001598:	2108      	movs	r1, #8
 800159a:	4872      	ldr	r0, [pc, #456]	@ (8001764 <MX_GPIO_Init+0x28c>)
 800159c:	f002 fa3a 	bl	8003a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80015a0:	2201      	movs	r2, #1
 80015a2:	2101      	movs	r1, #1
 80015a4:	4870      	ldr	r0, [pc, #448]	@ (8001768 <MX_GPIO_Init+0x290>)
 80015a6:	f002 fa35 	bl	8003a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MI0_Pin | MI1_Pin | MD0_Pin | MD1_Pin, GPIO_PIN_RESET);
 80015aa:	2200      	movs	r2, #0
 80015ac:	f44f 41f0 	mov.w	r1, #30720	@ 0x7800
 80015b0:	486e      	ldr	r0, [pc, #440]	@ (800176c <MX_GPIO_Init+0x294>)
 80015b2:	f002 fa2f 	bl	8003a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin, GPIO_PIN_RESET);
 80015b6:	2200      	movs	r2, #0
 80015b8:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80015bc:	486c      	ldr	r0, [pc, #432]	@ (8001770 <MX_GPIO_Init+0x298>)
 80015be:	f002 fa29 	bl	8003a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80015c2:	2308      	movs	r3, #8
 80015c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c6:	2301      	movs	r3, #1
 80015c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ce:	2300      	movs	r3, #0
 80015d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80015d2:	f107 031c 	add.w	r3, r7, #28
 80015d6:	4619      	mov	r1, r3
 80015d8:	4862      	ldr	r0, [pc, #392]	@ (8001764 <MX_GPIO_Init+0x28c>)
 80015da:	f002 f867 	bl	80036ac <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80015de:	2301      	movs	r3, #1
 80015e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e2:	2301      	movs	r3, #1
 80015e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ea:	2300      	movs	r3, #0
 80015ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80015ee:	f107 031c 	add.w	r3, r7, #28
 80015f2:	4619      	mov	r1, r3
 80015f4:	485c      	ldr	r0, [pc, #368]	@ (8001768 <MX_GPIO_Init+0x290>)
 80015f6:	f002 f859 	bl	80036ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80015fa:	2308      	movs	r3, #8
 80015fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fe:	2302      	movs	r3, #2
 8001600:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001606:	2300      	movs	r3, #0
 8001608:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800160a:	2305      	movs	r3, #5
 800160c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800160e:	f107 031c 	add.w	r3, r7, #28
 8001612:	4619      	mov	r1, r3
 8001614:	4854      	ldr	r0, [pc, #336]	@ (8001768 <MX_GPIO_Init+0x290>)
 8001616:	f002 f849 	bl	80036ac <HAL_GPIO_Init>

  /*Configure GPIO pin : i_am_speed_Pin */
  GPIO_InitStruct.Pin = i_am_speed_Pin;
 800161a:	2301      	movs	r3, #1
 800161c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800161e:	2300      	movs	r3, #0
 8001620:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(i_am_speed_GPIO_Port, &GPIO_InitStruct);
 8001626:	f107 031c 	add.w	r3, r7, #28
 800162a:	4619      	mov	r1, r3
 800162c:	4851      	ldr	r0, [pc, #324]	@ (8001774 <MX_GPIO_Init+0x29c>)
 800162e:	f002 f83d 	bl	80036ac <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001632:	2310      	movs	r3, #16
 8001634:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001636:	2302      	movs	r3, #2
 8001638:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163e:	2300      	movs	r3, #0
 8001640:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001642:	2306      	movs	r3, #6
 8001644:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001646:	f107 031c 	add.w	r3, r7, #28
 800164a:	4619      	mov	r1, r3
 800164c:	4849      	ldr	r0, [pc, #292]	@ (8001774 <MX_GPIO_Init+0x29c>)
 800164e:	f002 f82d 	bl	80036ac <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001652:	2304      	movs	r3, #4
 8001654:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001656:	2300      	movs	r3, #0
 8001658:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800165e:	f107 031c 	add.w	r3, r7, #28
 8001662:	4619      	mov	r1, r3
 8001664:	4841      	ldr	r0, [pc, #260]	@ (800176c <MX_GPIO_Init+0x294>)
 8001666:	f002 f821 	bl	80036ac <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800166a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800166e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001670:	2302      	movs	r3, #2
 8001672:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001678:	2300      	movs	r3, #0
 800167a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800167c:	2305      	movs	r3, #5
 800167e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001680:	f107 031c 	add.w	r3, r7, #28
 8001684:	4619      	mov	r1, r3
 8001686:	4839      	ldr	r0, [pc, #228]	@ (800176c <MX_GPIO_Init+0x294>)
 8001688:	f002 f810 	bl	80036ac <HAL_GPIO_Init>

  /*Configure GPIO pins : MI0_Pin MI1_Pin MD0_Pin MD1_Pin */
  GPIO_InitStruct.Pin = MI0_Pin | MI1_Pin | MD0_Pin | MD1_Pin;
 800168c:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 8001690:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001692:	2301      	movs	r3, #1
 8001694:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	2300      	movs	r3, #0
 8001698:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169a:	2300      	movs	r3, #0
 800169c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800169e:	f107 031c 	add.w	r3, r7, #28
 80016a2:	4619      	mov	r1, r3
 80016a4:	4831      	ldr	r0, [pc, #196]	@ (800176c <MX_GPIO_Init+0x294>)
 80016a6:	f002 f801 	bl	80036ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin;
 80016aa:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80016ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b0:	2301      	movs	r3, #1
 80016b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b8:	2300      	movs	r3, #0
 80016ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016bc:	f107 031c 	add.w	r3, r7, #28
 80016c0:	4619      	mov	r1, r3
 80016c2:	482b      	ldr	r0, [pc, #172]	@ (8001770 <MX_GPIO_Init+0x298>)
 80016c4:	f001 fff2 	bl	80036ac <HAL_GPIO_Init>

  /*Configure GPIO pins : WallSensor_Pin LineSensor_Pin */
  GPIO_InitStruct.Pin = WallSensor_Pin | LineSensor_Pin;
 80016c8:	23c0      	movs	r3, #192	@ 0xc0
 80016ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016cc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80016d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016d6:	f107 031c 	add.w	r3, r7, #28
 80016da:	4619      	mov	r1, r3
 80016dc:	4822      	ldr	r0, [pc, #136]	@ (8001768 <MX_GPIO_Init+0x290>)
 80016de:	f001 ffe5 	bl	80036ac <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_SCK_Pin */
  GPIO_InitStruct.Pin = I2S3_SCK_Pin;
 80016e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e8:	2302      	movs	r3, #2
 80016ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f0:	2300      	movs	r3, #0
 80016f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80016f4:	2306      	movs	r3, #6
 80016f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_SCK_GPIO_Port, &GPIO_InitStruct);
 80016f8:	f107 031c 	add.w	r3, r7, #28
 80016fc:	4619      	mov	r1, r3
 80016fe:	481a      	ldr	r0, [pc, #104]	@ (8001768 <MX_GPIO_Init+0x290>)
 8001700:	f001 ffd4 	bl	80036ac <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001704:	2320      	movs	r3, #32
 8001706:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001708:	2300      	movs	r3, #0
 800170a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001710:	f107 031c 	add.w	r3, r7, #28
 8001714:	4619      	mov	r1, r3
 8001716:	4816      	ldr	r0, [pc, #88]	@ (8001770 <MX_GPIO_Init+0x298>)
 8001718:	f001 ffc8 	bl	80036ac <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800171c:	2302      	movs	r3, #2
 800171e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001720:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001724:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800172a:	f107 031c 	add.w	r3, r7, #28
 800172e:	4619      	mov	r1, r3
 8001730:	480c      	ldr	r0, [pc, #48]	@ (8001764 <MX_GPIO_Init+0x28c>)
 8001732:	f001 ffbb 	bl	80036ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001736:	2200      	movs	r2, #0
 8001738:	2100      	movs	r1, #0
 800173a:	2017      	movs	r0, #23
 800173c:	f001 fb6f 	bl	8002e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001740:	2017      	movs	r0, #23
 8001742:	f001 fb88 	bl	8002e56 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0); // Prioridad alta para ambos sensores
 8001746:	2200      	movs	r2, #0
 8001748:	2101      	movs	r1, #1
 800174a:	2017      	movs	r0, #23
 800174c:	f001 fb67 	bl	8002e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001750:	2017      	movs	r0, #23
 8001752:	f001 fb80 	bl	8002e56 <HAL_NVIC_EnableIRQ>

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001756:	bf00      	nop
 8001758:	3730      	adds	r7, #48	@ 0x30
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40023800 	.word	0x40023800
 8001764:	40021000 	.word	0x40021000
 8001768:	40020800 	.word	0x40020800
 800176c:	40020400 	.word	0x40020400
 8001770:	40020c00 	.word	0x40020c00
 8001774:	40020000 	.word	0x40020000

08001778 <actualizar_posicion>:

/* USER CODE BEGIN 4 */
// FUNCION QUE ACTUALIZA LA POSICION CADA VEZ QUE SE CRUZA UNA LINEA
void actualizar_posicion(uint8_t *fila, uint8_t *columna, brujula sentido)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	4613      	mov	r3, r2
 8001784:	71fb      	strb	r3, [r7, #7]
  switch (sentido)
 8001786:	79fb      	ldrb	r3, [r7, #7]
 8001788:	2b03      	cmp	r3, #3
 800178a:	d827      	bhi.n	80017dc <actualizar_posicion+0x64>
 800178c:	a201      	add	r2, pc, #4	@ (adr r2, 8001794 <actualizar_posicion+0x1c>)
 800178e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001792:	bf00      	nop
 8001794:	080017a5 	.word	0x080017a5
 8001798:	080017b3 	.word	0x080017b3
 800179c:	080017c1 	.word	0x080017c1
 80017a0:	080017cf 	.word	0x080017cf
  {
  case norte:
    (*fila)--;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	3b01      	subs	r3, #1
 80017aa:	b2da      	uxtb	r2, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	701a      	strb	r2, [r3, #0]
    break;
 80017b0:	e014      	b.n	80017dc <actualizar_posicion+0x64>
  case este:
    (*columna)++;
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	3301      	adds	r3, #1
 80017b8:	b2da      	uxtb	r2, r3
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	701a      	strb	r2, [r3, #0]
    break;
 80017be:	e00d      	b.n	80017dc <actualizar_posicion+0x64>
  case sur:
    (*fila)++;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	3301      	adds	r3, #1
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	701a      	strb	r2, [r3, #0]
    break;
 80017cc:	e006      	b.n	80017dc <actualizar_posicion+0x64>
  case oeste:
    (*columna)--;
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	3b01      	subs	r3, #1
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	701a      	strb	r2, [r3, #0]
    break;
 80017da:	bf00      	nop
  }
}
 80017dc:	bf00      	nop
 80017de:	3714      	adds	r7, #20
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <chequeolinea>:

// FUNCION CHEQUEO LINEA
void chequeolinea(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 80017ee:	2017      	movs	r0, #23
 80017f0:	f001 fb3f 	bl	8002e72 <HAL_NVIC_DisableIRQ>
  HAL_Delay(TIEMPO_AVANCE_LINEA); // por si es sprint o no
 80017f4:	4b2c      	ldr	r3, [pc, #176]	@ (80018a8 <chequeolinea+0xc0>)
 80017f6:	881b      	ldrh	r3, [r3, #0]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f000 fdeb 	bl	80023d4 <HAL_Delay>

  // Actualizar posición
  actualizar_posicion(&fila_actual, &columna_actual, sentido_actual);
 80017fe:	4b2b      	ldr	r3, [pc, #172]	@ (80018ac <chequeolinea+0xc4>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	461a      	mov	r2, r3
 8001804:	492a      	ldr	r1, [pc, #168]	@ (80018b0 <chequeolinea+0xc8>)
 8001806:	482b      	ldr	r0, [pc, #172]	@ (80018b4 <chequeolinea+0xcc>)
 8001808:	f7ff ffb6 	bl	8001778 <actualizar_posicion>

  sprintf(mensaje, "%d,%d", fila_actual, columna_actual);
 800180c:	4b29      	ldr	r3, [pc, #164]	@ (80018b4 <chequeolinea+0xcc>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	461a      	mov	r2, r3
 8001812:	4b27      	ldr	r3, [pc, #156]	@ (80018b0 <chequeolinea+0xc8>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	4928      	ldr	r1, [pc, #160]	@ (80018b8 <chequeolinea+0xd0>)
 8001818:	4828      	ldr	r0, [pc, #160]	@ (80018bc <chequeolinea+0xd4>)
 800181a:	f00a fd8b 	bl	800c334 <siprintf>
  Transmision();
 800181e:	f000 fcf3 	bl	8002208 <Transmision>

  // terminó?
  if (fila_actual == 1 && columna_actual == 1)
 8001822:	4b24      	ldr	r3, [pc, #144]	@ (80018b4 <chequeolinea+0xcc>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d114      	bne.n	8001854 <chequeolinea+0x6c>
 800182a:	4b21      	ldr	r3, [pc, #132]	@ (80018b0 <chequeolinea+0xc8>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d110      	bne.n	8001854 <chequeolinea+0x6c>
  {
    termino();
 8001832:	f7ff f9c1 	bl	8000bb8 <termino>
    terminado = true;
 8001836:	4b22      	ldr	r3, [pc, #136]	@ (80018c0 <chequeolinea+0xd8>)
 8001838:	2201      	movs	r2, #1
 800183a:	701a      	strb	r2, [r3, #0]
    strcpy(mensaje, "Finalizado");
 800183c:	4a1f      	ldr	r2, [pc, #124]	@ (80018bc <chequeolinea+0xd4>)
 800183e:	4b21      	ldr	r3, [pc, #132]	@ (80018c4 <chequeolinea+0xdc>)
 8001840:	cb03      	ldmia	r3!, {r0, r1}
 8001842:	6010      	str	r0, [r2, #0]
 8001844:	6051      	str	r1, [r2, #4]
 8001846:	8819      	ldrh	r1, [r3, #0]
 8001848:	789b      	ldrb	r3, [r3, #2]
 800184a:	8111      	strh	r1, [r2, #8]
 800184c:	7293      	strb	r3, [r2, #10]
    Transmision();
 800184e:	f000 fcdb 	bl	8002208 <Transmision>
    return;
 8001852:	e025      	b.n	80018a0 <chequeolinea+0xb8>
  }

  // Calcular y ejecutar
  brujula sentido_deseado = calcular_mejor_direccion(fila_actual, columna_actual); // funcion definida en navegacion.h
 8001854:	4b17      	ldr	r3, [pc, #92]	@ (80018b4 <chequeolinea+0xcc>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	4a15      	ldr	r2, [pc, #84]	@ (80018b0 <chequeolinea+0xc8>)
 800185a:	7812      	ldrb	r2, [r2, #0]
 800185c:	4611      	mov	r1, r2
 800185e:	4618      	mov	r0, r3
 8001860:	f000 f936 	bl	8001ad0 <calcular_mejor_direccion>
 8001864:	4603      	mov	r3, r0
 8001866:	71fb      	strb	r3, [r7, #7]
  sentido_actual = ejecutar_movimiento(sentido_actual, sentido_deseado);           // funcion definida en navegacion.h
 8001868:	4b10      	ldr	r3, [pc, #64]	@ (80018ac <chequeolinea+0xc4>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	79fa      	ldrb	r2, [r7, #7]
 800186e:	4611      	mov	r1, r2
 8001870:	4618      	mov	r0, r3
 8001872:	f000 f9ef 	bl	8001c54 <ejecutar_movimiento>
 8001876:	4603      	mov	r3, r0
 8001878:	461a      	mov	r2, r3
 800187a:	4b0c      	ldr	r3, [pc, #48]	@ (80018ac <chequeolinea+0xc4>)
 800187c:	701a      	strb	r2, [r3, #0]
  avanza();
 800187e:	f7ff f8d9 	bl	8000a34 <avanza>
  __HAL_GPIO_EXTI_CLEAR_IT(LineSensor_Pin);
 8001882:	4b11      	ldr	r3, [pc, #68]	@ (80018c8 <chequeolinea+0xe0>)
 8001884:	2280      	movs	r2, #128	@ 0x80
 8001886:	615a      	str	r2, [r3, #20]
  __HAL_GPIO_EXTI_CLEAR_IT(WallSensor_Pin);
 8001888:	4b0f      	ldr	r3, [pc, #60]	@ (80018c8 <chequeolinea+0xe0>)
 800188a:	2240      	movs	r2, #64	@ 0x40
 800188c:	615a      	str	r2, [r3, #20]
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800188e:	2017      	movs	r0, #23
 8001890:	f001 fae1 	bl	8002e56 <HAL_NVIC_EnableIRQ>
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8001894:	2200      	movs	r2, #0
 8001896:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800189a:	480c      	ldr	r0, [pc, #48]	@ (80018cc <chequeolinea+0xe4>)
 800189c:	f002 f8ba 	bl	8003a14 <HAL_GPIO_WritePin>
}
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000016 	.word	0x20000016
 80018ac:	20000330 	.word	0x20000330
 80018b0:	20000015 	.word	0x20000015
 80018b4:	20000014 	.word	0x20000014
 80018b8:	0800cb30 	.word	0x0800cb30
 80018bc:	200004cc 	.word	0x200004cc
 80018c0:	20000331 	.word	0x20000331
 80018c4:	0800cb38 	.word	0x0800cb38
 80018c8:	40013c00 	.word	0x40013c00
 80018cc:	40020c00 	.word	0x40020c00

080018d0 <chequeomuro>:

// FUNCION CHEQUEO MURO
void chequeomuro(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 80018d6:	2017      	movs	r0, #23
 80018d8:	f001 facb 	bl	8002e72 <HAL_NVIC_DisableIRQ>

  // 1. Registrar el muro detectado
  laberinto_set_muro(fila_actual, columna_actual, sentido_actual);
 80018dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001948 <chequeomuro+0x78>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	4a1a      	ldr	r2, [pc, #104]	@ (800194c <chequeomuro+0x7c>)
 80018e2:	7811      	ldrb	r1, [r2, #0]
 80018e4:	4a1a      	ldr	r2, [pc, #104]	@ (8001950 <chequeomuro+0x80>)
 80018e6:	7812      	ldrb	r2, [r2, #0]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff f9f9 	bl	8000ce0 <laberinto_set_muro>

  // 2. Recalcular todos los pesos con el nuevo muro
  laberinto_recalcular_pesos();
 80018ee:	f7ff fa59 	bl	8000da4 <laberinto_recalcular_pesos>

  // 3. Calcular nueva mejor dirección
  brujula sentido_deseado = calcular_mejor_direccion(fila_actual, columna_actual);
 80018f2:	4b15      	ldr	r3, [pc, #84]	@ (8001948 <chequeomuro+0x78>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	4a15      	ldr	r2, [pc, #84]	@ (800194c <chequeomuro+0x7c>)
 80018f8:	7812      	ldrb	r2, [r2, #0]
 80018fa:	4611      	mov	r1, r2
 80018fc:	4618      	mov	r0, r3
 80018fe:	f000 f8e7 	bl	8001ad0 <calcular_mejor_direccion>
 8001902:	4603      	mov	r3, r0
 8001904:	71fb      	strb	r3, [r7, #7]

  // 4. Ejecutar movimiento LO QUE HIZO EL COLO YA ACTUALIZA EL SENTIDO ACTUAL SOLO
  sentido_actual = ejecutar_movimiento(sentido_actual, sentido_deseado);
 8001906:	4b12      	ldr	r3, [pc, #72]	@ (8001950 <chequeomuro+0x80>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	79fa      	ldrb	r2, [r7, #7]
 800190c:	4611      	mov	r1, r2
 800190e:	4618      	mov	r0, r3
 8001910:	f000 f9a0 	bl	8001c54 <ejecutar_movimiento>
 8001914:	4603      	mov	r3, r0
 8001916:	461a      	mov	r2, r3
 8001918:	4b0d      	ldr	r3, [pc, #52]	@ (8001950 <chequeomuro+0x80>)
 800191a:	701a      	strb	r2, [r3, #0]
  avanza();
 800191c:	f7ff f88a 	bl	8000a34 <avanza>
  __HAL_GPIO_EXTI_CLEAR_IT(LineSensor_Pin);
 8001920:	4b0c      	ldr	r3, [pc, #48]	@ (8001954 <chequeomuro+0x84>)
 8001922:	2280      	movs	r2, #128	@ 0x80
 8001924:	615a      	str	r2, [r3, #20]
  __HAL_GPIO_EXTI_CLEAR_IT(WallSensor_Pin);
 8001926:	4b0b      	ldr	r3, [pc, #44]	@ (8001954 <chequeomuro+0x84>)
 8001928:	2240      	movs	r2, #64	@ 0x40
 800192a:	615a      	str	r2, [r3, #20]
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800192c:	2017      	movs	r0, #23
 800192e:	f001 fa92 	bl	8002e56 <HAL_NVIC_EnableIRQ>
  HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 8001932:	2200      	movs	r2, #0
 8001934:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001938:	4807      	ldr	r0, [pc, #28]	@ (8001958 <chequeomuro+0x88>)
 800193a:	f002 f86b 	bl	8003a14 <HAL_GPIO_WritePin>
}
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20000014 	.word	0x20000014
 800194c:	20000015 	.word	0x20000015
 8001950:	20000330 	.word	0x20000330
 8001954:	40013c00 	.word	0x40013c00
 8001958:	40020c00 	.word	0x40020c00

0800195c <reset_posicion_pushbutton>:

// VELOCIDAD
void reset_posicion_pushbutton(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  if (antirebote(i_am_speed_GPIO_Port, i_am_speed_Pin))
 8001960:	2101      	movs	r1, #1
 8001962:	4817      	ldr	r0, [pc, #92]	@ (80019c0 <reset_posicion_pushbutton+0x64>)
 8001964:	f7fe fe22 	bl	80005ac <antirebote>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d025      	beq.n	80019ba <reset_posicion_pushbutton+0x5e>
  {
    HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800196e:	2017      	movs	r0, #23
 8001970:	f001 fa7f 	bl	8002e72 <HAL_NVIC_DisableIRQ>

    // Resetear posición
    fila_actual = 4;
 8001974:	4b13      	ldr	r3, [pc, #76]	@ (80019c4 <reset_posicion_pushbutton+0x68>)
 8001976:	2204      	movs	r2, #4
 8001978:	701a      	strb	r2, [r3, #0]
    columna_actual = 4;
 800197a:	4b13      	ldr	r3, [pc, #76]	@ (80019c8 <reset_posicion_pushbutton+0x6c>)
 800197c:	2204      	movs	r2, #4
 800197e:	701a      	strb	r2, [r3, #0]
    sentido_actual = norte;
 8001980:	4b12      	ldr	r3, [pc, #72]	@ (80019cc <reset_posicion_pushbutton+0x70>)
 8001982:	2200      	movs	r2, #0
 8001984:	701a      	strb	r2, [r3, #0]
    terminado = false;
 8001986:	4b12      	ldr	r3, [pc, #72]	@ (80019d0 <reset_posicion_pushbutton+0x74>)
 8001988:	2200      	movs	r2, #0
 800198a:	701a      	strb	r2, [r3, #0]

    // ⚡ I AM SPEED!
    activar_modo_sprint();     // Esta función está en control_motor.c
 800198c:	f7fe ffa6 	bl	80008dc <activar_modo_sprint>
    TIEMPO_AVANCE_LINEA = 400; // Reducir tiempo de avance a 400 ms
 8001990:	4b10      	ldr	r3, [pc, #64]	@ (80019d4 <reset_posicion_pushbutton+0x78>)
 8001992:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001996:	801a      	strh	r2, [r3, #0]

    flag_linea_detectada = false;
 8001998:	4b0f      	ldr	r3, [pc, #60]	@ (80019d8 <reset_posicion_pushbutton+0x7c>)
 800199a:	2200      	movs	r2, #0
 800199c:	701a      	strb	r2, [r3, #0]
    flag_muro_detectado = false;
 800199e:	4b0f      	ldr	r3, [pc, #60]	@ (80019dc <reset_posicion_pushbutton+0x80>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	701a      	strb	r2, [r3, #0]

    // Resetear estados de sensores
    ultimo_estado_linea = true;
 80019a4:	4b0e      	ldr	r3, [pc, #56]	@ (80019e0 <reset_posicion_pushbutton+0x84>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	701a      	strb	r2, [r3, #0]
    ultimo_estado_muro = true;
 80019aa:	4b0e      	ldr	r3, [pc, #56]	@ (80019e4 <reset_posicion_pushbutton+0x88>)
 80019ac:	2201      	movs	r2, #1
 80019ae:	701a      	strb	r2, [r3, #0]

    avanza();
 80019b0:	f7ff f840 	bl	8000a34 <avanza>
    // Reactivar interrupciones
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80019b4:	2017      	movs	r0, #23
 80019b6:	f001 fa4e 	bl	8002e56 <HAL_NVIC_EnableIRQ>
  }
}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40020000 	.word	0x40020000
 80019c4:	20000014 	.word	0x20000014
 80019c8:	20000015 	.word	0x20000015
 80019cc:	20000330 	.word	0x20000330
 80019d0:	20000331 	.word	0x20000331
 80019d4:	20000016 	.word	0x20000016
 80019d8:	200004c4 	.word	0x200004c4
 80019dc:	200004c5 	.word	0x200004c5
 80019e0:	20000018 	.word	0x20000018
 80019e4:	20000019 	.word	0x20000019

080019e8 <antirrebote>:

bool antirrebote(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
  int es_linea = 0;
 80019ee:	2300      	movs	r3, #0
 80019f0:	607b      	str	r3, [r7, #4]

  HAL_Delay(5); // 5ms de delay
 80019f2:	2005      	movs	r0, #5
 80019f4:	f000 fcee 	bl	80023d4 <HAL_Delay>
  if (HAL_GPIO_ReadPin(LineSensor_GPIO_Port, LineSensor_Pin) == GPIO_PIN_SET)
 80019f8:	2180      	movs	r1, #128	@ 0x80
 80019fa:	4823      	ldr	r0, [pc, #140]	@ (8001a88 <antirrebote+0xa0>)
 80019fc:	f001 fff2 	bl	80039e4 <HAL_GPIO_ReadPin>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d101      	bne.n	8001a0a <antirrebote+0x22>
    return false;
 8001a06:	2300      	movs	r3, #0
 8001a08:	e03a      	b.n	8001a80 <antirrebote+0x98>
  HAL_Delay(5); // 5ms de delay
 8001a0a:	2005      	movs	r0, #5
 8001a0c:	f000 fce2 	bl	80023d4 <HAL_Delay>
  if (HAL_GPIO_ReadPin(LineSensor_GPIO_Port, LineSensor_Pin) == GPIO_PIN_SET)
 8001a10:	2180      	movs	r1, #128	@ 0x80
 8001a12:	481d      	ldr	r0, [pc, #116]	@ (8001a88 <antirrebote+0xa0>)
 8001a14:	f001 ffe6 	bl	80039e4 <HAL_GPIO_ReadPin>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d101      	bne.n	8001a22 <antirrebote+0x3a>
    return false;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	e02e      	b.n	8001a80 <antirrebote+0x98>
  HAL_Delay(5); // 5ms de delay
 8001a22:	2005      	movs	r0, #5
 8001a24:	f000 fcd6 	bl	80023d4 <HAL_Delay>
  if (HAL_GPIO_ReadPin(LineSensor_GPIO_Port, LineSensor_Pin) == GPIO_PIN_SET)
 8001a28:	2180      	movs	r1, #128	@ 0x80
 8001a2a:	4817      	ldr	r0, [pc, #92]	@ (8001a88 <antirrebote+0xa0>)
 8001a2c:	f001 ffda 	bl	80039e4 <HAL_GPIO_ReadPin>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d101      	bne.n	8001a3a <antirrebote+0x52>
    return false;
 8001a36:	2300      	movs	r3, #0
 8001a38:	e022      	b.n	8001a80 <antirrebote+0x98>
  es_linea = 1;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	607b      	str	r3, [r7, #4]

  while (es_linea == 1)
 8001a3e:	e01b      	b.n	8001a78 <antirrebote+0x90>
  {
    while (HAL_GPIO_ReadPin(LineSensor_GPIO_Port, LineSensor_Pin) == GPIO_PIN_RESET)
      avanza();
 8001a40:	f7fe fff8 	bl	8000a34 <avanza>
    while (HAL_GPIO_ReadPin(LineSensor_GPIO_Port, LineSensor_Pin) == GPIO_PIN_RESET)
 8001a44:	2180      	movs	r1, #128	@ 0x80
 8001a46:	4810      	ldr	r0, [pc, #64]	@ (8001a88 <antirrebote+0xa0>)
 8001a48:	f001 ffcc 	bl	80039e4 <HAL_GPIO_ReadPin>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d0f6      	beq.n	8001a40 <antirrebote+0x58>
    if (HAL_GPIO_ReadPin(LineSensor_GPIO_Port, LineSensor_Pin) == GPIO_PIN_SET)
 8001a52:	2180      	movs	r1, #128	@ 0x80
 8001a54:	480c      	ldr	r0, [pc, #48]	@ (8001a88 <antirrebote+0xa0>)
 8001a56:	f001 ffc5 	bl	80039e4 <HAL_GPIO_ReadPin>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d102      	bne.n	8001a66 <antirrebote+0x7e>
      HAL_Delay(5); // 5ms de delay
 8001a60:	2005      	movs	r0, #5
 8001a62:	f000 fcb7 	bl	80023d4 <HAL_Delay>
    if (HAL_GPIO_ReadPin(LineSensor_GPIO_Port, LineSensor_Pin) == GPIO_PIN_SET)
 8001a66:	2180      	movs	r1, #128	@ 0x80
 8001a68:	4807      	ldr	r0, [pc, #28]	@ (8001a88 <antirrebote+0xa0>)
 8001a6a:	f001 ffbb 	bl	80039e4 <HAL_GPIO_ReadPin>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d101      	bne.n	8001a78 <antirrebote+0x90>
      return true;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e003      	b.n	8001a80 <antirrebote+0x98>
  while (es_linea == 1)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d0e2      	beq.n	8001a44 <antirrebote+0x5c>
  }
  return false; // no deberia pasar nunca, en caso de falla
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40020800 	.word	0x40020800

08001a8c <HAL_GPIO_EXTI_Callback>:

// ATENCION A LA INTERRUPCION
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == LineSensor_Pin)
 8001a96:	88fb      	ldrh	r3, [r7, #6]
 8001a98:	2b80      	cmp	r3, #128	@ 0x80
 8001a9a:	d103      	bne.n	8001aa4 <HAL_GPIO_EXTI_Callback+0x18>
  {
    flag_linea_detectada = true;
 8001a9c:	4b07      	ldr	r3, [pc, #28]	@ (8001abc <HAL_GPIO_EXTI_Callback+0x30>)
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	701a      	strb	r2, [r3, #0]
    }

    // Actualizar último estado
    ultimo_estado_muro = estado_actual;*/
  }
}
 8001aa2:	e005      	b.n	8001ab0 <HAL_GPIO_EXTI_Callback+0x24>
  else if (GPIO_Pin == WallSensor_Pin)
 8001aa4:	88fb      	ldrh	r3, [r7, #6]
 8001aa6:	2b40      	cmp	r3, #64	@ 0x40
 8001aa8:	d102      	bne.n	8001ab0 <HAL_GPIO_EXTI_Callback+0x24>
    flag_muro_detectado = true;
 8001aaa:	4b05      	ldr	r3, [pc, #20]	@ (8001ac0 <HAL_GPIO_EXTI_Callback+0x34>)
 8001aac:	2201      	movs	r2, #1
 8001aae:	701a      	strb	r2, [r3, #0]
}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	200004c4 	.word	0x200004c4
 8001ac0:	200004c5 	.word	0x200004c5

08001ac4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ac8:	b672      	cpsid	i
}
 8001aca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001acc:	bf00      	nop
 8001ace:	e7fd      	b.n	8001acc <Error_Handler+0x8>

08001ad0 <calcular_mejor_direccion>:
 */

#include "navegacion.h"

brujula calcular_mejor_direccion(uint8_t fila_actual, uint8_t columna_actual) // nos devuelve direccion en TIPO BRUJULA gracias colo
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b08c      	sub	sp, #48	@ 0x30
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	460a      	mov	r2, r1
 8001ada:	71fb      	strb	r3, [r7, #7]
 8001adc:	4613      	mov	r3, r2
 8001ade:	71bb      	strb	r3, [r7, #6]
    uint8_t peso_minimo = PESO_MAXIMO;
 8001ae0:	23ff      	movs	r3, #255	@ 0xff
 8001ae2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    brujula mejor_direccion = norte; // Dirección por defecto
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    bool direccion_valida_encontrada = false;
 8001aec:	2300      	movs	r3, #0
 8001aee:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

    // Para dar preferencia a oeste y norte que llevan hacia la meta (1,1)
    // Primero oeste, luego norte, luego sur, luego este
    static const brujula orden_eval[] = {oeste, norte, sur, este};

    for (int i = 0; i < 4; i++)
 8001af2:	2300      	movs	r3, #0
 8001af4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001af6:	e04f      	b.n	8001b98 <calcular_mejor_direccion+0xc8>
    {
        brujula direccion = orden_eval[i];
 8001af8:	4a55      	ldr	r2, [pc, #340]	@ (8001c50 <calcular_mejor_direccion+0x180>)
 8001afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001afc:	4413      	add	r3, r2
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

        // 1. ¿Hay muro en esta dirección?
        if (laberinto_hay_muro(fila_actual, columna_actual, direccion))
 8001b04:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8001b08:	79b9      	ldrb	r1, [r7, #6]
 8001b0a:	79fb      	ldrb	r3, [r7, #7]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff f9f5 	bl	8000efc <laberinto_hay_muro>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d139      	bne.n	8001b8c <calcular_mejor_direccion+0xbc>
            continue; // Saltar si hay muro
        }

        // 2. Obtener posición adyacente
        posicion_t pos_adyacente = laberinto_get_posicion_adyacente(
            (posicion_t){fila_actual, columna_actual}, direccion);
 8001b18:	79fb      	ldrb	r3, [r7, #7]
 8001b1a:	763b      	strb	r3, [r7, #24]
 8001b1c:	79bb      	ldrb	r3, [r7, #6]
 8001b1e:	767b      	strb	r3, [r7, #25]
        posicion_t pos_adyacente = laberinto_get_posicion_adyacente(
 8001b20:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001b24:	4619      	mov	r1, r3
 8001b26:	69b8      	ldr	r0, [r7, #24]
 8001b28:	f7ff fa18 	bl	8000f5c <laberinto_get_posicion_adyacente>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	83bb      	strh	r3, [r7, #28]

        // 3. ¿Es válida? (no salirse del laberinto)
        if (!laberinto_posicion_valida(pos_adyacente.fila, pos_adyacente.columna))
 8001b30:	7f3b      	ldrb	r3, [r7, #28]
 8001b32:	7f7a      	ldrb	r2, [r7, #29]
 8001b34:	4611      	mov	r1, r2
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff fa4a 	bl	8000fd0 <laberinto_posicion_valida>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	f083 0301 	eor.w	r3, r3, #1
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d123      	bne.n	8001b90 <calcular_mejor_direccion+0xc0>
        {
            continue; // Saltar si está fuera del laberinto
        }

        // 4. Obtener peso de la casilla adyacente
        uint8_t peso_adyacente = laberinto_get_peso(pos_adyacente.fila, pos_adyacente.columna);
 8001b48:	7f3b      	ldrb	r3, [r7, #28]
 8001b4a:	7f7a      	ldrb	r2, [r7, #29]
 8001b4c:	4611      	mov	r1, r2
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff f89a 	bl	8000c88 <laberinto_get_peso>
 8001b54:	4603      	mov	r3, r0
 8001b56:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

        // 5. ¿Es el mejor peso hasta ahora? O primera dirección válida encontrada
        if (!direccion_valida_encontrada || peso_adyacente < peso_minimo)
 8001b5a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001b5e:	f083 0301 	eor.w	r3, r3, #1
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d105      	bne.n	8001b74 <calcular_mejor_direccion+0xa4>
 8001b68:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8001b6c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d20e      	bcs.n	8001b92 <calcular_mejor_direccion+0xc2>
        {
            peso_minimo = peso_adyacente;
 8001b74:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001b78:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            mejor_direccion = direccion;
 8001b7c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001b80:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            direccion_valida_encontrada = true;
 8001b84:	2301      	movs	r3, #1
 8001b86:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8001b8a:	e002      	b.n	8001b92 <calcular_mejor_direccion+0xc2>
            continue; // Saltar si hay muro
 8001b8c:	bf00      	nop
 8001b8e:	e000      	b.n	8001b92 <calcular_mejor_direccion+0xc2>
            continue; // Saltar si está fuera del laberinto
 8001b90:	bf00      	nop
    for (int i = 0; i < 4; i++)
 8001b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b94:	3301      	adds	r3, #1
 8001b96:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b9a:	2b03      	cmp	r3, #3
 8001b9c:	ddac      	ble.n	8001af8 <calcular_mejor_direccion+0x28>
        }
    }

    // Verificación final de seguridad: asegurarnos que la dirección elegida es válida
    if (direccion_valida_encontrada)
 8001b9e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d04d      	beq.n	8001c42 <calcular_mejor_direccion+0x172>
    {
        posicion_t pos_siguiente = laberinto_get_posicion_adyacente(
            (posicion_t){fila_actual, columna_actual}, mejor_direccion);
 8001ba6:	79fb      	ldrb	r3, [r7, #7]
 8001ba8:	743b      	strb	r3, [r7, #16]
 8001baa:	79bb      	ldrb	r3, [r7, #6]
 8001bac:	747b      	strb	r3, [r7, #17]
        posicion_t pos_siguiente = laberinto_get_posicion_adyacente(
 8001bae:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	6938      	ldr	r0, [r7, #16]
 8001bb6:	f7ff f9d1 	bl	8000f5c <laberinto_get_posicion_adyacente>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	82bb      	strh	r3, [r7, #20]

        // Doble verificación para asegurarnos que no nos salimos del laberinto
        if (!laberinto_posicion_valida(pos_siguiente.fila, pos_siguiente.columna))
 8001bbe:	7d3b      	ldrb	r3, [r7, #20]
 8001bc0:	7d7a      	ldrb	r2, [r7, #21]
 8001bc2:	4611      	mov	r1, r2
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff fa03 	bl	8000fd0 <laberinto_posicion_valida>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	f083 0301 	eor.w	r3, r3, #1
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d035      	beq.n	8001c42 <calcular_mejor_direccion+0x172>
        {
            // Algo salió mal, buscar cualquier dirección válida
            for (int i = 0; i < 4; i++)
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bda:	e02f      	b.n	8001c3c <calcular_mejor_direccion+0x16c>
            {
                brujula dir_alternativa = orden_eval[i];
 8001bdc:	4a1c      	ldr	r2, [pc, #112]	@ (8001c50 <calcular_mejor_direccion+0x180>)
 8001bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be0:	4413      	add	r3, r2
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                pos_siguiente = laberinto_get_posicion_adyacente(
                    (posicion_t){fila_actual, columna_actual}, dir_alternativa);
 8001be8:	79fb      	ldrb	r3, [r7, #7]
 8001bea:	733b      	strb	r3, [r7, #12]
 8001bec:	79bb      	ldrb	r3, [r7, #6]
 8001bee:	737b      	strb	r3, [r7, #13]
                pos_siguiente = laberinto_get_posicion_adyacente(
 8001bf0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	68f8      	ldr	r0, [r7, #12]
 8001bf8:	f7ff f9b0 	bl	8000f5c <laberinto_get_posicion_adyacente>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	82bb      	strh	r3, [r7, #20]

                if (laberinto_posicion_valida(pos_siguiente.fila, pos_siguiente.columna) &&
 8001c00:	7d3b      	ldrb	r3, [r7, #20]
 8001c02:	7d7a      	ldrb	r2, [r7, #21]
 8001c04:	4611      	mov	r1, r2
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff f9e2 	bl	8000fd0 <laberinto_posicion_valida>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d011      	beq.n	8001c36 <calcular_mejor_direccion+0x166>
                    !laberinto_hay_muro(fila_actual, columna_actual, dir_alternativa))
 8001c12:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001c16:	79b9      	ldrb	r1, [r7, #6]
 8001c18:	79fb      	ldrb	r3, [r7, #7]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff f96e 	bl	8000efc <laberinto_hay_muro>
 8001c20:	4603      	mov	r3, r0
 8001c22:	f083 0301 	eor.w	r3, r3, #1
 8001c26:	b2db      	uxtb	r3, r3
                if (laberinto_posicion_valida(pos_siguiente.fila, pos_siguiente.columna) &&
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d004      	beq.n	8001c36 <calcular_mejor_direccion+0x166>
                {
                    mejor_direccion = dir_alternativa;
 8001c2c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001c30:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8001c34:	e005      	b.n	8001c42 <calcular_mejor_direccion+0x172>
            for (int i = 0; i < 4; i++)
 8001c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c38:	3301      	adds	r3, #1
 8001c3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c3e:	2b03      	cmp	r3, #3
 8001c40:	ddcc      	ble.n	8001bdc <calcular_mejor_direccion+0x10c>
                }
            }
        }
    }

    return mejor_direccion;
 8001c42:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3730      	adds	r7, #48	@ 0x30
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	0800cb5c 	.word	0x0800cb5c

08001c54 <ejecutar_movimiento>:

brujula ejecutar_movimiento(brujula sentido_actual, brujula sentido_deseado)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	460a      	mov	r2, r1
 8001c5e:	71fb      	strb	r3, [r7, #7]
 8001c60:	4613      	mov	r3, r2
 8001c62:	71bb      	strb	r3, [r7, #6]
    // ¿Ya está orientado correctamente?
    if (sentido_actual == sentido_deseado)
 8001c64:	79fa      	ldrb	r2, [r7, #7]
 8001c66:	79bb      	ldrb	r3, [r7, #6]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d101      	bne.n	8001c70 <ejecutar_movimiento+0x1c>
    {
        // avanza(); // Solo avanzar
        return sentido_actual;
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
 8001c6e:	e02b      	b.n	8001cc8 <ejecutar_movimiento+0x74>
    }

    // Calcular diferencia usando aritmética xq es un tipo brujula
    // norte=0, este=1, sur=2, oeste=3
    int diferencia = (sentido_deseado - sentido_actual + 4) % 4;
 8001c70:	79ba      	ldrb	r2, [r7, #6]
 8001c72:	79fb      	ldrb	r3, [r7, #7]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	3304      	adds	r3, #4
 8001c78:	425a      	negs	r2, r3
 8001c7a:	f003 0303 	and.w	r3, r3, #3
 8001c7e:	f002 0203 	and.w	r2, r2, #3
 8001c82:	bf58      	it	pl
 8001c84:	4253      	negpl	r3, r2
 8001c86:	60fb      	str	r3, [r7, #12]

    switch (diferencia)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2b03      	cmp	r3, #3
 8001c8c:	d015      	beq.n	8001cba <ejecutar_movimiento+0x66>
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2b03      	cmp	r3, #3
 8001c92:	dc18      	bgt.n	8001cc6 <ejecutar_movimiento+0x72>
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d003      	beq.n	8001ca2 <ejecutar_movimiento+0x4e>
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d006      	beq.n	8001cae <ejecutar_movimiento+0x5a>
 8001ca0:	e011      	b.n	8001cc6 <ejecutar_movimiento+0x72>
    {
    case 1: // Girar 90° a la derecha
        return gira90der(sentido_actual);
 8001ca2:	79fb      	ldrb	r3, [r7, #7]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7fe ff13 	bl	8000ad0 <gira90der>
 8001caa:	4603      	mov	r3, r0
 8001cac:	e00c      	b.n	8001cc8 <ejecutar_movimiento+0x74>

    case 2: // Girar 180° (media vuelta)
        return gira180(sentido_actual);
 8001cae:	79fb      	ldrb	r3, [r7, #7]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7fe ff47 	bl	8000b44 <gira180>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	e006      	b.n	8001cc8 <ejecutar_movimiento+0x74>

    case 3: // Girar 90° a la izquierda
        return gira90izq(sentido_actual);
 8001cba:	79fb      	ldrb	r3, [r7, #7]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7fe fecd 	bl	8000a5c <gira90izq>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	e000      	b.n	8001cc8 <ejecutar_movimiento+0x74>

    default: // No debería pasar (caso 0) pero pola dice que siempre se pone default
        // avanza();
        return sentido_actual;
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
    }
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3710      	adds	r7, #16
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	607b      	str	r3, [r7, #4]
 8001cda:	4b10      	ldr	r3, [pc, #64]	@ (8001d1c <HAL_MspInit+0x4c>)
 8001cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cde:	4a0f      	ldr	r2, [pc, #60]	@ (8001d1c <HAL_MspInit+0x4c>)
 8001ce0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ce4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8001d1c <HAL_MspInit+0x4c>)
 8001ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cee:	607b      	str	r3, [r7, #4]
 8001cf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	603b      	str	r3, [r7, #0]
 8001cf6:	4b09      	ldr	r3, [pc, #36]	@ (8001d1c <HAL_MspInit+0x4c>)
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfa:	4a08      	ldr	r2, [pc, #32]	@ (8001d1c <HAL_MspInit+0x4c>)
 8001cfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d00:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d02:	4b06      	ldr	r3, [pc, #24]	@ (8001d1c <HAL_MspInit+0x4c>)
 8001d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d0a:	603b      	str	r3, [r7, #0]
 8001d0c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d0e:	2007      	movs	r0, #7
 8001d10:	f001 f87a 	bl	8002e08 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d14:	bf00      	nop
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40023800 	.word	0x40023800

08001d20 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b08a      	sub	sp, #40	@ 0x28
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d28:	f107 0314 	add.w	r3, r7, #20
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	605a      	str	r2, [r3, #4]
 8001d32:	609a      	str	r2, [r3, #8]
 8001d34:	60da      	str	r2, [r3, #12]
 8001d36:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a2f      	ldr	r2, [pc, #188]	@ (8001dfc <HAL_ADC_MspInit+0xdc>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d157      	bne.n	8001df2 <HAL_ADC_MspInit+0xd2>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	613b      	str	r3, [r7, #16]
 8001d46:	4b2e      	ldr	r3, [pc, #184]	@ (8001e00 <HAL_ADC_MspInit+0xe0>)
 8001d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d4a:	4a2d      	ldr	r2, [pc, #180]	@ (8001e00 <HAL_ADC_MspInit+0xe0>)
 8001d4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d50:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d52:	4b2b      	ldr	r3, [pc, #172]	@ (8001e00 <HAL_ADC_MspInit+0xe0>)
 8001d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d5a:	613b      	str	r3, [r7, #16]
 8001d5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60fb      	str	r3, [r7, #12]
 8001d62:	4b27      	ldr	r3, [pc, #156]	@ (8001e00 <HAL_ADC_MspInit+0xe0>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d66:	4a26      	ldr	r2, [pc, #152]	@ (8001e00 <HAL_ADC_MspInit+0xe0>)
 8001d68:	f043 0302 	orr.w	r3, r3, #2
 8001d6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d6e:	4b24      	ldr	r3, [pc, #144]	@ (8001e00 <HAL_ADC_MspInit+0xe0>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = RightSensor_Pin|LeftSensor_Pin;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d82:	2300      	movs	r3, #0
 8001d84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d86:	f107 0314 	add.w	r3, r7, #20
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	481d      	ldr	r0, [pc, #116]	@ (8001e04 <HAL_ADC_MspInit+0xe4>)
 8001d8e:	f001 fc8d 	bl	80036ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001d92:	4b1d      	ldr	r3, [pc, #116]	@ (8001e08 <HAL_ADC_MspInit+0xe8>)
 8001d94:	4a1d      	ldr	r2, [pc, #116]	@ (8001e0c <HAL_ADC_MspInit+0xec>)
 8001d96:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001d98:	4b1b      	ldr	r3, [pc, #108]	@ (8001e08 <HAL_ADC_MspInit+0xe8>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d9e:	4b1a      	ldr	r3, [pc, #104]	@ (8001e08 <HAL_ADC_MspInit+0xe8>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001da4:	4b18      	ldr	r3, [pc, #96]	@ (8001e08 <HAL_ADC_MspInit+0xe8>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001daa:	4b17      	ldr	r3, [pc, #92]	@ (8001e08 <HAL_ADC_MspInit+0xe8>)
 8001dac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001db0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001db2:	4b15      	ldr	r3, [pc, #84]	@ (8001e08 <HAL_ADC_MspInit+0xe8>)
 8001db4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001db8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001dba:	4b13      	ldr	r3, [pc, #76]	@ (8001e08 <HAL_ADC_MspInit+0xe8>)
 8001dbc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001dc0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001dc2:	4b11      	ldr	r3, [pc, #68]	@ (8001e08 <HAL_ADC_MspInit+0xe8>)
 8001dc4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001dc8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001dca:	4b0f      	ldr	r3, [pc, #60]	@ (8001e08 <HAL_ADC_MspInit+0xe8>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dd0:	4b0d      	ldr	r3, [pc, #52]	@ (8001e08 <HAL_ADC_MspInit+0xe8>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001dd6:	480c      	ldr	r0, [pc, #48]	@ (8001e08 <HAL_ADC_MspInit+0xe8>)
 8001dd8:	f001 f866 	bl	8002ea8 <HAL_DMA_Init>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001de2:	f7ff fe6f 	bl	8001ac4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a07      	ldr	r2, [pc, #28]	@ (8001e08 <HAL_ADC_MspInit+0xe8>)
 8001dea:	639a      	str	r2, [r3, #56]	@ 0x38
 8001dec:	4a06      	ldr	r2, [pc, #24]	@ (8001e08 <HAL_ADC_MspInit+0xe8>)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001df2:	bf00      	nop
 8001df4:	3728      	adds	r7, #40	@ 0x28
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40012000 	.word	0x40012000
 8001e00:	40023800 	.word	0x40023800
 8001e04:	40020400 	.word	0x40020400
 8001e08:	20000194 	.word	0x20000194
 8001e0c:	40026410 	.word	0x40026410

08001e10 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b08a      	sub	sp, #40	@ 0x28
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e18:	f107 0314 	add.w	r3, r7, #20
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	605a      	str	r2, [r3, #4]
 8001e22:	609a      	str	r2, [r3, #8]
 8001e24:	60da      	str	r2, [r3, #12]
 8001e26:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a19      	ldr	r2, [pc, #100]	@ (8001e94 <HAL_I2C_MspInit+0x84>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d12c      	bne.n	8001e8c <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	613b      	str	r3, [r7, #16]
 8001e36:	4b18      	ldr	r3, [pc, #96]	@ (8001e98 <HAL_I2C_MspInit+0x88>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3a:	4a17      	ldr	r2, [pc, #92]	@ (8001e98 <HAL_I2C_MspInit+0x88>)
 8001e3c:	f043 0302 	orr.w	r3, r3, #2
 8001e40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e42:	4b15      	ldr	r3, [pc, #84]	@ (8001e98 <HAL_I2C_MspInit+0x88>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	613b      	str	r3, [r7, #16]
 8001e4c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001e4e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001e52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e54:	2312      	movs	r3, #18
 8001e56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e60:	2304      	movs	r3, #4
 8001e62:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e64:	f107 0314 	add.w	r3, r7, #20
 8001e68:	4619      	mov	r1, r3
 8001e6a:	480c      	ldr	r0, [pc, #48]	@ (8001e9c <HAL_I2C_MspInit+0x8c>)
 8001e6c:	f001 fc1e 	bl	80036ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e70:	2300      	movs	r3, #0
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	4b08      	ldr	r3, [pc, #32]	@ (8001e98 <HAL_I2C_MspInit+0x88>)
 8001e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e78:	4a07      	ldr	r2, [pc, #28]	@ (8001e98 <HAL_I2C_MspInit+0x88>)
 8001e7a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e80:	4b05      	ldr	r3, [pc, #20]	@ (8001e98 <HAL_I2C_MspInit+0x88>)
 8001e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e88:	60fb      	str	r3, [r7, #12]
 8001e8a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001e8c:	bf00      	nop
 8001e8e:	3728      	adds	r7, #40	@ 0x28
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40005400 	.word	0x40005400
 8001e98:	40023800 	.word	0x40023800
 8001e9c:	40020400 	.word	0x40020400

08001ea0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b08a      	sub	sp, #40	@ 0x28
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea8:	f107 0314 	add.w	r3, r7, #20
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	605a      	str	r2, [r3, #4]
 8001eb2:	609a      	str	r2, [r3, #8]
 8001eb4:	60da      	str	r2, [r3, #12]
 8001eb6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a19      	ldr	r2, [pc, #100]	@ (8001f24 <HAL_SPI_MspInit+0x84>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d12b      	bne.n	8001f1a <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	613b      	str	r3, [r7, #16]
 8001ec6:	4b18      	ldr	r3, [pc, #96]	@ (8001f28 <HAL_SPI_MspInit+0x88>)
 8001ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eca:	4a17      	ldr	r2, [pc, #92]	@ (8001f28 <HAL_SPI_MspInit+0x88>)
 8001ecc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ed0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ed2:	4b15      	ldr	r3, [pc, #84]	@ (8001f28 <HAL_SPI_MspInit+0x88>)
 8001ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ed6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001eda:	613b      	str	r3, [r7, #16]
 8001edc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	4b11      	ldr	r3, [pc, #68]	@ (8001f28 <HAL_SPI_MspInit+0x88>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee6:	4a10      	ldr	r2, [pc, #64]	@ (8001f28 <HAL_SPI_MspInit+0x88>)
 8001ee8:	f043 0301 	orr.w	r3, r3, #1
 8001eec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eee:	4b0e      	ldr	r3, [pc, #56]	@ (8001f28 <HAL_SPI_MspInit+0x88>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	60fb      	str	r3, [r7, #12]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001efa:	23e0      	movs	r3, #224	@ 0xe0
 8001efc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efe:	2302      	movs	r3, #2
 8001f00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f02:	2300      	movs	r3, #0
 8001f04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f06:	2300      	movs	r3, #0
 8001f08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f0a:	2305      	movs	r3, #5
 8001f0c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f0e:	f107 0314 	add.w	r3, r7, #20
 8001f12:	4619      	mov	r1, r3
 8001f14:	4805      	ldr	r0, [pc, #20]	@ (8001f2c <HAL_SPI_MspInit+0x8c>)
 8001f16:	f001 fbc9 	bl	80036ac <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001f1a:	bf00      	nop
 8001f1c:	3728      	adds	r7, #40	@ 0x28
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40013000 	.word	0x40013000
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	40020000 	.word	0x40020000

08001f30 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a0b      	ldr	r2, [pc, #44]	@ (8001f6c <HAL_TIM_Base_MspInit+0x3c>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d10d      	bne.n	8001f5e <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	60fb      	str	r3, [r7, #12]
 8001f46:	4b0a      	ldr	r3, [pc, #40]	@ (8001f70 <HAL_TIM_Base_MspInit+0x40>)
 8001f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4a:	4a09      	ldr	r2, [pc, #36]	@ (8001f70 <HAL_TIM_Base_MspInit+0x40>)
 8001f4c:	f043 0302 	orr.w	r3, r3, #2
 8001f50:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f52:	4b07      	ldr	r3, [pc, #28]	@ (8001f70 <HAL_TIM_Base_MspInit+0x40>)
 8001f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001f5e:	bf00      	nop
 8001f60:	3714      	adds	r7, #20
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	40000400 	.word	0x40000400
 8001f70:	40023800 	.word	0x40023800

08001f74 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b088      	sub	sp, #32
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7c:	f107 030c 	add.w	r3, r7, #12
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	609a      	str	r2, [r3, #8]
 8001f88:	60da      	str	r2, [r3, #12]
 8001f8a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a12      	ldr	r2, [pc, #72]	@ (8001fdc <HAL_TIM_MspPostInit+0x68>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d11e      	bne.n	8001fd4 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	60bb      	str	r3, [r7, #8]
 8001f9a:	4b11      	ldr	r3, [pc, #68]	@ (8001fe0 <HAL_TIM_MspPostInit+0x6c>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9e:	4a10      	ldr	r2, [pc, #64]	@ (8001fe0 <HAL_TIM_MspPostInit+0x6c>)
 8001fa0:	f043 0304 	orr.w	r3, r3, #4
 8001fa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe0 <HAL_TIM_MspPostInit+0x6c>)
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001faa:	f003 0304 	and.w	r3, r3, #4
 8001fae:	60bb      	str	r3, [r7, #8]
 8001fb0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = Vel_I_Pin|Vel_D_Pin;
 8001fb2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001fb6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb8:	2302      	movs	r3, #2
 8001fba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fc8:	f107 030c 	add.w	r3, r7, #12
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4805      	ldr	r0, [pc, #20]	@ (8001fe4 <HAL_TIM_MspPostInit+0x70>)
 8001fd0:	f001 fb6c 	bl	80036ac <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001fd4:	bf00      	nop
 8001fd6:	3720      	adds	r7, #32
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40000400 	.word	0x40000400
 8001fe0:	40023800 	.word	0x40023800
 8001fe4:	40020800 	.word	0x40020800

08001fe8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b08a      	sub	sp, #40	@ 0x28
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff0:	f107 0314 	add.w	r3, r7, #20
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	605a      	str	r2, [r3, #4]
 8001ffa:	609a      	str	r2, [r3, #8]
 8001ffc:	60da      	str	r2, [r3, #12]
 8001ffe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a2c      	ldr	r2, [pc, #176]	@ (80020b8 <HAL_UART_MspInit+0xd0>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d152      	bne.n	80020b0 <HAL_UART_MspInit+0xc8>
  {
    /* USER CODE BEGIN UART5_MspInit 0 */

    /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	613b      	str	r3, [r7, #16]
 800200e:	4b2b      	ldr	r3, [pc, #172]	@ (80020bc <HAL_UART_MspInit+0xd4>)
 8002010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002012:	4a2a      	ldr	r2, [pc, #168]	@ (80020bc <HAL_UART_MspInit+0xd4>)
 8002014:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002018:	6413      	str	r3, [r2, #64]	@ 0x40
 800201a:	4b28      	ldr	r3, [pc, #160]	@ (80020bc <HAL_UART_MspInit+0xd4>)
 800201c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002022:	613b      	str	r3, [r7, #16]
 8002024:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002026:	2300      	movs	r3, #0
 8002028:	60fb      	str	r3, [r7, #12]
 800202a:	4b24      	ldr	r3, [pc, #144]	@ (80020bc <HAL_UART_MspInit+0xd4>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800202e:	4a23      	ldr	r2, [pc, #140]	@ (80020bc <HAL_UART_MspInit+0xd4>)
 8002030:	f043 0304 	orr.w	r3, r3, #4
 8002034:	6313      	str	r3, [r2, #48]	@ 0x30
 8002036:	4b21      	ldr	r3, [pc, #132]	@ (80020bc <HAL_UART_MspInit+0xd4>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203a:	f003 0304 	and.w	r3, r3, #4
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002042:	2300      	movs	r3, #0
 8002044:	60bb      	str	r3, [r7, #8]
 8002046:	4b1d      	ldr	r3, [pc, #116]	@ (80020bc <HAL_UART_MspInit+0xd4>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800204a:	4a1c      	ldr	r2, [pc, #112]	@ (80020bc <HAL_UART_MspInit+0xd4>)
 800204c:	f043 0308 	orr.w	r3, r3, #8
 8002050:	6313      	str	r3, [r2, #48]	@ 0x30
 8002052:	4b1a      	ldr	r3, [pc, #104]	@ (80020bc <HAL_UART_MspInit+0xd4>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002056:	f003 0308 	and.w	r3, r3, #8
 800205a:	60bb      	str	r3, [r7, #8]
 800205c:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800205e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002062:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002064:	2302      	movs	r3, #2
 8002066:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002068:	2300      	movs	r3, #0
 800206a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800206c:	2303      	movs	r3, #3
 800206e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002070:	2308      	movs	r3, #8
 8002072:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002074:	f107 0314 	add.w	r3, r7, #20
 8002078:	4619      	mov	r1, r3
 800207a:	4811      	ldr	r0, [pc, #68]	@ (80020c0 <HAL_UART_MspInit+0xd8>)
 800207c:	f001 fb16 	bl	80036ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002080:	2304      	movs	r3, #4
 8002082:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002084:	2302      	movs	r3, #2
 8002086:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002088:	2300      	movs	r3, #0
 800208a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800208c:	2303      	movs	r3, #3
 800208e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002090:	2308      	movs	r3, #8
 8002092:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002094:	f107 0314 	add.w	r3, r7, #20
 8002098:	4619      	mov	r1, r3
 800209a:	480a      	ldr	r0, [pc, #40]	@ (80020c4 <HAL_UART_MspInit+0xdc>)
 800209c:	f001 fb06 	bl	80036ac <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80020a0:	2200      	movs	r2, #0
 80020a2:	2100      	movs	r1, #0
 80020a4:	2035      	movs	r0, #53	@ 0x35
 80020a6:	f000 feba 	bl	8002e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80020aa:	2035      	movs	r0, #53	@ 0x35
 80020ac:	f000 fed3 	bl	8002e56 <HAL_NVIC_EnableIRQ>

    /* USER CODE END UART5_MspInit 1 */

  }

}
 80020b0:	bf00      	nop
 80020b2:	3728      	adds	r7, #40	@ 0x28
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40005000 	.word	0x40005000
 80020bc:	40023800 	.word	0x40023800
 80020c0:	40020800 	.word	0x40020800
 80020c4:	40020c00 	.word	0x40020c00

080020c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020cc:	bf00      	nop
 80020ce:	e7fd      	b.n	80020cc <NMI_Handler+0x4>

080020d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020d4:	bf00      	nop
 80020d6:	e7fd      	b.n	80020d4 <HardFault_Handler+0x4>

080020d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020dc:	bf00      	nop
 80020de:	e7fd      	b.n	80020dc <MemManage_Handler+0x4>

080020e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020e4:	bf00      	nop
 80020e6:	e7fd      	b.n	80020e4 <BusFault_Handler+0x4>

080020e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020ec:	bf00      	nop
 80020ee:	e7fd      	b.n	80020ec <UsageFault_Handler+0x4>

080020f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020f4:	bf00      	nop
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020fe:	b480      	push	{r7}
 8002100:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002102:	bf00      	nop
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002110:	bf00      	nop
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr

0800211a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800211e:	f000 f939 	bl	8002394 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002122:	bf00      	nop
 8002124:	bd80      	pop	{r7, pc}

08002126 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(WallSensor_Pin);
 800212a:	2040      	movs	r0, #64	@ 0x40
 800212c:	f001 fc8c 	bl	8003a48 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LineSensor_Pin);
 8002130:	2080      	movs	r0, #128	@ 0x80
 8002132:	f001 fc89 	bl	8003a48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002136:	bf00      	nop
 8002138:	bd80      	pop	{r7, pc}
	...

0800213c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002140:	4802      	ldr	r0, [pc, #8]	@ (800214c <UART5_IRQHandler+0x10>)
 8002142:	f005 fbbf 	bl	80078c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002146:	bf00      	nop
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	200002e8 	.word	0x200002e8

08002150 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002154:	4802      	ldr	r0, [pc, #8]	@ (8002160 <DMA2_Stream0_IRQHandler+0x10>)
 8002156:	f001 f83f 	bl	80031d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800215a:	bf00      	nop
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	20000194 	.word	0x20000194

08002164 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002168:	4802      	ldr	r0, [pc, #8]	@ (8002174 <OTG_FS_IRQHandler+0x10>)
 800216a:	f001 ff65 	bl	8004038 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800216e:	bf00      	nop
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	200008cc 	.word	0x200008cc

08002178 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002180:	4a14      	ldr	r2, [pc, #80]	@ (80021d4 <_sbrk+0x5c>)
 8002182:	4b15      	ldr	r3, [pc, #84]	@ (80021d8 <_sbrk+0x60>)
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800218c:	4b13      	ldr	r3, [pc, #76]	@ (80021dc <_sbrk+0x64>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d102      	bne.n	800219a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002194:	4b11      	ldr	r3, [pc, #68]	@ (80021dc <_sbrk+0x64>)
 8002196:	4a12      	ldr	r2, [pc, #72]	@ (80021e0 <_sbrk+0x68>)
 8002198:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800219a:	4b10      	ldr	r3, [pc, #64]	@ (80021dc <_sbrk+0x64>)
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4413      	add	r3, r2
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d207      	bcs.n	80021b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021a8:	f00a f8fe 	bl	800c3a8 <__errno>
 80021ac:	4603      	mov	r3, r0
 80021ae:	220c      	movs	r2, #12
 80021b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80021b6:	e009      	b.n	80021cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021b8:	4b08      	ldr	r3, [pc, #32]	@ (80021dc <_sbrk+0x64>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021be:	4b07      	ldr	r3, [pc, #28]	@ (80021dc <_sbrk+0x64>)
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4413      	add	r3, r2
 80021c6:	4a05      	ldr	r2, [pc, #20]	@ (80021dc <_sbrk+0x64>)
 80021c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021ca:	68fb      	ldr	r3, [r7, #12]
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3718      	adds	r7, #24
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	20020000 	.word	0x20020000
 80021d8:	00000400 	.word	0x00000400
 80021dc:	200004c8 	.word	0x200004c8
 80021e0:	20000df8 	.word	0x20000df8

080021e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021e8:	4b06      	ldr	r3, [pc, #24]	@ (8002204 <SystemInit+0x20>)
 80021ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ee:	4a05      	ldr	r2, [pc, #20]	@ (8002204 <SystemInit+0x20>)
 80021f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021f8:	bf00      	nop
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	e000ed00 	.word	0xe000ed00

08002208 <Transmision>:

char mensaje[16];
const uint8_t delay = 50;
uint8_t buffer[16];

void Transmision(void) {
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
    strcat(mensaje, "\r\n");
 800220c:	480b      	ldr	r0, [pc, #44]	@ (800223c <Transmision+0x34>)
 800220e:	f7fd ffdf 	bl	80001d0 <strlen>
 8002212:	4603      	mov	r3, r0
 8002214:	461a      	mov	r2, r3
 8002216:	4b09      	ldr	r3, [pc, #36]	@ (800223c <Transmision+0x34>)
 8002218:	4413      	add	r3, r2
 800221a:	4a09      	ldr	r2, [pc, #36]	@ (8002240 <Transmision+0x38>)
 800221c:	8811      	ldrh	r1, [r2, #0]
 800221e:	7892      	ldrb	r2, [r2, #2]
 8002220:	8019      	strh	r1, [r3, #0]
 8002222:	709a      	strb	r2, [r3, #2]
    HAL_UART_Transmit(&huart5, (uint8_t*) mensaje, strlen(mensaje), delay);
 8002224:	4805      	ldr	r0, [pc, #20]	@ (800223c <Transmision+0x34>)
 8002226:	f7fd ffd3 	bl	80001d0 <strlen>
 800222a:	4603      	mov	r3, r0
 800222c:	b29a      	uxth	r2, r3
 800222e:	2332      	movs	r3, #50	@ 0x32
 8002230:	4902      	ldr	r1, [pc, #8]	@ (800223c <Transmision+0x34>)
 8002232:	4804      	ldr	r0, [pc, #16]	@ (8002244 <Transmision+0x3c>)
 8002234:	f005 fa96 	bl	8007764 <HAL_UART_Transmit>
}
 8002238:	bf00      	nop
 800223a:	bd80      	pop	{r7, pc}
 800223c:	200004cc 	.word	0x200004cc
 8002240:	0800cb44 	.word	0x0800cb44
 8002244:	200002e8 	.word	0x200002e8

08002248 <Inicializar_UART>:

void Inicializar_UART(void) {
 8002248:	b598      	push	{r3, r4, r7, lr}
 800224a:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart5, buffer, sizeof(buffer));
 800224c:	2210      	movs	r2, #16
 800224e:	490f      	ldr	r1, [pc, #60]	@ (800228c <Inicializar_UART+0x44>)
 8002250:	480f      	ldr	r0, [pc, #60]	@ (8002290 <Inicializar_UART+0x48>)
 8002252:	f005 fb12 	bl	800787a <HAL_UART_Receive_IT>
    mensaje[0]='\r';
 8002256:	4b0f      	ldr	r3, [pc, #60]	@ (8002294 <Inicializar_UART+0x4c>)
 8002258:	220d      	movs	r2, #13
 800225a:	701a      	strb	r2, [r3, #0]
    mensaje[1]='\n';
 800225c:	4b0d      	ldr	r3, [pc, #52]	@ (8002294 <Inicializar_UART+0x4c>)
 800225e:	220a      	movs	r2, #10
 8002260:	705a      	strb	r2, [r3, #1]
    mensaje[2]='\0';
 8002262:	4b0c      	ldr	r3, [pc, #48]	@ (8002294 <Inicializar_UART+0x4c>)
 8002264:	2200      	movs	r2, #0
 8002266:	709a      	strb	r2, [r3, #2]
    Transmision();
 8002268:	f7ff ffce 	bl	8002208 <Transmision>
    strcpy(mensaje, "UART conectada");
 800226c:	4a09      	ldr	r2, [pc, #36]	@ (8002294 <Inicializar_UART+0x4c>)
 800226e:	4b0a      	ldr	r3, [pc, #40]	@ (8002298 <Inicializar_UART+0x50>)
 8002270:	4614      	mov	r4, r2
 8002272:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002274:	c407      	stmia	r4!, {r0, r1, r2}
 8002276:	8023      	strh	r3, [r4, #0]
 8002278:	3402      	adds	r4, #2
 800227a:	0c1b      	lsrs	r3, r3, #16
 800227c:	7023      	strb	r3, [r4, #0]
    Transmision();
 800227e:	f7ff ffc3 	bl	8002208 <Transmision>
    mensaje[0]='\0';
 8002282:	4b04      	ldr	r3, [pc, #16]	@ (8002294 <Inicializar_UART+0x4c>)
 8002284:	2200      	movs	r2, #0
 8002286:	701a      	strb	r2, [r3, #0]

}
 8002288:	bf00      	nop
 800228a:	bd98      	pop	{r3, r4, r7, pc}
 800228c:	200004dc 	.word	0x200004dc
 8002290:	200002e8 	.word	0x200002e8
 8002294:	200004cc 	.word	0x200004cc
 8002298:	0800cb48 	.word	0x0800cb48

0800229c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800229c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80022d4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80022a0:	f7ff ffa0 	bl	80021e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022a4:	480c      	ldr	r0, [pc, #48]	@ (80022d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022a6:	490d      	ldr	r1, [pc, #52]	@ (80022dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022a8:	4a0d      	ldr	r2, [pc, #52]	@ (80022e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022ac:	e002      	b.n	80022b4 <LoopCopyDataInit>

080022ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022b2:	3304      	adds	r3, #4

080022b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022b8:	d3f9      	bcc.n	80022ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022ba:	4a0a      	ldr	r2, [pc, #40]	@ (80022e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022bc:	4c0a      	ldr	r4, [pc, #40]	@ (80022e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80022be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022c0:	e001      	b.n	80022c6 <LoopFillZerobss>

080022c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022c4:	3204      	adds	r2, #4

080022c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022c8:	d3fb      	bcc.n	80022c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022ca:	f00a f873 	bl	800c3b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022ce:	f7fe fe9f 	bl	8001010 <main>
  bx  lr    
 80022d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80022d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022dc:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 80022e0:	0800cbc4 	.word	0x0800cbc4
  ldr r2, =_sbss
 80022e4:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 80022e8:	20000df4 	.word	0x20000df4

080022ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022ec:	e7fe      	b.n	80022ec <ADC_IRQHandler>
	...

080022f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002330 <HAL_Init+0x40>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a0d      	ldr	r2, [pc, #52]	@ (8002330 <HAL_Init+0x40>)
 80022fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002300:	4b0b      	ldr	r3, [pc, #44]	@ (8002330 <HAL_Init+0x40>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a0a      	ldr	r2, [pc, #40]	@ (8002330 <HAL_Init+0x40>)
 8002306:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800230a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800230c:	4b08      	ldr	r3, [pc, #32]	@ (8002330 <HAL_Init+0x40>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a07      	ldr	r2, [pc, #28]	@ (8002330 <HAL_Init+0x40>)
 8002312:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002316:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002318:	2003      	movs	r0, #3
 800231a:	f000 fd75 	bl	8002e08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800231e:	2000      	movs	r0, #0
 8002320:	f000 f808 	bl	8002334 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002324:	f7ff fcd4 	bl	8001cd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	40023c00 	.word	0x40023c00

08002334 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800233c:	4b12      	ldr	r3, [pc, #72]	@ (8002388 <HAL_InitTick+0x54>)
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	4b12      	ldr	r3, [pc, #72]	@ (800238c <HAL_InitTick+0x58>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	4619      	mov	r1, r3
 8002346:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800234a:	fbb3 f3f1 	udiv	r3, r3, r1
 800234e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002352:	4618      	mov	r0, r3
 8002354:	f000 fd9b 	bl	8002e8e <HAL_SYSTICK_Config>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e00e      	b.n	8002380 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2b0f      	cmp	r3, #15
 8002366:	d80a      	bhi.n	800237e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002368:	2200      	movs	r2, #0
 800236a:	6879      	ldr	r1, [r7, #4]
 800236c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002370:	f000 fd55 	bl	8002e1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002374:	4a06      	ldr	r2, [pc, #24]	@ (8002390 <HAL_InitTick+0x5c>)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800237a:	2300      	movs	r3, #0
 800237c:	e000      	b.n	8002380 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
}
 8002380:	4618      	mov	r0, r3
 8002382:	3708      	adds	r7, #8
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	2000001c 	.word	0x2000001c
 800238c:	20000024 	.word	0x20000024
 8002390:	20000020 	.word	0x20000020

08002394 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002398:	4b06      	ldr	r3, [pc, #24]	@ (80023b4 <HAL_IncTick+0x20>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	461a      	mov	r2, r3
 800239e:	4b06      	ldr	r3, [pc, #24]	@ (80023b8 <HAL_IncTick+0x24>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4413      	add	r3, r2
 80023a4:	4a04      	ldr	r2, [pc, #16]	@ (80023b8 <HAL_IncTick+0x24>)
 80023a6:	6013      	str	r3, [r2, #0]
}
 80023a8:	bf00      	nop
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	20000024 	.word	0x20000024
 80023b8:	200004ec 	.word	0x200004ec

080023bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  return uwTick;
 80023c0:	4b03      	ldr	r3, [pc, #12]	@ (80023d0 <HAL_GetTick+0x14>)
 80023c2:	681b      	ldr	r3, [r3, #0]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	200004ec 	.word	0x200004ec

080023d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023dc:	f7ff ffee 	bl	80023bc <HAL_GetTick>
 80023e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80023ec:	d005      	beq.n	80023fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002418 <HAL_Delay+0x44>)
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	461a      	mov	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	4413      	add	r3, r2
 80023f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023fa:	bf00      	nop
 80023fc:	f7ff ffde 	bl	80023bc <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	429a      	cmp	r2, r3
 800240a:	d8f7      	bhi.n	80023fc <HAL_Delay+0x28>
  {
  }
}
 800240c:	bf00      	nop
 800240e:	bf00      	nop
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	20000024 	.word	0x20000024

0800241c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002424:	2300      	movs	r3, #0
 8002426:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e033      	b.n	800249a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002436:	2b00      	cmp	r3, #0
 8002438:	d109      	bne.n	800244e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f7ff fc70 	bl	8001d20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002452:	f003 0310 	and.w	r3, r3, #16
 8002456:	2b00      	cmp	r3, #0
 8002458:	d118      	bne.n	800248c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002462:	f023 0302 	bic.w	r3, r3, #2
 8002466:	f043 0202 	orr.w	r2, r3, #2
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 fa58 	bl	8002924 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247e:	f023 0303 	bic.w	r3, r3, #3
 8002482:	f043 0201 	orr.w	r2, r3, #1
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	641a      	str	r2, [r3, #64]	@ 0x40
 800248a:	e001      	b.n	8002490 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002498:	7bfb      	ldrb	r3, [r7, #15]
}
 800249a:	4618      	mov	r0, r3
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
	...

080024a4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b088      	sub	sp, #32
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80024b0:	2300      	movs	r3, #0
 80024b2:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024b4:	2300      	movs	r3, #0
 80024b6:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d101      	bne.n	80024c6 <HAL_ADC_Start_DMA+0x22>
 80024c2:	2302      	movs	r3, #2
 80024c4:	e0eb      	b.n	800269e <HAL_ADC_Start_DMA+0x1fa>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2201      	movs	r2, #1
 80024ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f003 0301 	and.w	r3, r3, #1
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d018      	beq.n	800250e <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	689a      	ldr	r2, [r3, #8]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f042 0201 	orr.w	r2, r2, #1
 80024ea:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80024ec:	4b6e      	ldr	r3, [pc, #440]	@ (80026a8 <HAL_ADC_Start_DMA+0x204>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a6e      	ldr	r2, [pc, #440]	@ (80026ac <HAL_ADC_Start_DMA+0x208>)
 80024f2:	fba2 2303 	umull	r2, r3, r2, r3
 80024f6:	0c9a      	lsrs	r2, r3, #18
 80024f8:	4613      	mov	r3, r2
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	4413      	add	r3, r2
 80024fe:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8002500:	e002      	b.n	8002508 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	3b01      	subs	r3, #1
 8002506:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1f9      	bne.n	8002502 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002518:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800251c:	d107      	bne.n	800252e <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	689a      	ldr	r2, [r3, #8]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800252c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	2b01      	cmp	r3, #1
 800253a:	f040 80a3 	bne.w	8002684 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002542:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002546:	f023 0301 	bic.w	r3, r3, #1
 800254a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800255c:	2b00      	cmp	r3, #0
 800255e:	d007      	beq.n	8002570 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002564:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002568:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002574:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002578:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800257c:	d106      	bne.n	800258c <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002582:	f023 0206 	bic.w	r2, r3, #6
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	645a      	str	r2, [r3, #68]	@ 0x44
 800258a:	e002      	b.n	8002592 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800259a:	4b45      	ldr	r3, [pc, #276]	@ (80026b0 <HAL_ADC_Start_DMA+0x20c>)
 800259c:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025a2:	4a44      	ldr	r2, [pc, #272]	@ (80026b4 <HAL_ADC_Start_DMA+0x210>)
 80025a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025aa:	4a43      	ldr	r2, [pc, #268]	@ (80026b8 <HAL_ADC_Start_DMA+0x214>)
 80025ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025b2:	4a42      	ldr	r2, [pc, #264]	@ (80026bc <HAL_ADC_Start_DMA+0x218>)
 80025b4:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80025be:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	685a      	ldr	r2, [r3, #4]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80025ce:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	689a      	ldr	r2, [r3, #8]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025de:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	334c      	adds	r3, #76	@ 0x4c
 80025ea:	4619      	mov	r1, r3
 80025ec:	68ba      	ldr	r2, [r7, #8]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f000 fd08 	bl	8003004 <HAL_DMA_Start_IT>
 80025f4:	4603      	mov	r3, r0
 80025f6:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f003 031f 	and.w	r3, r3, #31
 8002600:	2b00      	cmp	r3, #0
 8002602:	d12a      	bne.n	800265a <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a2d      	ldr	r2, [pc, #180]	@ (80026c0 <HAL_ADC_Start_DMA+0x21c>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d015      	beq.n	800263a <HAL_ADC_Start_DMA+0x196>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a2c      	ldr	r2, [pc, #176]	@ (80026c4 <HAL_ADC_Start_DMA+0x220>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d105      	bne.n	8002624 <HAL_ADC_Start_DMA+0x180>
 8002618:	4b25      	ldr	r3, [pc, #148]	@ (80026b0 <HAL_ADC_Start_DMA+0x20c>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f003 031f 	and.w	r3, r3, #31
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00a      	beq.n	800263a <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a27      	ldr	r2, [pc, #156]	@ (80026c8 <HAL_ADC_Start_DMA+0x224>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d136      	bne.n	800269c <HAL_ADC_Start_DMA+0x1f8>
 800262e:	4b20      	ldr	r3, [pc, #128]	@ (80026b0 <HAL_ADC_Start_DMA+0x20c>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f003 0310 	and.w	r3, r3, #16
 8002636:	2b00      	cmp	r3, #0
 8002638:	d130      	bne.n	800269c <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d129      	bne.n	800269c <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	689a      	ldr	r2, [r3, #8]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002656:	609a      	str	r2, [r3, #8]
 8002658:	e020      	b.n	800269c <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a18      	ldr	r2, [pc, #96]	@ (80026c0 <HAL_ADC_Start_DMA+0x21c>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d11b      	bne.n	800269c <HAL_ADC_Start_DMA+0x1f8>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d114      	bne.n	800269c <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	689a      	ldr	r2, [r3, #8]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002680:	609a      	str	r2, [r3, #8]
 8002682:	e00b      	b.n	800269c <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002688:	f043 0210 	orr.w	r2, r3, #16
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002694:	f043 0201 	orr.w	r2, r3, #1
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 800269c:	7ffb      	ldrb	r3, [r7, #31]
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3720      	adds	r7, #32
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	2000001c 	.word	0x2000001c
 80026ac:	431bde83 	.word	0x431bde83
 80026b0:	40012300 	.word	0x40012300
 80026b4:	08002b1d 	.word	0x08002b1d
 80026b8:	08002bd7 	.word	0x08002bd7
 80026bc:	08002bf3 	.word	0x08002bf3
 80026c0:	40012000 	.word	0x40012000
 80026c4:	40012100 	.word	0x40012100
 80026c8:	40012200 	.word	0x40012200

080026cc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80026ea:	2300      	movs	r3, #0
 80026ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d101      	bne.n	80026fc <HAL_ADC_ConfigChannel+0x1c>
 80026f8:	2302      	movs	r3, #2
 80026fa:	e105      	b.n	8002908 <HAL_ADC_ConfigChannel+0x228>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2b09      	cmp	r3, #9
 800270a:	d925      	bls.n	8002758 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68d9      	ldr	r1, [r3, #12]
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	b29b      	uxth	r3, r3
 8002718:	461a      	mov	r2, r3
 800271a:	4613      	mov	r3, r2
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	4413      	add	r3, r2
 8002720:	3b1e      	subs	r3, #30
 8002722:	2207      	movs	r2, #7
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	43da      	mvns	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	400a      	ands	r2, r1
 8002730:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68d9      	ldr	r1, [r3, #12]
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	689a      	ldr	r2, [r3, #8]
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	b29b      	uxth	r3, r3
 8002742:	4618      	mov	r0, r3
 8002744:	4603      	mov	r3, r0
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	4403      	add	r3, r0
 800274a:	3b1e      	subs	r3, #30
 800274c:	409a      	lsls	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	430a      	orrs	r2, r1
 8002754:	60da      	str	r2, [r3, #12]
 8002756:	e022      	b.n	800279e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6919      	ldr	r1, [r3, #16]
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	b29b      	uxth	r3, r3
 8002764:	461a      	mov	r2, r3
 8002766:	4613      	mov	r3, r2
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	4413      	add	r3, r2
 800276c:	2207      	movs	r2, #7
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	43da      	mvns	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	400a      	ands	r2, r1
 800277a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6919      	ldr	r1, [r3, #16]
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	689a      	ldr	r2, [r3, #8]
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	b29b      	uxth	r3, r3
 800278c:	4618      	mov	r0, r3
 800278e:	4603      	mov	r3, r0
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	4403      	add	r3, r0
 8002794:	409a      	lsls	r2, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	430a      	orrs	r2, r1
 800279c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	2b06      	cmp	r3, #6
 80027a4:	d824      	bhi.n	80027f0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685a      	ldr	r2, [r3, #4]
 80027b0:	4613      	mov	r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	4413      	add	r3, r2
 80027b6:	3b05      	subs	r3, #5
 80027b8:	221f      	movs	r2, #31
 80027ba:	fa02 f303 	lsl.w	r3, r2, r3
 80027be:	43da      	mvns	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	400a      	ands	r2, r1
 80027c6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	4618      	mov	r0, r3
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685a      	ldr	r2, [r3, #4]
 80027da:	4613      	mov	r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	4413      	add	r3, r2
 80027e0:	3b05      	subs	r3, #5
 80027e2:	fa00 f203 	lsl.w	r2, r0, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	430a      	orrs	r2, r1
 80027ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80027ee:	e04c      	b.n	800288a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	2b0c      	cmp	r3, #12
 80027f6:	d824      	bhi.n	8002842 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685a      	ldr	r2, [r3, #4]
 8002802:	4613      	mov	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	4413      	add	r3, r2
 8002808:	3b23      	subs	r3, #35	@ 0x23
 800280a:	221f      	movs	r2, #31
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	43da      	mvns	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	400a      	ands	r2, r1
 8002818:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	b29b      	uxth	r3, r3
 8002826:	4618      	mov	r0, r3
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685a      	ldr	r2, [r3, #4]
 800282c:	4613      	mov	r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	4413      	add	r3, r2
 8002832:	3b23      	subs	r3, #35	@ 0x23
 8002834:	fa00 f203 	lsl.w	r2, r0, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	430a      	orrs	r2, r1
 800283e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002840:	e023      	b.n	800288a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685a      	ldr	r2, [r3, #4]
 800284c:	4613      	mov	r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	4413      	add	r3, r2
 8002852:	3b41      	subs	r3, #65	@ 0x41
 8002854:	221f      	movs	r2, #31
 8002856:	fa02 f303 	lsl.w	r3, r2, r3
 800285a:	43da      	mvns	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	400a      	ands	r2, r1
 8002862:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	b29b      	uxth	r3, r3
 8002870:	4618      	mov	r0, r3
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685a      	ldr	r2, [r3, #4]
 8002876:	4613      	mov	r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	4413      	add	r3, r2
 800287c:	3b41      	subs	r3, #65	@ 0x41
 800287e:	fa00 f203 	lsl.w	r2, r0, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	430a      	orrs	r2, r1
 8002888:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800288a:	4b22      	ldr	r3, [pc, #136]	@ (8002914 <HAL_ADC_ConfigChannel+0x234>)
 800288c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a21      	ldr	r2, [pc, #132]	@ (8002918 <HAL_ADC_ConfigChannel+0x238>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d109      	bne.n	80028ac <HAL_ADC_ConfigChannel+0x1cc>
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2b12      	cmp	r3, #18
 800289e:	d105      	bne.n	80028ac <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a19      	ldr	r2, [pc, #100]	@ (8002918 <HAL_ADC_ConfigChannel+0x238>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d123      	bne.n	80028fe <HAL_ADC_ConfigChannel+0x21e>
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2b10      	cmp	r3, #16
 80028bc:	d003      	beq.n	80028c6 <HAL_ADC_ConfigChannel+0x1e6>
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2b11      	cmp	r3, #17
 80028c4:	d11b      	bne.n	80028fe <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2b10      	cmp	r3, #16
 80028d8:	d111      	bne.n	80028fe <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80028da:	4b10      	ldr	r3, [pc, #64]	@ (800291c <HAL_ADC_ConfigChannel+0x23c>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a10      	ldr	r2, [pc, #64]	@ (8002920 <HAL_ADC_ConfigChannel+0x240>)
 80028e0:	fba2 2303 	umull	r2, r3, r2, r3
 80028e4:	0c9a      	lsrs	r2, r3, #18
 80028e6:	4613      	mov	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	4413      	add	r3, r2
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80028f0:	e002      	b.n	80028f8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	3b01      	subs	r3, #1
 80028f6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1f9      	bne.n	80028f2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3714      	adds	r7, #20
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr
 8002914:	40012300 	.word	0x40012300
 8002918:	40012000 	.word	0x40012000
 800291c:	2000001c 	.word	0x2000001c
 8002920:	431bde83 	.word	0x431bde83

08002924 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800292c:	4b79      	ldr	r3, [pc, #484]	@ (8002b14 <ADC_Init+0x1f0>)
 800292e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	431a      	orrs	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002958:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	6859      	ldr	r1, [r3, #4]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	021a      	lsls	r2, r3, #8
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	430a      	orrs	r2, r1
 800296c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	685a      	ldr	r2, [r3, #4]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800297c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	6859      	ldr	r1, [r3, #4]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689a      	ldr	r2, [r3, #8]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	430a      	orrs	r2, r1
 800298e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	689a      	ldr	r2, [r3, #8]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800299e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6899      	ldr	r1, [r3, #8]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	68da      	ldr	r2, [r3, #12]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	430a      	orrs	r2, r1
 80029b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029b6:	4a58      	ldr	r2, [pc, #352]	@ (8002b18 <ADC_Init+0x1f4>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d022      	beq.n	8002a02 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	689a      	ldr	r2, [r3, #8]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80029ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	6899      	ldr	r1, [r3, #8]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	430a      	orrs	r2, r1
 80029dc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80029ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	6899      	ldr	r1, [r3, #8]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	430a      	orrs	r2, r1
 80029fe:	609a      	str	r2, [r3, #8]
 8002a00:	e00f      	b.n	8002a22 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	689a      	ldr	r2, [r3, #8]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002a10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	689a      	ldr	r2, [r3, #8]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002a20:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f022 0202 	bic.w	r2, r2, #2
 8002a30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	6899      	ldr	r1, [r3, #8]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	7e1b      	ldrb	r3, [r3, #24]
 8002a3c:	005a      	lsls	r2, r3, #1
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	430a      	orrs	r2, r1
 8002a44:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d01b      	beq.n	8002a88 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	685a      	ldr	r2, [r3, #4]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a5e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	685a      	ldr	r2, [r3, #4]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002a6e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6859      	ldr	r1, [r3, #4]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	035a      	lsls	r2, r3, #13
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	430a      	orrs	r2, r1
 8002a84:	605a      	str	r2, [r3, #4]
 8002a86:	e007      	b.n	8002a98 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	685a      	ldr	r2, [r3, #4]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a96:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002aa6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	69db      	ldr	r3, [r3, #28]
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	051a      	lsls	r2, r3, #20
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	430a      	orrs	r2, r1
 8002abc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	689a      	ldr	r2, [r3, #8]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002acc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	6899      	ldr	r1, [r3, #8]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002ada:	025a      	lsls	r2, r3, #9
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	689a      	ldr	r2, [r3, #8]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002af2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6899      	ldr	r1, [r3, #8]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	029a      	lsls	r2, r3, #10
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	430a      	orrs	r2, r1
 8002b06:	609a      	str	r2, [r3, #8]
}
 8002b08:	bf00      	nop
 8002b0a:	3714      	adds	r7, #20
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr
 8002b14:	40012300 	.word	0x40012300
 8002b18:	0f000001 	.word	0x0f000001

08002b1c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b28:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d13c      	bne.n	8002bb0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d12b      	bne.n	8002ba8 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d127      	bne.n	8002ba8 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b5e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d006      	beq.n	8002b74 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d119      	bne.n	8002ba8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	685a      	ldr	r2, [r3, #4]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f022 0220 	bic.w	r2, r2, #32
 8002b82:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b88:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d105      	bne.n	8002ba8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba0:	f043 0201 	orr.w	r2, r3, #1
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f7fd fd5f 	bl	800066c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002bae:	e00e      	b.n	8002bce <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb4:	f003 0310 	and.w	r3, r3, #16
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d003      	beq.n	8002bc4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f7ff fd85 	bl	80026cc <HAL_ADC_ErrorCallback>
}
 8002bc2:	e004      	b.n	8002bce <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	4798      	blx	r3
}
 8002bce:	bf00      	nop
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b084      	sub	sp, #16
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002be2:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002be4:	68f8      	ldr	r0, [r7, #12]
 8002be6:	f7fd fd33 	bl	8000650 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002bea:	bf00      	nop
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b084      	sub	sp, #16
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bfe:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2240      	movs	r2, #64	@ 0x40
 8002c04:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c0a:	f043 0204 	orr.w	r2, r3, #4
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f7ff fd5a 	bl	80026cc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c18:	bf00      	nop
 8002c1a:	3710      	adds	r7, #16
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f003 0307 	and.w	r3, r3, #7
 8002c2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c30:	4b0c      	ldr	r3, [pc, #48]	@ (8002c64 <__NVIC_SetPriorityGrouping+0x44>)
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c36:	68ba      	ldr	r2, [r7, #8]
 8002c38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c52:	4a04      	ldr	r2, [pc, #16]	@ (8002c64 <__NVIC_SetPriorityGrouping+0x44>)
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	60d3      	str	r3, [r2, #12]
}
 8002c58:	bf00      	nop
 8002c5a:	3714      	adds	r7, #20
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr
 8002c64:	e000ed00 	.word	0xe000ed00

08002c68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c6c:	4b04      	ldr	r3, [pc, #16]	@ (8002c80 <__NVIC_GetPriorityGrouping+0x18>)
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	0a1b      	lsrs	r3, r3, #8
 8002c72:	f003 0307 	and.w	r3, r3, #7
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr
 8002c80:	e000ed00 	.word	0xe000ed00

08002c84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	db0b      	blt.n	8002cae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c96:	79fb      	ldrb	r3, [r7, #7]
 8002c98:	f003 021f 	and.w	r2, r3, #31
 8002c9c:	4907      	ldr	r1, [pc, #28]	@ (8002cbc <__NVIC_EnableIRQ+0x38>)
 8002c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca2:	095b      	lsrs	r3, r3, #5
 8002ca4:	2001      	movs	r0, #1
 8002ca6:	fa00 f202 	lsl.w	r2, r0, r2
 8002caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002cae:	bf00      	nop
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	e000e100 	.word	0xe000e100

08002cc0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	db12      	blt.n	8002cf8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cd2:	79fb      	ldrb	r3, [r7, #7]
 8002cd4:	f003 021f 	and.w	r2, r3, #31
 8002cd8:	490a      	ldr	r1, [pc, #40]	@ (8002d04 <__NVIC_DisableIRQ+0x44>)
 8002cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cde:	095b      	lsrs	r3, r3, #5
 8002ce0:	2001      	movs	r0, #1
 8002ce2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ce6:	3320      	adds	r3, #32
 8002ce8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002cec:	f3bf 8f4f 	dsb	sy
}
 8002cf0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002cf2:	f3bf 8f6f 	isb	sy
}
 8002cf6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr
 8002d04:	e000e100 	.word	0xe000e100

08002d08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	4603      	mov	r3, r0
 8002d10:	6039      	str	r1, [r7, #0]
 8002d12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	db0a      	blt.n	8002d32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	b2da      	uxtb	r2, r3
 8002d20:	490c      	ldr	r1, [pc, #48]	@ (8002d54 <__NVIC_SetPriority+0x4c>)
 8002d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d26:	0112      	lsls	r2, r2, #4
 8002d28:	b2d2      	uxtb	r2, r2
 8002d2a:	440b      	add	r3, r1
 8002d2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d30:	e00a      	b.n	8002d48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	b2da      	uxtb	r2, r3
 8002d36:	4908      	ldr	r1, [pc, #32]	@ (8002d58 <__NVIC_SetPriority+0x50>)
 8002d38:	79fb      	ldrb	r3, [r7, #7]
 8002d3a:	f003 030f 	and.w	r3, r3, #15
 8002d3e:	3b04      	subs	r3, #4
 8002d40:	0112      	lsls	r2, r2, #4
 8002d42:	b2d2      	uxtb	r2, r2
 8002d44:	440b      	add	r3, r1
 8002d46:	761a      	strb	r2, [r3, #24]
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr
 8002d54:	e000e100 	.word	0xe000e100
 8002d58:	e000ed00 	.word	0xe000ed00

08002d5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b089      	sub	sp, #36	@ 0x24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f003 0307 	and.w	r3, r3, #7
 8002d6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	f1c3 0307 	rsb	r3, r3, #7
 8002d76:	2b04      	cmp	r3, #4
 8002d78:	bf28      	it	cs
 8002d7a:	2304      	movcs	r3, #4
 8002d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	3304      	adds	r3, #4
 8002d82:	2b06      	cmp	r3, #6
 8002d84:	d902      	bls.n	8002d8c <NVIC_EncodePriority+0x30>
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	3b03      	subs	r3, #3
 8002d8a:	e000      	b.n	8002d8e <NVIC_EncodePriority+0x32>
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d90:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9a:	43da      	mvns	r2, r3
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	401a      	ands	r2, r3
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002da4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	fa01 f303 	lsl.w	r3, r1, r3
 8002dae:	43d9      	mvns	r1, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002db4:	4313      	orrs	r3, r2
         );
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3724      	adds	r7, #36	@ 0x24
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
	...

08002dc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002dd4:	d301      	bcc.n	8002dda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e00f      	b.n	8002dfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dda:	4a0a      	ldr	r2, [pc, #40]	@ (8002e04 <SysTick_Config+0x40>)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	3b01      	subs	r3, #1
 8002de0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002de2:	210f      	movs	r1, #15
 8002de4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002de8:	f7ff ff8e 	bl	8002d08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dec:	4b05      	ldr	r3, [pc, #20]	@ (8002e04 <SysTick_Config+0x40>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002df2:	4b04      	ldr	r3, [pc, #16]	@ (8002e04 <SysTick_Config+0x40>)
 8002df4:	2207      	movs	r2, #7
 8002df6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	e000e010 	.word	0xe000e010

08002e08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f7ff ff05 	bl	8002c20 <__NVIC_SetPriorityGrouping>
}
 8002e16:	bf00      	nop
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b086      	sub	sp, #24
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	4603      	mov	r3, r0
 8002e26:	60b9      	str	r1, [r7, #8]
 8002e28:	607a      	str	r2, [r7, #4]
 8002e2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e30:	f7ff ff1a 	bl	8002c68 <__NVIC_GetPriorityGrouping>
 8002e34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	68b9      	ldr	r1, [r7, #8]
 8002e3a:	6978      	ldr	r0, [r7, #20]
 8002e3c:	f7ff ff8e 	bl	8002d5c <NVIC_EncodePriority>
 8002e40:	4602      	mov	r2, r0
 8002e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e46:	4611      	mov	r1, r2
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7ff ff5d 	bl	8002d08 <__NVIC_SetPriority>
}
 8002e4e:	bf00      	nop
 8002e50:	3718      	adds	r7, #24
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b082      	sub	sp, #8
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7ff ff0d 	bl	8002c84 <__NVIC_EnableIRQ>
}
 8002e6a:	bf00      	nop
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b082      	sub	sp, #8
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	4603      	mov	r3, r0
 8002e7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7ff ff1d 	bl	8002cc0 <__NVIC_DisableIRQ>
}
 8002e86:	bf00      	nop
 8002e88:	3708      	adds	r7, #8
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b082      	sub	sp, #8
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f7ff ff94 	bl	8002dc4 <SysTick_Config>
 8002e9c:	4603      	mov	r3, r0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
	...

08002ea8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002eb4:	f7ff fa82 	bl	80023bc <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d101      	bne.n	8002ec4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e099      	b.n	8002ff8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2202      	movs	r2, #2
 8002ec8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f022 0201 	bic.w	r2, r2, #1
 8002ee2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ee4:	e00f      	b.n	8002f06 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ee6:	f7ff fa69 	bl	80023bc <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b05      	cmp	r3, #5
 8002ef2:	d908      	bls.n	8002f06 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2220      	movs	r2, #32
 8002ef8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2203      	movs	r2, #3
 8002efe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e078      	b.n	8002ff8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0301 	and.w	r3, r3, #1
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d1e8      	bne.n	8002ee6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f1c:	697a      	ldr	r2, [r7, #20]
 8002f1e:	4b38      	ldr	r3, [pc, #224]	@ (8003000 <HAL_DMA_Init+0x158>)
 8002f20:	4013      	ands	r3, r2
 8002f22:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685a      	ldr	r2, [r3, #4]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f32:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a1b      	ldr	r3, [r3, #32]
 8002f50:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f52:	697a      	ldr	r2, [r7, #20]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f5c:	2b04      	cmp	r3, #4
 8002f5e:	d107      	bne.n	8002f70 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	697a      	ldr	r2, [r7, #20]
 8002f76:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	f023 0307 	bic.w	r3, r3, #7
 8002f86:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f96:	2b04      	cmp	r3, #4
 8002f98:	d117      	bne.n	8002fca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00e      	beq.n	8002fca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 fb01 	bl	80035b4 <DMA_CheckFifoParam>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d008      	beq.n	8002fca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2240      	movs	r2, #64	@ 0x40
 8002fbc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e016      	b.n	8002ff8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	697a      	ldr	r2, [r7, #20]
 8002fd0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 fab8 	bl	8003548 <DMA_CalcBaseAndBitshift>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fe0:	223f      	movs	r2, #63	@ 0x3f
 8002fe2:	409a      	lsls	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3718      	adds	r7, #24
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	f010803f 	.word	0xf010803f

08003004 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b086      	sub	sp, #24
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
 8003010:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003012:	2300      	movs	r3, #0
 8003014:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800301a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003022:	2b01      	cmp	r3, #1
 8003024:	d101      	bne.n	800302a <HAL_DMA_Start_IT+0x26>
 8003026:	2302      	movs	r3, #2
 8003028:	e040      	b.n	80030ac <HAL_DMA_Start_IT+0xa8>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b01      	cmp	r3, #1
 800303c:	d12f      	bne.n	800309e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2202      	movs	r2, #2
 8003042:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2200      	movs	r2, #0
 800304a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	68b9      	ldr	r1, [r7, #8]
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f000 fa4a 	bl	80034ec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800305c:	223f      	movs	r2, #63	@ 0x3f
 800305e:	409a      	lsls	r2, r3
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f042 0216 	orr.w	r2, r2, #22
 8003072:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003078:	2b00      	cmp	r3, #0
 800307a:	d007      	beq.n	800308c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f042 0208 	orr.w	r2, r2, #8
 800308a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f042 0201 	orr.w	r2, r2, #1
 800309a:	601a      	str	r2, [r3, #0]
 800309c:	e005      	b.n	80030aa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80030a6:	2302      	movs	r3, #2
 80030a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80030aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3718      	adds	r7, #24
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030c0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80030c2:	f7ff f97b 	bl	80023bc <HAL_GetTick>
 80030c6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d008      	beq.n	80030e6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2280      	movs	r2, #128	@ 0x80
 80030d8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e052      	b.n	800318c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 0216 	bic.w	r2, r2, #22
 80030f4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	695a      	ldr	r2, [r3, #20]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003104:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310a:	2b00      	cmp	r3, #0
 800310c:	d103      	bne.n	8003116 <HAL_DMA_Abort+0x62>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003112:	2b00      	cmp	r3, #0
 8003114:	d007      	beq.n	8003126 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f022 0208 	bic.w	r2, r2, #8
 8003124:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f022 0201 	bic.w	r2, r2, #1
 8003134:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003136:	e013      	b.n	8003160 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003138:	f7ff f940 	bl	80023bc <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b05      	cmp	r3, #5
 8003144:	d90c      	bls.n	8003160 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2220      	movs	r2, #32
 800314a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2203      	movs	r2, #3
 8003150:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e015      	b.n	800318c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1e4      	bne.n	8003138 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003172:	223f      	movs	r2, #63	@ 0x3f
 8003174:	409a      	lsls	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2201      	movs	r2, #1
 800317e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	3710      	adds	r7, #16
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d004      	beq.n	80031b2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2280      	movs	r2, #128	@ 0x80
 80031ac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e00c      	b.n	80031cc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2205      	movs	r2, #5
 80031b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f022 0201 	bic.w	r2, r2, #1
 80031c8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b086      	sub	sp, #24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80031e0:	2300      	movs	r3, #0
 80031e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80031e4:	4b8e      	ldr	r3, [pc, #568]	@ (8003420 <HAL_DMA_IRQHandler+0x248>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a8e      	ldr	r2, [pc, #568]	@ (8003424 <HAL_DMA_IRQHandler+0x24c>)
 80031ea:	fba2 2303 	umull	r2, r3, r2, r3
 80031ee:	0a9b      	lsrs	r3, r3, #10
 80031f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003202:	2208      	movs	r2, #8
 8003204:	409a      	lsls	r2, r3
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	4013      	ands	r3, r2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d01a      	beq.n	8003244 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0304 	and.w	r3, r3, #4
 8003218:	2b00      	cmp	r3, #0
 800321a:	d013      	beq.n	8003244 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f022 0204 	bic.w	r2, r2, #4
 800322a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003230:	2208      	movs	r2, #8
 8003232:	409a      	lsls	r2, r3
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800323c:	f043 0201 	orr.w	r2, r3, #1
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003248:	2201      	movs	r2, #1
 800324a:	409a      	lsls	r2, r3
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	4013      	ands	r3, r2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d012      	beq.n	800327a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00b      	beq.n	800327a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003266:	2201      	movs	r2, #1
 8003268:	409a      	lsls	r2, r3
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003272:	f043 0202 	orr.w	r2, r3, #2
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800327e:	2204      	movs	r2, #4
 8003280:	409a      	lsls	r2, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	4013      	ands	r3, r2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d012      	beq.n	80032b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d00b      	beq.n	80032b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800329c:	2204      	movs	r2, #4
 800329e:	409a      	lsls	r2, r3
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032a8:	f043 0204 	orr.w	r2, r3, #4
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032b4:	2210      	movs	r2, #16
 80032b6:	409a      	lsls	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	4013      	ands	r3, r2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d043      	beq.n	8003348 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0308 	and.w	r3, r3, #8
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d03c      	beq.n	8003348 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032d2:	2210      	movs	r2, #16
 80032d4:	409a      	lsls	r2, r3
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d018      	beq.n	800331a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d108      	bne.n	8003308 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d024      	beq.n	8003348 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	4798      	blx	r3
 8003306:	e01f      	b.n	8003348 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800330c:	2b00      	cmp	r3, #0
 800330e:	d01b      	beq.n	8003348 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	4798      	blx	r3
 8003318:	e016      	b.n	8003348 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003324:	2b00      	cmp	r3, #0
 8003326:	d107      	bne.n	8003338 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f022 0208 	bic.w	r2, r2, #8
 8003336:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333c:	2b00      	cmp	r3, #0
 800333e:	d003      	beq.n	8003348 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800334c:	2220      	movs	r2, #32
 800334e:	409a      	lsls	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	4013      	ands	r3, r2
 8003354:	2b00      	cmp	r3, #0
 8003356:	f000 808f 	beq.w	8003478 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0310 	and.w	r3, r3, #16
 8003364:	2b00      	cmp	r3, #0
 8003366:	f000 8087 	beq.w	8003478 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800336e:	2220      	movs	r2, #32
 8003370:	409a      	lsls	r2, r3
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b05      	cmp	r3, #5
 8003380:	d136      	bne.n	80033f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f022 0216 	bic.w	r2, r2, #22
 8003390:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	695a      	ldr	r2, [r3, #20]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80033a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d103      	bne.n	80033b2 <HAL_DMA_IRQHandler+0x1da>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d007      	beq.n	80033c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f022 0208 	bic.w	r2, r2, #8
 80033c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033c6:	223f      	movs	r2, #63	@ 0x3f
 80033c8:	409a      	lsls	r2, r3
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d07e      	beq.n	80034e4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	4798      	blx	r3
        }
        return;
 80033ee:	e079      	b.n	80034e4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d01d      	beq.n	800343a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d10d      	bne.n	8003428 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003410:	2b00      	cmp	r3, #0
 8003412:	d031      	beq.n	8003478 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	4798      	blx	r3
 800341c:	e02c      	b.n	8003478 <HAL_DMA_IRQHandler+0x2a0>
 800341e:	bf00      	nop
 8003420:	2000001c 	.word	0x2000001c
 8003424:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800342c:	2b00      	cmp	r3, #0
 800342e:	d023      	beq.n	8003478 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	4798      	blx	r3
 8003438:	e01e      	b.n	8003478 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003444:	2b00      	cmp	r3, #0
 8003446:	d10f      	bne.n	8003468 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f022 0210 	bic.w	r2, r2, #16
 8003456:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800346c:	2b00      	cmp	r3, #0
 800346e:	d003      	beq.n	8003478 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800347c:	2b00      	cmp	r3, #0
 800347e:	d032      	beq.n	80034e6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003484:	f003 0301 	and.w	r3, r3, #1
 8003488:	2b00      	cmp	r3, #0
 800348a:	d022      	beq.n	80034d2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2205      	movs	r2, #5
 8003490:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f022 0201 	bic.w	r2, r2, #1
 80034a2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	3301      	adds	r3, #1
 80034a8:	60bb      	str	r3, [r7, #8]
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d307      	bcc.n	80034c0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1f2      	bne.n	80034a4 <HAL_DMA_IRQHandler+0x2cc>
 80034be:	e000      	b.n	80034c2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80034c0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2201      	movs	r2, #1
 80034c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d005      	beq.n	80034e6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	4798      	blx	r3
 80034e2:	e000      	b.n	80034e6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80034e4:	bf00      	nop
    }
  }
}
 80034e6:	3718      	adds	r7, #24
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b085      	sub	sp, #20
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
 80034f8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003508:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	683a      	ldr	r2, [r7, #0]
 8003510:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	2b40      	cmp	r3, #64	@ 0x40
 8003518:	d108      	bne.n	800352c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68ba      	ldr	r2, [r7, #8]
 8003528:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800352a:	e007      	b.n	800353c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68ba      	ldr	r2, [r7, #8]
 8003532:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	60da      	str	r2, [r3, #12]
}
 800353c:	bf00      	nop
 800353e:	3714      	adds	r7, #20
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003548:	b480      	push	{r7}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	b2db      	uxtb	r3, r3
 8003556:	3b10      	subs	r3, #16
 8003558:	4a14      	ldr	r2, [pc, #80]	@ (80035ac <DMA_CalcBaseAndBitshift+0x64>)
 800355a:	fba2 2303 	umull	r2, r3, r2, r3
 800355e:	091b      	lsrs	r3, r3, #4
 8003560:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003562:	4a13      	ldr	r2, [pc, #76]	@ (80035b0 <DMA_CalcBaseAndBitshift+0x68>)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	4413      	add	r3, r2
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	461a      	mov	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2b03      	cmp	r3, #3
 8003574:	d909      	bls.n	800358a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800357e:	f023 0303 	bic.w	r3, r3, #3
 8003582:	1d1a      	adds	r2, r3, #4
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	659a      	str	r2, [r3, #88]	@ 0x58
 8003588:	e007      	b.n	800359a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003592:	f023 0303 	bic.w	r3, r3, #3
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3714      	adds	r7, #20
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	aaaaaaab 	.word	0xaaaaaaab
 80035b0:	0800cb78 	.word	0x0800cb78

080035b4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b085      	sub	sp, #20
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035bc:	2300      	movs	r3, #0
 80035be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d11f      	bne.n	800360e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	2b03      	cmp	r3, #3
 80035d2:	d856      	bhi.n	8003682 <DMA_CheckFifoParam+0xce>
 80035d4:	a201      	add	r2, pc, #4	@ (adr r2, 80035dc <DMA_CheckFifoParam+0x28>)
 80035d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035da:	bf00      	nop
 80035dc:	080035ed 	.word	0x080035ed
 80035e0:	080035ff 	.word	0x080035ff
 80035e4:	080035ed 	.word	0x080035ed
 80035e8:	08003683 	.word	0x08003683
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d046      	beq.n	8003686 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035fc:	e043      	b.n	8003686 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003602:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003606:	d140      	bne.n	800368a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800360c:	e03d      	b.n	800368a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003616:	d121      	bne.n	800365c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	2b03      	cmp	r3, #3
 800361c:	d837      	bhi.n	800368e <DMA_CheckFifoParam+0xda>
 800361e:	a201      	add	r2, pc, #4	@ (adr r2, 8003624 <DMA_CheckFifoParam+0x70>)
 8003620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003624:	08003635 	.word	0x08003635
 8003628:	0800363b 	.word	0x0800363b
 800362c:	08003635 	.word	0x08003635
 8003630:	0800364d 	.word	0x0800364d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	73fb      	strb	r3, [r7, #15]
      break;
 8003638:	e030      	b.n	800369c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800363e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d025      	beq.n	8003692 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800364a:	e022      	b.n	8003692 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003650:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003654:	d11f      	bne.n	8003696 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800365a:	e01c      	b.n	8003696 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	2b02      	cmp	r3, #2
 8003660:	d903      	bls.n	800366a <DMA_CheckFifoParam+0xb6>
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	2b03      	cmp	r3, #3
 8003666:	d003      	beq.n	8003670 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003668:	e018      	b.n	800369c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	73fb      	strb	r3, [r7, #15]
      break;
 800366e:	e015      	b.n	800369c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003674:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00e      	beq.n	800369a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	73fb      	strb	r3, [r7, #15]
      break;
 8003680:	e00b      	b.n	800369a <DMA_CheckFifoParam+0xe6>
      break;
 8003682:	bf00      	nop
 8003684:	e00a      	b.n	800369c <DMA_CheckFifoParam+0xe8>
      break;
 8003686:	bf00      	nop
 8003688:	e008      	b.n	800369c <DMA_CheckFifoParam+0xe8>
      break;
 800368a:	bf00      	nop
 800368c:	e006      	b.n	800369c <DMA_CheckFifoParam+0xe8>
      break;
 800368e:	bf00      	nop
 8003690:	e004      	b.n	800369c <DMA_CheckFifoParam+0xe8>
      break;
 8003692:	bf00      	nop
 8003694:	e002      	b.n	800369c <DMA_CheckFifoParam+0xe8>
      break;   
 8003696:	bf00      	nop
 8003698:	e000      	b.n	800369c <DMA_CheckFifoParam+0xe8>
      break;
 800369a:	bf00      	nop
    }
  } 
  
  return status; 
 800369c:	7bfb      	ldrb	r3, [r7, #15]
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3714      	adds	r7, #20
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop

080036ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b089      	sub	sp, #36	@ 0x24
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036b6:	2300      	movs	r3, #0
 80036b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036ba:	2300      	movs	r3, #0
 80036bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036be:	2300      	movs	r3, #0
 80036c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036c2:	2300      	movs	r3, #0
 80036c4:	61fb      	str	r3, [r7, #28]
 80036c6:	e16b      	b.n	80039a0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036c8:	2201      	movs	r2, #1
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	fa02 f303 	lsl.w	r3, r2, r3
 80036d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	697a      	ldr	r2, [r7, #20]
 80036d8:	4013      	ands	r3, r2
 80036da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	f040 815a 	bne.w	800399a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f003 0303 	and.w	r3, r3, #3
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d005      	beq.n	80036fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d130      	bne.n	8003760 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	005b      	lsls	r3, r3, #1
 8003708:	2203      	movs	r2, #3
 800370a:	fa02 f303 	lsl.w	r3, r2, r3
 800370e:	43db      	mvns	r3, r3
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	4013      	ands	r3, r2
 8003714:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	68da      	ldr	r2, [r3, #12]
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	005b      	lsls	r3, r3, #1
 800371e:	fa02 f303 	lsl.w	r3, r2, r3
 8003722:	69ba      	ldr	r2, [r7, #24]
 8003724:	4313      	orrs	r3, r2
 8003726:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	69ba      	ldr	r2, [r7, #24]
 800372c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003734:	2201      	movs	r2, #1
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	fa02 f303 	lsl.w	r3, r2, r3
 800373c:	43db      	mvns	r3, r3
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	4013      	ands	r3, r2
 8003742:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	091b      	lsrs	r3, r3, #4
 800374a:	f003 0201 	and.w	r2, r3, #1
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	fa02 f303 	lsl.w	r3, r2, r3
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	4313      	orrs	r3, r2
 8003758:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	69ba      	ldr	r2, [r7, #24]
 800375e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f003 0303 	and.w	r3, r3, #3
 8003768:	2b03      	cmp	r3, #3
 800376a:	d017      	beq.n	800379c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	005b      	lsls	r3, r3, #1
 8003776:	2203      	movs	r2, #3
 8003778:	fa02 f303 	lsl.w	r3, r2, r3
 800377c:	43db      	mvns	r3, r3
 800377e:	69ba      	ldr	r2, [r7, #24]
 8003780:	4013      	ands	r3, r2
 8003782:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	689a      	ldr	r2, [r3, #8]
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	005b      	lsls	r3, r3, #1
 800378c:	fa02 f303 	lsl.w	r3, r2, r3
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	4313      	orrs	r3, r2
 8003794:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f003 0303 	and.w	r3, r3, #3
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d123      	bne.n	80037f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	08da      	lsrs	r2, r3, #3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	3208      	adds	r2, #8
 80037b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	f003 0307 	and.w	r3, r3, #7
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	220f      	movs	r2, #15
 80037c0:	fa02 f303 	lsl.w	r3, r2, r3
 80037c4:	43db      	mvns	r3, r3
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	4013      	ands	r3, r2
 80037ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	691a      	ldr	r2, [r3, #16]
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	f003 0307 	and.w	r3, r3, #7
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	fa02 f303 	lsl.w	r3, r2, r3
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	4313      	orrs	r3, r2
 80037e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	08da      	lsrs	r2, r3, #3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	3208      	adds	r2, #8
 80037ea:	69b9      	ldr	r1, [r7, #24]
 80037ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	005b      	lsls	r3, r3, #1
 80037fa:	2203      	movs	r2, #3
 80037fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003800:	43db      	mvns	r3, r3
 8003802:	69ba      	ldr	r2, [r7, #24]
 8003804:	4013      	ands	r3, r2
 8003806:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f003 0203 	and.w	r2, r3, #3
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	005b      	lsls	r3, r3, #1
 8003814:	fa02 f303 	lsl.w	r3, r2, r3
 8003818:	69ba      	ldr	r2, [r7, #24]
 800381a:	4313      	orrs	r3, r2
 800381c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800382c:	2b00      	cmp	r3, #0
 800382e:	f000 80b4 	beq.w	800399a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003832:	2300      	movs	r3, #0
 8003834:	60fb      	str	r3, [r7, #12]
 8003836:	4b60      	ldr	r3, [pc, #384]	@ (80039b8 <HAL_GPIO_Init+0x30c>)
 8003838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800383a:	4a5f      	ldr	r2, [pc, #380]	@ (80039b8 <HAL_GPIO_Init+0x30c>)
 800383c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003840:	6453      	str	r3, [r2, #68]	@ 0x44
 8003842:	4b5d      	ldr	r3, [pc, #372]	@ (80039b8 <HAL_GPIO_Init+0x30c>)
 8003844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003846:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800384a:	60fb      	str	r3, [r7, #12]
 800384c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800384e:	4a5b      	ldr	r2, [pc, #364]	@ (80039bc <HAL_GPIO_Init+0x310>)
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	089b      	lsrs	r3, r3, #2
 8003854:	3302      	adds	r3, #2
 8003856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800385a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	f003 0303 	and.w	r3, r3, #3
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	220f      	movs	r2, #15
 8003866:	fa02 f303 	lsl.w	r3, r2, r3
 800386a:	43db      	mvns	r3, r3
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	4013      	ands	r3, r2
 8003870:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a52      	ldr	r2, [pc, #328]	@ (80039c0 <HAL_GPIO_Init+0x314>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d02b      	beq.n	80038d2 <HAL_GPIO_Init+0x226>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a51      	ldr	r2, [pc, #324]	@ (80039c4 <HAL_GPIO_Init+0x318>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d025      	beq.n	80038ce <HAL_GPIO_Init+0x222>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a50      	ldr	r2, [pc, #320]	@ (80039c8 <HAL_GPIO_Init+0x31c>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d01f      	beq.n	80038ca <HAL_GPIO_Init+0x21e>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a4f      	ldr	r2, [pc, #316]	@ (80039cc <HAL_GPIO_Init+0x320>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d019      	beq.n	80038c6 <HAL_GPIO_Init+0x21a>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a4e      	ldr	r2, [pc, #312]	@ (80039d0 <HAL_GPIO_Init+0x324>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d013      	beq.n	80038c2 <HAL_GPIO_Init+0x216>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a4d      	ldr	r2, [pc, #308]	@ (80039d4 <HAL_GPIO_Init+0x328>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d00d      	beq.n	80038be <HAL_GPIO_Init+0x212>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a4c      	ldr	r2, [pc, #304]	@ (80039d8 <HAL_GPIO_Init+0x32c>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d007      	beq.n	80038ba <HAL_GPIO_Init+0x20e>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a4b      	ldr	r2, [pc, #300]	@ (80039dc <HAL_GPIO_Init+0x330>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d101      	bne.n	80038b6 <HAL_GPIO_Init+0x20a>
 80038b2:	2307      	movs	r3, #7
 80038b4:	e00e      	b.n	80038d4 <HAL_GPIO_Init+0x228>
 80038b6:	2308      	movs	r3, #8
 80038b8:	e00c      	b.n	80038d4 <HAL_GPIO_Init+0x228>
 80038ba:	2306      	movs	r3, #6
 80038bc:	e00a      	b.n	80038d4 <HAL_GPIO_Init+0x228>
 80038be:	2305      	movs	r3, #5
 80038c0:	e008      	b.n	80038d4 <HAL_GPIO_Init+0x228>
 80038c2:	2304      	movs	r3, #4
 80038c4:	e006      	b.n	80038d4 <HAL_GPIO_Init+0x228>
 80038c6:	2303      	movs	r3, #3
 80038c8:	e004      	b.n	80038d4 <HAL_GPIO_Init+0x228>
 80038ca:	2302      	movs	r3, #2
 80038cc:	e002      	b.n	80038d4 <HAL_GPIO_Init+0x228>
 80038ce:	2301      	movs	r3, #1
 80038d0:	e000      	b.n	80038d4 <HAL_GPIO_Init+0x228>
 80038d2:	2300      	movs	r3, #0
 80038d4:	69fa      	ldr	r2, [r7, #28]
 80038d6:	f002 0203 	and.w	r2, r2, #3
 80038da:	0092      	lsls	r2, r2, #2
 80038dc:	4093      	lsls	r3, r2
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038e4:	4935      	ldr	r1, [pc, #212]	@ (80039bc <HAL_GPIO_Init+0x310>)
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	089b      	lsrs	r3, r3, #2
 80038ea:	3302      	adds	r3, #2
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038f2:	4b3b      	ldr	r3, [pc, #236]	@ (80039e0 <HAL_GPIO_Init+0x334>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	43db      	mvns	r3, r3
 80038fc:	69ba      	ldr	r2, [r7, #24]
 80038fe:	4013      	ands	r3, r2
 8003900:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d003      	beq.n	8003916 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	4313      	orrs	r3, r2
 8003914:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003916:	4a32      	ldr	r2, [pc, #200]	@ (80039e0 <HAL_GPIO_Init+0x334>)
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800391c:	4b30      	ldr	r3, [pc, #192]	@ (80039e0 <HAL_GPIO_Init+0x334>)
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	43db      	mvns	r3, r3
 8003926:	69ba      	ldr	r2, [r7, #24]
 8003928:	4013      	ands	r3, r2
 800392a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d003      	beq.n	8003940 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	4313      	orrs	r3, r2
 800393e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003940:	4a27      	ldr	r2, [pc, #156]	@ (80039e0 <HAL_GPIO_Init+0x334>)
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003946:	4b26      	ldr	r3, [pc, #152]	@ (80039e0 <HAL_GPIO_Init+0x334>)
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	43db      	mvns	r3, r3
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	4013      	ands	r3, r2
 8003954:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d003      	beq.n	800396a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003962:	69ba      	ldr	r2, [r7, #24]
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	4313      	orrs	r3, r2
 8003968:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800396a:	4a1d      	ldr	r2, [pc, #116]	@ (80039e0 <HAL_GPIO_Init+0x334>)
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003970:	4b1b      	ldr	r3, [pc, #108]	@ (80039e0 <HAL_GPIO_Init+0x334>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	43db      	mvns	r3, r3
 800397a:	69ba      	ldr	r2, [r7, #24]
 800397c:	4013      	ands	r3, r2
 800397e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d003      	beq.n	8003994 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	4313      	orrs	r3, r2
 8003992:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003994:	4a12      	ldr	r2, [pc, #72]	@ (80039e0 <HAL_GPIO_Init+0x334>)
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	3301      	adds	r3, #1
 800399e:	61fb      	str	r3, [r7, #28]
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	2b0f      	cmp	r3, #15
 80039a4:	f67f ae90 	bls.w	80036c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039a8:	bf00      	nop
 80039aa:	bf00      	nop
 80039ac:	3724      	adds	r7, #36	@ 0x24
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	40023800 	.word	0x40023800
 80039bc:	40013800 	.word	0x40013800
 80039c0:	40020000 	.word	0x40020000
 80039c4:	40020400 	.word	0x40020400
 80039c8:	40020800 	.word	0x40020800
 80039cc:	40020c00 	.word	0x40020c00
 80039d0:	40021000 	.word	0x40021000
 80039d4:	40021400 	.word	0x40021400
 80039d8:	40021800 	.word	0x40021800
 80039dc:	40021c00 	.word	0x40021c00
 80039e0:	40013c00 	.word	0x40013c00

080039e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b085      	sub	sp, #20
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	460b      	mov	r3, r1
 80039ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	691a      	ldr	r2, [r3, #16]
 80039f4:	887b      	ldrh	r3, [r7, #2]
 80039f6:	4013      	ands	r3, r2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d002      	beq.n	8003a02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80039fc:	2301      	movs	r3, #1
 80039fe:	73fb      	strb	r3, [r7, #15]
 8003a00:	e001      	b.n	8003a06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a02:	2300      	movs	r3, #0
 8003a04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3714      	adds	r7, #20
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	807b      	strh	r3, [r7, #2]
 8003a20:	4613      	mov	r3, r2
 8003a22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a24:	787b      	ldrb	r3, [r7, #1]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d003      	beq.n	8003a32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a2a:	887a      	ldrh	r2, [r7, #2]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a30:	e003      	b.n	8003a3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a32:	887b      	ldrh	r3, [r7, #2]
 8003a34:	041a      	lsls	r2, r3, #16
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	619a      	str	r2, [r3, #24]
}
 8003a3a:	bf00      	nop
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
	...

08003a48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	4603      	mov	r3, r0
 8003a50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003a52:	4b08      	ldr	r3, [pc, #32]	@ (8003a74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a54:	695a      	ldr	r2, [r3, #20]
 8003a56:	88fb      	ldrh	r3, [r7, #6]
 8003a58:	4013      	ands	r3, r2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d006      	beq.n	8003a6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a5e:	4a05      	ldr	r2, [pc, #20]	@ (8003a74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a60:	88fb      	ldrh	r3, [r7, #6]
 8003a62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a64:	88fb      	ldrh	r3, [r7, #6]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7fe f810 	bl	8001a8c <HAL_GPIO_EXTI_Callback>
  }
}
 8003a6c:	bf00      	nop
 8003a6e:	3708      	adds	r7, #8
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	40013c00 	.word	0x40013c00

08003a78 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b086      	sub	sp, #24
 8003a7c:	af02      	add	r7, sp, #8
 8003a7e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d101      	bne.n	8003a8a <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e059      	b.n	8003b3e <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d106      	bne.n	8003aaa <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f008 f8db 	bl	800bc60 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2203      	movs	r2, #3
 8003aae:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ab8:	d102      	bne.n	8003ac0 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f004 fee8 	bl	800889a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6818      	ldr	r0, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	7c1a      	ldrb	r2, [r3, #16]
 8003ad2:	f88d 2000 	strb.w	r2, [sp]
 8003ad6:	3304      	adds	r3, #4
 8003ad8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ada:	f004 fe69 	bl	80087b0 <USB_CoreInit>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d005      	beq.n	8003af0 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2202      	movs	r2, #2
 8003ae8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e026      	b.n	8003b3e <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2101      	movs	r1, #1
 8003af6:	4618      	mov	r0, r3
 8003af8:	f004 fee0 	bl	80088bc <USB_SetCurrentMode>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d005      	beq.n	8003b0e <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2202      	movs	r2, #2
 8003b06:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e017      	b.n	8003b3e <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6818      	ldr	r0, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	7c1a      	ldrb	r2, [r3, #16]
 8003b16:	f88d 2000 	strb.w	r2, [sp]
 8003b1a:	3304      	adds	r3, #4
 8003b1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b1e:	f005 f889 	bl	8008c34 <USB_HostInit>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d005      	beq.n	8003b34 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2202      	movs	r2, #2
 8003b2c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e004      	b.n	8003b3e <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8003b46:	b590      	push	{r4, r7, lr}
 8003b48:	b08b      	sub	sp, #44	@ 0x2c
 8003b4a:	af04      	add	r7, sp, #16
 8003b4c:	6078      	str	r0, [r7, #4]
 8003b4e:	4608      	mov	r0, r1
 8003b50:	4611      	mov	r1, r2
 8003b52:	461a      	mov	r2, r3
 8003b54:	4603      	mov	r3, r0
 8003b56:	70fb      	strb	r3, [r7, #3]
 8003b58:	460b      	mov	r3, r1
 8003b5a:	70bb      	strb	r3, [r7, #2]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8003b60:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003b62:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d101      	bne.n	8003b72 <HAL_HCD_HC_Init+0x2c>
 8003b6e:	2302      	movs	r3, #2
 8003b70:	e09d      	b.n	8003cae <HAL_HCD_HC_Init+0x168>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8003b7a:	78fa      	ldrb	r2, [r7, #3]
 8003b7c:	6879      	ldr	r1, [r7, #4]
 8003b7e:	4613      	mov	r3, r2
 8003b80:	011b      	lsls	r3, r3, #4
 8003b82:	1a9b      	subs	r3, r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	440b      	add	r3, r1
 8003b88:	3319      	adds	r3, #25
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003b8e:	78fa      	ldrb	r2, [r7, #3]
 8003b90:	6879      	ldr	r1, [r7, #4]
 8003b92:	4613      	mov	r3, r2
 8003b94:	011b      	lsls	r3, r3, #4
 8003b96:	1a9b      	subs	r3, r3, r2
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	440b      	add	r3, r1
 8003b9c:	3314      	adds	r3, #20
 8003b9e:	787a      	ldrb	r2, [r7, #1]
 8003ba0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003ba2:	78fa      	ldrb	r2, [r7, #3]
 8003ba4:	6879      	ldr	r1, [r7, #4]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	011b      	lsls	r3, r3, #4
 8003baa:	1a9b      	subs	r3, r3, r2
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	440b      	add	r3, r1
 8003bb0:	3315      	adds	r3, #21
 8003bb2:	78fa      	ldrb	r2, [r7, #3]
 8003bb4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003bb6:	78fa      	ldrb	r2, [r7, #3]
 8003bb8:	6879      	ldr	r1, [r7, #4]
 8003bba:	4613      	mov	r3, r2
 8003bbc:	011b      	lsls	r3, r3, #4
 8003bbe:	1a9b      	subs	r3, r3, r2
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	440b      	add	r3, r1
 8003bc4:	3326      	adds	r3, #38	@ 0x26
 8003bc6:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8003bca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003bcc:	78fa      	ldrb	r2, [r7, #3]
 8003bce:	78bb      	ldrb	r3, [r7, #2]
 8003bd0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003bd4:	b2d8      	uxtb	r0, r3
 8003bd6:	6879      	ldr	r1, [r7, #4]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	011b      	lsls	r3, r3, #4
 8003bdc:	1a9b      	subs	r3, r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	440b      	add	r3, r1
 8003be2:	3316      	adds	r3, #22
 8003be4:	4602      	mov	r2, r0
 8003be6:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8003be8:	78fb      	ldrb	r3, [r7, #3]
 8003bea:	4619      	mov	r1, r3
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 fbc7 	bl	8004380 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8003bf2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	da0a      	bge.n	8003c10 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003bfa:	78fa      	ldrb	r2, [r7, #3]
 8003bfc:	6879      	ldr	r1, [r7, #4]
 8003bfe:	4613      	mov	r3, r2
 8003c00:	011b      	lsls	r3, r3, #4
 8003c02:	1a9b      	subs	r3, r3, r2
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	440b      	add	r3, r1
 8003c08:	3317      	adds	r3, #23
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	701a      	strb	r2, [r3, #0]
 8003c0e:	e009      	b.n	8003c24 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003c10:	78fa      	ldrb	r2, [r7, #3]
 8003c12:	6879      	ldr	r1, [r7, #4]
 8003c14:	4613      	mov	r3, r2
 8003c16:	011b      	lsls	r3, r3, #4
 8003c18:	1a9b      	subs	r3, r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	440b      	add	r3, r1
 8003c1e:	3317      	adds	r3, #23
 8003c20:	2200      	movs	r2, #0
 8003c22:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f005 f967 	bl	8008efc <USB_GetHostSpeed>
 8003c2e:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8003c30:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d10b      	bne.n	8003c50 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8003c38:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d107      	bne.n	8003c50 <HAL_HCD_HC_Init+0x10a>
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d104      	bne.n	8003c50 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	2bbc      	cmp	r3, #188	@ 0xbc
 8003c4a:	d901      	bls.n	8003c50 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8003c4c:	23bc      	movs	r3, #188	@ 0xbc
 8003c4e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8003c50:	78fa      	ldrb	r2, [r7, #3]
 8003c52:	6879      	ldr	r1, [r7, #4]
 8003c54:	4613      	mov	r3, r2
 8003c56:	011b      	lsls	r3, r3, #4
 8003c58:	1a9b      	subs	r3, r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	440b      	add	r3, r1
 8003c5e:	3318      	adds	r3, #24
 8003c60:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8003c64:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8003c66:	78fa      	ldrb	r2, [r7, #3]
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	b298      	uxth	r0, r3
 8003c6c:	6879      	ldr	r1, [r7, #4]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	011b      	lsls	r3, r3, #4
 8003c72:	1a9b      	subs	r3, r3, r2
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	440b      	add	r3, r1
 8003c78:	3328      	adds	r3, #40	@ 0x28
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6818      	ldr	r0, [r3, #0]
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	787c      	ldrb	r4, [r7, #1]
 8003c88:	78ba      	ldrb	r2, [r7, #2]
 8003c8a:	78f9      	ldrb	r1, [r7, #3]
 8003c8c:	9302      	str	r3, [sp, #8]
 8003c8e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003c92:	9301      	str	r3, [sp, #4]
 8003c94:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003c98:	9300      	str	r3, [sp, #0]
 8003c9a:	4623      	mov	r3, r4
 8003c9c:	f005 f956 	bl	8008f4c <USB_HC_Init>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8003cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	371c      	adds	r7, #28
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd90      	pop	{r4, r7, pc}

08003cb6 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003cb6:	b580      	push	{r7, lr}
 8003cb8:	b084      	sub	sp, #16
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d101      	bne.n	8003cd4 <HAL_HCD_HC_Halt+0x1e>
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	e00f      	b.n	8003cf4 <HAL_HCD_HC_Halt+0x3e>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	78fa      	ldrb	r2, [r7, #3]
 8003ce2:	4611      	mov	r1, r2
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f005 fce8 	bl	80096ba <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8003cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3710      	adds	r7, #16
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	4608      	mov	r0, r1
 8003d06:	4611      	mov	r1, r2
 8003d08:	461a      	mov	r2, r3
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	70fb      	strb	r3, [r7, #3]
 8003d0e:	460b      	mov	r3, r1
 8003d10:	70bb      	strb	r3, [r7, #2]
 8003d12:	4613      	mov	r3, r2
 8003d14:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003d16:	78fa      	ldrb	r2, [r7, #3]
 8003d18:	6879      	ldr	r1, [r7, #4]
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	011b      	lsls	r3, r3, #4
 8003d1e:	1a9b      	subs	r3, r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	440b      	add	r3, r1
 8003d24:	3317      	adds	r3, #23
 8003d26:	78ba      	ldrb	r2, [r7, #2]
 8003d28:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003d2a:	78fa      	ldrb	r2, [r7, #3]
 8003d2c:	6879      	ldr	r1, [r7, #4]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	011b      	lsls	r3, r3, #4
 8003d32:	1a9b      	subs	r3, r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	440b      	add	r3, r1
 8003d38:	3326      	adds	r3, #38	@ 0x26
 8003d3a:	787a      	ldrb	r2, [r7, #1]
 8003d3c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003d3e:	7c3b      	ldrb	r3, [r7, #16]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d114      	bne.n	8003d6e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003d44:	78fa      	ldrb	r2, [r7, #3]
 8003d46:	6879      	ldr	r1, [r7, #4]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	011b      	lsls	r3, r3, #4
 8003d4c:	1a9b      	subs	r3, r3, r2
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	440b      	add	r3, r1
 8003d52:	332a      	adds	r3, #42	@ 0x2a
 8003d54:	2203      	movs	r2, #3
 8003d56:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003d58:	78fa      	ldrb	r2, [r7, #3]
 8003d5a:	6879      	ldr	r1, [r7, #4]
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	011b      	lsls	r3, r3, #4
 8003d60:	1a9b      	subs	r3, r3, r2
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	440b      	add	r3, r1
 8003d66:	3319      	adds	r3, #25
 8003d68:	7f3a      	ldrb	r2, [r7, #28]
 8003d6a:	701a      	strb	r2, [r3, #0]
 8003d6c:	e009      	b.n	8003d82 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003d6e:	78fa      	ldrb	r2, [r7, #3]
 8003d70:	6879      	ldr	r1, [r7, #4]
 8003d72:	4613      	mov	r3, r2
 8003d74:	011b      	lsls	r3, r3, #4
 8003d76:	1a9b      	subs	r3, r3, r2
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	440b      	add	r3, r1
 8003d7c:	332a      	adds	r3, #42	@ 0x2a
 8003d7e:	2202      	movs	r2, #2
 8003d80:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003d82:	787b      	ldrb	r3, [r7, #1]
 8003d84:	2b03      	cmp	r3, #3
 8003d86:	f200 8102 	bhi.w	8003f8e <HAL_HCD_HC_SubmitRequest+0x292>
 8003d8a:	a201      	add	r2, pc, #4	@ (adr r2, 8003d90 <HAL_HCD_HC_SubmitRequest+0x94>)
 8003d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d90:	08003da1 	.word	0x08003da1
 8003d94:	08003f79 	.word	0x08003f79
 8003d98:	08003e65 	.word	0x08003e65
 8003d9c:	08003eef 	.word	0x08003eef
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8003da0:	7c3b      	ldrb	r3, [r7, #16]
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	f040 80f5 	bne.w	8003f92 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8003da8:	78bb      	ldrb	r3, [r7, #2]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d12d      	bne.n	8003e0a <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8003dae:	8b3b      	ldrh	r3, [r7, #24]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d109      	bne.n	8003dc8 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8003db4:	78fa      	ldrb	r2, [r7, #3]
 8003db6:	6879      	ldr	r1, [r7, #4]
 8003db8:	4613      	mov	r3, r2
 8003dba:	011b      	lsls	r3, r3, #4
 8003dbc:	1a9b      	subs	r3, r3, r2
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	440b      	add	r3, r1
 8003dc2:	333d      	adds	r3, #61	@ 0x3d
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8003dc8:	78fa      	ldrb	r2, [r7, #3]
 8003dca:	6879      	ldr	r1, [r7, #4]
 8003dcc:	4613      	mov	r3, r2
 8003dce:	011b      	lsls	r3, r3, #4
 8003dd0:	1a9b      	subs	r3, r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	440b      	add	r3, r1
 8003dd6:	333d      	adds	r3, #61	@ 0x3d
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10a      	bne.n	8003df4 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003dde:	78fa      	ldrb	r2, [r7, #3]
 8003de0:	6879      	ldr	r1, [r7, #4]
 8003de2:	4613      	mov	r3, r2
 8003de4:	011b      	lsls	r3, r3, #4
 8003de6:	1a9b      	subs	r3, r3, r2
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	440b      	add	r3, r1
 8003dec:	332a      	adds	r3, #42	@ 0x2a
 8003dee:	2200      	movs	r2, #0
 8003df0:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8003df2:	e0ce      	b.n	8003f92 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003df4:	78fa      	ldrb	r2, [r7, #3]
 8003df6:	6879      	ldr	r1, [r7, #4]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	011b      	lsls	r3, r3, #4
 8003dfc:	1a9b      	subs	r3, r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	440b      	add	r3, r1
 8003e02:	332a      	adds	r3, #42	@ 0x2a
 8003e04:	2202      	movs	r2, #2
 8003e06:	701a      	strb	r2, [r3, #0]
      break;
 8003e08:	e0c3      	b.n	8003f92 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8003e0a:	78fa      	ldrb	r2, [r7, #3]
 8003e0c:	6879      	ldr	r1, [r7, #4]
 8003e0e:	4613      	mov	r3, r2
 8003e10:	011b      	lsls	r3, r3, #4
 8003e12:	1a9b      	subs	r3, r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	440b      	add	r3, r1
 8003e18:	331a      	adds	r3, #26
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	f040 80b8 	bne.w	8003f92 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8003e22:	78fa      	ldrb	r2, [r7, #3]
 8003e24:	6879      	ldr	r1, [r7, #4]
 8003e26:	4613      	mov	r3, r2
 8003e28:	011b      	lsls	r3, r3, #4
 8003e2a:	1a9b      	subs	r3, r3, r2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	440b      	add	r3, r1
 8003e30:	333c      	adds	r3, #60	@ 0x3c
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d10a      	bne.n	8003e4e <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003e38:	78fa      	ldrb	r2, [r7, #3]
 8003e3a:	6879      	ldr	r1, [r7, #4]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	011b      	lsls	r3, r3, #4
 8003e40:	1a9b      	subs	r3, r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	440b      	add	r3, r1
 8003e46:	332a      	adds	r3, #42	@ 0x2a
 8003e48:	2200      	movs	r2, #0
 8003e4a:	701a      	strb	r2, [r3, #0]
      break;
 8003e4c:	e0a1      	b.n	8003f92 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003e4e:	78fa      	ldrb	r2, [r7, #3]
 8003e50:	6879      	ldr	r1, [r7, #4]
 8003e52:	4613      	mov	r3, r2
 8003e54:	011b      	lsls	r3, r3, #4
 8003e56:	1a9b      	subs	r3, r3, r2
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	440b      	add	r3, r1
 8003e5c:	332a      	adds	r3, #42	@ 0x2a
 8003e5e:	2202      	movs	r2, #2
 8003e60:	701a      	strb	r2, [r3, #0]
      break;
 8003e62:	e096      	b.n	8003f92 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003e64:	78bb      	ldrb	r3, [r7, #2]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d120      	bne.n	8003eac <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003e6a:	78fa      	ldrb	r2, [r7, #3]
 8003e6c:	6879      	ldr	r1, [r7, #4]
 8003e6e:	4613      	mov	r3, r2
 8003e70:	011b      	lsls	r3, r3, #4
 8003e72:	1a9b      	subs	r3, r3, r2
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	440b      	add	r3, r1
 8003e78:	333d      	adds	r3, #61	@ 0x3d
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d10a      	bne.n	8003e96 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003e80:	78fa      	ldrb	r2, [r7, #3]
 8003e82:	6879      	ldr	r1, [r7, #4]
 8003e84:	4613      	mov	r3, r2
 8003e86:	011b      	lsls	r3, r3, #4
 8003e88:	1a9b      	subs	r3, r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	440b      	add	r3, r1
 8003e8e:	332a      	adds	r3, #42	@ 0x2a
 8003e90:	2200      	movs	r2, #0
 8003e92:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003e94:	e07e      	b.n	8003f94 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003e96:	78fa      	ldrb	r2, [r7, #3]
 8003e98:	6879      	ldr	r1, [r7, #4]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	011b      	lsls	r3, r3, #4
 8003e9e:	1a9b      	subs	r3, r3, r2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	440b      	add	r3, r1
 8003ea4:	332a      	adds	r3, #42	@ 0x2a
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	701a      	strb	r2, [r3, #0]
      break;
 8003eaa:	e073      	b.n	8003f94 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003eac:	78fa      	ldrb	r2, [r7, #3]
 8003eae:	6879      	ldr	r1, [r7, #4]
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	011b      	lsls	r3, r3, #4
 8003eb4:	1a9b      	subs	r3, r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	440b      	add	r3, r1
 8003eba:	333c      	adds	r3, #60	@ 0x3c
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10a      	bne.n	8003ed8 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003ec2:	78fa      	ldrb	r2, [r7, #3]
 8003ec4:	6879      	ldr	r1, [r7, #4]
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	011b      	lsls	r3, r3, #4
 8003eca:	1a9b      	subs	r3, r3, r2
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	440b      	add	r3, r1
 8003ed0:	332a      	adds	r3, #42	@ 0x2a
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	701a      	strb	r2, [r3, #0]
      break;
 8003ed6:	e05d      	b.n	8003f94 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003ed8:	78fa      	ldrb	r2, [r7, #3]
 8003eda:	6879      	ldr	r1, [r7, #4]
 8003edc:	4613      	mov	r3, r2
 8003ede:	011b      	lsls	r3, r3, #4
 8003ee0:	1a9b      	subs	r3, r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	440b      	add	r3, r1
 8003ee6:	332a      	adds	r3, #42	@ 0x2a
 8003ee8:	2202      	movs	r2, #2
 8003eea:	701a      	strb	r2, [r3, #0]
      break;
 8003eec:	e052      	b.n	8003f94 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003eee:	78bb      	ldrb	r3, [r7, #2]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d120      	bne.n	8003f36 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003ef4:	78fa      	ldrb	r2, [r7, #3]
 8003ef6:	6879      	ldr	r1, [r7, #4]
 8003ef8:	4613      	mov	r3, r2
 8003efa:	011b      	lsls	r3, r3, #4
 8003efc:	1a9b      	subs	r3, r3, r2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	440b      	add	r3, r1
 8003f02:	333d      	adds	r3, #61	@ 0x3d
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d10a      	bne.n	8003f20 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003f0a:	78fa      	ldrb	r2, [r7, #3]
 8003f0c:	6879      	ldr	r1, [r7, #4]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	011b      	lsls	r3, r3, #4
 8003f12:	1a9b      	subs	r3, r3, r2
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	440b      	add	r3, r1
 8003f18:	332a      	adds	r3, #42	@ 0x2a
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003f1e:	e039      	b.n	8003f94 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003f20:	78fa      	ldrb	r2, [r7, #3]
 8003f22:	6879      	ldr	r1, [r7, #4]
 8003f24:	4613      	mov	r3, r2
 8003f26:	011b      	lsls	r3, r3, #4
 8003f28:	1a9b      	subs	r3, r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	440b      	add	r3, r1
 8003f2e:	332a      	adds	r3, #42	@ 0x2a
 8003f30:	2202      	movs	r2, #2
 8003f32:	701a      	strb	r2, [r3, #0]
      break;
 8003f34:	e02e      	b.n	8003f94 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003f36:	78fa      	ldrb	r2, [r7, #3]
 8003f38:	6879      	ldr	r1, [r7, #4]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	011b      	lsls	r3, r3, #4
 8003f3e:	1a9b      	subs	r3, r3, r2
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	440b      	add	r3, r1
 8003f44:	333c      	adds	r3, #60	@ 0x3c
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d10a      	bne.n	8003f62 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003f4c:	78fa      	ldrb	r2, [r7, #3]
 8003f4e:	6879      	ldr	r1, [r7, #4]
 8003f50:	4613      	mov	r3, r2
 8003f52:	011b      	lsls	r3, r3, #4
 8003f54:	1a9b      	subs	r3, r3, r2
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	440b      	add	r3, r1
 8003f5a:	332a      	adds	r3, #42	@ 0x2a
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	701a      	strb	r2, [r3, #0]
      break;
 8003f60:	e018      	b.n	8003f94 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003f62:	78fa      	ldrb	r2, [r7, #3]
 8003f64:	6879      	ldr	r1, [r7, #4]
 8003f66:	4613      	mov	r3, r2
 8003f68:	011b      	lsls	r3, r3, #4
 8003f6a:	1a9b      	subs	r3, r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	440b      	add	r3, r1
 8003f70:	332a      	adds	r3, #42	@ 0x2a
 8003f72:	2202      	movs	r2, #2
 8003f74:	701a      	strb	r2, [r3, #0]
      break;
 8003f76:	e00d      	b.n	8003f94 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003f78:	78fa      	ldrb	r2, [r7, #3]
 8003f7a:	6879      	ldr	r1, [r7, #4]
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	011b      	lsls	r3, r3, #4
 8003f80:	1a9b      	subs	r3, r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	440b      	add	r3, r1
 8003f86:	332a      	adds	r3, #42	@ 0x2a
 8003f88:	2200      	movs	r2, #0
 8003f8a:	701a      	strb	r2, [r3, #0]
      break;
 8003f8c:	e002      	b.n	8003f94 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8003f8e:	bf00      	nop
 8003f90:	e000      	b.n	8003f94 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8003f92:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003f94:	78fa      	ldrb	r2, [r7, #3]
 8003f96:	6879      	ldr	r1, [r7, #4]
 8003f98:	4613      	mov	r3, r2
 8003f9a:	011b      	lsls	r3, r3, #4
 8003f9c:	1a9b      	subs	r3, r3, r2
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	440b      	add	r3, r1
 8003fa2:	332c      	adds	r3, #44	@ 0x2c
 8003fa4:	697a      	ldr	r2, [r7, #20]
 8003fa6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003fa8:	78fa      	ldrb	r2, [r7, #3]
 8003faa:	8b39      	ldrh	r1, [r7, #24]
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	4613      	mov	r3, r2
 8003fb0:	011b      	lsls	r3, r3, #4
 8003fb2:	1a9b      	subs	r3, r3, r2
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	4403      	add	r3, r0
 8003fb8:	3334      	adds	r3, #52	@ 0x34
 8003fba:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003fbc:	78fa      	ldrb	r2, [r7, #3]
 8003fbe:	6879      	ldr	r1, [r7, #4]
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	011b      	lsls	r3, r3, #4
 8003fc4:	1a9b      	subs	r3, r3, r2
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	440b      	add	r3, r1
 8003fca:	334c      	adds	r3, #76	@ 0x4c
 8003fcc:	2200      	movs	r2, #0
 8003fce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003fd0:	78fa      	ldrb	r2, [r7, #3]
 8003fd2:	6879      	ldr	r1, [r7, #4]
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	011b      	lsls	r3, r3, #4
 8003fd8:	1a9b      	subs	r3, r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	440b      	add	r3, r1
 8003fde:	3338      	adds	r3, #56	@ 0x38
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003fe4:	78fa      	ldrb	r2, [r7, #3]
 8003fe6:	6879      	ldr	r1, [r7, #4]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	011b      	lsls	r3, r3, #4
 8003fec:	1a9b      	subs	r3, r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	440b      	add	r3, r1
 8003ff2:	3315      	adds	r3, #21
 8003ff4:	78fa      	ldrb	r2, [r7, #3]
 8003ff6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003ff8:	78fa      	ldrb	r2, [r7, #3]
 8003ffa:	6879      	ldr	r1, [r7, #4]
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	011b      	lsls	r3, r3, #4
 8004000:	1a9b      	subs	r3, r3, r2
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	440b      	add	r3, r1
 8004006:	334d      	adds	r3, #77	@ 0x4d
 8004008:	2200      	movs	r2, #0
 800400a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6818      	ldr	r0, [r3, #0]
 8004010:	78fa      	ldrb	r2, [r7, #3]
 8004012:	4613      	mov	r3, r2
 8004014:	011b      	lsls	r3, r3, #4
 8004016:	1a9b      	subs	r3, r3, r2
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	3310      	adds	r3, #16
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	4413      	add	r3, r2
 8004020:	1d19      	adds	r1, r3, #4
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	799b      	ldrb	r3, [r3, #6]
 8004026:	461a      	mov	r2, r3
 8004028:	f005 f8bc 	bl	80091a4 <USB_HC_StartXfer>
 800402c:	4603      	mov	r3, r0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3708      	adds	r7, #8
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop

08004038 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b086      	sub	sp, #24
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4618      	mov	r0, r3
 8004050:	f004 fdaa 	bl	8008ba8 <USB_GetMode>
 8004054:	4603      	mov	r3, r0
 8004056:	2b01      	cmp	r3, #1
 8004058:	f040 80fb 	bne.w	8004252 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4618      	mov	r0, r3
 8004062:	f004 fd6d 	bl	8008b40 <USB_ReadInterrupts>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	f000 80f1 	beq.w	8004250 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4618      	mov	r0, r3
 8004074:	f004 fd64 	bl	8008b40 <USB_ReadInterrupts>
 8004078:	4603      	mov	r3, r0
 800407a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800407e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004082:	d104      	bne.n	800408e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800408c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4618      	mov	r0, r3
 8004094:	f004 fd54 	bl	8008b40 <USB_ReadInterrupts>
 8004098:	4603      	mov	r3, r0
 800409a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800409e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040a2:	d104      	bne.n	80040ae <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80040ac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4618      	mov	r0, r3
 80040b4:	f004 fd44 	bl	8008b40 <USB_ReadInterrupts>
 80040b8:	4603      	mov	r3, r0
 80040ba:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80040be:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80040c2:	d104      	bne.n	80040ce <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80040cc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4618      	mov	r0, r3
 80040d4:	f004 fd34 	bl	8008b40 <USB_ReadInterrupts>
 80040d8:	4603      	mov	r3, r0
 80040da:	f003 0302 	and.w	r3, r3, #2
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d103      	bne.n	80040ea <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2202      	movs	r2, #2
 80040e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4618      	mov	r0, r3
 80040f0:	f004 fd26 	bl	8008b40 <USB_ReadInterrupts>
 80040f4:	4603      	mov	r3, r0
 80040f6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80040fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040fe:	d120      	bne.n	8004142 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8004108:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0301 	and.w	r3, r3, #1
 8004116:	2b00      	cmp	r3, #0
 8004118:	d113      	bne.n	8004142 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800411a:	2110      	movs	r1, #16
 800411c:	6938      	ldr	r0, [r7, #16]
 800411e:	f004 fc19 	bl	8008954 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004122:	6938      	ldr	r0, [r7, #16]
 8004124:	f004 fc48 	bl	80089b8 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	7a5b      	ldrb	r3, [r3, #9]
 800412c:	2b02      	cmp	r3, #2
 800412e:	d105      	bne.n	800413c <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2101      	movs	r1, #1
 8004136:	4618      	mov	r0, r3
 8004138:	f004 fe40 	bl	8008dbc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f007 fe0d 	bl	800bd5c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4618      	mov	r0, r3
 8004148:	f004 fcfa 	bl	8008b40 <USB_ReadInterrupts>
 800414c:	4603      	mov	r3, r0
 800414e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004152:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004156:	d102      	bne.n	800415e <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f001 fd4d 	bl	8005bf8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4618      	mov	r0, r3
 8004164:	f004 fcec 	bl	8008b40 <USB_ReadInterrupts>
 8004168:	4603      	mov	r3, r0
 800416a:	f003 0308 	and.w	r3, r3, #8
 800416e:	2b08      	cmp	r3, #8
 8004170:	d106      	bne.n	8004180 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f007 fdd6 	bl	800bd24 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2208      	movs	r2, #8
 800417e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4618      	mov	r0, r3
 8004186:	f004 fcdb 	bl	8008b40 <USB_ReadInterrupts>
 800418a:	4603      	mov	r3, r0
 800418c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004190:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004194:	d139      	bne.n	800420a <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4618      	mov	r0, r3
 800419c:	f005 fa7c 	bl	8009698 <USB_HC_ReadInterrupt>
 80041a0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80041a2:	2300      	movs	r3, #0
 80041a4:	617b      	str	r3, [r7, #20]
 80041a6:	e025      	b.n	80041f4 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	f003 030f 	and.w	r3, r3, #15
 80041ae:	68ba      	ldr	r2, [r7, #8]
 80041b0:	fa22 f303 	lsr.w	r3, r2, r3
 80041b4:	f003 0301 	and.w	r3, r3, #1
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d018      	beq.n	80041ee <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	015a      	lsls	r2, r3, #5
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	4413      	add	r3, r2
 80041c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80041ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041d2:	d106      	bne.n	80041e2 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	4619      	mov	r1, r3
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 f905 	bl	80043ea <HCD_HC_IN_IRQHandler>
 80041e0:	e005      	b.n	80041ee <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	4619      	mov	r1, r3
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f000 ff67 	bl	80050bc <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	3301      	adds	r3, #1
 80041f2:	617b      	str	r3, [r7, #20]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	795b      	ldrb	r3, [r3, #5]
 80041f8:	461a      	mov	r2, r3
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d3d3      	bcc.n	80041a8 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004208:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4618      	mov	r0, r3
 8004210:	f004 fc96 	bl	8008b40 <USB_ReadInterrupts>
 8004214:	4603      	mov	r3, r0
 8004216:	f003 0310 	and.w	r3, r3, #16
 800421a:	2b10      	cmp	r3, #16
 800421c:	d101      	bne.n	8004222 <HAL_HCD_IRQHandler+0x1ea>
 800421e:	2301      	movs	r3, #1
 8004220:	e000      	b.n	8004224 <HAL_HCD_IRQHandler+0x1ec>
 8004222:	2300      	movs	r3, #0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d014      	beq.n	8004252 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	699a      	ldr	r2, [r3, #24]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f022 0210 	bic.w	r2, r2, #16
 8004236:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f001 fbfe 	bl	8005a3a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	699a      	ldr	r2, [r3, #24]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f042 0210 	orr.w	r2, r2, #16
 800424c:	619a      	str	r2, [r3, #24]
 800424e:	e000      	b.n	8004252 <HAL_HCD_IRQHandler+0x21a>
      return;
 8004250:	bf00      	nop
    }
  }
}
 8004252:	3718      	adds	r7, #24
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004266:	2b01      	cmp	r3, #1
 8004268:	d101      	bne.n	800426e <HAL_HCD_Start+0x16>
 800426a:	2302      	movs	r3, #2
 800426c:	e013      	b.n	8004296 <HAL_HCD_Start+0x3e>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2201      	movs	r2, #1
 8004272:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2101      	movs	r1, #1
 800427c:	4618      	mov	r0, r3
 800427e:	f004 fe04 	bl	8008e8a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4618      	mov	r0, r3
 8004288:	f004 faf6 	bl	8008878 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3708      	adds	r7, #8
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	b082      	sub	sp, #8
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d101      	bne.n	80042b4 <HAL_HCD_Stop+0x16>
 80042b0:	2302      	movs	r3, #2
 80042b2:	e00d      	b.n	80042d0 <HAL_HCD_Stop+0x32>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4618      	mov	r0, r3
 80042c2:	f005 fb57 	bl	8009974 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3708      	adds	r7, #8
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4618      	mov	r0, r3
 80042e6:	f004 fda6 	bl	8008e36 <USB_ResetPort>
 80042ea:	4603      	mov	r3, r0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3708      	adds	r7, #8
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	460b      	mov	r3, r1
 80042fe:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004300:	78fa      	ldrb	r2, [r7, #3]
 8004302:	6879      	ldr	r1, [r7, #4]
 8004304:	4613      	mov	r3, r2
 8004306:	011b      	lsls	r3, r3, #4
 8004308:	1a9b      	subs	r3, r3, r2
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	440b      	add	r3, r1
 800430e:	334c      	adds	r3, #76	@ 0x4c
 8004310:	781b      	ldrb	r3, [r3, #0]
}
 8004312:	4618      	mov	r0, r3
 8004314:	370c      	adds	r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800431e:	b480      	push	{r7}
 8004320:	b083      	sub	sp, #12
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
 8004326:	460b      	mov	r3, r1
 8004328:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800432a:	78fa      	ldrb	r2, [r7, #3]
 800432c:	6879      	ldr	r1, [r7, #4]
 800432e:	4613      	mov	r3, r2
 8004330:	011b      	lsls	r3, r3, #4
 8004332:	1a9b      	subs	r3, r3, r2
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	440b      	add	r3, r1
 8004338:	3338      	adds	r3, #56	@ 0x38
 800433a:	681b      	ldr	r3, [r3, #0]
}
 800433c:	4618      	mov	r0, r3
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4618      	mov	r0, r3
 8004356:	f004 fde8 	bl	8008f2a <USB_GetCurrentFrame>
 800435a:	4603      	mov	r3, r0
}
 800435c:	4618      	mov	r0, r3
 800435e:	3708      	adds	r7, #8
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}

08004364 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4618      	mov	r0, r3
 8004372:	f004 fdc3 	bl	8008efc <USB_GetHostSpeed>
 8004376:	4603      	mov	r3, r0
}
 8004378:	4618      	mov	r0, r3
 800437a:	3708      	adds	r7, #8
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	460b      	mov	r3, r1
 800438a:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 800438c:	78fa      	ldrb	r2, [r7, #3]
 800438e:	6879      	ldr	r1, [r7, #4]
 8004390:	4613      	mov	r3, r2
 8004392:	011b      	lsls	r3, r3, #4
 8004394:	1a9b      	subs	r3, r3, r2
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	440b      	add	r3, r1
 800439a:	331a      	adds	r3, #26
 800439c:	2200      	movs	r2, #0
 800439e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80043a0:	78fa      	ldrb	r2, [r7, #3]
 80043a2:	6879      	ldr	r1, [r7, #4]
 80043a4:	4613      	mov	r3, r2
 80043a6:	011b      	lsls	r3, r3, #4
 80043a8:	1a9b      	subs	r3, r3, r2
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	440b      	add	r3, r1
 80043ae:	331b      	adds	r3, #27
 80043b0:	2200      	movs	r2, #0
 80043b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80043b4:	78fa      	ldrb	r2, [r7, #3]
 80043b6:	6879      	ldr	r1, [r7, #4]
 80043b8:	4613      	mov	r3, r2
 80043ba:	011b      	lsls	r3, r3, #4
 80043bc:	1a9b      	subs	r3, r3, r2
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	440b      	add	r3, r1
 80043c2:	3325      	adds	r3, #37	@ 0x25
 80043c4:	2200      	movs	r2, #0
 80043c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80043c8:	78fa      	ldrb	r2, [r7, #3]
 80043ca:	6879      	ldr	r1, [r7, #4]
 80043cc:	4613      	mov	r3, r2
 80043ce:	011b      	lsls	r3, r3, #4
 80043d0:	1a9b      	subs	r3, r3, r2
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	440b      	add	r3, r1
 80043d6:	3324      	adds	r3, #36	@ 0x24
 80043d8:	2200      	movs	r2, #0
 80043da:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	370c      	adds	r7, #12
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr

080043ea <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b086      	sub	sp, #24
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
 80043f2:	460b      	mov	r3, r1
 80043f4:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	78fa      	ldrb	r2, [r7, #3]
 8004406:	4611      	mov	r1, r2
 8004408:	4618      	mov	r0, r3
 800440a:	f004 fbac 	bl	8008b66 <USB_ReadChInterrupts>
 800440e:	4603      	mov	r3, r0
 8004410:	f003 0304 	and.w	r3, r3, #4
 8004414:	2b04      	cmp	r3, #4
 8004416:	d11a      	bne.n	800444e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004418:	78fb      	ldrb	r3, [r7, #3]
 800441a:	015a      	lsls	r2, r3, #5
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	4413      	add	r3, r2
 8004420:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004424:	461a      	mov	r2, r3
 8004426:	2304      	movs	r3, #4
 8004428:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800442a:	78fa      	ldrb	r2, [r7, #3]
 800442c:	6879      	ldr	r1, [r7, #4]
 800442e:	4613      	mov	r3, r2
 8004430:	011b      	lsls	r3, r3, #4
 8004432:	1a9b      	subs	r3, r3, r2
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	440b      	add	r3, r1
 8004438:	334d      	adds	r3, #77	@ 0x4d
 800443a:	2207      	movs	r2, #7
 800443c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	78fa      	ldrb	r2, [r7, #3]
 8004444:	4611      	mov	r1, r2
 8004446:	4618      	mov	r0, r3
 8004448:	f005 f937 	bl	80096ba <USB_HC_Halt>
 800444c:	e09e      	b.n	800458c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	78fa      	ldrb	r2, [r7, #3]
 8004454:	4611      	mov	r1, r2
 8004456:	4618      	mov	r0, r3
 8004458:	f004 fb85 	bl	8008b66 <USB_ReadChInterrupts>
 800445c:	4603      	mov	r3, r0
 800445e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004462:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004466:	d11b      	bne.n	80044a0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8004468:	78fb      	ldrb	r3, [r7, #3]
 800446a:	015a      	lsls	r2, r3, #5
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	4413      	add	r3, r2
 8004470:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004474:	461a      	mov	r2, r3
 8004476:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800447a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 800447c:	78fa      	ldrb	r2, [r7, #3]
 800447e:	6879      	ldr	r1, [r7, #4]
 8004480:	4613      	mov	r3, r2
 8004482:	011b      	lsls	r3, r3, #4
 8004484:	1a9b      	subs	r3, r3, r2
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	440b      	add	r3, r1
 800448a:	334d      	adds	r3, #77	@ 0x4d
 800448c:	2208      	movs	r2, #8
 800448e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	78fa      	ldrb	r2, [r7, #3]
 8004496:	4611      	mov	r1, r2
 8004498:	4618      	mov	r0, r3
 800449a:	f005 f90e 	bl	80096ba <USB_HC_Halt>
 800449e:	e075      	b.n	800458c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	78fa      	ldrb	r2, [r7, #3]
 80044a6:	4611      	mov	r1, r2
 80044a8:	4618      	mov	r0, r3
 80044aa:	f004 fb5c 	bl	8008b66 <USB_ReadChInterrupts>
 80044ae:	4603      	mov	r3, r0
 80044b0:	f003 0308 	and.w	r3, r3, #8
 80044b4:	2b08      	cmp	r3, #8
 80044b6:	d11a      	bne.n	80044ee <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80044b8:	78fb      	ldrb	r3, [r7, #3]
 80044ba:	015a      	lsls	r2, r3, #5
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	4413      	add	r3, r2
 80044c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044c4:	461a      	mov	r2, r3
 80044c6:	2308      	movs	r3, #8
 80044c8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80044ca:	78fa      	ldrb	r2, [r7, #3]
 80044cc:	6879      	ldr	r1, [r7, #4]
 80044ce:	4613      	mov	r3, r2
 80044d0:	011b      	lsls	r3, r3, #4
 80044d2:	1a9b      	subs	r3, r3, r2
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	440b      	add	r3, r1
 80044d8:	334d      	adds	r3, #77	@ 0x4d
 80044da:	2206      	movs	r2, #6
 80044dc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	78fa      	ldrb	r2, [r7, #3]
 80044e4:	4611      	mov	r1, r2
 80044e6:	4618      	mov	r0, r3
 80044e8:	f005 f8e7 	bl	80096ba <USB_HC_Halt>
 80044ec:	e04e      	b.n	800458c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	78fa      	ldrb	r2, [r7, #3]
 80044f4:	4611      	mov	r1, r2
 80044f6:	4618      	mov	r0, r3
 80044f8:	f004 fb35 	bl	8008b66 <USB_ReadChInterrupts>
 80044fc:	4603      	mov	r3, r0
 80044fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004502:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004506:	d11b      	bne.n	8004540 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004508:	78fb      	ldrb	r3, [r7, #3]
 800450a:	015a      	lsls	r2, r3, #5
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	4413      	add	r3, r2
 8004510:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004514:	461a      	mov	r2, r3
 8004516:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800451a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800451c:	78fa      	ldrb	r2, [r7, #3]
 800451e:	6879      	ldr	r1, [r7, #4]
 8004520:	4613      	mov	r3, r2
 8004522:	011b      	lsls	r3, r3, #4
 8004524:	1a9b      	subs	r3, r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	440b      	add	r3, r1
 800452a:	334d      	adds	r3, #77	@ 0x4d
 800452c:	2209      	movs	r2, #9
 800452e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	78fa      	ldrb	r2, [r7, #3]
 8004536:	4611      	mov	r1, r2
 8004538:	4618      	mov	r0, r3
 800453a:	f005 f8be 	bl	80096ba <USB_HC_Halt>
 800453e:	e025      	b.n	800458c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	78fa      	ldrb	r2, [r7, #3]
 8004546:	4611      	mov	r1, r2
 8004548:	4618      	mov	r0, r3
 800454a:	f004 fb0c 	bl	8008b66 <USB_ReadChInterrupts>
 800454e:	4603      	mov	r3, r0
 8004550:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004554:	2b80      	cmp	r3, #128	@ 0x80
 8004556:	d119      	bne.n	800458c <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004558:	78fb      	ldrb	r3, [r7, #3]
 800455a:	015a      	lsls	r2, r3, #5
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	4413      	add	r3, r2
 8004560:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004564:	461a      	mov	r2, r3
 8004566:	2380      	movs	r3, #128	@ 0x80
 8004568:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800456a:	78fa      	ldrb	r2, [r7, #3]
 800456c:	6879      	ldr	r1, [r7, #4]
 800456e:	4613      	mov	r3, r2
 8004570:	011b      	lsls	r3, r3, #4
 8004572:	1a9b      	subs	r3, r3, r2
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	440b      	add	r3, r1
 8004578:	334d      	adds	r3, #77	@ 0x4d
 800457a:	2207      	movs	r2, #7
 800457c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	78fa      	ldrb	r2, [r7, #3]
 8004584:	4611      	mov	r1, r2
 8004586:	4618      	mov	r0, r3
 8004588:	f005 f897 	bl	80096ba <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	78fa      	ldrb	r2, [r7, #3]
 8004592:	4611      	mov	r1, r2
 8004594:	4618      	mov	r0, r3
 8004596:	f004 fae6 	bl	8008b66 <USB_ReadChInterrupts>
 800459a:	4603      	mov	r3, r0
 800459c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045a4:	d112      	bne.n	80045cc <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	78fa      	ldrb	r2, [r7, #3]
 80045ac:	4611      	mov	r1, r2
 80045ae:	4618      	mov	r0, r3
 80045b0:	f005 f883 	bl	80096ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80045b4:	78fb      	ldrb	r3, [r7, #3]
 80045b6:	015a      	lsls	r2, r3, #5
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	4413      	add	r3, r2
 80045bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045c0:	461a      	mov	r2, r3
 80045c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80045c6:	6093      	str	r3, [r2, #8]
 80045c8:	f000 bd75 	b.w	80050b6 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	78fa      	ldrb	r2, [r7, #3]
 80045d2:	4611      	mov	r1, r2
 80045d4:	4618      	mov	r0, r3
 80045d6:	f004 fac6 	bl	8008b66 <USB_ReadChInterrupts>
 80045da:	4603      	mov	r3, r0
 80045dc:	f003 0301 	and.w	r3, r3, #1
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	f040 8128 	bne.w	8004836 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80045e6:	78fb      	ldrb	r3, [r7, #3]
 80045e8:	015a      	lsls	r2, r3, #5
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	4413      	add	r3, r2
 80045ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045f2:	461a      	mov	r2, r3
 80045f4:	2320      	movs	r3, #32
 80045f6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80045f8:	78fa      	ldrb	r2, [r7, #3]
 80045fa:	6879      	ldr	r1, [r7, #4]
 80045fc:	4613      	mov	r3, r2
 80045fe:	011b      	lsls	r3, r3, #4
 8004600:	1a9b      	subs	r3, r3, r2
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	440b      	add	r3, r1
 8004606:	331b      	adds	r3, #27
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d119      	bne.n	8004642 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800460e:	78fa      	ldrb	r2, [r7, #3]
 8004610:	6879      	ldr	r1, [r7, #4]
 8004612:	4613      	mov	r3, r2
 8004614:	011b      	lsls	r3, r3, #4
 8004616:	1a9b      	subs	r3, r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	440b      	add	r3, r1
 800461c:	331b      	adds	r3, #27
 800461e:	2200      	movs	r2, #0
 8004620:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004622:	78fb      	ldrb	r3, [r7, #3]
 8004624:	015a      	lsls	r2, r3, #5
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	4413      	add	r3, r2
 800462a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	78fa      	ldrb	r2, [r7, #3]
 8004632:	0151      	lsls	r1, r2, #5
 8004634:	693a      	ldr	r2, [r7, #16]
 8004636:	440a      	add	r2, r1
 8004638:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800463c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004640:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	799b      	ldrb	r3, [r3, #6]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d01b      	beq.n	8004682 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800464a:	78fa      	ldrb	r2, [r7, #3]
 800464c:	6879      	ldr	r1, [r7, #4]
 800464e:	4613      	mov	r3, r2
 8004650:	011b      	lsls	r3, r3, #4
 8004652:	1a9b      	subs	r3, r3, r2
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	440b      	add	r3, r1
 8004658:	3330      	adds	r3, #48	@ 0x30
 800465a:	6819      	ldr	r1, [r3, #0]
 800465c:	78fb      	ldrb	r3, [r7, #3]
 800465e:	015a      	lsls	r2, r3, #5
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	4413      	add	r3, r2
 8004664:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800466e:	78fa      	ldrb	r2, [r7, #3]
 8004670:	1ac9      	subs	r1, r1, r3
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	4613      	mov	r3, r2
 8004676:	011b      	lsls	r3, r3, #4
 8004678:	1a9b      	subs	r3, r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	4403      	add	r3, r0
 800467e:	3338      	adds	r3, #56	@ 0x38
 8004680:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8004682:	78fa      	ldrb	r2, [r7, #3]
 8004684:	6879      	ldr	r1, [r7, #4]
 8004686:	4613      	mov	r3, r2
 8004688:	011b      	lsls	r3, r3, #4
 800468a:	1a9b      	subs	r3, r3, r2
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	440b      	add	r3, r1
 8004690:	334d      	adds	r3, #77	@ 0x4d
 8004692:	2201      	movs	r2, #1
 8004694:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8004696:	78fa      	ldrb	r2, [r7, #3]
 8004698:	6879      	ldr	r1, [r7, #4]
 800469a:	4613      	mov	r3, r2
 800469c:	011b      	lsls	r3, r3, #4
 800469e:	1a9b      	subs	r3, r3, r2
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	440b      	add	r3, r1
 80046a4:	3344      	adds	r3, #68	@ 0x44
 80046a6:	2200      	movs	r2, #0
 80046a8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80046aa:	78fb      	ldrb	r3, [r7, #3]
 80046ac:	015a      	lsls	r2, r3, #5
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	4413      	add	r3, r2
 80046b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046b6:	461a      	mov	r2, r3
 80046b8:	2301      	movs	r3, #1
 80046ba:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80046bc:	78fa      	ldrb	r2, [r7, #3]
 80046be:	6879      	ldr	r1, [r7, #4]
 80046c0:	4613      	mov	r3, r2
 80046c2:	011b      	lsls	r3, r3, #4
 80046c4:	1a9b      	subs	r3, r3, r2
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	440b      	add	r3, r1
 80046ca:	3326      	adds	r3, #38	@ 0x26
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00a      	beq.n	80046e8 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80046d2:	78fa      	ldrb	r2, [r7, #3]
 80046d4:	6879      	ldr	r1, [r7, #4]
 80046d6:	4613      	mov	r3, r2
 80046d8:	011b      	lsls	r3, r3, #4
 80046da:	1a9b      	subs	r3, r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	440b      	add	r3, r1
 80046e0:	3326      	adds	r3, #38	@ 0x26
 80046e2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d110      	bne.n	800470a <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	78fa      	ldrb	r2, [r7, #3]
 80046ee:	4611      	mov	r1, r2
 80046f0:	4618      	mov	r0, r3
 80046f2:	f004 ffe2 	bl	80096ba <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80046f6:	78fb      	ldrb	r3, [r7, #3]
 80046f8:	015a      	lsls	r2, r3, #5
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	4413      	add	r3, r2
 80046fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004702:	461a      	mov	r2, r3
 8004704:	2310      	movs	r3, #16
 8004706:	6093      	str	r3, [r2, #8]
 8004708:	e03d      	b.n	8004786 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800470a:	78fa      	ldrb	r2, [r7, #3]
 800470c:	6879      	ldr	r1, [r7, #4]
 800470e:	4613      	mov	r3, r2
 8004710:	011b      	lsls	r3, r3, #4
 8004712:	1a9b      	subs	r3, r3, r2
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	440b      	add	r3, r1
 8004718:	3326      	adds	r3, #38	@ 0x26
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	2b03      	cmp	r3, #3
 800471e:	d00a      	beq.n	8004736 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8004720:	78fa      	ldrb	r2, [r7, #3]
 8004722:	6879      	ldr	r1, [r7, #4]
 8004724:	4613      	mov	r3, r2
 8004726:	011b      	lsls	r3, r3, #4
 8004728:	1a9b      	subs	r3, r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	440b      	add	r3, r1
 800472e:	3326      	adds	r3, #38	@ 0x26
 8004730:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004732:	2b01      	cmp	r3, #1
 8004734:	d127      	bne.n	8004786 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004736:	78fb      	ldrb	r3, [r7, #3]
 8004738:	015a      	lsls	r2, r3, #5
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	4413      	add	r3, r2
 800473e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	78fa      	ldrb	r2, [r7, #3]
 8004746:	0151      	lsls	r1, r2, #5
 8004748:	693a      	ldr	r2, [r7, #16]
 800474a:	440a      	add	r2, r1
 800474c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004750:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004754:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004756:	78fa      	ldrb	r2, [r7, #3]
 8004758:	6879      	ldr	r1, [r7, #4]
 800475a:	4613      	mov	r3, r2
 800475c:	011b      	lsls	r3, r3, #4
 800475e:	1a9b      	subs	r3, r3, r2
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	440b      	add	r3, r1
 8004764:	334c      	adds	r3, #76	@ 0x4c
 8004766:	2201      	movs	r2, #1
 8004768:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800476a:	78fa      	ldrb	r2, [r7, #3]
 800476c:	6879      	ldr	r1, [r7, #4]
 800476e:	4613      	mov	r3, r2
 8004770:	011b      	lsls	r3, r3, #4
 8004772:	1a9b      	subs	r3, r3, r2
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	440b      	add	r3, r1
 8004778:	334c      	adds	r3, #76	@ 0x4c
 800477a:	781a      	ldrb	r2, [r3, #0]
 800477c:	78fb      	ldrb	r3, [r7, #3]
 800477e:	4619      	mov	r1, r3
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f007 faf9 	bl	800bd78 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	799b      	ldrb	r3, [r3, #6]
 800478a:	2b01      	cmp	r3, #1
 800478c:	d13b      	bne.n	8004806 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800478e:	78fa      	ldrb	r2, [r7, #3]
 8004790:	6879      	ldr	r1, [r7, #4]
 8004792:	4613      	mov	r3, r2
 8004794:	011b      	lsls	r3, r3, #4
 8004796:	1a9b      	subs	r3, r3, r2
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	440b      	add	r3, r1
 800479c:	3338      	adds	r3, #56	@ 0x38
 800479e:	6819      	ldr	r1, [r3, #0]
 80047a0:	78fa      	ldrb	r2, [r7, #3]
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	4613      	mov	r3, r2
 80047a6:	011b      	lsls	r3, r3, #4
 80047a8:	1a9b      	subs	r3, r3, r2
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	4403      	add	r3, r0
 80047ae:	3328      	adds	r3, #40	@ 0x28
 80047b0:	881b      	ldrh	r3, [r3, #0]
 80047b2:	440b      	add	r3, r1
 80047b4:	1e59      	subs	r1, r3, #1
 80047b6:	78fa      	ldrb	r2, [r7, #3]
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	4613      	mov	r3, r2
 80047bc:	011b      	lsls	r3, r3, #4
 80047be:	1a9b      	subs	r3, r3, r2
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	4403      	add	r3, r0
 80047c4:	3328      	adds	r3, #40	@ 0x28
 80047c6:	881b      	ldrh	r3, [r3, #0]
 80047c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80047cc:	f003 0301 	and.w	r3, r3, #1
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	f000 8470 	beq.w	80050b6 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80047d6:	78fa      	ldrb	r2, [r7, #3]
 80047d8:	6879      	ldr	r1, [r7, #4]
 80047da:	4613      	mov	r3, r2
 80047dc:	011b      	lsls	r3, r3, #4
 80047de:	1a9b      	subs	r3, r3, r2
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	440b      	add	r3, r1
 80047e4:	333c      	adds	r3, #60	@ 0x3c
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	78fa      	ldrb	r2, [r7, #3]
 80047ea:	f083 0301 	eor.w	r3, r3, #1
 80047ee:	b2d8      	uxtb	r0, r3
 80047f0:	6879      	ldr	r1, [r7, #4]
 80047f2:	4613      	mov	r3, r2
 80047f4:	011b      	lsls	r3, r3, #4
 80047f6:	1a9b      	subs	r3, r3, r2
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	440b      	add	r3, r1
 80047fc:	333c      	adds	r3, #60	@ 0x3c
 80047fe:	4602      	mov	r2, r0
 8004800:	701a      	strb	r2, [r3, #0]
 8004802:	f000 bc58 	b.w	80050b6 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8004806:	78fa      	ldrb	r2, [r7, #3]
 8004808:	6879      	ldr	r1, [r7, #4]
 800480a:	4613      	mov	r3, r2
 800480c:	011b      	lsls	r3, r3, #4
 800480e:	1a9b      	subs	r3, r3, r2
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	440b      	add	r3, r1
 8004814:	333c      	adds	r3, #60	@ 0x3c
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	78fa      	ldrb	r2, [r7, #3]
 800481a:	f083 0301 	eor.w	r3, r3, #1
 800481e:	b2d8      	uxtb	r0, r3
 8004820:	6879      	ldr	r1, [r7, #4]
 8004822:	4613      	mov	r3, r2
 8004824:	011b      	lsls	r3, r3, #4
 8004826:	1a9b      	subs	r3, r3, r2
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	440b      	add	r3, r1
 800482c:	333c      	adds	r3, #60	@ 0x3c
 800482e:	4602      	mov	r2, r0
 8004830:	701a      	strb	r2, [r3, #0]
 8004832:	f000 bc40 	b.w	80050b6 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	78fa      	ldrb	r2, [r7, #3]
 800483c:	4611      	mov	r1, r2
 800483e:	4618      	mov	r0, r3
 8004840:	f004 f991 	bl	8008b66 <USB_ReadChInterrupts>
 8004844:	4603      	mov	r3, r0
 8004846:	f003 0320 	and.w	r3, r3, #32
 800484a:	2b20      	cmp	r3, #32
 800484c:	d131      	bne.n	80048b2 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800484e:	78fb      	ldrb	r3, [r7, #3]
 8004850:	015a      	lsls	r2, r3, #5
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	4413      	add	r3, r2
 8004856:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800485a:	461a      	mov	r2, r3
 800485c:	2320      	movs	r3, #32
 800485e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8004860:	78fa      	ldrb	r2, [r7, #3]
 8004862:	6879      	ldr	r1, [r7, #4]
 8004864:	4613      	mov	r3, r2
 8004866:	011b      	lsls	r3, r3, #4
 8004868:	1a9b      	subs	r3, r3, r2
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	440b      	add	r3, r1
 800486e:	331a      	adds	r3, #26
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	2b01      	cmp	r3, #1
 8004874:	f040 841f 	bne.w	80050b6 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8004878:	78fa      	ldrb	r2, [r7, #3]
 800487a:	6879      	ldr	r1, [r7, #4]
 800487c:	4613      	mov	r3, r2
 800487e:	011b      	lsls	r3, r3, #4
 8004880:	1a9b      	subs	r3, r3, r2
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	440b      	add	r3, r1
 8004886:	331b      	adds	r3, #27
 8004888:	2201      	movs	r2, #1
 800488a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800488c:	78fa      	ldrb	r2, [r7, #3]
 800488e:	6879      	ldr	r1, [r7, #4]
 8004890:	4613      	mov	r3, r2
 8004892:	011b      	lsls	r3, r3, #4
 8004894:	1a9b      	subs	r3, r3, r2
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	440b      	add	r3, r1
 800489a:	334d      	adds	r3, #77	@ 0x4d
 800489c:	2203      	movs	r2, #3
 800489e:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	78fa      	ldrb	r2, [r7, #3]
 80048a6:	4611      	mov	r1, r2
 80048a8:	4618      	mov	r0, r3
 80048aa:	f004 ff06 	bl	80096ba <USB_HC_Halt>
 80048ae:	f000 bc02 	b.w	80050b6 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	78fa      	ldrb	r2, [r7, #3]
 80048b8:	4611      	mov	r1, r2
 80048ba:	4618      	mov	r0, r3
 80048bc:	f004 f953 	bl	8008b66 <USB_ReadChInterrupts>
 80048c0:	4603      	mov	r3, r0
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	f040 8305 	bne.w	8004ed6 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80048cc:	78fb      	ldrb	r3, [r7, #3]
 80048ce:	015a      	lsls	r2, r3, #5
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	4413      	add	r3, r2
 80048d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048d8:	461a      	mov	r2, r3
 80048da:	2302      	movs	r3, #2
 80048dc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80048de:	78fa      	ldrb	r2, [r7, #3]
 80048e0:	6879      	ldr	r1, [r7, #4]
 80048e2:	4613      	mov	r3, r2
 80048e4:	011b      	lsls	r3, r3, #4
 80048e6:	1a9b      	subs	r3, r3, r2
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	440b      	add	r3, r1
 80048ec:	334d      	adds	r3, #77	@ 0x4d
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d114      	bne.n	800491e <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80048f4:	78fa      	ldrb	r2, [r7, #3]
 80048f6:	6879      	ldr	r1, [r7, #4]
 80048f8:	4613      	mov	r3, r2
 80048fa:	011b      	lsls	r3, r3, #4
 80048fc:	1a9b      	subs	r3, r3, r2
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	440b      	add	r3, r1
 8004902:	334d      	adds	r3, #77	@ 0x4d
 8004904:	2202      	movs	r2, #2
 8004906:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004908:	78fa      	ldrb	r2, [r7, #3]
 800490a:	6879      	ldr	r1, [r7, #4]
 800490c:	4613      	mov	r3, r2
 800490e:	011b      	lsls	r3, r3, #4
 8004910:	1a9b      	subs	r3, r3, r2
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	440b      	add	r3, r1
 8004916:	334c      	adds	r3, #76	@ 0x4c
 8004918:	2201      	movs	r2, #1
 800491a:	701a      	strb	r2, [r3, #0]
 800491c:	e2cc      	b.n	8004eb8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800491e:	78fa      	ldrb	r2, [r7, #3]
 8004920:	6879      	ldr	r1, [r7, #4]
 8004922:	4613      	mov	r3, r2
 8004924:	011b      	lsls	r3, r3, #4
 8004926:	1a9b      	subs	r3, r3, r2
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	440b      	add	r3, r1
 800492c:	334d      	adds	r3, #77	@ 0x4d
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	2b06      	cmp	r3, #6
 8004932:	d114      	bne.n	800495e <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004934:	78fa      	ldrb	r2, [r7, #3]
 8004936:	6879      	ldr	r1, [r7, #4]
 8004938:	4613      	mov	r3, r2
 800493a:	011b      	lsls	r3, r3, #4
 800493c:	1a9b      	subs	r3, r3, r2
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	440b      	add	r3, r1
 8004942:	334d      	adds	r3, #77	@ 0x4d
 8004944:	2202      	movs	r2, #2
 8004946:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8004948:	78fa      	ldrb	r2, [r7, #3]
 800494a:	6879      	ldr	r1, [r7, #4]
 800494c:	4613      	mov	r3, r2
 800494e:	011b      	lsls	r3, r3, #4
 8004950:	1a9b      	subs	r3, r3, r2
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	440b      	add	r3, r1
 8004956:	334c      	adds	r3, #76	@ 0x4c
 8004958:	2205      	movs	r2, #5
 800495a:	701a      	strb	r2, [r3, #0]
 800495c:	e2ac      	b.n	8004eb8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800495e:	78fa      	ldrb	r2, [r7, #3]
 8004960:	6879      	ldr	r1, [r7, #4]
 8004962:	4613      	mov	r3, r2
 8004964:	011b      	lsls	r3, r3, #4
 8004966:	1a9b      	subs	r3, r3, r2
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	440b      	add	r3, r1
 800496c:	334d      	adds	r3, #77	@ 0x4d
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	2b07      	cmp	r3, #7
 8004972:	d00b      	beq.n	800498c <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004974:	78fa      	ldrb	r2, [r7, #3]
 8004976:	6879      	ldr	r1, [r7, #4]
 8004978:	4613      	mov	r3, r2
 800497a:	011b      	lsls	r3, r3, #4
 800497c:	1a9b      	subs	r3, r3, r2
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	440b      	add	r3, r1
 8004982:	334d      	adds	r3, #77	@ 0x4d
 8004984:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004986:	2b09      	cmp	r3, #9
 8004988:	f040 80a6 	bne.w	8004ad8 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800498c:	78fa      	ldrb	r2, [r7, #3]
 800498e:	6879      	ldr	r1, [r7, #4]
 8004990:	4613      	mov	r3, r2
 8004992:	011b      	lsls	r3, r3, #4
 8004994:	1a9b      	subs	r3, r3, r2
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	440b      	add	r3, r1
 800499a:	334d      	adds	r3, #77	@ 0x4d
 800499c:	2202      	movs	r2, #2
 800499e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80049a0:	78fa      	ldrb	r2, [r7, #3]
 80049a2:	6879      	ldr	r1, [r7, #4]
 80049a4:	4613      	mov	r3, r2
 80049a6:	011b      	lsls	r3, r3, #4
 80049a8:	1a9b      	subs	r3, r3, r2
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	440b      	add	r3, r1
 80049ae:	3344      	adds	r3, #68	@ 0x44
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	1c59      	adds	r1, r3, #1
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	4613      	mov	r3, r2
 80049b8:	011b      	lsls	r3, r3, #4
 80049ba:	1a9b      	subs	r3, r3, r2
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	4403      	add	r3, r0
 80049c0:	3344      	adds	r3, #68	@ 0x44
 80049c2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80049c4:	78fa      	ldrb	r2, [r7, #3]
 80049c6:	6879      	ldr	r1, [r7, #4]
 80049c8:	4613      	mov	r3, r2
 80049ca:	011b      	lsls	r3, r3, #4
 80049cc:	1a9b      	subs	r3, r3, r2
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	440b      	add	r3, r1
 80049d2:	3344      	adds	r3, #68	@ 0x44
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d943      	bls.n	8004a62 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80049da:	78fa      	ldrb	r2, [r7, #3]
 80049dc:	6879      	ldr	r1, [r7, #4]
 80049de:	4613      	mov	r3, r2
 80049e0:	011b      	lsls	r3, r3, #4
 80049e2:	1a9b      	subs	r3, r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	440b      	add	r3, r1
 80049e8:	3344      	adds	r3, #68	@ 0x44
 80049ea:	2200      	movs	r2, #0
 80049ec:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80049ee:	78fa      	ldrb	r2, [r7, #3]
 80049f0:	6879      	ldr	r1, [r7, #4]
 80049f2:	4613      	mov	r3, r2
 80049f4:	011b      	lsls	r3, r3, #4
 80049f6:	1a9b      	subs	r3, r3, r2
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	440b      	add	r3, r1
 80049fc:	331a      	adds	r3, #26
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d123      	bne.n	8004a4c <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8004a04:	78fa      	ldrb	r2, [r7, #3]
 8004a06:	6879      	ldr	r1, [r7, #4]
 8004a08:	4613      	mov	r3, r2
 8004a0a:	011b      	lsls	r3, r3, #4
 8004a0c:	1a9b      	subs	r3, r3, r2
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	440b      	add	r3, r1
 8004a12:	331b      	adds	r3, #27
 8004a14:	2200      	movs	r2, #0
 8004a16:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8004a18:	78fa      	ldrb	r2, [r7, #3]
 8004a1a:	6879      	ldr	r1, [r7, #4]
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	011b      	lsls	r3, r3, #4
 8004a20:	1a9b      	subs	r3, r3, r2
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	440b      	add	r3, r1
 8004a26:	331c      	adds	r3, #28
 8004a28:	2200      	movs	r2, #0
 8004a2a:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004a2c:	78fb      	ldrb	r3, [r7, #3]
 8004a2e:	015a      	lsls	r2, r3, #5
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	4413      	add	r3, r2
 8004a34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	78fa      	ldrb	r2, [r7, #3]
 8004a3c:	0151      	lsls	r1, r2, #5
 8004a3e:	693a      	ldr	r2, [r7, #16]
 8004a40:	440a      	add	r2, r1
 8004a42:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004a46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a4a:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004a4c:	78fa      	ldrb	r2, [r7, #3]
 8004a4e:	6879      	ldr	r1, [r7, #4]
 8004a50:	4613      	mov	r3, r2
 8004a52:	011b      	lsls	r3, r3, #4
 8004a54:	1a9b      	subs	r3, r3, r2
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	440b      	add	r3, r1
 8004a5a:	334c      	adds	r3, #76	@ 0x4c
 8004a5c:	2204      	movs	r2, #4
 8004a5e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004a60:	e229      	b.n	8004eb6 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004a62:	78fa      	ldrb	r2, [r7, #3]
 8004a64:	6879      	ldr	r1, [r7, #4]
 8004a66:	4613      	mov	r3, r2
 8004a68:	011b      	lsls	r3, r3, #4
 8004a6a:	1a9b      	subs	r3, r3, r2
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	440b      	add	r3, r1
 8004a70:	334c      	adds	r3, #76	@ 0x4c
 8004a72:	2202      	movs	r2, #2
 8004a74:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004a76:	78fa      	ldrb	r2, [r7, #3]
 8004a78:	6879      	ldr	r1, [r7, #4]
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	011b      	lsls	r3, r3, #4
 8004a7e:	1a9b      	subs	r3, r3, r2
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	440b      	add	r3, r1
 8004a84:	3326      	adds	r3, #38	@ 0x26
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00b      	beq.n	8004aa4 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004a8c:	78fa      	ldrb	r2, [r7, #3]
 8004a8e:	6879      	ldr	r1, [r7, #4]
 8004a90:	4613      	mov	r3, r2
 8004a92:	011b      	lsls	r3, r3, #4
 8004a94:	1a9b      	subs	r3, r3, r2
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	440b      	add	r3, r1
 8004a9a:	3326      	adds	r3, #38	@ 0x26
 8004a9c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	f040 8209 	bne.w	8004eb6 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004aa4:	78fb      	ldrb	r3, [r7, #3]
 8004aa6:	015a      	lsls	r2, r3, #5
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	4413      	add	r3, r2
 8004aac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004aba:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004ac2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004ac4:	78fb      	ldrb	r3, [r7, #3]
 8004ac6:	015a      	lsls	r2, r3, #5
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	4413      	add	r3, r2
 8004acc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004ad6:	e1ee      	b.n	8004eb6 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004ad8:	78fa      	ldrb	r2, [r7, #3]
 8004ada:	6879      	ldr	r1, [r7, #4]
 8004adc:	4613      	mov	r3, r2
 8004ade:	011b      	lsls	r3, r3, #4
 8004ae0:	1a9b      	subs	r3, r3, r2
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	440b      	add	r3, r1
 8004ae6:	334d      	adds	r3, #77	@ 0x4d
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	2b05      	cmp	r3, #5
 8004aec:	f040 80c8 	bne.w	8004c80 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004af0:	78fa      	ldrb	r2, [r7, #3]
 8004af2:	6879      	ldr	r1, [r7, #4]
 8004af4:	4613      	mov	r3, r2
 8004af6:	011b      	lsls	r3, r3, #4
 8004af8:	1a9b      	subs	r3, r3, r2
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	440b      	add	r3, r1
 8004afe:	334d      	adds	r3, #77	@ 0x4d
 8004b00:	2202      	movs	r2, #2
 8004b02:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004b04:	78fa      	ldrb	r2, [r7, #3]
 8004b06:	6879      	ldr	r1, [r7, #4]
 8004b08:	4613      	mov	r3, r2
 8004b0a:	011b      	lsls	r3, r3, #4
 8004b0c:	1a9b      	subs	r3, r3, r2
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	440b      	add	r3, r1
 8004b12:	331b      	adds	r3, #27
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	f040 81ce 	bne.w	8004eb8 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004b1c:	78fa      	ldrb	r2, [r7, #3]
 8004b1e:	6879      	ldr	r1, [r7, #4]
 8004b20:	4613      	mov	r3, r2
 8004b22:	011b      	lsls	r3, r3, #4
 8004b24:	1a9b      	subs	r3, r3, r2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	440b      	add	r3, r1
 8004b2a:	3326      	adds	r3, #38	@ 0x26
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	2b03      	cmp	r3, #3
 8004b30:	d16b      	bne.n	8004c0a <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8004b32:	78fa      	ldrb	r2, [r7, #3]
 8004b34:	6879      	ldr	r1, [r7, #4]
 8004b36:	4613      	mov	r3, r2
 8004b38:	011b      	lsls	r3, r3, #4
 8004b3a:	1a9b      	subs	r3, r3, r2
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	440b      	add	r3, r1
 8004b40:	3348      	adds	r3, #72	@ 0x48
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	1c59      	adds	r1, r3, #1
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	4613      	mov	r3, r2
 8004b4a:	011b      	lsls	r3, r3, #4
 8004b4c:	1a9b      	subs	r3, r3, r2
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	4403      	add	r3, r0
 8004b52:	3348      	adds	r3, #72	@ 0x48
 8004b54:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8004b56:	78fa      	ldrb	r2, [r7, #3]
 8004b58:	6879      	ldr	r1, [r7, #4]
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	011b      	lsls	r3, r3, #4
 8004b5e:	1a9b      	subs	r3, r3, r2
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	440b      	add	r3, r1
 8004b64:	3348      	adds	r3, #72	@ 0x48
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d943      	bls.n	8004bf4 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8004b6c:	78fa      	ldrb	r2, [r7, #3]
 8004b6e:	6879      	ldr	r1, [r7, #4]
 8004b70:	4613      	mov	r3, r2
 8004b72:	011b      	lsls	r3, r3, #4
 8004b74:	1a9b      	subs	r3, r3, r2
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	440b      	add	r3, r1
 8004b7a:	3348      	adds	r3, #72	@ 0x48
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8004b80:	78fa      	ldrb	r2, [r7, #3]
 8004b82:	6879      	ldr	r1, [r7, #4]
 8004b84:	4613      	mov	r3, r2
 8004b86:	011b      	lsls	r3, r3, #4
 8004b88:	1a9b      	subs	r3, r3, r2
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	440b      	add	r3, r1
 8004b8e:	331b      	adds	r3, #27
 8004b90:	2200      	movs	r2, #0
 8004b92:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8004b94:	78fa      	ldrb	r2, [r7, #3]
 8004b96:	6879      	ldr	r1, [r7, #4]
 8004b98:	4613      	mov	r3, r2
 8004b9a:	011b      	lsls	r3, r3, #4
 8004b9c:	1a9b      	subs	r3, r3, r2
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	440b      	add	r3, r1
 8004ba2:	3344      	adds	r3, #68	@ 0x44
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d809      	bhi.n	8004bbe <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8004baa:	78fa      	ldrb	r2, [r7, #3]
 8004bac:	6879      	ldr	r1, [r7, #4]
 8004bae:	4613      	mov	r3, r2
 8004bb0:	011b      	lsls	r3, r3, #4
 8004bb2:	1a9b      	subs	r3, r3, r2
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	440b      	add	r3, r1
 8004bb8:	331c      	adds	r3, #28
 8004bba:	2201      	movs	r2, #1
 8004bbc:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004bbe:	78fb      	ldrb	r3, [r7, #3]
 8004bc0:	015a      	lsls	r2, r3, #5
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	4413      	add	r3, r2
 8004bc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	78fa      	ldrb	r2, [r7, #3]
 8004bce:	0151      	lsls	r1, r2, #5
 8004bd0:	693a      	ldr	r2, [r7, #16]
 8004bd2:	440a      	add	r2, r1
 8004bd4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004bd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bdc:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8004bde:	78fa      	ldrb	r2, [r7, #3]
 8004be0:	6879      	ldr	r1, [r7, #4]
 8004be2:	4613      	mov	r3, r2
 8004be4:	011b      	lsls	r3, r3, #4
 8004be6:	1a9b      	subs	r3, r3, r2
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	440b      	add	r3, r1
 8004bec:	334c      	adds	r3, #76	@ 0x4c
 8004bee:	2204      	movs	r2, #4
 8004bf0:	701a      	strb	r2, [r3, #0]
 8004bf2:	e014      	b.n	8004c1e <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004bf4:	78fa      	ldrb	r2, [r7, #3]
 8004bf6:	6879      	ldr	r1, [r7, #4]
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	011b      	lsls	r3, r3, #4
 8004bfc:	1a9b      	subs	r3, r3, r2
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	440b      	add	r3, r1
 8004c02:	334c      	adds	r3, #76	@ 0x4c
 8004c04:	2202      	movs	r2, #2
 8004c06:	701a      	strb	r2, [r3, #0]
 8004c08:	e009      	b.n	8004c1e <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004c0a:	78fa      	ldrb	r2, [r7, #3]
 8004c0c:	6879      	ldr	r1, [r7, #4]
 8004c0e:	4613      	mov	r3, r2
 8004c10:	011b      	lsls	r3, r3, #4
 8004c12:	1a9b      	subs	r3, r3, r2
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	440b      	add	r3, r1
 8004c18:	334c      	adds	r3, #76	@ 0x4c
 8004c1a:	2202      	movs	r2, #2
 8004c1c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004c1e:	78fa      	ldrb	r2, [r7, #3]
 8004c20:	6879      	ldr	r1, [r7, #4]
 8004c22:	4613      	mov	r3, r2
 8004c24:	011b      	lsls	r3, r3, #4
 8004c26:	1a9b      	subs	r3, r3, r2
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	440b      	add	r3, r1
 8004c2c:	3326      	adds	r3, #38	@ 0x26
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d00b      	beq.n	8004c4c <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004c34:	78fa      	ldrb	r2, [r7, #3]
 8004c36:	6879      	ldr	r1, [r7, #4]
 8004c38:	4613      	mov	r3, r2
 8004c3a:	011b      	lsls	r3, r3, #4
 8004c3c:	1a9b      	subs	r3, r3, r2
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	440b      	add	r3, r1
 8004c42:	3326      	adds	r3, #38	@ 0x26
 8004c44:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	f040 8136 	bne.w	8004eb8 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004c4c:	78fb      	ldrb	r3, [r7, #3]
 8004c4e:	015a      	lsls	r2, r3, #5
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	4413      	add	r3, r2
 8004c54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004c62:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004c6a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004c6c:	78fb      	ldrb	r3, [r7, #3]
 8004c6e:	015a      	lsls	r2, r3, #5
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	4413      	add	r3, r2
 8004c74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c78:	461a      	mov	r2, r3
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6013      	str	r3, [r2, #0]
 8004c7e:	e11b      	b.n	8004eb8 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004c80:	78fa      	ldrb	r2, [r7, #3]
 8004c82:	6879      	ldr	r1, [r7, #4]
 8004c84:	4613      	mov	r3, r2
 8004c86:	011b      	lsls	r3, r3, #4
 8004c88:	1a9b      	subs	r3, r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	440b      	add	r3, r1
 8004c8e:	334d      	adds	r3, #77	@ 0x4d
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	2b03      	cmp	r3, #3
 8004c94:	f040 8081 	bne.w	8004d9a <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004c98:	78fa      	ldrb	r2, [r7, #3]
 8004c9a:	6879      	ldr	r1, [r7, #4]
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	011b      	lsls	r3, r3, #4
 8004ca0:	1a9b      	subs	r3, r3, r2
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	440b      	add	r3, r1
 8004ca6:	334d      	adds	r3, #77	@ 0x4d
 8004ca8:	2202      	movs	r2, #2
 8004caa:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004cac:	78fa      	ldrb	r2, [r7, #3]
 8004cae:	6879      	ldr	r1, [r7, #4]
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	011b      	lsls	r3, r3, #4
 8004cb4:	1a9b      	subs	r3, r3, r2
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	440b      	add	r3, r1
 8004cba:	331b      	adds	r3, #27
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	f040 80fa 	bne.w	8004eb8 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004cc4:	78fa      	ldrb	r2, [r7, #3]
 8004cc6:	6879      	ldr	r1, [r7, #4]
 8004cc8:	4613      	mov	r3, r2
 8004cca:	011b      	lsls	r3, r3, #4
 8004ccc:	1a9b      	subs	r3, r3, r2
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	440b      	add	r3, r1
 8004cd2:	334c      	adds	r3, #76	@ 0x4c
 8004cd4:	2202      	movs	r2, #2
 8004cd6:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8004cd8:	78fb      	ldrb	r3, [r7, #3]
 8004cda:	015a      	lsls	r2, r3, #5
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	4413      	add	r3, r2
 8004ce0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	78fa      	ldrb	r2, [r7, #3]
 8004ce8:	0151      	lsls	r1, r2, #5
 8004cea:	693a      	ldr	r2, [r7, #16]
 8004cec:	440a      	add	r2, r1
 8004cee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004cf2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cf6:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8004cf8:	78fb      	ldrb	r3, [r7, #3]
 8004cfa:	015a      	lsls	r2, r3, #5
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	4413      	add	r3, r2
 8004d00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	78fa      	ldrb	r2, [r7, #3]
 8004d08:	0151      	lsls	r1, r2, #5
 8004d0a:	693a      	ldr	r2, [r7, #16]
 8004d0c:	440a      	add	r2, r1
 8004d0e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004d12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d16:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8004d18:	78fb      	ldrb	r3, [r7, #3]
 8004d1a:	015a      	lsls	r2, r3, #5
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	4413      	add	r3, r2
 8004d20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	78fa      	ldrb	r2, [r7, #3]
 8004d28:	0151      	lsls	r1, r2, #5
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	440a      	add	r2, r1
 8004d2e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004d32:	f023 0320 	bic.w	r3, r3, #32
 8004d36:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004d38:	78fa      	ldrb	r2, [r7, #3]
 8004d3a:	6879      	ldr	r1, [r7, #4]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	011b      	lsls	r3, r3, #4
 8004d40:	1a9b      	subs	r3, r3, r2
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	440b      	add	r3, r1
 8004d46:	3326      	adds	r3, #38	@ 0x26
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00b      	beq.n	8004d66 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004d4e:	78fa      	ldrb	r2, [r7, #3]
 8004d50:	6879      	ldr	r1, [r7, #4]
 8004d52:	4613      	mov	r3, r2
 8004d54:	011b      	lsls	r3, r3, #4
 8004d56:	1a9b      	subs	r3, r3, r2
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	440b      	add	r3, r1
 8004d5c:	3326      	adds	r3, #38	@ 0x26
 8004d5e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	f040 80a9 	bne.w	8004eb8 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004d66:	78fb      	ldrb	r3, [r7, #3]
 8004d68:	015a      	lsls	r2, r3, #5
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004d7c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004d84:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004d86:	78fb      	ldrb	r3, [r7, #3]
 8004d88:	015a      	lsls	r2, r3, #5
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d92:	461a      	mov	r2, r3
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6013      	str	r3, [r2, #0]
 8004d98:	e08e      	b.n	8004eb8 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004d9a:	78fa      	ldrb	r2, [r7, #3]
 8004d9c:	6879      	ldr	r1, [r7, #4]
 8004d9e:	4613      	mov	r3, r2
 8004da0:	011b      	lsls	r3, r3, #4
 8004da2:	1a9b      	subs	r3, r3, r2
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	440b      	add	r3, r1
 8004da8:	334d      	adds	r3, #77	@ 0x4d
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	2b04      	cmp	r3, #4
 8004dae:	d143      	bne.n	8004e38 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004db0:	78fa      	ldrb	r2, [r7, #3]
 8004db2:	6879      	ldr	r1, [r7, #4]
 8004db4:	4613      	mov	r3, r2
 8004db6:	011b      	lsls	r3, r3, #4
 8004db8:	1a9b      	subs	r3, r3, r2
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	440b      	add	r3, r1
 8004dbe:	334d      	adds	r3, #77	@ 0x4d
 8004dc0:	2202      	movs	r2, #2
 8004dc2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004dc4:	78fa      	ldrb	r2, [r7, #3]
 8004dc6:	6879      	ldr	r1, [r7, #4]
 8004dc8:	4613      	mov	r3, r2
 8004dca:	011b      	lsls	r3, r3, #4
 8004dcc:	1a9b      	subs	r3, r3, r2
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	440b      	add	r3, r1
 8004dd2:	334c      	adds	r3, #76	@ 0x4c
 8004dd4:	2202      	movs	r2, #2
 8004dd6:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004dd8:	78fa      	ldrb	r2, [r7, #3]
 8004dda:	6879      	ldr	r1, [r7, #4]
 8004ddc:	4613      	mov	r3, r2
 8004dde:	011b      	lsls	r3, r3, #4
 8004de0:	1a9b      	subs	r3, r3, r2
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	440b      	add	r3, r1
 8004de6:	3326      	adds	r3, #38	@ 0x26
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d00a      	beq.n	8004e04 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004dee:	78fa      	ldrb	r2, [r7, #3]
 8004df0:	6879      	ldr	r1, [r7, #4]
 8004df2:	4613      	mov	r3, r2
 8004df4:	011b      	lsls	r3, r3, #4
 8004df6:	1a9b      	subs	r3, r3, r2
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	440b      	add	r3, r1
 8004dfc:	3326      	adds	r3, #38	@ 0x26
 8004dfe:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d159      	bne.n	8004eb8 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004e04:	78fb      	ldrb	r3, [r7, #3]
 8004e06:	015a      	lsls	r2, r3, #5
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	4413      	add	r3, r2
 8004e0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004e1a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004e22:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004e24:	78fb      	ldrb	r3, [r7, #3]
 8004e26:	015a      	lsls	r2, r3, #5
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	4413      	add	r3, r2
 8004e2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e30:	461a      	mov	r2, r3
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6013      	str	r3, [r2, #0]
 8004e36:	e03f      	b.n	8004eb8 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8004e38:	78fa      	ldrb	r2, [r7, #3]
 8004e3a:	6879      	ldr	r1, [r7, #4]
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	011b      	lsls	r3, r3, #4
 8004e40:	1a9b      	subs	r3, r3, r2
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	440b      	add	r3, r1
 8004e46:	334d      	adds	r3, #77	@ 0x4d
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	2b08      	cmp	r3, #8
 8004e4c:	d126      	bne.n	8004e9c <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004e4e:	78fa      	ldrb	r2, [r7, #3]
 8004e50:	6879      	ldr	r1, [r7, #4]
 8004e52:	4613      	mov	r3, r2
 8004e54:	011b      	lsls	r3, r3, #4
 8004e56:	1a9b      	subs	r3, r3, r2
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	440b      	add	r3, r1
 8004e5c:	334d      	adds	r3, #77	@ 0x4d
 8004e5e:	2202      	movs	r2, #2
 8004e60:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004e62:	78fa      	ldrb	r2, [r7, #3]
 8004e64:	6879      	ldr	r1, [r7, #4]
 8004e66:	4613      	mov	r3, r2
 8004e68:	011b      	lsls	r3, r3, #4
 8004e6a:	1a9b      	subs	r3, r3, r2
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	440b      	add	r3, r1
 8004e70:	3344      	adds	r3, #68	@ 0x44
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	1c59      	adds	r1, r3, #1
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	4613      	mov	r3, r2
 8004e7a:	011b      	lsls	r3, r3, #4
 8004e7c:	1a9b      	subs	r3, r3, r2
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	4403      	add	r3, r0
 8004e82:	3344      	adds	r3, #68	@ 0x44
 8004e84:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8004e86:	78fa      	ldrb	r2, [r7, #3]
 8004e88:	6879      	ldr	r1, [r7, #4]
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	011b      	lsls	r3, r3, #4
 8004e8e:	1a9b      	subs	r3, r3, r2
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	440b      	add	r3, r1
 8004e94:	334c      	adds	r3, #76	@ 0x4c
 8004e96:	2204      	movs	r2, #4
 8004e98:	701a      	strb	r2, [r3, #0]
 8004e9a:	e00d      	b.n	8004eb8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8004e9c:	78fa      	ldrb	r2, [r7, #3]
 8004e9e:	6879      	ldr	r1, [r7, #4]
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	011b      	lsls	r3, r3, #4
 8004ea4:	1a9b      	subs	r3, r3, r2
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	440b      	add	r3, r1
 8004eaa:	334d      	adds	r3, #77	@ 0x4d
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	f000 8100 	beq.w	80050b4 <HCD_HC_IN_IRQHandler+0xcca>
 8004eb4:	e000      	b.n	8004eb8 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004eb6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004eb8:	78fa      	ldrb	r2, [r7, #3]
 8004eba:	6879      	ldr	r1, [r7, #4]
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	011b      	lsls	r3, r3, #4
 8004ec0:	1a9b      	subs	r3, r3, r2
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	440b      	add	r3, r1
 8004ec6:	334c      	adds	r3, #76	@ 0x4c
 8004ec8:	781a      	ldrb	r2, [r3, #0]
 8004eca:	78fb      	ldrb	r3, [r7, #3]
 8004ecc:	4619      	mov	r1, r3
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f006 ff52 	bl	800bd78 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004ed4:	e0ef      	b.n	80050b6 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	78fa      	ldrb	r2, [r7, #3]
 8004edc:	4611      	mov	r1, r2
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f003 fe41 	bl	8008b66 <USB_ReadChInterrupts>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eea:	2b40      	cmp	r3, #64	@ 0x40
 8004eec:	d12f      	bne.n	8004f4e <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004eee:	78fb      	ldrb	r3, [r7, #3]
 8004ef0:	015a      	lsls	r2, r3, #5
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004efa:	461a      	mov	r2, r3
 8004efc:	2340      	movs	r3, #64	@ 0x40
 8004efe:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004f00:	78fa      	ldrb	r2, [r7, #3]
 8004f02:	6879      	ldr	r1, [r7, #4]
 8004f04:	4613      	mov	r3, r2
 8004f06:	011b      	lsls	r3, r3, #4
 8004f08:	1a9b      	subs	r3, r3, r2
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	440b      	add	r3, r1
 8004f0e:	334d      	adds	r3, #77	@ 0x4d
 8004f10:	2205      	movs	r2, #5
 8004f12:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004f14:	78fa      	ldrb	r2, [r7, #3]
 8004f16:	6879      	ldr	r1, [r7, #4]
 8004f18:	4613      	mov	r3, r2
 8004f1a:	011b      	lsls	r3, r3, #4
 8004f1c:	1a9b      	subs	r3, r3, r2
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	440b      	add	r3, r1
 8004f22:	331a      	adds	r3, #26
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d109      	bne.n	8004f3e <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004f2a:	78fa      	ldrb	r2, [r7, #3]
 8004f2c:	6879      	ldr	r1, [r7, #4]
 8004f2e:	4613      	mov	r3, r2
 8004f30:	011b      	lsls	r3, r3, #4
 8004f32:	1a9b      	subs	r3, r3, r2
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	440b      	add	r3, r1
 8004f38:	3344      	adds	r3, #68	@ 0x44
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	78fa      	ldrb	r2, [r7, #3]
 8004f44:	4611      	mov	r1, r2
 8004f46:	4618      	mov	r0, r3
 8004f48:	f004 fbb7 	bl	80096ba <USB_HC_Halt>
 8004f4c:	e0b3      	b.n	80050b6 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	78fa      	ldrb	r2, [r7, #3]
 8004f54:	4611      	mov	r1, r2
 8004f56:	4618      	mov	r0, r3
 8004f58:	f003 fe05 	bl	8008b66 <USB_ReadChInterrupts>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	f003 0310 	and.w	r3, r3, #16
 8004f62:	2b10      	cmp	r3, #16
 8004f64:	f040 80a7 	bne.w	80050b6 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004f68:	78fa      	ldrb	r2, [r7, #3]
 8004f6a:	6879      	ldr	r1, [r7, #4]
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	011b      	lsls	r3, r3, #4
 8004f70:	1a9b      	subs	r3, r3, r2
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	440b      	add	r3, r1
 8004f76:	3326      	adds	r3, #38	@ 0x26
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	2b03      	cmp	r3, #3
 8004f7c:	d11b      	bne.n	8004fb6 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004f7e:	78fa      	ldrb	r2, [r7, #3]
 8004f80:	6879      	ldr	r1, [r7, #4]
 8004f82:	4613      	mov	r3, r2
 8004f84:	011b      	lsls	r3, r3, #4
 8004f86:	1a9b      	subs	r3, r3, r2
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	440b      	add	r3, r1
 8004f8c:	3344      	adds	r3, #68	@ 0x44
 8004f8e:	2200      	movs	r2, #0
 8004f90:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8004f92:	78fa      	ldrb	r2, [r7, #3]
 8004f94:	6879      	ldr	r1, [r7, #4]
 8004f96:	4613      	mov	r3, r2
 8004f98:	011b      	lsls	r3, r3, #4
 8004f9a:	1a9b      	subs	r3, r3, r2
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	440b      	add	r3, r1
 8004fa0:	334d      	adds	r3, #77	@ 0x4d
 8004fa2:	2204      	movs	r2, #4
 8004fa4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	78fa      	ldrb	r2, [r7, #3]
 8004fac:	4611      	mov	r1, r2
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f004 fb83 	bl	80096ba <USB_HC_Halt>
 8004fb4:	e03f      	b.n	8005036 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004fb6:	78fa      	ldrb	r2, [r7, #3]
 8004fb8:	6879      	ldr	r1, [r7, #4]
 8004fba:	4613      	mov	r3, r2
 8004fbc:	011b      	lsls	r3, r3, #4
 8004fbe:	1a9b      	subs	r3, r3, r2
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	440b      	add	r3, r1
 8004fc4:	3326      	adds	r3, #38	@ 0x26
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d00a      	beq.n	8004fe2 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004fcc:	78fa      	ldrb	r2, [r7, #3]
 8004fce:	6879      	ldr	r1, [r7, #4]
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	011b      	lsls	r3, r3, #4
 8004fd4:	1a9b      	subs	r3, r3, r2
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	440b      	add	r3, r1
 8004fda:	3326      	adds	r3, #38	@ 0x26
 8004fdc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d129      	bne.n	8005036 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004fe2:	78fa      	ldrb	r2, [r7, #3]
 8004fe4:	6879      	ldr	r1, [r7, #4]
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	011b      	lsls	r3, r3, #4
 8004fea:	1a9b      	subs	r3, r3, r2
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	440b      	add	r3, r1
 8004ff0:	3344      	adds	r3, #68	@ 0x44
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	799b      	ldrb	r3, [r3, #6]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00a      	beq.n	8005014 <HCD_HC_IN_IRQHandler+0xc2a>
 8004ffe:	78fa      	ldrb	r2, [r7, #3]
 8005000:	6879      	ldr	r1, [r7, #4]
 8005002:	4613      	mov	r3, r2
 8005004:	011b      	lsls	r3, r3, #4
 8005006:	1a9b      	subs	r3, r3, r2
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	440b      	add	r3, r1
 800500c:	331b      	adds	r3, #27
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d110      	bne.n	8005036 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8005014:	78fa      	ldrb	r2, [r7, #3]
 8005016:	6879      	ldr	r1, [r7, #4]
 8005018:	4613      	mov	r3, r2
 800501a:	011b      	lsls	r3, r3, #4
 800501c:	1a9b      	subs	r3, r3, r2
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	440b      	add	r3, r1
 8005022:	334d      	adds	r3, #77	@ 0x4d
 8005024:	2204      	movs	r2, #4
 8005026:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	78fa      	ldrb	r2, [r7, #3]
 800502e:	4611      	mov	r1, r2
 8005030:	4618      	mov	r0, r3
 8005032:	f004 fb42 	bl	80096ba <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8005036:	78fa      	ldrb	r2, [r7, #3]
 8005038:	6879      	ldr	r1, [r7, #4]
 800503a:	4613      	mov	r3, r2
 800503c:	011b      	lsls	r3, r3, #4
 800503e:	1a9b      	subs	r3, r3, r2
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	440b      	add	r3, r1
 8005044:	331b      	adds	r3, #27
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	2b01      	cmp	r3, #1
 800504a:	d129      	bne.n	80050a0 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800504c:	78fa      	ldrb	r2, [r7, #3]
 800504e:	6879      	ldr	r1, [r7, #4]
 8005050:	4613      	mov	r3, r2
 8005052:	011b      	lsls	r3, r3, #4
 8005054:	1a9b      	subs	r3, r3, r2
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	440b      	add	r3, r1
 800505a:	331b      	adds	r3, #27
 800505c:	2200      	movs	r2, #0
 800505e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005060:	78fb      	ldrb	r3, [r7, #3]
 8005062:	015a      	lsls	r2, r3, #5
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	4413      	add	r3, r2
 8005068:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	78fa      	ldrb	r2, [r7, #3]
 8005070:	0151      	lsls	r1, r2, #5
 8005072:	693a      	ldr	r2, [r7, #16]
 8005074:	440a      	add	r2, r1
 8005076:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800507a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800507e:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8005080:	78fb      	ldrb	r3, [r7, #3]
 8005082:	015a      	lsls	r2, r3, #5
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	4413      	add	r3, r2
 8005088:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	78fa      	ldrb	r2, [r7, #3]
 8005090:	0151      	lsls	r1, r2, #5
 8005092:	693a      	ldr	r2, [r7, #16]
 8005094:	440a      	add	r2, r1
 8005096:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800509a:	f043 0320 	orr.w	r3, r3, #32
 800509e:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80050a0:	78fb      	ldrb	r3, [r7, #3]
 80050a2:	015a      	lsls	r2, r3, #5
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	4413      	add	r3, r2
 80050a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050ac:	461a      	mov	r2, r3
 80050ae:	2310      	movs	r3, #16
 80050b0:	6093      	str	r3, [r2, #8]
 80050b2:	e000      	b.n	80050b6 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80050b4:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80050b6:	3718      	adds	r7, #24
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b086      	sub	sp, #24
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	460b      	mov	r3, r1
 80050c6:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	78fa      	ldrb	r2, [r7, #3]
 80050d8:	4611      	mov	r1, r2
 80050da:	4618      	mov	r0, r3
 80050dc:	f003 fd43 	bl	8008b66 <USB_ReadChInterrupts>
 80050e0:	4603      	mov	r3, r0
 80050e2:	f003 0304 	and.w	r3, r3, #4
 80050e6:	2b04      	cmp	r3, #4
 80050e8:	d11b      	bne.n	8005122 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80050ea:	78fb      	ldrb	r3, [r7, #3]
 80050ec:	015a      	lsls	r2, r3, #5
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	4413      	add	r3, r2
 80050f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050f6:	461a      	mov	r2, r3
 80050f8:	2304      	movs	r3, #4
 80050fa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80050fc:	78fa      	ldrb	r2, [r7, #3]
 80050fe:	6879      	ldr	r1, [r7, #4]
 8005100:	4613      	mov	r3, r2
 8005102:	011b      	lsls	r3, r3, #4
 8005104:	1a9b      	subs	r3, r3, r2
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	440b      	add	r3, r1
 800510a:	334d      	adds	r3, #77	@ 0x4d
 800510c:	2207      	movs	r2, #7
 800510e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	78fa      	ldrb	r2, [r7, #3]
 8005116:	4611      	mov	r1, r2
 8005118:	4618      	mov	r0, r3
 800511a:	f004 face 	bl	80096ba <USB_HC_Halt>
 800511e:	f000 bc89 	b.w	8005a34 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	78fa      	ldrb	r2, [r7, #3]
 8005128:	4611      	mov	r1, r2
 800512a:	4618      	mov	r0, r3
 800512c:	f003 fd1b 	bl	8008b66 <USB_ReadChInterrupts>
 8005130:	4603      	mov	r3, r0
 8005132:	f003 0320 	and.w	r3, r3, #32
 8005136:	2b20      	cmp	r3, #32
 8005138:	f040 8082 	bne.w	8005240 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800513c:	78fb      	ldrb	r3, [r7, #3]
 800513e:	015a      	lsls	r2, r3, #5
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	4413      	add	r3, r2
 8005144:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005148:	461a      	mov	r2, r3
 800514a:	2320      	movs	r3, #32
 800514c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800514e:	78fa      	ldrb	r2, [r7, #3]
 8005150:	6879      	ldr	r1, [r7, #4]
 8005152:	4613      	mov	r3, r2
 8005154:	011b      	lsls	r3, r3, #4
 8005156:	1a9b      	subs	r3, r3, r2
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	440b      	add	r3, r1
 800515c:	3319      	adds	r3, #25
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	2b01      	cmp	r3, #1
 8005162:	d124      	bne.n	80051ae <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8005164:	78fa      	ldrb	r2, [r7, #3]
 8005166:	6879      	ldr	r1, [r7, #4]
 8005168:	4613      	mov	r3, r2
 800516a:	011b      	lsls	r3, r3, #4
 800516c:	1a9b      	subs	r3, r3, r2
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	440b      	add	r3, r1
 8005172:	3319      	adds	r3, #25
 8005174:	2200      	movs	r2, #0
 8005176:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005178:	78fa      	ldrb	r2, [r7, #3]
 800517a:	6879      	ldr	r1, [r7, #4]
 800517c:	4613      	mov	r3, r2
 800517e:	011b      	lsls	r3, r3, #4
 8005180:	1a9b      	subs	r3, r3, r2
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	440b      	add	r3, r1
 8005186:	334c      	adds	r3, #76	@ 0x4c
 8005188:	2202      	movs	r2, #2
 800518a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800518c:	78fa      	ldrb	r2, [r7, #3]
 800518e:	6879      	ldr	r1, [r7, #4]
 8005190:	4613      	mov	r3, r2
 8005192:	011b      	lsls	r3, r3, #4
 8005194:	1a9b      	subs	r3, r3, r2
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	440b      	add	r3, r1
 800519a:	334d      	adds	r3, #77	@ 0x4d
 800519c:	2203      	movs	r2, #3
 800519e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	78fa      	ldrb	r2, [r7, #3]
 80051a6:	4611      	mov	r1, r2
 80051a8:	4618      	mov	r0, r3
 80051aa:	f004 fa86 	bl	80096ba <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80051ae:	78fa      	ldrb	r2, [r7, #3]
 80051b0:	6879      	ldr	r1, [r7, #4]
 80051b2:	4613      	mov	r3, r2
 80051b4:	011b      	lsls	r3, r3, #4
 80051b6:	1a9b      	subs	r3, r3, r2
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	440b      	add	r3, r1
 80051bc:	331a      	adds	r3, #26
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	f040 8437 	bne.w	8005a34 <HCD_HC_OUT_IRQHandler+0x978>
 80051c6:	78fa      	ldrb	r2, [r7, #3]
 80051c8:	6879      	ldr	r1, [r7, #4]
 80051ca:	4613      	mov	r3, r2
 80051cc:	011b      	lsls	r3, r3, #4
 80051ce:	1a9b      	subs	r3, r3, r2
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	440b      	add	r3, r1
 80051d4:	331b      	adds	r3, #27
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	f040 842b 	bne.w	8005a34 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80051de:	78fa      	ldrb	r2, [r7, #3]
 80051e0:	6879      	ldr	r1, [r7, #4]
 80051e2:	4613      	mov	r3, r2
 80051e4:	011b      	lsls	r3, r3, #4
 80051e6:	1a9b      	subs	r3, r3, r2
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	440b      	add	r3, r1
 80051ec:	3326      	adds	r3, #38	@ 0x26
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d009      	beq.n	8005208 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80051f4:	78fa      	ldrb	r2, [r7, #3]
 80051f6:	6879      	ldr	r1, [r7, #4]
 80051f8:	4613      	mov	r3, r2
 80051fa:	011b      	lsls	r3, r3, #4
 80051fc:	1a9b      	subs	r3, r3, r2
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	440b      	add	r3, r1
 8005202:	331b      	adds	r3, #27
 8005204:	2201      	movs	r2, #1
 8005206:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8005208:	78fa      	ldrb	r2, [r7, #3]
 800520a:	6879      	ldr	r1, [r7, #4]
 800520c:	4613      	mov	r3, r2
 800520e:	011b      	lsls	r3, r3, #4
 8005210:	1a9b      	subs	r3, r3, r2
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	440b      	add	r3, r1
 8005216:	334d      	adds	r3, #77	@ 0x4d
 8005218:	2203      	movs	r2, #3
 800521a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	78fa      	ldrb	r2, [r7, #3]
 8005222:	4611      	mov	r1, r2
 8005224:	4618      	mov	r0, r3
 8005226:	f004 fa48 	bl	80096ba <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800522a:	78fa      	ldrb	r2, [r7, #3]
 800522c:	6879      	ldr	r1, [r7, #4]
 800522e:	4613      	mov	r3, r2
 8005230:	011b      	lsls	r3, r3, #4
 8005232:	1a9b      	subs	r3, r3, r2
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	440b      	add	r3, r1
 8005238:	3344      	adds	r3, #68	@ 0x44
 800523a:	2200      	movs	r2, #0
 800523c:	601a      	str	r2, [r3, #0]
 800523e:	e3f9      	b.n	8005a34 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	78fa      	ldrb	r2, [r7, #3]
 8005246:	4611      	mov	r1, r2
 8005248:	4618      	mov	r0, r3
 800524a:	f003 fc8c 	bl	8008b66 <USB_ReadChInterrupts>
 800524e:	4603      	mov	r3, r0
 8005250:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005254:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005258:	d111      	bne.n	800527e <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800525a:	78fb      	ldrb	r3, [r7, #3]
 800525c:	015a      	lsls	r2, r3, #5
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	4413      	add	r3, r2
 8005262:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005266:	461a      	mov	r2, r3
 8005268:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800526c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	78fa      	ldrb	r2, [r7, #3]
 8005274:	4611      	mov	r1, r2
 8005276:	4618      	mov	r0, r3
 8005278:	f004 fa1f 	bl	80096ba <USB_HC_Halt>
 800527c:	e3da      	b.n	8005a34 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	78fa      	ldrb	r2, [r7, #3]
 8005284:	4611      	mov	r1, r2
 8005286:	4618      	mov	r0, r3
 8005288:	f003 fc6d 	bl	8008b66 <USB_ReadChInterrupts>
 800528c:	4603      	mov	r3, r0
 800528e:	f003 0301 	and.w	r3, r3, #1
 8005292:	2b01      	cmp	r3, #1
 8005294:	d168      	bne.n	8005368 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8005296:	78fa      	ldrb	r2, [r7, #3]
 8005298:	6879      	ldr	r1, [r7, #4]
 800529a:	4613      	mov	r3, r2
 800529c:	011b      	lsls	r3, r3, #4
 800529e:	1a9b      	subs	r3, r3, r2
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	440b      	add	r3, r1
 80052a4:	3344      	adds	r3, #68	@ 0x44
 80052a6:	2200      	movs	r2, #0
 80052a8:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	78fa      	ldrb	r2, [r7, #3]
 80052b0:	4611      	mov	r1, r2
 80052b2:	4618      	mov	r0, r3
 80052b4:	f003 fc57 	bl	8008b66 <USB_ReadChInterrupts>
 80052b8:	4603      	mov	r3, r0
 80052ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052be:	2b40      	cmp	r3, #64	@ 0x40
 80052c0:	d112      	bne.n	80052e8 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80052c2:	78fa      	ldrb	r2, [r7, #3]
 80052c4:	6879      	ldr	r1, [r7, #4]
 80052c6:	4613      	mov	r3, r2
 80052c8:	011b      	lsls	r3, r3, #4
 80052ca:	1a9b      	subs	r3, r3, r2
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	440b      	add	r3, r1
 80052d0:	3319      	adds	r3, #25
 80052d2:	2201      	movs	r2, #1
 80052d4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80052d6:	78fb      	ldrb	r3, [r7, #3]
 80052d8:	015a      	lsls	r2, r3, #5
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	4413      	add	r3, r2
 80052de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052e2:	461a      	mov	r2, r3
 80052e4:	2340      	movs	r3, #64	@ 0x40
 80052e6:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80052e8:	78fa      	ldrb	r2, [r7, #3]
 80052ea:	6879      	ldr	r1, [r7, #4]
 80052ec:	4613      	mov	r3, r2
 80052ee:	011b      	lsls	r3, r3, #4
 80052f0:	1a9b      	subs	r3, r3, r2
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	440b      	add	r3, r1
 80052f6:	331b      	adds	r3, #27
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d019      	beq.n	8005332 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80052fe:	78fa      	ldrb	r2, [r7, #3]
 8005300:	6879      	ldr	r1, [r7, #4]
 8005302:	4613      	mov	r3, r2
 8005304:	011b      	lsls	r3, r3, #4
 8005306:	1a9b      	subs	r3, r3, r2
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	440b      	add	r3, r1
 800530c:	331b      	adds	r3, #27
 800530e:	2200      	movs	r2, #0
 8005310:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005312:	78fb      	ldrb	r3, [r7, #3]
 8005314:	015a      	lsls	r2, r3, #5
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	4413      	add	r3, r2
 800531a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	78fa      	ldrb	r2, [r7, #3]
 8005322:	0151      	lsls	r1, r2, #5
 8005324:	693a      	ldr	r2, [r7, #16]
 8005326:	440a      	add	r2, r1
 8005328:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800532c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005330:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8005332:	78fb      	ldrb	r3, [r7, #3]
 8005334:	015a      	lsls	r2, r3, #5
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	4413      	add	r3, r2
 800533a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800533e:	461a      	mov	r2, r3
 8005340:	2301      	movs	r3, #1
 8005342:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8005344:	78fa      	ldrb	r2, [r7, #3]
 8005346:	6879      	ldr	r1, [r7, #4]
 8005348:	4613      	mov	r3, r2
 800534a:	011b      	lsls	r3, r3, #4
 800534c:	1a9b      	subs	r3, r3, r2
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	440b      	add	r3, r1
 8005352:	334d      	adds	r3, #77	@ 0x4d
 8005354:	2201      	movs	r2, #1
 8005356:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	78fa      	ldrb	r2, [r7, #3]
 800535e:	4611      	mov	r1, r2
 8005360:	4618      	mov	r0, r3
 8005362:	f004 f9aa 	bl	80096ba <USB_HC_Halt>
 8005366:	e365      	b.n	8005a34 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	78fa      	ldrb	r2, [r7, #3]
 800536e:	4611      	mov	r1, r2
 8005370:	4618      	mov	r0, r3
 8005372:	f003 fbf8 	bl	8008b66 <USB_ReadChInterrupts>
 8005376:	4603      	mov	r3, r0
 8005378:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800537c:	2b40      	cmp	r3, #64	@ 0x40
 800537e:	d139      	bne.n	80053f4 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8005380:	78fa      	ldrb	r2, [r7, #3]
 8005382:	6879      	ldr	r1, [r7, #4]
 8005384:	4613      	mov	r3, r2
 8005386:	011b      	lsls	r3, r3, #4
 8005388:	1a9b      	subs	r3, r3, r2
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	440b      	add	r3, r1
 800538e:	334d      	adds	r3, #77	@ 0x4d
 8005390:	2205      	movs	r2, #5
 8005392:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8005394:	78fa      	ldrb	r2, [r7, #3]
 8005396:	6879      	ldr	r1, [r7, #4]
 8005398:	4613      	mov	r3, r2
 800539a:	011b      	lsls	r3, r3, #4
 800539c:	1a9b      	subs	r3, r3, r2
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	440b      	add	r3, r1
 80053a2:	331a      	adds	r3, #26
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d109      	bne.n	80053be <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80053aa:	78fa      	ldrb	r2, [r7, #3]
 80053ac:	6879      	ldr	r1, [r7, #4]
 80053ae:	4613      	mov	r3, r2
 80053b0:	011b      	lsls	r3, r3, #4
 80053b2:	1a9b      	subs	r3, r3, r2
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	440b      	add	r3, r1
 80053b8:	3319      	adds	r3, #25
 80053ba:	2201      	movs	r2, #1
 80053bc:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80053be:	78fa      	ldrb	r2, [r7, #3]
 80053c0:	6879      	ldr	r1, [r7, #4]
 80053c2:	4613      	mov	r3, r2
 80053c4:	011b      	lsls	r3, r3, #4
 80053c6:	1a9b      	subs	r3, r3, r2
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	440b      	add	r3, r1
 80053cc:	3344      	adds	r3, #68	@ 0x44
 80053ce:	2200      	movs	r2, #0
 80053d0:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	78fa      	ldrb	r2, [r7, #3]
 80053d8:	4611      	mov	r1, r2
 80053da:	4618      	mov	r0, r3
 80053dc:	f004 f96d 	bl	80096ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80053e0:	78fb      	ldrb	r3, [r7, #3]
 80053e2:	015a      	lsls	r2, r3, #5
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	4413      	add	r3, r2
 80053e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053ec:	461a      	mov	r2, r3
 80053ee:	2340      	movs	r3, #64	@ 0x40
 80053f0:	6093      	str	r3, [r2, #8]
 80053f2:	e31f      	b.n	8005a34 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	78fa      	ldrb	r2, [r7, #3]
 80053fa:	4611      	mov	r1, r2
 80053fc:	4618      	mov	r0, r3
 80053fe:	f003 fbb2 	bl	8008b66 <USB_ReadChInterrupts>
 8005402:	4603      	mov	r3, r0
 8005404:	f003 0308 	and.w	r3, r3, #8
 8005408:	2b08      	cmp	r3, #8
 800540a:	d11a      	bne.n	8005442 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800540c:	78fb      	ldrb	r3, [r7, #3]
 800540e:	015a      	lsls	r2, r3, #5
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	4413      	add	r3, r2
 8005414:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005418:	461a      	mov	r2, r3
 800541a:	2308      	movs	r3, #8
 800541c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800541e:	78fa      	ldrb	r2, [r7, #3]
 8005420:	6879      	ldr	r1, [r7, #4]
 8005422:	4613      	mov	r3, r2
 8005424:	011b      	lsls	r3, r3, #4
 8005426:	1a9b      	subs	r3, r3, r2
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	440b      	add	r3, r1
 800542c:	334d      	adds	r3, #77	@ 0x4d
 800542e:	2206      	movs	r2, #6
 8005430:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	78fa      	ldrb	r2, [r7, #3]
 8005438:	4611      	mov	r1, r2
 800543a:	4618      	mov	r0, r3
 800543c:	f004 f93d 	bl	80096ba <USB_HC_Halt>
 8005440:	e2f8      	b.n	8005a34 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	78fa      	ldrb	r2, [r7, #3]
 8005448:	4611      	mov	r1, r2
 800544a:	4618      	mov	r0, r3
 800544c:	f003 fb8b 	bl	8008b66 <USB_ReadChInterrupts>
 8005450:	4603      	mov	r3, r0
 8005452:	f003 0310 	and.w	r3, r3, #16
 8005456:	2b10      	cmp	r3, #16
 8005458:	d144      	bne.n	80054e4 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800545a:	78fa      	ldrb	r2, [r7, #3]
 800545c:	6879      	ldr	r1, [r7, #4]
 800545e:	4613      	mov	r3, r2
 8005460:	011b      	lsls	r3, r3, #4
 8005462:	1a9b      	subs	r3, r3, r2
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	440b      	add	r3, r1
 8005468:	3344      	adds	r3, #68	@ 0x44
 800546a:	2200      	movs	r2, #0
 800546c:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800546e:	78fa      	ldrb	r2, [r7, #3]
 8005470:	6879      	ldr	r1, [r7, #4]
 8005472:	4613      	mov	r3, r2
 8005474:	011b      	lsls	r3, r3, #4
 8005476:	1a9b      	subs	r3, r3, r2
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	440b      	add	r3, r1
 800547c:	334d      	adds	r3, #77	@ 0x4d
 800547e:	2204      	movs	r2, #4
 8005480:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8005482:	78fa      	ldrb	r2, [r7, #3]
 8005484:	6879      	ldr	r1, [r7, #4]
 8005486:	4613      	mov	r3, r2
 8005488:	011b      	lsls	r3, r3, #4
 800548a:	1a9b      	subs	r3, r3, r2
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	440b      	add	r3, r1
 8005490:	3319      	adds	r3, #25
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d114      	bne.n	80054c2 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8005498:	78fa      	ldrb	r2, [r7, #3]
 800549a:	6879      	ldr	r1, [r7, #4]
 800549c:	4613      	mov	r3, r2
 800549e:	011b      	lsls	r3, r3, #4
 80054a0:	1a9b      	subs	r3, r3, r2
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	440b      	add	r3, r1
 80054a6:	3318      	adds	r3, #24
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d109      	bne.n	80054c2 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80054ae:	78fa      	ldrb	r2, [r7, #3]
 80054b0:	6879      	ldr	r1, [r7, #4]
 80054b2:	4613      	mov	r3, r2
 80054b4:	011b      	lsls	r3, r3, #4
 80054b6:	1a9b      	subs	r3, r3, r2
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	440b      	add	r3, r1
 80054bc:	3319      	adds	r3, #25
 80054be:	2201      	movs	r2, #1
 80054c0:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	78fa      	ldrb	r2, [r7, #3]
 80054c8:	4611      	mov	r1, r2
 80054ca:	4618      	mov	r0, r3
 80054cc:	f004 f8f5 	bl	80096ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80054d0:	78fb      	ldrb	r3, [r7, #3]
 80054d2:	015a      	lsls	r2, r3, #5
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	4413      	add	r3, r2
 80054d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054dc:	461a      	mov	r2, r3
 80054de:	2310      	movs	r3, #16
 80054e0:	6093      	str	r3, [r2, #8]
 80054e2:	e2a7      	b.n	8005a34 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	78fa      	ldrb	r2, [r7, #3]
 80054ea:	4611      	mov	r1, r2
 80054ec:	4618      	mov	r0, r3
 80054ee:	f003 fb3a 	bl	8008b66 <USB_ReadChInterrupts>
 80054f2:	4603      	mov	r3, r0
 80054f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054f8:	2b80      	cmp	r3, #128	@ 0x80
 80054fa:	f040 8083 	bne.w	8005604 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	799b      	ldrb	r3, [r3, #6]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d111      	bne.n	800552a <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8005506:	78fa      	ldrb	r2, [r7, #3]
 8005508:	6879      	ldr	r1, [r7, #4]
 800550a:	4613      	mov	r3, r2
 800550c:	011b      	lsls	r3, r3, #4
 800550e:	1a9b      	subs	r3, r3, r2
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	440b      	add	r3, r1
 8005514:	334d      	adds	r3, #77	@ 0x4d
 8005516:	2207      	movs	r2, #7
 8005518:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	78fa      	ldrb	r2, [r7, #3]
 8005520:	4611      	mov	r1, r2
 8005522:	4618      	mov	r0, r3
 8005524:	f004 f8c9 	bl	80096ba <USB_HC_Halt>
 8005528:	e062      	b.n	80055f0 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800552a:	78fa      	ldrb	r2, [r7, #3]
 800552c:	6879      	ldr	r1, [r7, #4]
 800552e:	4613      	mov	r3, r2
 8005530:	011b      	lsls	r3, r3, #4
 8005532:	1a9b      	subs	r3, r3, r2
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	440b      	add	r3, r1
 8005538:	3344      	adds	r3, #68	@ 0x44
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	1c59      	adds	r1, r3, #1
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	4613      	mov	r3, r2
 8005542:	011b      	lsls	r3, r3, #4
 8005544:	1a9b      	subs	r3, r3, r2
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	4403      	add	r3, r0
 800554a:	3344      	adds	r3, #68	@ 0x44
 800554c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800554e:	78fa      	ldrb	r2, [r7, #3]
 8005550:	6879      	ldr	r1, [r7, #4]
 8005552:	4613      	mov	r3, r2
 8005554:	011b      	lsls	r3, r3, #4
 8005556:	1a9b      	subs	r3, r3, r2
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	440b      	add	r3, r1
 800555c:	3344      	adds	r3, #68	@ 0x44
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2b02      	cmp	r3, #2
 8005562:	d922      	bls.n	80055aa <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005564:	78fa      	ldrb	r2, [r7, #3]
 8005566:	6879      	ldr	r1, [r7, #4]
 8005568:	4613      	mov	r3, r2
 800556a:	011b      	lsls	r3, r3, #4
 800556c:	1a9b      	subs	r3, r3, r2
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	440b      	add	r3, r1
 8005572:	3344      	adds	r3, #68	@ 0x44
 8005574:	2200      	movs	r2, #0
 8005576:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005578:	78fa      	ldrb	r2, [r7, #3]
 800557a:	6879      	ldr	r1, [r7, #4]
 800557c:	4613      	mov	r3, r2
 800557e:	011b      	lsls	r3, r3, #4
 8005580:	1a9b      	subs	r3, r3, r2
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	440b      	add	r3, r1
 8005586:	334c      	adds	r3, #76	@ 0x4c
 8005588:	2204      	movs	r2, #4
 800558a:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800558c:	78fa      	ldrb	r2, [r7, #3]
 800558e:	6879      	ldr	r1, [r7, #4]
 8005590:	4613      	mov	r3, r2
 8005592:	011b      	lsls	r3, r3, #4
 8005594:	1a9b      	subs	r3, r3, r2
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	440b      	add	r3, r1
 800559a:	334c      	adds	r3, #76	@ 0x4c
 800559c:	781a      	ldrb	r2, [r3, #0]
 800559e:	78fb      	ldrb	r3, [r7, #3]
 80055a0:	4619      	mov	r1, r3
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f006 fbe8 	bl	800bd78 <HAL_HCD_HC_NotifyURBChange_Callback>
 80055a8:	e022      	b.n	80055f0 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80055aa:	78fa      	ldrb	r2, [r7, #3]
 80055ac:	6879      	ldr	r1, [r7, #4]
 80055ae:	4613      	mov	r3, r2
 80055b0:	011b      	lsls	r3, r3, #4
 80055b2:	1a9b      	subs	r3, r3, r2
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	440b      	add	r3, r1
 80055b8:	334c      	adds	r3, #76	@ 0x4c
 80055ba:	2202      	movs	r2, #2
 80055bc:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80055be:	78fb      	ldrb	r3, [r7, #3]
 80055c0:	015a      	lsls	r2, r3, #5
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	4413      	add	r3, r2
 80055c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80055d4:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80055dc:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80055de:	78fb      	ldrb	r3, [r7, #3]
 80055e0:	015a      	lsls	r2, r3, #5
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	4413      	add	r3, r2
 80055e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055ea:	461a      	mov	r2, r3
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80055f0:	78fb      	ldrb	r3, [r7, #3]
 80055f2:	015a      	lsls	r2, r3, #5
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	4413      	add	r3, r2
 80055f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055fc:	461a      	mov	r2, r3
 80055fe:	2380      	movs	r3, #128	@ 0x80
 8005600:	6093      	str	r3, [r2, #8]
 8005602:	e217      	b.n	8005a34 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	78fa      	ldrb	r2, [r7, #3]
 800560a:	4611      	mov	r1, r2
 800560c:	4618      	mov	r0, r3
 800560e:	f003 faaa 	bl	8008b66 <USB_ReadChInterrupts>
 8005612:	4603      	mov	r3, r0
 8005614:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005618:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800561c:	d11b      	bne.n	8005656 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800561e:	78fa      	ldrb	r2, [r7, #3]
 8005620:	6879      	ldr	r1, [r7, #4]
 8005622:	4613      	mov	r3, r2
 8005624:	011b      	lsls	r3, r3, #4
 8005626:	1a9b      	subs	r3, r3, r2
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	440b      	add	r3, r1
 800562c:	334d      	adds	r3, #77	@ 0x4d
 800562e:	2209      	movs	r2, #9
 8005630:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	78fa      	ldrb	r2, [r7, #3]
 8005638:	4611      	mov	r1, r2
 800563a:	4618      	mov	r0, r3
 800563c:	f004 f83d 	bl	80096ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8005640:	78fb      	ldrb	r3, [r7, #3]
 8005642:	015a      	lsls	r2, r3, #5
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	4413      	add	r3, r2
 8005648:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800564c:	461a      	mov	r2, r3
 800564e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005652:	6093      	str	r3, [r2, #8]
 8005654:	e1ee      	b.n	8005a34 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	78fa      	ldrb	r2, [r7, #3]
 800565c:	4611      	mov	r1, r2
 800565e:	4618      	mov	r0, r3
 8005660:	f003 fa81 	bl	8008b66 <USB_ReadChInterrupts>
 8005664:	4603      	mov	r3, r0
 8005666:	f003 0302 	and.w	r3, r3, #2
 800566a:	2b02      	cmp	r3, #2
 800566c:	f040 81df 	bne.w	8005a2e <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8005670:	78fb      	ldrb	r3, [r7, #3]
 8005672:	015a      	lsls	r2, r3, #5
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	4413      	add	r3, r2
 8005678:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800567c:	461a      	mov	r2, r3
 800567e:	2302      	movs	r3, #2
 8005680:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8005682:	78fa      	ldrb	r2, [r7, #3]
 8005684:	6879      	ldr	r1, [r7, #4]
 8005686:	4613      	mov	r3, r2
 8005688:	011b      	lsls	r3, r3, #4
 800568a:	1a9b      	subs	r3, r3, r2
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	440b      	add	r3, r1
 8005690:	334d      	adds	r3, #77	@ 0x4d
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	2b01      	cmp	r3, #1
 8005696:	f040 8093 	bne.w	80057c0 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800569a:	78fa      	ldrb	r2, [r7, #3]
 800569c:	6879      	ldr	r1, [r7, #4]
 800569e:	4613      	mov	r3, r2
 80056a0:	011b      	lsls	r3, r3, #4
 80056a2:	1a9b      	subs	r3, r3, r2
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	440b      	add	r3, r1
 80056a8:	334d      	adds	r3, #77	@ 0x4d
 80056aa:	2202      	movs	r2, #2
 80056ac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80056ae:	78fa      	ldrb	r2, [r7, #3]
 80056b0:	6879      	ldr	r1, [r7, #4]
 80056b2:	4613      	mov	r3, r2
 80056b4:	011b      	lsls	r3, r3, #4
 80056b6:	1a9b      	subs	r3, r3, r2
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	440b      	add	r3, r1
 80056bc:	334c      	adds	r3, #76	@ 0x4c
 80056be:	2201      	movs	r2, #1
 80056c0:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80056c2:	78fa      	ldrb	r2, [r7, #3]
 80056c4:	6879      	ldr	r1, [r7, #4]
 80056c6:	4613      	mov	r3, r2
 80056c8:	011b      	lsls	r3, r3, #4
 80056ca:	1a9b      	subs	r3, r3, r2
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	440b      	add	r3, r1
 80056d0:	3326      	adds	r3, #38	@ 0x26
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	2b02      	cmp	r3, #2
 80056d6:	d00b      	beq.n	80056f0 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80056d8:	78fa      	ldrb	r2, [r7, #3]
 80056da:	6879      	ldr	r1, [r7, #4]
 80056dc:	4613      	mov	r3, r2
 80056de:	011b      	lsls	r3, r3, #4
 80056e0:	1a9b      	subs	r3, r3, r2
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	440b      	add	r3, r1
 80056e6:	3326      	adds	r3, #38	@ 0x26
 80056e8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80056ea:	2b03      	cmp	r3, #3
 80056ec:	f040 8190 	bne.w	8005a10 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	799b      	ldrb	r3, [r3, #6]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d115      	bne.n	8005724 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80056f8:	78fa      	ldrb	r2, [r7, #3]
 80056fa:	6879      	ldr	r1, [r7, #4]
 80056fc:	4613      	mov	r3, r2
 80056fe:	011b      	lsls	r3, r3, #4
 8005700:	1a9b      	subs	r3, r3, r2
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	440b      	add	r3, r1
 8005706:	333d      	adds	r3, #61	@ 0x3d
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	78fa      	ldrb	r2, [r7, #3]
 800570c:	f083 0301 	eor.w	r3, r3, #1
 8005710:	b2d8      	uxtb	r0, r3
 8005712:	6879      	ldr	r1, [r7, #4]
 8005714:	4613      	mov	r3, r2
 8005716:	011b      	lsls	r3, r3, #4
 8005718:	1a9b      	subs	r3, r3, r2
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	440b      	add	r3, r1
 800571e:	333d      	adds	r3, #61	@ 0x3d
 8005720:	4602      	mov	r2, r0
 8005722:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	799b      	ldrb	r3, [r3, #6]
 8005728:	2b01      	cmp	r3, #1
 800572a:	f040 8171 	bne.w	8005a10 <HCD_HC_OUT_IRQHandler+0x954>
 800572e:	78fa      	ldrb	r2, [r7, #3]
 8005730:	6879      	ldr	r1, [r7, #4]
 8005732:	4613      	mov	r3, r2
 8005734:	011b      	lsls	r3, r3, #4
 8005736:	1a9b      	subs	r3, r3, r2
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	440b      	add	r3, r1
 800573c:	3334      	adds	r3, #52	@ 0x34
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2b00      	cmp	r3, #0
 8005742:	f000 8165 	beq.w	8005a10 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8005746:	78fa      	ldrb	r2, [r7, #3]
 8005748:	6879      	ldr	r1, [r7, #4]
 800574a:	4613      	mov	r3, r2
 800574c:	011b      	lsls	r3, r3, #4
 800574e:	1a9b      	subs	r3, r3, r2
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	440b      	add	r3, r1
 8005754:	3334      	adds	r3, #52	@ 0x34
 8005756:	6819      	ldr	r1, [r3, #0]
 8005758:	78fa      	ldrb	r2, [r7, #3]
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	4613      	mov	r3, r2
 800575e:	011b      	lsls	r3, r3, #4
 8005760:	1a9b      	subs	r3, r3, r2
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	4403      	add	r3, r0
 8005766:	3328      	adds	r3, #40	@ 0x28
 8005768:	881b      	ldrh	r3, [r3, #0]
 800576a:	440b      	add	r3, r1
 800576c:	1e59      	subs	r1, r3, #1
 800576e:	78fa      	ldrb	r2, [r7, #3]
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	4613      	mov	r3, r2
 8005774:	011b      	lsls	r3, r3, #4
 8005776:	1a9b      	subs	r3, r3, r2
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	4403      	add	r3, r0
 800577c:	3328      	adds	r3, #40	@ 0x28
 800577e:	881b      	ldrh	r3, [r3, #0]
 8005780:	fbb1 f3f3 	udiv	r3, r1, r3
 8005784:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	f003 0301 	and.w	r3, r3, #1
 800578c:	2b00      	cmp	r3, #0
 800578e:	f000 813f 	beq.w	8005a10 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8005792:	78fa      	ldrb	r2, [r7, #3]
 8005794:	6879      	ldr	r1, [r7, #4]
 8005796:	4613      	mov	r3, r2
 8005798:	011b      	lsls	r3, r3, #4
 800579a:	1a9b      	subs	r3, r3, r2
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	440b      	add	r3, r1
 80057a0:	333d      	adds	r3, #61	@ 0x3d
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	78fa      	ldrb	r2, [r7, #3]
 80057a6:	f083 0301 	eor.w	r3, r3, #1
 80057aa:	b2d8      	uxtb	r0, r3
 80057ac:	6879      	ldr	r1, [r7, #4]
 80057ae:	4613      	mov	r3, r2
 80057b0:	011b      	lsls	r3, r3, #4
 80057b2:	1a9b      	subs	r3, r3, r2
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	440b      	add	r3, r1
 80057b8:	333d      	adds	r3, #61	@ 0x3d
 80057ba:	4602      	mov	r2, r0
 80057bc:	701a      	strb	r2, [r3, #0]
 80057be:	e127      	b.n	8005a10 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80057c0:	78fa      	ldrb	r2, [r7, #3]
 80057c2:	6879      	ldr	r1, [r7, #4]
 80057c4:	4613      	mov	r3, r2
 80057c6:	011b      	lsls	r3, r3, #4
 80057c8:	1a9b      	subs	r3, r3, r2
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	440b      	add	r3, r1
 80057ce:	334d      	adds	r3, #77	@ 0x4d
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	2b03      	cmp	r3, #3
 80057d4:	d120      	bne.n	8005818 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80057d6:	78fa      	ldrb	r2, [r7, #3]
 80057d8:	6879      	ldr	r1, [r7, #4]
 80057da:	4613      	mov	r3, r2
 80057dc:	011b      	lsls	r3, r3, #4
 80057de:	1a9b      	subs	r3, r3, r2
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	440b      	add	r3, r1
 80057e4:	334d      	adds	r3, #77	@ 0x4d
 80057e6:	2202      	movs	r2, #2
 80057e8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80057ea:	78fa      	ldrb	r2, [r7, #3]
 80057ec:	6879      	ldr	r1, [r7, #4]
 80057ee:	4613      	mov	r3, r2
 80057f0:	011b      	lsls	r3, r3, #4
 80057f2:	1a9b      	subs	r3, r3, r2
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	440b      	add	r3, r1
 80057f8:	331b      	adds	r3, #27
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	f040 8107 	bne.w	8005a10 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005802:	78fa      	ldrb	r2, [r7, #3]
 8005804:	6879      	ldr	r1, [r7, #4]
 8005806:	4613      	mov	r3, r2
 8005808:	011b      	lsls	r3, r3, #4
 800580a:	1a9b      	subs	r3, r3, r2
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	440b      	add	r3, r1
 8005810:	334c      	adds	r3, #76	@ 0x4c
 8005812:	2202      	movs	r2, #2
 8005814:	701a      	strb	r2, [r3, #0]
 8005816:	e0fb      	b.n	8005a10 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8005818:	78fa      	ldrb	r2, [r7, #3]
 800581a:	6879      	ldr	r1, [r7, #4]
 800581c:	4613      	mov	r3, r2
 800581e:	011b      	lsls	r3, r3, #4
 8005820:	1a9b      	subs	r3, r3, r2
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	440b      	add	r3, r1
 8005826:	334d      	adds	r3, #77	@ 0x4d
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	2b04      	cmp	r3, #4
 800582c:	d13a      	bne.n	80058a4 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800582e:	78fa      	ldrb	r2, [r7, #3]
 8005830:	6879      	ldr	r1, [r7, #4]
 8005832:	4613      	mov	r3, r2
 8005834:	011b      	lsls	r3, r3, #4
 8005836:	1a9b      	subs	r3, r3, r2
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	440b      	add	r3, r1
 800583c:	334d      	adds	r3, #77	@ 0x4d
 800583e:	2202      	movs	r2, #2
 8005840:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005842:	78fa      	ldrb	r2, [r7, #3]
 8005844:	6879      	ldr	r1, [r7, #4]
 8005846:	4613      	mov	r3, r2
 8005848:	011b      	lsls	r3, r3, #4
 800584a:	1a9b      	subs	r3, r3, r2
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	440b      	add	r3, r1
 8005850:	334c      	adds	r3, #76	@ 0x4c
 8005852:	2202      	movs	r2, #2
 8005854:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005856:	78fa      	ldrb	r2, [r7, #3]
 8005858:	6879      	ldr	r1, [r7, #4]
 800585a:	4613      	mov	r3, r2
 800585c:	011b      	lsls	r3, r3, #4
 800585e:	1a9b      	subs	r3, r3, r2
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	440b      	add	r3, r1
 8005864:	331b      	adds	r3, #27
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	2b01      	cmp	r3, #1
 800586a:	f040 80d1 	bne.w	8005a10 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800586e:	78fa      	ldrb	r2, [r7, #3]
 8005870:	6879      	ldr	r1, [r7, #4]
 8005872:	4613      	mov	r3, r2
 8005874:	011b      	lsls	r3, r3, #4
 8005876:	1a9b      	subs	r3, r3, r2
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	440b      	add	r3, r1
 800587c:	331b      	adds	r3, #27
 800587e:	2200      	movs	r2, #0
 8005880:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005882:	78fb      	ldrb	r3, [r7, #3]
 8005884:	015a      	lsls	r2, r3, #5
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	4413      	add	r3, r2
 800588a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	78fa      	ldrb	r2, [r7, #3]
 8005892:	0151      	lsls	r1, r2, #5
 8005894:	693a      	ldr	r2, [r7, #16]
 8005896:	440a      	add	r2, r1
 8005898:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800589c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058a0:	6053      	str	r3, [r2, #4]
 80058a2:	e0b5      	b.n	8005a10 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80058a4:	78fa      	ldrb	r2, [r7, #3]
 80058a6:	6879      	ldr	r1, [r7, #4]
 80058a8:	4613      	mov	r3, r2
 80058aa:	011b      	lsls	r3, r3, #4
 80058ac:	1a9b      	subs	r3, r3, r2
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	440b      	add	r3, r1
 80058b2:	334d      	adds	r3, #77	@ 0x4d
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	2b05      	cmp	r3, #5
 80058b8:	d114      	bne.n	80058e4 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80058ba:	78fa      	ldrb	r2, [r7, #3]
 80058bc:	6879      	ldr	r1, [r7, #4]
 80058be:	4613      	mov	r3, r2
 80058c0:	011b      	lsls	r3, r3, #4
 80058c2:	1a9b      	subs	r3, r3, r2
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	440b      	add	r3, r1
 80058c8:	334d      	adds	r3, #77	@ 0x4d
 80058ca:	2202      	movs	r2, #2
 80058cc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80058ce:	78fa      	ldrb	r2, [r7, #3]
 80058d0:	6879      	ldr	r1, [r7, #4]
 80058d2:	4613      	mov	r3, r2
 80058d4:	011b      	lsls	r3, r3, #4
 80058d6:	1a9b      	subs	r3, r3, r2
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	440b      	add	r3, r1
 80058dc:	334c      	adds	r3, #76	@ 0x4c
 80058de:	2202      	movs	r2, #2
 80058e0:	701a      	strb	r2, [r3, #0]
 80058e2:	e095      	b.n	8005a10 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80058e4:	78fa      	ldrb	r2, [r7, #3]
 80058e6:	6879      	ldr	r1, [r7, #4]
 80058e8:	4613      	mov	r3, r2
 80058ea:	011b      	lsls	r3, r3, #4
 80058ec:	1a9b      	subs	r3, r3, r2
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	440b      	add	r3, r1
 80058f2:	334d      	adds	r3, #77	@ 0x4d
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	2b06      	cmp	r3, #6
 80058f8:	d114      	bne.n	8005924 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80058fa:	78fa      	ldrb	r2, [r7, #3]
 80058fc:	6879      	ldr	r1, [r7, #4]
 80058fe:	4613      	mov	r3, r2
 8005900:	011b      	lsls	r3, r3, #4
 8005902:	1a9b      	subs	r3, r3, r2
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	440b      	add	r3, r1
 8005908:	334d      	adds	r3, #77	@ 0x4d
 800590a:	2202      	movs	r2, #2
 800590c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800590e:	78fa      	ldrb	r2, [r7, #3]
 8005910:	6879      	ldr	r1, [r7, #4]
 8005912:	4613      	mov	r3, r2
 8005914:	011b      	lsls	r3, r3, #4
 8005916:	1a9b      	subs	r3, r3, r2
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	440b      	add	r3, r1
 800591c:	334c      	adds	r3, #76	@ 0x4c
 800591e:	2205      	movs	r2, #5
 8005920:	701a      	strb	r2, [r3, #0]
 8005922:	e075      	b.n	8005a10 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005924:	78fa      	ldrb	r2, [r7, #3]
 8005926:	6879      	ldr	r1, [r7, #4]
 8005928:	4613      	mov	r3, r2
 800592a:	011b      	lsls	r3, r3, #4
 800592c:	1a9b      	subs	r3, r3, r2
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	440b      	add	r3, r1
 8005932:	334d      	adds	r3, #77	@ 0x4d
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	2b07      	cmp	r3, #7
 8005938:	d00a      	beq.n	8005950 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800593a:	78fa      	ldrb	r2, [r7, #3]
 800593c:	6879      	ldr	r1, [r7, #4]
 800593e:	4613      	mov	r3, r2
 8005940:	011b      	lsls	r3, r3, #4
 8005942:	1a9b      	subs	r3, r3, r2
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	440b      	add	r3, r1
 8005948:	334d      	adds	r3, #77	@ 0x4d
 800594a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800594c:	2b09      	cmp	r3, #9
 800594e:	d170      	bne.n	8005a32 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005950:	78fa      	ldrb	r2, [r7, #3]
 8005952:	6879      	ldr	r1, [r7, #4]
 8005954:	4613      	mov	r3, r2
 8005956:	011b      	lsls	r3, r3, #4
 8005958:	1a9b      	subs	r3, r3, r2
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	440b      	add	r3, r1
 800595e:	334d      	adds	r3, #77	@ 0x4d
 8005960:	2202      	movs	r2, #2
 8005962:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005964:	78fa      	ldrb	r2, [r7, #3]
 8005966:	6879      	ldr	r1, [r7, #4]
 8005968:	4613      	mov	r3, r2
 800596a:	011b      	lsls	r3, r3, #4
 800596c:	1a9b      	subs	r3, r3, r2
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	440b      	add	r3, r1
 8005972:	3344      	adds	r3, #68	@ 0x44
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	1c59      	adds	r1, r3, #1
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	4613      	mov	r3, r2
 800597c:	011b      	lsls	r3, r3, #4
 800597e:	1a9b      	subs	r3, r3, r2
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	4403      	add	r3, r0
 8005984:	3344      	adds	r3, #68	@ 0x44
 8005986:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005988:	78fa      	ldrb	r2, [r7, #3]
 800598a:	6879      	ldr	r1, [r7, #4]
 800598c:	4613      	mov	r3, r2
 800598e:	011b      	lsls	r3, r3, #4
 8005990:	1a9b      	subs	r3, r3, r2
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	440b      	add	r3, r1
 8005996:	3344      	adds	r3, #68	@ 0x44
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2b02      	cmp	r3, #2
 800599c:	d914      	bls.n	80059c8 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800599e:	78fa      	ldrb	r2, [r7, #3]
 80059a0:	6879      	ldr	r1, [r7, #4]
 80059a2:	4613      	mov	r3, r2
 80059a4:	011b      	lsls	r3, r3, #4
 80059a6:	1a9b      	subs	r3, r3, r2
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	440b      	add	r3, r1
 80059ac:	3344      	adds	r3, #68	@ 0x44
 80059ae:	2200      	movs	r2, #0
 80059b0:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80059b2:	78fa      	ldrb	r2, [r7, #3]
 80059b4:	6879      	ldr	r1, [r7, #4]
 80059b6:	4613      	mov	r3, r2
 80059b8:	011b      	lsls	r3, r3, #4
 80059ba:	1a9b      	subs	r3, r3, r2
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	440b      	add	r3, r1
 80059c0:	334c      	adds	r3, #76	@ 0x4c
 80059c2:	2204      	movs	r2, #4
 80059c4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80059c6:	e022      	b.n	8005a0e <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80059c8:	78fa      	ldrb	r2, [r7, #3]
 80059ca:	6879      	ldr	r1, [r7, #4]
 80059cc:	4613      	mov	r3, r2
 80059ce:	011b      	lsls	r3, r3, #4
 80059d0:	1a9b      	subs	r3, r3, r2
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	440b      	add	r3, r1
 80059d6:	334c      	adds	r3, #76	@ 0x4c
 80059d8:	2202      	movs	r2, #2
 80059da:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80059dc:	78fb      	ldrb	r3, [r7, #3]
 80059de:	015a      	lsls	r2, r3, #5
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	4413      	add	r3, r2
 80059e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80059f2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80059fa:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80059fc:	78fb      	ldrb	r3, [r7, #3]
 80059fe:	015a      	lsls	r2, r3, #5
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	4413      	add	r3, r2
 8005a04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a08:	461a      	mov	r2, r3
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005a0e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005a10:	78fa      	ldrb	r2, [r7, #3]
 8005a12:	6879      	ldr	r1, [r7, #4]
 8005a14:	4613      	mov	r3, r2
 8005a16:	011b      	lsls	r3, r3, #4
 8005a18:	1a9b      	subs	r3, r3, r2
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	440b      	add	r3, r1
 8005a1e:	334c      	adds	r3, #76	@ 0x4c
 8005a20:	781a      	ldrb	r2, [r3, #0]
 8005a22:	78fb      	ldrb	r3, [r7, #3]
 8005a24:	4619      	mov	r1, r3
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f006 f9a6 	bl	800bd78 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005a2c:	e002      	b.n	8005a34 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8005a2e:	bf00      	nop
 8005a30:	e000      	b.n	8005a34 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8005a32:	bf00      	nop
  }
}
 8005a34:	3718      	adds	r7, #24
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}

08005a3a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005a3a:	b580      	push	{r7, lr}
 8005a3c:	b08a      	sub	sp, #40	@ 0x28
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a4a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	f003 030f 	and.w	r3, r3, #15
 8005a5a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	0c5b      	lsrs	r3, r3, #17
 8005a60:	f003 030f 	and.w	r3, r3, #15
 8005a64:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	091b      	lsrs	r3, r3, #4
 8005a6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a6e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	2b02      	cmp	r3, #2
 8005a74:	d004      	beq.n	8005a80 <HCD_RXQLVL_IRQHandler+0x46>
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	2b05      	cmp	r3, #5
 8005a7a:	f000 80b6 	beq.w	8005bea <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005a7e:	e0b7      	b.n	8005bf0 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	f000 80b3 	beq.w	8005bee <HCD_RXQLVL_IRQHandler+0x1b4>
 8005a88:	6879      	ldr	r1, [r7, #4]
 8005a8a:	69ba      	ldr	r2, [r7, #24]
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	011b      	lsls	r3, r3, #4
 8005a90:	1a9b      	subs	r3, r3, r2
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	440b      	add	r3, r1
 8005a96:	332c      	adds	r3, #44	@ 0x2c
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	f000 80a7 	beq.w	8005bee <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8005aa0:	6879      	ldr	r1, [r7, #4]
 8005aa2:	69ba      	ldr	r2, [r7, #24]
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	011b      	lsls	r3, r3, #4
 8005aa8:	1a9b      	subs	r3, r3, r2
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	440b      	add	r3, r1
 8005aae:	3338      	adds	r3, #56	@ 0x38
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	18d1      	adds	r1, r2, r3
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	69ba      	ldr	r2, [r7, #24]
 8005aba:	4613      	mov	r3, r2
 8005abc:	011b      	lsls	r3, r3, #4
 8005abe:	1a9b      	subs	r3, r3, r2
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	4403      	add	r3, r0
 8005ac4:	3334      	adds	r3, #52	@ 0x34
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4299      	cmp	r1, r3
 8005aca:	f200 8083 	bhi.w	8005bd4 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6818      	ldr	r0, [r3, #0]
 8005ad2:	6879      	ldr	r1, [r7, #4]
 8005ad4:	69ba      	ldr	r2, [r7, #24]
 8005ad6:	4613      	mov	r3, r2
 8005ad8:	011b      	lsls	r3, r3, #4
 8005ada:	1a9b      	subs	r3, r3, r2
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	440b      	add	r3, r1
 8005ae0:	332c      	adds	r3, #44	@ 0x2c
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	693a      	ldr	r2, [r7, #16]
 8005ae6:	b292      	uxth	r2, r2
 8005ae8:	4619      	mov	r1, r3
 8005aea:	f002 ffd1 	bl	8008a90 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8005aee:	6879      	ldr	r1, [r7, #4]
 8005af0:	69ba      	ldr	r2, [r7, #24]
 8005af2:	4613      	mov	r3, r2
 8005af4:	011b      	lsls	r3, r3, #4
 8005af6:	1a9b      	subs	r3, r3, r2
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	440b      	add	r3, r1
 8005afc:	332c      	adds	r3, #44	@ 0x2c
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	18d1      	adds	r1, r2, r3
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	69ba      	ldr	r2, [r7, #24]
 8005b08:	4613      	mov	r3, r2
 8005b0a:	011b      	lsls	r3, r3, #4
 8005b0c:	1a9b      	subs	r3, r3, r2
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	4403      	add	r3, r0
 8005b12:	332c      	adds	r3, #44	@ 0x2c
 8005b14:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8005b16:	6879      	ldr	r1, [r7, #4]
 8005b18:	69ba      	ldr	r2, [r7, #24]
 8005b1a:	4613      	mov	r3, r2
 8005b1c:	011b      	lsls	r3, r3, #4
 8005b1e:	1a9b      	subs	r3, r3, r2
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	440b      	add	r3, r1
 8005b24:	3338      	adds	r3, #56	@ 0x38
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	18d1      	adds	r1, r2, r3
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	69ba      	ldr	r2, [r7, #24]
 8005b30:	4613      	mov	r3, r2
 8005b32:	011b      	lsls	r3, r3, #4
 8005b34:	1a9b      	subs	r3, r3, r2
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	4403      	add	r3, r0
 8005b3a:	3338      	adds	r3, #56	@ 0x38
 8005b3c:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	015a      	lsls	r2, r3, #5
 8005b42:	6a3b      	ldr	r3, [r7, #32]
 8005b44:	4413      	add	r3, r2
 8005b46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b4a:	691b      	ldr	r3, [r3, #16]
 8005b4c:	0cdb      	lsrs	r3, r3, #19
 8005b4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b52:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005b54:	6879      	ldr	r1, [r7, #4]
 8005b56:	69ba      	ldr	r2, [r7, #24]
 8005b58:	4613      	mov	r3, r2
 8005b5a:	011b      	lsls	r3, r3, #4
 8005b5c:	1a9b      	subs	r3, r3, r2
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	440b      	add	r3, r1
 8005b62:	3328      	adds	r3, #40	@ 0x28
 8005b64:	881b      	ldrh	r3, [r3, #0]
 8005b66:	461a      	mov	r2, r3
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d13f      	bne.n	8005bee <HCD_RXQLVL_IRQHandler+0x1b4>
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d03c      	beq.n	8005bee <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	015a      	lsls	r2, r3, #5
 8005b78:	6a3b      	ldr	r3, [r7, #32]
 8005b7a:	4413      	add	r3, r2
 8005b7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005b8a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005b92:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8005b94:	69bb      	ldr	r3, [r7, #24]
 8005b96:	015a      	lsls	r2, r3, #5
 8005b98:	6a3b      	ldr	r3, [r7, #32]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8005ba6:	6879      	ldr	r1, [r7, #4]
 8005ba8:	69ba      	ldr	r2, [r7, #24]
 8005baa:	4613      	mov	r3, r2
 8005bac:	011b      	lsls	r3, r3, #4
 8005bae:	1a9b      	subs	r3, r3, r2
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	440b      	add	r3, r1
 8005bb4:	333c      	adds	r3, #60	@ 0x3c
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	f083 0301 	eor.w	r3, r3, #1
 8005bbc:	b2d8      	uxtb	r0, r3
 8005bbe:	6879      	ldr	r1, [r7, #4]
 8005bc0:	69ba      	ldr	r2, [r7, #24]
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	011b      	lsls	r3, r3, #4
 8005bc6:	1a9b      	subs	r3, r3, r2
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	440b      	add	r3, r1
 8005bcc:	333c      	adds	r3, #60	@ 0x3c
 8005bce:	4602      	mov	r2, r0
 8005bd0:	701a      	strb	r2, [r3, #0]
      break;
 8005bd2:	e00c      	b.n	8005bee <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8005bd4:	6879      	ldr	r1, [r7, #4]
 8005bd6:	69ba      	ldr	r2, [r7, #24]
 8005bd8:	4613      	mov	r3, r2
 8005bda:	011b      	lsls	r3, r3, #4
 8005bdc:	1a9b      	subs	r3, r3, r2
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	440b      	add	r3, r1
 8005be2:	334c      	adds	r3, #76	@ 0x4c
 8005be4:	2204      	movs	r2, #4
 8005be6:	701a      	strb	r2, [r3, #0]
      break;
 8005be8:	e001      	b.n	8005bee <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8005bea:	bf00      	nop
 8005bec:	e000      	b.n	8005bf0 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8005bee:	bf00      	nop
  }
}
 8005bf0:	bf00      	nop
 8005bf2:	3728      	adds	r7, #40	@ 0x28
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b086      	sub	sp, #24
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005c24:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f003 0302 	and.w	r3, r3, #2
 8005c2c:	2b02      	cmp	r3, #2
 8005c2e:	d10b      	bne.n	8005c48 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f003 0301 	and.w	r3, r3, #1
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d102      	bne.n	8005c40 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f006 f880 	bl	800bd40 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	f043 0302 	orr.w	r3, r3, #2
 8005c46:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f003 0308 	and.w	r3, r3, #8
 8005c4e:	2b08      	cmp	r3, #8
 8005c50:	d132      	bne.n	8005cb8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	f043 0308 	orr.w	r3, r3, #8
 8005c58:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f003 0304 	and.w	r3, r3, #4
 8005c60:	2b04      	cmp	r3, #4
 8005c62:	d126      	bne.n	8005cb2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	7a5b      	ldrb	r3, [r3, #9]
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	d113      	bne.n	8005c94 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8005c72:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005c76:	d106      	bne.n	8005c86 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2102      	movs	r1, #2
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f003 f89c 	bl	8008dbc <USB_InitFSLSPClkSel>
 8005c84:	e011      	b.n	8005caa <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	2101      	movs	r1, #1
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f003 f895 	bl	8008dbc <USB_InitFSLSPClkSel>
 8005c92:	e00a      	b.n	8005caa <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	79db      	ldrb	r3, [r3, #7]
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d106      	bne.n	8005caa <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8005ca8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f006 f872 	bl	800bd94 <HAL_HCD_PortEnabled_Callback>
 8005cb0:	e002      	b.n	8005cb8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f006 f87c 	bl	800bdb0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f003 0320 	and.w	r3, r3, #32
 8005cbe:	2b20      	cmp	r3, #32
 8005cc0:	d103      	bne.n	8005cca <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	f043 0320 	orr.w	r3, r3, #32
 8005cc8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	6013      	str	r3, [r2, #0]
}
 8005cd6:	bf00      	nop
 8005cd8:	3718      	adds	r7, #24
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
	...

08005ce0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d101      	bne.n	8005cf2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e12b      	b.n	8005f4a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d106      	bne.n	8005d0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f7fc f882 	bl	8001e10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2224      	movs	r2, #36	@ 0x24
 8005d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f022 0201 	bic.w	r2, r2, #1
 8005d22:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005d32:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005d42:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005d44:	f000 fd80 	bl	8006848 <HAL_RCC_GetPCLK1Freq>
 8005d48:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	4a81      	ldr	r2, [pc, #516]	@ (8005f54 <HAL_I2C_Init+0x274>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d807      	bhi.n	8005d64 <HAL_I2C_Init+0x84>
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	4a80      	ldr	r2, [pc, #512]	@ (8005f58 <HAL_I2C_Init+0x278>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	bf94      	ite	ls
 8005d5c:	2301      	movls	r3, #1
 8005d5e:	2300      	movhi	r3, #0
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	e006      	b.n	8005d72 <HAL_I2C_Init+0x92>
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	4a7d      	ldr	r2, [pc, #500]	@ (8005f5c <HAL_I2C_Init+0x27c>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	bf94      	ite	ls
 8005d6c:	2301      	movls	r3, #1
 8005d6e:	2300      	movhi	r3, #0
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d001      	beq.n	8005d7a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e0e7      	b.n	8005f4a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	4a78      	ldr	r2, [pc, #480]	@ (8005f60 <HAL_I2C_Init+0x280>)
 8005d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d82:	0c9b      	lsrs	r3, r3, #18
 8005d84:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68ba      	ldr	r2, [r7, #8]
 8005d96:	430a      	orrs	r2, r1
 8005d98:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	6a1b      	ldr	r3, [r3, #32]
 8005da0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	4a6a      	ldr	r2, [pc, #424]	@ (8005f54 <HAL_I2C_Init+0x274>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d802      	bhi.n	8005db4 <HAL_I2C_Init+0xd4>
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	3301      	adds	r3, #1
 8005db2:	e009      	b.n	8005dc8 <HAL_I2C_Init+0xe8>
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005dba:	fb02 f303 	mul.w	r3, r2, r3
 8005dbe:	4a69      	ldr	r2, [pc, #420]	@ (8005f64 <HAL_I2C_Init+0x284>)
 8005dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8005dc4:	099b      	lsrs	r3, r3, #6
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	6812      	ldr	r2, [r2, #0]
 8005dcc:	430b      	orrs	r3, r1
 8005dce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	69db      	ldr	r3, [r3, #28]
 8005dd6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005dda:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	495c      	ldr	r1, [pc, #368]	@ (8005f54 <HAL_I2C_Init+0x274>)
 8005de4:	428b      	cmp	r3, r1
 8005de6:	d819      	bhi.n	8005e1c <HAL_I2C_Init+0x13c>
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	1e59      	subs	r1, r3, #1
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	005b      	lsls	r3, r3, #1
 8005df2:	fbb1 f3f3 	udiv	r3, r1, r3
 8005df6:	1c59      	adds	r1, r3, #1
 8005df8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005dfc:	400b      	ands	r3, r1
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d00a      	beq.n	8005e18 <HAL_I2C_Init+0x138>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	1e59      	subs	r1, r3, #1
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	005b      	lsls	r3, r3, #1
 8005e0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e10:	3301      	adds	r3, #1
 8005e12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e16:	e051      	b.n	8005ebc <HAL_I2C_Init+0x1dc>
 8005e18:	2304      	movs	r3, #4
 8005e1a:	e04f      	b.n	8005ebc <HAL_I2C_Init+0x1dc>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d111      	bne.n	8005e48 <HAL_I2C_Init+0x168>
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	1e58      	subs	r0, r3, #1
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6859      	ldr	r1, [r3, #4]
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	005b      	lsls	r3, r3, #1
 8005e30:	440b      	add	r3, r1
 8005e32:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e36:	3301      	adds	r3, #1
 8005e38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	bf0c      	ite	eq
 8005e40:	2301      	moveq	r3, #1
 8005e42:	2300      	movne	r3, #0
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	e012      	b.n	8005e6e <HAL_I2C_Init+0x18e>
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	1e58      	subs	r0, r3, #1
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6859      	ldr	r1, [r3, #4]
 8005e50:	460b      	mov	r3, r1
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	440b      	add	r3, r1
 8005e56:	0099      	lsls	r1, r3, #2
 8005e58:	440b      	add	r3, r1
 8005e5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e5e:	3301      	adds	r3, #1
 8005e60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	bf0c      	ite	eq
 8005e68:	2301      	moveq	r3, #1
 8005e6a:	2300      	movne	r3, #0
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d001      	beq.n	8005e76 <HAL_I2C_Init+0x196>
 8005e72:	2301      	movs	r3, #1
 8005e74:	e022      	b.n	8005ebc <HAL_I2C_Init+0x1dc>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d10e      	bne.n	8005e9c <HAL_I2C_Init+0x1bc>
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	1e58      	subs	r0, r3, #1
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6859      	ldr	r1, [r3, #4]
 8005e86:	460b      	mov	r3, r1
 8005e88:	005b      	lsls	r3, r3, #1
 8005e8a:	440b      	add	r3, r1
 8005e8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e90:	3301      	adds	r3, #1
 8005e92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e9a:	e00f      	b.n	8005ebc <HAL_I2C_Init+0x1dc>
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	1e58      	subs	r0, r3, #1
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6859      	ldr	r1, [r3, #4]
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	440b      	add	r3, r1
 8005eaa:	0099      	lsls	r1, r3, #2
 8005eac:	440b      	add	r3, r1
 8005eae:	fbb0 f3f3 	udiv	r3, r0, r3
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005eb8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005ebc:	6879      	ldr	r1, [r7, #4]
 8005ebe:	6809      	ldr	r1, [r1, #0]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	69da      	ldr	r2, [r3, #28]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a1b      	ldr	r3, [r3, #32]
 8005ed6:	431a      	orrs	r2, r3
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	430a      	orrs	r2, r1
 8005ede:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005eea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	6911      	ldr	r1, [r2, #16]
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	68d2      	ldr	r2, [r2, #12]
 8005ef6:	4311      	orrs	r1, r2
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	6812      	ldr	r2, [r2, #0]
 8005efc:	430b      	orrs	r3, r1
 8005efe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	695a      	ldr	r2, [r3, #20]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	699b      	ldr	r3, [r3, #24]
 8005f12:	431a      	orrs	r2, r3
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	430a      	orrs	r2, r1
 8005f1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f042 0201 	orr.w	r2, r2, #1
 8005f2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2220      	movs	r2, #32
 8005f36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005f48:	2300      	movs	r3, #0
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3710      	adds	r7, #16
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	000186a0 	.word	0x000186a0
 8005f58:	001e847f 	.word	0x001e847f
 8005f5c:	003d08ff 	.word	0x003d08ff
 8005f60:	431bde83 	.word	0x431bde83
 8005f64:	10624dd3 	.word	0x10624dd3

08005f68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b086      	sub	sp, #24
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d101      	bne.n	8005f7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e267      	b.n	800644a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f003 0301 	and.w	r3, r3, #1
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d075      	beq.n	8006072 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005f86:	4b88      	ldr	r3, [pc, #544]	@ (80061a8 <HAL_RCC_OscConfig+0x240>)
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	f003 030c 	and.w	r3, r3, #12
 8005f8e:	2b04      	cmp	r3, #4
 8005f90:	d00c      	beq.n	8005fac <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f92:	4b85      	ldr	r3, [pc, #532]	@ (80061a8 <HAL_RCC_OscConfig+0x240>)
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005f9a:	2b08      	cmp	r3, #8
 8005f9c:	d112      	bne.n	8005fc4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f9e:	4b82      	ldr	r3, [pc, #520]	@ (80061a8 <HAL_RCC_OscConfig+0x240>)
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005fa6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005faa:	d10b      	bne.n	8005fc4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fac:	4b7e      	ldr	r3, [pc, #504]	@ (80061a8 <HAL_RCC_OscConfig+0x240>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d05b      	beq.n	8006070 <HAL_RCC_OscConfig+0x108>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d157      	bne.n	8006070 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e242      	b.n	800644a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fcc:	d106      	bne.n	8005fdc <HAL_RCC_OscConfig+0x74>
 8005fce:	4b76      	ldr	r3, [pc, #472]	@ (80061a8 <HAL_RCC_OscConfig+0x240>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a75      	ldr	r2, [pc, #468]	@ (80061a8 <HAL_RCC_OscConfig+0x240>)
 8005fd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fd8:	6013      	str	r3, [r2, #0]
 8005fda:	e01d      	b.n	8006018 <HAL_RCC_OscConfig+0xb0>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005fe4:	d10c      	bne.n	8006000 <HAL_RCC_OscConfig+0x98>
 8005fe6:	4b70      	ldr	r3, [pc, #448]	@ (80061a8 <HAL_RCC_OscConfig+0x240>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a6f      	ldr	r2, [pc, #444]	@ (80061a8 <HAL_RCC_OscConfig+0x240>)
 8005fec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005ff0:	6013      	str	r3, [r2, #0]
 8005ff2:	4b6d      	ldr	r3, [pc, #436]	@ (80061a8 <HAL_RCC_OscConfig+0x240>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a6c      	ldr	r2, [pc, #432]	@ (80061a8 <HAL_RCC_OscConfig+0x240>)
 8005ff8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ffc:	6013      	str	r3, [r2, #0]
 8005ffe:	e00b      	b.n	8006018 <HAL_RCC_OscConfig+0xb0>
 8006000:	4b69      	ldr	r3, [pc, #420]	@ (80061a8 <HAL_RCC_OscConfig+0x240>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a68      	ldr	r2, [pc, #416]	@ (80061a8 <HAL_RCC_OscConfig+0x240>)
 8006006:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800600a:	6013      	str	r3, [r2, #0]
 800600c:	4b66      	ldr	r3, [pc, #408]	@ (80061a8 <HAL_RCC_OscConfig+0x240>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a65      	ldr	r2, [pc, #404]	@ (80061a8 <HAL_RCC_OscConfig+0x240>)
 8006012:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006016:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d013      	beq.n	8006048 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006020:	f7fc f9cc 	bl	80023bc <HAL_GetTick>
 8006024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006026:	e008      	b.n	800603a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006028:	f7fc f9c8 	bl	80023bc <HAL_GetTick>
 800602c:	4602      	mov	r2, r0
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	2b64      	cmp	r3, #100	@ 0x64
 8006034:	d901      	bls.n	800603a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006036:	2303      	movs	r3, #3
 8006038:	e207      	b.n	800644a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800603a:	4b5b      	ldr	r3, [pc, #364]	@ (80061a8 <HAL_RCC_OscConfig+0x240>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006042:	2b00      	cmp	r3, #0
 8006044:	d0f0      	beq.n	8006028 <HAL_RCC_OscConfig+0xc0>
 8006046:	e014      	b.n	8006072 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006048:	f7fc f9b8 	bl	80023bc <HAL_GetTick>
 800604c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800604e:	e008      	b.n	8006062 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006050:	f7fc f9b4 	bl	80023bc <HAL_GetTick>
 8006054:	4602      	mov	r2, r0
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	2b64      	cmp	r3, #100	@ 0x64
 800605c:	d901      	bls.n	8006062 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	e1f3      	b.n	800644a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006062:	4b51      	ldr	r3, [pc, #324]	@ (80061a8 <HAL_RCC_OscConfig+0x240>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800606a:	2b00      	cmp	r3, #0
 800606c:	d1f0      	bne.n	8006050 <HAL_RCC_OscConfig+0xe8>
 800606e:	e000      	b.n	8006072 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006070:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 0302 	and.w	r3, r3, #2
 800607a:	2b00      	cmp	r3, #0
 800607c:	d063      	beq.n	8006146 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800607e:	4b4a      	ldr	r3, [pc, #296]	@ (80061a8 <HAL_RCC_OscConfig+0x240>)
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	f003 030c 	and.w	r3, r3, #12
 8006086:	2b00      	cmp	r3, #0
 8006088:	d00b      	beq.n	80060a2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800608a:	4b47      	ldr	r3, [pc, #284]	@ (80061a8 <HAL_RCC_OscConfig+0x240>)
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006092:	2b08      	cmp	r3, #8
 8006094:	d11c      	bne.n	80060d0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006096:	4b44      	ldr	r3, [pc, #272]	@ (80061a8 <HAL_RCC_OscConfig+0x240>)
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d116      	bne.n	80060d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060a2:	4b41      	ldr	r3, [pc, #260]	@ (80061a8 <HAL_RCC_OscConfig+0x240>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f003 0302 	and.w	r3, r3, #2
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d005      	beq.n	80060ba <HAL_RCC_OscConfig+0x152>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d001      	beq.n	80060ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e1c7      	b.n	800644a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060ba:	4b3b      	ldr	r3, [pc, #236]	@ (80061a8 <HAL_RCC_OscConfig+0x240>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	00db      	lsls	r3, r3, #3
 80060c8:	4937      	ldr	r1, [pc, #220]	@ (80061a8 <HAL_RCC_OscConfig+0x240>)
 80060ca:	4313      	orrs	r3, r2
 80060cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060ce:	e03a      	b.n	8006146 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d020      	beq.n	800611a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060d8:	4b34      	ldr	r3, [pc, #208]	@ (80061ac <HAL_RCC_OscConfig+0x244>)
 80060da:	2201      	movs	r2, #1
 80060dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060de:	f7fc f96d 	bl	80023bc <HAL_GetTick>
 80060e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060e4:	e008      	b.n	80060f8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060e6:	f7fc f969 	bl	80023bc <HAL_GetTick>
 80060ea:	4602      	mov	r2, r0
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	1ad3      	subs	r3, r2, r3
 80060f0:	2b02      	cmp	r3, #2
 80060f2:	d901      	bls.n	80060f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80060f4:	2303      	movs	r3, #3
 80060f6:	e1a8      	b.n	800644a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060f8:	4b2b      	ldr	r3, [pc, #172]	@ (80061a8 <HAL_RCC_OscConfig+0x240>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 0302 	and.w	r3, r3, #2
 8006100:	2b00      	cmp	r3, #0
 8006102:	d0f0      	beq.n	80060e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006104:	4b28      	ldr	r3, [pc, #160]	@ (80061a8 <HAL_RCC_OscConfig+0x240>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	691b      	ldr	r3, [r3, #16]
 8006110:	00db      	lsls	r3, r3, #3
 8006112:	4925      	ldr	r1, [pc, #148]	@ (80061a8 <HAL_RCC_OscConfig+0x240>)
 8006114:	4313      	orrs	r3, r2
 8006116:	600b      	str	r3, [r1, #0]
 8006118:	e015      	b.n	8006146 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800611a:	4b24      	ldr	r3, [pc, #144]	@ (80061ac <HAL_RCC_OscConfig+0x244>)
 800611c:	2200      	movs	r2, #0
 800611e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006120:	f7fc f94c 	bl	80023bc <HAL_GetTick>
 8006124:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006126:	e008      	b.n	800613a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006128:	f7fc f948 	bl	80023bc <HAL_GetTick>
 800612c:	4602      	mov	r2, r0
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	1ad3      	subs	r3, r2, r3
 8006132:	2b02      	cmp	r3, #2
 8006134:	d901      	bls.n	800613a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006136:	2303      	movs	r3, #3
 8006138:	e187      	b.n	800644a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800613a:	4b1b      	ldr	r3, [pc, #108]	@ (80061a8 <HAL_RCC_OscConfig+0x240>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f003 0302 	and.w	r3, r3, #2
 8006142:	2b00      	cmp	r3, #0
 8006144:	d1f0      	bne.n	8006128 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 0308 	and.w	r3, r3, #8
 800614e:	2b00      	cmp	r3, #0
 8006150:	d036      	beq.n	80061c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	695b      	ldr	r3, [r3, #20]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d016      	beq.n	8006188 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800615a:	4b15      	ldr	r3, [pc, #84]	@ (80061b0 <HAL_RCC_OscConfig+0x248>)
 800615c:	2201      	movs	r2, #1
 800615e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006160:	f7fc f92c 	bl	80023bc <HAL_GetTick>
 8006164:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006166:	e008      	b.n	800617a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006168:	f7fc f928 	bl	80023bc <HAL_GetTick>
 800616c:	4602      	mov	r2, r0
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	1ad3      	subs	r3, r2, r3
 8006172:	2b02      	cmp	r3, #2
 8006174:	d901      	bls.n	800617a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006176:	2303      	movs	r3, #3
 8006178:	e167      	b.n	800644a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800617a:	4b0b      	ldr	r3, [pc, #44]	@ (80061a8 <HAL_RCC_OscConfig+0x240>)
 800617c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800617e:	f003 0302 	and.w	r3, r3, #2
 8006182:	2b00      	cmp	r3, #0
 8006184:	d0f0      	beq.n	8006168 <HAL_RCC_OscConfig+0x200>
 8006186:	e01b      	b.n	80061c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006188:	4b09      	ldr	r3, [pc, #36]	@ (80061b0 <HAL_RCC_OscConfig+0x248>)
 800618a:	2200      	movs	r2, #0
 800618c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800618e:	f7fc f915 	bl	80023bc <HAL_GetTick>
 8006192:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006194:	e00e      	b.n	80061b4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006196:	f7fc f911 	bl	80023bc <HAL_GetTick>
 800619a:	4602      	mov	r2, r0
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	1ad3      	subs	r3, r2, r3
 80061a0:	2b02      	cmp	r3, #2
 80061a2:	d907      	bls.n	80061b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80061a4:	2303      	movs	r3, #3
 80061a6:	e150      	b.n	800644a <HAL_RCC_OscConfig+0x4e2>
 80061a8:	40023800 	.word	0x40023800
 80061ac:	42470000 	.word	0x42470000
 80061b0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061b4:	4b88      	ldr	r3, [pc, #544]	@ (80063d8 <HAL_RCC_OscConfig+0x470>)
 80061b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061b8:	f003 0302 	and.w	r3, r3, #2
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d1ea      	bne.n	8006196 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f003 0304 	and.w	r3, r3, #4
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	f000 8097 	beq.w	80062fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061ce:	2300      	movs	r3, #0
 80061d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061d2:	4b81      	ldr	r3, [pc, #516]	@ (80063d8 <HAL_RCC_OscConfig+0x470>)
 80061d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d10f      	bne.n	80061fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061de:	2300      	movs	r3, #0
 80061e0:	60bb      	str	r3, [r7, #8]
 80061e2:	4b7d      	ldr	r3, [pc, #500]	@ (80063d8 <HAL_RCC_OscConfig+0x470>)
 80061e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061e6:	4a7c      	ldr	r2, [pc, #496]	@ (80063d8 <HAL_RCC_OscConfig+0x470>)
 80061e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80061ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80061ee:	4b7a      	ldr	r3, [pc, #488]	@ (80063d8 <HAL_RCC_OscConfig+0x470>)
 80061f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80061f6:	60bb      	str	r3, [r7, #8]
 80061f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061fa:	2301      	movs	r3, #1
 80061fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061fe:	4b77      	ldr	r3, [pc, #476]	@ (80063dc <HAL_RCC_OscConfig+0x474>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006206:	2b00      	cmp	r3, #0
 8006208:	d118      	bne.n	800623c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800620a:	4b74      	ldr	r3, [pc, #464]	@ (80063dc <HAL_RCC_OscConfig+0x474>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a73      	ldr	r2, [pc, #460]	@ (80063dc <HAL_RCC_OscConfig+0x474>)
 8006210:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006214:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006216:	f7fc f8d1 	bl	80023bc <HAL_GetTick>
 800621a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800621c:	e008      	b.n	8006230 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800621e:	f7fc f8cd 	bl	80023bc <HAL_GetTick>
 8006222:	4602      	mov	r2, r0
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	1ad3      	subs	r3, r2, r3
 8006228:	2b02      	cmp	r3, #2
 800622a:	d901      	bls.n	8006230 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800622c:	2303      	movs	r3, #3
 800622e:	e10c      	b.n	800644a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006230:	4b6a      	ldr	r3, [pc, #424]	@ (80063dc <HAL_RCC_OscConfig+0x474>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006238:	2b00      	cmp	r3, #0
 800623a:	d0f0      	beq.n	800621e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	2b01      	cmp	r3, #1
 8006242:	d106      	bne.n	8006252 <HAL_RCC_OscConfig+0x2ea>
 8006244:	4b64      	ldr	r3, [pc, #400]	@ (80063d8 <HAL_RCC_OscConfig+0x470>)
 8006246:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006248:	4a63      	ldr	r2, [pc, #396]	@ (80063d8 <HAL_RCC_OscConfig+0x470>)
 800624a:	f043 0301 	orr.w	r3, r3, #1
 800624e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006250:	e01c      	b.n	800628c <HAL_RCC_OscConfig+0x324>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	2b05      	cmp	r3, #5
 8006258:	d10c      	bne.n	8006274 <HAL_RCC_OscConfig+0x30c>
 800625a:	4b5f      	ldr	r3, [pc, #380]	@ (80063d8 <HAL_RCC_OscConfig+0x470>)
 800625c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800625e:	4a5e      	ldr	r2, [pc, #376]	@ (80063d8 <HAL_RCC_OscConfig+0x470>)
 8006260:	f043 0304 	orr.w	r3, r3, #4
 8006264:	6713      	str	r3, [r2, #112]	@ 0x70
 8006266:	4b5c      	ldr	r3, [pc, #368]	@ (80063d8 <HAL_RCC_OscConfig+0x470>)
 8006268:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800626a:	4a5b      	ldr	r2, [pc, #364]	@ (80063d8 <HAL_RCC_OscConfig+0x470>)
 800626c:	f043 0301 	orr.w	r3, r3, #1
 8006270:	6713      	str	r3, [r2, #112]	@ 0x70
 8006272:	e00b      	b.n	800628c <HAL_RCC_OscConfig+0x324>
 8006274:	4b58      	ldr	r3, [pc, #352]	@ (80063d8 <HAL_RCC_OscConfig+0x470>)
 8006276:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006278:	4a57      	ldr	r2, [pc, #348]	@ (80063d8 <HAL_RCC_OscConfig+0x470>)
 800627a:	f023 0301 	bic.w	r3, r3, #1
 800627e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006280:	4b55      	ldr	r3, [pc, #340]	@ (80063d8 <HAL_RCC_OscConfig+0x470>)
 8006282:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006284:	4a54      	ldr	r2, [pc, #336]	@ (80063d8 <HAL_RCC_OscConfig+0x470>)
 8006286:	f023 0304 	bic.w	r3, r3, #4
 800628a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d015      	beq.n	80062c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006294:	f7fc f892 	bl	80023bc <HAL_GetTick>
 8006298:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800629a:	e00a      	b.n	80062b2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800629c:	f7fc f88e 	bl	80023bc <HAL_GetTick>
 80062a0:	4602      	mov	r2, r0
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	1ad3      	subs	r3, r2, r3
 80062a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d901      	bls.n	80062b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80062ae:	2303      	movs	r3, #3
 80062b0:	e0cb      	b.n	800644a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062b2:	4b49      	ldr	r3, [pc, #292]	@ (80063d8 <HAL_RCC_OscConfig+0x470>)
 80062b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062b6:	f003 0302 	and.w	r3, r3, #2
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d0ee      	beq.n	800629c <HAL_RCC_OscConfig+0x334>
 80062be:	e014      	b.n	80062ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062c0:	f7fc f87c 	bl	80023bc <HAL_GetTick>
 80062c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062c6:	e00a      	b.n	80062de <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062c8:	f7fc f878 	bl	80023bc <HAL_GetTick>
 80062cc:	4602      	mov	r2, r0
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d901      	bls.n	80062de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80062da:	2303      	movs	r3, #3
 80062dc:	e0b5      	b.n	800644a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062de:	4b3e      	ldr	r3, [pc, #248]	@ (80063d8 <HAL_RCC_OscConfig+0x470>)
 80062e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062e2:	f003 0302 	and.w	r3, r3, #2
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d1ee      	bne.n	80062c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80062ea:	7dfb      	ldrb	r3, [r7, #23]
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d105      	bne.n	80062fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062f0:	4b39      	ldr	r3, [pc, #228]	@ (80063d8 <HAL_RCC_OscConfig+0x470>)
 80062f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062f4:	4a38      	ldr	r2, [pc, #224]	@ (80063d8 <HAL_RCC_OscConfig+0x470>)
 80062f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80062fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	699b      	ldr	r3, [r3, #24]
 8006300:	2b00      	cmp	r3, #0
 8006302:	f000 80a1 	beq.w	8006448 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006306:	4b34      	ldr	r3, [pc, #208]	@ (80063d8 <HAL_RCC_OscConfig+0x470>)
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	f003 030c 	and.w	r3, r3, #12
 800630e:	2b08      	cmp	r3, #8
 8006310:	d05c      	beq.n	80063cc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	699b      	ldr	r3, [r3, #24]
 8006316:	2b02      	cmp	r3, #2
 8006318:	d141      	bne.n	800639e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800631a:	4b31      	ldr	r3, [pc, #196]	@ (80063e0 <HAL_RCC_OscConfig+0x478>)
 800631c:	2200      	movs	r2, #0
 800631e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006320:	f7fc f84c 	bl	80023bc <HAL_GetTick>
 8006324:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006326:	e008      	b.n	800633a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006328:	f7fc f848 	bl	80023bc <HAL_GetTick>
 800632c:	4602      	mov	r2, r0
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	1ad3      	subs	r3, r2, r3
 8006332:	2b02      	cmp	r3, #2
 8006334:	d901      	bls.n	800633a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006336:	2303      	movs	r3, #3
 8006338:	e087      	b.n	800644a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800633a:	4b27      	ldr	r3, [pc, #156]	@ (80063d8 <HAL_RCC_OscConfig+0x470>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006342:	2b00      	cmp	r3, #0
 8006344:	d1f0      	bne.n	8006328 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	69da      	ldr	r2, [r3, #28]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6a1b      	ldr	r3, [r3, #32]
 800634e:	431a      	orrs	r2, r3
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006354:	019b      	lsls	r3, r3, #6
 8006356:	431a      	orrs	r2, r3
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800635c:	085b      	lsrs	r3, r3, #1
 800635e:	3b01      	subs	r3, #1
 8006360:	041b      	lsls	r3, r3, #16
 8006362:	431a      	orrs	r2, r3
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006368:	061b      	lsls	r3, r3, #24
 800636a:	491b      	ldr	r1, [pc, #108]	@ (80063d8 <HAL_RCC_OscConfig+0x470>)
 800636c:	4313      	orrs	r3, r2
 800636e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006370:	4b1b      	ldr	r3, [pc, #108]	@ (80063e0 <HAL_RCC_OscConfig+0x478>)
 8006372:	2201      	movs	r2, #1
 8006374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006376:	f7fc f821 	bl	80023bc <HAL_GetTick>
 800637a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800637c:	e008      	b.n	8006390 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800637e:	f7fc f81d 	bl	80023bc <HAL_GetTick>
 8006382:	4602      	mov	r2, r0
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	1ad3      	subs	r3, r2, r3
 8006388:	2b02      	cmp	r3, #2
 800638a:	d901      	bls.n	8006390 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800638c:	2303      	movs	r3, #3
 800638e:	e05c      	b.n	800644a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006390:	4b11      	ldr	r3, [pc, #68]	@ (80063d8 <HAL_RCC_OscConfig+0x470>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006398:	2b00      	cmp	r3, #0
 800639a:	d0f0      	beq.n	800637e <HAL_RCC_OscConfig+0x416>
 800639c:	e054      	b.n	8006448 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800639e:	4b10      	ldr	r3, [pc, #64]	@ (80063e0 <HAL_RCC_OscConfig+0x478>)
 80063a0:	2200      	movs	r2, #0
 80063a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063a4:	f7fc f80a 	bl	80023bc <HAL_GetTick>
 80063a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063aa:	e008      	b.n	80063be <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063ac:	f7fc f806 	bl	80023bc <HAL_GetTick>
 80063b0:	4602      	mov	r2, r0
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	1ad3      	subs	r3, r2, r3
 80063b6:	2b02      	cmp	r3, #2
 80063b8:	d901      	bls.n	80063be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80063ba:	2303      	movs	r3, #3
 80063bc:	e045      	b.n	800644a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063be:	4b06      	ldr	r3, [pc, #24]	@ (80063d8 <HAL_RCC_OscConfig+0x470>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d1f0      	bne.n	80063ac <HAL_RCC_OscConfig+0x444>
 80063ca:	e03d      	b.n	8006448 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	699b      	ldr	r3, [r3, #24]
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d107      	bne.n	80063e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	e038      	b.n	800644a <HAL_RCC_OscConfig+0x4e2>
 80063d8:	40023800 	.word	0x40023800
 80063dc:	40007000 	.word	0x40007000
 80063e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80063e4:	4b1b      	ldr	r3, [pc, #108]	@ (8006454 <HAL_RCC_OscConfig+0x4ec>)
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	699b      	ldr	r3, [r3, #24]
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d028      	beq.n	8006444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d121      	bne.n	8006444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800640a:	429a      	cmp	r2, r3
 800640c:	d11a      	bne.n	8006444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800640e:	68fa      	ldr	r2, [r7, #12]
 8006410:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006414:	4013      	ands	r3, r2
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800641a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800641c:	4293      	cmp	r3, r2
 800641e:	d111      	bne.n	8006444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800642a:	085b      	lsrs	r3, r3, #1
 800642c:	3b01      	subs	r3, #1
 800642e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006430:	429a      	cmp	r2, r3
 8006432:	d107      	bne.n	8006444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800643e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006440:	429a      	cmp	r2, r3
 8006442:	d001      	beq.n	8006448 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	e000      	b.n	800644a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006448:	2300      	movs	r3, #0
}
 800644a:	4618      	mov	r0, r3
 800644c:	3718      	adds	r7, #24
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
 8006452:	bf00      	nop
 8006454:	40023800 	.word	0x40023800

08006458 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d101      	bne.n	800646c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	e0cc      	b.n	8006606 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800646c:	4b68      	ldr	r3, [pc, #416]	@ (8006610 <HAL_RCC_ClockConfig+0x1b8>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f003 0307 	and.w	r3, r3, #7
 8006474:	683a      	ldr	r2, [r7, #0]
 8006476:	429a      	cmp	r2, r3
 8006478:	d90c      	bls.n	8006494 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800647a:	4b65      	ldr	r3, [pc, #404]	@ (8006610 <HAL_RCC_ClockConfig+0x1b8>)
 800647c:	683a      	ldr	r2, [r7, #0]
 800647e:	b2d2      	uxtb	r2, r2
 8006480:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006482:	4b63      	ldr	r3, [pc, #396]	@ (8006610 <HAL_RCC_ClockConfig+0x1b8>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f003 0307 	and.w	r3, r3, #7
 800648a:	683a      	ldr	r2, [r7, #0]
 800648c:	429a      	cmp	r2, r3
 800648e:	d001      	beq.n	8006494 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	e0b8      	b.n	8006606 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 0302 	and.w	r3, r3, #2
 800649c:	2b00      	cmp	r3, #0
 800649e:	d020      	beq.n	80064e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 0304 	and.w	r3, r3, #4
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d005      	beq.n	80064b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80064ac:	4b59      	ldr	r3, [pc, #356]	@ (8006614 <HAL_RCC_ClockConfig+0x1bc>)
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	4a58      	ldr	r2, [pc, #352]	@ (8006614 <HAL_RCC_ClockConfig+0x1bc>)
 80064b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80064b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f003 0308 	and.w	r3, r3, #8
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d005      	beq.n	80064d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80064c4:	4b53      	ldr	r3, [pc, #332]	@ (8006614 <HAL_RCC_ClockConfig+0x1bc>)
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	4a52      	ldr	r2, [pc, #328]	@ (8006614 <HAL_RCC_ClockConfig+0x1bc>)
 80064ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80064ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064d0:	4b50      	ldr	r3, [pc, #320]	@ (8006614 <HAL_RCC_ClockConfig+0x1bc>)
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	494d      	ldr	r1, [pc, #308]	@ (8006614 <HAL_RCC_ClockConfig+0x1bc>)
 80064de:	4313      	orrs	r3, r2
 80064e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 0301 	and.w	r3, r3, #1
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d044      	beq.n	8006578 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d107      	bne.n	8006506 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064f6:	4b47      	ldr	r3, [pc, #284]	@ (8006614 <HAL_RCC_ClockConfig+0x1bc>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d119      	bne.n	8006536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e07f      	b.n	8006606 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	2b02      	cmp	r3, #2
 800650c:	d003      	beq.n	8006516 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006512:	2b03      	cmp	r3, #3
 8006514:	d107      	bne.n	8006526 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006516:	4b3f      	ldr	r3, [pc, #252]	@ (8006614 <HAL_RCC_ClockConfig+0x1bc>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800651e:	2b00      	cmp	r3, #0
 8006520:	d109      	bne.n	8006536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	e06f      	b.n	8006606 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006526:	4b3b      	ldr	r3, [pc, #236]	@ (8006614 <HAL_RCC_ClockConfig+0x1bc>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f003 0302 	and.w	r3, r3, #2
 800652e:	2b00      	cmp	r3, #0
 8006530:	d101      	bne.n	8006536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e067      	b.n	8006606 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006536:	4b37      	ldr	r3, [pc, #220]	@ (8006614 <HAL_RCC_ClockConfig+0x1bc>)
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	f023 0203 	bic.w	r2, r3, #3
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	4934      	ldr	r1, [pc, #208]	@ (8006614 <HAL_RCC_ClockConfig+0x1bc>)
 8006544:	4313      	orrs	r3, r2
 8006546:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006548:	f7fb ff38 	bl	80023bc <HAL_GetTick>
 800654c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800654e:	e00a      	b.n	8006566 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006550:	f7fb ff34 	bl	80023bc <HAL_GetTick>
 8006554:	4602      	mov	r2, r0
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800655e:	4293      	cmp	r3, r2
 8006560:	d901      	bls.n	8006566 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006562:	2303      	movs	r3, #3
 8006564:	e04f      	b.n	8006606 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006566:	4b2b      	ldr	r3, [pc, #172]	@ (8006614 <HAL_RCC_ClockConfig+0x1bc>)
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	f003 020c 	and.w	r2, r3, #12
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	429a      	cmp	r2, r3
 8006576:	d1eb      	bne.n	8006550 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006578:	4b25      	ldr	r3, [pc, #148]	@ (8006610 <HAL_RCC_ClockConfig+0x1b8>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 0307 	and.w	r3, r3, #7
 8006580:	683a      	ldr	r2, [r7, #0]
 8006582:	429a      	cmp	r2, r3
 8006584:	d20c      	bcs.n	80065a0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006586:	4b22      	ldr	r3, [pc, #136]	@ (8006610 <HAL_RCC_ClockConfig+0x1b8>)
 8006588:	683a      	ldr	r2, [r7, #0]
 800658a:	b2d2      	uxtb	r2, r2
 800658c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800658e:	4b20      	ldr	r3, [pc, #128]	@ (8006610 <HAL_RCC_ClockConfig+0x1b8>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f003 0307 	and.w	r3, r3, #7
 8006596:	683a      	ldr	r2, [r7, #0]
 8006598:	429a      	cmp	r2, r3
 800659a:	d001      	beq.n	80065a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	e032      	b.n	8006606 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f003 0304 	and.w	r3, r3, #4
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d008      	beq.n	80065be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065ac:	4b19      	ldr	r3, [pc, #100]	@ (8006614 <HAL_RCC_ClockConfig+0x1bc>)
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	4916      	ldr	r1, [pc, #88]	@ (8006614 <HAL_RCC_ClockConfig+0x1bc>)
 80065ba:	4313      	orrs	r3, r2
 80065bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f003 0308 	and.w	r3, r3, #8
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d009      	beq.n	80065de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80065ca:	4b12      	ldr	r3, [pc, #72]	@ (8006614 <HAL_RCC_ClockConfig+0x1bc>)
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	691b      	ldr	r3, [r3, #16]
 80065d6:	00db      	lsls	r3, r3, #3
 80065d8:	490e      	ldr	r1, [pc, #56]	@ (8006614 <HAL_RCC_ClockConfig+0x1bc>)
 80065da:	4313      	orrs	r3, r2
 80065dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80065de:	f000 f821 	bl	8006624 <HAL_RCC_GetSysClockFreq>
 80065e2:	4602      	mov	r2, r0
 80065e4:	4b0b      	ldr	r3, [pc, #44]	@ (8006614 <HAL_RCC_ClockConfig+0x1bc>)
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	091b      	lsrs	r3, r3, #4
 80065ea:	f003 030f 	and.w	r3, r3, #15
 80065ee:	490a      	ldr	r1, [pc, #40]	@ (8006618 <HAL_RCC_ClockConfig+0x1c0>)
 80065f0:	5ccb      	ldrb	r3, [r1, r3]
 80065f2:	fa22 f303 	lsr.w	r3, r2, r3
 80065f6:	4a09      	ldr	r2, [pc, #36]	@ (800661c <HAL_RCC_ClockConfig+0x1c4>)
 80065f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80065fa:	4b09      	ldr	r3, [pc, #36]	@ (8006620 <HAL_RCC_ClockConfig+0x1c8>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4618      	mov	r0, r3
 8006600:	f7fb fe98 	bl	8002334 <HAL_InitTick>

  return HAL_OK;
 8006604:	2300      	movs	r3, #0
}
 8006606:	4618      	mov	r0, r3
 8006608:	3710      	adds	r7, #16
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	40023c00 	.word	0x40023c00
 8006614:	40023800 	.word	0x40023800
 8006618:	0800cb60 	.word	0x0800cb60
 800661c:	2000001c 	.word	0x2000001c
 8006620:	20000020 	.word	0x20000020

08006624 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006624:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006628:	b094      	sub	sp, #80	@ 0x50
 800662a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800662c:	2300      	movs	r3, #0
 800662e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006630:	2300      	movs	r3, #0
 8006632:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006634:	2300      	movs	r3, #0
 8006636:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006638:	2300      	movs	r3, #0
 800663a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800663c:	4b79      	ldr	r3, [pc, #484]	@ (8006824 <HAL_RCC_GetSysClockFreq+0x200>)
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	f003 030c 	and.w	r3, r3, #12
 8006644:	2b08      	cmp	r3, #8
 8006646:	d00d      	beq.n	8006664 <HAL_RCC_GetSysClockFreq+0x40>
 8006648:	2b08      	cmp	r3, #8
 800664a:	f200 80e1 	bhi.w	8006810 <HAL_RCC_GetSysClockFreq+0x1ec>
 800664e:	2b00      	cmp	r3, #0
 8006650:	d002      	beq.n	8006658 <HAL_RCC_GetSysClockFreq+0x34>
 8006652:	2b04      	cmp	r3, #4
 8006654:	d003      	beq.n	800665e <HAL_RCC_GetSysClockFreq+0x3a>
 8006656:	e0db      	b.n	8006810 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006658:	4b73      	ldr	r3, [pc, #460]	@ (8006828 <HAL_RCC_GetSysClockFreq+0x204>)
 800665a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800665c:	e0db      	b.n	8006816 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800665e:	4b73      	ldr	r3, [pc, #460]	@ (800682c <HAL_RCC_GetSysClockFreq+0x208>)
 8006660:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006662:	e0d8      	b.n	8006816 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006664:	4b6f      	ldr	r3, [pc, #444]	@ (8006824 <HAL_RCC_GetSysClockFreq+0x200>)
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800666c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800666e:	4b6d      	ldr	r3, [pc, #436]	@ (8006824 <HAL_RCC_GetSysClockFreq+0x200>)
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006676:	2b00      	cmp	r3, #0
 8006678:	d063      	beq.n	8006742 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800667a:	4b6a      	ldr	r3, [pc, #424]	@ (8006824 <HAL_RCC_GetSysClockFreq+0x200>)
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	099b      	lsrs	r3, r3, #6
 8006680:	2200      	movs	r2, #0
 8006682:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006684:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006688:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800668c:	633b      	str	r3, [r7, #48]	@ 0x30
 800668e:	2300      	movs	r3, #0
 8006690:	637b      	str	r3, [r7, #52]	@ 0x34
 8006692:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006696:	4622      	mov	r2, r4
 8006698:	462b      	mov	r3, r5
 800669a:	f04f 0000 	mov.w	r0, #0
 800669e:	f04f 0100 	mov.w	r1, #0
 80066a2:	0159      	lsls	r1, r3, #5
 80066a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80066a8:	0150      	lsls	r0, r2, #5
 80066aa:	4602      	mov	r2, r0
 80066ac:	460b      	mov	r3, r1
 80066ae:	4621      	mov	r1, r4
 80066b0:	1a51      	subs	r1, r2, r1
 80066b2:	6139      	str	r1, [r7, #16]
 80066b4:	4629      	mov	r1, r5
 80066b6:	eb63 0301 	sbc.w	r3, r3, r1
 80066ba:	617b      	str	r3, [r7, #20]
 80066bc:	f04f 0200 	mov.w	r2, #0
 80066c0:	f04f 0300 	mov.w	r3, #0
 80066c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80066c8:	4659      	mov	r1, fp
 80066ca:	018b      	lsls	r3, r1, #6
 80066cc:	4651      	mov	r1, sl
 80066ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80066d2:	4651      	mov	r1, sl
 80066d4:	018a      	lsls	r2, r1, #6
 80066d6:	4651      	mov	r1, sl
 80066d8:	ebb2 0801 	subs.w	r8, r2, r1
 80066dc:	4659      	mov	r1, fp
 80066de:	eb63 0901 	sbc.w	r9, r3, r1
 80066e2:	f04f 0200 	mov.w	r2, #0
 80066e6:	f04f 0300 	mov.w	r3, #0
 80066ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80066ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80066f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80066f6:	4690      	mov	r8, r2
 80066f8:	4699      	mov	r9, r3
 80066fa:	4623      	mov	r3, r4
 80066fc:	eb18 0303 	adds.w	r3, r8, r3
 8006700:	60bb      	str	r3, [r7, #8]
 8006702:	462b      	mov	r3, r5
 8006704:	eb49 0303 	adc.w	r3, r9, r3
 8006708:	60fb      	str	r3, [r7, #12]
 800670a:	f04f 0200 	mov.w	r2, #0
 800670e:	f04f 0300 	mov.w	r3, #0
 8006712:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006716:	4629      	mov	r1, r5
 8006718:	024b      	lsls	r3, r1, #9
 800671a:	4621      	mov	r1, r4
 800671c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006720:	4621      	mov	r1, r4
 8006722:	024a      	lsls	r2, r1, #9
 8006724:	4610      	mov	r0, r2
 8006726:	4619      	mov	r1, r3
 8006728:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800672a:	2200      	movs	r2, #0
 800672c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800672e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006730:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006734:	f7f9 fda4 	bl	8000280 <__aeabi_uldivmod>
 8006738:	4602      	mov	r2, r0
 800673a:	460b      	mov	r3, r1
 800673c:	4613      	mov	r3, r2
 800673e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006740:	e058      	b.n	80067f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006742:	4b38      	ldr	r3, [pc, #224]	@ (8006824 <HAL_RCC_GetSysClockFreq+0x200>)
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	099b      	lsrs	r3, r3, #6
 8006748:	2200      	movs	r2, #0
 800674a:	4618      	mov	r0, r3
 800674c:	4611      	mov	r1, r2
 800674e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006752:	623b      	str	r3, [r7, #32]
 8006754:	2300      	movs	r3, #0
 8006756:	627b      	str	r3, [r7, #36]	@ 0x24
 8006758:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800675c:	4642      	mov	r2, r8
 800675e:	464b      	mov	r3, r9
 8006760:	f04f 0000 	mov.w	r0, #0
 8006764:	f04f 0100 	mov.w	r1, #0
 8006768:	0159      	lsls	r1, r3, #5
 800676a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800676e:	0150      	lsls	r0, r2, #5
 8006770:	4602      	mov	r2, r0
 8006772:	460b      	mov	r3, r1
 8006774:	4641      	mov	r1, r8
 8006776:	ebb2 0a01 	subs.w	sl, r2, r1
 800677a:	4649      	mov	r1, r9
 800677c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006780:	f04f 0200 	mov.w	r2, #0
 8006784:	f04f 0300 	mov.w	r3, #0
 8006788:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800678c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006790:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006794:	ebb2 040a 	subs.w	r4, r2, sl
 8006798:	eb63 050b 	sbc.w	r5, r3, fp
 800679c:	f04f 0200 	mov.w	r2, #0
 80067a0:	f04f 0300 	mov.w	r3, #0
 80067a4:	00eb      	lsls	r3, r5, #3
 80067a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80067aa:	00e2      	lsls	r2, r4, #3
 80067ac:	4614      	mov	r4, r2
 80067ae:	461d      	mov	r5, r3
 80067b0:	4643      	mov	r3, r8
 80067b2:	18e3      	adds	r3, r4, r3
 80067b4:	603b      	str	r3, [r7, #0]
 80067b6:	464b      	mov	r3, r9
 80067b8:	eb45 0303 	adc.w	r3, r5, r3
 80067bc:	607b      	str	r3, [r7, #4]
 80067be:	f04f 0200 	mov.w	r2, #0
 80067c2:	f04f 0300 	mov.w	r3, #0
 80067c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80067ca:	4629      	mov	r1, r5
 80067cc:	028b      	lsls	r3, r1, #10
 80067ce:	4621      	mov	r1, r4
 80067d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80067d4:	4621      	mov	r1, r4
 80067d6:	028a      	lsls	r2, r1, #10
 80067d8:	4610      	mov	r0, r2
 80067da:	4619      	mov	r1, r3
 80067dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067de:	2200      	movs	r2, #0
 80067e0:	61bb      	str	r3, [r7, #24]
 80067e2:	61fa      	str	r2, [r7, #28]
 80067e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80067e8:	f7f9 fd4a 	bl	8000280 <__aeabi_uldivmod>
 80067ec:	4602      	mov	r2, r0
 80067ee:	460b      	mov	r3, r1
 80067f0:	4613      	mov	r3, r2
 80067f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80067f4:	4b0b      	ldr	r3, [pc, #44]	@ (8006824 <HAL_RCC_GetSysClockFreq+0x200>)
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	0c1b      	lsrs	r3, r3, #16
 80067fa:	f003 0303 	and.w	r3, r3, #3
 80067fe:	3301      	adds	r3, #1
 8006800:	005b      	lsls	r3, r3, #1
 8006802:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006804:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006806:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006808:	fbb2 f3f3 	udiv	r3, r2, r3
 800680c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800680e:	e002      	b.n	8006816 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006810:	4b05      	ldr	r3, [pc, #20]	@ (8006828 <HAL_RCC_GetSysClockFreq+0x204>)
 8006812:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006814:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006816:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006818:	4618      	mov	r0, r3
 800681a:	3750      	adds	r7, #80	@ 0x50
 800681c:	46bd      	mov	sp, r7
 800681e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006822:	bf00      	nop
 8006824:	40023800 	.word	0x40023800
 8006828:	00f42400 	.word	0x00f42400
 800682c:	007a1200 	.word	0x007a1200

08006830 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006830:	b480      	push	{r7}
 8006832:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006834:	4b03      	ldr	r3, [pc, #12]	@ (8006844 <HAL_RCC_GetHCLKFreq+0x14>)
 8006836:	681b      	ldr	r3, [r3, #0]
}
 8006838:	4618      	mov	r0, r3
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr
 8006842:	bf00      	nop
 8006844:	2000001c 	.word	0x2000001c

08006848 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800684c:	f7ff fff0 	bl	8006830 <HAL_RCC_GetHCLKFreq>
 8006850:	4602      	mov	r2, r0
 8006852:	4b05      	ldr	r3, [pc, #20]	@ (8006868 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	0a9b      	lsrs	r3, r3, #10
 8006858:	f003 0307 	and.w	r3, r3, #7
 800685c:	4903      	ldr	r1, [pc, #12]	@ (800686c <HAL_RCC_GetPCLK1Freq+0x24>)
 800685e:	5ccb      	ldrb	r3, [r1, r3]
 8006860:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006864:	4618      	mov	r0, r3
 8006866:	bd80      	pop	{r7, pc}
 8006868:	40023800 	.word	0x40023800
 800686c:	0800cb70 	.word	0x0800cb70

08006870 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006874:	f7ff ffdc 	bl	8006830 <HAL_RCC_GetHCLKFreq>
 8006878:	4602      	mov	r2, r0
 800687a:	4b05      	ldr	r3, [pc, #20]	@ (8006890 <HAL_RCC_GetPCLK2Freq+0x20>)
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	0b5b      	lsrs	r3, r3, #13
 8006880:	f003 0307 	and.w	r3, r3, #7
 8006884:	4903      	ldr	r1, [pc, #12]	@ (8006894 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006886:	5ccb      	ldrb	r3, [r1, r3]
 8006888:	fa22 f303 	lsr.w	r3, r2, r3
}
 800688c:	4618      	mov	r0, r3
 800688e:	bd80      	pop	{r7, pc}
 8006890:	40023800 	.word	0x40023800
 8006894:	0800cb70 	.word	0x0800cb70

08006898 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b082      	sub	sp, #8
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d101      	bne.n	80068aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	e07b      	b.n	80069a2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d108      	bne.n	80068c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80068ba:	d009      	beq.n	80068d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	61da      	str	r2, [r3, #28]
 80068c2:	e005      	b.n	80068d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2200      	movs	r2, #0
 80068c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d106      	bne.n	80068f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f7fb fad8 	bl	8001ea0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2202      	movs	r2, #2
 80068f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006906:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006918:	431a      	orrs	r2, r3
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	68db      	ldr	r3, [r3, #12]
 800691e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006922:	431a      	orrs	r2, r3
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	691b      	ldr	r3, [r3, #16]
 8006928:	f003 0302 	and.w	r3, r3, #2
 800692c:	431a      	orrs	r2, r3
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	695b      	ldr	r3, [r3, #20]
 8006932:	f003 0301 	and.w	r3, r3, #1
 8006936:	431a      	orrs	r2, r3
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	699b      	ldr	r3, [r3, #24]
 800693c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006940:	431a      	orrs	r2, r3
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	69db      	ldr	r3, [r3, #28]
 8006946:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800694a:	431a      	orrs	r2, r3
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6a1b      	ldr	r3, [r3, #32]
 8006950:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006954:	ea42 0103 	orr.w	r1, r2, r3
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800695c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	430a      	orrs	r2, r1
 8006966:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	699b      	ldr	r3, [r3, #24]
 800696c:	0c1b      	lsrs	r3, r3, #16
 800696e:	f003 0104 	and.w	r1, r3, #4
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006976:	f003 0210 	and.w	r2, r3, #16
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	430a      	orrs	r2, r1
 8006980:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	69da      	ldr	r2, [r3, #28]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006990:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2201      	movs	r2, #1
 800699c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80069a0:	2300      	movs	r3, #0
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3708      	adds	r7, #8
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}

080069aa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80069aa:	b580      	push	{r7, lr}
 80069ac:	b082      	sub	sp, #8
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d101      	bne.n	80069bc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80069b8:	2301      	movs	r3, #1
 80069ba:	e041      	b.n	8006a40 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d106      	bne.n	80069d6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f7fb faad 	bl	8001f30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2202      	movs	r2, #2
 80069da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	3304      	adds	r3, #4
 80069e6:	4619      	mov	r1, r3
 80069e8:	4610      	mov	r0, r2
 80069ea:	f000 fad9 	bl	8006fa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2201      	movs	r2, #1
 80069f2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2201      	movs	r2, #1
 80069fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2201      	movs	r2, #1
 8006a02:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2201      	movs	r2, #1
 8006a0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2201      	movs	r2, #1
 8006a12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2201      	movs	r2, #1
 8006a1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2201      	movs	r2, #1
 8006a22:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2201      	movs	r2, #1
 8006a2a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2201      	movs	r2, #1
 8006a32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2201      	movs	r2, #1
 8006a3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006a3e:	2300      	movs	r3, #0
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3708      	adds	r7, #8
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d101      	bne.n	8006a5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	e041      	b.n	8006ade <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d106      	bne.n	8006a74 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 f839 	bl	8006ae6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2202      	movs	r2, #2
 8006a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	3304      	adds	r3, #4
 8006a84:	4619      	mov	r1, r3
 8006a86:	4610      	mov	r0, r2
 8006a88:	f000 fa8a 	bl	8006fa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006adc:	2300      	movs	r3, #0
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3708      	adds	r7, #8
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}

08006ae6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006ae6:	b480      	push	{r7}
 8006ae8:	b083      	sub	sp, #12
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006aee:	bf00      	nop
 8006af0:	370c      	adds	r7, #12
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr
	...

08006afc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b084      	sub	sp, #16
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d109      	bne.n	8006b20 <HAL_TIM_PWM_Start+0x24>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	bf14      	ite	ne
 8006b18:	2301      	movne	r3, #1
 8006b1a:	2300      	moveq	r3, #0
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	e022      	b.n	8006b66 <HAL_TIM_PWM_Start+0x6a>
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	2b04      	cmp	r3, #4
 8006b24:	d109      	bne.n	8006b3a <HAL_TIM_PWM_Start+0x3e>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	bf14      	ite	ne
 8006b32:	2301      	movne	r3, #1
 8006b34:	2300      	moveq	r3, #0
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	e015      	b.n	8006b66 <HAL_TIM_PWM_Start+0x6a>
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	2b08      	cmp	r3, #8
 8006b3e:	d109      	bne.n	8006b54 <HAL_TIM_PWM_Start+0x58>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	bf14      	ite	ne
 8006b4c:	2301      	movne	r3, #1
 8006b4e:	2300      	moveq	r3, #0
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	e008      	b.n	8006b66 <HAL_TIM_PWM_Start+0x6a>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b5a:	b2db      	uxtb	r3, r3
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	bf14      	ite	ne
 8006b60:	2301      	movne	r3, #1
 8006b62:	2300      	moveq	r3, #0
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d001      	beq.n	8006b6e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e07c      	b.n	8006c68 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d104      	bne.n	8006b7e <HAL_TIM_PWM_Start+0x82>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2202      	movs	r2, #2
 8006b78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b7c:	e013      	b.n	8006ba6 <HAL_TIM_PWM_Start+0xaa>
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	2b04      	cmp	r3, #4
 8006b82:	d104      	bne.n	8006b8e <HAL_TIM_PWM_Start+0x92>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2202      	movs	r2, #2
 8006b88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006b8c:	e00b      	b.n	8006ba6 <HAL_TIM_PWM_Start+0xaa>
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	2b08      	cmp	r3, #8
 8006b92:	d104      	bne.n	8006b9e <HAL_TIM_PWM_Start+0xa2>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2202      	movs	r2, #2
 8006b98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006b9c:	e003      	b.n	8006ba6 <HAL_TIM_PWM_Start+0xaa>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2202      	movs	r2, #2
 8006ba2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	2201      	movs	r2, #1
 8006bac:	6839      	ldr	r1, [r7, #0]
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f000 fce6 	bl	8007580 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a2d      	ldr	r2, [pc, #180]	@ (8006c70 <HAL_TIM_PWM_Start+0x174>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d004      	beq.n	8006bc8 <HAL_TIM_PWM_Start+0xcc>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a2c      	ldr	r2, [pc, #176]	@ (8006c74 <HAL_TIM_PWM_Start+0x178>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d101      	bne.n	8006bcc <HAL_TIM_PWM_Start+0xd0>
 8006bc8:	2301      	movs	r3, #1
 8006bca:	e000      	b.n	8006bce <HAL_TIM_PWM_Start+0xd2>
 8006bcc:	2300      	movs	r3, #0
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d007      	beq.n	8006be2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006be0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a22      	ldr	r2, [pc, #136]	@ (8006c70 <HAL_TIM_PWM_Start+0x174>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d022      	beq.n	8006c32 <HAL_TIM_PWM_Start+0x136>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bf4:	d01d      	beq.n	8006c32 <HAL_TIM_PWM_Start+0x136>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a1f      	ldr	r2, [pc, #124]	@ (8006c78 <HAL_TIM_PWM_Start+0x17c>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d018      	beq.n	8006c32 <HAL_TIM_PWM_Start+0x136>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a1d      	ldr	r2, [pc, #116]	@ (8006c7c <HAL_TIM_PWM_Start+0x180>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d013      	beq.n	8006c32 <HAL_TIM_PWM_Start+0x136>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a1c      	ldr	r2, [pc, #112]	@ (8006c80 <HAL_TIM_PWM_Start+0x184>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d00e      	beq.n	8006c32 <HAL_TIM_PWM_Start+0x136>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a16      	ldr	r2, [pc, #88]	@ (8006c74 <HAL_TIM_PWM_Start+0x178>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d009      	beq.n	8006c32 <HAL_TIM_PWM_Start+0x136>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a18      	ldr	r2, [pc, #96]	@ (8006c84 <HAL_TIM_PWM_Start+0x188>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d004      	beq.n	8006c32 <HAL_TIM_PWM_Start+0x136>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a16      	ldr	r2, [pc, #88]	@ (8006c88 <HAL_TIM_PWM_Start+0x18c>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d111      	bne.n	8006c56 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	f003 0307 	and.w	r3, r3, #7
 8006c3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2b06      	cmp	r3, #6
 8006c42:	d010      	beq.n	8006c66 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f042 0201 	orr.w	r2, r2, #1
 8006c52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c54:	e007      	b.n	8006c66 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f042 0201 	orr.w	r2, r2, #1
 8006c64:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c66:	2300      	movs	r3, #0
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3710      	adds	r7, #16
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}
 8006c70:	40010000 	.word	0x40010000
 8006c74:	40010400 	.word	0x40010400
 8006c78:	40000400 	.word	0x40000400
 8006c7c:	40000800 	.word	0x40000800
 8006c80:	40000c00 	.word	0x40000c00
 8006c84:	40014000 	.word	0x40014000
 8006c88:	40001800 	.word	0x40001800

08006c8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b086      	sub	sp, #24
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	60f8      	str	r0, [r7, #12]
 8006c94:	60b9      	str	r1, [r7, #8]
 8006c96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d101      	bne.n	8006caa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006ca6:	2302      	movs	r3, #2
 8006ca8:	e0ae      	b.n	8006e08 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2201      	movs	r2, #1
 8006cae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2b0c      	cmp	r3, #12
 8006cb6:	f200 809f 	bhi.w	8006df8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006cba:	a201      	add	r2, pc, #4	@ (adr r2, 8006cc0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc0:	08006cf5 	.word	0x08006cf5
 8006cc4:	08006df9 	.word	0x08006df9
 8006cc8:	08006df9 	.word	0x08006df9
 8006ccc:	08006df9 	.word	0x08006df9
 8006cd0:	08006d35 	.word	0x08006d35
 8006cd4:	08006df9 	.word	0x08006df9
 8006cd8:	08006df9 	.word	0x08006df9
 8006cdc:	08006df9 	.word	0x08006df9
 8006ce0:	08006d77 	.word	0x08006d77
 8006ce4:	08006df9 	.word	0x08006df9
 8006ce8:	08006df9 	.word	0x08006df9
 8006cec:	08006df9 	.word	0x08006df9
 8006cf0:	08006db7 	.word	0x08006db7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68b9      	ldr	r1, [r7, #8]
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f000 f9f6 	bl	80070ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	699a      	ldr	r2, [r3, #24]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f042 0208 	orr.w	r2, r2, #8
 8006d0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	699a      	ldr	r2, [r3, #24]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f022 0204 	bic.w	r2, r2, #4
 8006d1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	6999      	ldr	r1, [r3, #24]
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	691a      	ldr	r2, [r3, #16]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	430a      	orrs	r2, r1
 8006d30:	619a      	str	r2, [r3, #24]
      break;
 8006d32:	e064      	b.n	8006dfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	68b9      	ldr	r1, [r7, #8]
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f000 fa46 	bl	80071cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	699a      	ldr	r2, [r3, #24]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006d4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	699a      	ldr	r2, [r3, #24]
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	6999      	ldr	r1, [r3, #24]
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	021a      	lsls	r2, r3, #8
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	430a      	orrs	r2, r1
 8006d72:	619a      	str	r2, [r3, #24]
      break;
 8006d74:	e043      	b.n	8006dfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	68b9      	ldr	r1, [r7, #8]
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f000 fa9b 	bl	80072b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	69da      	ldr	r2, [r3, #28]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f042 0208 	orr.w	r2, r2, #8
 8006d90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	69da      	ldr	r2, [r3, #28]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f022 0204 	bic.w	r2, r2, #4
 8006da0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	69d9      	ldr	r1, [r3, #28]
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	691a      	ldr	r2, [r3, #16]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	430a      	orrs	r2, r1
 8006db2:	61da      	str	r2, [r3, #28]
      break;
 8006db4:	e023      	b.n	8006dfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	68b9      	ldr	r1, [r7, #8]
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f000 faef 	bl	80073a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	69da      	ldr	r2, [r3, #28]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006dd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	69da      	ldr	r2, [r3, #28]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006de0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	69d9      	ldr	r1, [r3, #28]
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	691b      	ldr	r3, [r3, #16]
 8006dec:	021a      	lsls	r2, r3, #8
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	430a      	orrs	r2, r1
 8006df4:	61da      	str	r2, [r3, #28]
      break;
 8006df6:	e002      	b.n	8006dfe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	75fb      	strb	r3, [r7, #23]
      break;
 8006dfc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2200      	movs	r2, #0
 8006e02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006e06:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3718      	adds	r7, #24
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}

08006e10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d101      	bne.n	8006e2c <HAL_TIM_ConfigClockSource+0x1c>
 8006e28:	2302      	movs	r3, #2
 8006e2a:	e0b4      	b.n	8006f96 <HAL_TIM_ConfigClockSource+0x186>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2202      	movs	r2, #2
 8006e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006e4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006e52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	68ba      	ldr	r2, [r7, #8]
 8006e5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e64:	d03e      	beq.n	8006ee4 <HAL_TIM_ConfigClockSource+0xd4>
 8006e66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e6a:	f200 8087 	bhi.w	8006f7c <HAL_TIM_ConfigClockSource+0x16c>
 8006e6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e72:	f000 8086 	beq.w	8006f82 <HAL_TIM_ConfigClockSource+0x172>
 8006e76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e7a:	d87f      	bhi.n	8006f7c <HAL_TIM_ConfigClockSource+0x16c>
 8006e7c:	2b70      	cmp	r3, #112	@ 0x70
 8006e7e:	d01a      	beq.n	8006eb6 <HAL_TIM_ConfigClockSource+0xa6>
 8006e80:	2b70      	cmp	r3, #112	@ 0x70
 8006e82:	d87b      	bhi.n	8006f7c <HAL_TIM_ConfigClockSource+0x16c>
 8006e84:	2b60      	cmp	r3, #96	@ 0x60
 8006e86:	d050      	beq.n	8006f2a <HAL_TIM_ConfigClockSource+0x11a>
 8006e88:	2b60      	cmp	r3, #96	@ 0x60
 8006e8a:	d877      	bhi.n	8006f7c <HAL_TIM_ConfigClockSource+0x16c>
 8006e8c:	2b50      	cmp	r3, #80	@ 0x50
 8006e8e:	d03c      	beq.n	8006f0a <HAL_TIM_ConfigClockSource+0xfa>
 8006e90:	2b50      	cmp	r3, #80	@ 0x50
 8006e92:	d873      	bhi.n	8006f7c <HAL_TIM_ConfigClockSource+0x16c>
 8006e94:	2b40      	cmp	r3, #64	@ 0x40
 8006e96:	d058      	beq.n	8006f4a <HAL_TIM_ConfigClockSource+0x13a>
 8006e98:	2b40      	cmp	r3, #64	@ 0x40
 8006e9a:	d86f      	bhi.n	8006f7c <HAL_TIM_ConfigClockSource+0x16c>
 8006e9c:	2b30      	cmp	r3, #48	@ 0x30
 8006e9e:	d064      	beq.n	8006f6a <HAL_TIM_ConfigClockSource+0x15a>
 8006ea0:	2b30      	cmp	r3, #48	@ 0x30
 8006ea2:	d86b      	bhi.n	8006f7c <HAL_TIM_ConfigClockSource+0x16c>
 8006ea4:	2b20      	cmp	r3, #32
 8006ea6:	d060      	beq.n	8006f6a <HAL_TIM_ConfigClockSource+0x15a>
 8006ea8:	2b20      	cmp	r3, #32
 8006eaa:	d867      	bhi.n	8006f7c <HAL_TIM_ConfigClockSource+0x16c>
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d05c      	beq.n	8006f6a <HAL_TIM_ConfigClockSource+0x15a>
 8006eb0:	2b10      	cmp	r3, #16
 8006eb2:	d05a      	beq.n	8006f6a <HAL_TIM_ConfigClockSource+0x15a>
 8006eb4:	e062      	b.n	8006f7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006ec6:	f000 fb3b 	bl	8007540 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006ed8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	68ba      	ldr	r2, [r7, #8]
 8006ee0:	609a      	str	r2, [r3, #8]
      break;
 8006ee2:	e04f      	b.n	8006f84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006ef4:	f000 fb24 	bl	8007540 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	689a      	ldr	r2, [r3, #8]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006f06:	609a      	str	r2, [r3, #8]
      break;
 8006f08:	e03c      	b.n	8006f84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f16:	461a      	mov	r2, r3
 8006f18:	f000 fa98 	bl	800744c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	2150      	movs	r1, #80	@ 0x50
 8006f22:	4618      	mov	r0, r3
 8006f24:	f000 faf1 	bl	800750a <TIM_ITRx_SetConfig>
      break;
 8006f28:	e02c      	b.n	8006f84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f36:	461a      	mov	r2, r3
 8006f38:	f000 fab7 	bl	80074aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	2160      	movs	r1, #96	@ 0x60
 8006f42:	4618      	mov	r0, r3
 8006f44:	f000 fae1 	bl	800750a <TIM_ITRx_SetConfig>
      break;
 8006f48:	e01c      	b.n	8006f84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f56:	461a      	mov	r2, r3
 8006f58:	f000 fa78 	bl	800744c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	2140      	movs	r1, #64	@ 0x40
 8006f62:	4618      	mov	r0, r3
 8006f64:	f000 fad1 	bl	800750a <TIM_ITRx_SetConfig>
      break;
 8006f68:	e00c      	b.n	8006f84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4619      	mov	r1, r3
 8006f74:	4610      	mov	r0, r2
 8006f76:	f000 fac8 	bl	800750a <TIM_ITRx_SetConfig>
      break;
 8006f7a:	e003      	b.n	8006f84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	73fb      	strb	r3, [r7, #15]
      break;
 8006f80:	e000      	b.n	8006f84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006f82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3710      	adds	r7, #16
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
	...

08006fa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b085      	sub	sp, #20
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	4a43      	ldr	r2, [pc, #268]	@ (80070c0 <TIM_Base_SetConfig+0x120>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d013      	beq.n	8006fe0 <TIM_Base_SetConfig+0x40>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fbe:	d00f      	beq.n	8006fe0 <TIM_Base_SetConfig+0x40>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	4a40      	ldr	r2, [pc, #256]	@ (80070c4 <TIM_Base_SetConfig+0x124>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d00b      	beq.n	8006fe0 <TIM_Base_SetConfig+0x40>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	4a3f      	ldr	r2, [pc, #252]	@ (80070c8 <TIM_Base_SetConfig+0x128>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d007      	beq.n	8006fe0 <TIM_Base_SetConfig+0x40>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4a3e      	ldr	r2, [pc, #248]	@ (80070cc <TIM_Base_SetConfig+0x12c>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d003      	beq.n	8006fe0 <TIM_Base_SetConfig+0x40>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	4a3d      	ldr	r2, [pc, #244]	@ (80070d0 <TIM_Base_SetConfig+0x130>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d108      	bne.n	8006ff2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fe6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	68fa      	ldr	r2, [r7, #12]
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4a32      	ldr	r2, [pc, #200]	@ (80070c0 <TIM_Base_SetConfig+0x120>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d02b      	beq.n	8007052 <TIM_Base_SetConfig+0xb2>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007000:	d027      	beq.n	8007052 <TIM_Base_SetConfig+0xb2>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4a2f      	ldr	r2, [pc, #188]	@ (80070c4 <TIM_Base_SetConfig+0x124>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d023      	beq.n	8007052 <TIM_Base_SetConfig+0xb2>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	4a2e      	ldr	r2, [pc, #184]	@ (80070c8 <TIM_Base_SetConfig+0x128>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d01f      	beq.n	8007052 <TIM_Base_SetConfig+0xb2>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	4a2d      	ldr	r2, [pc, #180]	@ (80070cc <TIM_Base_SetConfig+0x12c>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d01b      	beq.n	8007052 <TIM_Base_SetConfig+0xb2>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	4a2c      	ldr	r2, [pc, #176]	@ (80070d0 <TIM_Base_SetConfig+0x130>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d017      	beq.n	8007052 <TIM_Base_SetConfig+0xb2>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4a2b      	ldr	r2, [pc, #172]	@ (80070d4 <TIM_Base_SetConfig+0x134>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d013      	beq.n	8007052 <TIM_Base_SetConfig+0xb2>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4a2a      	ldr	r2, [pc, #168]	@ (80070d8 <TIM_Base_SetConfig+0x138>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d00f      	beq.n	8007052 <TIM_Base_SetConfig+0xb2>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4a29      	ldr	r2, [pc, #164]	@ (80070dc <TIM_Base_SetConfig+0x13c>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d00b      	beq.n	8007052 <TIM_Base_SetConfig+0xb2>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4a28      	ldr	r2, [pc, #160]	@ (80070e0 <TIM_Base_SetConfig+0x140>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d007      	beq.n	8007052 <TIM_Base_SetConfig+0xb2>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4a27      	ldr	r2, [pc, #156]	@ (80070e4 <TIM_Base_SetConfig+0x144>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d003      	beq.n	8007052 <TIM_Base_SetConfig+0xb2>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	4a26      	ldr	r2, [pc, #152]	@ (80070e8 <TIM_Base_SetConfig+0x148>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d108      	bne.n	8007064 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007058:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	68db      	ldr	r3, [r3, #12]
 800705e:	68fa      	ldr	r2, [r7, #12]
 8007060:	4313      	orrs	r3, r2
 8007062:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	695b      	ldr	r3, [r3, #20]
 800706e:	4313      	orrs	r3, r2
 8007070:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	689a      	ldr	r2, [r3, #8]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4a0e      	ldr	r2, [pc, #56]	@ (80070c0 <TIM_Base_SetConfig+0x120>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d003      	beq.n	8007092 <TIM_Base_SetConfig+0xf2>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	4a10      	ldr	r2, [pc, #64]	@ (80070d0 <TIM_Base_SetConfig+0x130>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d103      	bne.n	800709a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	691a      	ldr	r2, [r3, #16]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f043 0204 	orr.w	r2, r3, #4
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2201      	movs	r2, #1
 80070aa:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	68fa      	ldr	r2, [r7, #12]
 80070b0:	601a      	str	r2, [r3, #0]
}
 80070b2:	bf00      	nop
 80070b4:	3714      	adds	r7, #20
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr
 80070be:	bf00      	nop
 80070c0:	40010000 	.word	0x40010000
 80070c4:	40000400 	.word	0x40000400
 80070c8:	40000800 	.word	0x40000800
 80070cc:	40000c00 	.word	0x40000c00
 80070d0:	40010400 	.word	0x40010400
 80070d4:	40014000 	.word	0x40014000
 80070d8:	40014400 	.word	0x40014400
 80070dc:	40014800 	.word	0x40014800
 80070e0:	40001800 	.word	0x40001800
 80070e4:	40001c00 	.word	0x40001c00
 80070e8:	40002000 	.word	0x40002000

080070ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b087      	sub	sp, #28
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6a1b      	ldr	r3, [r3, #32]
 80070fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6a1b      	ldr	r3, [r3, #32]
 8007100:	f023 0201 	bic.w	r2, r3, #1
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	699b      	ldr	r3, [r3, #24]
 8007112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800711a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f023 0303 	bic.w	r3, r3, #3
 8007122:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	68fa      	ldr	r2, [r7, #12]
 800712a:	4313      	orrs	r3, r2
 800712c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	f023 0302 	bic.w	r3, r3, #2
 8007134:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	697a      	ldr	r2, [r7, #20]
 800713c:	4313      	orrs	r3, r2
 800713e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	4a20      	ldr	r2, [pc, #128]	@ (80071c4 <TIM_OC1_SetConfig+0xd8>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d003      	beq.n	8007150 <TIM_OC1_SetConfig+0x64>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	4a1f      	ldr	r2, [pc, #124]	@ (80071c8 <TIM_OC1_SetConfig+0xdc>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d10c      	bne.n	800716a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	f023 0308 	bic.w	r3, r3, #8
 8007156:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	68db      	ldr	r3, [r3, #12]
 800715c:	697a      	ldr	r2, [r7, #20]
 800715e:	4313      	orrs	r3, r2
 8007160:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	f023 0304 	bic.w	r3, r3, #4
 8007168:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	4a15      	ldr	r2, [pc, #84]	@ (80071c4 <TIM_OC1_SetConfig+0xd8>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d003      	beq.n	800717a <TIM_OC1_SetConfig+0x8e>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	4a14      	ldr	r2, [pc, #80]	@ (80071c8 <TIM_OC1_SetConfig+0xdc>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d111      	bne.n	800719e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007180:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007188:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	695b      	ldr	r3, [r3, #20]
 800718e:	693a      	ldr	r2, [r7, #16]
 8007190:	4313      	orrs	r3, r2
 8007192:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	699b      	ldr	r3, [r3, #24]
 8007198:	693a      	ldr	r2, [r7, #16]
 800719a:	4313      	orrs	r3, r2
 800719c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	693a      	ldr	r2, [r7, #16]
 80071a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	68fa      	ldr	r2, [r7, #12]
 80071a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	685a      	ldr	r2, [r3, #4]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	697a      	ldr	r2, [r7, #20]
 80071b6:	621a      	str	r2, [r3, #32]
}
 80071b8:	bf00      	nop
 80071ba:	371c      	adds	r7, #28
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr
 80071c4:	40010000 	.word	0x40010000
 80071c8:	40010400 	.word	0x40010400

080071cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b087      	sub	sp, #28
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6a1b      	ldr	r3, [r3, #32]
 80071da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6a1b      	ldr	r3, [r3, #32]
 80071e0:	f023 0210 	bic.w	r2, r3, #16
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	699b      	ldr	r3, [r3, #24]
 80071f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007202:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	021b      	lsls	r3, r3, #8
 800720a:	68fa      	ldr	r2, [r7, #12]
 800720c:	4313      	orrs	r3, r2
 800720e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	f023 0320 	bic.w	r3, r3, #32
 8007216:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	011b      	lsls	r3, r3, #4
 800721e:	697a      	ldr	r2, [r7, #20]
 8007220:	4313      	orrs	r3, r2
 8007222:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	4a22      	ldr	r2, [pc, #136]	@ (80072b0 <TIM_OC2_SetConfig+0xe4>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d003      	beq.n	8007234 <TIM_OC2_SetConfig+0x68>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	4a21      	ldr	r2, [pc, #132]	@ (80072b4 <TIM_OC2_SetConfig+0xe8>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d10d      	bne.n	8007250 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800723a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	011b      	lsls	r3, r3, #4
 8007242:	697a      	ldr	r2, [r7, #20]
 8007244:	4313      	orrs	r3, r2
 8007246:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800724e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	4a17      	ldr	r2, [pc, #92]	@ (80072b0 <TIM_OC2_SetConfig+0xe4>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d003      	beq.n	8007260 <TIM_OC2_SetConfig+0x94>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	4a16      	ldr	r2, [pc, #88]	@ (80072b4 <TIM_OC2_SetConfig+0xe8>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d113      	bne.n	8007288 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007266:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800726e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	695b      	ldr	r3, [r3, #20]
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	693a      	ldr	r2, [r7, #16]
 8007278:	4313      	orrs	r3, r2
 800727a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	699b      	ldr	r3, [r3, #24]
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	693a      	ldr	r2, [r7, #16]
 8007284:	4313      	orrs	r3, r2
 8007286:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	693a      	ldr	r2, [r7, #16]
 800728c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	68fa      	ldr	r2, [r7, #12]
 8007292:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	685a      	ldr	r2, [r3, #4]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	697a      	ldr	r2, [r7, #20]
 80072a0:	621a      	str	r2, [r3, #32]
}
 80072a2:	bf00      	nop
 80072a4:	371c      	adds	r7, #28
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr
 80072ae:	bf00      	nop
 80072b0:	40010000 	.word	0x40010000
 80072b4:	40010400 	.word	0x40010400

080072b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b087      	sub	sp, #28
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6a1b      	ldr	r3, [r3, #32]
 80072c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6a1b      	ldr	r3, [r3, #32]
 80072cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	69db      	ldr	r3, [r3, #28]
 80072de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f023 0303 	bic.w	r3, r3, #3
 80072ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	68fa      	ldr	r2, [r7, #12]
 80072f6:	4313      	orrs	r3, r2
 80072f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007300:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	021b      	lsls	r3, r3, #8
 8007308:	697a      	ldr	r2, [r7, #20]
 800730a:	4313      	orrs	r3, r2
 800730c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	4a21      	ldr	r2, [pc, #132]	@ (8007398 <TIM_OC3_SetConfig+0xe0>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d003      	beq.n	800731e <TIM_OC3_SetConfig+0x66>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	4a20      	ldr	r2, [pc, #128]	@ (800739c <TIM_OC3_SetConfig+0xe4>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d10d      	bne.n	800733a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007324:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	68db      	ldr	r3, [r3, #12]
 800732a:	021b      	lsls	r3, r3, #8
 800732c:	697a      	ldr	r2, [r7, #20]
 800732e:	4313      	orrs	r3, r2
 8007330:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007338:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	4a16      	ldr	r2, [pc, #88]	@ (8007398 <TIM_OC3_SetConfig+0xe0>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d003      	beq.n	800734a <TIM_OC3_SetConfig+0x92>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4a15      	ldr	r2, [pc, #84]	@ (800739c <TIM_OC3_SetConfig+0xe4>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d113      	bne.n	8007372 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007350:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007358:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	695b      	ldr	r3, [r3, #20]
 800735e:	011b      	lsls	r3, r3, #4
 8007360:	693a      	ldr	r2, [r7, #16]
 8007362:	4313      	orrs	r3, r2
 8007364:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	699b      	ldr	r3, [r3, #24]
 800736a:	011b      	lsls	r3, r3, #4
 800736c:	693a      	ldr	r2, [r7, #16]
 800736e:	4313      	orrs	r3, r2
 8007370:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	693a      	ldr	r2, [r7, #16]
 8007376:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	68fa      	ldr	r2, [r7, #12]
 800737c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	685a      	ldr	r2, [r3, #4]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	697a      	ldr	r2, [r7, #20]
 800738a:	621a      	str	r2, [r3, #32]
}
 800738c:	bf00      	nop
 800738e:	371c      	adds	r7, #28
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr
 8007398:	40010000 	.word	0x40010000
 800739c:	40010400 	.word	0x40010400

080073a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b087      	sub	sp, #28
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6a1b      	ldr	r3, [r3, #32]
 80073ae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6a1b      	ldr	r3, [r3, #32]
 80073b4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	69db      	ldr	r3, [r3, #28]
 80073c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80073d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	021b      	lsls	r3, r3, #8
 80073de:	68fa      	ldr	r2, [r7, #12]
 80073e0:	4313      	orrs	r3, r2
 80073e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80073ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	031b      	lsls	r3, r3, #12
 80073f2:	693a      	ldr	r2, [r7, #16]
 80073f4:	4313      	orrs	r3, r2
 80073f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	4a12      	ldr	r2, [pc, #72]	@ (8007444 <TIM_OC4_SetConfig+0xa4>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d003      	beq.n	8007408 <TIM_OC4_SetConfig+0x68>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	4a11      	ldr	r2, [pc, #68]	@ (8007448 <TIM_OC4_SetConfig+0xa8>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d109      	bne.n	800741c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800740e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	695b      	ldr	r3, [r3, #20]
 8007414:	019b      	lsls	r3, r3, #6
 8007416:	697a      	ldr	r2, [r7, #20]
 8007418:	4313      	orrs	r3, r2
 800741a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	697a      	ldr	r2, [r7, #20]
 8007420:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	68fa      	ldr	r2, [r7, #12]
 8007426:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	685a      	ldr	r2, [r3, #4]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	693a      	ldr	r2, [r7, #16]
 8007434:	621a      	str	r2, [r3, #32]
}
 8007436:	bf00      	nop
 8007438:	371c      	adds	r7, #28
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr
 8007442:	bf00      	nop
 8007444:	40010000 	.word	0x40010000
 8007448:	40010400 	.word	0x40010400

0800744c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800744c:	b480      	push	{r7}
 800744e:	b087      	sub	sp, #28
 8007450:	af00      	add	r7, sp, #0
 8007452:	60f8      	str	r0, [r7, #12]
 8007454:	60b9      	str	r1, [r7, #8]
 8007456:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	6a1b      	ldr	r3, [r3, #32]
 800745c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	6a1b      	ldr	r3, [r3, #32]
 8007462:	f023 0201 	bic.w	r2, r3, #1
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	699b      	ldr	r3, [r3, #24]
 800746e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007476:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	011b      	lsls	r3, r3, #4
 800747c:	693a      	ldr	r2, [r7, #16]
 800747e:	4313      	orrs	r3, r2
 8007480:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	f023 030a 	bic.w	r3, r3, #10
 8007488:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800748a:	697a      	ldr	r2, [r7, #20]
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	4313      	orrs	r3, r2
 8007490:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	693a      	ldr	r2, [r7, #16]
 8007496:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	697a      	ldr	r2, [r7, #20]
 800749c:	621a      	str	r2, [r3, #32]
}
 800749e:	bf00      	nop
 80074a0:	371c      	adds	r7, #28
 80074a2:	46bd      	mov	sp, r7
 80074a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a8:	4770      	bx	lr

080074aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074aa:	b480      	push	{r7}
 80074ac:	b087      	sub	sp, #28
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	60f8      	str	r0, [r7, #12]
 80074b2:	60b9      	str	r1, [r7, #8]
 80074b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	6a1b      	ldr	r3, [r3, #32]
 80074ba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	6a1b      	ldr	r3, [r3, #32]
 80074c0:	f023 0210 	bic.w	r2, r3, #16
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	699b      	ldr	r3, [r3, #24]
 80074cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80074d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	031b      	lsls	r3, r3, #12
 80074da:	693a      	ldr	r2, [r7, #16]
 80074dc:	4313      	orrs	r3, r2
 80074de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80074e6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	011b      	lsls	r3, r3, #4
 80074ec:	697a      	ldr	r2, [r7, #20]
 80074ee:	4313      	orrs	r3, r2
 80074f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	693a      	ldr	r2, [r7, #16]
 80074f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	697a      	ldr	r2, [r7, #20]
 80074fc:	621a      	str	r2, [r3, #32]
}
 80074fe:	bf00      	nop
 8007500:	371c      	adds	r7, #28
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr

0800750a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800750a:	b480      	push	{r7}
 800750c:	b085      	sub	sp, #20
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
 8007512:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007520:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007522:	683a      	ldr	r2, [r7, #0]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	4313      	orrs	r3, r2
 8007528:	f043 0307 	orr.w	r3, r3, #7
 800752c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	68fa      	ldr	r2, [r7, #12]
 8007532:	609a      	str	r2, [r3, #8]
}
 8007534:	bf00      	nop
 8007536:	3714      	adds	r7, #20
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr

08007540 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007540:	b480      	push	{r7}
 8007542:	b087      	sub	sp, #28
 8007544:	af00      	add	r7, sp, #0
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	60b9      	str	r1, [r7, #8]
 800754a:	607a      	str	r2, [r7, #4]
 800754c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	689b      	ldr	r3, [r3, #8]
 8007552:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800755a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	021a      	lsls	r2, r3, #8
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	431a      	orrs	r2, r3
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	4313      	orrs	r3, r2
 8007568:	697a      	ldr	r2, [r7, #20]
 800756a:	4313      	orrs	r3, r2
 800756c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	697a      	ldr	r2, [r7, #20]
 8007572:	609a      	str	r2, [r3, #8]
}
 8007574:	bf00      	nop
 8007576:	371c      	adds	r7, #28
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr

08007580 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007580:	b480      	push	{r7}
 8007582:	b087      	sub	sp, #28
 8007584:	af00      	add	r7, sp, #0
 8007586:	60f8      	str	r0, [r7, #12]
 8007588:	60b9      	str	r1, [r7, #8]
 800758a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	f003 031f 	and.w	r3, r3, #31
 8007592:	2201      	movs	r2, #1
 8007594:	fa02 f303 	lsl.w	r3, r2, r3
 8007598:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	6a1a      	ldr	r2, [r3, #32]
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	43db      	mvns	r3, r3
 80075a2:	401a      	ands	r2, r3
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	6a1a      	ldr	r2, [r3, #32]
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	f003 031f 	and.w	r3, r3, #31
 80075b2:	6879      	ldr	r1, [r7, #4]
 80075b4:	fa01 f303 	lsl.w	r3, r1, r3
 80075b8:	431a      	orrs	r2, r3
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	621a      	str	r2, [r3, #32]
}
 80075be:	bf00      	nop
 80075c0:	371c      	adds	r7, #28
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr
	...

080075cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b085      	sub	sp, #20
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80075dc:	2b01      	cmp	r3, #1
 80075de:	d101      	bne.n	80075e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80075e0:	2302      	movs	r3, #2
 80075e2:	e05a      	b.n	800769a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2201      	movs	r2, #1
 80075e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2202      	movs	r2, #2
 80075f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800760a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	68fa      	ldr	r2, [r7, #12]
 8007612:	4313      	orrs	r3, r2
 8007614:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	68fa      	ldr	r2, [r7, #12]
 800761c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a21      	ldr	r2, [pc, #132]	@ (80076a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d022      	beq.n	800766e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007630:	d01d      	beq.n	800766e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a1d      	ldr	r2, [pc, #116]	@ (80076ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d018      	beq.n	800766e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a1b      	ldr	r2, [pc, #108]	@ (80076b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d013      	beq.n	800766e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a1a      	ldr	r2, [pc, #104]	@ (80076b4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d00e      	beq.n	800766e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a18      	ldr	r2, [pc, #96]	@ (80076b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d009      	beq.n	800766e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a17      	ldr	r2, [pc, #92]	@ (80076bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d004      	beq.n	800766e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a15      	ldr	r2, [pc, #84]	@ (80076c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d10c      	bne.n	8007688 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007674:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	68ba      	ldr	r2, [r7, #8]
 800767c:	4313      	orrs	r3, r2
 800767e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	68ba      	ldr	r2, [r7, #8]
 8007686:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2201      	movs	r2, #1
 800768c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2200      	movs	r2, #0
 8007694:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007698:	2300      	movs	r3, #0
}
 800769a:	4618      	mov	r0, r3
 800769c:	3714      	adds	r7, #20
 800769e:	46bd      	mov	sp, r7
 80076a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a4:	4770      	bx	lr
 80076a6:	bf00      	nop
 80076a8:	40010000 	.word	0x40010000
 80076ac:	40000400 	.word	0x40000400
 80076b0:	40000800 	.word	0x40000800
 80076b4:	40000c00 	.word	0x40000c00
 80076b8:	40010400 	.word	0x40010400
 80076bc:	40014000 	.word	0x40014000
 80076c0:	40001800 	.word	0x40001800

080076c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b082      	sub	sp, #8
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d101      	bne.n	80076d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	e042      	b.n	800775c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d106      	bne.n	80076f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f7fa fc7c 	bl	8001fe8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2224      	movs	r2, #36	@ 0x24
 80076f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	68da      	ldr	r2, [r3, #12]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007706:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f000 fddd 	bl	80082c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	691a      	ldr	r2, [r3, #16]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800771c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	695a      	ldr	r2, [r3, #20]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800772c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	68da      	ldr	r2, [r3, #12]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800773c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2200      	movs	r2, #0
 8007742:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2220      	movs	r2, #32
 8007748:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2220      	movs	r2, #32
 8007750:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800775a:	2300      	movs	r3, #0
}
 800775c:	4618      	mov	r0, r3
 800775e:	3708      	adds	r7, #8
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}

08007764 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b08a      	sub	sp, #40	@ 0x28
 8007768:	af02      	add	r7, sp, #8
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	60b9      	str	r1, [r7, #8]
 800776e:	603b      	str	r3, [r7, #0]
 8007770:	4613      	mov	r3, r2
 8007772:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007774:	2300      	movs	r3, #0
 8007776:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800777e:	b2db      	uxtb	r3, r3
 8007780:	2b20      	cmp	r3, #32
 8007782:	d175      	bne.n	8007870 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d002      	beq.n	8007790 <HAL_UART_Transmit+0x2c>
 800778a:	88fb      	ldrh	r3, [r7, #6]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d101      	bne.n	8007794 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007790:	2301      	movs	r3, #1
 8007792:	e06e      	b.n	8007872 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2200      	movs	r2, #0
 8007798:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2221      	movs	r2, #33	@ 0x21
 800779e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80077a2:	f7fa fe0b 	bl	80023bc <HAL_GetTick>
 80077a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	88fa      	ldrh	r2, [r7, #6]
 80077ac:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	88fa      	ldrh	r2, [r7, #6]
 80077b2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077bc:	d108      	bne.n	80077d0 <HAL_UART_Transmit+0x6c>
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	691b      	ldr	r3, [r3, #16]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d104      	bne.n	80077d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80077c6:	2300      	movs	r3, #0
 80077c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	61bb      	str	r3, [r7, #24]
 80077ce:	e003      	b.n	80077d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80077d4:	2300      	movs	r3, #0
 80077d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80077d8:	e02e      	b.n	8007838 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	9300      	str	r3, [sp, #0]
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	2200      	movs	r2, #0
 80077e2:	2180      	movs	r1, #128	@ 0x80
 80077e4:	68f8      	ldr	r0, [r7, #12]
 80077e6:	f000 fb41 	bl	8007e6c <UART_WaitOnFlagUntilTimeout>
 80077ea:	4603      	mov	r3, r0
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d005      	beq.n	80077fc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2220      	movs	r2, #32
 80077f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80077f8:	2303      	movs	r3, #3
 80077fa:	e03a      	b.n	8007872 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80077fc:	69fb      	ldr	r3, [r7, #28]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d10b      	bne.n	800781a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007802:	69bb      	ldr	r3, [r7, #24]
 8007804:	881b      	ldrh	r3, [r3, #0]
 8007806:	461a      	mov	r2, r3
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007810:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007812:	69bb      	ldr	r3, [r7, #24]
 8007814:	3302      	adds	r3, #2
 8007816:	61bb      	str	r3, [r7, #24]
 8007818:	e007      	b.n	800782a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800781a:	69fb      	ldr	r3, [r7, #28]
 800781c:	781a      	ldrb	r2, [r3, #0]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007824:	69fb      	ldr	r3, [r7, #28]
 8007826:	3301      	adds	r3, #1
 8007828:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800782e:	b29b      	uxth	r3, r3
 8007830:	3b01      	subs	r3, #1
 8007832:	b29a      	uxth	r2, r3
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800783c:	b29b      	uxth	r3, r3
 800783e:	2b00      	cmp	r3, #0
 8007840:	d1cb      	bne.n	80077da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	9300      	str	r3, [sp, #0]
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	2200      	movs	r2, #0
 800784a:	2140      	movs	r1, #64	@ 0x40
 800784c:	68f8      	ldr	r0, [r7, #12]
 800784e:	f000 fb0d 	bl	8007e6c <UART_WaitOnFlagUntilTimeout>
 8007852:	4603      	mov	r3, r0
 8007854:	2b00      	cmp	r3, #0
 8007856:	d005      	beq.n	8007864 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2220      	movs	r2, #32
 800785c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007860:	2303      	movs	r3, #3
 8007862:	e006      	b.n	8007872 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2220      	movs	r2, #32
 8007868:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800786c:	2300      	movs	r3, #0
 800786e:	e000      	b.n	8007872 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007870:	2302      	movs	r3, #2
  }
}
 8007872:	4618      	mov	r0, r3
 8007874:	3720      	adds	r7, #32
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}

0800787a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800787a:	b580      	push	{r7, lr}
 800787c:	b084      	sub	sp, #16
 800787e:	af00      	add	r7, sp, #0
 8007880:	60f8      	str	r0, [r7, #12]
 8007882:	60b9      	str	r1, [r7, #8]
 8007884:	4613      	mov	r3, r2
 8007886:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800788e:	b2db      	uxtb	r3, r3
 8007890:	2b20      	cmp	r3, #32
 8007892:	d112      	bne.n	80078ba <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d002      	beq.n	80078a0 <HAL_UART_Receive_IT+0x26>
 800789a:	88fb      	ldrh	r3, [r7, #6]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d101      	bne.n	80078a4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80078a0:	2301      	movs	r3, #1
 80078a2:	e00b      	b.n	80078bc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2200      	movs	r2, #0
 80078a8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80078aa:	88fb      	ldrh	r3, [r7, #6]
 80078ac:	461a      	mov	r2, r3
 80078ae:	68b9      	ldr	r1, [r7, #8]
 80078b0:	68f8      	ldr	r0, [r7, #12]
 80078b2:	f000 fb34 	bl	8007f1e <UART_Start_Receive_IT>
 80078b6:	4603      	mov	r3, r0
 80078b8:	e000      	b.n	80078bc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80078ba:	2302      	movs	r3, #2
  }
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3710      	adds	r7, #16
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b0ba      	sub	sp, #232	@ 0xe8
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	68db      	ldr	r3, [r3, #12]
 80078dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	695b      	ldr	r3, [r3, #20]
 80078e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80078ea:	2300      	movs	r3, #0
 80078ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80078f0:	2300      	movs	r3, #0
 80078f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80078f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078fa:	f003 030f 	and.w	r3, r3, #15
 80078fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007902:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007906:	2b00      	cmp	r3, #0
 8007908:	d10f      	bne.n	800792a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800790a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800790e:	f003 0320 	and.w	r3, r3, #32
 8007912:	2b00      	cmp	r3, #0
 8007914:	d009      	beq.n	800792a <HAL_UART_IRQHandler+0x66>
 8007916:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800791a:	f003 0320 	and.w	r3, r3, #32
 800791e:	2b00      	cmp	r3, #0
 8007920:	d003      	beq.n	800792a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 fc11 	bl	800814a <UART_Receive_IT>
      return;
 8007928:	e273      	b.n	8007e12 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800792a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800792e:	2b00      	cmp	r3, #0
 8007930:	f000 80de 	beq.w	8007af0 <HAL_UART_IRQHandler+0x22c>
 8007934:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007938:	f003 0301 	and.w	r3, r3, #1
 800793c:	2b00      	cmp	r3, #0
 800793e:	d106      	bne.n	800794e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007944:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007948:	2b00      	cmp	r3, #0
 800794a:	f000 80d1 	beq.w	8007af0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800794e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007952:	f003 0301 	and.w	r3, r3, #1
 8007956:	2b00      	cmp	r3, #0
 8007958:	d00b      	beq.n	8007972 <HAL_UART_IRQHandler+0xae>
 800795a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800795e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007962:	2b00      	cmp	r3, #0
 8007964:	d005      	beq.n	8007972 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800796a:	f043 0201 	orr.w	r2, r3, #1
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007976:	f003 0304 	and.w	r3, r3, #4
 800797a:	2b00      	cmp	r3, #0
 800797c:	d00b      	beq.n	8007996 <HAL_UART_IRQHandler+0xd2>
 800797e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007982:	f003 0301 	and.w	r3, r3, #1
 8007986:	2b00      	cmp	r3, #0
 8007988:	d005      	beq.n	8007996 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800798e:	f043 0202 	orr.w	r2, r3, #2
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800799a:	f003 0302 	and.w	r3, r3, #2
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d00b      	beq.n	80079ba <HAL_UART_IRQHandler+0xf6>
 80079a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80079a6:	f003 0301 	and.w	r3, r3, #1
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d005      	beq.n	80079ba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079b2:	f043 0204 	orr.w	r2, r3, #4
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80079ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079be:	f003 0308 	and.w	r3, r3, #8
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d011      	beq.n	80079ea <HAL_UART_IRQHandler+0x126>
 80079c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079ca:	f003 0320 	and.w	r3, r3, #32
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d105      	bne.n	80079de <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80079d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80079d6:	f003 0301 	and.w	r3, r3, #1
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d005      	beq.n	80079ea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079e2:	f043 0208 	orr.w	r2, r3, #8
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	f000 820a 	beq.w	8007e08 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80079f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079f8:	f003 0320 	and.w	r3, r3, #32
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d008      	beq.n	8007a12 <HAL_UART_IRQHandler+0x14e>
 8007a00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a04:	f003 0320 	and.w	r3, r3, #32
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d002      	beq.n	8007a12 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f000 fb9c 	bl	800814a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	695b      	ldr	r3, [r3, #20]
 8007a18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a1c:	2b40      	cmp	r3, #64	@ 0x40
 8007a1e:	bf0c      	ite	eq
 8007a20:	2301      	moveq	r3, #1
 8007a22:	2300      	movne	r3, #0
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a2e:	f003 0308 	and.w	r3, r3, #8
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d103      	bne.n	8007a3e <HAL_UART_IRQHandler+0x17a>
 8007a36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d04f      	beq.n	8007ade <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 faa7 	bl	8007f92 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	695b      	ldr	r3, [r3, #20]
 8007a4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a4e:	2b40      	cmp	r3, #64	@ 0x40
 8007a50:	d141      	bne.n	8007ad6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	3314      	adds	r3, #20
 8007a58:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007a60:	e853 3f00 	ldrex	r3, [r3]
 8007a64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007a68:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007a6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	3314      	adds	r3, #20
 8007a7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007a7e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007a82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007a8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007a8e:	e841 2300 	strex	r3, r2, [r1]
 8007a92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007a96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d1d9      	bne.n	8007a52 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d013      	beq.n	8007ace <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007aaa:	4a8a      	ldr	r2, [pc, #552]	@ (8007cd4 <HAL_UART_IRQHandler+0x410>)
 8007aac:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f7fb fb6e 	bl	8003194 <HAL_DMA_Abort_IT>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d016      	beq.n	8007aec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ac2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ac4:	687a      	ldr	r2, [r7, #4]
 8007ac6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007ac8:	4610      	mov	r0, r2
 8007aca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007acc:	e00e      	b.n	8007aec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 f9b6 	bl	8007e40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ad4:	e00a      	b.n	8007aec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 f9b2 	bl	8007e40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007adc:	e006      	b.n	8007aec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 f9ae 	bl	8007e40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007aea:	e18d      	b.n	8007e08 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007aec:	bf00      	nop
    return;
 8007aee:	e18b      	b.n	8007e08 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	f040 8167 	bne.w	8007dc8 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007afe:	f003 0310 	and.w	r3, r3, #16
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	f000 8160 	beq.w	8007dc8 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8007b08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b0c:	f003 0310 	and.w	r3, r3, #16
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	f000 8159 	beq.w	8007dc8 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007b16:	2300      	movs	r3, #0
 8007b18:	60bb      	str	r3, [r7, #8]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	60bb      	str	r3, [r7, #8]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	60bb      	str	r3, [r7, #8]
 8007b2a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	695b      	ldr	r3, [r3, #20]
 8007b32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b36:	2b40      	cmp	r3, #64	@ 0x40
 8007b38:	f040 80ce 	bne.w	8007cd8 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007b48:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	f000 80a9 	beq.w	8007ca4 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007b56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	f080 80a2 	bcs.w	8007ca4 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007b66:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b6c:	69db      	ldr	r3, [r3, #28]
 8007b6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b72:	f000 8088 	beq.w	8007c86 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	330c      	adds	r3, #12
 8007b7c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b80:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007b84:	e853 3f00 	ldrex	r3, [r3]
 8007b88:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007b8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007b90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b94:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	330c      	adds	r3, #12
 8007b9e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007ba2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007ba6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007baa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007bae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007bb2:	e841 2300 	strex	r3, r2, [r1]
 8007bb6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007bba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d1d9      	bne.n	8007b76 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	3314      	adds	r3, #20
 8007bc8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007bcc:	e853 3f00 	ldrex	r3, [r3]
 8007bd0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007bd2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007bd4:	f023 0301 	bic.w	r3, r3, #1
 8007bd8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	3314      	adds	r3, #20
 8007be2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007be6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007bea:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bec:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007bee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007bf2:	e841 2300 	strex	r3, r2, [r1]
 8007bf6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007bf8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d1e1      	bne.n	8007bc2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	3314      	adds	r3, #20
 8007c04:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c06:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007c08:	e853 3f00 	ldrex	r3, [r3]
 8007c0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007c0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	3314      	adds	r3, #20
 8007c1e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007c22:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007c24:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c26:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007c28:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007c2a:	e841 2300 	strex	r3, r2, [r1]
 8007c2e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007c30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d1e3      	bne.n	8007bfe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2220      	movs	r2, #32
 8007c3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2200      	movs	r2, #0
 8007c42:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	330c      	adds	r3, #12
 8007c4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c4e:	e853 3f00 	ldrex	r3, [r3]
 8007c52:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007c54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c56:	f023 0310 	bic.w	r3, r3, #16
 8007c5a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	330c      	adds	r3, #12
 8007c64:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007c68:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007c6a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c6c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007c6e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007c70:	e841 2300 	strex	r3, r2, [r1]
 8007c74:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007c76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d1e3      	bne.n	8007c44 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c80:	4618      	mov	r0, r3
 8007c82:	f7fb fa17 	bl	80030b4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2202      	movs	r2, #2
 8007c8a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007c94:	b29b      	uxth	r3, r3
 8007c96:	1ad3      	subs	r3, r2, r3
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	4619      	mov	r1, r3
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f000 f8d9 	bl	8007e54 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007ca2:	e0b3      	b.n	8007e0c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007ca8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007cac:	429a      	cmp	r2, r3
 8007cae:	f040 80ad 	bne.w	8007e0c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cb6:	69db      	ldr	r3, [r3, #28]
 8007cb8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007cbc:	f040 80a6 	bne.w	8007e0c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2202      	movs	r2, #2
 8007cc4:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007cca:	4619      	mov	r1, r3
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f000 f8c1 	bl	8007e54 <HAL_UARTEx_RxEventCallback>
      return;
 8007cd2:	e09b      	b.n	8007e0c <HAL_UART_IRQHandler+0x548>
 8007cd4:	08008059 	.word	0x08008059
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	1ad3      	subs	r3, r2, r3
 8007ce4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	f000 808e 	beq.w	8007e10 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8007cf4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	f000 8089 	beq.w	8007e10 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	330c      	adds	r3, #12
 8007d04:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d08:	e853 3f00 	ldrex	r3, [r3]
 8007d0c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007d0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d14:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	330c      	adds	r3, #12
 8007d1e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007d22:	647a      	str	r2, [r7, #68]	@ 0x44
 8007d24:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d26:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007d28:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d2a:	e841 2300 	strex	r3, r2, [r1]
 8007d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007d30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d1e3      	bne.n	8007cfe <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	3314      	adds	r3, #20
 8007d3c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d40:	e853 3f00 	ldrex	r3, [r3]
 8007d44:	623b      	str	r3, [r7, #32]
   return(result);
 8007d46:	6a3b      	ldr	r3, [r7, #32]
 8007d48:	f023 0301 	bic.w	r3, r3, #1
 8007d4c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	3314      	adds	r3, #20
 8007d56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007d5a:	633a      	str	r2, [r7, #48]	@ 0x30
 8007d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d62:	e841 2300 	strex	r3, r2, [r1]
 8007d66:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d1e3      	bne.n	8007d36 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2220      	movs	r2, #32
 8007d72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	330c      	adds	r3, #12
 8007d82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	e853 3f00 	ldrex	r3, [r3]
 8007d8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f023 0310 	bic.w	r3, r3, #16
 8007d92:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	330c      	adds	r3, #12
 8007d9c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007da0:	61fa      	str	r2, [r7, #28]
 8007da2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da4:	69b9      	ldr	r1, [r7, #24]
 8007da6:	69fa      	ldr	r2, [r7, #28]
 8007da8:	e841 2300 	strex	r3, r2, [r1]
 8007dac:	617b      	str	r3, [r7, #20]
   return(result);
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d1e3      	bne.n	8007d7c <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2202      	movs	r2, #2
 8007db8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007dba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007dbe:	4619      	mov	r1, r3
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f000 f847 	bl	8007e54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007dc6:	e023      	b.n	8007e10 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007dcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d009      	beq.n	8007de8 <HAL_UART_IRQHandler+0x524>
 8007dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007dd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d003      	beq.n	8007de8 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f000 f94a 	bl	800807a <UART_Transmit_IT>
    return;
 8007de6:	e014      	b.n	8007e12 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007de8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007dec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d00e      	beq.n	8007e12 <HAL_UART_IRQHandler+0x54e>
 8007df4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007df8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d008      	beq.n	8007e12 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f000 f98a 	bl	800811a <UART_EndTransmit_IT>
    return;
 8007e06:	e004      	b.n	8007e12 <HAL_UART_IRQHandler+0x54e>
    return;
 8007e08:	bf00      	nop
 8007e0a:	e002      	b.n	8007e12 <HAL_UART_IRQHandler+0x54e>
      return;
 8007e0c:	bf00      	nop
 8007e0e:	e000      	b.n	8007e12 <HAL_UART_IRQHandler+0x54e>
      return;
 8007e10:	bf00      	nop
  }
}
 8007e12:	37e8      	adds	r7, #232	@ 0xe8
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}

08007e18 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b083      	sub	sp, #12
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007e20:	bf00      	nop
 8007e22:	370c      	adds	r7, #12
 8007e24:	46bd      	mov	sp, r7
 8007e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2a:	4770      	bx	lr

08007e2c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b083      	sub	sp, #12
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007e34:	bf00      	nop
 8007e36:	370c      	adds	r7, #12
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr

08007e40 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b083      	sub	sp, #12
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007e48:	bf00      	nop
 8007e4a:	370c      	adds	r7, #12
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr

08007e54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b083      	sub	sp, #12
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	460b      	mov	r3, r1
 8007e5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007e60:	bf00      	nop
 8007e62:	370c      	adds	r7, #12
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr

08007e6c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b086      	sub	sp, #24
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	60f8      	str	r0, [r7, #12]
 8007e74:	60b9      	str	r1, [r7, #8]
 8007e76:	603b      	str	r3, [r7, #0]
 8007e78:	4613      	mov	r3, r2
 8007e7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e7c:	e03b      	b.n	8007ef6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e7e:	6a3b      	ldr	r3, [r7, #32]
 8007e80:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e84:	d037      	beq.n	8007ef6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e86:	f7fa fa99 	bl	80023bc <HAL_GetTick>
 8007e8a:	4602      	mov	r2, r0
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	1ad3      	subs	r3, r2, r3
 8007e90:	6a3a      	ldr	r2, [r7, #32]
 8007e92:	429a      	cmp	r2, r3
 8007e94:	d302      	bcc.n	8007e9c <UART_WaitOnFlagUntilTimeout+0x30>
 8007e96:	6a3b      	ldr	r3, [r7, #32]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d101      	bne.n	8007ea0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007e9c:	2303      	movs	r3, #3
 8007e9e:	e03a      	b.n	8007f16 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	68db      	ldr	r3, [r3, #12]
 8007ea6:	f003 0304 	and.w	r3, r3, #4
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d023      	beq.n	8007ef6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	2b80      	cmp	r3, #128	@ 0x80
 8007eb2:	d020      	beq.n	8007ef6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	2b40      	cmp	r3, #64	@ 0x40
 8007eb8:	d01d      	beq.n	8007ef6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f003 0308 	and.w	r3, r3, #8
 8007ec4:	2b08      	cmp	r3, #8
 8007ec6:	d116      	bne.n	8007ef6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007ec8:	2300      	movs	r3, #0
 8007eca:	617b      	str	r3, [r7, #20]
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	617b      	str	r3, [r7, #20]
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	617b      	str	r3, [r7, #20]
 8007edc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ede:	68f8      	ldr	r0, [r7, #12]
 8007ee0:	f000 f857 	bl	8007f92 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	2208      	movs	r2, #8
 8007ee8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2200      	movs	r2, #0
 8007eee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	e00f      	b.n	8007f16 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	681a      	ldr	r2, [r3, #0]
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	4013      	ands	r3, r2
 8007f00:	68ba      	ldr	r2, [r7, #8]
 8007f02:	429a      	cmp	r2, r3
 8007f04:	bf0c      	ite	eq
 8007f06:	2301      	moveq	r3, #1
 8007f08:	2300      	movne	r3, #0
 8007f0a:	b2db      	uxtb	r3, r3
 8007f0c:	461a      	mov	r2, r3
 8007f0e:	79fb      	ldrb	r3, [r7, #7]
 8007f10:	429a      	cmp	r2, r3
 8007f12:	d0b4      	beq.n	8007e7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f14:	2300      	movs	r3, #0
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3718      	adds	r7, #24
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}

08007f1e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f1e:	b480      	push	{r7}
 8007f20:	b085      	sub	sp, #20
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	60f8      	str	r0, [r7, #12]
 8007f26:	60b9      	str	r1, [r7, #8]
 8007f28:	4613      	mov	r3, r2
 8007f2a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	68ba      	ldr	r2, [r7, #8]
 8007f30:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	88fa      	ldrh	r2, [r7, #6]
 8007f36:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	88fa      	ldrh	r2, [r7, #6]
 8007f3c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2200      	movs	r2, #0
 8007f42:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2222      	movs	r2, #34	@ 0x22
 8007f48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	691b      	ldr	r3, [r3, #16]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d007      	beq.n	8007f64 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	68da      	ldr	r2, [r3, #12]
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007f62:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	695a      	ldr	r2, [r3, #20]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f042 0201 	orr.w	r2, r2, #1
 8007f72:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	68da      	ldr	r2, [r3, #12]
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f042 0220 	orr.w	r2, r2, #32
 8007f82:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007f84:	2300      	movs	r3, #0
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3714      	adds	r7, #20
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f90:	4770      	bx	lr

08007f92 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f92:	b480      	push	{r7}
 8007f94:	b095      	sub	sp, #84	@ 0x54
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	330c      	adds	r3, #12
 8007fa0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fa4:	e853 3f00 	ldrex	r3, [r3]
 8007fa8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007fb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	330c      	adds	r3, #12
 8007fb8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007fba:	643a      	str	r2, [r7, #64]	@ 0x40
 8007fbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fbe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007fc0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007fc2:	e841 2300 	strex	r3, r2, [r1]
 8007fc6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007fc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d1e5      	bne.n	8007f9a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	3314      	adds	r3, #20
 8007fd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd6:	6a3b      	ldr	r3, [r7, #32]
 8007fd8:	e853 3f00 	ldrex	r3, [r3]
 8007fdc:	61fb      	str	r3, [r7, #28]
   return(result);
 8007fde:	69fb      	ldr	r3, [r7, #28]
 8007fe0:	f023 0301 	bic.w	r3, r3, #1
 8007fe4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	3314      	adds	r3, #20
 8007fec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007fee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007ff4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ff6:	e841 2300 	strex	r3, r2, [r1]
 8007ffa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d1e5      	bne.n	8007fce <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008006:	2b01      	cmp	r3, #1
 8008008:	d119      	bne.n	800803e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	330c      	adds	r3, #12
 8008010:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	e853 3f00 	ldrex	r3, [r3]
 8008018:	60bb      	str	r3, [r7, #8]
   return(result);
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	f023 0310 	bic.w	r3, r3, #16
 8008020:	647b      	str	r3, [r7, #68]	@ 0x44
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	330c      	adds	r3, #12
 8008028:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800802a:	61ba      	str	r2, [r7, #24]
 800802c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800802e:	6979      	ldr	r1, [r7, #20]
 8008030:	69ba      	ldr	r2, [r7, #24]
 8008032:	e841 2300 	strex	r3, r2, [r1]
 8008036:	613b      	str	r3, [r7, #16]
   return(result);
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d1e5      	bne.n	800800a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2220      	movs	r2, #32
 8008042:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2200      	movs	r2, #0
 800804a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800804c:	bf00      	nop
 800804e:	3754      	adds	r7, #84	@ 0x54
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr

08008058 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b084      	sub	sp, #16
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008064:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2200      	movs	r2, #0
 800806a:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800806c:	68f8      	ldr	r0, [r7, #12]
 800806e:	f7ff fee7 	bl	8007e40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008072:	bf00      	nop
 8008074:	3710      	adds	r7, #16
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}

0800807a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800807a:	b480      	push	{r7}
 800807c:	b085      	sub	sp, #20
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008088:	b2db      	uxtb	r3, r3
 800808a:	2b21      	cmp	r3, #33	@ 0x21
 800808c:	d13e      	bne.n	800810c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	689b      	ldr	r3, [r3, #8]
 8008092:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008096:	d114      	bne.n	80080c2 <UART_Transmit_IT+0x48>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	691b      	ldr	r3, [r3, #16]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d110      	bne.n	80080c2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6a1b      	ldr	r3, [r3, #32]
 80080a4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	881b      	ldrh	r3, [r3, #0]
 80080aa:	461a      	mov	r2, r3
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80080b4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6a1b      	ldr	r3, [r3, #32]
 80080ba:	1c9a      	adds	r2, r3, #2
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	621a      	str	r2, [r3, #32]
 80080c0:	e008      	b.n	80080d4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6a1b      	ldr	r3, [r3, #32]
 80080c6:	1c59      	adds	r1, r3, #1
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	6211      	str	r1, [r2, #32]
 80080cc:	781a      	ldrb	r2, [r3, #0]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80080d8:	b29b      	uxth	r3, r3
 80080da:	3b01      	subs	r3, #1
 80080dc:	b29b      	uxth	r3, r3
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	4619      	mov	r1, r3
 80080e2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d10f      	bne.n	8008108 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	68da      	ldr	r2, [r3, #12]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80080f6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	68da      	ldr	r2, [r3, #12]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008106:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008108:	2300      	movs	r3, #0
 800810a:	e000      	b.n	800810e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800810c:	2302      	movs	r3, #2
  }
}
 800810e:	4618      	mov	r0, r3
 8008110:	3714      	adds	r7, #20
 8008112:	46bd      	mov	sp, r7
 8008114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008118:	4770      	bx	lr

0800811a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800811a:	b580      	push	{r7, lr}
 800811c:	b082      	sub	sp, #8
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	68da      	ldr	r2, [r3, #12]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008130:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2220      	movs	r2, #32
 8008136:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f7ff fe6c 	bl	8007e18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008140:	2300      	movs	r3, #0
}
 8008142:	4618      	mov	r0, r3
 8008144:	3708      	adds	r7, #8
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}

0800814a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800814a:	b580      	push	{r7, lr}
 800814c:	b08c      	sub	sp, #48	@ 0x30
 800814e:	af00      	add	r7, sp, #0
 8008150:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8008152:	2300      	movs	r3, #0
 8008154:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8008156:	2300      	movs	r3, #0
 8008158:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008160:	b2db      	uxtb	r3, r3
 8008162:	2b22      	cmp	r3, #34	@ 0x22
 8008164:	f040 80aa 	bne.w	80082bc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	689b      	ldr	r3, [r3, #8]
 800816c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008170:	d115      	bne.n	800819e <UART_Receive_IT+0x54>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	691b      	ldr	r3, [r3, #16]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d111      	bne.n	800819e <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800817e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	b29b      	uxth	r3, r3
 8008188:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800818c:	b29a      	uxth	r2, r3
 800818e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008190:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008196:	1c9a      	adds	r2, r3, #2
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	629a      	str	r2, [r3, #40]	@ 0x28
 800819c:	e024      	b.n	80081e8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	689b      	ldr	r3, [r3, #8]
 80081a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081ac:	d007      	beq.n	80081be <UART_Receive_IT+0x74>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	689b      	ldr	r3, [r3, #8]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d10a      	bne.n	80081cc <UART_Receive_IT+0x82>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	691b      	ldr	r3, [r3, #16]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d106      	bne.n	80081cc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	b2da      	uxtb	r2, r3
 80081c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081c8:	701a      	strb	r2, [r3, #0]
 80081ca:	e008      	b.n	80081de <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	b2db      	uxtb	r3, r3
 80081d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80081d8:	b2da      	uxtb	r2, r3
 80081da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081dc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081e2:	1c5a      	adds	r2, r3, #1
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	3b01      	subs	r3, #1
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	687a      	ldr	r2, [r7, #4]
 80081f4:	4619      	mov	r1, r3
 80081f6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d15d      	bne.n	80082b8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	68da      	ldr	r2, [r3, #12]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f022 0220 	bic.w	r2, r2, #32
 800820a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	68da      	ldr	r2, [r3, #12]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800821a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	695a      	ldr	r2, [r3, #20]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f022 0201 	bic.w	r2, r2, #1
 800822a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2220      	movs	r2, #32
 8008230:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2200      	movs	r2, #0
 8008238:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800823e:	2b01      	cmp	r3, #1
 8008240:	d135      	bne.n	80082ae <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2200      	movs	r2, #0
 8008246:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	330c      	adds	r3, #12
 800824e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	e853 3f00 	ldrex	r3, [r3]
 8008256:	613b      	str	r3, [r7, #16]
   return(result);
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	f023 0310 	bic.w	r3, r3, #16
 800825e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	330c      	adds	r3, #12
 8008266:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008268:	623a      	str	r2, [r7, #32]
 800826a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800826c:	69f9      	ldr	r1, [r7, #28]
 800826e:	6a3a      	ldr	r2, [r7, #32]
 8008270:	e841 2300 	strex	r3, r2, [r1]
 8008274:	61bb      	str	r3, [r7, #24]
   return(result);
 8008276:	69bb      	ldr	r3, [r7, #24]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d1e5      	bne.n	8008248 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f003 0310 	and.w	r3, r3, #16
 8008286:	2b10      	cmp	r3, #16
 8008288:	d10a      	bne.n	80082a0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800828a:	2300      	movs	r3, #0
 800828c:	60fb      	str	r3, [r7, #12]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	60fb      	str	r3, [r7, #12]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	685b      	ldr	r3, [r3, #4]
 800829c:	60fb      	str	r3, [r7, #12]
 800829e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80082a4:	4619      	mov	r1, r3
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f7ff fdd4 	bl	8007e54 <HAL_UARTEx_RxEventCallback>
 80082ac:	e002      	b.n	80082b4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f7ff fdbc 	bl	8007e2c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80082b4:	2300      	movs	r3, #0
 80082b6:	e002      	b.n	80082be <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80082b8:	2300      	movs	r3, #0
 80082ba:	e000      	b.n	80082be <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80082bc:	2302      	movs	r3, #2
  }
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3730      	adds	r7, #48	@ 0x30
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
	...

080082c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80082cc:	b0c0      	sub	sp, #256	@ 0x100
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80082d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	691b      	ldr	r3, [r3, #16]
 80082dc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80082e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082e4:	68d9      	ldr	r1, [r3, #12]
 80082e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082ea:	681a      	ldr	r2, [r3, #0]
 80082ec:	ea40 0301 	orr.w	r3, r0, r1
 80082f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80082f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082f6:	689a      	ldr	r2, [r3, #8]
 80082f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082fc:	691b      	ldr	r3, [r3, #16]
 80082fe:	431a      	orrs	r2, r3
 8008300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008304:	695b      	ldr	r3, [r3, #20]
 8008306:	431a      	orrs	r2, r3
 8008308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800830c:	69db      	ldr	r3, [r3, #28]
 800830e:	4313      	orrs	r3, r2
 8008310:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	68db      	ldr	r3, [r3, #12]
 800831c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008320:	f021 010c 	bic.w	r1, r1, #12
 8008324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800832e:	430b      	orrs	r3, r1
 8008330:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	695b      	ldr	r3, [r3, #20]
 800833a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800833e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008342:	6999      	ldr	r1, [r3, #24]
 8008344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	ea40 0301 	orr.w	r3, r0, r1
 800834e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008354:	681a      	ldr	r2, [r3, #0]
 8008356:	4b8f      	ldr	r3, [pc, #572]	@ (8008594 <UART_SetConfig+0x2cc>)
 8008358:	429a      	cmp	r2, r3
 800835a:	d005      	beq.n	8008368 <UART_SetConfig+0xa0>
 800835c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008360:	681a      	ldr	r2, [r3, #0]
 8008362:	4b8d      	ldr	r3, [pc, #564]	@ (8008598 <UART_SetConfig+0x2d0>)
 8008364:	429a      	cmp	r2, r3
 8008366:	d104      	bne.n	8008372 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008368:	f7fe fa82 	bl	8006870 <HAL_RCC_GetPCLK2Freq>
 800836c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008370:	e003      	b.n	800837a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008372:	f7fe fa69 	bl	8006848 <HAL_RCC_GetPCLK1Freq>
 8008376:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800837a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800837e:	69db      	ldr	r3, [r3, #28]
 8008380:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008384:	f040 810c 	bne.w	80085a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008388:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800838c:	2200      	movs	r2, #0
 800838e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008392:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008396:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800839a:	4622      	mov	r2, r4
 800839c:	462b      	mov	r3, r5
 800839e:	1891      	adds	r1, r2, r2
 80083a0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80083a2:	415b      	adcs	r3, r3
 80083a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80083a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80083aa:	4621      	mov	r1, r4
 80083ac:	eb12 0801 	adds.w	r8, r2, r1
 80083b0:	4629      	mov	r1, r5
 80083b2:	eb43 0901 	adc.w	r9, r3, r1
 80083b6:	f04f 0200 	mov.w	r2, #0
 80083ba:	f04f 0300 	mov.w	r3, #0
 80083be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80083c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80083c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80083ca:	4690      	mov	r8, r2
 80083cc:	4699      	mov	r9, r3
 80083ce:	4623      	mov	r3, r4
 80083d0:	eb18 0303 	adds.w	r3, r8, r3
 80083d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80083d8:	462b      	mov	r3, r5
 80083da:	eb49 0303 	adc.w	r3, r9, r3
 80083de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80083e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	2200      	movs	r2, #0
 80083ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80083ee:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80083f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80083f6:	460b      	mov	r3, r1
 80083f8:	18db      	adds	r3, r3, r3
 80083fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80083fc:	4613      	mov	r3, r2
 80083fe:	eb42 0303 	adc.w	r3, r2, r3
 8008402:	657b      	str	r3, [r7, #84]	@ 0x54
 8008404:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008408:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800840c:	f7f7 ff38 	bl	8000280 <__aeabi_uldivmod>
 8008410:	4602      	mov	r2, r0
 8008412:	460b      	mov	r3, r1
 8008414:	4b61      	ldr	r3, [pc, #388]	@ (800859c <UART_SetConfig+0x2d4>)
 8008416:	fba3 2302 	umull	r2, r3, r3, r2
 800841a:	095b      	lsrs	r3, r3, #5
 800841c:	011c      	lsls	r4, r3, #4
 800841e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008422:	2200      	movs	r2, #0
 8008424:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008428:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800842c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008430:	4642      	mov	r2, r8
 8008432:	464b      	mov	r3, r9
 8008434:	1891      	adds	r1, r2, r2
 8008436:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008438:	415b      	adcs	r3, r3
 800843a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800843c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008440:	4641      	mov	r1, r8
 8008442:	eb12 0a01 	adds.w	sl, r2, r1
 8008446:	4649      	mov	r1, r9
 8008448:	eb43 0b01 	adc.w	fp, r3, r1
 800844c:	f04f 0200 	mov.w	r2, #0
 8008450:	f04f 0300 	mov.w	r3, #0
 8008454:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008458:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800845c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008460:	4692      	mov	sl, r2
 8008462:	469b      	mov	fp, r3
 8008464:	4643      	mov	r3, r8
 8008466:	eb1a 0303 	adds.w	r3, sl, r3
 800846a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800846e:	464b      	mov	r3, r9
 8008470:	eb4b 0303 	adc.w	r3, fp, r3
 8008474:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	2200      	movs	r2, #0
 8008480:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008484:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008488:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800848c:	460b      	mov	r3, r1
 800848e:	18db      	adds	r3, r3, r3
 8008490:	643b      	str	r3, [r7, #64]	@ 0x40
 8008492:	4613      	mov	r3, r2
 8008494:	eb42 0303 	adc.w	r3, r2, r3
 8008498:	647b      	str	r3, [r7, #68]	@ 0x44
 800849a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800849e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80084a2:	f7f7 feed 	bl	8000280 <__aeabi_uldivmod>
 80084a6:	4602      	mov	r2, r0
 80084a8:	460b      	mov	r3, r1
 80084aa:	4611      	mov	r1, r2
 80084ac:	4b3b      	ldr	r3, [pc, #236]	@ (800859c <UART_SetConfig+0x2d4>)
 80084ae:	fba3 2301 	umull	r2, r3, r3, r1
 80084b2:	095b      	lsrs	r3, r3, #5
 80084b4:	2264      	movs	r2, #100	@ 0x64
 80084b6:	fb02 f303 	mul.w	r3, r2, r3
 80084ba:	1acb      	subs	r3, r1, r3
 80084bc:	00db      	lsls	r3, r3, #3
 80084be:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80084c2:	4b36      	ldr	r3, [pc, #216]	@ (800859c <UART_SetConfig+0x2d4>)
 80084c4:	fba3 2302 	umull	r2, r3, r3, r2
 80084c8:	095b      	lsrs	r3, r3, #5
 80084ca:	005b      	lsls	r3, r3, #1
 80084cc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80084d0:	441c      	add	r4, r3
 80084d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80084d6:	2200      	movs	r2, #0
 80084d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80084dc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80084e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80084e4:	4642      	mov	r2, r8
 80084e6:	464b      	mov	r3, r9
 80084e8:	1891      	adds	r1, r2, r2
 80084ea:	63b9      	str	r1, [r7, #56]	@ 0x38
 80084ec:	415b      	adcs	r3, r3
 80084ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80084f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80084f4:	4641      	mov	r1, r8
 80084f6:	1851      	adds	r1, r2, r1
 80084f8:	6339      	str	r1, [r7, #48]	@ 0x30
 80084fa:	4649      	mov	r1, r9
 80084fc:	414b      	adcs	r3, r1
 80084fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8008500:	f04f 0200 	mov.w	r2, #0
 8008504:	f04f 0300 	mov.w	r3, #0
 8008508:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800850c:	4659      	mov	r1, fp
 800850e:	00cb      	lsls	r3, r1, #3
 8008510:	4651      	mov	r1, sl
 8008512:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008516:	4651      	mov	r1, sl
 8008518:	00ca      	lsls	r2, r1, #3
 800851a:	4610      	mov	r0, r2
 800851c:	4619      	mov	r1, r3
 800851e:	4603      	mov	r3, r0
 8008520:	4642      	mov	r2, r8
 8008522:	189b      	adds	r3, r3, r2
 8008524:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008528:	464b      	mov	r3, r9
 800852a:	460a      	mov	r2, r1
 800852c:	eb42 0303 	adc.w	r3, r2, r3
 8008530:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	2200      	movs	r2, #0
 800853c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008540:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008544:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008548:	460b      	mov	r3, r1
 800854a:	18db      	adds	r3, r3, r3
 800854c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800854e:	4613      	mov	r3, r2
 8008550:	eb42 0303 	adc.w	r3, r2, r3
 8008554:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008556:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800855a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800855e:	f7f7 fe8f 	bl	8000280 <__aeabi_uldivmod>
 8008562:	4602      	mov	r2, r0
 8008564:	460b      	mov	r3, r1
 8008566:	4b0d      	ldr	r3, [pc, #52]	@ (800859c <UART_SetConfig+0x2d4>)
 8008568:	fba3 1302 	umull	r1, r3, r3, r2
 800856c:	095b      	lsrs	r3, r3, #5
 800856e:	2164      	movs	r1, #100	@ 0x64
 8008570:	fb01 f303 	mul.w	r3, r1, r3
 8008574:	1ad3      	subs	r3, r2, r3
 8008576:	00db      	lsls	r3, r3, #3
 8008578:	3332      	adds	r3, #50	@ 0x32
 800857a:	4a08      	ldr	r2, [pc, #32]	@ (800859c <UART_SetConfig+0x2d4>)
 800857c:	fba2 2303 	umull	r2, r3, r2, r3
 8008580:	095b      	lsrs	r3, r3, #5
 8008582:	f003 0207 	and.w	r2, r3, #7
 8008586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4422      	add	r2, r4
 800858e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008590:	e106      	b.n	80087a0 <UART_SetConfig+0x4d8>
 8008592:	bf00      	nop
 8008594:	40011000 	.word	0x40011000
 8008598:	40011400 	.word	0x40011400
 800859c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80085a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80085a4:	2200      	movs	r2, #0
 80085a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80085aa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80085ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80085b2:	4642      	mov	r2, r8
 80085b4:	464b      	mov	r3, r9
 80085b6:	1891      	adds	r1, r2, r2
 80085b8:	6239      	str	r1, [r7, #32]
 80085ba:	415b      	adcs	r3, r3
 80085bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80085be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80085c2:	4641      	mov	r1, r8
 80085c4:	1854      	adds	r4, r2, r1
 80085c6:	4649      	mov	r1, r9
 80085c8:	eb43 0501 	adc.w	r5, r3, r1
 80085cc:	f04f 0200 	mov.w	r2, #0
 80085d0:	f04f 0300 	mov.w	r3, #0
 80085d4:	00eb      	lsls	r3, r5, #3
 80085d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80085da:	00e2      	lsls	r2, r4, #3
 80085dc:	4614      	mov	r4, r2
 80085de:	461d      	mov	r5, r3
 80085e0:	4643      	mov	r3, r8
 80085e2:	18e3      	adds	r3, r4, r3
 80085e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80085e8:	464b      	mov	r3, r9
 80085ea:	eb45 0303 	adc.w	r3, r5, r3
 80085ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80085f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	2200      	movs	r2, #0
 80085fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80085fe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008602:	f04f 0200 	mov.w	r2, #0
 8008606:	f04f 0300 	mov.w	r3, #0
 800860a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800860e:	4629      	mov	r1, r5
 8008610:	008b      	lsls	r3, r1, #2
 8008612:	4621      	mov	r1, r4
 8008614:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008618:	4621      	mov	r1, r4
 800861a:	008a      	lsls	r2, r1, #2
 800861c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008620:	f7f7 fe2e 	bl	8000280 <__aeabi_uldivmod>
 8008624:	4602      	mov	r2, r0
 8008626:	460b      	mov	r3, r1
 8008628:	4b60      	ldr	r3, [pc, #384]	@ (80087ac <UART_SetConfig+0x4e4>)
 800862a:	fba3 2302 	umull	r2, r3, r3, r2
 800862e:	095b      	lsrs	r3, r3, #5
 8008630:	011c      	lsls	r4, r3, #4
 8008632:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008636:	2200      	movs	r2, #0
 8008638:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800863c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008640:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008644:	4642      	mov	r2, r8
 8008646:	464b      	mov	r3, r9
 8008648:	1891      	adds	r1, r2, r2
 800864a:	61b9      	str	r1, [r7, #24]
 800864c:	415b      	adcs	r3, r3
 800864e:	61fb      	str	r3, [r7, #28]
 8008650:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008654:	4641      	mov	r1, r8
 8008656:	1851      	adds	r1, r2, r1
 8008658:	6139      	str	r1, [r7, #16]
 800865a:	4649      	mov	r1, r9
 800865c:	414b      	adcs	r3, r1
 800865e:	617b      	str	r3, [r7, #20]
 8008660:	f04f 0200 	mov.w	r2, #0
 8008664:	f04f 0300 	mov.w	r3, #0
 8008668:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800866c:	4659      	mov	r1, fp
 800866e:	00cb      	lsls	r3, r1, #3
 8008670:	4651      	mov	r1, sl
 8008672:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008676:	4651      	mov	r1, sl
 8008678:	00ca      	lsls	r2, r1, #3
 800867a:	4610      	mov	r0, r2
 800867c:	4619      	mov	r1, r3
 800867e:	4603      	mov	r3, r0
 8008680:	4642      	mov	r2, r8
 8008682:	189b      	adds	r3, r3, r2
 8008684:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008688:	464b      	mov	r3, r9
 800868a:	460a      	mov	r2, r1
 800868c:	eb42 0303 	adc.w	r3, r2, r3
 8008690:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	2200      	movs	r2, #0
 800869c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800869e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80086a0:	f04f 0200 	mov.w	r2, #0
 80086a4:	f04f 0300 	mov.w	r3, #0
 80086a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80086ac:	4649      	mov	r1, r9
 80086ae:	008b      	lsls	r3, r1, #2
 80086b0:	4641      	mov	r1, r8
 80086b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80086b6:	4641      	mov	r1, r8
 80086b8:	008a      	lsls	r2, r1, #2
 80086ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80086be:	f7f7 fddf 	bl	8000280 <__aeabi_uldivmod>
 80086c2:	4602      	mov	r2, r0
 80086c4:	460b      	mov	r3, r1
 80086c6:	4611      	mov	r1, r2
 80086c8:	4b38      	ldr	r3, [pc, #224]	@ (80087ac <UART_SetConfig+0x4e4>)
 80086ca:	fba3 2301 	umull	r2, r3, r3, r1
 80086ce:	095b      	lsrs	r3, r3, #5
 80086d0:	2264      	movs	r2, #100	@ 0x64
 80086d2:	fb02 f303 	mul.w	r3, r2, r3
 80086d6:	1acb      	subs	r3, r1, r3
 80086d8:	011b      	lsls	r3, r3, #4
 80086da:	3332      	adds	r3, #50	@ 0x32
 80086dc:	4a33      	ldr	r2, [pc, #204]	@ (80087ac <UART_SetConfig+0x4e4>)
 80086de:	fba2 2303 	umull	r2, r3, r2, r3
 80086e2:	095b      	lsrs	r3, r3, #5
 80086e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80086e8:	441c      	add	r4, r3
 80086ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80086ee:	2200      	movs	r2, #0
 80086f0:	673b      	str	r3, [r7, #112]	@ 0x70
 80086f2:	677a      	str	r2, [r7, #116]	@ 0x74
 80086f4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80086f8:	4642      	mov	r2, r8
 80086fa:	464b      	mov	r3, r9
 80086fc:	1891      	adds	r1, r2, r2
 80086fe:	60b9      	str	r1, [r7, #8]
 8008700:	415b      	adcs	r3, r3
 8008702:	60fb      	str	r3, [r7, #12]
 8008704:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008708:	4641      	mov	r1, r8
 800870a:	1851      	adds	r1, r2, r1
 800870c:	6039      	str	r1, [r7, #0]
 800870e:	4649      	mov	r1, r9
 8008710:	414b      	adcs	r3, r1
 8008712:	607b      	str	r3, [r7, #4]
 8008714:	f04f 0200 	mov.w	r2, #0
 8008718:	f04f 0300 	mov.w	r3, #0
 800871c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008720:	4659      	mov	r1, fp
 8008722:	00cb      	lsls	r3, r1, #3
 8008724:	4651      	mov	r1, sl
 8008726:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800872a:	4651      	mov	r1, sl
 800872c:	00ca      	lsls	r2, r1, #3
 800872e:	4610      	mov	r0, r2
 8008730:	4619      	mov	r1, r3
 8008732:	4603      	mov	r3, r0
 8008734:	4642      	mov	r2, r8
 8008736:	189b      	adds	r3, r3, r2
 8008738:	66bb      	str	r3, [r7, #104]	@ 0x68
 800873a:	464b      	mov	r3, r9
 800873c:	460a      	mov	r2, r1
 800873e:	eb42 0303 	adc.w	r3, r2, r3
 8008742:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008748:	685b      	ldr	r3, [r3, #4]
 800874a:	2200      	movs	r2, #0
 800874c:	663b      	str	r3, [r7, #96]	@ 0x60
 800874e:	667a      	str	r2, [r7, #100]	@ 0x64
 8008750:	f04f 0200 	mov.w	r2, #0
 8008754:	f04f 0300 	mov.w	r3, #0
 8008758:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800875c:	4649      	mov	r1, r9
 800875e:	008b      	lsls	r3, r1, #2
 8008760:	4641      	mov	r1, r8
 8008762:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008766:	4641      	mov	r1, r8
 8008768:	008a      	lsls	r2, r1, #2
 800876a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800876e:	f7f7 fd87 	bl	8000280 <__aeabi_uldivmod>
 8008772:	4602      	mov	r2, r0
 8008774:	460b      	mov	r3, r1
 8008776:	4b0d      	ldr	r3, [pc, #52]	@ (80087ac <UART_SetConfig+0x4e4>)
 8008778:	fba3 1302 	umull	r1, r3, r3, r2
 800877c:	095b      	lsrs	r3, r3, #5
 800877e:	2164      	movs	r1, #100	@ 0x64
 8008780:	fb01 f303 	mul.w	r3, r1, r3
 8008784:	1ad3      	subs	r3, r2, r3
 8008786:	011b      	lsls	r3, r3, #4
 8008788:	3332      	adds	r3, #50	@ 0x32
 800878a:	4a08      	ldr	r2, [pc, #32]	@ (80087ac <UART_SetConfig+0x4e4>)
 800878c:	fba2 2303 	umull	r2, r3, r2, r3
 8008790:	095b      	lsrs	r3, r3, #5
 8008792:	f003 020f 	and.w	r2, r3, #15
 8008796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4422      	add	r2, r4
 800879e:	609a      	str	r2, [r3, #8]
}
 80087a0:	bf00      	nop
 80087a2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80087a6:	46bd      	mov	sp, r7
 80087a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80087ac:	51eb851f 	.word	0x51eb851f

080087b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80087b0:	b084      	sub	sp, #16
 80087b2:	b580      	push	{r7, lr}
 80087b4:	b084      	sub	sp, #16
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	6078      	str	r0, [r7, #4]
 80087ba:	f107 001c 	add.w	r0, r7, #28
 80087be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80087c2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80087c6:	2b01      	cmp	r3, #1
 80087c8:	d123      	bne.n	8008812 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087ce:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	68db      	ldr	r3, [r3, #12]
 80087da:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80087de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80087e2:	687a      	ldr	r2, [r7, #4]
 80087e4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	68db      	ldr	r3, [r3, #12]
 80087ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80087f2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80087f6:	2b01      	cmp	r3, #1
 80087f8:	d105      	bne.n	8008806 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	68db      	ldr	r3, [r3, #12]
 80087fe:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f000 f9dc 	bl	8008bc4 <USB_CoreReset>
 800880c:	4603      	mov	r3, r0
 800880e:	73fb      	strb	r3, [r7, #15]
 8008810:	e01b      	b.n	800884a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	68db      	ldr	r3, [r3, #12]
 8008816:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f000 f9d0 	bl	8008bc4 <USB_CoreReset>
 8008824:	4603      	mov	r3, r0
 8008826:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008828:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800882c:	2b00      	cmp	r3, #0
 800882e:	d106      	bne.n	800883e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008834:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	639a      	str	r2, [r3, #56]	@ 0x38
 800883c:	e005      	b.n	800884a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008842:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800884a:	7fbb      	ldrb	r3, [r7, #30]
 800884c:	2b01      	cmp	r3, #1
 800884e:	d10b      	bne.n	8008868 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	689b      	ldr	r3, [r3, #8]
 8008854:	f043 0206 	orr.w	r2, r3, #6
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	689b      	ldr	r3, [r3, #8]
 8008860:	f043 0220 	orr.w	r2, r3, #32
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008868:	7bfb      	ldrb	r3, [r7, #15]
}
 800886a:	4618      	mov	r0, r3
 800886c:	3710      	adds	r7, #16
 800886e:	46bd      	mov	sp, r7
 8008870:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008874:	b004      	add	sp, #16
 8008876:	4770      	bx	lr

08008878 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008878:	b480      	push	{r7}
 800887a:	b083      	sub	sp, #12
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	689b      	ldr	r3, [r3, #8]
 8008884:	f043 0201 	orr.w	r2, r3, #1
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800888c:	2300      	movs	r3, #0
}
 800888e:	4618      	mov	r0, r3
 8008890:	370c      	adds	r7, #12
 8008892:	46bd      	mov	sp, r7
 8008894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008898:	4770      	bx	lr

0800889a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800889a:	b480      	push	{r7}
 800889c:	b083      	sub	sp, #12
 800889e:	af00      	add	r7, sp, #0
 80088a0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	689b      	ldr	r3, [r3, #8]
 80088a6:	f023 0201 	bic.w	r2, r3, #1
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80088ae:	2300      	movs	r3, #0
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	370c      	adds	r7, #12
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr

080088bc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b084      	sub	sp, #16
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	460b      	mov	r3, r1
 80088c6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80088c8:	2300      	movs	r3, #0
 80088ca:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	68db      	ldr	r3, [r3, #12]
 80088d0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80088d8:	78fb      	ldrb	r3, [r7, #3]
 80088da:	2b01      	cmp	r3, #1
 80088dc:	d115      	bne.n	800890a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	68db      	ldr	r3, [r3, #12]
 80088e2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80088ea:	200a      	movs	r0, #10
 80088ec:	f7f9 fd72 	bl	80023d4 <HAL_Delay>
      ms += 10U;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	330a      	adds	r3, #10
 80088f4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f000 f956 	bl	8008ba8 <USB_GetMode>
 80088fc:	4603      	mov	r3, r0
 80088fe:	2b01      	cmp	r3, #1
 8008900:	d01e      	beq.n	8008940 <USB_SetCurrentMode+0x84>
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2bc7      	cmp	r3, #199	@ 0xc7
 8008906:	d9f0      	bls.n	80088ea <USB_SetCurrentMode+0x2e>
 8008908:	e01a      	b.n	8008940 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800890a:	78fb      	ldrb	r3, [r7, #3]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d115      	bne.n	800893c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	68db      	ldr	r3, [r3, #12]
 8008914:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800891c:	200a      	movs	r0, #10
 800891e:	f7f9 fd59 	bl	80023d4 <HAL_Delay>
      ms += 10U;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	330a      	adds	r3, #10
 8008926:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f000 f93d 	bl	8008ba8 <USB_GetMode>
 800892e:	4603      	mov	r3, r0
 8008930:	2b00      	cmp	r3, #0
 8008932:	d005      	beq.n	8008940 <USB_SetCurrentMode+0x84>
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2bc7      	cmp	r3, #199	@ 0xc7
 8008938:	d9f0      	bls.n	800891c <USB_SetCurrentMode+0x60>
 800893a:	e001      	b.n	8008940 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800893c:	2301      	movs	r3, #1
 800893e:	e005      	b.n	800894c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2bc8      	cmp	r3, #200	@ 0xc8
 8008944:	d101      	bne.n	800894a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008946:	2301      	movs	r3, #1
 8008948:	e000      	b.n	800894c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800894a:	2300      	movs	r3, #0
}
 800894c:	4618      	mov	r0, r3
 800894e:	3710      	adds	r7, #16
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}

08008954 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008954:	b480      	push	{r7}
 8008956:	b085      	sub	sp, #20
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800895e:	2300      	movs	r3, #0
 8008960:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	3301      	adds	r3, #1
 8008966:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800896e:	d901      	bls.n	8008974 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008970:	2303      	movs	r3, #3
 8008972:	e01b      	b.n	80089ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	691b      	ldr	r3, [r3, #16]
 8008978:	2b00      	cmp	r3, #0
 800897a:	daf2      	bge.n	8008962 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800897c:	2300      	movs	r3, #0
 800897e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	019b      	lsls	r3, r3, #6
 8008984:	f043 0220 	orr.w	r2, r3, #32
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	3301      	adds	r3, #1
 8008990:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008998:	d901      	bls.n	800899e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800899a:	2303      	movs	r3, #3
 800899c:	e006      	b.n	80089ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	691b      	ldr	r3, [r3, #16]
 80089a2:	f003 0320 	and.w	r3, r3, #32
 80089a6:	2b20      	cmp	r3, #32
 80089a8:	d0f0      	beq.n	800898c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80089aa:	2300      	movs	r3, #0
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3714      	adds	r7, #20
 80089b0:	46bd      	mov	sp, r7
 80089b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b6:	4770      	bx	lr

080089b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b085      	sub	sp, #20
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80089c0:	2300      	movs	r3, #0
 80089c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	3301      	adds	r3, #1
 80089c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80089d0:	d901      	bls.n	80089d6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80089d2:	2303      	movs	r3, #3
 80089d4:	e018      	b.n	8008a08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	691b      	ldr	r3, [r3, #16]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	daf2      	bge.n	80089c4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80089de:	2300      	movs	r3, #0
 80089e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2210      	movs	r2, #16
 80089e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	3301      	adds	r3, #1
 80089ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80089f4:	d901      	bls.n	80089fa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80089f6:	2303      	movs	r3, #3
 80089f8:	e006      	b.n	8008a08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	691b      	ldr	r3, [r3, #16]
 80089fe:	f003 0310 	and.w	r3, r3, #16
 8008a02:	2b10      	cmp	r3, #16
 8008a04:	d0f0      	beq.n	80089e8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008a06:	2300      	movs	r3, #0
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	3714      	adds	r7, #20
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr

08008a14 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b089      	sub	sp, #36	@ 0x24
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	60f8      	str	r0, [r7, #12]
 8008a1c:	60b9      	str	r1, [r7, #8]
 8008a1e:	4611      	mov	r1, r2
 8008a20:	461a      	mov	r2, r3
 8008a22:	460b      	mov	r3, r1
 8008a24:	71fb      	strb	r3, [r7, #7]
 8008a26:	4613      	mov	r3, r2
 8008a28:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008a32:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d123      	bne.n	8008a82 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008a3a:	88bb      	ldrh	r3, [r7, #4]
 8008a3c:	3303      	adds	r3, #3
 8008a3e:	089b      	lsrs	r3, r3, #2
 8008a40:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008a42:	2300      	movs	r3, #0
 8008a44:	61bb      	str	r3, [r7, #24]
 8008a46:	e018      	b.n	8008a7a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008a48:	79fb      	ldrb	r3, [r7, #7]
 8008a4a:	031a      	lsls	r2, r3, #12
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	4413      	add	r3, r2
 8008a50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008a54:	461a      	mov	r2, r3
 8008a56:	69fb      	ldr	r3, [r7, #28]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008a5c:	69fb      	ldr	r3, [r7, #28]
 8008a5e:	3301      	adds	r3, #1
 8008a60:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008a62:	69fb      	ldr	r3, [r7, #28]
 8008a64:	3301      	adds	r3, #1
 8008a66:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008a68:	69fb      	ldr	r3, [r7, #28]
 8008a6a:	3301      	adds	r3, #1
 8008a6c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008a6e:	69fb      	ldr	r3, [r7, #28]
 8008a70:	3301      	adds	r3, #1
 8008a72:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008a74:	69bb      	ldr	r3, [r7, #24]
 8008a76:	3301      	adds	r3, #1
 8008a78:	61bb      	str	r3, [r7, #24]
 8008a7a:	69ba      	ldr	r2, [r7, #24]
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	429a      	cmp	r2, r3
 8008a80:	d3e2      	bcc.n	8008a48 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008a82:	2300      	movs	r3, #0
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3724      	adds	r7, #36	@ 0x24
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8e:	4770      	bx	lr

08008a90 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b08b      	sub	sp, #44	@ 0x2c
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	60f8      	str	r0, [r7, #12]
 8008a98:	60b9      	str	r1, [r7, #8]
 8008a9a:	4613      	mov	r3, r2
 8008a9c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008aa6:	88fb      	ldrh	r3, [r7, #6]
 8008aa8:	089b      	lsrs	r3, r3, #2
 8008aaa:	b29b      	uxth	r3, r3
 8008aac:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008aae:	88fb      	ldrh	r3, [r7, #6]
 8008ab0:	f003 0303 	and.w	r3, r3, #3
 8008ab4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	623b      	str	r3, [r7, #32]
 8008aba:	e014      	b.n	8008ae6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008abc:	69bb      	ldr	r3, [r7, #24]
 8008abe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008ac2:	681a      	ldr	r2, [r3, #0]
 8008ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ac6:	601a      	str	r2, [r3, #0]
    pDest++;
 8008ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aca:	3301      	adds	r3, #1
 8008acc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ad0:	3301      	adds	r3, #1
 8008ad2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008adc:	3301      	adds	r3, #1
 8008ade:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008ae0:	6a3b      	ldr	r3, [r7, #32]
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	623b      	str	r3, [r7, #32]
 8008ae6:	6a3a      	ldr	r2, [r7, #32]
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d3e6      	bcc.n	8008abc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008aee:	8bfb      	ldrh	r3, [r7, #30]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d01e      	beq.n	8008b32 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008af4:	2300      	movs	r3, #0
 8008af6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008af8:	69bb      	ldr	r3, [r7, #24]
 8008afa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008afe:	461a      	mov	r2, r3
 8008b00:	f107 0310 	add.w	r3, r7, #16
 8008b04:	6812      	ldr	r2, [r2, #0]
 8008b06:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008b08:	693a      	ldr	r2, [r7, #16]
 8008b0a:	6a3b      	ldr	r3, [r7, #32]
 8008b0c:	b2db      	uxtb	r3, r3
 8008b0e:	00db      	lsls	r3, r3, #3
 8008b10:	fa22 f303 	lsr.w	r3, r2, r3
 8008b14:	b2da      	uxtb	r2, r3
 8008b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b18:	701a      	strb	r2, [r3, #0]
      i++;
 8008b1a:	6a3b      	ldr	r3, [r7, #32]
 8008b1c:	3301      	adds	r3, #1
 8008b1e:	623b      	str	r3, [r7, #32]
      pDest++;
 8008b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b22:	3301      	adds	r3, #1
 8008b24:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008b26:	8bfb      	ldrh	r3, [r7, #30]
 8008b28:	3b01      	subs	r3, #1
 8008b2a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008b2c:	8bfb      	ldrh	r3, [r7, #30]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d1ea      	bne.n	8008b08 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	372c      	adds	r7, #44	@ 0x2c
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr

08008b40 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b085      	sub	sp, #20
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	695b      	ldr	r3, [r3, #20]
 8008b4c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	699b      	ldr	r3, [r3, #24]
 8008b52:	68fa      	ldr	r2, [r7, #12]
 8008b54:	4013      	ands	r3, r2
 8008b56:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008b58:	68fb      	ldr	r3, [r7, #12]
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3714      	adds	r7, #20
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b64:	4770      	bx	lr

08008b66 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8008b66:	b480      	push	{r7}
 8008b68:	b085      	sub	sp, #20
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
 8008b6e:	460b      	mov	r3, r1
 8008b70:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8008b76:	78fb      	ldrb	r3, [r7, #3]
 8008b78:	015a      	lsls	r2, r3, #5
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	4413      	add	r3, r2
 8008b7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b82:	689b      	ldr	r3, [r3, #8]
 8008b84:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8008b86:	78fb      	ldrb	r3, [r7, #3]
 8008b88:	015a      	lsls	r2, r3, #5
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	4413      	add	r3, r2
 8008b8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b92:	68db      	ldr	r3, [r3, #12]
 8008b94:	68ba      	ldr	r2, [r7, #8]
 8008b96:	4013      	ands	r3, r2
 8008b98:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008b9a:	68bb      	ldr	r3, [r7, #8]
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	3714      	adds	r7, #20
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba6:	4770      	bx	lr

08008ba8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b083      	sub	sp, #12
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	695b      	ldr	r3, [r3, #20]
 8008bb4:	f003 0301 	and.w	r3, r3, #1
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	370c      	adds	r7, #12
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr

08008bc4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b085      	sub	sp, #20
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008bdc:	d901      	bls.n	8008be2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008bde:	2303      	movs	r3, #3
 8008be0:	e022      	b.n	8008c28 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	691b      	ldr	r3, [r3, #16]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	daf2      	bge.n	8008bd0 <USB_CoreReset+0xc>

  count = 10U;
 8008bea:	230a      	movs	r3, #10
 8008bec:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8008bee:	e002      	b.n	8008bf6 <USB_CoreReset+0x32>
  {
    count--;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	3b01      	subs	r3, #1
 8008bf4:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d1f9      	bne.n	8008bf0 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	691b      	ldr	r3, [r3, #16]
 8008c00:	f043 0201 	orr.w	r2, r3, #1
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008c14:	d901      	bls.n	8008c1a <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8008c16:	2303      	movs	r3, #3
 8008c18:	e006      	b.n	8008c28 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	691b      	ldr	r3, [r3, #16]
 8008c1e:	f003 0301 	and.w	r3, r3, #1
 8008c22:	2b01      	cmp	r3, #1
 8008c24:	d0f0      	beq.n	8008c08 <USB_CoreReset+0x44>

  return HAL_OK;
 8008c26:	2300      	movs	r3, #0
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3714      	adds	r7, #20
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr

08008c34 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008c34:	b084      	sub	sp, #16
 8008c36:	b580      	push	{r7, lr}
 8008c38:	b086      	sub	sp, #24
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	6078      	str	r0, [r7, #4]
 8008c3e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008c42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008c46:	2300      	movs	r3, #0
 8008c48:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008c54:	461a      	mov	r2, r3
 8008c56:	2300      	movs	r3, #0
 8008c58:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c5e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c6a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c76:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	68db      	ldr	r3, [r3, #12]
 8008c82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d119      	bne.n	8008cbe <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008c8a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c8e:	2b01      	cmp	r3, #1
 8008c90:	d10a      	bne.n	8008ca8 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	68fa      	ldr	r2, [r7, #12]
 8008c9c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008ca0:	f043 0304 	orr.w	r3, r3, #4
 8008ca4:	6013      	str	r3, [r2, #0]
 8008ca6:	e014      	b.n	8008cd2 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	68fa      	ldr	r2, [r7, #12]
 8008cb2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008cb6:	f023 0304 	bic.w	r3, r3, #4
 8008cba:	6013      	str	r3, [r2, #0]
 8008cbc:	e009      	b.n	8008cd2 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	68fa      	ldr	r2, [r7, #12]
 8008cc8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008ccc:	f023 0304 	bic.w	r3, r3, #4
 8008cd0:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008cd2:	2110      	movs	r1, #16
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f7ff fe3d 	bl	8008954 <USB_FlushTxFifo>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d001      	beq.n	8008ce4 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f7ff fe67 	bl	80089b8 <USB_FlushRxFifo>
 8008cea:	4603      	mov	r3, r0
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d001      	beq.n	8008cf4 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	613b      	str	r3, [r7, #16]
 8008cf8:	e015      	b.n	8008d26 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	015a      	lsls	r2, r3, #5
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	4413      	add	r3, r2
 8008d02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d06:	461a      	mov	r2, r3
 8008d08:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008d0c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	015a      	lsls	r2, r3, #5
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	4413      	add	r3, r2
 8008d16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	3301      	adds	r3, #1
 8008d24:	613b      	str	r3, [r7, #16]
 8008d26:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008d2a:	461a      	mov	r2, r3
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d3e3      	bcc.n	8008cfa <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2200      	movs	r2, #0
 8008d36:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008d3e:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	4a18      	ldr	r2, [pc, #96]	@ (8008da4 <USB_HostInit+0x170>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d10b      	bne.n	8008d60 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008d4e:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	4a15      	ldr	r2, [pc, #84]	@ (8008da8 <USB_HostInit+0x174>)
 8008d54:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	4a14      	ldr	r2, [pc, #80]	@ (8008dac <USB_HostInit+0x178>)
 8008d5a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8008d5e:	e009      	b.n	8008d74 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2280      	movs	r2, #128	@ 0x80
 8008d64:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	4a11      	ldr	r2, [pc, #68]	@ (8008db0 <USB_HostInit+0x17c>)
 8008d6a:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	4a11      	ldr	r2, [pc, #68]	@ (8008db4 <USB_HostInit+0x180>)
 8008d70:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008d74:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d105      	bne.n	8008d88 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	699b      	ldr	r3, [r3, #24]
 8008d80:	f043 0210 	orr.w	r2, r3, #16
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	699a      	ldr	r2, [r3, #24]
 8008d8c:	4b0a      	ldr	r3, [pc, #40]	@ (8008db8 <USB_HostInit+0x184>)
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	687a      	ldr	r2, [r7, #4]
 8008d92:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8008d94:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3718      	adds	r7, #24
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008da0:	b004      	add	sp, #16
 8008da2:	4770      	bx	lr
 8008da4:	40040000 	.word	0x40040000
 8008da8:	01000200 	.word	0x01000200
 8008dac:	00e00300 	.word	0x00e00300
 8008db0:	00600080 	.word	0x00600080
 8008db4:	004000e0 	.word	0x004000e0
 8008db8:	a3200008 	.word	0xa3200008

08008dbc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b085      	sub	sp, #20
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	460b      	mov	r3, r1
 8008dc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	68fa      	ldr	r2, [r7, #12]
 8008dd6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008dda:	f023 0303 	bic.w	r3, r3, #3
 8008dde:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008de6:	681a      	ldr	r2, [r3, #0]
 8008de8:	78fb      	ldrb	r3, [r7, #3]
 8008dea:	f003 0303 	and.w	r3, r3, #3
 8008dee:	68f9      	ldr	r1, [r7, #12]
 8008df0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008df4:	4313      	orrs	r3, r2
 8008df6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008df8:	78fb      	ldrb	r3, [r7, #3]
 8008dfa:	2b01      	cmp	r3, #1
 8008dfc:	d107      	bne.n	8008e0e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008e04:	461a      	mov	r2, r3
 8008e06:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008e0a:	6053      	str	r3, [r2, #4]
 8008e0c:	e00c      	b.n	8008e28 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8008e0e:	78fb      	ldrb	r3, [r7, #3]
 8008e10:	2b02      	cmp	r3, #2
 8008e12:	d107      	bne.n	8008e24 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008e1a:	461a      	mov	r2, r3
 8008e1c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8008e20:	6053      	str	r3, [r2, #4]
 8008e22:	e001      	b.n	8008e28 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8008e24:	2301      	movs	r3, #1
 8008e26:	e000      	b.n	8008e2a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8008e28:	2300      	movs	r3, #0
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3714      	adds	r7, #20
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e34:	4770      	bx	lr

08008e36 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8008e36:	b580      	push	{r7, lr}
 8008e38:	b084      	sub	sp, #16
 8008e3a:	af00      	add	r7, sp, #0
 8008e3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008e42:	2300      	movs	r3, #0
 8008e44:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8008e56:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	68fa      	ldr	r2, [r7, #12]
 8008e5c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008e60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008e64:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008e66:	2064      	movs	r0, #100	@ 0x64
 8008e68:	f7f9 fab4 	bl	80023d4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	68fa      	ldr	r2, [r7, #12]
 8008e70:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008e74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008e78:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008e7a:	200a      	movs	r0, #10
 8008e7c:	f7f9 faaa 	bl	80023d4 <HAL_Delay>

  return HAL_OK;
 8008e80:	2300      	movs	r3, #0
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3710      	adds	r7, #16
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}

08008e8a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008e8a:	b480      	push	{r7}
 8008e8c:	b085      	sub	sp, #20
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	6078      	str	r0, [r7, #4]
 8008e92:	460b      	mov	r3, r1
 8008e94:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8008eae:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d109      	bne.n	8008ece <USB_DriveVbus+0x44>
 8008eba:	78fb      	ldrb	r3, [r7, #3]
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	d106      	bne.n	8008ece <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	68fa      	ldr	r2, [r7, #12]
 8008ec4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008ec8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008ecc:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008ed4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ed8:	d109      	bne.n	8008eee <USB_DriveVbus+0x64>
 8008eda:	78fb      	ldrb	r3, [r7, #3]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d106      	bne.n	8008eee <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	68fa      	ldr	r2, [r7, #12]
 8008ee4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008ee8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008eec:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008eee:	2300      	movs	r3, #0
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	3714      	adds	r7, #20
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efa:	4770      	bx	lr

08008efc <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b085      	sub	sp, #20
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	0c5b      	lsrs	r3, r3, #17
 8008f1a:	f003 0303 	and.w	r3, r3, #3
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3714      	adds	r7, #20
 8008f22:	46bd      	mov	sp, r7
 8008f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f28:	4770      	bx	lr

08008f2a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8008f2a:	b480      	push	{r7}
 8008f2c:	b085      	sub	sp, #20
 8008f2e:	af00      	add	r7, sp, #0
 8008f30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008f3c:	689b      	ldr	r3, [r3, #8]
 8008f3e:	b29b      	uxth	r3, r3
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	3714      	adds	r7, #20
 8008f44:	46bd      	mov	sp, r7
 8008f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4a:	4770      	bx	lr

08008f4c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b088      	sub	sp, #32
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	4608      	mov	r0, r1
 8008f56:	4611      	mov	r1, r2
 8008f58:	461a      	mov	r2, r3
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	70fb      	strb	r3, [r7, #3]
 8008f5e:	460b      	mov	r3, r1
 8008f60:	70bb      	strb	r3, [r7, #2]
 8008f62:	4613      	mov	r3, r2
 8008f64:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008f66:	2300      	movs	r3, #0
 8008f68:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8008f6e:	78fb      	ldrb	r3, [r7, #3]
 8008f70:	015a      	lsls	r2, r3, #5
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	4413      	add	r3, r2
 8008f76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f7a:	461a      	mov	r2, r3
 8008f7c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008f80:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008f82:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008f86:	2b03      	cmp	r3, #3
 8008f88:	d87c      	bhi.n	8009084 <USB_HC_Init+0x138>
 8008f8a:	a201      	add	r2, pc, #4	@ (adr r2, 8008f90 <USB_HC_Init+0x44>)
 8008f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f90:	08008fa1 	.word	0x08008fa1
 8008f94:	08009047 	.word	0x08009047
 8008f98:	08008fa1 	.word	0x08008fa1
 8008f9c:	08009009 	.word	0x08009009
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008fa0:	78fb      	ldrb	r3, [r7, #3]
 8008fa2:	015a      	lsls	r2, r3, #5
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	4413      	add	r3, r2
 8008fa8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008fac:	461a      	mov	r2, r3
 8008fae:	f240 439d 	movw	r3, #1181	@ 0x49d
 8008fb2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008fb4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	da10      	bge.n	8008fde <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008fbc:	78fb      	ldrb	r3, [r7, #3]
 8008fbe:	015a      	lsls	r2, r3, #5
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	4413      	add	r3, r2
 8008fc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008fc8:	68db      	ldr	r3, [r3, #12]
 8008fca:	78fa      	ldrb	r2, [r7, #3]
 8008fcc:	0151      	lsls	r1, r2, #5
 8008fce:	693a      	ldr	r2, [r7, #16]
 8008fd0:	440a      	add	r2, r1
 8008fd2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008fd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008fda:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8008fdc:	e055      	b.n	800908a <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	4a6f      	ldr	r2, [pc, #444]	@ (80091a0 <USB_HC_Init+0x254>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d151      	bne.n	800908a <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8008fe6:	78fb      	ldrb	r3, [r7, #3]
 8008fe8:	015a      	lsls	r2, r3, #5
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	4413      	add	r3, r2
 8008fee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ff2:	68db      	ldr	r3, [r3, #12]
 8008ff4:	78fa      	ldrb	r2, [r7, #3]
 8008ff6:	0151      	lsls	r1, r2, #5
 8008ff8:	693a      	ldr	r2, [r7, #16]
 8008ffa:	440a      	add	r2, r1
 8008ffc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009000:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009004:	60d3      	str	r3, [r2, #12]
      break;
 8009006:	e040      	b.n	800908a <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009008:	78fb      	ldrb	r3, [r7, #3]
 800900a:	015a      	lsls	r2, r3, #5
 800900c:	693b      	ldr	r3, [r7, #16]
 800900e:	4413      	add	r3, r2
 8009010:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009014:	461a      	mov	r2, r3
 8009016:	f240 639d 	movw	r3, #1693	@ 0x69d
 800901a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800901c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009020:	2b00      	cmp	r3, #0
 8009022:	da34      	bge.n	800908e <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009024:	78fb      	ldrb	r3, [r7, #3]
 8009026:	015a      	lsls	r2, r3, #5
 8009028:	693b      	ldr	r3, [r7, #16]
 800902a:	4413      	add	r3, r2
 800902c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009030:	68db      	ldr	r3, [r3, #12]
 8009032:	78fa      	ldrb	r2, [r7, #3]
 8009034:	0151      	lsls	r1, r2, #5
 8009036:	693a      	ldr	r2, [r7, #16]
 8009038:	440a      	add	r2, r1
 800903a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800903e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009042:	60d3      	str	r3, [r2, #12]
      }

      break;
 8009044:	e023      	b.n	800908e <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009046:	78fb      	ldrb	r3, [r7, #3]
 8009048:	015a      	lsls	r2, r3, #5
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	4413      	add	r3, r2
 800904e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009052:	461a      	mov	r2, r3
 8009054:	f240 2325 	movw	r3, #549	@ 0x225
 8009058:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800905a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800905e:	2b00      	cmp	r3, #0
 8009060:	da17      	bge.n	8009092 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8009062:	78fb      	ldrb	r3, [r7, #3]
 8009064:	015a      	lsls	r2, r3, #5
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	4413      	add	r3, r2
 800906a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800906e:	68db      	ldr	r3, [r3, #12]
 8009070:	78fa      	ldrb	r2, [r7, #3]
 8009072:	0151      	lsls	r1, r2, #5
 8009074:	693a      	ldr	r2, [r7, #16]
 8009076:	440a      	add	r2, r1
 8009078:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800907c:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8009080:	60d3      	str	r3, [r2, #12]
      }
      break;
 8009082:	e006      	b.n	8009092 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8009084:	2301      	movs	r3, #1
 8009086:	77fb      	strb	r3, [r7, #31]
      break;
 8009088:	e004      	b.n	8009094 <USB_HC_Init+0x148>
      break;
 800908a:	bf00      	nop
 800908c:	e002      	b.n	8009094 <USB_HC_Init+0x148>
      break;
 800908e:	bf00      	nop
 8009090:	e000      	b.n	8009094 <USB_HC_Init+0x148>
      break;
 8009092:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8009094:	78fb      	ldrb	r3, [r7, #3]
 8009096:	015a      	lsls	r2, r3, #5
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	4413      	add	r3, r2
 800909c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090a0:	461a      	mov	r2, r3
 80090a2:	2300      	movs	r3, #0
 80090a4:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80090a6:	78fb      	ldrb	r3, [r7, #3]
 80090a8:	015a      	lsls	r2, r3, #5
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	4413      	add	r3, r2
 80090ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090b2:	68db      	ldr	r3, [r3, #12]
 80090b4:	78fa      	ldrb	r2, [r7, #3]
 80090b6:	0151      	lsls	r1, r2, #5
 80090b8:	693a      	ldr	r2, [r7, #16]
 80090ba:	440a      	add	r2, r1
 80090bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80090c0:	f043 0302 	orr.w	r3, r3, #2
 80090c4:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80090cc:	699a      	ldr	r2, [r3, #24]
 80090ce:	78fb      	ldrb	r3, [r7, #3]
 80090d0:	f003 030f 	and.w	r3, r3, #15
 80090d4:	2101      	movs	r1, #1
 80090d6:	fa01 f303 	lsl.w	r3, r1, r3
 80090da:	6939      	ldr	r1, [r7, #16]
 80090dc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80090e0:	4313      	orrs	r3, r2
 80090e2:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	699b      	ldr	r3, [r3, #24]
 80090e8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80090f0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	da03      	bge.n	8009100 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80090f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80090fc:	61bb      	str	r3, [r7, #24]
 80090fe:	e001      	b.n	8009104 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8009100:	2300      	movs	r3, #0
 8009102:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f7ff fef9 	bl	8008efc <USB_GetHostSpeed>
 800910a:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800910c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009110:	2b02      	cmp	r3, #2
 8009112:	d106      	bne.n	8009122 <USB_HC_Init+0x1d6>
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	2b02      	cmp	r3, #2
 8009118:	d003      	beq.n	8009122 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800911a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800911e:	617b      	str	r3, [r7, #20]
 8009120:	e001      	b.n	8009126 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8009122:	2300      	movs	r3, #0
 8009124:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009126:	787b      	ldrb	r3, [r7, #1]
 8009128:	059b      	lsls	r3, r3, #22
 800912a:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800912e:	78bb      	ldrb	r3, [r7, #2]
 8009130:	02db      	lsls	r3, r3, #11
 8009132:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009136:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009138:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800913c:	049b      	lsls	r3, r3, #18
 800913e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009142:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8009144:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8009146:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800914a:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800914c:	69bb      	ldr	r3, [r7, #24]
 800914e:	431a      	orrs	r2, r3
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009154:	78fa      	ldrb	r2, [r7, #3]
 8009156:	0151      	lsls	r1, r2, #5
 8009158:	693a      	ldr	r2, [r7, #16]
 800915a:	440a      	add	r2, r1
 800915c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8009160:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009164:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8009166:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800916a:	2b03      	cmp	r3, #3
 800916c:	d003      	beq.n	8009176 <USB_HC_Init+0x22a>
 800916e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009172:	2b01      	cmp	r3, #1
 8009174:	d10f      	bne.n	8009196 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8009176:	78fb      	ldrb	r3, [r7, #3]
 8009178:	015a      	lsls	r2, r3, #5
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	4413      	add	r3, r2
 800917e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	78fa      	ldrb	r2, [r7, #3]
 8009186:	0151      	lsls	r1, r2, #5
 8009188:	693a      	ldr	r2, [r7, #16]
 800918a:	440a      	add	r2, r1
 800918c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009190:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009194:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8009196:	7ffb      	ldrb	r3, [r7, #31]
}
 8009198:	4618      	mov	r0, r3
 800919a:	3720      	adds	r7, #32
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}
 80091a0:	40040000 	.word	0x40040000

080091a4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b08c      	sub	sp, #48	@ 0x30
 80091a8:	af02      	add	r7, sp, #8
 80091aa:	60f8      	str	r0, [r7, #12]
 80091ac:	60b9      	str	r1, [r7, #8]
 80091ae:	4613      	mov	r3, r2
 80091b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	785b      	ldrb	r3, [r3, #1]
 80091ba:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80091bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80091c0:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	4a5d      	ldr	r2, [pc, #372]	@ (800933c <USB_HC_StartXfer+0x198>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d12f      	bne.n	800922a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 80091ca:	79fb      	ldrb	r3, [r7, #7]
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d11c      	bne.n	800920a <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	7c9b      	ldrb	r3, [r3, #18]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d003      	beq.n	80091e0 <USB_HC_StartXfer+0x3c>
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	7c9b      	ldrb	r3, [r3, #18]
 80091dc:	2b02      	cmp	r3, #2
 80091de:	d124      	bne.n	800922a <USB_HC_StartXfer+0x86>
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	799b      	ldrb	r3, [r3, #6]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d120      	bne.n	800922a <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80091e8:	69fb      	ldr	r3, [r7, #28]
 80091ea:	015a      	lsls	r2, r3, #5
 80091ec:	6a3b      	ldr	r3, [r7, #32]
 80091ee:	4413      	add	r3, r2
 80091f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80091f4:	68db      	ldr	r3, [r3, #12]
 80091f6:	69fa      	ldr	r2, [r7, #28]
 80091f8:	0151      	lsls	r1, r2, #5
 80091fa:	6a3a      	ldr	r2, [r7, #32]
 80091fc:	440a      	add	r2, r1
 80091fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009202:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009206:	60d3      	str	r3, [r2, #12]
 8009208:	e00f      	b.n	800922a <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	791b      	ldrb	r3, [r3, #4]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d10b      	bne.n	800922a <USB_HC_StartXfer+0x86>
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	795b      	ldrb	r3, [r3, #5]
 8009216:	2b01      	cmp	r3, #1
 8009218:	d107      	bne.n	800922a <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	785b      	ldrb	r3, [r3, #1]
 800921e:	4619      	mov	r1, r3
 8009220:	68f8      	ldr	r0, [r7, #12]
 8009222:	f000 fb6b 	bl	80098fc <USB_DoPing>
        return HAL_OK;
 8009226:	2300      	movs	r3, #0
 8009228:	e232      	b.n	8009690 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	799b      	ldrb	r3, [r3, #6]
 800922e:	2b01      	cmp	r3, #1
 8009230:	d158      	bne.n	80092e4 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8009232:	2301      	movs	r3, #1
 8009234:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	78db      	ldrb	r3, [r3, #3]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d007      	beq.n	800924e <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800923e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009240:	68ba      	ldr	r2, [r7, #8]
 8009242:	8a92      	ldrh	r2, [r2, #20]
 8009244:	fb03 f202 	mul.w	r2, r3, r2
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	61da      	str	r2, [r3, #28]
 800924c:	e07c      	b.n	8009348 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	7c9b      	ldrb	r3, [r3, #18]
 8009252:	2b01      	cmp	r3, #1
 8009254:	d130      	bne.n	80092b8 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	6a1b      	ldr	r3, [r3, #32]
 800925a:	2bbc      	cmp	r3, #188	@ 0xbc
 800925c:	d918      	bls.n	8009290 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	8a9b      	ldrh	r3, [r3, #20]
 8009262:	461a      	mov	r2, r3
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	69da      	ldr	r2, [r3, #28]
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	68db      	ldr	r3, [r3, #12]
 8009274:	2b01      	cmp	r3, #1
 8009276:	d003      	beq.n	8009280 <USB_HC_StartXfer+0xdc>
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	68db      	ldr	r3, [r3, #12]
 800927c:	2b02      	cmp	r3, #2
 800927e:	d103      	bne.n	8009288 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	2202      	movs	r2, #2
 8009284:	60da      	str	r2, [r3, #12]
 8009286:	e05f      	b.n	8009348 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	2201      	movs	r2, #1
 800928c:	60da      	str	r2, [r3, #12]
 800928e:	e05b      	b.n	8009348 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	6a1a      	ldr	r2, [r3, #32]
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	68db      	ldr	r3, [r3, #12]
 800929c:	2b01      	cmp	r3, #1
 800929e:	d007      	beq.n	80092b0 <USB_HC_StartXfer+0x10c>
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	68db      	ldr	r3, [r3, #12]
 80092a4:	2b02      	cmp	r3, #2
 80092a6:	d003      	beq.n	80092b0 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	2204      	movs	r2, #4
 80092ac:	60da      	str	r2, [r3, #12]
 80092ae:	e04b      	b.n	8009348 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	2203      	movs	r2, #3
 80092b4:	60da      	str	r2, [r3, #12]
 80092b6:	e047      	b.n	8009348 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80092b8:	79fb      	ldrb	r3, [r7, #7]
 80092ba:	2b01      	cmp	r3, #1
 80092bc:	d10d      	bne.n	80092da <USB_HC_StartXfer+0x136>
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	6a1b      	ldr	r3, [r3, #32]
 80092c2:	68ba      	ldr	r2, [r7, #8]
 80092c4:	8a92      	ldrh	r2, [r2, #20]
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d907      	bls.n	80092da <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80092ca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80092cc:	68ba      	ldr	r2, [r7, #8]
 80092ce:	8a92      	ldrh	r2, [r2, #20]
 80092d0:	fb03 f202 	mul.w	r2, r3, r2
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	61da      	str	r2, [r3, #28]
 80092d8:	e036      	b.n	8009348 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	6a1a      	ldr	r2, [r3, #32]
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	61da      	str	r2, [r3, #28]
 80092e2:	e031      	b.n	8009348 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	6a1b      	ldr	r3, [r3, #32]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d018      	beq.n	800931e <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	6a1b      	ldr	r3, [r3, #32]
 80092f0:	68ba      	ldr	r2, [r7, #8]
 80092f2:	8a92      	ldrh	r2, [r2, #20]
 80092f4:	4413      	add	r3, r2
 80092f6:	3b01      	subs	r3, #1
 80092f8:	68ba      	ldr	r2, [r7, #8]
 80092fa:	8a92      	ldrh	r2, [r2, #20]
 80092fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8009300:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8009302:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8009304:	8b7b      	ldrh	r3, [r7, #26]
 8009306:	429a      	cmp	r2, r3
 8009308:	d90b      	bls.n	8009322 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800930a:	8b7b      	ldrh	r3, [r7, #26]
 800930c:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800930e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009310:	68ba      	ldr	r2, [r7, #8]
 8009312:	8a92      	ldrh	r2, [r2, #20]
 8009314:	fb03 f202 	mul.w	r2, r3, r2
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	61da      	str	r2, [r3, #28]
 800931c:	e001      	b.n	8009322 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800931e:	2301      	movs	r3, #1
 8009320:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	78db      	ldrb	r3, [r3, #3]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d00a      	beq.n	8009340 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800932a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800932c:	68ba      	ldr	r2, [r7, #8]
 800932e:	8a92      	ldrh	r2, [r2, #20]
 8009330:	fb03 f202 	mul.w	r2, r3, r2
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	61da      	str	r2, [r3, #28]
 8009338:	e006      	b.n	8009348 <USB_HC_StartXfer+0x1a4>
 800933a:	bf00      	nop
 800933c:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	6a1a      	ldr	r2, [r3, #32]
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	69db      	ldr	r3, [r3, #28]
 800934c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009350:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009352:	04d9      	lsls	r1, r3, #19
 8009354:	4ba3      	ldr	r3, [pc, #652]	@ (80095e4 <USB_HC_StartXfer+0x440>)
 8009356:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009358:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	7d9b      	ldrb	r3, [r3, #22]
 800935e:	075b      	lsls	r3, r3, #29
 8009360:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009364:	69f9      	ldr	r1, [r7, #28]
 8009366:	0148      	lsls	r0, r1, #5
 8009368:	6a39      	ldr	r1, [r7, #32]
 800936a:	4401      	add	r1, r0
 800936c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009370:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009372:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8009374:	79fb      	ldrb	r3, [r7, #7]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d009      	beq.n	800938e <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	6999      	ldr	r1, [r3, #24]
 800937e:	69fb      	ldr	r3, [r7, #28]
 8009380:	015a      	lsls	r2, r3, #5
 8009382:	6a3b      	ldr	r3, [r7, #32]
 8009384:	4413      	add	r3, r2
 8009386:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800938a:	460a      	mov	r2, r1
 800938c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800938e:	6a3b      	ldr	r3, [r7, #32]
 8009390:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009394:	689b      	ldr	r3, [r3, #8]
 8009396:	f003 0301 	and.w	r3, r3, #1
 800939a:	2b00      	cmp	r3, #0
 800939c:	bf0c      	ite	eq
 800939e:	2301      	moveq	r3, #1
 80093a0:	2300      	movne	r3, #0
 80093a2:	b2db      	uxtb	r3, r3
 80093a4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80093a6:	69fb      	ldr	r3, [r7, #28]
 80093a8:	015a      	lsls	r2, r3, #5
 80093aa:	6a3b      	ldr	r3, [r7, #32]
 80093ac:	4413      	add	r3, r2
 80093ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	69fa      	ldr	r2, [r7, #28]
 80093b6:	0151      	lsls	r1, r2, #5
 80093b8:	6a3a      	ldr	r2, [r7, #32]
 80093ba:	440a      	add	r2, r1
 80093bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80093c0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80093c4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80093c6:	69fb      	ldr	r3, [r7, #28]
 80093c8:	015a      	lsls	r2, r3, #5
 80093ca:	6a3b      	ldr	r3, [r7, #32]
 80093cc:	4413      	add	r3, r2
 80093ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80093d2:	681a      	ldr	r2, [r3, #0]
 80093d4:	7e7b      	ldrb	r3, [r7, #25]
 80093d6:	075b      	lsls	r3, r3, #29
 80093d8:	69f9      	ldr	r1, [r7, #28]
 80093da:	0148      	lsls	r0, r1, #5
 80093dc:	6a39      	ldr	r1, [r7, #32]
 80093de:	4401      	add	r1, r0
 80093e0:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 80093e4:	4313      	orrs	r3, r2
 80093e6:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	799b      	ldrb	r3, [r3, #6]
 80093ec:	2b01      	cmp	r3, #1
 80093ee:	f040 80c3 	bne.w	8009578 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	7c5b      	ldrb	r3, [r3, #17]
 80093f6:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80093f8:	68ba      	ldr	r2, [r7, #8]
 80093fa:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80093fc:	4313      	orrs	r3, r2
 80093fe:	69fa      	ldr	r2, [r7, #28]
 8009400:	0151      	lsls	r1, r2, #5
 8009402:	6a3a      	ldr	r2, [r7, #32]
 8009404:	440a      	add	r2, r1
 8009406:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800940a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800940e:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8009410:	69fb      	ldr	r3, [r7, #28]
 8009412:	015a      	lsls	r2, r3, #5
 8009414:	6a3b      	ldr	r3, [r7, #32]
 8009416:	4413      	add	r3, r2
 8009418:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800941c:	68db      	ldr	r3, [r3, #12]
 800941e:	69fa      	ldr	r2, [r7, #28]
 8009420:	0151      	lsls	r1, r2, #5
 8009422:	6a3a      	ldr	r2, [r7, #32]
 8009424:	440a      	add	r2, r1
 8009426:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800942a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800942e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	79db      	ldrb	r3, [r3, #7]
 8009434:	2b01      	cmp	r3, #1
 8009436:	d123      	bne.n	8009480 <USB_HC_StartXfer+0x2dc>
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	78db      	ldrb	r3, [r3, #3]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d11f      	bne.n	8009480 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8009440:	69fb      	ldr	r3, [r7, #28]
 8009442:	015a      	lsls	r2, r3, #5
 8009444:	6a3b      	ldr	r3, [r7, #32]
 8009446:	4413      	add	r3, r2
 8009448:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800944c:	685b      	ldr	r3, [r3, #4]
 800944e:	69fa      	ldr	r2, [r7, #28]
 8009450:	0151      	lsls	r1, r2, #5
 8009452:	6a3a      	ldr	r2, [r7, #32]
 8009454:	440a      	add	r2, r1
 8009456:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800945a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800945e:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8009460:	69fb      	ldr	r3, [r7, #28]
 8009462:	015a      	lsls	r2, r3, #5
 8009464:	6a3b      	ldr	r3, [r7, #32]
 8009466:	4413      	add	r3, r2
 8009468:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800946c:	68db      	ldr	r3, [r3, #12]
 800946e:	69fa      	ldr	r2, [r7, #28]
 8009470:	0151      	lsls	r1, r2, #5
 8009472:	6a3a      	ldr	r2, [r7, #32]
 8009474:	440a      	add	r2, r1
 8009476:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800947a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800947e:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	7c9b      	ldrb	r3, [r3, #18]
 8009484:	2b01      	cmp	r3, #1
 8009486:	d003      	beq.n	8009490 <USB_HC_StartXfer+0x2ec>
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	7c9b      	ldrb	r3, [r3, #18]
 800948c:	2b03      	cmp	r3, #3
 800948e:	d117      	bne.n	80094c0 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8009494:	2b01      	cmp	r3, #1
 8009496:	d113      	bne.n	80094c0 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	78db      	ldrb	r3, [r3, #3]
 800949c:	2b01      	cmp	r3, #1
 800949e:	d10f      	bne.n	80094c0 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80094a0:	69fb      	ldr	r3, [r7, #28]
 80094a2:	015a      	lsls	r2, r3, #5
 80094a4:	6a3b      	ldr	r3, [r7, #32]
 80094a6:	4413      	add	r3, r2
 80094a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80094ac:	685b      	ldr	r3, [r3, #4]
 80094ae:	69fa      	ldr	r2, [r7, #28]
 80094b0:	0151      	lsls	r1, r2, #5
 80094b2:	6a3a      	ldr	r2, [r7, #32]
 80094b4:	440a      	add	r2, r1
 80094b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80094ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80094be:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	7c9b      	ldrb	r3, [r3, #18]
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	d162      	bne.n	800958e <USB_HC_StartXfer+0x3ea>
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	78db      	ldrb	r3, [r3, #3]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d15e      	bne.n	800958e <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	68db      	ldr	r3, [r3, #12]
 80094d4:	3b01      	subs	r3, #1
 80094d6:	2b03      	cmp	r3, #3
 80094d8:	d858      	bhi.n	800958c <USB_HC_StartXfer+0x3e8>
 80094da:	a201      	add	r2, pc, #4	@ (adr r2, 80094e0 <USB_HC_StartXfer+0x33c>)
 80094dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094e0:	080094f1 	.word	0x080094f1
 80094e4:	08009513 	.word	0x08009513
 80094e8:	08009535 	.word	0x08009535
 80094ec:	08009557 	.word	0x08009557
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 80094f0:	69fb      	ldr	r3, [r7, #28]
 80094f2:	015a      	lsls	r2, r3, #5
 80094f4:	6a3b      	ldr	r3, [r7, #32]
 80094f6:	4413      	add	r3, r2
 80094f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80094fc:	685b      	ldr	r3, [r3, #4]
 80094fe:	69fa      	ldr	r2, [r7, #28]
 8009500:	0151      	lsls	r1, r2, #5
 8009502:	6a3a      	ldr	r2, [r7, #32]
 8009504:	440a      	add	r2, r1
 8009506:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800950a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800950e:	6053      	str	r3, [r2, #4]
          break;
 8009510:	e03d      	b.n	800958e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8009512:	69fb      	ldr	r3, [r7, #28]
 8009514:	015a      	lsls	r2, r3, #5
 8009516:	6a3b      	ldr	r3, [r7, #32]
 8009518:	4413      	add	r3, r2
 800951a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800951e:	685b      	ldr	r3, [r3, #4]
 8009520:	69fa      	ldr	r2, [r7, #28]
 8009522:	0151      	lsls	r1, r2, #5
 8009524:	6a3a      	ldr	r2, [r7, #32]
 8009526:	440a      	add	r2, r1
 8009528:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800952c:	f043 030e 	orr.w	r3, r3, #14
 8009530:	6053      	str	r3, [r2, #4]
          break;
 8009532:	e02c      	b.n	800958e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8009534:	69fb      	ldr	r3, [r7, #28]
 8009536:	015a      	lsls	r2, r3, #5
 8009538:	6a3b      	ldr	r3, [r7, #32]
 800953a:	4413      	add	r3, r2
 800953c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009540:	685b      	ldr	r3, [r3, #4]
 8009542:	69fa      	ldr	r2, [r7, #28]
 8009544:	0151      	lsls	r1, r2, #5
 8009546:	6a3a      	ldr	r2, [r7, #32]
 8009548:	440a      	add	r2, r1
 800954a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800954e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009552:	6053      	str	r3, [r2, #4]
          break;
 8009554:	e01b      	b.n	800958e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8009556:	69fb      	ldr	r3, [r7, #28]
 8009558:	015a      	lsls	r2, r3, #5
 800955a:	6a3b      	ldr	r3, [r7, #32]
 800955c:	4413      	add	r3, r2
 800955e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	69fa      	ldr	r2, [r7, #28]
 8009566:	0151      	lsls	r1, r2, #5
 8009568:	6a3a      	ldr	r2, [r7, #32]
 800956a:	440a      	add	r2, r1
 800956c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009570:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009574:	6053      	str	r3, [r2, #4]
          break;
 8009576:	e00a      	b.n	800958e <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8009578:	69fb      	ldr	r3, [r7, #28]
 800957a:	015a      	lsls	r2, r3, #5
 800957c:	6a3b      	ldr	r3, [r7, #32]
 800957e:	4413      	add	r3, r2
 8009580:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009584:	461a      	mov	r2, r3
 8009586:	2300      	movs	r3, #0
 8009588:	6053      	str	r3, [r2, #4]
 800958a:	e000      	b.n	800958e <USB_HC_StartXfer+0x3ea>
          break;
 800958c:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800958e:	69fb      	ldr	r3, [r7, #28]
 8009590:	015a      	lsls	r2, r3, #5
 8009592:	6a3b      	ldr	r3, [r7, #32]
 8009594:	4413      	add	r3, r2
 8009596:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80095a4:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	78db      	ldrb	r3, [r3, #3]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d004      	beq.n	80095b8 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80095ae:	693b      	ldr	r3, [r7, #16]
 80095b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80095b4:	613b      	str	r3, [r7, #16]
 80095b6:	e003      	b.n	80095c0 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80095be:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80095c6:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80095c8:	69fb      	ldr	r3, [r7, #28]
 80095ca:	015a      	lsls	r2, r3, #5
 80095cc:	6a3b      	ldr	r3, [r7, #32]
 80095ce:	4413      	add	r3, r2
 80095d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80095d4:	461a      	mov	r2, r3
 80095d6:	693b      	ldr	r3, [r7, #16]
 80095d8:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80095da:	79fb      	ldrb	r3, [r7, #7]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d003      	beq.n	80095e8 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 80095e0:	2300      	movs	r3, #0
 80095e2:	e055      	b.n	8009690 <USB_HC_StartXfer+0x4ec>
 80095e4:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	78db      	ldrb	r3, [r3, #3]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d14e      	bne.n	800968e <USB_HC_StartXfer+0x4ea>
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	6a1b      	ldr	r3, [r3, #32]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d04a      	beq.n	800968e <USB_HC_StartXfer+0x4ea>
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	79db      	ldrb	r3, [r3, #7]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d146      	bne.n	800968e <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	7c9b      	ldrb	r3, [r3, #18]
 8009604:	2b03      	cmp	r3, #3
 8009606:	d831      	bhi.n	800966c <USB_HC_StartXfer+0x4c8>
 8009608:	a201      	add	r2, pc, #4	@ (adr r2, 8009610 <USB_HC_StartXfer+0x46c>)
 800960a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800960e:	bf00      	nop
 8009610:	08009621 	.word	0x08009621
 8009614:	08009645 	.word	0x08009645
 8009618:	08009621 	.word	0x08009621
 800961c:	08009645 	.word	0x08009645
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	6a1b      	ldr	r3, [r3, #32]
 8009624:	3303      	adds	r3, #3
 8009626:	089b      	lsrs	r3, r3, #2
 8009628:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800962a:	8afa      	ldrh	r2, [r7, #22]
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009630:	b29b      	uxth	r3, r3
 8009632:	429a      	cmp	r2, r3
 8009634:	d91c      	bls.n	8009670 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	699b      	ldr	r3, [r3, #24]
 800963a:	f043 0220 	orr.w	r2, r3, #32
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	619a      	str	r2, [r3, #24]
        }
        break;
 8009642:	e015      	b.n	8009670 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	6a1b      	ldr	r3, [r3, #32]
 8009648:	3303      	adds	r3, #3
 800964a:	089b      	lsrs	r3, r3, #2
 800964c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800964e:	8afa      	ldrh	r2, [r7, #22]
 8009650:	6a3b      	ldr	r3, [r7, #32]
 8009652:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009656:	691b      	ldr	r3, [r3, #16]
 8009658:	b29b      	uxth	r3, r3
 800965a:	429a      	cmp	r2, r3
 800965c:	d90a      	bls.n	8009674 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	699b      	ldr	r3, [r3, #24]
 8009662:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	619a      	str	r2, [r3, #24]
        }
        break;
 800966a:	e003      	b.n	8009674 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800966c:	bf00      	nop
 800966e:	e002      	b.n	8009676 <USB_HC_StartXfer+0x4d2>
        break;
 8009670:	bf00      	nop
 8009672:	e000      	b.n	8009676 <USB_HC_StartXfer+0x4d2>
        break;
 8009674:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	6999      	ldr	r1, [r3, #24]
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	785a      	ldrb	r2, [r3, #1]
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	6a1b      	ldr	r3, [r3, #32]
 8009682:	b29b      	uxth	r3, r3
 8009684:	2000      	movs	r0, #0
 8009686:	9000      	str	r0, [sp, #0]
 8009688:	68f8      	ldr	r0, [r7, #12]
 800968a:	f7ff f9c3 	bl	8008a14 <USB_WritePacket>
  }

  return HAL_OK;
 800968e:	2300      	movs	r3, #0
}
 8009690:	4618      	mov	r0, r3
 8009692:	3728      	adds	r7, #40	@ 0x28
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}

08009698 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009698:	b480      	push	{r7}
 800969a:	b085      	sub	sp, #20
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80096aa:	695b      	ldr	r3, [r3, #20]
 80096ac:	b29b      	uxth	r3, r3
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3714      	adds	r7, #20
 80096b2:	46bd      	mov	sp, r7
 80096b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b8:	4770      	bx	lr

080096ba <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80096ba:	b480      	push	{r7}
 80096bc:	b089      	sub	sp, #36	@ 0x24
 80096be:	af00      	add	r7, sp, #0
 80096c0:	6078      	str	r0, [r7, #4]
 80096c2:	460b      	mov	r3, r1
 80096c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80096ca:	78fb      	ldrb	r3, [r7, #3]
 80096cc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80096ce:	2300      	movs	r3, #0
 80096d0:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80096d2:	69bb      	ldr	r3, [r7, #24]
 80096d4:	015a      	lsls	r2, r3, #5
 80096d6:	69fb      	ldr	r3, [r7, #28]
 80096d8:	4413      	add	r3, r2
 80096da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	0c9b      	lsrs	r3, r3, #18
 80096e2:	f003 0303 	and.w	r3, r3, #3
 80096e6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80096e8:	69bb      	ldr	r3, [r7, #24]
 80096ea:	015a      	lsls	r2, r3, #5
 80096ec:	69fb      	ldr	r3, [r7, #28]
 80096ee:	4413      	add	r3, r2
 80096f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	0fdb      	lsrs	r3, r3, #31
 80096f8:	f003 0301 	and.w	r3, r3, #1
 80096fc:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80096fe:	69bb      	ldr	r3, [r7, #24]
 8009700:	015a      	lsls	r2, r3, #5
 8009702:	69fb      	ldr	r3, [r7, #28]
 8009704:	4413      	add	r3, r2
 8009706:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800970a:	685b      	ldr	r3, [r3, #4]
 800970c:	0fdb      	lsrs	r3, r3, #31
 800970e:	f003 0301 	and.w	r3, r3, #1
 8009712:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	689b      	ldr	r3, [r3, #8]
 8009718:	f003 0320 	and.w	r3, r3, #32
 800971c:	2b20      	cmp	r3, #32
 800971e:	d10d      	bne.n	800973c <USB_HC_Halt+0x82>
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d10a      	bne.n	800973c <USB_HC_Halt+0x82>
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d005      	beq.n	8009738 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	2b01      	cmp	r3, #1
 8009730:	d002      	beq.n	8009738 <USB_HC_Halt+0x7e>
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	2b03      	cmp	r3, #3
 8009736:	d101      	bne.n	800973c <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8009738:	2300      	movs	r3, #0
 800973a:	e0d8      	b.n	80098ee <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800973c:	697b      	ldr	r3, [r7, #20]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d002      	beq.n	8009748 <USB_HC_Halt+0x8e>
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	2b02      	cmp	r3, #2
 8009746:	d173      	bne.n	8009830 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009748:	69bb      	ldr	r3, [r7, #24]
 800974a:	015a      	lsls	r2, r3, #5
 800974c:	69fb      	ldr	r3, [r7, #28]
 800974e:	4413      	add	r3, r2
 8009750:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	69ba      	ldr	r2, [r7, #24]
 8009758:	0151      	lsls	r1, r2, #5
 800975a:	69fa      	ldr	r2, [r7, #28]
 800975c:	440a      	add	r2, r1
 800975e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009762:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009766:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	689b      	ldr	r3, [r3, #8]
 800976c:	f003 0320 	and.w	r3, r3, #32
 8009770:	2b00      	cmp	r3, #0
 8009772:	d14a      	bne.n	800980a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009778:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800977c:	2b00      	cmp	r3, #0
 800977e:	d133      	bne.n	80097e8 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009780:	69bb      	ldr	r3, [r7, #24]
 8009782:	015a      	lsls	r2, r3, #5
 8009784:	69fb      	ldr	r3, [r7, #28]
 8009786:	4413      	add	r3, r2
 8009788:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	69ba      	ldr	r2, [r7, #24]
 8009790:	0151      	lsls	r1, r2, #5
 8009792:	69fa      	ldr	r2, [r7, #28]
 8009794:	440a      	add	r2, r1
 8009796:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800979a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800979e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80097a0:	69bb      	ldr	r3, [r7, #24]
 80097a2:	015a      	lsls	r2, r3, #5
 80097a4:	69fb      	ldr	r3, [r7, #28]
 80097a6:	4413      	add	r3, r2
 80097a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	69ba      	ldr	r2, [r7, #24]
 80097b0:	0151      	lsls	r1, r2, #5
 80097b2:	69fa      	ldr	r2, [r7, #28]
 80097b4:	440a      	add	r2, r1
 80097b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80097ba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80097be:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	3301      	adds	r3, #1
 80097c4:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80097cc:	d82e      	bhi.n	800982c <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80097ce:	69bb      	ldr	r3, [r7, #24]
 80097d0:	015a      	lsls	r2, r3, #5
 80097d2:	69fb      	ldr	r3, [r7, #28]
 80097d4:	4413      	add	r3, r2
 80097d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80097e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80097e4:	d0ec      	beq.n	80097c0 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80097e6:	e081      	b.n	80098ec <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80097e8:	69bb      	ldr	r3, [r7, #24]
 80097ea:	015a      	lsls	r2, r3, #5
 80097ec:	69fb      	ldr	r3, [r7, #28]
 80097ee:	4413      	add	r3, r2
 80097f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	69ba      	ldr	r2, [r7, #24]
 80097f8:	0151      	lsls	r1, r2, #5
 80097fa:	69fa      	ldr	r2, [r7, #28]
 80097fc:	440a      	add	r2, r1
 80097fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009802:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009806:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009808:	e070      	b.n	80098ec <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800980a:	69bb      	ldr	r3, [r7, #24]
 800980c:	015a      	lsls	r2, r3, #5
 800980e:	69fb      	ldr	r3, [r7, #28]
 8009810:	4413      	add	r3, r2
 8009812:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	69ba      	ldr	r2, [r7, #24]
 800981a:	0151      	lsls	r1, r2, #5
 800981c:	69fa      	ldr	r2, [r7, #28]
 800981e:	440a      	add	r2, r1
 8009820:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009824:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009828:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800982a:	e05f      	b.n	80098ec <USB_HC_Halt+0x232>
            break;
 800982c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800982e:	e05d      	b.n	80098ec <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009830:	69bb      	ldr	r3, [r7, #24]
 8009832:	015a      	lsls	r2, r3, #5
 8009834:	69fb      	ldr	r3, [r7, #28]
 8009836:	4413      	add	r3, r2
 8009838:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	69ba      	ldr	r2, [r7, #24]
 8009840:	0151      	lsls	r1, r2, #5
 8009842:	69fa      	ldr	r2, [r7, #28]
 8009844:	440a      	add	r2, r1
 8009846:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800984a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800984e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009850:	69fb      	ldr	r3, [r7, #28]
 8009852:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009856:	691b      	ldr	r3, [r3, #16]
 8009858:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800985c:	2b00      	cmp	r3, #0
 800985e:	d133      	bne.n	80098c8 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009860:	69bb      	ldr	r3, [r7, #24]
 8009862:	015a      	lsls	r2, r3, #5
 8009864:	69fb      	ldr	r3, [r7, #28]
 8009866:	4413      	add	r3, r2
 8009868:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	69ba      	ldr	r2, [r7, #24]
 8009870:	0151      	lsls	r1, r2, #5
 8009872:	69fa      	ldr	r2, [r7, #28]
 8009874:	440a      	add	r2, r1
 8009876:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800987a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800987e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009880:	69bb      	ldr	r3, [r7, #24]
 8009882:	015a      	lsls	r2, r3, #5
 8009884:	69fb      	ldr	r3, [r7, #28]
 8009886:	4413      	add	r3, r2
 8009888:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	69ba      	ldr	r2, [r7, #24]
 8009890:	0151      	lsls	r1, r2, #5
 8009892:	69fa      	ldr	r2, [r7, #28]
 8009894:	440a      	add	r2, r1
 8009896:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800989a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800989e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	3301      	adds	r3, #1
 80098a4:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80098ac:	d81d      	bhi.n	80098ea <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80098ae:	69bb      	ldr	r3, [r7, #24]
 80098b0:	015a      	lsls	r2, r3, #5
 80098b2:	69fb      	ldr	r3, [r7, #28]
 80098b4:	4413      	add	r3, r2
 80098b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80098c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80098c4:	d0ec      	beq.n	80098a0 <USB_HC_Halt+0x1e6>
 80098c6:	e011      	b.n	80098ec <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80098c8:	69bb      	ldr	r3, [r7, #24]
 80098ca:	015a      	lsls	r2, r3, #5
 80098cc:	69fb      	ldr	r3, [r7, #28]
 80098ce:	4413      	add	r3, r2
 80098d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	69ba      	ldr	r2, [r7, #24]
 80098d8:	0151      	lsls	r1, r2, #5
 80098da:	69fa      	ldr	r2, [r7, #28]
 80098dc:	440a      	add	r2, r1
 80098de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80098e2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80098e6:	6013      	str	r3, [r2, #0]
 80098e8:	e000      	b.n	80098ec <USB_HC_Halt+0x232>
          break;
 80098ea:	bf00      	nop
    }
  }

  return HAL_OK;
 80098ec:	2300      	movs	r3, #0
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3724      	adds	r7, #36	@ 0x24
 80098f2:	46bd      	mov	sp, r7
 80098f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f8:	4770      	bx	lr
	...

080098fc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80098fc:	b480      	push	{r7}
 80098fe:	b087      	sub	sp, #28
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
 8009904:	460b      	mov	r3, r1
 8009906:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800990c:	78fb      	ldrb	r3, [r7, #3]
 800990e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8009910:	2301      	movs	r3, #1
 8009912:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	04da      	lsls	r2, r3, #19
 8009918:	4b15      	ldr	r3, [pc, #84]	@ (8009970 <USB_DoPing+0x74>)
 800991a:	4013      	ands	r3, r2
 800991c:	693a      	ldr	r2, [r7, #16]
 800991e:	0151      	lsls	r1, r2, #5
 8009920:	697a      	ldr	r2, [r7, #20]
 8009922:	440a      	add	r2, r1
 8009924:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009928:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800992c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	015a      	lsls	r2, r3, #5
 8009932:	697b      	ldr	r3, [r7, #20]
 8009934:	4413      	add	r3, r2
 8009936:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009944:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800994c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800994e:	693b      	ldr	r3, [r7, #16]
 8009950:	015a      	lsls	r2, r3, #5
 8009952:	697b      	ldr	r3, [r7, #20]
 8009954:	4413      	add	r3, r2
 8009956:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800995a:	461a      	mov	r2, r3
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009960:	2300      	movs	r3, #0
}
 8009962:	4618      	mov	r0, r3
 8009964:	371c      	adds	r7, #28
 8009966:	46bd      	mov	sp, r7
 8009968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996c:	4770      	bx	lr
 800996e:	bf00      	nop
 8009970:	1ff80000 	.word	0x1ff80000

08009974 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b088      	sub	sp, #32
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800997c:	2300      	movs	r3, #0
 800997e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8009984:	2300      	movs	r3, #0
 8009986:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f7fe ff86 	bl	800889a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800998e:	2110      	movs	r1, #16
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f7fe ffdf 	bl	8008954 <USB_FlushTxFifo>
 8009996:	4603      	mov	r3, r0
 8009998:	2b00      	cmp	r3, #0
 800999a:	d001      	beq.n	80099a0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800999c:	2301      	movs	r3, #1
 800999e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f7ff f809 	bl	80089b8 <USB_FlushRxFifo>
 80099a6:	4603      	mov	r3, r0
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d001      	beq.n	80099b0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80099ac:	2301      	movs	r3, #1
 80099ae:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80099b0:	2300      	movs	r3, #0
 80099b2:	61bb      	str	r3, [r7, #24]
 80099b4:	e01f      	b.n	80099f6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80099b6:	69bb      	ldr	r3, [r7, #24]
 80099b8:	015a      	lsls	r2, r3, #5
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	4413      	add	r3, r2
 80099be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80099c6:	693b      	ldr	r3, [r7, #16]
 80099c8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80099cc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80099ce:	693b      	ldr	r3, [r7, #16]
 80099d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80099d4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80099d6:	693b      	ldr	r3, [r7, #16]
 80099d8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80099dc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80099de:	69bb      	ldr	r3, [r7, #24]
 80099e0:	015a      	lsls	r2, r3, #5
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	4413      	add	r3, r2
 80099e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80099ea:	461a      	mov	r2, r3
 80099ec:	693b      	ldr	r3, [r7, #16]
 80099ee:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80099f0:	69bb      	ldr	r3, [r7, #24]
 80099f2:	3301      	adds	r3, #1
 80099f4:	61bb      	str	r3, [r7, #24]
 80099f6:	69bb      	ldr	r3, [r7, #24]
 80099f8:	2b0f      	cmp	r3, #15
 80099fa:	d9dc      	bls.n	80099b6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80099fc:	2300      	movs	r3, #0
 80099fe:	61bb      	str	r3, [r7, #24]
 8009a00:	e034      	b.n	8009a6c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8009a02:	69bb      	ldr	r3, [r7, #24]
 8009a04:	015a      	lsls	r2, r3, #5
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	4413      	add	r3, r2
 8009a0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009a18:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009a20:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009a22:	693b      	ldr	r3, [r7, #16]
 8009a24:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009a28:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009a2a:	69bb      	ldr	r3, [r7, #24]
 8009a2c:	015a      	lsls	r2, r3, #5
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	4413      	add	r3, r2
 8009a32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a36:	461a      	mov	r2, r3
 8009a38:	693b      	ldr	r3, [r7, #16]
 8009a3a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	3301      	adds	r3, #1
 8009a40:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009a48:	d80c      	bhi.n	8009a64 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009a4a:	69bb      	ldr	r3, [r7, #24]
 8009a4c:	015a      	lsls	r2, r3, #5
 8009a4e:	697b      	ldr	r3, [r7, #20]
 8009a50:	4413      	add	r3, r2
 8009a52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009a5c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009a60:	d0ec      	beq.n	8009a3c <USB_StopHost+0xc8>
 8009a62:	e000      	b.n	8009a66 <USB_StopHost+0xf2>
        break;
 8009a64:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009a66:	69bb      	ldr	r3, [r7, #24]
 8009a68:	3301      	adds	r3, #1
 8009a6a:	61bb      	str	r3, [r7, #24]
 8009a6c:	69bb      	ldr	r3, [r7, #24]
 8009a6e:	2b0f      	cmp	r3, #15
 8009a70:	d9c7      	bls.n	8009a02 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8009a72:	697b      	ldr	r3, [r7, #20]
 8009a74:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009a78:	461a      	mov	r2, r3
 8009a7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009a7e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009a86:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f7fe fef5 	bl	8008878 <USB_EnableGlobalInt>

  return ret;
 8009a8e:	7ffb      	ldrb	r3, [r7, #31]
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	3720      	adds	r7, #32
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}

08009a98 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009a98:	b590      	push	{r4, r7, lr}
 8009a9a:	b089      	sub	sp, #36	@ 0x24
 8009a9c:	af04      	add	r7, sp, #16
 8009a9e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	2202      	movs	r2, #2
 8009aa4:	2102      	movs	r1, #2
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f000 fc83 	bl	800a3b2 <USBH_FindInterface>
 8009aac:	4603      	mov	r3, r0
 8009aae:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009ab0:	7bfb      	ldrb	r3, [r7, #15]
 8009ab2:	2bff      	cmp	r3, #255	@ 0xff
 8009ab4:	d002      	beq.n	8009abc <USBH_CDC_InterfaceInit+0x24>
 8009ab6:	7bfb      	ldrb	r3, [r7, #15]
 8009ab8:	2b01      	cmp	r3, #1
 8009aba:	d901      	bls.n	8009ac0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009abc:	2302      	movs	r3, #2
 8009abe:	e13d      	b.n	8009d3c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8009ac0:	7bfb      	ldrb	r3, [r7, #15]
 8009ac2:	4619      	mov	r1, r3
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f000 fc58 	bl	800a37a <USBH_SelectInterface>
 8009aca:	4603      	mov	r3, r0
 8009acc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009ace:	7bbb      	ldrb	r3, [r7, #14]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d001      	beq.n	8009ad8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8009ad4:	2302      	movs	r3, #2
 8009ad6:	e131      	b.n	8009d3c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8009ade:	2050      	movs	r0, #80	@ 0x50
 8009ae0:	f002 fb6a 	bl	800c1b8 <malloc>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009aee:	69db      	ldr	r3, [r3, #28]
 8009af0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d101      	bne.n	8009afc <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8009af8:	2302      	movs	r3, #2
 8009afa:	e11f      	b.n	8009d3c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8009afc:	2250      	movs	r2, #80	@ 0x50
 8009afe:	2100      	movs	r1, #0
 8009b00:	68b8      	ldr	r0, [r7, #8]
 8009b02:	f002 fc39 	bl	800c378 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009b06:	7bfb      	ldrb	r3, [r7, #15]
 8009b08:	687a      	ldr	r2, [r7, #4]
 8009b0a:	211a      	movs	r1, #26
 8009b0c:	fb01 f303 	mul.w	r3, r1, r3
 8009b10:	4413      	add	r3, r2
 8009b12:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009b16:	781b      	ldrb	r3, [r3, #0]
 8009b18:	b25b      	sxtb	r3, r3
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	da15      	bge.n	8009b4a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009b1e:	7bfb      	ldrb	r3, [r7, #15]
 8009b20:	687a      	ldr	r2, [r7, #4]
 8009b22:	211a      	movs	r1, #26
 8009b24:	fb01 f303 	mul.w	r3, r1, r3
 8009b28:	4413      	add	r3, r2
 8009b2a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009b2e:	781a      	ldrb	r2, [r3, #0]
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009b34:	7bfb      	ldrb	r3, [r7, #15]
 8009b36:	687a      	ldr	r2, [r7, #4]
 8009b38:	211a      	movs	r1, #26
 8009b3a:	fb01 f303 	mul.w	r3, r1, r3
 8009b3e:	4413      	add	r3, r2
 8009b40:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009b44:	881a      	ldrh	r2, [r3, #0]
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	785b      	ldrb	r3, [r3, #1]
 8009b4e:	4619      	mov	r1, r3
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f001 ffc4 	bl	800bade <USBH_AllocPipe>
 8009b56:	4603      	mov	r3, r0
 8009b58:	461a      	mov	r2, r3
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8009b5e:	68bb      	ldr	r3, [r7, #8]
 8009b60:	7819      	ldrb	r1, [r3, #0]
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	7858      	ldrb	r0, [r3, #1]
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009b72:	68ba      	ldr	r2, [r7, #8]
 8009b74:	8952      	ldrh	r2, [r2, #10]
 8009b76:	9202      	str	r2, [sp, #8]
 8009b78:	2203      	movs	r2, #3
 8009b7a:	9201      	str	r2, [sp, #4]
 8009b7c:	9300      	str	r3, [sp, #0]
 8009b7e:	4623      	mov	r3, r4
 8009b80:	4602      	mov	r2, r0
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f001 ff7c 	bl	800ba80 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	781b      	ldrb	r3, [r3, #0]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	4619      	mov	r1, r3
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f002 fa8b 	bl	800c0ac <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8009b96:	2300      	movs	r3, #0
 8009b98:	2200      	movs	r2, #0
 8009b9a:	210a      	movs	r1, #10
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f000 fc08 	bl	800a3b2 <USBH_FindInterface>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009ba6:	7bfb      	ldrb	r3, [r7, #15]
 8009ba8:	2bff      	cmp	r3, #255	@ 0xff
 8009baa:	d002      	beq.n	8009bb2 <USBH_CDC_InterfaceInit+0x11a>
 8009bac:	7bfb      	ldrb	r3, [r7, #15]
 8009bae:	2b01      	cmp	r3, #1
 8009bb0:	d901      	bls.n	8009bb6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009bb2:	2302      	movs	r3, #2
 8009bb4:	e0c2      	b.n	8009d3c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009bb6:	7bfb      	ldrb	r3, [r7, #15]
 8009bb8:	687a      	ldr	r2, [r7, #4]
 8009bba:	211a      	movs	r1, #26
 8009bbc:	fb01 f303 	mul.w	r3, r1, r3
 8009bc0:	4413      	add	r3, r2
 8009bc2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009bc6:	781b      	ldrb	r3, [r3, #0]
 8009bc8:	b25b      	sxtb	r3, r3
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	da16      	bge.n	8009bfc <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009bce:	7bfb      	ldrb	r3, [r7, #15]
 8009bd0:	687a      	ldr	r2, [r7, #4]
 8009bd2:	211a      	movs	r1, #26
 8009bd4:	fb01 f303 	mul.w	r3, r1, r3
 8009bd8:	4413      	add	r3, r2
 8009bda:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009bde:	781a      	ldrb	r2, [r3, #0]
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009be4:	7bfb      	ldrb	r3, [r7, #15]
 8009be6:	687a      	ldr	r2, [r7, #4]
 8009be8:	211a      	movs	r1, #26
 8009bea:	fb01 f303 	mul.w	r3, r1, r3
 8009bee:	4413      	add	r3, r2
 8009bf0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009bf4:	881a      	ldrh	r2, [r3, #0]
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	835a      	strh	r2, [r3, #26]
 8009bfa:	e015      	b.n	8009c28 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009bfc:	7bfb      	ldrb	r3, [r7, #15]
 8009bfe:	687a      	ldr	r2, [r7, #4]
 8009c00:	211a      	movs	r1, #26
 8009c02:	fb01 f303 	mul.w	r3, r1, r3
 8009c06:	4413      	add	r3, r2
 8009c08:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009c0c:	781a      	ldrb	r2, [r3, #0]
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009c12:	7bfb      	ldrb	r3, [r7, #15]
 8009c14:	687a      	ldr	r2, [r7, #4]
 8009c16:	211a      	movs	r1, #26
 8009c18:	fb01 f303 	mul.w	r3, r1, r3
 8009c1c:	4413      	add	r3, r2
 8009c1e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009c22:	881a      	ldrh	r2, [r3, #0]
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8009c28:	7bfb      	ldrb	r3, [r7, #15]
 8009c2a:	687a      	ldr	r2, [r7, #4]
 8009c2c:	211a      	movs	r1, #26
 8009c2e:	fb01 f303 	mul.w	r3, r1, r3
 8009c32:	4413      	add	r3, r2
 8009c34:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009c38:	781b      	ldrb	r3, [r3, #0]
 8009c3a:	b25b      	sxtb	r3, r3
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	da16      	bge.n	8009c6e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009c40:	7bfb      	ldrb	r3, [r7, #15]
 8009c42:	687a      	ldr	r2, [r7, #4]
 8009c44:	211a      	movs	r1, #26
 8009c46:	fb01 f303 	mul.w	r3, r1, r3
 8009c4a:	4413      	add	r3, r2
 8009c4c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009c50:	781a      	ldrb	r2, [r3, #0]
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009c56:	7bfb      	ldrb	r3, [r7, #15]
 8009c58:	687a      	ldr	r2, [r7, #4]
 8009c5a:	211a      	movs	r1, #26
 8009c5c:	fb01 f303 	mul.w	r3, r1, r3
 8009c60:	4413      	add	r3, r2
 8009c62:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8009c66:	881a      	ldrh	r2, [r3, #0]
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	835a      	strh	r2, [r3, #26]
 8009c6c:	e015      	b.n	8009c9a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009c6e:	7bfb      	ldrb	r3, [r7, #15]
 8009c70:	687a      	ldr	r2, [r7, #4]
 8009c72:	211a      	movs	r1, #26
 8009c74:	fb01 f303 	mul.w	r3, r1, r3
 8009c78:	4413      	add	r3, r2
 8009c7a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009c7e:	781a      	ldrb	r2, [r3, #0]
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009c84:	7bfb      	ldrb	r3, [r7, #15]
 8009c86:	687a      	ldr	r2, [r7, #4]
 8009c88:	211a      	movs	r1, #26
 8009c8a:	fb01 f303 	mul.w	r3, r1, r3
 8009c8e:	4413      	add	r3, r2
 8009c90:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8009c94:	881a      	ldrh	r2, [r3, #0]
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	7b9b      	ldrb	r3, [r3, #14]
 8009c9e:	4619      	mov	r1, r3
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f001 ff1c 	bl	800bade <USBH_AllocPipe>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	461a      	mov	r2, r3
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	7bdb      	ldrb	r3, [r3, #15]
 8009cb2:	4619      	mov	r1, r3
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f001 ff12 	bl	800bade <USBH_AllocPipe>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	461a      	mov	r2, r3
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	7b59      	ldrb	r1, [r3, #13]
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	7b98      	ldrb	r0, [r3, #14]
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009cd6:	68ba      	ldr	r2, [r7, #8]
 8009cd8:	8b12      	ldrh	r2, [r2, #24]
 8009cda:	9202      	str	r2, [sp, #8]
 8009cdc:	2202      	movs	r2, #2
 8009cde:	9201      	str	r2, [sp, #4]
 8009ce0:	9300      	str	r3, [sp, #0]
 8009ce2:	4623      	mov	r3, r4
 8009ce4:	4602      	mov	r2, r0
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f001 feca 	bl	800ba80 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	7b19      	ldrb	r1, [r3, #12]
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	7bd8      	ldrb	r0, [r3, #15]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009d00:	68ba      	ldr	r2, [r7, #8]
 8009d02:	8b52      	ldrh	r2, [r2, #26]
 8009d04:	9202      	str	r2, [sp, #8]
 8009d06:	2202      	movs	r2, #2
 8009d08:	9201      	str	r2, [sp, #4]
 8009d0a:	9300      	str	r3, [sp, #0]
 8009d0c:	4623      	mov	r3, r4
 8009d0e:	4602      	mov	r2, r0
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f001 feb5 	bl	800ba80 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	2200      	movs	r2, #0
 8009d1a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	7b5b      	ldrb	r3, [r3, #13]
 8009d22:	2200      	movs	r2, #0
 8009d24:	4619      	mov	r1, r3
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f002 f9c0 	bl	800c0ac <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	7b1b      	ldrb	r3, [r3, #12]
 8009d30:	2200      	movs	r2, #0
 8009d32:	4619      	mov	r1, r3
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f002 f9b9 	bl	800c0ac <USBH_LL_SetToggle>

  return USBH_OK;
 8009d3a:	2300      	movs	r3, #0
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3714      	adds	r7, #20
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd90      	pop	{r4, r7, pc}

08009d44 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b084      	sub	sp, #16
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009d52:	69db      	ldr	r3, [r3, #28]
 8009d54:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	781b      	ldrb	r3, [r3, #0]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d00e      	beq.n	8009d7c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	781b      	ldrb	r3, [r3, #0]
 8009d62:	4619      	mov	r1, r3
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f001 feaa 	bl	800babe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	781b      	ldrb	r3, [r3, #0]
 8009d6e:	4619      	mov	r1, r3
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f001 fed5 	bl	800bb20 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	7b1b      	ldrb	r3, [r3, #12]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d00e      	beq.n	8009da2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	7b1b      	ldrb	r3, [r3, #12]
 8009d88:	4619      	mov	r1, r3
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f001 fe97 	bl	800babe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	7b1b      	ldrb	r3, [r3, #12]
 8009d94:	4619      	mov	r1, r3
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f001 fec2 	bl	800bb20 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	7b5b      	ldrb	r3, [r3, #13]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d00e      	beq.n	8009dc8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	7b5b      	ldrb	r3, [r3, #13]
 8009dae:	4619      	mov	r1, r3
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f001 fe84 	bl	800babe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	7b5b      	ldrb	r3, [r3, #13]
 8009dba:	4619      	mov	r1, r3
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f001 feaf 	bl	800bb20 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009dce:	69db      	ldr	r3, [r3, #28]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d00b      	beq.n	8009dec <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009dda:	69db      	ldr	r3, [r3, #28]
 8009ddc:	4618      	mov	r0, r3
 8009dde:	f002 f9f3 	bl	800c1c8 <free>
    phost->pActiveClass->pData = 0U;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009de8:	2200      	movs	r2, #0
 8009dea:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009dec:	2300      	movs	r3, #0
}
 8009dee:	4618      	mov	r0, r3
 8009df0:	3710      	adds	r7, #16
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd80      	pop	{r7, pc}

08009df6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009df6:	b580      	push	{r7, lr}
 8009df8:	b084      	sub	sp, #16
 8009dfa:	af00      	add	r7, sp, #0
 8009dfc:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009e04:	69db      	ldr	r3, [r3, #28]
 8009e06:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	3340      	adds	r3, #64	@ 0x40
 8009e0c:	4619      	mov	r1, r3
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f000 f8b1 	bl	8009f76 <GetLineCoding>
 8009e14:	4603      	mov	r3, r0
 8009e16:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8009e18:	7afb      	ldrb	r3, [r7, #11]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d105      	bne.n	8009e2a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009e24:	2102      	movs	r1, #2
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8009e2a:	7afb      	ldrb	r3, [r7, #11]
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	3710      	adds	r7, #16
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}

08009e34 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b084      	sub	sp, #16
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009e40:	2300      	movs	r3, #0
 8009e42:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009e4a:	69db      	ldr	r3, [r3, #28]
 8009e4c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8009e54:	2b04      	cmp	r3, #4
 8009e56:	d877      	bhi.n	8009f48 <USBH_CDC_Process+0x114>
 8009e58:	a201      	add	r2, pc, #4	@ (adr r2, 8009e60 <USBH_CDC_Process+0x2c>)
 8009e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e5e:	bf00      	nop
 8009e60:	08009e75 	.word	0x08009e75
 8009e64:	08009e7b 	.word	0x08009e7b
 8009e68:	08009eab 	.word	0x08009eab
 8009e6c:	08009f1f 	.word	0x08009f1f
 8009e70:	08009f2d 	.word	0x08009f2d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009e74:	2300      	movs	r3, #0
 8009e76:	73fb      	strb	r3, [r7, #15]
      break;
 8009e78:	e06d      	b.n	8009f56 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009e7e:	4619      	mov	r1, r3
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f000 f897 	bl	8009fb4 <SetLineCoding>
 8009e86:	4603      	mov	r3, r0
 8009e88:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009e8a:	7bbb      	ldrb	r3, [r7, #14]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d104      	bne.n	8009e9a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	2202      	movs	r2, #2
 8009e94:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009e98:	e058      	b.n	8009f4c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8009e9a:	7bbb      	ldrb	r3, [r7, #14]
 8009e9c:	2b01      	cmp	r3, #1
 8009e9e:	d055      	beq.n	8009f4c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	2204      	movs	r2, #4
 8009ea4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8009ea8:	e050      	b.n	8009f4c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	3340      	adds	r3, #64	@ 0x40
 8009eae:	4619      	mov	r1, r3
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f000 f860 	bl	8009f76 <GetLineCoding>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009eba:	7bbb      	ldrb	r3, [r7, #14]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d126      	bne.n	8009f0e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009ed2:	791b      	ldrb	r3, [r3, #4]
 8009ed4:	429a      	cmp	r2, r3
 8009ed6:	d13b      	bne.n	8009f50 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009ee2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009ee4:	429a      	cmp	r2, r3
 8009ee6:	d133      	bne.n	8009f50 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009ef2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009ef4:	429a      	cmp	r2, r3
 8009ef6:	d12b      	bne.n	8009f50 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009f00:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009f02:	429a      	cmp	r2, r3
 8009f04:	d124      	bne.n	8009f50 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f000 f958 	bl	800a1bc <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009f0c:	e020      	b.n	8009f50 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8009f0e:	7bbb      	ldrb	r3, [r7, #14]
 8009f10:	2b01      	cmp	r3, #1
 8009f12:	d01d      	beq.n	8009f50 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	2204      	movs	r2, #4
 8009f18:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8009f1c:	e018      	b.n	8009f50 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f000 f867 	bl	8009ff2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f000 f8da 	bl	800a0de <CDC_ProcessReception>
      break;
 8009f2a:	e014      	b.n	8009f56 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8009f2c:	2100      	movs	r1, #0
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f001 f81e 	bl	800af70 <USBH_ClrFeature>
 8009f34:	4603      	mov	r3, r0
 8009f36:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009f38:	7bbb      	ldrb	r3, [r7, #14]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d10a      	bne.n	8009f54 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	2200      	movs	r2, #0
 8009f42:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8009f46:	e005      	b.n	8009f54 <USBH_CDC_Process+0x120>

    default:
      break;
 8009f48:	bf00      	nop
 8009f4a:	e004      	b.n	8009f56 <USBH_CDC_Process+0x122>
      break;
 8009f4c:	bf00      	nop
 8009f4e:	e002      	b.n	8009f56 <USBH_CDC_Process+0x122>
      break;
 8009f50:	bf00      	nop
 8009f52:	e000      	b.n	8009f56 <USBH_CDC_Process+0x122>
      break;
 8009f54:	bf00      	nop

  }

  return status;
 8009f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3710      	adds	r7, #16
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}

08009f60 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009f60:	b480      	push	{r7}
 8009f62:	b083      	sub	sp, #12
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009f68:	2300      	movs	r3, #0
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	370c      	adds	r7, #12
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f74:	4770      	bx	lr

08009f76 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8009f76:	b580      	push	{r7, lr}
 8009f78:	b082      	sub	sp, #8
 8009f7a:	af00      	add	r7, sp, #0
 8009f7c:	6078      	str	r0, [r7, #4]
 8009f7e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	22a1      	movs	r2, #161	@ 0xa1
 8009f84:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2221      	movs	r2, #33	@ 0x21
 8009f8a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2200      	movs	r2, #0
 8009f90:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2200      	movs	r2, #0
 8009f96:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2207      	movs	r2, #7
 8009f9c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	2207      	movs	r2, #7
 8009fa2:	4619      	mov	r1, r3
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f001 fb17 	bl	800b5d8 <USBH_CtlReq>
 8009faa:	4603      	mov	r3, r0
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	3708      	adds	r7, #8
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}

08009fb4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b082      	sub	sp, #8
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
 8009fbc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2221      	movs	r2, #33	@ 0x21
 8009fc2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2220      	movs	r2, #32
 8009fc8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2207      	movs	r2, #7
 8009fda:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	2207      	movs	r2, #7
 8009fe0:	4619      	mov	r1, r3
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f001 faf8 	bl	800b5d8 <USBH_CtlReq>
 8009fe8:	4603      	mov	r3, r0
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	3708      	adds	r7, #8
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}

08009ff2 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8009ff2:	b580      	push	{r7, lr}
 8009ff4:	b086      	sub	sp, #24
 8009ff6:	af02      	add	r7, sp, #8
 8009ff8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a000:	69db      	ldr	r3, [r3, #28]
 800a002:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a004:	2300      	movs	r3, #0
 800a006:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800a00e:	2b01      	cmp	r3, #1
 800a010:	d002      	beq.n	800a018 <CDC_ProcessTransmission+0x26>
 800a012:	2b02      	cmp	r3, #2
 800a014:	d023      	beq.n	800a05e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800a016:	e05e      	b.n	800a0d6 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a01c:	68fa      	ldr	r2, [r7, #12]
 800a01e:	8b12      	ldrh	r2, [r2, #24]
 800a020:	4293      	cmp	r3, r2
 800a022:	d90b      	bls.n	800a03c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	69d9      	ldr	r1, [r3, #28]
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	8b1a      	ldrh	r2, [r3, #24]
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	7b5b      	ldrb	r3, [r3, #13]
 800a030:	2001      	movs	r0, #1
 800a032:	9000      	str	r0, [sp, #0]
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f001 fce0 	bl	800b9fa <USBH_BulkSendData>
 800a03a:	e00b      	b.n	800a054 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800a044:	b29a      	uxth	r2, r3
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	7b5b      	ldrb	r3, [r3, #13]
 800a04a:	2001      	movs	r0, #1
 800a04c:	9000      	str	r0, [sp, #0]
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f001 fcd3 	bl	800b9fa <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	2202      	movs	r2, #2
 800a058:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800a05c:	e03b      	b.n	800a0d6 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	7b5b      	ldrb	r3, [r3, #13]
 800a062:	4619      	mov	r1, r3
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f001 fff7 	bl	800c058 <USBH_LL_GetURBState>
 800a06a:	4603      	mov	r3, r0
 800a06c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800a06e:	7afb      	ldrb	r3, [r7, #11]
 800a070:	2b01      	cmp	r3, #1
 800a072:	d128      	bne.n	800a0c6 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a078:	68fa      	ldr	r2, [r7, #12]
 800a07a:	8b12      	ldrh	r2, [r2, #24]
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d90e      	bls.n	800a09e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a084:	68fa      	ldr	r2, [r7, #12]
 800a086:	8b12      	ldrh	r2, [r2, #24]
 800a088:	1a9a      	subs	r2, r3, r2
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	69db      	ldr	r3, [r3, #28]
 800a092:	68fa      	ldr	r2, [r7, #12]
 800a094:	8b12      	ldrh	r2, [r2, #24]
 800a096:	441a      	add	r2, r3
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	61da      	str	r2, [r3, #28]
 800a09c:	e002      	b.n	800a0a4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d004      	beq.n	800a0b6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	2201      	movs	r2, #1
 800a0b0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800a0b4:	e00e      	b.n	800a0d4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f000 f868 	bl	800a194 <USBH_CDC_TransmitCallback>
      break;
 800a0c4:	e006      	b.n	800a0d4 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800a0c6:	7afb      	ldrb	r3, [r7, #11]
 800a0c8:	2b02      	cmp	r3, #2
 800a0ca:	d103      	bne.n	800a0d4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	2201      	movs	r2, #1
 800a0d0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800a0d4:	bf00      	nop
  }
}
 800a0d6:	bf00      	nop
 800a0d8:	3710      	adds	r7, #16
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}

0800a0de <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800a0de:	b580      	push	{r7, lr}
 800a0e0:	b086      	sub	sp, #24
 800a0e2:	af00      	add	r7, sp, #0
 800a0e4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a0ec:	69db      	ldr	r3, [r3, #28]
 800a0ee:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800a0f4:	697b      	ldr	r3, [r7, #20]
 800a0f6:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800a0fa:	2b03      	cmp	r3, #3
 800a0fc:	d002      	beq.n	800a104 <CDC_ProcessReception+0x26>
 800a0fe:	2b04      	cmp	r3, #4
 800a100:	d00e      	beq.n	800a120 <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 800a102:	e043      	b.n	800a18c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	6a19      	ldr	r1, [r3, #32]
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	8b5a      	ldrh	r2, [r3, #26]
 800a10c:	697b      	ldr	r3, [r7, #20]
 800a10e:	7b1b      	ldrb	r3, [r3, #12]
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f001 fc97 	bl	800ba44 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	2204      	movs	r2, #4
 800a11a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800a11e:	e035      	b.n	800a18c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	7b1b      	ldrb	r3, [r3, #12]
 800a124:	4619      	mov	r1, r3
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f001 ff96 	bl	800c058 <USBH_LL_GetURBState>
 800a12c:	4603      	mov	r3, r0
 800a12e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800a130:	7cfb      	ldrb	r3, [r7, #19]
 800a132:	2b01      	cmp	r3, #1
 800a134:	d129      	bne.n	800a18a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800a136:	697b      	ldr	r3, [r7, #20]
 800a138:	7b1b      	ldrb	r3, [r3, #12]
 800a13a:	4619      	mov	r1, r3
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f001 fef9 	bl	800bf34 <USBH_LL_GetLastXferSize>
 800a142:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800a144:	697b      	ldr	r3, [r7, #20]
 800a146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a148:	68fa      	ldr	r2, [r7, #12]
 800a14a:	429a      	cmp	r2, r3
 800a14c:	d016      	beq.n	800a17c <CDC_ProcessReception+0x9e>
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	8b5b      	ldrh	r3, [r3, #26]
 800a152:	461a      	mov	r2, r3
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	4293      	cmp	r3, r2
 800a158:	d110      	bne.n	800a17c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	1ad2      	subs	r2, r2, r3
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800a166:	697b      	ldr	r3, [r7, #20]
 800a168:	6a1a      	ldr	r2, [r3, #32]
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	441a      	add	r2, r3
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	2203      	movs	r2, #3
 800a176:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800a17a:	e006      	b.n	800a18a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800a17c:	697b      	ldr	r3, [r7, #20]
 800a17e:	2200      	movs	r2, #0
 800a180:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f000 f80f 	bl	800a1a8 <USBH_CDC_ReceiveCallback>
      break;
 800a18a:	bf00      	nop
  }
}
 800a18c:	bf00      	nop
 800a18e:	3718      	adds	r7, #24
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}

0800a194 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800a194:	b480      	push	{r7}
 800a196:	b083      	sub	sp, #12
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a19c:	bf00      	nop
 800a19e:	370c      	adds	r7, #12
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a6:	4770      	bx	lr

0800a1a8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b083      	sub	sp, #12
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a1b0:	bf00      	nop
 800a1b2:	370c      	adds	r7, #12
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ba:	4770      	bx	lr

0800a1bc <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b083      	sub	sp, #12
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a1c4:	bf00      	nop
 800a1c6:	370c      	adds	r7, #12
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ce:	4770      	bx	lr

0800a1d0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b084      	sub	sp, #16
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	60f8      	str	r0, [r7, #12]
 800a1d8:	60b9      	str	r1, [r7, #8]
 800a1da:	4613      	mov	r3, r2
 800a1dc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d101      	bne.n	800a1e8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a1e4:	2302      	movs	r3, #2
 800a1e6:	e029      	b.n	800a23c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	79fa      	ldrb	r2, [r7, #7]
 800a1ec:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800a200:	68f8      	ldr	r0, [r7, #12]
 800a202:	f000 f81f 	bl	800a244 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	2200      	movs	r2, #0
 800a20a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	2200      	movs	r2, #0
 800a212:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	2200      	movs	r2, #0
 800a21a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	2200      	movs	r2, #0
 800a222:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d003      	beq.n	800a234 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	68ba      	ldr	r2, [r7, #8]
 800a230:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800a234:	68f8      	ldr	r0, [r7, #12]
 800a236:	f001 fdc9 	bl	800bdcc <USBH_LL_Init>

  return USBH_OK;
 800a23a:	2300      	movs	r3, #0
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	3710      	adds	r7, #16
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}

0800a244 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b084      	sub	sp, #16
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a24c:	2300      	movs	r3, #0
 800a24e:	60fb      	str	r3, [r7, #12]
 800a250:	e009      	b.n	800a266 <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 800a252:	687a      	ldr	r2, [r7, #4]
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	33e0      	adds	r3, #224	@ 0xe0
 800a258:	009b      	lsls	r3, r3, #2
 800a25a:	4413      	add	r3, r2
 800a25c:	2200      	movs	r2, #0
 800a25e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	3301      	adds	r3, #1
 800a264:	60fb      	str	r3, [r7, #12]
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	2b0f      	cmp	r3, #15
 800a26a:	d9f2      	bls.n	800a252 <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a26c:	2300      	movs	r3, #0
 800a26e:	60fb      	str	r3, [r7, #12]
 800a270:	e009      	b.n	800a286 <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 800a272:	687a      	ldr	r2, [r7, #4]
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	4413      	add	r3, r2
 800a278:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a27c:	2200      	movs	r2, #0
 800a27e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	3301      	adds	r3, #1
 800a284:	60fb      	str	r3, [r7, #12]
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a28c:	d3f1      	bcc.n	800a272 <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2200      	movs	r2, #0
 800a292:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2200      	movs	r2, #0
 800a298:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2201      	movs	r2, #1
 800a29e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2201      	movs	r2, #1
 800a2ac:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2240      	movs	r2, #64	@ 0x40
 800a2b2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2200      	movs	r2, #0
 800a2be:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2201      	movs	r2, #1
 800a2c6:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	331c      	adds	r3, #28
 800a2de:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a2e2:	2100      	movs	r1, #0
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f002 f847 	bl	800c378 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a2f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a2f4:	2100      	movs	r1, #0
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f002 f83e 	bl	800c378 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800a302:	2212      	movs	r2, #18
 800a304:	2100      	movs	r1, #0
 800a306:	4618      	mov	r0, r3
 800a308:	f002 f836 	bl	800c378 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a312:	223e      	movs	r2, #62	@ 0x3e
 800a314:	2100      	movs	r1, #0
 800a316:	4618      	mov	r0, r3
 800a318:	f002 f82e 	bl	800c378 <memset>

  return USBH_OK;
 800a31c:	2300      	movs	r3, #0
}
 800a31e:	4618      	mov	r0, r3
 800a320:	3710      	adds	r7, #16
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}

0800a326 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a326:	b480      	push	{r7}
 800a328:	b085      	sub	sp, #20
 800a32a:	af00      	add	r7, sp, #0
 800a32c:	6078      	str	r0, [r7, #4]
 800a32e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a330:	2300      	movs	r3, #0
 800a332:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d016      	beq.n	800a368 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800a340:	2b00      	cmp	r3, #0
 800a342:	d10e      	bne.n	800a362 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800a34a:	1c59      	adds	r1, r3, #1
 800a34c:	687a      	ldr	r2, [r7, #4]
 800a34e:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800a352:	687a      	ldr	r2, [r7, #4]
 800a354:	33de      	adds	r3, #222	@ 0xde
 800a356:	6839      	ldr	r1, [r7, #0]
 800a358:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a35c:	2300      	movs	r3, #0
 800a35e:	73fb      	strb	r3, [r7, #15]
 800a360:	e004      	b.n	800a36c <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a362:	2302      	movs	r3, #2
 800a364:	73fb      	strb	r3, [r7, #15]
 800a366:	e001      	b.n	800a36c <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a368:	2302      	movs	r3, #2
 800a36a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a36c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3714      	adds	r7, #20
 800a372:	46bd      	mov	sp, r7
 800a374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a378:	4770      	bx	lr

0800a37a <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a37a:	b480      	push	{r7}
 800a37c:	b085      	sub	sp, #20
 800a37e:	af00      	add	r7, sp, #0
 800a380:	6078      	str	r0, [r7, #4]
 800a382:	460b      	mov	r3, r1
 800a384:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a386:	2300      	movs	r3, #0
 800a388:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800a390:	78fa      	ldrb	r2, [r7, #3]
 800a392:	429a      	cmp	r2, r3
 800a394:	d204      	bcs.n	800a3a0 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	78fa      	ldrb	r2, [r7, #3]
 800a39a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800a39e:	e001      	b.n	800a3a4 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a3a0:	2302      	movs	r3, #2
 800a3a2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a3a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	3714      	adds	r7, #20
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b0:	4770      	bx	lr

0800a3b2 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a3b2:	b480      	push	{r7}
 800a3b4:	b087      	sub	sp, #28
 800a3b6:	af00      	add	r7, sp, #0
 800a3b8:	6078      	str	r0, [r7, #4]
 800a3ba:	4608      	mov	r0, r1
 800a3bc:	4611      	mov	r1, r2
 800a3be:	461a      	mov	r2, r3
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	70fb      	strb	r3, [r7, #3]
 800a3c4:	460b      	mov	r3, r1
 800a3c6:	70bb      	strb	r3, [r7, #2]
 800a3c8:	4613      	mov	r3, r2
 800a3ca:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a3da:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a3dc:	e025      	b.n	800a42a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a3de:	7dfb      	ldrb	r3, [r7, #23]
 800a3e0:	221a      	movs	r2, #26
 800a3e2:	fb02 f303 	mul.w	r3, r2, r3
 800a3e6:	3308      	adds	r3, #8
 800a3e8:	68fa      	ldr	r2, [r7, #12]
 800a3ea:	4413      	add	r3, r2
 800a3ec:	3302      	adds	r3, #2
 800a3ee:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	795b      	ldrb	r3, [r3, #5]
 800a3f4:	78fa      	ldrb	r2, [r7, #3]
 800a3f6:	429a      	cmp	r2, r3
 800a3f8:	d002      	beq.n	800a400 <USBH_FindInterface+0x4e>
 800a3fa:	78fb      	ldrb	r3, [r7, #3]
 800a3fc:	2bff      	cmp	r3, #255	@ 0xff
 800a3fe:	d111      	bne.n	800a424 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a400:	693b      	ldr	r3, [r7, #16]
 800a402:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a404:	78ba      	ldrb	r2, [r7, #2]
 800a406:	429a      	cmp	r2, r3
 800a408:	d002      	beq.n	800a410 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a40a:	78bb      	ldrb	r3, [r7, #2]
 800a40c:	2bff      	cmp	r3, #255	@ 0xff
 800a40e:	d109      	bne.n	800a424 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a410:	693b      	ldr	r3, [r7, #16]
 800a412:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a414:	787a      	ldrb	r2, [r7, #1]
 800a416:	429a      	cmp	r2, r3
 800a418:	d002      	beq.n	800a420 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a41a:	787b      	ldrb	r3, [r7, #1]
 800a41c:	2bff      	cmp	r3, #255	@ 0xff
 800a41e:	d101      	bne.n	800a424 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a420:	7dfb      	ldrb	r3, [r7, #23]
 800a422:	e006      	b.n	800a432 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a424:	7dfb      	ldrb	r3, [r7, #23]
 800a426:	3301      	adds	r3, #1
 800a428:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a42a:	7dfb      	ldrb	r3, [r7, #23]
 800a42c:	2b01      	cmp	r3, #1
 800a42e:	d9d6      	bls.n	800a3de <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a430:	23ff      	movs	r3, #255	@ 0xff
}
 800a432:	4618      	mov	r0, r3
 800a434:	371c      	adds	r7, #28
 800a436:	46bd      	mov	sp, r7
 800a438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43c:	4770      	bx	lr

0800a43e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800a43e:	b580      	push	{r7, lr}
 800a440:	b082      	sub	sp, #8
 800a442:	af00      	add	r7, sp, #0
 800a444:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f001 fcfc 	bl	800be44 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800a44c:	2101      	movs	r1, #1
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f001 fe15 	bl	800c07e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a454:	2300      	movs	r3, #0
}
 800a456:	4618      	mov	r0, r3
 800a458:	3708      	adds	r7, #8
 800a45a:	46bd      	mov	sp, r7
 800a45c:	bd80      	pop	{r7, pc}
	...

0800a460 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b088      	sub	sp, #32
 800a464:	af04      	add	r7, sp, #16
 800a466:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a468:	2302      	movs	r3, #2
 800a46a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a46c:	2300      	movs	r3, #0
 800a46e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800a476:	b2db      	uxtb	r3, r3
 800a478:	2b01      	cmp	r3, #1
 800a47a:	d102      	bne.n	800a482 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2203      	movs	r2, #3
 800a480:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	781b      	ldrb	r3, [r3, #0]
 800a486:	b2db      	uxtb	r3, r3
 800a488:	2b0b      	cmp	r3, #11
 800a48a:	f200 81bc 	bhi.w	800a806 <USBH_Process+0x3a6>
 800a48e:	a201      	add	r2, pc, #4	@ (adr r2, 800a494 <USBH_Process+0x34>)
 800a490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a494:	0800a4c5 	.word	0x0800a4c5
 800a498:	0800a4f7 	.word	0x0800a4f7
 800a49c:	0800a561 	.word	0x0800a561
 800a4a0:	0800a7a1 	.word	0x0800a7a1
 800a4a4:	0800a807 	.word	0x0800a807
 800a4a8:	0800a601 	.word	0x0800a601
 800a4ac:	0800a747 	.word	0x0800a747
 800a4b0:	0800a637 	.word	0x0800a637
 800a4b4:	0800a657 	.word	0x0800a657
 800a4b8:	0800a675 	.word	0x0800a675
 800a4bc:	0800a6b9 	.word	0x0800a6b9
 800a4c0:	0800a789 	.word	0x0800a789
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800a4ca:	b2db      	uxtb	r3, r3
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	f000 819c 	beq.w	800a80a <USBH_Process+0x3aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2201      	movs	r2, #1
 800a4d6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a4d8:	20c8      	movs	r0, #200	@ 0xc8
 800a4da:	f001 fe1a 	bl	800c112 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f001 fd0d 	bl	800befe <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800a4f4:	e189      	b.n	800a80a <USBH_Process+0x3aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800a4fc:	b2db      	uxtb	r3, r3
 800a4fe:	2b01      	cmp	r3, #1
 800a500:	d107      	bne.n	800a512 <USBH_Process+0xb2>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2200      	movs	r2, #0
 800a506:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2202      	movs	r2, #2
 800a50e:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a510:	e18a      	b.n	800a828 <USBH_Process+0x3c8>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800a518:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a51c:	d914      	bls.n	800a548 <USBH_Process+0xe8>
          phost->device.RstCnt++;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800a524:	3301      	adds	r3, #1
 800a526:	b2da      	uxtb	r2, r3
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800a534:	2b03      	cmp	r3, #3
 800a536:	d903      	bls.n	800a540 <USBH_Process+0xe0>
            phost->gState = HOST_ABORT_STATE;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	220d      	movs	r2, #13
 800a53c:	701a      	strb	r2, [r3, #0]
      break;
 800a53e:	e173      	b.n	800a828 <USBH_Process+0x3c8>
            phost->gState = HOST_IDLE;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2200      	movs	r2, #0
 800a544:	701a      	strb	r2, [r3, #0]
      break;
 800a546:	e16f      	b.n	800a828 <USBH_Process+0x3c8>
          phost->Timeout += 10U;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800a54e:	f103 020a 	add.w	r2, r3, #10
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800a558:	200a      	movs	r0, #10
 800a55a:	f001 fdda 	bl	800c112 <USBH_Delay>
      break;
 800a55e:	e163      	b.n	800a828 <USBH_Process+0x3c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a566:	2b00      	cmp	r3, #0
 800a568:	d005      	beq.n	800a576 <USBH_Process+0x116>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a570:	2104      	movs	r1, #4
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a576:	2064      	movs	r0, #100	@ 0x64
 800a578:	f001 fdcb 	bl	800c112 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f001 fc97 	bl	800beb0 <USBH_LL_GetSpeed>
 800a582:	4603      	mov	r3, r0
 800a584:	461a      	mov	r2, r3
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2205      	movs	r2, #5
 800a590:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a592:	2100      	movs	r1, #0
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	f001 faa2 	bl	800bade <USBH_AllocPipe>
 800a59a:	4603      	mov	r3, r0
 800a59c:	461a      	mov	r2, r3
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a5a2:	2180      	movs	r1, #128	@ 0x80
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	f001 fa9a 	bl	800bade <USBH_AllocPipe>
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	461a      	mov	r2, r3
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	7919      	ldrb	r1, [r3, #4]
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a5c2:	687a      	ldr	r2, [r7, #4]
 800a5c4:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a5c6:	9202      	str	r2, [sp, #8]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	9201      	str	r2, [sp, #4]
 800a5cc:	9300      	str	r3, [sp, #0]
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	2280      	movs	r2, #128	@ 0x80
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	f001 fa54 	bl	800ba80 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	7959      	ldrb	r1, [r3, #5]
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a5e8:	687a      	ldr	r2, [r7, #4]
 800a5ea:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a5ec:	9202      	str	r2, [sp, #8]
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	9201      	str	r2, [sp, #4]
 800a5f2:	9300      	str	r3, [sp, #0]
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f001 fa41 	bl	800ba80 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a5fe:	e113      	b.n	800a828 <USBH_Process+0x3c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	f000 f917 	bl	800a834 <USBH_HandleEnum>
 800a606:	4603      	mov	r3, r0
 800a608:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a60a:	7bbb      	ldrb	r3, [r7, #14]
 800a60c:	b2db      	uxtb	r3, r3
 800a60e:	2b00      	cmp	r3, #0
 800a610:	f040 80fd 	bne.w	800a80e <USBH_Process+0x3ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2200      	movs	r2, #0
 800a618:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800a622:	2b01      	cmp	r3, #1
 800a624:	d103      	bne.n	800a62e <USBH_Process+0x1ce>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2208      	movs	r2, #8
 800a62a:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800a62c:	e0ef      	b.n	800a80e <USBH_Process+0x3ae>
          phost->gState = HOST_INPUT;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2207      	movs	r2, #7
 800a632:	701a      	strb	r2, [r3, #0]
      break;
 800a634:	e0eb      	b.n	800a80e <USBH_Process+0x3ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	f000 80e8 	beq.w	800a812 <USBH_Process+0x3b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a648:	2101      	movs	r1, #1
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2208      	movs	r2, #8
 800a652:	701a      	strb	r2, [r3, #0]
#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 800a654:	e0dd      	b.n	800a812 <USBH_Process+0x3b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800a65c:	4619      	mov	r1, r3
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	f000 fc3f 	bl	800aee2 <USBH_SetCfg>
 800a664:	4603      	mov	r3, r0
 800a666:	2b00      	cmp	r3, #0
 800a668:	f040 80d5 	bne.w	800a816 <USBH_Process+0x3b6>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2209      	movs	r2, #9
 800a670:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a672:	e0d0      	b.n	800a816 <USBH_Process+0x3b6>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800a67a:	f003 0320 	and.w	r3, r3, #32
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d016      	beq.n	800a6b0 <USBH_Process+0x250>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800a682:	2101      	movs	r1, #1
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	f000 fc4f 	bl	800af28 <USBH_SetFeature>
 800a68a:	4603      	mov	r3, r0
 800a68c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a68e:	7bbb      	ldrb	r3, [r7, #14]
 800a690:	b2db      	uxtb	r3, r3
 800a692:	2b00      	cmp	r3, #0
 800a694:	d103      	bne.n	800a69e <USBH_Process+0x23e>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	220a      	movs	r2, #10
 800a69a:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a69c:	e0bd      	b.n	800a81a <USBH_Process+0x3ba>
        else if (status == USBH_NOT_SUPPORTED)
 800a69e:	7bbb      	ldrb	r3, [r7, #14]
 800a6a0:	b2db      	uxtb	r3, r3
 800a6a2:	2b03      	cmp	r3, #3
 800a6a4:	f040 80b9 	bne.w	800a81a <USBH_Process+0x3ba>
          phost->gState = HOST_CHECK_CLASS;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	220a      	movs	r2, #10
 800a6ac:	701a      	strb	r2, [r3, #0]
      break;
 800a6ae:	e0b4      	b.n	800a81a <USBH_Process+0x3ba>
        phost->gState = HOST_CHECK_CLASS;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	220a      	movs	r2, #10
 800a6b4:	701a      	strb	r2, [r3, #0]
      break;
 800a6b6:	e0b0      	b.n	800a81a <USBH_Process+0x3ba>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	f000 80ad 	beq.w	800a81e <USBH_Process+0x3be>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	73fb      	strb	r3, [r7, #15]
 800a6d0:	e016      	b.n	800a700 <USBH_Process+0x2a0>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a6d2:	7bfa      	ldrb	r2, [r7, #15]
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	32de      	adds	r2, #222	@ 0xde
 800a6d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6dc:	791a      	ldrb	r2, [r3, #4]
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800a6e4:	429a      	cmp	r2, r3
 800a6e6:	d108      	bne.n	800a6fa <USBH_Process+0x29a>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a6e8:	7bfa      	ldrb	r2, [r7, #15]
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	32de      	adds	r2, #222	@ 0xde
 800a6ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800a6f8:	e005      	b.n	800a706 <USBH_Process+0x2a6>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a6fa:	7bfb      	ldrb	r3, [r7, #15]
 800a6fc:	3301      	adds	r3, #1
 800a6fe:	73fb      	strb	r3, [r7, #15]
 800a700:	7bfb      	ldrb	r3, [r7, #15]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d0e5      	beq.n	800a6d2 <USBH_Process+0x272>
          }
        }

        if (phost->pActiveClass != NULL)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d016      	beq.n	800a73e <USBH_Process+0x2de>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a716:	689b      	ldr	r3, [r3, #8]
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	4798      	blx	r3
 800a71c:	4603      	mov	r3, r0
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d109      	bne.n	800a736 <USBH_Process+0x2d6>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2206      	movs	r2, #6
 800a726:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a72e:	2103      	movs	r1, #3
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	4798      	blx	r3
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a734:	e073      	b.n	800a81e <USBH_Process+0x3be>
            phost->gState = HOST_ABORT_STATE;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	220d      	movs	r2, #13
 800a73a:	701a      	strb	r2, [r3, #0]
      break;
 800a73c:	e06f      	b.n	800a81e <USBH_Process+0x3be>
          phost->gState = HOST_ABORT_STATE;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	220d      	movs	r2, #13
 800a742:	701a      	strb	r2, [r3, #0]
      break;
 800a744:	e06b      	b.n	800a81e <USBH_Process+0x3be>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d017      	beq.n	800a780 <USBH_Process+0x320>
      {
        status = phost->pActiveClass->Requests(phost);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a756:	691b      	ldr	r3, [r3, #16]
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	4798      	blx	r3
 800a75c:	4603      	mov	r3, r0
 800a75e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a760:	7bbb      	ldrb	r3, [r7, #14]
 800a762:	b2db      	uxtb	r3, r3
 800a764:	2b00      	cmp	r3, #0
 800a766:	d103      	bne.n	800a770 <USBH_Process+0x310>
        {
          phost->gState = HOST_CLASS;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	220b      	movs	r2, #11
 800a76c:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a76e:	e058      	b.n	800a822 <USBH_Process+0x3c2>
        else if (status == USBH_FAIL)
 800a770:	7bbb      	ldrb	r3, [r7, #14]
 800a772:	b2db      	uxtb	r3, r3
 800a774:	2b02      	cmp	r3, #2
 800a776:	d154      	bne.n	800a822 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	220d      	movs	r2, #13
 800a77c:	701a      	strb	r2, [r3, #0]
      break;
 800a77e:	e050      	b.n	800a822 <USBH_Process+0x3c2>
        phost->gState = HOST_ABORT_STATE;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	220d      	movs	r2, #13
 800a784:	701a      	strb	r2, [r3, #0]
      break;
 800a786:	e04c      	b.n	800a822 <USBH_Process+0x3c2>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d049      	beq.n	800a826 <USBH_Process+0x3c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a798:	695b      	ldr	r3, [r3, #20]
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	4798      	blx	r3
      }
      break;
 800a79e:	e042      	b.n	800a826 <USBH_Process+0x3c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	f7ff fd4b 	bl	800a244 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d009      	beq.n	800a7cc <USBH_Process+0x36c>
      {
        phost->pActiveClass->DeInit(phost);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a7be:	68db      	ldr	r3, [r3, #12]
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d005      	beq.n	800a7e2 <USBH_Process+0x382>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a7dc:	2105      	movs	r1, #5
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800a7e8:	b2db      	uxtb	r3, r3
 800a7ea:	2b01      	cmp	r3, #1
 800a7ec:	d107      	bne.n	800a7fe <USBH_Process+0x39e>
      {
        phost->device.is_ReEnumerated = 0U;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f7ff fe21 	bl	800a43e <USBH_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a7fc:	e014      	b.n	800a828 <USBH_Process+0x3c8>
        (void)USBH_LL_Start(phost);
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f001 fb20 	bl	800be44 <USBH_LL_Start>
      break;
 800a804:	e010      	b.n	800a828 <USBH_Process+0x3c8>

    case HOST_ABORT_STATE:
    default :
      break;
 800a806:	bf00      	nop
 800a808:	e00e      	b.n	800a828 <USBH_Process+0x3c8>
      break;
 800a80a:	bf00      	nop
 800a80c:	e00c      	b.n	800a828 <USBH_Process+0x3c8>
      break;
 800a80e:	bf00      	nop
 800a810:	e00a      	b.n	800a828 <USBH_Process+0x3c8>
    break;
 800a812:	bf00      	nop
 800a814:	e008      	b.n	800a828 <USBH_Process+0x3c8>
      break;
 800a816:	bf00      	nop
 800a818:	e006      	b.n	800a828 <USBH_Process+0x3c8>
      break;
 800a81a:	bf00      	nop
 800a81c:	e004      	b.n	800a828 <USBH_Process+0x3c8>
      break;
 800a81e:	bf00      	nop
 800a820:	e002      	b.n	800a828 <USBH_Process+0x3c8>
      break;
 800a822:	bf00      	nop
 800a824:	e000      	b.n	800a828 <USBH_Process+0x3c8>
      break;
 800a826:	bf00      	nop
  }
  return USBH_OK;
 800a828:	2300      	movs	r3, #0
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	3710      	adds	r7, #16
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}
 800a832:	bf00      	nop

0800a834 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b088      	sub	sp, #32
 800a838:	af04      	add	r7, sp, #16
 800a83a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a83c:	2301      	movs	r3, #1
 800a83e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a840:	2301      	movs	r3, #1
 800a842:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	785b      	ldrb	r3, [r3, #1]
 800a848:	2b07      	cmp	r3, #7
 800a84a:	f200 81bd 	bhi.w	800abc8 <USBH_HandleEnum+0x394>
 800a84e:	a201      	add	r2, pc, #4	@ (adr r2, 800a854 <USBH_HandleEnum+0x20>)
 800a850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a854:	0800a875 	.word	0x0800a875
 800a858:	0800a92f 	.word	0x0800a92f
 800a85c:	0800a999 	.word	0x0800a999
 800a860:	0800aa23 	.word	0x0800aa23
 800a864:	0800aa8d 	.word	0x0800aa8d
 800a868:	0800aafd 	.word	0x0800aafd
 800a86c:	0800ab43 	.word	0x0800ab43
 800a870:	0800ab89 	.word	0x0800ab89
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a874:	2108      	movs	r1, #8
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f000 fa50 	bl	800ad1c <USBH_Get_DevDesc>
 800a87c:	4603      	mov	r3, r0
 800a87e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a880:	7bbb      	ldrb	r3, [r7, #14]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d12e      	bne.n	800a8e4 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2201      	movs	r2, #1
 800a894:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	7919      	ldrb	r1, [r3, #4]
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a8a6:	687a      	ldr	r2, [r7, #4]
 800a8a8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a8aa:	9202      	str	r2, [sp, #8]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	9201      	str	r2, [sp, #4]
 800a8b0:	9300      	str	r3, [sp, #0]
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	2280      	movs	r2, #128	@ 0x80
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f001 f8e2 	bl	800ba80 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	7959      	ldrb	r1, [r3, #5]
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a8cc:	687a      	ldr	r2, [r7, #4]
 800a8ce:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a8d0:	9202      	str	r2, [sp, #8]
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	9201      	str	r2, [sp, #4]
 800a8d6:	9300      	str	r3, [sp, #0]
 800a8d8:	4603      	mov	r3, r0
 800a8da:	2200      	movs	r2, #0
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f001 f8cf 	bl	800ba80 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a8e2:	e173      	b.n	800abcc <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a8e4:	7bbb      	ldrb	r3, [r7, #14]
 800a8e6:	2b03      	cmp	r3, #3
 800a8e8:	f040 8170 	bne.w	800abcc <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a8f2:	3301      	adds	r3, #1
 800a8f4:	b2da      	uxtb	r2, r3
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a902:	2b03      	cmp	r3, #3
 800a904:	d903      	bls.n	800a90e <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	220d      	movs	r2, #13
 800a90a:	701a      	strb	r2, [r3, #0]
      break;
 800a90c:	e15e      	b.n	800abcc <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	795b      	ldrb	r3, [r3, #5]
 800a912:	4619      	mov	r1, r3
 800a914:	6878      	ldr	r0, [r7, #4]
 800a916:	f001 f903 	bl	800bb20 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	791b      	ldrb	r3, [r3, #4]
 800a91e:	4619      	mov	r1, r3
 800a920:	6878      	ldr	r0, [r7, #4]
 800a922:	f001 f8fd 	bl	800bb20 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2200      	movs	r2, #0
 800a92a:	701a      	strb	r2, [r3, #0]
      break;
 800a92c:	e14e      	b.n	800abcc <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a92e:	2112      	movs	r1, #18
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f000 f9f3 	bl	800ad1c <USBH_Get_DevDesc>
 800a936:	4603      	mov	r3, r0
 800a938:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a93a:	7bbb      	ldrb	r3, [r7, #14]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d103      	bne.n	800a948 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2202      	movs	r2, #2
 800a944:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a946:	e143      	b.n	800abd0 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a948:	7bbb      	ldrb	r3, [r7, #14]
 800a94a:	2b03      	cmp	r3, #3
 800a94c:	f040 8140 	bne.w	800abd0 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a956:	3301      	adds	r3, #1
 800a958:	b2da      	uxtb	r2, r3
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a966:	2b03      	cmp	r3, #3
 800a968:	d903      	bls.n	800a972 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	220d      	movs	r2, #13
 800a96e:	701a      	strb	r2, [r3, #0]
      break;
 800a970:	e12e      	b.n	800abd0 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	795b      	ldrb	r3, [r3, #5]
 800a976:	4619      	mov	r1, r3
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f001 f8d1 	bl	800bb20 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	791b      	ldrb	r3, [r3, #4]
 800a982:	4619      	mov	r1, r3
 800a984:	6878      	ldr	r0, [r7, #4]
 800a986:	f001 f8cb 	bl	800bb20 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2200      	movs	r2, #0
 800a98e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2200      	movs	r2, #0
 800a994:	701a      	strb	r2, [r3, #0]
      break;
 800a996:	e11b      	b.n	800abd0 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a998:	2101      	movs	r1, #1
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f000 fa7d 	bl	800ae9a <USBH_SetAddress>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a9a4:	7bbb      	ldrb	r3, [r7, #14]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d130      	bne.n	800aa0c <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800a9aa:	2002      	movs	r0, #2
 800a9ac:	f001 fbb1 	bl	800c112 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2201      	movs	r2, #1
 800a9b4:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2203      	movs	r2, #3
 800a9bc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	7919      	ldrb	r1, [r3, #4]
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a9ce:	687a      	ldr	r2, [r7, #4]
 800a9d0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a9d2:	9202      	str	r2, [sp, #8]
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	9201      	str	r2, [sp, #4]
 800a9d8:	9300      	str	r3, [sp, #0]
 800a9da:	4603      	mov	r3, r0
 800a9dc:	2280      	movs	r2, #128	@ 0x80
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f001 f84e 	bl	800ba80 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	7959      	ldrb	r1, [r3, #5]
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a9f4:	687a      	ldr	r2, [r7, #4]
 800a9f6:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a9f8:	9202      	str	r2, [sp, #8]
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	9201      	str	r2, [sp, #4]
 800a9fe:	9300      	str	r3, [sp, #0]
 800aa00:	4603      	mov	r3, r0
 800aa02:	2200      	movs	r2, #0
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f001 f83b 	bl	800ba80 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800aa0a:	e0e3      	b.n	800abd4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aa0c:	7bbb      	ldrb	r3, [r7, #14]
 800aa0e:	2b03      	cmp	r3, #3
 800aa10:	f040 80e0 	bne.w	800abd4 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	220d      	movs	r2, #13
 800aa18:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	705a      	strb	r2, [r3, #1]
      break;
 800aa20:	e0d8      	b.n	800abd4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800aa22:	2109      	movs	r1, #9
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	f000 f9a5 	bl	800ad74 <USBH_Get_CfgDesc>
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aa2e:	7bbb      	ldrb	r3, [r7, #14]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d103      	bne.n	800aa3c <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2204      	movs	r2, #4
 800aa38:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800aa3a:	e0cd      	b.n	800abd8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aa3c:	7bbb      	ldrb	r3, [r7, #14]
 800aa3e:	2b03      	cmp	r3, #3
 800aa40:	f040 80ca 	bne.w	800abd8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800aa4a:	3301      	adds	r3, #1
 800aa4c:	b2da      	uxtb	r2, r3
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800aa5a:	2b03      	cmp	r3, #3
 800aa5c:	d903      	bls.n	800aa66 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	220d      	movs	r2, #13
 800aa62:	701a      	strb	r2, [r3, #0]
      break;
 800aa64:	e0b8      	b.n	800abd8 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	795b      	ldrb	r3, [r3, #5]
 800aa6a:	4619      	mov	r1, r3
 800aa6c:	6878      	ldr	r0, [r7, #4]
 800aa6e:	f001 f857 	bl	800bb20 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	791b      	ldrb	r3, [r3, #4]
 800aa76:	4619      	mov	r1, r3
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f001 f851 	bl	800bb20 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2200      	movs	r2, #0
 800aa82:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2200      	movs	r2, #0
 800aa88:	701a      	strb	r2, [r3, #0]
      break;
 800aa8a:	e0a5      	b.n	800abd8 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800aa92:	4619      	mov	r1, r3
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f000 f96d 	bl	800ad74 <USBH_Get_CfgDesc>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aa9e:	7bbb      	ldrb	r3, [r7, #14]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d103      	bne.n	800aaac <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2205      	movs	r2, #5
 800aaa8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800aaaa:	e097      	b.n	800abdc <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aaac:	7bbb      	ldrb	r3, [r7, #14]
 800aaae:	2b03      	cmp	r3, #3
 800aab0:	f040 8094 	bne.w	800abdc <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800aaba:	3301      	adds	r3, #1
 800aabc:	b2da      	uxtb	r2, r3
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800aaca:	2b03      	cmp	r3, #3
 800aacc:	d903      	bls.n	800aad6 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	220d      	movs	r2, #13
 800aad2:	701a      	strb	r2, [r3, #0]
      break;
 800aad4:	e082      	b.n	800abdc <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	795b      	ldrb	r3, [r3, #5]
 800aada:	4619      	mov	r1, r3
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f001 f81f 	bl	800bb20 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	791b      	ldrb	r3, [r3, #4]
 800aae6:	4619      	mov	r1, r3
 800aae8:	6878      	ldr	r0, [r7, #4]
 800aaea:	f001 f819 	bl	800bb20 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	701a      	strb	r2, [r3, #0]
      break;
 800aafa:	e06f      	b.n	800abdc <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d019      	beq.n	800ab3a <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ab12:	23ff      	movs	r3, #255	@ 0xff
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f000 f957 	bl	800adc8 <USBH_Get_StringDesc>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ab1e:	7bbb      	ldrb	r3, [r7, #14]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d103      	bne.n	800ab2c <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2206      	movs	r2, #6
 800ab28:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800ab2a:	e059      	b.n	800abe0 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ab2c:	7bbb      	ldrb	r3, [r7, #14]
 800ab2e:	2b03      	cmp	r3, #3
 800ab30:	d156      	bne.n	800abe0 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2206      	movs	r2, #6
 800ab36:	705a      	strb	r2, [r3, #1]
      break;
 800ab38:	e052      	b.n	800abe0 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2206      	movs	r2, #6
 800ab3e:	705a      	strb	r2, [r3, #1]
      break;
 800ab40:	e04e      	b.n	800abe0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d019      	beq.n	800ab80 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ab58:	23ff      	movs	r3, #255	@ 0xff
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f000 f934 	bl	800adc8 <USBH_Get_StringDesc>
 800ab60:	4603      	mov	r3, r0
 800ab62:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ab64:	7bbb      	ldrb	r3, [r7, #14]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d103      	bne.n	800ab72 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	2207      	movs	r2, #7
 800ab6e:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800ab70:	e038      	b.n	800abe4 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ab72:	7bbb      	ldrb	r3, [r7, #14]
 800ab74:	2b03      	cmp	r3, #3
 800ab76:	d135      	bne.n	800abe4 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2207      	movs	r2, #7
 800ab7c:	705a      	strb	r2, [r3, #1]
      break;
 800ab7e:	e031      	b.n	800abe4 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2207      	movs	r2, #7
 800ab84:	705a      	strb	r2, [r3, #1]
      break;
 800ab86:	e02d      	b.n	800abe4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d017      	beq.n	800abc2 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ab9e:	23ff      	movs	r3, #255	@ 0xff
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f000 f911 	bl	800adc8 <USBH_Get_StringDesc>
 800aba6:	4603      	mov	r3, r0
 800aba8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800abaa:	7bbb      	ldrb	r3, [r7, #14]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d102      	bne.n	800abb6 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800abb0:	2300      	movs	r3, #0
 800abb2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800abb4:	e018      	b.n	800abe8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800abb6:	7bbb      	ldrb	r3, [r7, #14]
 800abb8:	2b03      	cmp	r3, #3
 800abba:	d115      	bne.n	800abe8 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800abbc:	2300      	movs	r3, #0
 800abbe:	73fb      	strb	r3, [r7, #15]
      break;
 800abc0:	e012      	b.n	800abe8 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800abc2:	2300      	movs	r3, #0
 800abc4:	73fb      	strb	r3, [r7, #15]
      break;
 800abc6:	e00f      	b.n	800abe8 <USBH_HandleEnum+0x3b4>

    default:
      break;
 800abc8:	bf00      	nop
 800abca:	e00e      	b.n	800abea <USBH_HandleEnum+0x3b6>
      break;
 800abcc:	bf00      	nop
 800abce:	e00c      	b.n	800abea <USBH_HandleEnum+0x3b6>
      break;
 800abd0:	bf00      	nop
 800abd2:	e00a      	b.n	800abea <USBH_HandleEnum+0x3b6>
      break;
 800abd4:	bf00      	nop
 800abd6:	e008      	b.n	800abea <USBH_HandleEnum+0x3b6>
      break;
 800abd8:	bf00      	nop
 800abda:	e006      	b.n	800abea <USBH_HandleEnum+0x3b6>
      break;
 800abdc:	bf00      	nop
 800abde:	e004      	b.n	800abea <USBH_HandleEnum+0x3b6>
      break;
 800abe0:	bf00      	nop
 800abe2:	e002      	b.n	800abea <USBH_HandleEnum+0x3b6>
      break;
 800abe4:	bf00      	nop
 800abe6:	e000      	b.n	800abea <USBH_HandleEnum+0x3b6>
      break;
 800abe8:	bf00      	nop
  }
  return Status;
 800abea:	7bfb      	ldrb	r3, [r7, #15]
}
 800abec:	4618      	mov	r0, r3
 800abee:	3710      	adds	r7, #16
 800abf0:	46bd      	mov	sp, r7
 800abf2:	bd80      	pop	{r7, pc}

0800abf4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800abf4:	b480      	push	{r7}
 800abf6:	b083      	sub	sp, #12
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
 800abfc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	683a      	ldr	r2, [r7, #0]
 800ac02:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800ac06:	bf00      	nop
 800ac08:	370c      	adds	r7, #12
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac10:	4770      	bx	lr

0800ac12 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800ac12:	b580      	push	{r7, lr}
 800ac14:	b082      	sub	sp, #8
 800ac16:	af00      	add	r7, sp, #0
 800ac18:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ac20:	1c5a      	adds	r2, r3, #1
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800ac28:	6878      	ldr	r0, [r7, #4]
 800ac2a:	f000 f804 	bl	800ac36 <USBH_HandleSof>
}
 800ac2e:	bf00      	nop
 800ac30:	3708      	adds	r7, #8
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bd80      	pop	{r7, pc}

0800ac36 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800ac36:	b580      	push	{r7, lr}
 800ac38:	b082      	sub	sp, #8
 800ac3a:	af00      	add	r7, sp, #0
 800ac3c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	781b      	ldrb	r3, [r3, #0]
 800ac42:	b2db      	uxtb	r3, r3
 800ac44:	2b0b      	cmp	r3, #11
 800ac46:	d10a      	bne.n	800ac5e <USBH_HandleSof+0x28>
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d005      	beq.n	800ac5e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ac58:	699b      	ldr	r3, [r3, #24]
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	4798      	blx	r3
  }
}
 800ac5e:	bf00      	nop
 800ac60:	3708      	adds	r7, #8
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bd80      	pop	{r7, pc}

0800ac66 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800ac66:	b480      	push	{r7}
 800ac68:	b083      	sub	sp, #12
 800ac6a:	af00      	add	r7, sp, #0
 800ac6c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2201      	movs	r2, #1
 800ac72:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
 800ac76:	bf00      	nop
}
 800ac78:	370c      	adds	r7, #12
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac80:	4770      	bx	lr

0800ac82 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800ac82:	b480      	push	{r7}
 800ac84:	b083      	sub	sp, #12
 800ac86:	af00      	add	r7, sp, #0
 800ac88:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	2201      	movs	r2, #1
 800ac96:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 800ac9a:	bf00      	nop
}
 800ac9c:	370c      	adds	r7, #12
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca4:	4770      	bx	lr

0800aca6 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800aca6:	b480      	push	{r7}
 800aca8:	b083      	sub	sp, #12
 800acaa:	af00      	add	r7, sp, #0
 800acac:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2201      	movs	r2, #1
 800acb2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2200      	movs	r2, #0
 800acba:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2200      	movs	r2, #0
 800acc2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800acc6:	2300      	movs	r3, #0
}
 800acc8:	4618      	mov	r0, r3
 800acca:	370c      	adds	r7, #12
 800accc:	46bd      	mov	sp, r7
 800acce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd2:	4770      	bx	lr

0800acd4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b082      	sub	sp, #8
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2201      	movs	r2, #1
 800ace0:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2200      	movs	r2, #0
 800ace8:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2200      	movs	r2, #0
 800acf0:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	f001 f8c0 	bl	800be7a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	791b      	ldrb	r3, [r3, #4]
 800acfe:	4619      	mov	r1, r3
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	f000 ff0d 	bl	800bb20 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	795b      	ldrb	r3, [r3, #5]
 800ad0a:	4619      	mov	r1, r3
 800ad0c:	6878      	ldr	r0, [r7, #4]
 800ad0e:	f000 ff07 	bl	800bb20 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800ad12:	2300      	movs	r3, #0
}
 800ad14:	4618      	mov	r0, r3
 800ad16:	3708      	adds	r7, #8
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bd80      	pop	{r7, pc}

0800ad1c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b086      	sub	sp, #24
 800ad20:	af02      	add	r7, sp, #8
 800ad22:	6078      	str	r0, [r7, #4]
 800ad24:	460b      	mov	r3, r1
 800ad26:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800ad28:	887b      	ldrh	r3, [r7, #2]
 800ad2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad2e:	d901      	bls.n	800ad34 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800ad30:	2303      	movs	r3, #3
 800ad32:	e01b      	b.n	800ad6c <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800ad3a:	887b      	ldrh	r3, [r7, #2]
 800ad3c:	9300      	str	r3, [sp, #0]
 800ad3e:	4613      	mov	r3, r2
 800ad40:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ad44:	2100      	movs	r1, #0
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	f000 f872 	bl	800ae30 <USBH_GetDescriptor>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800ad50:	7bfb      	ldrb	r3, [r7, #15]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d109      	bne.n	800ad6a <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800ad5c:	887a      	ldrh	r2, [r7, #2]
 800ad5e:	4619      	mov	r1, r3
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f000 f929 	bl	800afb8 <USBH_ParseDevDesc>
 800ad66:	4603      	mov	r3, r0
 800ad68:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ad6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	3710      	adds	r7, #16
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}

0800ad74 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b086      	sub	sp, #24
 800ad78:	af02      	add	r7, sp, #8
 800ad7a:	6078      	str	r0, [r7, #4]
 800ad7c:	460b      	mov	r3, r1
 800ad7e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	331c      	adds	r3, #28
 800ad84:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800ad86:	887b      	ldrh	r3, [r7, #2]
 800ad88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad8c:	d901      	bls.n	800ad92 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800ad8e:	2303      	movs	r3, #3
 800ad90:	e016      	b.n	800adc0 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800ad92:	887b      	ldrh	r3, [r7, #2]
 800ad94:	9300      	str	r3, [sp, #0]
 800ad96:	68bb      	ldr	r3, [r7, #8]
 800ad98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ad9c:	2100      	movs	r1, #0
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	f000 f846 	bl	800ae30 <USBH_GetDescriptor>
 800ada4:	4603      	mov	r3, r0
 800ada6:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800ada8:	7bfb      	ldrb	r3, [r7, #15]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d107      	bne.n	800adbe <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800adae:	887b      	ldrh	r3, [r7, #2]
 800adb0:	461a      	mov	r2, r3
 800adb2:	68b9      	ldr	r1, [r7, #8]
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f000 f9af 	bl	800b118 <USBH_ParseCfgDesc>
 800adba:	4603      	mov	r3, r0
 800adbc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800adbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	3710      	adds	r7, #16
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}

0800adc8 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b088      	sub	sp, #32
 800adcc:	af02      	add	r7, sp, #8
 800adce:	60f8      	str	r0, [r7, #12]
 800add0:	607a      	str	r2, [r7, #4]
 800add2:	461a      	mov	r2, r3
 800add4:	460b      	mov	r3, r1
 800add6:	72fb      	strb	r3, [r7, #11]
 800add8:	4613      	mov	r3, r2
 800adda:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800addc:	893b      	ldrh	r3, [r7, #8]
 800adde:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ade2:	d802      	bhi.n	800adea <USBH_Get_StringDesc+0x22>
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d101      	bne.n	800adee <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800adea:	2303      	movs	r3, #3
 800adec:	e01c      	b.n	800ae28 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800adee:	7afb      	ldrb	r3, [r7, #11]
 800adf0:	b29b      	uxth	r3, r3
 800adf2:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800adf6:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800adfe:	893b      	ldrh	r3, [r7, #8]
 800ae00:	9300      	str	r3, [sp, #0]
 800ae02:	460b      	mov	r3, r1
 800ae04:	2100      	movs	r1, #0
 800ae06:	68f8      	ldr	r0, [r7, #12]
 800ae08:	f000 f812 	bl	800ae30 <USBH_GetDescriptor>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800ae10:	7dfb      	ldrb	r3, [r7, #23]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d107      	bne.n	800ae26 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800ae1c:	893a      	ldrh	r2, [r7, #8]
 800ae1e:	6879      	ldr	r1, [r7, #4]
 800ae20:	4618      	mov	r0, r3
 800ae22:	f000 fb8c 	bl	800b53e <USBH_ParseStringDesc>
  }

  return status;
 800ae26:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae28:	4618      	mov	r0, r3
 800ae2a:	3718      	adds	r7, #24
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd80      	pop	{r7, pc}

0800ae30 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b084      	sub	sp, #16
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	60f8      	str	r0, [r7, #12]
 800ae38:	607b      	str	r3, [r7, #4]
 800ae3a:	460b      	mov	r3, r1
 800ae3c:	72fb      	strb	r3, [r7, #11]
 800ae3e:	4613      	mov	r3, r2
 800ae40:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	789b      	ldrb	r3, [r3, #2]
 800ae46:	2b01      	cmp	r3, #1
 800ae48:	d11c      	bne.n	800ae84 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800ae4a:	7afb      	ldrb	r3, [r7, #11]
 800ae4c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ae50:	b2da      	uxtb	r2, r3
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	2206      	movs	r2, #6
 800ae5a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	893a      	ldrh	r2, [r7, #8]
 800ae60:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800ae62:	893b      	ldrh	r3, [r7, #8]
 800ae64:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ae68:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ae6c:	d104      	bne.n	800ae78 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	f240 4209 	movw	r2, #1033	@ 0x409
 800ae74:	829a      	strh	r2, [r3, #20]
 800ae76:	e002      	b.n	800ae7e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	8b3a      	ldrh	r2, [r7, #24]
 800ae82:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800ae84:	8b3b      	ldrh	r3, [r7, #24]
 800ae86:	461a      	mov	r2, r3
 800ae88:	6879      	ldr	r1, [r7, #4]
 800ae8a:	68f8      	ldr	r0, [r7, #12]
 800ae8c:	f000 fba4 	bl	800b5d8 <USBH_CtlReq>
 800ae90:	4603      	mov	r3, r0
}
 800ae92:	4618      	mov	r0, r3
 800ae94:	3710      	adds	r7, #16
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bd80      	pop	{r7, pc}

0800ae9a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800ae9a:	b580      	push	{r7, lr}
 800ae9c:	b082      	sub	sp, #8
 800ae9e:	af00      	add	r7, sp, #0
 800aea0:	6078      	str	r0, [r7, #4]
 800aea2:	460b      	mov	r3, r1
 800aea4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	789b      	ldrb	r3, [r3, #2]
 800aeaa:	2b01      	cmp	r3, #1
 800aeac:	d10f      	bne.n	800aece <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2205      	movs	r2, #5
 800aeb8:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800aeba:	78fb      	ldrb	r3, [r7, #3]
 800aebc:	b29a      	uxth	r2, r3
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2200      	movs	r2, #0
 800aec6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2200      	movs	r2, #0
 800aecc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800aece:	2200      	movs	r2, #0
 800aed0:	2100      	movs	r1, #0
 800aed2:	6878      	ldr	r0, [r7, #4]
 800aed4:	f000 fb80 	bl	800b5d8 <USBH_CtlReq>
 800aed8:	4603      	mov	r3, r0
}
 800aeda:	4618      	mov	r0, r3
 800aedc:	3708      	adds	r7, #8
 800aede:	46bd      	mov	sp, r7
 800aee0:	bd80      	pop	{r7, pc}

0800aee2 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800aee2:	b580      	push	{r7, lr}
 800aee4:	b082      	sub	sp, #8
 800aee6:	af00      	add	r7, sp, #0
 800aee8:	6078      	str	r0, [r7, #4]
 800aeea:	460b      	mov	r3, r1
 800aeec:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	789b      	ldrb	r3, [r3, #2]
 800aef2:	2b01      	cmp	r3, #1
 800aef4:	d10e      	bne.n	800af14 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2200      	movs	r2, #0
 800aefa:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2209      	movs	r2, #9
 800af00:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	887a      	ldrh	r2, [r7, #2]
 800af06:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2200      	movs	r2, #0
 800af0c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	2200      	movs	r2, #0
 800af12:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800af14:	2200      	movs	r2, #0
 800af16:	2100      	movs	r1, #0
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f000 fb5d 	bl	800b5d8 <USBH_CtlReq>
 800af1e:	4603      	mov	r3, r0
}
 800af20:	4618      	mov	r0, r3
 800af22:	3708      	adds	r7, #8
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}

0800af28 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b082      	sub	sp, #8
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
 800af30:	460b      	mov	r3, r1
 800af32:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	789b      	ldrb	r3, [r3, #2]
 800af38:	2b01      	cmp	r3, #1
 800af3a:	d10f      	bne.n	800af5c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2200      	movs	r2, #0
 800af40:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2203      	movs	r2, #3
 800af46:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800af48:	78fb      	ldrb	r3, [r7, #3]
 800af4a:	b29a      	uxth	r2, r3
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2200      	movs	r2, #0
 800af54:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2200      	movs	r2, #0
 800af5a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800af5c:	2200      	movs	r2, #0
 800af5e:	2100      	movs	r1, #0
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	f000 fb39 	bl	800b5d8 <USBH_CtlReq>
 800af66:	4603      	mov	r3, r0
}
 800af68:	4618      	mov	r0, r3
 800af6a:	3708      	adds	r7, #8
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bd80      	pop	{r7, pc}

0800af70 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b082      	sub	sp, #8
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
 800af78:	460b      	mov	r3, r1
 800af7a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	789b      	ldrb	r3, [r3, #2]
 800af80:	2b01      	cmp	r3, #1
 800af82:	d10f      	bne.n	800afa4 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2202      	movs	r2, #2
 800af88:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	2201      	movs	r2, #1
 800af8e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2200      	movs	r2, #0
 800af94:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800af96:	78fb      	ldrb	r3, [r7, #3]
 800af98:	b29a      	uxth	r2, r3
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2200      	movs	r2, #0
 800afa2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800afa4:	2200      	movs	r2, #0
 800afa6:	2100      	movs	r1, #0
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f000 fb15 	bl	800b5d8 <USBH_CtlReq>
 800afae:	4603      	mov	r3, r0
}
 800afb0:	4618      	mov	r0, r3
 800afb2:	3708      	adds	r7, #8
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}

0800afb8 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800afb8:	b480      	push	{r7}
 800afba:	b087      	sub	sp, #28
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	60f8      	str	r0, [r7, #12]
 800afc0:	60b9      	str	r1, [r7, #8]
 800afc2:	4613      	mov	r3, r2
 800afc4:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800afcc:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800afce:	2300      	movs	r3, #0
 800afd0:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d101      	bne.n	800afdc <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800afd8:	2302      	movs	r3, #2
 800afda:	e094      	b.n	800b106 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800afdc:	68bb      	ldr	r3, [r7, #8]
 800afde:	781a      	ldrb	r2, [r3, #0]
 800afe0:	693b      	ldr	r3, [r7, #16]
 800afe2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	785a      	ldrb	r2, [r3, #1]
 800afe8:	693b      	ldr	r3, [r7, #16]
 800afea:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	3302      	adds	r3, #2
 800aff0:	781b      	ldrb	r3, [r3, #0]
 800aff2:	461a      	mov	r2, r3
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	3303      	adds	r3, #3
 800aff8:	781b      	ldrb	r3, [r3, #0]
 800affa:	021b      	lsls	r3, r3, #8
 800affc:	b29b      	uxth	r3, r3
 800affe:	4313      	orrs	r3, r2
 800b000:	b29a      	uxth	r2, r3
 800b002:	693b      	ldr	r3, [r7, #16]
 800b004:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800b006:	68bb      	ldr	r3, [r7, #8]
 800b008:	791a      	ldrb	r2, [r3, #4]
 800b00a:	693b      	ldr	r3, [r7, #16]
 800b00c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800b00e:	68bb      	ldr	r3, [r7, #8]
 800b010:	795a      	ldrb	r2, [r3, #5]
 800b012:	693b      	ldr	r3, [r7, #16]
 800b014:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	799a      	ldrb	r2, [r3, #6]
 800b01a:	693b      	ldr	r3, [r7, #16]
 800b01c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	79da      	ldrb	r2, [r3, #7]
 800b022:	693b      	ldr	r3, [r7, #16]
 800b024:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d004      	beq.n	800b03a <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800b036:	2b01      	cmp	r3, #1
 800b038:	d11b      	bne.n	800b072 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800b03a:	693b      	ldr	r3, [r7, #16]
 800b03c:	79db      	ldrb	r3, [r3, #7]
 800b03e:	2b20      	cmp	r3, #32
 800b040:	dc0f      	bgt.n	800b062 <USBH_ParseDevDesc+0xaa>
 800b042:	2b08      	cmp	r3, #8
 800b044:	db0f      	blt.n	800b066 <USBH_ParseDevDesc+0xae>
 800b046:	3b08      	subs	r3, #8
 800b048:	4a32      	ldr	r2, [pc, #200]	@ (800b114 <USBH_ParseDevDesc+0x15c>)
 800b04a:	fa22 f303 	lsr.w	r3, r2, r3
 800b04e:	f003 0301 	and.w	r3, r3, #1
 800b052:	2b00      	cmp	r3, #0
 800b054:	bf14      	ite	ne
 800b056:	2301      	movne	r3, #1
 800b058:	2300      	moveq	r3, #0
 800b05a:	b2db      	uxtb	r3, r3
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d106      	bne.n	800b06e <USBH_ParseDevDesc+0xb6>
 800b060:	e001      	b.n	800b066 <USBH_ParseDevDesc+0xae>
 800b062:	2b40      	cmp	r3, #64	@ 0x40
 800b064:	d003      	beq.n	800b06e <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800b066:	693b      	ldr	r3, [r7, #16]
 800b068:	2208      	movs	r2, #8
 800b06a:	71da      	strb	r2, [r3, #7]
        break;
 800b06c:	e000      	b.n	800b070 <USBH_ParseDevDesc+0xb8>
        break;
 800b06e:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800b070:	e00e      	b.n	800b090 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b078:	2b02      	cmp	r3, #2
 800b07a:	d107      	bne.n	800b08c <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800b07c:	693b      	ldr	r3, [r7, #16]
 800b07e:	79db      	ldrb	r3, [r3, #7]
 800b080:	2b08      	cmp	r3, #8
 800b082:	d005      	beq.n	800b090 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800b084:	693b      	ldr	r3, [r7, #16]
 800b086:	2208      	movs	r2, #8
 800b088:	71da      	strb	r2, [r3, #7]
 800b08a:	e001      	b.n	800b090 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800b08c:	2303      	movs	r3, #3
 800b08e:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800b090:	88fb      	ldrh	r3, [r7, #6]
 800b092:	2b08      	cmp	r3, #8
 800b094:	d936      	bls.n	800b104 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800b096:	68bb      	ldr	r3, [r7, #8]
 800b098:	3308      	adds	r3, #8
 800b09a:	781b      	ldrb	r3, [r3, #0]
 800b09c:	461a      	mov	r2, r3
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	3309      	adds	r3, #9
 800b0a2:	781b      	ldrb	r3, [r3, #0]
 800b0a4:	021b      	lsls	r3, r3, #8
 800b0a6:	b29b      	uxth	r3, r3
 800b0a8:	4313      	orrs	r3, r2
 800b0aa:	b29a      	uxth	r2, r3
 800b0ac:	693b      	ldr	r3, [r7, #16]
 800b0ae:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	330a      	adds	r3, #10
 800b0b4:	781b      	ldrb	r3, [r3, #0]
 800b0b6:	461a      	mov	r2, r3
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	330b      	adds	r3, #11
 800b0bc:	781b      	ldrb	r3, [r3, #0]
 800b0be:	021b      	lsls	r3, r3, #8
 800b0c0:	b29b      	uxth	r3, r3
 800b0c2:	4313      	orrs	r3, r2
 800b0c4:	b29a      	uxth	r2, r3
 800b0c6:	693b      	ldr	r3, [r7, #16]
 800b0c8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	330c      	adds	r3, #12
 800b0ce:	781b      	ldrb	r3, [r3, #0]
 800b0d0:	461a      	mov	r2, r3
 800b0d2:	68bb      	ldr	r3, [r7, #8]
 800b0d4:	330d      	adds	r3, #13
 800b0d6:	781b      	ldrb	r3, [r3, #0]
 800b0d8:	021b      	lsls	r3, r3, #8
 800b0da:	b29b      	uxth	r3, r3
 800b0dc:	4313      	orrs	r3, r2
 800b0de:	b29a      	uxth	r2, r3
 800b0e0:	693b      	ldr	r3, [r7, #16]
 800b0e2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800b0e4:	68bb      	ldr	r3, [r7, #8]
 800b0e6:	7b9a      	ldrb	r2, [r3, #14]
 800b0e8:	693b      	ldr	r3, [r7, #16]
 800b0ea:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	7bda      	ldrb	r2, [r3, #15]
 800b0f0:	693b      	ldr	r3, [r7, #16]
 800b0f2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	7c1a      	ldrb	r2, [r3, #16]
 800b0f8:	693b      	ldr	r3, [r7, #16]
 800b0fa:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	7c5a      	ldrb	r2, [r3, #17]
 800b100:	693b      	ldr	r3, [r7, #16]
 800b102:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800b104:	7dfb      	ldrb	r3, [r7, #23]
}
 800b106:	4618      	mov	r0, r3
 800b108:	371c      	adds	r7, #28
 800b10a:	46bd      	mov	sp, r7
 800b10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b110:	4770      	bx	lr
 800b112:	bf00      	nop
 800b114:	01000101 	.word	0x01000101

0800b118 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b08c      	sub	sp, #48	@ 0x30
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	60f8      	str	r0, [r7, #12]
 800b120:	60b9      	str	r1, [r7, #8]
 800b122:	4613      	mov	r3, r2
 800b124:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800b12c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800b12e:	2300      	movs	r3, #0
 800b130:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b134:	2300      	movs	r3, #0
 800b136:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800b13a:	2300      	movs	r3, #0
 800b13c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d101      	bne.n	800b14a <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800b146:	2302      	movs	r3, #2
 800b148:	e0de      	b.n	800b308 <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b14a:	68bb      	ldr	r3, [r7, #8]
 800b14c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800b14e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b150:	781b      	ldrb	r3, [r3, #0]
 800b152:	2b09      	cmp	r3, #9
 800b154:	d002      	beq.n	800b15c <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800b156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b158:	2209      	movs	r2, #9
 800b15a:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	781a      	ldrb	r2, [r3, #0]
 800b160:	6a3b      	ldr	r3, [r7, #32]
 800b162:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	785a      	ldrb	r2, [r3, #1]
 800b168:	6a3b      	ldr	r3, [r7, #32]
 800b16a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	3302      	adds	r3, #2
 800b170:	781b      	ldrb	r3, [r3, #0]
 800b172:	461a      	mov	r2, r3
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	3303      	adds	r3, #3
 800b178:	781b      	ldrb	r3, [r3, #0]
 800b17a:	021b      	lsls	r3, r3, #8
 800b17c:	b29b      	uxth	r3, r3
 800b17e:	4313      	orrs	r3, r2
 800b180:	b29b      	uxth	r3, r3
 800b182:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b186:	bf28      	it	cs
 800b188:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800b18c:	b29a      	uxth	r2, r3
 800b18e:	6a3b      	ldr	r3, [r7, #32]
 800b190:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	791a      	ldrb	r2, [r3, #4]
 800b196:	6a3b      	ldr	r3, [r7, #32]
 800b198:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800b19a:	68bb      	ldr	r3, [r7, #8]
 800b19c:	795a      	ldrb	r2, [r3, #5]
 800b19e:	6a3b      	ldr	r3, [r7, #32]
 800b1a0:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	799a      	ldrb	r2, [r3, #6]
 800b1a6:	6a3b      	ldr	r3, [r7, #32]
 800b1a8:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800b1aa:	68bb      	ldr	r3, [r7, #8]
 800b1ac:	79da      	ldrb	r2, [r3, #7]
 800b1ae:	6a3b      	ldr	r3, [r7, #32]
 800b1b0:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	7a1a      	ldrb	r2, [r3, #8]
 800b1b6:	6a3b      	ldr	r3, [r7, #32]
 800b1b8:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b1ba:	88fb      	ldrh	r3, [r7, #6]
 800b1bc:	2b09      	cmp	r3, #9
 800b1be:	f240 80a1 	bls.w	800b304 <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 800b1c2:	2309      	movs	r3, #9
 800b1c4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b1ca:	e085      	b.n	800b2d8 <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b1cc:	f107 0316 	add.w	r3, r7, #22
 800b1d0:	4619      	mov	r1, r3
 800b1d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b1d4:	f000 f9e6 	bl	800b5a4 <USBH_GetNextDesc>
 800b1d8:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800b1da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1dc:	785b      	ldrb	r3, [r3, #1]
 800b1de:	2b04      	cmp	r3, #4
 800b1e0:	d17a      	bne.n	800b2d8 <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800b1e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1e4:	781b      	ldrb	r3, [r3, #0]
 800b1e6:	2b09      	cmp	r3, #9
 800b1e8:	d002      	beq.n	800b1f0 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800b1ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1ec:	2209      	movs	r2, #9
 800b1ee:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800b1f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b1f4:	221a      	movs	r2, #26
 800b1f6:	fb02 f303 	mul.w	r3, r2, r3
 800b1fa:	3308      	adds	r3, #8
 800b1fc:	6a3a      	ldr	r2, [r7, #32]
 800b1fe:	4413      	add	r3, r2
 800b200:	3302      	adds	r3, #2
 800b202:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b204:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b206:	69f8      	ldr	r0, [r7, #28]
 800b208:	f000 f882 	bl	800b310 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b20c:	2300      	movs	r3, #0
 800b20e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800b212:	2300      	movs	r3, #0
 800b214:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b216:	e043      	b.n	800b2a0 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b218:	f107 0316 	add.w	r3, r7, #22
 800b21c:	4619      	mov	r1, r3
 800b21e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b220:	f000 f9c0 	bl	800b5a4 <USBH_GetNextDesc>
 800b224:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b228:	785b      	ldrb	r3, [r3, #1]
 800b22a:	2b05      	cmp	r3, #5
 800b22c:	d138      	bne.n	800b2a0 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800b22e:	69fb      	ldr	r3, [r7, #28]
 800b230:	795b      	ldrb	r3, [r3, #5]
 800b232:	2b01      	cmp	r3, #1
 800b234:	d113      	bne.n	800b25e <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800b236:	69fb      	ldr	r3, [r7, #28]
 800b238:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800b23a:	2b02      	cmp	r3, #2
 800b23c:	d003      	beq.n	800b246 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800b23e:	69fb      	ldr	r3, [r7, #28]
 800b240:	799b      	ldrb	r3, [r3, #6]
 800b242:	2b03      	cmp	r3, #3
 800b244:	d10b      	bne.n	800b25e <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b246:	69fb      	ldr	r3, [r7, #28]
 800b248:	79db      	ldrb	r3, [r3, #7]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d10b      	bne.n	800b266 <USBH_ParseCfgDesc+0x14e>
 800b24e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b250:	781b      	ldrb	r3, [r3, #0]
 800b252:	2b09      	cmp	r3, #9
 800b254:	d007      	beq.n	800b266 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800b256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b258:	2209      	movs	r2, #9
 800b25a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b25c:	e003      	b.n	800b266 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800b25e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b260:	2207      	movs	r2, #7
 800b262:	701a      	strb	r2, [r3, #0]
 800b264:	e000      	b.n	800b268 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b266:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b268:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b26c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b270:	3201      	adds	r2, #1
 800b272:	00d2      	lsls	r2, r2, #3
 800b274:	211a      	movs	r1, #26
 800b276:	fb01 f303 	mul.w	r3, r1, r3
 800b27a:	4413      	add	r3, r2
 800b27c:	3308      	adds	r3, #8
 800b27e:	6a3a      	ldr	r2, [r7, #32]
 800b280:	4413      	add	r3, r2
 800b282:	3304      	adds	r3, #4
 800b284:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800b286:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b288:	69b9      	ldr	r1, [r7, #24]
 800b28a:	68f8      	ldr	r0, [r7, #12]
 800b28c:	f000 f86f 	bl	800b36e <USBH_ParseEPDesc>
 800b290:	4603      	mov	r3, r0
 800b292:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800b296:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b29a:	3301      	adds	r3, #1
 800b29c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b2a0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b2a4:	2b01      	cmp	r3, #1
 800b2a6:	d80a      	bhi.n	800b2be <USBH_ParseCfgDesc+0x1a6>
 800b2a8:	69fb      	ldr	r3, [r7, #28]
 800b2aa:	791b      	ldrb	r3, [r3, #4]
 800b2ac:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b2b0:	429a      	cmp	r2, r3
 800b2b2:	d204      	bcs.n	800b2be <USBH_ParseCfgDesc+0x1a6>
 800b2b4:	6a3b      	ldr	r3, [r7, #32]
 800b2b6:	885a      	ldrh	r2, [r3, #2]
 800b2b8:	8afb      	ldrh	r3, [r7, #22]
 800b2ba:	429a      	cmp	r2, r3
 800b2bc:	d8ac      	bhi.n	800b218 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800b2be:	69fb      	ldr	r3, [r7, #28]
 800b2c0:	791b      	ldrb	r3, [r3, #4]
 800b2c2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b2c6:	429a      	cmp	r2, r3
 800b2c8:	d201      	bcs.n	800b2ce <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 800b2ca:	2303      	movs	r3, #3
 800b2cc:	e01c      	b.n	800b308 <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 800b2ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b2d2:	3301      	adds	r3, #1
 800b2d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b2d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b2dc:	2b01      	cmp	r3, #1
 800b2de:	d805      	bhi.n	800b2ec <USBH_ParseCfgDesc+0x1d4>
 800b2e0:	6a3b      	ldr	r3, [r7, #32]
 800b2e2:	885a      	ldrh	r2, [r3, #2]
 800b2e4:	8afb      	ldrh	r3, [r7, #22]
 800b2e6:	429a      	cmp	r2, r3
 800b2e8:	f63f af70 	bhi.w	800b1cc <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800b2ec:	6a3b      	ldr	r3, [r7, #32]
 800b2ee:	791b      	ldrb	r3, [r3, #4]
 800b2f0:	2b02      	cmp	r3, #2
 800b2f2:	bf28      	it	cs
 800b2f4:	2302      	movcs	r3, #2
 800b2f6:	b2db      	uxtb	r3, r3
 800b2f8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b2fc:	429a      	cmp	r2, r3
 800b2fe:	d201      	bcs.n	800b304 <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 800b300:	2303      	movs	r3, #3
 800b302:	e001      	b.n	800b308 <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 800b304:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b308:	4618      	mov	r0, r3
 800b30a:	3730      	adds	r7, #48	@ 0x30
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}

0800b310 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800b310:	b480      	push	{r7}
 800b312:	b083      	sub	sp, #12
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
 800b318:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	781a      	ldrb	r2, [r3, #0]
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	785a      	ldrb	r2, [r3, #1]
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	789a      	ldrb	r2, [r3, #2]
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	78da      	ldrb	r2, [r3, #3]
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	791a      	ldrb	r2, [r3, #4]
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	795a      	ldrb	r2, [r3, #5]
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	799a      	ldrb	r2, [r3, #6]
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	79da      	ldrb	r2, [r3, #7]
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	7a1a      	ldrb	r2, [r3, #8]
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	721a      	strb	r2, [r3, #8]
}
 800b362:	bf00      	nop
 800b364:	370c      	adds	r7, #12
 800b366:	46bd      	mov	sp, r7
 800b368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36c:	4770      	bx	lr

0800b36e <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800b36e:	b480      	push	{r7}
 800b370:	b087      	sub	sp, #28
 800b372:	af00      	add	r7, sp, #0
 800b374:	60f8      	str	r0, [r7, #12]
 800b376:	60b9      	str	r1, [r7, #8]
 800b378:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800b37a:	2300      	movs	r3, #0
 800b37c:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	781a      	ldrb	r2, [r3, #0]
 800b382:	68bb      	ldr	r3, [r7, #8]
 800b384:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	785a      	ldrb	r2, [r3, #1]
 800b38a:	68bb      	ldr	r3, [r7, #8]
 800b38c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	789a      	ldrb	r2, [r3, #2]
 800b392:	68bb      	ldr	r3, [r7, #8]
 800b394:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	78da      	ldrb	r2, [r3, #3]
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	3304      	adds	r3, #4
 800b3a2:	781b      	ldrb	r3, [r3, #0]
 800b3a4:	461a      	mov	r2, r3
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	3305      	adds	r3, #5
 800b3aa:	781b      	ldrb	r3, [r3, #0]
 800b3ac:	021b      	lsls	r3, r3, #8
 800b3ae:	b29b      	uxth	r3, r3
 800b3b0:	4313      	orrs	r3, r2
 800b3b2:	b29a      	uxth	r2, r3
 800b3b4:	68bb      	ldr	r3, [r7, #8]
 800b3b6:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	799a      	ldrb	r2, [r3, #6]
 800b3bc:	68bb      	ldr	r3, [r7, #8]
 800b3be:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	889b      	ldrh	r3, [r3, #4]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d009      	beq.n	800b3dc <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800b3c8:	68bb      	ldr	r3, [r7, #8]
 800b3ca:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800b3cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b3d0:	d804      	bhi.n	800b3dc <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800b3d2:	68bb      	ldr	r3, [r7, #8]
 800b3d4:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800b3d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b3da:	d901      	bls.n	800b3e0 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800b3dc:	2303      	movs	r3, #3
 800b3de:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d136      	bne.n	800b458 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800b3ea:	68bb      	ldr	r3, [r7, #8]
 800b3ec:	78db      	ldrb	r3, [r3, #3]
 800b3ee:	f003 0303 	and.w	r3, r3, #3
 800b3f2:	2b02      	cmp	r3, #2
 800b3f4:	d108      	bne.n	800b408 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800b3f6:	68bb      	ldr	r3, [r7, #8]
 800b3f8:	889b      	ldrh	r3, [r3, #4]
 800b3fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b3fe:	f240 8097 	bls.w	800b530 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b402:	2303      	movs	r3, #3
 800b404:	75fb      	strb	r3, [r7, #23]
 800b406:	e093      	b.n	800b530 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800b408:	68bb      	ldr	r3, [r7, #8]
 800b40a:	78db      	ldrb	r3, [r3, #3]
 800b40c:	f003 0303 	and.w	r3, r3, #3
 800b410:	2b00      	cmp	r3, #0
 800b412:	d107      	bne.n	800b424 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	889b      	ldrh	r3, [r3, #4]
 800b418:	2b40      	cmp	r3, #64	@ 0x40
 800b41a:	f240 8089 	bls.w	800b530 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b41e:	2303      	movs	r3, #3
 800b420:	75fb      	strb	r3, [r7, #23]
 800b422:	e085      	b.n	800b530 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b424:	68bb      	ldr	r3, [r7, #8]
 800b426:	78db      	ldrb	r3, [r3, #3]
 800b428:	f003 0303 	and.w	r3, r3, #3
 800b42c:	2b01      	cmp	r3, #1
 800b42e:	d005      	beq.n	800b43c <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800b430:	68bb      	ldr	r3, [r7, #8]
 800b432:	78db      	ldrb	r3, [r3, #3]
 800b434:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b438:	2b03      	cmp	r3, #3
 800b43a:	d10a      	bne.n	800b452 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	799b      	ldrb	r3, [r3, #6]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d003      	beq.n	800b44c <USBH_ParseEPDesc+0xde>
 800b444:	68bb      	ldr	r3, [r7, #8]
 800b446:	799b      	ldrb	r3, [r3, #6]
 800b448:	2b10      	cmp	r3, #16
 800b44a:	d970      	bls.n	800b52e <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800b44c:	2303      	movs	r3, #3
 800b44e:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b450:	e06d      	b.n	800b52e <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800b452:	2303      	movs	r3, #3
 800b454:	75fb      	strb	r3, [r7, #23]
 800b456:	e06b      	b.n	800b530 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b45e:	2b01      	cmp	r3, #1
 800b460:	d13c      	bne.n	800b4dc <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	78db      	ldrb	r3, [r3, #3]
 800b466:	f003 0303 	and.w	r3, r3, #3
 800b46a:	2b02      	cmp	r3, #2
 800b46c:	d005      	beq.n	800b47a <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800b46e:	68bb      	ldr	r3, [r7, #8]
 800b470:	78db      	ldrb	r3, [r3, #3]
 800b472:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800b476:	2b00      	cmp	r3, #0
 800b478:	d106      	bne.n	800b488 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800b47a:	68bb      	ldr	r3, [r7, #8]
 800b47c:	889b      	ldrh	r3, [r3, #4]
 800b47e:	2b40      	cmp	r3, #64	@ 0x40
 800b480:	d956      	bls.n	800b530 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b482:	2303      	movs	r3, #3
 800b484:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800b486:	e053      	b.n	800b530 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	78db      	ldrb	r3, [r3, #3]
 800b48c:	f003 0303 	and.w	r3, r3, #3
 800b490:	2b01      	cmp	r3, #1
 800b492:	d10e      	bne.n	800b4b2 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800b494:	68bb      	ldr	r3, [r7, #8]
 800b496:	799b      	ldrb	r3, [r3, #6]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d007      	beq.n	800b4ac <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800b49c:	68bb      	ldr	r3, [r7, #8]
 800b49e:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800b4a0:	2b10      	cmp	r3, #16
 800b4a2:	d803      	bhi.n	800b4ac <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800b4a8:	2b40      	cmp	r3, #64	@ 0x40
 800b4aa:	d941      	bls.n	800b530 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b4ac:	2303      	movs	r3, #3
 800b4ae:	75fb      	strb	r3, [r7, #23]
 800b4b0:	e03e      	b.n	800b530 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800b4b2:	68bb      	ldr	r3, [r7, #8]
 800b4b4:	78db      	ldrb	r3, [r3, #3]
 800b4b6:	f003 0303 	and.w	r3, r3, #3
 800b4ba:	2b03      	cmp	r3, #3
 800b4bc:	d10b      	bne.n	800b4d6 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800b4be:	68bb      	ldr	r3, [r7, #8]
 800b4c0:	799b      	ldrb	r3, [r3, #6]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d004      	beq.n	800b4d0 <USBH_ParseEPDesc+0x162>
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	889b      	ldrh	r3, [r3, #4]
 800b4ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b4ce:	d32f      	bcc.n	800b530 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b4d0:	2303      	movs	r3, #3
 800b4d2:	75fb      	strb	r3, [r7, #23]
 800b4d4:	e02c      	b.n	800b530 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800b4d6:	2303      	movs	r3, #3
 800b4d8:	75fb      	strb	r3, [r7, #23]
 800b4da:	e029      	b.n	800b530 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b4e2:	2b02      	cmp	r3, #2
 800b4e4:	d120      	bne.n	800b528 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800b4e6:	68bb      	ldr	r3, [r7, #8]
 800b4e8:	78db      	ldrb	r3, [r3, #3]
 800b4ea:	f003 0303 	and.w	r3, r3, #3
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d106      	bne.n	800b500 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800b4f2:	68bb      	ldr	r3, [r7, #8]
 800b4f4:	889b      	ldrh	r3, [r3, #4]
 800b4f6:	2b08      	cmp	r3, #8
 800b4f8:	d01a      	beq.n	800b530 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b4fa:	2303      	movs	r3, #3
 800b4fc:	75fb      	strb	r3, [r7, #23]
 800b4fe:	e017      	b.n	800b530 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800b500:	68bb      	ldr	r3, [r7, #8]
 800b502:	78db      	ldrb	r3, [r3, #3]
 800b504:	f003 0303 	and.w	r3, r3, #3
 800b508:	2b03      	cmp	r3, #3
 800b50a:	d10a      	bne.n	800b522 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800b50c:	68bb      	ldr	r3, [r7, #8]
 800b50e:	799b      	ldrb	r3, [r3, #6]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d003      	beq.n	800b51c <USBH_ParseEPDesc+0x1ae>
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	889b      	ldrh	r3, [r3, #4]
 800b518:	2b08      	cmp	r3, #8
 800b51a:	d909      	bls.n	800b530 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b51c:	2303      	movs	r3, #3
 800b51e:	75fb      	strb	r3, [r7, #23]
 800b520:	e006      	b.n	800b530 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800b522:	2303      	movs	r3, #3
 800b524:	75fb      	strb	r3, [r7, #23]
 800b526:	e003      	b.n	800b530 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800b528:	2303      	movs	r3, #3
 800b52a:	75fb      	strb	r3, [r7, #23]
 800b52c:	e000      	b.n	800b530 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b52e:	bf00      	nop
  }

  return status;
 800b530:	7dfb      	ldrb	r3, [r7, #23]
}
 800b532:	4618      	mov	r0, r3
 800b534:	371c      	adds	r7, #28
 800b536:	46bd      	mov	sp, r7
 800b538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53c:	4770      	bx	lr

0800b53e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b53e:	b480      	push	{r7}
 800b540:	b087      	sub	sp, #28
 800b542:	af00      	add	r7, sp, #0
 800b544:	60f8      	str	r0, [r7, #12]
 800b546:	60b9      	str	r1, [r7, #8]
 800b548:	4613      	mov	r3, r2
 800b54a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	3301      	adds	r3, #1
 800b550:	781b      	ldrb	r3, [r3, #0]
 800b552:	2b03      	cmp	r3, #3
 800b554:	d120      	bne.n	800b598 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	781b      	ldrb	r3, [r3, #0]
 800b55a:	1e9a      	subs	r2, r3, #2
 800b55c:	88fb      	ldrh	r3, [r7, #6]
 800b55e:	4293      	cmp	r3, r2
 800b560:	bf28      	it	cs
 800b562:	4613      	movcs	r3, r2
 800b564:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	3302      	adds	r3, #2
 800b56a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b56c:	2300      	movs	r3, #0
 800b56e:	82fb      	strh	r3, [r7, #22]
 800b570:	e00b      	b.n	800b58a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b572:	8afb      	ldrh	r3, [r7, #22]
 800b574:	68fa      	ldr	r2, [r7, #12]
 800b576:	4413      	add	r3, r2
 800b578:	781a      	ldrb	r2, [r3, #0]
 800b57a:	68bb      	ldr	r3, [r7, #8]
 800b57c:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b57e:	68bb      	ldr	r3, [r7, #8]
 800b580:	3301      	adds	r3, #1
 800b582:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b584:	8afb      	ldrh	r3, [r7, #22]
 800b586:	3302      	adds	r3, #2
 800b588:	82fb      	strh	r3, [r7, #22]
 800b58a:	8afa      	ldrh	r2, [r7, #22]
 800b58c:	8abb      	ldrh	r3, [r7, #20]
 800b58e:	429a      	cmp	r2, r3
 800b590:	d3ef      	bcc.n	800b572 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b592:	68bb      	ldr	r3, [r7, #8]
 800b594:	2200      	movs	r2, #0
 800b596:	701a      	strb	r2, [r3, #0]
  }
}
 800b598:	bf00      	nop
 800b59a:	371c      	adds	r7, #28
 800b59c:	46bd      	mov	sp, r7
 800b59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a2:	4770      	bx	lr

0800b5a4 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b5a4:	b480      	push	{r7}
 800b5a6:	b085      	sub	sp, #20
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
 800b5ac:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	881b      	ldrh	r3, [r3, #0]
 800b5b2:	687a      	ldr	r2, [r7, #4]
 800b5b4:	7812      	ldrb	r2, [r2, #0]
 800b5b6:	4413      	add	r3, r2
 800b5b8:	b29a      	uxth	r2, r3
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	781b      	ldrb	r3, [r3, #0]
 800b5c2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	4413      	add	r3, r2
 800b5c8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b5ca:	68fb      	ldr	r3, [r7, #12]
}
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	3714      	adds	r7, #20
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d6:	4770      	bx	lr

0800b5d8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b086      	sub	sp, #24
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	60f8      	str	r0, [r7, #12]
 800b5e0:	60b9      	str	r1, [r7, #8]
 800b5e2:	4613      	mov	r3, r2
 800b5e4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b5e6:	2301      	movs	r3, #1
 800b5e8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	789b      	ldrb	r3, [r3, #2]
 800b5ee:	2b01      	cmp	r3, #1
 800b5f0:	d002      	beq.n	800b5f8 <USBH_CtlReq+0x20>
 800b5f2:	2b02      	cmp	r3, #2
 800b5f4:	d00f      	beq.n	800b616 <USBH_CtlReq+0x3e>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 800b5f6:	e027      	b.n	800b648 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	68ba      	ldr	r2, [r7, #8]
 800b5fc:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	88fa      	ldrh	r2, [r7, #6]
 800b602:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	2201      	movs	r2, #1
 800b608:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	2202      	movs	r2, #2
 800b60e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b610:	2301      	movs	r3, #1
 800b612:	75fb      	strb	r3, [r7, #23]
      break;
 800b614:	e018      	b.n	800b648 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800b616:	68f8      	ldr	r0, [r7, #12]
 800b618:	f000 f81c 	bl	800b654 <USBH_HandleControl>
 800b61c:	4603      	mov	r3, r0
 800b61e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b620:	7dfb      	ldrb	r3, [r7, #23]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d002      	beq.n	800b62c <USBH_CtlReq+0x54>
 800b626:	7dfb      	ldrb	r3, [r7, #23]
 800b628:	2b03      	cmp	r3, #3
 800b62a:	d106      	bne.n	800b63a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	2201      	movs	r2, #1
 800b630:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	2200      	movs	r2, #0
 800b636:	761a      	strb	r2, [r3, #24]
      break;
 800b638:	e005      	b.n	800b646 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800b63a:	7dfb      	ldrb	r3, [r7, #23]
 800b63c:	2b02      	cmp	r3, #2
 800b63e:	d102      	bne.n	800b646 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	2201      	movs	r2, #1
 800b644:	709a      	strb	r2, [r3, #2]
      break;
 800b646:	bf00      	nop
  }
  return status;
 800b648:	7dfb      	ldrb	r3, [r7, #23]
}
 800b64a:	4618      	mov	r0, r3
 800b64c:	3718      	adds	r7, #24
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}
	...

0800b654 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b086      	sub	sp, #24
 800b658:	af02      	add	r7, sp, #8
 800b65a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b65c:	2301      	movs	r3, #1
 800b65e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b660:	2300      	movs	r3, #0
 800b662:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	7e1b      	ldrb	r3, [r3, #24]
 800b668:	3b01      	subs	r3, #1
 800b66a:	2b0a      	cmp	r3, #10
 800b66c:	f200 8157 	bhi.w	800b91e <USBH_HandleControl+0x2ca>
 800b670:	a201      	add	r2, pc, #4	@ (adr r2, 800b678 <USBH_HandleControl+0x24>)
 800b672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b676:	bf00      	nop
 800b678:	0800b6a5 	.word	0x0800b6a5
 800b67c:	0800b6bf 	.word	0x0800b6bf
 800b680:	0800b729 	.word	0x0800b729
 800b684:	0800b74f 	.word	0x0800b74f
 800b688:	0800b789 	.word	0x0800b789
 800b68c:	0800b7b3 	.word	0x0800b7b3
 800b690:	0800b805 	.word	0x0800b805
 800b694:	0800b827 	.word	0x0800b827
 800b698:	0800b863 	.word	0x0800b863
 800b69c:	0800b889 	.word	0x0800b889
 800b6a0:	0800b8c7 	.word	0x0800b8c7
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	f103 0110 	add.w	r1, r3, #16
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	795b      	ldrb	r3, [r3, #5]
 800b6ae:	461a      	mov	r2, r3
 800b6b0:	6878      	ldr	r0, [r7, #4]
 800b6b2:	f000 f945 	bl	800b940 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	2202      	movs	r2, #2
 800b6ba:	761a      	strb	r2, [r3, #24]
      break;
 800b6bc:	e13a      	b.n	800b934 <USBH_HandleControl+0x2e0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	795b      	ldrb	r3, [r3, #5]
 800b6c2:	4619      	mov	r1, r3
 800b6c4:	6878      	ldr	r0, [r7, #4]
 800b6c6:	f000 fcc7 	bl	800c058 <USBH_LL_GetURBState>
 800b6ca:	4603      	mov	r3, r0
 800b6cc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b6ce:	7bbb      	ldrb	r3, [r7, #14]
 800b6d0:	2b01      	cmp	r3, #1
 800b6d2:	d11e      	bne.n	800b712 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	7c1b      	ldrb	r3, [r3, #16]
 800b6d8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b6dc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	8adb      	ldrh	r3, [r3, #22]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d00a      	beq.n	800b6fc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b6e6:	7b7b      	ldrb	r3, [r7, #13]
 800b6e8:	2b80      	cmp	r3, #128	@ 0x80
 800b6ea:	d103      	bne.n	800b6f4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2203      	movs	r2, #3
 800b6f0:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800b6f2:	e116      	b.n	800b922 <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_DATA_OUT;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2205      	movs	r2, #5
 800b6f8:	761a      	strb	r2, [r3, #24]
      break;
 800b6fa:	e112      	b.n	800b922 <USBH_HandleControl+0x2ce>
          if (direction == USB_D2H)
 800b6fc:	7b7b      	ldrb	r3, [r7, #13]
 800b6fe:	2b80      	cmp	r3, #128	@ 0x80
 800b700:	d103      	bne.n	800b70a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2209      	movs	r2, #9
 800b706:	761a      	strb	r2, [r3, #24]
      break;
 800b708:	e10b      	b.n	800b922 <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_STATUS_IN;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	2207      	movs	r2, #7
 800b70e:	761a      	strb	r2, [r3, #24]
      break;
 800b710:	e107      	b.n	800b922 <USBH_HandleControl+0x2ce>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b712:	7bbb      	ldrb	r3, [r7, #14]
 800b714:	2b04      	cmp	r3, #4
 800b716:	d003      	beq.n	800b720 <USBH_HandleControl+0xcc>
 800b718:	7bbb      	ldrb	r3, [r7, #14]
 800b71a:	2b02      	cmp	r3, #2
 800b71c:	f040 8101 	bne.w	800b922 <USBH_HandleControl+0x2ce>
          phost->Control.state = CTRL_ERROR;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	220b      	movs	r2, #11
 800b724:	761a      	strb	r2, [r3, #24]
      break;
 800b726:	e0fc      	b.n	800b922 <USBH_HandleControl+0x2ce>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b72e:	b29a      	uxth	r2, r3
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	6899      	ldr	r1, [r3, #8]
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	899a      	ldrh	r2, [r3, #12]
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	791b      	ldrb	r3, [r3, #4]
 800b740:	6878      	ldr	r0, [r7, #4]
 800b742:	f000 f93c 	bl	800b9be <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2204      	movs	r2, #4
 800b74a:	761a      	strb	r2, [r3, #24]
      break;
 800b74c:	e0f2      	b.n	800b934 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	791b      	ldrb	r3, [r3, #4]
 800b752:	4619      	mov	r1, r3
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f000 fc7f 	bl	800c058 <USBH_LL_GetURBState>
 800b75a:	4603      	mov	r3, r0
 800b75c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b75e:	7bbb      	ldrb	r3, [r7, #14]
 800b760:	2b01      	cmp	r3, #1
 800b762:	d103      	bne.n	800b76c <USBH_HandleControl+0x118>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2209      	movs	r2, #9
 800b768:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800b76a:	e0dc      	b.n	800b926 <USBH_HandleControl+0x2d2>
      else if (URB_Status == USBH_URB_STALL)
 800b76c:	7bbb      	ldrb	r3, [r7, #14]
 800b76e:	2b05      	cmp	r3, #5
 800b770:	d102      	bne.n	800b778 <USBH_HandleControl+0x124>
        status = USBH_NOT_SUPPORTED;
 800b772:	2303      	movs	r3, #3
 800b774:	73fb      	strb	r3, [r7, #15]
      break;
 800b776:	e0d6      	b.n	800b926 <USBH_HandleControl+0x2d2>
        if (URB_Status == USBH_URB_ERROR)
 800b778:	7bbb      	ldrb	r3, [r7, #14]
 800b77a:	2b04      	cmp	r3, #4
 800b77c:	f040 80d3 	bne.w	800b926 <USBH_HandleControl+0x2d2>
          phost->Control.state = CTRL_ERROR;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	220b      	movs	r2, #11
 800b784:	761a      	strb	r2, [r3, #24]
      break;
 800b786:	e0ce      	b.n	800b926 <USBH_HandleControl+0x2d2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	6899      	ldr	r1, [r3, #8]
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	899a      	ldrh	r2, [r3, #12]
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	795b      	ldrb	r3, [r3, #5]
 800b794:	2001      	movs	r0, #1
 800b796:	9000      	str	r0, [sp, #0]
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f000 f8eb 	bl	800b974 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b7a4:	b29a      	uxth	r2, r3
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2206      	movs	r2, #6
 800b7ae:	761a      	strb	r2, [r3, #24]
      break;
 800b7b0:	e0c0      	b.n	800b934 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	795b      	ldrb	r3, [r3, #5]
 800b7b6:	4619      	mov	r1, r3
 800b7b8:	6878      	ldr	r0, [r7, #4]
 800b7ba:	f000 fc4d 	bl	800c058 <USBH_LL_GetURBState>
 800b7be:	4603      	mov	r3, r0
 800b7c0:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b7c2:	7bbb      	ldrb	r3, [r7, #14]
 800b7c4:	2b01      	cmp	r3, #1
 800b7c6:	d103      	bne.n	800b7d0 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2207      	movs	r2, #7
 800b7cc:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800b7ce:	e0ac      	b.n	800b92a <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_STALL)
 800b7d0:	7bbb      	ldrb	r3, [r7, #14]
 800b7d2:	2b05      	cmp	r3, #5
 800b7d4:	d105      	bne.n	800b7e2 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	220c      	movs	r2, #12
 800b7da:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b7dc:	2303      	movs	r3, #3
 800b7de:	73fb      	strb	r3, [r7, #15]
      break;
 800b7e0:	e0a3      	b.n	800b92a <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b7e2:	7bbb      	ldrb	r3, [r7, #14]
 800b7e4:	2b02      	cmp	r3, #2
 800b7e6:	d103      	bne.n	800b7f0 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2205      	movs	r2, #5
 800b7ec:	761a      	strb	r2, [r3, #24]
      break;
 800b7ee:	e09c      	b.n	800b92a <USBH_HandleControl+0x2d6>
        if (URB_Status == USBH_URB_ERROR)
 800b7f0:	7bbb      	ldrb	r3, [r7, #14]
 800b7f2:	2b04      	cmp	r3, #4
 800b7f4:	f040 8099 	bne.w	800b92a <USBH_HandleControl+0x2d6>
          phost->Control.state = CTRL_ERROR;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	220b      	movs	r2, #11
 800b7fc:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b7fe:	2302      	movs	r3, #2
 800b800:	73fb      	strb	r3, [r7, #15]
      break;
 800b802:	e092      	b.n	800b92a <USBH_HandleControl+0x2d6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	791b      	ldrb	r3, [r3, #4]
 800b808:	2200      	movs	r2, #0
 800b80a:	2100      	movs	r1, #0
 800b80c:	6878      	ldr	r0, [r7, #4]
 800b80e:	f000 f8d6 	bl	800b9be <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b818:	b29a      	uxth	r2, r3
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	2208      	movs	r2, #8
 800b822:	761a      	strb	r2, [r3, #24]

      break;
 800b824:	e086      	b.n	800b934 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	791b      	ldrb	r3, [r3, #4]
 800b82a:	4619      	mov	r1, r3
 800b82c:	6878      	ldr	r0, [r7, #4]
 800b82e:	f000 fc13 	bl	800c058 <USBH_LL_GetURBState>
 800b832:	4603      	mov	r3, r0
 800b834:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b836:	7bbb      	ldrb	r3, [r7, #14]
 800b838:	2b01      	cmp	r3, #1
 800b83a:	d105      	bne.n	800b848 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	220d      	movs	r2, #13
 800b840:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b842:	2300      	movs	r3, #0
 800b844:	73fb      	strb	r3, [r7, #15]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800b846:	e072      	b.n	800b92e <USBH_HandleControl+0x2da>
      else if (URB_Status == USBH_URB_ERROR)
 800b848:	7bbb      	ldrb	r3, [r7, #14]
 800b84a:	2b04      	cmp	r3, #4
 800b84c:	d103      	bne.n	800b856 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	220b      	movs	r2, #11
 800b852:	761a      	strb	r2, [r3, #24]
      break;
 800b854:	e06b      	b.n	800b92e <USBH_HandleControl+0x2da>
        if (URB_Status == USBH_URB_STALL)
 800b856:	7bbb      	ldrb	r3, [r7, #14]
 800b858:	2b05      	cmp	r3, #5
 800b85a:	d168      	bne.n	800b92e <USBH_HandleControl+0x2da>
          status = USBH_NOT_SUPPORTED;
 800b85c:	2303      	movs	r3, #3
 800b85e:	73fb      	strb	r3, [r7, #15]
      break;
 800b860:	e065      	b.n	800b92e <USBH_HandleControl+0x2da>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	795b      	ldrb	r3, [r3, #5]
 800b866:	2201      	movs	r2, #1
 800b868:	9200      	str	r2, [sp, #0]
 800b86a:	2200      	movs	r2, #0
 800b86c:	2100      	movs	r1, #0
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	f000 f880 	bl	800b974 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b87a:	b29a      	uxth	r2, r3
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	220a      	movs	r2, #10
 800b884:	761a      	strb	r2, [r3, #24]
      break;
 800b886:	e055      	b.n	800b934 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	795b      	ldrb	r3, [r3, #5]
 800b88c:	4619      	mov	r1, r3
 800b88e:	6878      	ldr	r0, [r7, #4]
 800b890:	f000 fbe2 	bl	800c058 <USBH_LL_GetURBState>
 800b894:	4603      	mov	r3, r0
 800b896:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b898:	7bbb      	ldrb	r3, [r7, #14]
 800b89a:	2b01      	cmp	r3, #1
 800b89c:	d105      	bne.n	800b8aa <USBH_HandleControl+0x256>
      {
        status = USBH_OK;
 800b89e:	2300      	movs	r3, #0
 800b8a0:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	220d      	movs	r2, #13
 800b8a6:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800b8a8:	e043      	b.n	800b932 <USBH_HandleControl+0x2de>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b8aa:	7bbb      	ldrb	r3, [r7, #14]
 800b8ac:	2b02      	cmp	r3, #2
 800b8ae:	d103      	bne.n	800b8b8 <USBH_HandleControl+0x264>
        phost->Control.state = CTRL_STATUS_OUT;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2209      	movs	r2, #9
 800b8b4:	761a      	strb	r2, [r3, #24]
      break;
 800b8b6:	e03c      	b.n	800b932 <USBH_HandleControl+0x2de>
        if (URB_Status == USBH_URB_ERROR)
 800b8b8:	7bbb      	ldrb	r3, [r7, #14]
 800b8ba:	2b04      	cmp	r3, #4
 800b8bc:	d139      	bne.n	800b932 <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	220b      	movs	r2, #11
 800b8c2:	761a      	strb	r2, [r3, #24]
      break;
 800b8c4:	e035      	b.n	800b932 <USBH_HandleControl+0x2de>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	7e5b      	ldrb	r3, [r3, #25]
 800b8ca:	3301      	adds	r3, #1
 800b8cc:	b2da      	uxtb	r2, r3
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	765a      	strb	r2, [r3, #25]
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	7e5b      	ldrb	r3, [r3, #25]
 800b8d6:	2b02      	cmp	r3, #2
 800b8d8:	d806      	bhi.n	800b8e8 <USBH_HandleControl+0x294>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	2201      	movs	r2, #1
 800b8de:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2201      	movs	r2, #1
 800b8e4:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b8e6:	e025      	b.n	800b934 <USBH_HandleControl+0x2e0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b8ee:	2106      	movs	r1, #6
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	795b      	ldrb	r3, [r3, #5]
 800b8fe:	4619      	mov	r1, r3
 800b900:	6878      	ldr	r0, [r7, #4]
 800b902:	f000 f90d 	bl	800bb20 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	791b      	ldrb	r3, [r3, #4]
 800b90a:	4619      	mov	r1, r3
 800b90c:	6878      	ldr	r0, [r7, #4]
 800b90e:	f000 f907 	bl	800bb20 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2200      	movs	r2, #0
 800b916:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b918:	2302      	movs	r3, #2
 800b91a:	73fb      	strb	r3, [r7, #15]
      break;
 800b91c:	e00a      	b.n	800b934 <USBH_HandleControl+0x2e0>

    default:
      break;
 800b91e:	bf00      	nop
 800b920:	e008      	b.n	800b934 <USBH_HandleControl+0x2e0>
      break;
 800b922:	bf00      	nop
 800b924:	e006      	b.n	800b934 <USBH_HandleControl+0x2e0>
      break;
 800b926:	bf00      	nop
 800b928:	e004      	b.n	800b934 <USBH_HandleControl+0x2e0>
      break;
 800b92a:	bf00      	nop
 800b92c:	e002      	b.n	800b934 <USBH_HandleControl+0x2e0>
      break;
 800b92e:	bf00      	nop
 800b930:	e000      	b.n	800b934 <USBH_HandleControl+0x2e0>
      break;
 800b932:	bf00      	nop
  }

  return status;
 800b934:	7bfb      	ldrb	r3, [r7, #15]
}
 800b936:	4618      	mov	r0, r3
 800b938:	3710      	adds	r7, #16
 800b93a:	46bd      	mov	sp, r7
 800b93c:	bd80      	pop	{r7, pc}
 800b93e:	bf00      	nop

0800b940 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b088      	sub	sp, #32
 800b944:	af04      	add	r7, sp, #16
 800b946:	60f8      	str	r0, [r7, #12]
 800b948:	60b9      	str	r1, [r7, #8]
 800b94a:	4613      	mov	r3, r2
 800b94c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b94e:	79f9      	ldrb	r1, [r7, #7]
 800b950:	2300      	movs	r3, #0
 800b952:	9303      	str	r3, [sp, #12]
 800b954:	2308      	movs	r3, #8
 800b956:	9302      	str	r3, [sp, #8]
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	9301      	str	r3, [sp, #4]
 800b95c:	2300      	movs	r3, #0
 800b95e:	9300      	str	r3, [sp, #0]
 800b960:	2300      	movs	r3, #0
 800b962:	2200      	movs	r2, #0
 800b964:	68f8      	ldr	r0, [r7, #12]
 800b966:	f000 fb46 	bl	800bff6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800b96a:	2300      	movs	r3, #0
}
 800b96c:	4618      	mov	r0, r3
 800b96e:	3710      	adds	r7, #16
 800b970:	46bd      	mov	sp, r7
 800b972:	bd80      	pop	{r7, pc}

0800b974 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b088      	sub	sp, #32
 800b978:	af04      	add	r7, sp, #16
 800b97a:	60f8      	str	r0, [r7, #12]
 800b97c:	60b9      	str	r1, [r7, #8]
 800b97e:	4611      	mov	r1, r2
 800b980:	461a      	mov	r2, r3
 800b982:	460b      	mov	r3, r1
 800b984:	80fb      	strh	r3, [r7, #6]
 800b986:	4613      	mov	r3, r2
 800b988:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b990:	2b00      	cmp	r3, #0
 800b992:	d001      	beq.n	800b998 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b994:	2300      	movs	r3, #0
 800b996:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b998:	7979      	ldrb	r1, [r7, #5]
 800b99a:	7e3b      	ldrb	r3, [r7, #24]
 800b99c:	9303      	str	r3, [sp, #12]
 800b99e:	88fb      	ldrh	r3, [r7, #6]
 800b9a0:	9302      	str	r3, [sp, #8]
 800b9a2:	68bb      	ldr	r3, [r7, #8]
 800b9a4:	9301      	str	r3, [sp, #4]
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	9300      	str	r3, [sp, #0]
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	68f8      	ldr	r0, [r7, #12]
 800b9b0:	f000 fb21 	bl	800bff6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b9b4:	2300      	movs	r3, #0
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	3710      	adds	r7, #16
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}

0800b9be <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b9be:	b580      	push	{r7, lr}
 800b9c0:	b088      	sub	sp, #32
 800b9c2:	af04      	add	r7, sp, #16
 800b9c4:	60f8      	str	r0, [r7, #12]
 800b9c6:	60b9      	str	r1, [r7, #8]
 800b9c8:	4611      	mov	r1, r2
 800b9ca:	461a      	mov	r2, r3
 800b9cc:	460b      	mov	r3, r1
 800b9ce:	80fb      	strh	r3, [r7, #6]
 800b9d0:	4613      	mov	r3, r2
 800b9d2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b9d4:	7979      	ldrb	r1, [r7, #5]
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	9303      	str	r3, [sp, #12]
 800b9da:	88fb      	ldrh	r3, [r7, #6]
 800b9dc:	9302      	str	r3, [sp, #8]
 800b9de:	68bb      	ldr	r3, [r7, #8]
 800b9e0:	9301      	str	r3, [sp, #4]
 800b9e2:	2301      	movs	r3, #1
 800b9e4:	9300      	str	r3, [sp, #0]
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	2201      	movs	r2, #1
 800b9ea:	68f8      	ldr	r0, [r7, #12]
 800b9ec:	f000 fb03 	bl	800bff6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b9f0:	2300      	movs	r3, #0

}
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	3710      	adds	r7, #16
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	bd80      	pop	{r7, pc}

0800b9fa <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b9fa:	b580      	push	{r7, lr}
 800b9fc:	b088      	sub	sp, #32
 800b9fe:	af04      	add	r7, sp, #16
 800ba00:	60f8      	str	r0, [r7, #12]
 800ba02:	60b9      	str	r1, [r7, #8]
 800ba04:	4611      	mov	r1, r2
 800ba06:	461a      	mov	r2, r3
 800ba08:	460b      	mov	r3, r1
 800ba0a:	80fb      	strh	r3, [r7, #6]
 800ba0c:	4613      	mov	r3, r2
 800ba0e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d001      	beq.n	800ba1e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ba1e:	7979      	ldrb	r1, [r7, #5]
 800ba20:	7e3b      	ldrb	r3, [r7, #24]
 800ba22:	9303      	str	r3, [sp, #12]
 800ba24:	88fb      	ldrh	r3, [r7, #6]
 800ba26:	9302      	str	r3, [sp, #8]
 800ba28:	68bb      	ldr	r3, [r7, #8]
 800ba2a:	9301      	str	r3, [sp, #4]
 800ba2c:	2301      	movs	r3, #1
 800ba2e:	9300      	str	r3, [sp, #0]
 800ba30:	2302      	movs	r3, #2
 800ba32:	2200      	movs	r2, #0
 800ba34:	68f8      	ldr	r0, [r7, #12]
 800ba36:	f000 fade 	bl	800bff6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800ba3a:	2300      	movs	r3, #0
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	3710      	adds	r7, #16
 800ba40:	46bd      	mov	sp, r7
 800ba42:	bd80      	pop	{r7, pc}

0800ba44 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b088      	sub	sp, #32
 800ba48:	af04      	add	r7, sp, #16
 800ba4a:	60f8      	str	r0, [r7, #12]
 800ba4c:	60b9      	str	r1, [r7, #8]
 800ba4e:	4611      	mov	r1, r2
 800ba50:	461a      	mov	r2, r3
 800ba52:	460b      	mov	r3, r1
 800ba54:	80fb      	strh	r3, [r7, #6]
 800ba56:	4613      	mov	r3, r2
 800ba58:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ba5a:	7979      	ldrb	r1, [r7, #5]
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	9303      	str	r3, [sp, #12]
 800ba60:	88fb      	ldrh	r3, [r7, #6]
 800ba62:	9302      	str	r3, [sp, #8]
 800ba64:	68bb      	ldr	r3, [r7, #8]
 800ba66:	9301      	str	r3, [sp, #4]
 800ba68:	2301      	movs	r3, #1
 800ba6a:	9300      	str	r3, [sp, #0]
 800ba6c:	2302      	movs	r3, #2
 800ba6e:	2201      	movs	r2, #1
 800ba70:	68f8      	ldr	r0, [r7, #12]
 800ba72:	f000 fac0 	bl	800bff6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800ba76:	2300      	movs	r3, #0
}
 800ba78:	4618      	mov	r0, r3
 800ba7a:	3710      	adds	r7, #16
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	bd80      	pop	{r7, pc}

0800ba80 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b086      	sub	sp, #24
 800ba84:	af04      	add	r7, sp, #16
 800ba86:	6078      	str	r0, [r7, #4]
 800ba88:	4608      	mov	r0, r1
 800ba8a:	4611      	mov	r1, r2
 800ba8c:	461a      	mov	r2, r3
 800ba8e:	4603      	mov	r3, r0
 800ba90:	70fb      	strb	r3, [r7, #3]
 800ba92:	460b      	mov	r3, r1
 800ba94:	70bb      	strb	r3, [r7, #2]
 800ba96:	4613      	mov	r3, r2
 800ba98:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800ba9a:	7878      	ldrb	r0, [r7, #1]
 800ba9c:	78ba      	ldrb	r2, [r7, #2]
 800ba9e:	78f9      	ldrb	r1, [r7, #3]
 800baa0:	8b3b      	ldrh	r3, [r7, #24]
 800baa2:	9302      	str	r3, [sp, #8]
 800baa4:	7d3b      	ldrb	r3, [r7, #20]
 800baa6:	9301      	str	r3, [sp, #4]
 800baa8:	7c3b      	ldrb	r3, [r7, #16]
 800baaa:	9300      	str	r3, [sp, #0]
 800baac:	4603      	mov	r3, r0
 800baae:	6878      	ldr	r0, [r7, #4]
 800bab0:	f000 fa53 	bl	800bf5a <USBH_LL_OpenPipe>

  return USBH_OK;
 800bab4:	2300      	movs	r3, #0
}
 800bab6:	4618      	mov	r0, r3
 800bab8:	3708      	adds	r7, #8
 800baba:	46bd      	mov	sp, r7
 800babc:	bd80      	pop	{r7, pc}

0800babe <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800babe:	b580      	push	{r7, lr}
 800bac0:	b082      	sub	sp, #8
 800bac2:	af00      	add	r7, sp, #0
 800bac4:	6078      	str	r0, [r7, #4]
 800bac6:	460b      	mov	r3, r1
 800bac8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800baca:	78fb      	ldrb	r3, [r7, #3]
 800bacc:	4619      	mov	r1, r3
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	f000 fa72 	bl	800bfb8 <USBH_LL_ClosePipe>

  return USBH_OK;
 800bad4:	2300      	movs	r3, #0
}
 800bad6:	4618      	mov	r0, r3
 800bad8:	3708      	adds	r7, #8
 800bada:	46bd      	mov	sp, r7
 800badc:	bd80      	pop	{r7, pc}

0800bade <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800bade:	b580      	push	{r7, lr}
 800bae0:	b084      	sub	sp, #16
 800bae2:	af00      	add	r7, sp, #0
 800bae4:	6078      	str	r0, [r7, #4]
 800bae6:	460b      	mov	r3, r1
 800bae8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	f000 f836 	bl	800bb5c <USBH_GetFreePipe>
 800baf0:	4603      	mov	r3, r0
 800baf2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800baf4:	89fb      	ldrh	r3, [r7, #14]
 800baf6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bafa:	4293      	cmp	r3, r2
 800bafc:	d00a      	beq.n	800bb14 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800bafe:	78fa      	ldrb	r2, [r7, #3]
 800bb00:	89fb      	ldrh	r3, [r7, #14]
 800bb02:	f003 030f 	and.w	r3, r3, #15
 800bb06:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800bb0a:	6879      	ldr	r1, [r7, #4]
 800bb0c:	33e0      	adds	r3, #224	@ 0xe0
 800bb0e:	009b      	lsls	r3, r3, #2
 800bb10:	440b      	add	r3, r1
 800bb12:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800bb14:	89fb      	ldrh	r3, [r7, #14]
 800bb16:	b2db      	uxtb	r3, r3
}
 800bb18:	4618      	mov	r0, r3
 800bb1a:	3710      	adds	r7, #16
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	bd80      	pop	{r7, pc}

0800bb20 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800bb20:	b480      	push	{r7}
 800bb22:	b083      	sub	sp, #12
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
 800bb28:	460b      	mov	r3, r1
 800bb2a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800bb2c:	78fb      	ldrb	r3, [r7, #3]
 800bb2e:	2b0f      	cmp	r3, #15
 800bb30:	d80d      	bhi.n	800bb4e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800bb32:	78fb      	ldrb	r3, [r7, #3]
 800bb34:	687a      	ldr	r2, [r7, #4]
 800bb36:	33e0      	adds	r3, #224	@ 0xe0
 800bb38:	009b      	lsls	r3, r3, #2
 800bb3a:	4413      	add	r3, r2
 800bb3c:	685a      	ldr	r2, [r3, #4]
 800bb3e:	78fb      	ldrb	r3, [r7, #3]
 800bb40:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800bb44:	6879      	ldr	r1, [r7, #4]
 800bb46:	33e0      	adds	r3, #224	@ 0xe0
 800bb48:	009b      	lsls	r3, r3, #2
 800bb4a:	440b      	add	r3, r1
 800bb4c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800bb4e:	2300      	movs	r3, #0
}
 800bb50:	4618      	mov	r0, r3
 800bb52:	370c      	adds	r7, #12
 800bb54:	46bd      	mov	sp, r7
 800bb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5a:	4770      	bx	lr

0800bb5c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800bb5c:	b480      	push	{r7}
 800bb5e:	b085      	sub	sp, #20
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800bb64:	2300      	movs	r3, #0
 800bb66:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800bb68:	2300      	movs	r3, #0
 800bb6a:	73fb      	strb	r3, [r7, #15]
 800bb6c:	e00f      	b.n	800bb8e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800bb6e:	7bfb      	ldrb	r3, [r7, #15]
 800bb70:	687a      	ldr	r2, [r7, #4]
 800bb72:	33e0      	adds	r3, #224	@ 0xe0
 800bb74:	009b      	lsls	r3, r3, #2
 800bb76:	4413      	add	r3, r2
 800bb78:	685b      	ldr	r3, [r3, #4]
 800bb7a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d102      	bne.n	800bb88 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800bb82:	7bfb      	ldrb	r3, [r7, #15]
 800bb84:	b29b      	uxth	r3, r3
 800bb86:	e007      	b.n	800bb98 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800bb88:	7bfb      	ldrb	r3, [r7, #15]
 800bb8a:	3301      	adds	r3, #1
 800bb8c:	73fb      	strb	r3, [r7, #15]
 800bb8e:	7bfb      	ldrb	r3, [r7, #15]
 800bb90:	2b0f      	cmp	r3, #15
 800bb92:	d9ec      	bls.n	800bb6e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800bb94:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800bb98:	4618      	mov	r0, r3
 800bb9a:	3714      	adds	r7, #20
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba2:	4770      	bx	lr

0800bba4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800bba8:	2201      	movs	r2, #1
 800bbaa:	490e      	ldr	r1, [pc, #56]	@ (800bbe4 <MX_USB_HOST_Init+0x40>)
 800bbac:	480e      	ldr	r0, [pc, #56]	@ (800bbe8 <MX_USB_HOST_Init+0x44>)
 800bbae:	f7fe fb0f 	bl	800a1d0 <USBH_Init>
 800bbb2:	4603      	mov	r3, r0
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d001      	beq.n	800bbbc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800bbb8:	f7f5 ff84 	bl	8001ac4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800bbbc:	490b      	ldr	r1, [pc, #44]	@ (800bbec <MX_USB_HOST_Init+0x48>)
 800bbbe:	480a      	ldr	r0, [pc, #40]	@ (800bbe8 <MX_USB_HOST_Init+0x44>)
 800bbc0:	f7fe fbb1 	bl	800a326 <USBH_RegisterClass>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d001      	beq.n	800bbce <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800bbca:	f7f5 ff7b 	bl	8001ac4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800bbce:	4806      	ldr	r0, [pc, #24]	@ (800bbe8 <MX_USB_HOST_Init+0x44>)
 800bbd0:	f7fe fc35 	bl	800a43e <USBH_Start>
 800bbd4:	4603      	mov	r3, r0
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d001      	beq.n	800bbde <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800bbda:	f7f5 ff73 	bl	8001ac4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800bbde:	bf00      	nop
 800bbe0:	bd80      	pop	{r7, pc}
 800bbe2:	bf00      	nop
 800bbe4:	0800bc05 	.word	0x0800bc05
 800bbe8:	200004f0 	.word	0x200004f0
 800bbec:	20000028 	.word	0x20000028

0800bbf0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800bbf4:	4802      	ldr	r0, [pc, #8]	@ (800bc00 <MX_USB_HOST_Process+0x10>)
 800bbf6:	f7fe fc33 	bl	800a460 <USBH_Process>
}
 800bbfa:	bf00      	nop
 800bbfc:	bd80      	pop	{r7, pc}
 800bbfe:	bf00      	nop
 800bc00:	200004f0 	.word	0x200004f0

0800bc04 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800bc04:	b480      	push	{r7}
 800bc06:	b083      	sub	sp, #12
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
 800bc0c:	460b      	mov	r3, r1
 800bc0e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800bc10:	78fb      	ldrb	r3, [r7, #3]
 800bc12:	3b01      	subs	r3, #1
 800bc14:	2b04      	cmp	r3, #4
 800bc16:	d819      	bhi.n	800bc4c <USBH_UserProcess+0x48>
 800bc18:	a201      	add	r2, pc, #4	@ (adr r2, 800bc20 <USBH_UserProcess+0x1c>)
 800bc1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc1e:	bf00      	nop
 800bc20:	0800bc4d 	.word	0x0800bc4d
 800bc24:	0800bc3d 	.word	0x0800bc3d
 800bc28:	0800bc4d 	.word	0x0800bc4d
 800bc2c:	0800bc45 	.word	0x0800bc45
 800bc30:	0800bc35 	.word	0x0800bc35
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800bc34:	4b09      	ldr	r3, [pc, #36]	@ (800bc5c <USBH_UserProcess+0x58>)
 800bc36:	2203      	movs	r2, #3
 800bc38:	701a      	strb	r2, [r3, #0]
  break;
 800bc3a:	e008      	b.n	800bc4e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800bc3c:	4b07      	ldr	r3, [pc, #28]	@ (800bc5c <USBH_UserProcess+0x58>)
 800bc3e:	2202      	movs	r2, #2
 800bc40:	701a      	strb	r2, [r3, #0]
  break;
 800bc42:	e004      	b.n	800bc4e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800bc44:	4b05      	ldr	r3, [pc, #20]	@ (800bc5c <USBH_UserProcess+0x58>)
 800bc46:	2201      	movs	r2, #1
 800bc48:	701a      	strb	r2, [r3, #0]
  break;
 800bc4a:	e000      	b.n	800bc4e <USBH_UserProcess+0x4a>

  default:
  break;
 800bc4c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800bc4e:	bf00      	nop
 800bc50:	370c      	adds	r7, #12
 800bc52:	46bd      	mov	sp, r7
 800bc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc58:	4770      	bx	lr
 800bc5a:	bf00      	nop
 800bc5c:	200008c8 	.word	0x200008c8

0800bc60 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b08a      	sub	sp, #40	@ 0x28
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bc68:	f107 0314 	add.w	r3, r7, #20
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	601a      	str	r2, [r3, #0]
 800bc70:	605a      	str	r2, [r3, #4]
 800bc72:	609a      	str	r2, [r3, #8]
 800bc74:	60da      	str	r2, [r3, #12]
 800bc76:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bc80:	d147      	bne.n	800bd12 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bc82:	2300      	movs	r3, #0
 800bc84:	613b      	str	r3, [r7, #16]
 800bc86:	4b25      	ldr	r3, [pc, #148]	@ (800bd1c <HAL_HCD_MspInit+0xbc>)
 800bc88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc8a:	4a24      	ldr	r2, [pc, #144]	@ (800bd1c <HAL_HCD_MspInit+0xbc>)
 800bc8c:	f043 0301 	orr.w	r3, r3, #1
 800bc90:	6313      	str	r3, [r2, #48]	@ 0x30
 800bc92:	4b22      	ldr	r3, [pc, #136]	@ (800bd1c <HAL_HCD_MspInit+0xbc>)
 800bc94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc96:	f003 0301 	and.w	r3, r3, #1
 800bc9a:	613b      	str	r3, [r7, #16]
 800bc9c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800bc9e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bca2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bca4:	2300      	movs	r3, #0
 800bca6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bca8:	2300      	movs	r3, #0
 800bcaa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800bcac:	f107 0314 	add.w	r3, r7, #20
 800bcb0:	4619      	mov	r1, r3
 800bcb2:	481b      	ldr	r0, [pc, #108]	@ (800bd20 <HAL_HCD_MspInit+0xc0>)
 800bcb4:	f7f7 fcfa 	bl	80036ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800bcb8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800bcbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bcbe:	2302      	movs	r3, #2
 800bcc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bcca:	230a      	movs	r3, #10
 800bccc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bcce:	f107 0314 	add.w	r3, r7, #20
 800bcd2:	4619      	mov	r1, r3
 800bcd4:	4812      	ldr	r0, [pc, #72]	@ (800bd20 <HAL_HCD_MspInit+0xc0>)
 800bcd6:	f7f7 fce9 	bl	80036ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bcda:	4b10      	ldr	r3, [pc, #64]	@ (800bd1c <HAL_HCD_MspInit+0xbc>)
 800bcdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bcde:	4a0f      	ldr	r2, [pc, #60]	@ (800bd1c <HAL_HCD_MspInit+0xbc>)
 800bce0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bce4:	6353      	str	r3, [r2, #52]	@ 0x34
 800bce6:	2300      	movs	r3, #0
 800bce8:	60fb      	str	r3, [r7, #12]
 800bcea:	4b0c      	ldr	r3, [pc, #48]	@ (800bd1c <HAL_HCD_MspInit+0xbc>)
 800bcec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bcee:	4a0b      	ldr	r2, [pc, #44]	@ (800bd1c <HAL_HCD_MspInit+0xbc>)
 800bcf0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800bcf4:	6453      	str	r3, [r2, #68]	@ 0x44
 800bcf6:	4b09      	ldr	r3, [pc, #36]	@ (800bd1c <HAL_HCD_MspInit+0xbc>)
 800bcf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bcfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bcfe:	60fb      	str	r3, [r7, #12]
 800bd00:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bd02:	2200      	movs	r2, #0
 800bd04:	2100      	movs	r1, #0
 800bd06:	2043      	movs	r0, #67	@ 0x43
 800bd08:	f7f7 f889 	bl	8002e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bd0c:	2043      	movs	r0, #67	@ 0x43
 800bd0e:	f7f7 f8a2 	bl	8002e56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bd12:	bf00      	nop
 800bd14:	3728      	adds	r7, #40	@ 0x28
 800bd16:	46bd      	mov	sp, r7
 800bd18:	bd80      	pop	{r7, pc}
 800bd1a:	bf00      	nop
 800bd1c:	40023800 	.word	0x40023800
 800bd20:	40020000 	.word	0x40020000

0800bd24 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b082      	sub	sp, #8
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bd32:	4618      	mov	r0, r3
 800bd34:	f7fe ff6d 	bl	800ac12 <USBH_LL_IncTimer>
}
 800bd38:	bf00      	nop
 800bd3a:	3708      	adds	r7, #8
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bd80      	pop	{r7, pc}

0800bd40 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b082      	sub	sp, #8
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bd4e:	4618      	mov	r0, r3
 800bd50:	f7fe ffa9 	bl	800aca6 <USBH_LL_Connect>
}
 800bd54:	bf00      	nop
 800bd56:	3708      	adds	r7, #8
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bd80      	pop	{r7, pc}

0800bd5c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b082      	sub	sp, #8
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	f7fe ffb2 	bl	800acd4 <USBH_LL_Disconnect>
}
 800bd70:	bf00      	nop
 800bd72:	3708      	adds	r7, #8
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bd80      	pop	{r7, pc}

0800bd78 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800bd78:	b480      	push	{r7}
 800bd7a:	b083      	sub	sp, #12
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
 800bd80:	460b      	mov	r3, r1
 800bd82:	70fb      	strb	r3, [r7, #3]
 800bd84:	4613      	mov	r3, r2
 800bd86:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800bd88:	bf00      	nop
 800bd8a:	370c      	adds	r7, #12
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd92:	4770      	bx	lr

0800bd94 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b082      	sub	sp, #8
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bda2:	4618      	mov	r0, r3
 800bda4:	f7fe ff5f 	bl	800ac66 <USBH_LL_PortEnabled>
}
 800bda8:	bf00      	nop
 800bdaa:	3708      	adds	r7, #8
 800bdac:	46bd      	mov	sp, r7
 800bdae:	bd80      	pop	{r7, pc}

0800bdb0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b082      	sub	sp, #8
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	f7fe ff5f 	bl	800ac82 <USBH_LL_PortDisabled>
}
 800bdc4:	bf00      	nop
 800bdc6:	3708      	adds	r7, #8
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	bd80      	pop	{r7, pc}

0800bdcc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b082      	sub	sp, #8
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800bdda:	2b01      	cmp	r3, #1
 800bddc:	d12a      	bne.n	800be34 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800bdde:	4a18      	ldr	r2, [pc, #96]	@ (800be40 <USBH_LL_Init+0x74>)
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	4a15      	ldr	r2, [pc, #84]	@ (800be40 <USBH_LL_Init+0x74>)
 800bdea:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bdee:	4b14      	ldr	r3, [pc, #80]	@ (800be40 <USBH_LL_Init+0x74>)
 800bdf0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800bdf4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800bdf6:	4b12      	ldr	r3, [pc, #72]	@ (800be40 <USBH_LL_Init+0x74>)
 800bdf8:	2208      	movs	r2, #8
 800bdfa:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800bdfc:	4b10      	ldr	r3, [pc, #64]	@ (800be40 <USBH_LL_Init+0x74>)
 800bdfe:	2201      	movs	r2, #1
 800be00:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800be02:	4b0f      	ldr	r3, [pc, #60]	@ (800be40 <USBH_LL_Init+0x74>)
 800be04:	2200      	movs	r2, #0
 800be06:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800be08:	4b0d      	ldr	r3, [pc, #52]	@ (800be40 <USBH_LL_Init+0x74>)
 800be0a:	2202      	movs	r2, #2
 800be0c:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800be0e:	4b0c      	ldr	r3, [pc, #48]	@ (800be40 <USBH_LL_Init+0x74>)
 800be10:	2200      	movs	r2, #0
 800be12:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800be14:	480a      	ldr	r0, [pc, #40]	@ (800be40 <USBH_LL_Init+0x74>)
 800be16:	f7f7 fe2f 	bl	8003a78 <HAL_HCD_Init>
 800be1a:	4603      	mov	r3, r0
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d001      	beq.n	800be24 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800be20:	f7f5 fe50 	bl	8001ac4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800be24:	4806      	ldr	r0, [pc, #24]	@ (800be40 <USBH_LL_Init+0x74>)
 800be26:	f7f8 fa8f 	bl	8004348 <HAL_HCD_GetCurrentFrame>
 800be2a:	4603      	mov	r3, r0
 800be2c:	4619      	mov	r1, r3
 800be2e:	6878      	ldr	r0, [r7, #4]
 800be30:	f7fe fee0 	bl	800abf4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800be34:	2300      	movs	r3, #0
}
 800be36:	4618      	mov	r0, r3
 800be38:	3708      	adds	r7, #8
 800be3a:	46bd      	mov	sp, r7
 800be3c:	bd80      	pop	{r7, pc}
 800be3e:	bf00      	nop
 800be40:	200008cc 	.word	0x200008cc

0800be44 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b084      	sub	sp, #16
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be4c:	2300      	movs	r3, #0
 800be4e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800be50:	2300      	movs	r3, #0
 800be52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800be5a:	4618      	mov	r0, r3
 800be5c:	f7f8 f9fc 	bl	8004258 <HAL_HCD_Start>
 800be60:	4603      	mov	r3, r0
 800be62:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800be64:	7bfb      	ldrb	r3, [r7, #15]
 800be66:	4618      	mov	r0, r3
 800be68:	f000 f95e 	bl	800c128 <USBH_Get_USB_Status>
 800be6c:	4603      	mov	r3, r0
 800be6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be70:	7bbb      	ldrb	r3, [r7, #14]
}
 800be72:	4618      	mov	r0, r3
 800be74:	3710      	adds	r7, #16
 800be76:	46bd      	mov	sp, r7
 800be78:	bd80      	pop	{r7, pc}

0800be7a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800be7a:	b580      	push	{r7, lr}
 800be7c:	b084      	sub	sp, #16
 800be7e:	af00      	add	r7, sp, #0
 800be80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be82:	2300      	movs	r3, #0
 800be84:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800be86:	2300      	movs	r3, #0
 800be88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800be90:	4618      	mov	r0, r3
 800be92:	f7f8 fa04 	bl	800429e <HAL_HCD_Stop>
 800be96:	4603      	mov	r3, r0
 800be98:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800be9a:	7bfb      	ldrb	r3, [r7, #15]
 800be9c:	4618      	mov	r0, r3
 800be9e:	f000 f943 	bl	800c128 <USBH_Get_USB_Status>
 800bea2:	4603      	mov	r3, r0
 800bea4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bea6:	7bbb      	ldrb	r3, [r7, #14]
}
 800bea8:	4618      	mov	r0, r3
 800beaa:	3710      	adds	r7, #16
 800beac:	46bd      	mov	sp, r7
 800beae:	bd80      	pop	{r7, pc}

0800beb0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b084      	sub	sp, #16
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800beb8:	2301      	movs	r3, #1
 800beba:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bec2:	4618      	mov	r0, r3
 800bec4:	f7f8 fa4e 	bl	8004364 <HAL_HCD_GetCurrentSpeed>
 800bec8:	4603      	mov	r3, r0
 800beca:	2b02      	cmp	r3, #2
 800becc:	d00c      	beq.n	800bee8 <USBH_LL_GetSpeed+0x38>
 800bece:	2b02      	cmp	r3, #2
 800bed0:	d80d      	bhi.n	800beee <USBH_LL_GetSpeed+0x3e>
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d002      	beq.n	800bedc <USBH_LL_GetSpeed+0x2c>
 800bed6:	2b01      	cmp	r3, #1
 800bed8:	d003      	beq.n	800bee2 <USBH_LL_GetSpeed+0x32>
 800beda:	e008      	b.n	800beee <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800bedc:	2300      	movs	r3, #0
 800bede:	73fb      	strb	r3, [r7, #15]
    break;
 800bee0:	e008      	b.n	800bef4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800bee2:	2301      	movs	r3, #1
 800bee4:	73fb      	strb	r3, [r7, #15]
    break;
 800bee6:	e005      	b.n	800bef4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800bee8:	2302      	movs	r3, #2
 800beea:	73fb      	strb	r3, [r7, #15]
    break;
 800beec:	e002      	b.n	800bef4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800beee:	2301      	movs	r3, #1
 800bef0:	73fb      	strb	r3, [r7, #15]
    break;
 800bef2:	bf00      	nop
  }
  return  speed;
 800bef4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bef6:	4618      	mov	r0, r3
 800bef8:	3710      	adds	r7, #16
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}

0800befe <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800befe:	b580      	push	{r7, lr}
 800bf00:	b084      	sub	sp, #16
 800bf02:	af00      	add	r7, sp, #0
 800bf04:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf06:	2300      	movs	r3, #0
 800bf08:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bf14:	4618      	mov	r0, r3
 800bf16:	f7f8 f9df 	bl	80042d8 <HAL_HCD_ResetPort>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bf1e:	7bfb      	ldrb	r3, [r7, #15]
 800bf20:	4618      	mov	r0, r3
 800bf22:	f000 f901 	bl	800c128 <USBH_Get_USB_Status>
 800bf26:	4603      	mov	r3, r0
 800bf28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf2a:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	3710      	adds	r7, #16
 800bf30:	46bd      	mov	sp, r7
 800bf32:	bd80      	pop	{r7, pc}

0800bf34 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b082      	sub	sp, #8
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
 800bf3c:	460b      	mov	r3, r1
 800bf3e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bf46:	78fa      	ldrb	r2, [r7, #3]
 800bf48:	4611      	mov	r1, r2
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	f7f8 f9e7 	bl	800431e <HAL_HCD_HC_GetXferCount>
 800bf50:	4603      	mov	r3, r0
}
 800bf52:	4618      	mov	r0, r3
 800bf54:	3708      	adds	r7, #8
 800bf56:	46bd      	mov	sp, r7
 800bf58:	bd80      	pop	{r7, pc}

0800bf5a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bf5a:	b590      	push	{r4, r7, lr}
 800bf5c:	b089      	sub	sp, #36	@ 0x24
 800bf5e:	af04      	add	r7, sp, #16
 800bf60:	6078      	str	r0, [r7, #4]
 800bf62:	4608      	mov	r0, r1
 800bf64:	4611      	mov	r1, r2
 800bf66:	461a      	mov	r2, r3
 800bf68:	4603      	mov	r3, r0
 800bf6a:	70fb      	strb	r3, [r7, #3]
 800bf6c:	460b      	mov	r3, r1
 800bf6e:	70bb      	strb	r3, [r7, #2]
 800bf70:	4613      	mov	r3, r2
 800bf72:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf74:	2300      	movs	r3, #0
 800bf76:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bf78:	2300      	movs	r3, #0
 800bf7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800bf82:	787c      	ldrb	r4, [r7, #1]
 800bf84:	78ba      	ldrb	r2, [r7, #2]
 800bf86:	78f9      	ldrb	r1, [r7, #3]
 800bf88:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800bf8a:	9302      	str	r3, [sp, #8]
 800bf8c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800bf90:	9301      	str	r3, [sp, #4]
 800bf92:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bf96:	9300      	str	r3, [sp, #0]
 800bf98:	4623      	mov	r3, r4
 800bf9a:	f7f7 fdd4 	bl	8003b46 <HAL_HCD_HC_Init>
 800bf9e:	4603      	mov	r3, r0
 800bfa0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800bfa2:	7bfb      	ldrb	r3, [r7, #15]
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	f000 f8bf 	bl	800c128 <USBH_Get_USB_Status>
 800bfaa:	4603      	mov	r3, r0
 800bfac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bfae:	7bbb      	ldrb	r3, [r7, #14]
}
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	3714      	adds	r7, #20
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	bd90      	pop	{r4, r7, pc}

0800bfb8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b084      	sub	sp, #16
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
 800bfc0:	460b      	mov	r3, r1
 800bfc2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bfc8:	2300      	movs	r3, #0
 800bfca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bfd2:	78fa      	ldrb	r2, [r7, #3]
 800bfd4:	4611      	mov	r1, r2
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	f7f7 fe6d 	bl	8003cb6 <HAL_HCD_HC_Halt>
 800bfdc:	4603      	mov	r3, r0
 800bfde:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bfe0:	7bfb      	ldrb	r3, [r7, #15]
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	f000 f8a0 	bl	800c128 <USBH_Get_USB_Status>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bfec:	7bbb      	ldrb	r3, [r7, #14]
}
 800bfee:	4618      	mov	r0, r3
 800bff0:	3710      	adds	r7, #16
 800bff2:	46bd      	mov	sp, r7
 800bff4:	bd80      	pop	{r7, pc}

0800bff6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800bff6:	b590      	push	{r4, r7, lr}
 800bff8:	b089      	sub	sp, #36	@ 0x24
 800bffa:	af04      	add	r7, sp, #16
 800bffc:	6078      	str	r0, [r7, #4]
 800bffe:	4608      	mov	r0, r1
 800c000:	4611      	mov	r1, r2
 800c002:	461a      	mov	r2, r3
 800c004:	4603      	mov	r3, r0
 800c006:	70fb      	strb	r3, [r7, #3]
 800c008:	460b      	mov	r3, r1
 800c00a:	70bb      	strb	r3, [r7, #2]
 800c00c:	4613      	mov	r3, r2
 800c00e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c010:	2300      	movs	r3, #0
 800c012:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c014:	2300      	movs	r3, #0
 800c016:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800c01e:	787c      	ldrb	r4, [r7, #1]
 800c020:	78ba      	ldrb	r2, [r7, #2]
 800c022:	78f9      	ldrb	r1, [r7, #3]
 800c024:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800c028:	9303      	str	r3, [sp, #12]
 800c02a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c02c:	9302      	str	r3, [sp, #8]
 800c02e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c030:	9301      	str	r3, [sp, #4]
 800c032:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c036:	9300      	str	r3, [sp, #0]
 800c038:	4623      	mov	r3, r4
 800c03a:	f7f7 fe5f 	bl	8003cfc <HAL_HCD_HC_SubmitRequest>
 800c03e:	4603      	mov	r3, r0
 800c040:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800c042:	7bfb      	ldrb	r3, [r7, #15]
 800c044:	4618      	mov	r0, r3
 800c046:	f000 f86f 	bl	800c128 <USBH_Get_USB_Status>
 800c04a:	4603      	mov	r3, r0
 800c04c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c04e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c050:	4618      	mov	r0, r3
 800c052:	3714      	adds	r7, #20
 800c054:	46bd      	mov	sp, r7
 800c056:	bd90      	pop	{r4, r7, pc}

0800c058 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b082      	sub	sp, #8
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
 800c060:	460b      	mov	r3, r1
 800c062:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c06a:	78fa      	ldrb	r2, [r7, #3]
 800c06c:	4611      	mov	r1, r2
 800c06e:	4618      	mov	r0, r3
 800c070:	f7f8 f940 	bl	80042f4 <HAL_HCD_HC_GetURBState>
 800c074:	4603      	mov	r3, r0
}
 800c076:	4618      	mov	r0, r3
 800c078:	3708      	adds	r7, #8
 800c07a:	46bd      	mov	sp, r7
 800c07c:	bd80      	pop	{r7, pc}

0800c07e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800c07e:	b580      	push	{r7, lr}
 800c080:	b082      	sub	sp, #8
 800c082:	af00      	add	r7, sp, #0
 800c084:	6078      	str	r0, [r7, #4]
 800c086:	460b      	mov	r3, r1
 800c088:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800c090:	2b01      	cmp	r3, #1
 800c092:	d103      	bne.n	800c09c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800c094:	78fb      	ldrb	r3, [r7, #3]
 800c096:	4618      	mov	r0, r3
 800c098:	f000 f872 	bl	800c180 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800c09c:	20c8      	movs	r0, #200	@ 0xc8
 800c09e:	f7f6 f999 	bl	80023d4 <HAL_Delay>
  return USBH_OK;
 800c0a2:	2300      	movs	r3, #0
}
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	3708      	adds	r7, #8
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	bd80      	pop	{r7, pc}

0800c0ac <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800c0ac:	b480      	push	{r7}
 800c0ae:	b085      	sub	sp, #20
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
 800c0b4:	460b      	mov	r3, r1
 800c0b6:	70fb      	strb	r3, [r7, #3]
 800c0b8:	4613      	mov	r3, r2
 800c0ba:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c0c2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800c0c4:	78fa      	ldrb	r2, [r7, #3]
 800c0c6:	68f9      	ldr	r1, [r7, #12]
 800c0c8:	4613      	mov	r3, r2
 800c0ca:	011b      	lsls	r3, r3, #4
 800c0cc:	1a9b      	subs	r3, r3, r2
 800c0ce:	009b      	lsls	r3, r3, #2
 800c0d0:	440b      	add	r3, r1
 800c0d2:	3317      	adds	r3, #23
 800c0d4:	781b      	ldrb	r3, [r3, #0]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d00a      	beq.n	800c0f0 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800c0da:	78fa      	ldrb	r2, [r7, #3]
 800c0dc:	68f9      	ldr	r1, [r7, #12]
 800c0de:	4613      	mov	r3, r2
 800c0e0:	011b      	lsls	r3, r3, #4
 800c0e2:	1a9b      	subs	r3, r3, r2
 800c0e4:	009b      	lsls	r3, r3, #2
 800c0e6:	440b      	add	r3, r1
 800c0e8:	333c      	adds	r3, #60	@ 0x3c
 800c0ea:	78ba      	ldrb	r2, [r7, #2]
 800c0ec:	701a      	strb	r2, [r3, #0]
 800c0ee:	e009      	b.n	800c104 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800c0f0:	78fa      	ldrb	r2, [r7, #3]
 800c0f2:	68f9      	ldr	r1, [r7, #12]
 800c0f4:	4613      	mov	r3, r2
 800c0f6:	011b      	lsls	r3, r3, #4
 800c0f8:	1a9b      	subs	r3, r3, r2
 800c0fa:	009b      	lsls	r3, r3, #2
 800c0fc:	440b      	add	r3, r1
 800c0fe:	333d      	adds	r3, #61	@ 0x3d
 800c100:	78ba      	ldrb	r2, [r7, #2]
 800c102:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800c104:	2300      	movs	r3, #0
}
 800c106:	4618      	mov	r0, r3
 800c108:	3714      	adds	r7, #20
 800c10a:	46bd      	mov	sp, r7
 800c10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c110:	4770      	bx	lr

0800c112 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800c112:	b580      	push	{r7, lr}
 800c114:	b082      	sub	sp, #8
 800c116:	af00      	add	r7, sp, #0
 800c118:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c11a:	6878      	ldr	r0, [r7, #4]
 800c11c:	f7f6 f95a 	bl	80023d4 <HAL_Delay>
}
 800c120:	bf00      	nop
 800c122:	3708      	adds	r7, #8
 800c124:	46bd      	mov	sp, r7
 800c126:	bd80      	pop	{r7, pc}

0800c128 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c128:	b480      	push	{r7}
 800c12a:	b085      	sub	sp, #20
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	4603      	mov	r3, r0
 800c130:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c132:	2300      	movs	r3, #0
 800c134:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c136:	79fb      	ldrb	r3, [r7, #7]
 800c138:	2b03      	cmp	r3, #3
 800c13a:	d817      	bhi.n	800c16c <USBH_Get_USB_Status+0x44>
 800c13c:	a201      	add	r2, pc, #4	@ (adr r2, 800c144 <USBH_Get_USB_Status+0x1c>)
 800c13e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c142:	bf00      	nop
 800c144:	0800c155 	.word	0x0800c155
 800c148:	0800c15b 	.word	0x0800c15b
 800c14c:	0800c161 	.word	0x0800c161
 800c150:	0800c167 	.word	0x0800c167
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c154:	2300      	movs	r3, #0
 800c156:	73fb      	strb	r3, [r7, #15]
    break;
 800c158:	e00b      	b.n	800c172 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c15a:	2302      	movs	r3, #2
 800c15c:	73fb      	strb	r3, [r7, #15]
    break;
 800c15e:	e008      	b.n	800c172 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c160:	2301      	movs	r3, #1
 800c162:	73fb      	strb	r3, [r7, #15]
    break;
 800c164:	e005      	b.n	800c172 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c166:	2302      	movs	r3, #2
 800c168:	73fb      	strb	r3, [r7, #15]
    break;
 800c16a:	e002      	b.n	800c172 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c16c:	2302      	movs	r3, #2
 800c16e:	73fb      	strb	r3, [r7, #15]
    break;
 800c170:	bf00      	nop
  }
  return usb_status;
 800c172:	7bfb      	ldrb	r3, [r7, #15]
}
 800c174:	4618      	mov	r0, r3
 800c176:	3714      	adds	r7, #20
 800c178:	46bd      	mov	sp, r7
 800c17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17e:	4770      	bx	lr

0800c180 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b084      	sub	sp, #16
 800c184:	af00      	add	r7, sp, #0
 800c186:	4603      	mov	r3, r0
 800c188:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800c18a:	79fb      	ldrb	r3, [r7, #7]
 800c18c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800c18e:	79fb      	ldrb	r3, [r7, #7]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d102      	bne.n	800c19a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800c194:	2300      	movs	r3, #0
 800c196:	73fb      	strb	r3, [r7, #15]
 800c198:	e001      	b.n	800c19e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800c19a:	2301      	movs	r3, #1
 800c19c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800c19e:	7bfb      	ldrb	r3, [r7, #15]
 800c1a0:	461a      	mov	r2, r3
 800c1a2:	2101      	movs	r1, #1
 800c1a4:	4803      	ldr	r0, [pc, #12]	@ (800c1b4 <MX_DriverVbusFS+0x34>)
 800c1a6:	f7f7 fc35 	bl	8003a14 <HAL_GPIO_WritePin>
}
 800c1aa:	bf00      	nop
 800c1ac:	3710      	adds	r7, #16
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}
 800c1b2:	bf00      	nop
 800c1b4:	40020800 	.word	0x40020800

0800c1b8 <malloc>:
 800c1b8:	4b02      	ldr	r3, [pc, #8]	@ (800c1c4 <malloc+0xc>)
 800c1ba:	4601      	mov	r1, r0
 800c1bc:	6818      	ldr	r0, [r3, #0]
 800c1be:	f000 b82d 	b.w	800c21c <_malloc_r>
 800c1c2:	bf00      	nop
 800c1c4:	20000048 	.word	0x20000048

0800c1c8 <free>:
 800c1c8:	4b02      	ldr	r3, [pc, #8]	@ (800c1d4 <free+0xc>)
 800c1ca:	4601      	mov	r1, r0
 800c1cc:	6818      	ldr	r0, [r3, #0]
 800c1ce:	f000 b917 	b.w	800c400 <_free_r>
 800c1d2:	bf00      	nop
 800c1d4:	20000048 	.word	0x20000048

0800c1d8 <sbrk_aligned>:
 800c1d8:	b570      	push	{r4, r5, r6, lr}
 800c1da:	4e0f      	ldr	r6, [pc, #60]	@ (800c218 <sbrk_aligned+0x40>)
 800c1dc:	460c      	mov	r4, r1
 800c1de:	6831      	ldr	r1, [r6, #0]
 800c1e0:	4605      	mov	r5, r0
 800c1e2:	b911      	cbnz	r1, 800c1ea <sbrk_aligned+0x12>
 800c1e4:	f000 f8d0 	bl	800c388 <_sbrk_r>
 800c1e8:	6030      	str	r0, [r6, #0]
 800c1ea:	4621      	mov	r1, r4
 800c1ec:	4628      	mov	r0, r5
 800c1ee:	f000 f8cb 	bl	800c388 <_sbrk_r>
 800c1f2:	1c43      	adds	r3, r0, #1
 800c1f4:	d103      	bne.n	800c1fe <sbrk_aligned+0x26>
 800c1f6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c1fa:	4620      	mov	r0, r4
 800c1fc:	bd70      	pop	{r4, r5, r6, pc}
 800c1fe:	1cc4      	adds	r4, r0, #3
 800c200:	f024 0403 	bic.w	r4, r4, #3
 800c204:	42a0      	cmp	r0, r4
 800c206:	d0f8      	beq.n	800c1fa <sbrk_aligned+0x22>
 800c208:	1a21      	subs	r1, r4, r0
 800c20a:	4628      	mov	r0, r5
 800c20c:	f000 f8bc 	bl	800c388 <_sbrk_r>
 800c210:	3001      	adds	r0, #1
 800c212:	d1f2      	bne.n	800c1fa <sbrk_aligned+0x22>
 800c214:	e7ef      	b.n	800c1f6 <sbrk_aligned+0x1e>
 800c216:	bf00      	nop
 800c218:	20000cac 	.word	0x20000cac

0800c21c <_malloc_r>:
 800c21c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c220:	1ccd      	adds	r5, r1, #3
 800c222:	f025 0503 	bic.w	r5, r5, #3
 800c226:	3508      	adds	r5, #8
 800c228:	2d0c      	cmp	r5, #12
 800c22a:	bf38      	it	cc
 800c22c:	250c      	movcc	r5, #12
 800c22e:	2d00      	cmp	r5, #0
 800c230:	4606      	mov	r6, r0
 800c232:	db01      	blt.n	800c238 <_malloc_r+0x1c>
 800c234:	42a9      	cmp	r1, r5
 800c236:	d904      	bls.n	800c242 <_malloc_r+0x26>
 800c238:	230c      	movs	r3, #12
 800c23a:	6033      	str	r3, [r6, #0]
 800c23c:	2000      	movs	r0, #0
 800c23e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c242:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c318 <_malloc_r+0xfc>
 800c246:	f000 f869 	bl	800c31c <__malloc_lock>
 800c24a:	f8d8 3000 	ldr.w	r3, [r8]
 800c24e:	461c      	mov	r4, r3
 800c250:	bb44      	cbnz	r4, 800c2a4 <_malloc_r+0x88>
 800c252:	4629      	mov	r1, r5
 800c254:	4630      	mov	r0, r6
 800c256:	f7ff ffbf 	bl	800c1d8 <sbrk_aligned>
 800c25a:	1c43      	adds	r3, r0, #1
 800c25c:	4604      	mov	r4, r0
 800c25e:	d158      	bne.n	800c312 <_malloc_r+0xf6>
 800c260:	f8d8 4000 	ldr.w	r4, [r8]
 800c264:	4627      	mov	r7, r4
 800c266:	2f00      	cmp	r7, #0
 800c268:	d143      	bne.n	800c2f2 <_malloc_r+0xd6>
 800c26a:	2c00      	cmp	r4, #0
 800c26c:	d04b      	beq.n	800c306 <_malloc_r+0xea>
 800c26e:	6823      	ldr	r3, [r4, #0]
 800c270:	4639      	mov	r1, r7
 800c272:	4630      	mov	r0, r6
 800c274:	eb04 0903 	add.w	r9, r4, r3
 800c278:	f000 f886 	bl	800c388 <_sbrk_r>
 800c27c:	4581      	cmp	r9, r0
 800c27e:	d142      	bne.n	800c306 <_malloc_r+0xea>
 800c280:	6821      	ldr	r1, [r4, #0]
 800c282:	1a6d      	subs	r5, r5, r1
 800c284:	4629      	mov	r1, r5
 800c286:	4630      	mov	r0, r6
 800c288:	f7ff ffa6 	bl	800c1d8 <sbrk_aligned>
 800c28c:	3001      	adds	r0, #1
 800c28e:	d03a      	beq.n	800c306 <_malloc_r+0xea>
 800c290:	6823      	ldr	r3, [r4, #0]
 800c292:	442b      	add	r3, r5
 800c294:	6023      	str	r3, [r4, #0]
 800c296:	f8d8 3000 	ldr.w	r3, [r8]
 800c29a:	685a      	ldr	r2, [r3, #4]
 800c29c:	bb62      	cbnz	r2, 800c2f8 <_malloc_r+0xdc>
 800c29e:	f8c8 7000 	str.w	r7, [r8]
 800c2a2:	e00f      	b.n	800c2c4 <_malloc_r+0xa8>
 800c2a4:	6822      	ldr	r2, [r4, #0]
 800c2a6:	1b52      	subs	r2, r2, r5
 800c2a8:	d420      	bmi.n	800c2ec <_malloc_r+0xd0>
 800c2aa:	2a0b      	cmp	r2, #11
 800c2ac:	d917      	bls.n	800c2de <_malloc_r+0xc2>
 800c2ae:	1961      	adds	r1, r4, r5
 800c2b0:	42a3      	cmp	r3, r4
 800c2b2:	6025      	str	r5, [r4, #0]
 800c2b4:	bf18      	it	ne
 800c2b6:	6059      	strne	r1, [r3, #4]
 800c2b8:	6863      	ldr	r3, [r4, #4]
 800c2ba:	bf08      	it	eq
 800c2bc:	f8c8 1000 	streq.w	r1, [r8]
 800c2c0:	5162      	str	r2, [r4, r5]
 800c2c2:	604b      	str	r3, [r1, #4]
 800c2c4:	4630      	mov	r0, r6
 800c2c6:	f000 f82f 	bl	800c328 <__malloc_unlock>
 800c2ca:	f104 000b 	add.w	r0, r4, #11
 800c2ce:	1d23      	adds	r3, r4, #4
 800c2d0:	f020 0007 	bic.w	r0, r0, #7
 800c2d4:	1ac2      	subs	r2, r0, r3
 800c2d6:	bf1c      	itt	ne
 800c2d8:	1a1b      	subne	r3, r3, r0
 800c2da:	50a3      	strne	r3, [r4, r2]
 800c2dc:	e7af      	b.n	800c23e <_malloc_r+0x22>
 800c2de:	6862      	ldr	r2, [r4, #4]
 800c2e0:	42a3      	cmp	r3, r4
 800c2e2:	bf0c      	ite	eq
 800c2e4:	f8c8 2000 	streq.w	r2, [r8]
 800c2e8:	605a      	strne	r2, [r3, #4]
 800c2ea:	e7eb      	b.n	800c2c4 <_malloc_r+0xa8>
 800c2ec:	4623      	mov	r3, r4
 800c2ee:	6864      	ldr	r4, [r4, #4]
 800c2f0:	e7ae      	b.n	800c250 <_malloc_r+0x34>
 800c2f2:	463c      	mov	r4, r7
 800c2f4:	687f      	ldr	r7, [r7, #4]
 800c2f6:	e7b6      	b.n	800c266 <_malloc_r+0x4a>
 800c2f8:	461a      	mov	r2, r3
 800c2fa:	685b      	ldr	r3, [r3, #4]
 800c2fc:	42a3      	cmp	r3, r4
 800c2fe:	d1fb      	bne.n	800c2f8 <_malloc_r+0xdc>
 800c300:	2300      	movs	r3, #0
 800c302:	6053      	str	r3, [r2, #4]
 800c304:	e7de      	b.n	800c2c4 <_malloc_r+0xa8>
 800c306:	230c      	movs	r3, #12
 800c308:	6033      	str	r3, [r6, #0]
 800c30a:	4630      	mov	r0, r6
 800c30c:	f000 f80c 	bl	800c328 <__malloc_unlock>
 800c310:	e794      	b.n	800c23c <_malloc_r+0x20>
 800c312:	6005      	str	r5, [r0, #0]
 800c314:	e7d6      	b.n	800c2c4 <_malloc_r+0xa8>
 800c316:	bf00      	nop
 800c318:	20000cb0 	.word	0x20000cb0

0800c31c <__malloc_lock>:
 800c31c:	4801      	ldr	r0, [pc, #4]	@ (800c324 <__malloc_lock+0x8>)
 800c31e:	f000 b86d 	b.w	800c3fc <__retarget_lock_acquire_recursive>
 800c322:	bf00      	nop
 800c324:	20000dec 	.word	0x20000dec

0800c328 <__malloc_unlock>:
 800c328:	4801      	ldr	r0, [pc, #4]	@ (800c330 <__malloc_unlock+0x8>)
 800c32a:	f000 b868 	b.w	800c3fe <__retarget_lock_release_recursive>
 800c32e:	bf00      	nop
 800c330:	20000dec 	.word	0x20000dec

0800c334 <siprintf>:
 800c334:	b40e      	push	{r1, r2, r3}
 800c336:	b510      	push	{r4, lr}
 800c338:	b09d      	sub	sp, #116	@ 0x74
 800c33a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800c33c:	9002      	str	r0, [sp, #8]
 800c33e:	9006      	str	r0, [sp, #24]
 800c340:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c344:	480a      	ldr	r0, [pc, #40]	@ (800c370 <siprintf+0x3c>)
 800c346:	9107      	str	r1, [sp, #28]
 800c348:	9104      	str	r1, [sp, #16]
 800c34a:	490a      	ldr	r1, [pc, #40]	@ (800c374 <siprintf+0x40>)
 800c34c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c350:	9105      	str	r1, [sp, #20]
 800c352:	2400      	movs	r4, #0
 800c354:	a902      	add	r1, sp, #8
 800c356:	6800      	ldr	r0, [r0, #0]
 800c358:	9301      	str	r3, [sp, #4]
 800c35a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800c35c:	f000 f8f6 	bl	800c54c <_svfiprintf_r>
 800c360:	9b02      	ldr	r3, [sp, #8]
 800c362:	701c      	strb	r4, [r3, #0]
 800c364:	b01d      	add	sp, #116	@ 0x74
 800c366:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c36a:	b003      	add	sp, #12
 800c36c:	4770      	bx	lr
 800c36e:	bf00      	nop
 800c370:	20000048 	.word	0x20000048
 800c374:	ffff0208 	.word	0xffff0208

0800c378 <memset>:
 800c378:	4402      	add	r2, r0
 800c37a:	4603      	mov	r3, r0
 800c37c:	4293      	cmp	r3, r2
 800c37e:	d100      	bne.n	800c382 <memset+0xa>
 800c380:	4770      	bx	lr
 800c382:	f803 1b01 	strb.w	r1, [r3], #1
 800c386:	e7f9      	b.n	800c37c <memset+0x4>

0800c388 <_sbrk_r>:
 800c388:	b538      	push	{r3, r4, r5, lr}
 800c38a:	4d06      	ldr	r5, [pc, #24]	@ (800c3a4 <_sbrk_r+0x1c>)
 800c38c:	2300      	movs	r3, #0
 800c38e:	4604      	mov	r4, r0
 800c390:	4608      	mov	r0, r1
 800c392:	602b      	str	r3, [r5, #0]
 800c394:	f7f5 fef0 	bl	8002178 <_sbrk>
 800c398:	1c43      	adds	r3, r0, #1
 800c39a:	d102      	bne.n	800c3a2 <_sbrk_r+0x1a>
 800c39c:	682b      	ldr	r3, [r5, #0]
 800c39e:	b103      	cbz	r3, 800c3a2 <_sbrk_r+0x1a>
 800c3a0:	6023      	str	r3, [r4, #0]
 800c3a2:	bd38      	pop	{r3, r4, r5, pc}
 800c3a4:	20000df0 	.word	0x20000df0

0800c3a8 <__errno>:
 800c3a8:	4b01      	ldr	r3, [pc, #4]	@ (800c3b0 <__errno+0x8>)
 800c3aa:	6818      	ldr	r0, [r3, #0]
 800c3ac:	4770      	bx	lr
 800c3ae:	bf00      	nop
 800c3b0:	20000048 	.word	0x20000048

0800c3b4 <__libc_init_array>:
 800c3b4:	b570      	push	{r4, r5, r6, lr}
 800c3b6:	4d0d      	ldr	r5, [pc, #52]	@ (800c3ec <__libc_init_array+0x38>)
 800c3b8:	4c0d      	ldr	r4, [pc, #52]	@ (800c3f0 <__libc_init_array+0x3c>)
 800c3ba:	1b64      	subs	r4, r4, r5
 800c3bc:	10a4      	asrs	r4, r4, #2
 800c3be:	2600      	movs	r6, #0
 800c3c0:	42a6      	cmp	r6, r4
 800c3c2:	d109      	bne.n	800c3d8 <__libc_init_array+0x24>
 800c3c4:	4d0b      	ldr	r5, [pc, #44]	@ (800c3f4 <__libc_init_array+0x40>)
 800c3c6:	4c0c      	ldr	r4, [pc, #48]	@ (800c3f8 <__libc_init_array+0x44>)
 800c3c8:	f000 fba6 	bl	800cb18 <_init>
 800c3cc:	1b64      	subs	r4, r4, r5
 800c3ce:	10a4      	asrs	r4, r4, #2
 800c3d0:	2600      	movs	r6, #0
 800c3d2:	42a6      	cmp	r6, r4
 800c3d4:	d105      	bne.n	800c3e2 <__libc_init_array+0x2e>
 800c3d6:	bd70      	pop	{r4, r5, r6, pc}
 800c3d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3dc:	4798      	blx	r3
 800c3de:	3601      	adds	r6, #1
 800c3e0:	e7ee      	b.n	800c3c0 <__libc_init_array+0xc>
 800c3e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3e6:	4798      	blx	r3
 800c3e8:	3601      	adds	r6, #1
 800c3ea:	e7f2      	b.n	800c3d2 <__libc_init_array+0x1e>
 800c3ec:	0800cbbc 	.word	0x0800cbbc
 800c3f0:	0800cbbc 	.word	0x0800cbbc
 800c3f4:	0800cbbc 	.word	0x0800cbbc
 800c3f8:	0800cbc0 	.word	0x0800cbc0

0800c3fc <__retarget_lock_acquire_recursive>:
 800c3fc:	4770      	bx	lr

0800c3fe <__retarget_lock_release_recursive>:
 800c3fe:	4770      	bx	lr

0800c400 <_free_r>:
 800c400:	b538      	push	{r3, r4, r5, lr}
 800c402:	4605      	mov	r5, r0
 800c404:	2900      	cmp	r1, #0
 800c406:	d041      	beq.n	800c48c <_free_r+0x8c>
 800c408:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c40c:	1f0c      	subs	r4, r1, #4
 800c40e:	2b00      	cmp	r3, #0
 800c410:	bfb8      	it	lt
 800c412:	18e4      	addlt	r4, r4, r3
 800c414:	f7ff ff82 	bl	800c31c <__malloc_lock>
 800c418:	4a1d      	ldr	r2, [pc, #116]	@ (800c490 <_free_r+0x90>)
 800c41a:	6813      	ldr	r3, [r2, #0]
 800c41c:	b933      	cbnz	r3, 800c42c <_free_r+0x2c>
 800c41e:	6063      	str	r3, [r4, #4]
 800c420:	6014      	str	r4, [r2, #0]
 800c422:	4628      	mov	r0, r5
 800c424:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c428:	f7ff bf7e 	b.w	800c328 <__malloc_unlock>
 800c42c:	42a3      	cmp	r3, r4
 800c42e:	d908      	bls.n	800c442 <_free_r+0x42>
 800c430:	6820      	ldr	r0, [r4, #0]
 800c432:	1821      	adds	r1, r4, r0
 800c434:	428b      	cmp	r3, r1
 800c436:	bf01      	itttt	eq
 800c438:	6819      	ldreq	r1, [r3, #0]
 800c43a:	685b      	ldreq	r3, [r3, #4]
 800c43c:	1809      	addeq	r1, r1, r0
 800c43e:	6021      	streq	r1, [r4, #0]
 800c440:	e7ed      	b.n	800c41e <_free_r+0x1e>
 800c442:	461a      	mov	r2, r3
 800c444:	685b      	ldr	r3, [r3, #4]
 800c446:	b10b      	cbz	r3, 800c44c <_free_r+0x4c>
 800c448:	42a3      	cmp	r3, r4
 800c44a:	d9fa      	bls.n	800c442 <_free_r+0x42>
 800c44c:	6811      	ldr	r1, [r2, #0]
 800c44e:	1850      	adds	r0, r2, r1
 800c450:	42a0      	cmp	r0, r4
 800c452:	d10b      	bne.n	800c46c <_free_r+0x6c>
 800c454:	6820      	ldr	r0, [r4, #0]
 800c456:	4401      	add	r1, r0
 800c458:	1850      	adds	r0, r2, r1
 800c45a:	4283      	cmp	r3, r0
 800c45c:	6011      	str	r1, [r2, #0]
 800c45e:	d1e0      	bne.n	800c422 <_free_r+0x22>
 800c460:	6818      	ldr	r0, [r3, #0]
 800c462:	685b      	ldr	r3, [r3, #4]
 800c464:	6053      	str	r3, [r2, #4]
 800c466:	4408      	add	r0, r1
 800c468:	6010      	str	r0, [r2, #0]
 800c46a:	e7da      	b.n	800c422 <_free_r+0x22>
 800c46c:	d902      	bls.n	800c474 <_free_r+0x74>
 800c46e:	230c      	movs	r3, #12
 800c470:	602b      	str	r3, [r5, #0]
 800c472:	e7d6      	b.n	800c422 <_free_r+0x22>
 800c474:	6820      	ldr	r0, [r4, #0]
 800c476:	1821      	adds	r1, r4, r0
 800c478:	428b      	cmp	r3, r1
 800c47a:	bf04      	itt	eq
 800c47c:	6819      	ldreq	r1, [r3, #0]
 800c47e:	685b      	ldreq	r3, [r3, #4]
 800c480:	6063      	str	r3, [r4, #4]
 800c482:	bf04      	itt	eq
 800c484:	1809      	addeq	r1, r1, r0
 800c486:	6021      	streq	r1, [r4, #0]
 800c488:	6054      	str	r4, [r2, #4]
 800c48a:	e7ca      	b.n	800c422 <_free_r+0x22>
 800c48c:	bd38      	pop	{r3, r4, r5, pc}
 800c48e:	bf00      	nop
 800c490:	20000cb0 	.word	0x20000cb0

0800c494 <__ssputs_r>:
 800c494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c498:	688e      	ldr	r6, [r1, #8]
 800c49a:	461f      	mov	r7, r3
 800c49c:	42be      	cmp	r6, r7
 800c49e:	680b      	ldr	r3, [r1, #0]
 800c4a0:	4682      	mov	sl, r0
 800c4a2:	460c      	mov	r4, r1
 800c4a4:	4690      	mov	r8, r2
 800c4a6:	d82d      	bhi.n	800c504 <__ssputs_r+0x70>
 800c4a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c4ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c4b0:	d026      	beq.n	800c500 <__ssputs_r+0x6c>
 800c4b2:	6965      	ldr	r5, [r4, #20]
 800c4b4:	6909      	ldr	r1, [r1, #16]
 800c4b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c4ba:	eba3 0901 	sub.w	r9, r3, r1
 800c4be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c4c2:	1c7b      	adds	r3, r7, #1
 800c4c4:	444b      	add	r3, r9
 800c4c6:	106d      	asrs	r5, r5, #1
 800c4c8:	429d      	cmp	r5, r3
 800c4ca:	bf38      	it	cc
 800c4cc:	461d      	movcc	r5, r3
 800c4ce:	0553      	lsls	r3, r2, #21
 800c4d0:	d527      	bpl.n	800c522 <__ssputs_r+0x8e>
 800c4d2:	4629      	mov	r1, r5
 800c4d4:	f7ff fea2 	bl	800c21c <_malloc_r>
 800c4d8:	4606      	mov	r6, r0
 800c4da:	b360      	cbz	r0, 800c536 <__ssputs_r+0xa2>
 800c4dc:	6921      	ldr	r1, [r4, #16]
 800c4de:	464a      	mov	r2, r9
 800c4e0:	f000 fb04 	bl	800caec <memcpy>
 800c4e4:	89a3      	ldrh	r3, [r4, #12]
 800c4e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c4ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c4ee:	81a3      	strh	r3, [r4, #12]
 800c4f0:	6126      	str	r6, [r4, #16]
 800c4f2:	6165      	str	r5, [r4, #20]
 800c4f4:	444e      	add	r6, r9
 800c4f6:	eba5 0509 	sub.w	r5, r5, r9
 800c4fa:	6026      	str	r6, [r4, #0]
 800c4fc:	60a5      	str	r5, [r4, #8]
 800c4fe:	463e      	mov	r6, r7
 800c500:	42be      	cmp	r6, r7
 800c502:	d900      	bls.n	800c506 <__ssputs_r+0x72>
 800c504:	463e      	mov	r6, r7
 800c506:	6820      	ldr	r0, [r4, #0]
 800c508:	4632      	mov	r2, r6
 800c50a:	4641      	mov	r1, r8
 800c50c:	f000 fad4 	bl	800cab8 <memmove>
 800c510:	68a3      	ldr	r3, [r4, #8]
 800c512:	1b9b      	subs	r3, r3, r6
 800c514:	60a3      	str	r3, [r4, #8]
 800c516:	6823      	ldr	r3, [r4, #0]
 800c518:	4433      	add	r3, r6
 800c51a:	6023      	str	r3, [r4, #0]
 800c51c:	2000      	movs	r0, #0
 800c51e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c522:	462a      	mov	r2, r5
 800c524:	f000 fa9a 	bl	800ca5c <_realloc_r>
 800c528:	4606      	mov	r6, r0
 800c52a:	2800      	cmp	r0, #0
 800c52c:	d1e0      	bne.n	800c4f0 <__ssputs_r+0x5c>
 800c52e:	6921      	ldr	r1, [r4, #16]
 800c530:	4650      	mov	r0, sl
 800c532:	f7ff ff65 	bl	800c400 <_free_r>
 800c536:	230c      	movs	r3, #12
 800c538:	f8ca 3000 	str.w	r3, [sl]
 800c53c:	89a3      	ldrh	r3, [r4, #12]
 800c53e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c542:	81a3      	strh	r3, [r4, #12]
 800c544:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c548:	e7e9      	b.n	800c51e <__ssputs_r+0x8a>
	...

0800c54c <_svfiprintf_r>:
 800c54c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c550:	4698      	mov	r8, r3
 800c552:	898b      	ldrh	r3, [r1, #12]
 800c554:	061b      	lsls	r3, r3, #24
 800c556:	b09d      	sub	sp, #116	@ 0x74
 800c558:	4607      	mov	r7, r0
 800c55a:	460d      	mov	r5, r1
 800c55c:	4614      	mov	r4, r2
 800c55e:	d510      	bpl.n	800c582 <_svfiprintf_r+0x36>
 800c560:	690b      	ldr	r3, [r1, #16]
 800c562:	b973      	cbnz	r3, 800c582 <_svfiprintf_r+0x36>
 800c564:	2140      	movs	r1, #64	@ 0x40
 800c566:	f7ff fe59 	bl	800c21c <_malloc_r>
 800c56a:	6028      	str	r0, [r5, #0]
 800c56c:	6128      	str	r0, [r5, #16]
 800c56e:	b930      	cbnz	r0, 800c57e <_svfiprintf_r+0x32>
 800c570:	230c      	movs	r3, #12
 800c572:	603b      	str	r3, [r7, #0]
 800c574:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c578:	b01d      	add	sp, #116	@ 0x74
 800c57a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c57e:	2340      	movs	r3, #64	@ 0x40
 800c580:	616b      	str	r3, [r5, #20]
 800c582:	2300      	movs	r3, #0
 800c584:	9309      	str	r3, [sp, #36]	@ 0x24
 800c586:	2320      	movs	r3, #32
 800c588:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c58c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c590:	2330      	movs	r3, #48	@ 0x30
 800c592:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c730 <_svfiprintf_r+0x1e4>
 800c596:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c59a:	f04f 0901 	mov.w	r9, #1
 800c59e:	4623      	mov	r3, r4
 800c5a0:	469a      	mov	sl, r3
 800c5a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c5a6:	b10a      	cbz	r2, 800c5ac <_svfiprintf_r+0x60>
 800c5a8:	2a25      	cmp	r2, #37	@ 0x25
 800c5aa:	d1f9      	bne.n	800c5a0 <_svfiprintf_r+0x54>
 800c5ac:	ebba 0b04 	subs.w	fp, sl, r4
 800c5b0:	d00b      	beq.n	800c5ca <_svfiprintf_r+0x7e>
 800c5b2:	465b      	mov	r3, fp
 800c5b4:	4622      	mov	r2, r4
 800c5b6:	4629      	mov	r1, r5
 800c5b8:	4638      	mov	r0, r7
 800c5ba:	f7ff ff6b 	bl	800c494 <__ssputs_r>
 800c5be:	3001      	adds	r0, #1
 800c5c0:	f000 80a7 	beq.w	800c712 <_svfiprintf_r+0x1c6>
 800c5c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c5c6:	445a      	add	r2, fp
 800c5c8:	9209      	str	r2, [sp, #36]	@ 0x24
 800c5ca:	f89a 3000 	ldrb.w	r3, [sl]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	f000 809f 	beq.w	800c712 <_svfiprintf_r+0x1c6>
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c5da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c5de:	f10a 0a01 	add.w	sl, sl, #1
 800c5e2:	9304      	str	r3, [sp, #16]
 800c5e4:	9307      	str	r3, [sp, #28]
 800c5e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c5ea:	931a      	str	r3, [sp, #104]	@ 0x68
 800c5ec:	4654      	mov	r4, sl
 800c5ee:	2205      	movs	r2, #5
 800c5f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5f4:	484e      	ldr	r0, [pc, #312]	@ (800c730 <_svfiprintf_r+0x1e4>)
 800c5f6:	f7f3 fdf3 	bl	80001e0 <memchr>
 800c5fa:	9a04      	ldr	r2, [sp, #16]
 800c5fc:	b9d8      	cbnz	r0, 800c636 <_svfiprintf_r+0xea>
 800c5fe:	06d0      	lsls	r0, r2, #27
 800c600:	bf44      	itt	mi
 800c602:	2320      	movmi	r3, #32
 800c604:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c608:	0711      	lsls	r1, r2, #28
 800c60a:	bf44      	itt	mi
 800c60c:	232b      	movmi	r3, #43	@ 0x2b
 800c60e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c612:	f89a 3000 	ldrb.w	r3, [sl]
 800c616:	2b2a      	cmp	r3, #42	@ 0x2a
 800c618:	d015      	beq.n	800c646 <_svfiprintf_r+0xfa>
 800c61a:	9a07      	ldr	r2, [sp, #28]
 800c61c:	4654      	mov	r4, sl
 800c61e:	2000      	movs	r0, #0
 800c620:	f04f 0c0a 	mov.w	ip, #10
 800c624:	4621      	mov	r1, r4
 800c626:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c62a:	3b30      	subs	r3, #48	@ 0x30
 800c62c:	2b09      	cmp	r3, #9
 800c62e:	d94b      	bls.n	800c6c8 <_svfiprintf_r+0x17c>
 800c630:	b1b0      	cbz	r0, 800c660 <_svfiprintf_r+0x114>
 800c632:	9207      	str	r2, [sp, #28]
 800c634:	e014      	b.n	800c660 <_svfiprintf_r+0x114>
 800c636:	eba0 0308 	sub.w	r3, r0, r8
 800c63a:	fa09 f303 	lsl.w	r3, r9, r3
 800c63e:	4313      	orrs	r3, r2
 800c640:	9304      	str	r3, [sp, #16]
 800c642:	46a2      	mov	sl, r4
 800c644:	e7d2      	b.n	800c5ec <_svfiprintf_r+0xa0>
 800c646:	9b03      	ldr	r3, [sp, #12]
 800c648:	1d19      	adds	r1, r3, #4
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	9103      	str	r1, [sp, #12]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	bfbb      	ittet	lt
 800c652:	425b      	neglt	r3, r3
 800c654:	f042 0202 	orrlt.w	r2, r2, #2
 800c658:	9307      	strge	r3, [sp, #28]
 800c65a:	9307      	strlt	r3, [sp, #28]
 800c65c:	bfb8      	it	lt
 800c65e:	9204      	strlt	r2, [sp, #16]
 800c660:	7823      	ldrb	r3, [r4, #0]
 800c662:	2b2e      	cmp	r3, #46	@ 0x2e
 800c664:	d10a      	bne.n	800c67c <_svfiprintf_r+0x130>
 800c666:	7863      	ldrb	r3, [r4, #1]
 800c668:	2b2a      	cmp	r3, #42	@ 0x2a
 800c66a:	d132      	bne.n	800c6d2 <_svfiprintf_r+0x186>
 800c66c:	9b03      	ldr	r3, [sp, #12]
 800c66e:	1d1a      	adds	r2, r3, #4
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	9203      	str	r2, [sp, #12]
 800c674:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c678:	3402      	adds	r4, #2
 800c67a:	9305      	str	r3, [sp, #20]
 800c67c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c740 <_svfiprintf_r+0x1f4>
 800c680:	7821      	ldrb	r1, [r4, #0]
 800c682:	2203      	movs	r2, #3
 800c684:	4650      	mov	r0, sl
 800c686:	f7f3 fdab 	bl	80001e0 <memchr>
 800c68a:	b138      	cbz	r0, 800c69c <_svfiprintf_r+0x150>
 800c68c:	9b04      	ldr	r3, [sp, #16]
 800c68e:	eba0 000a 	sub.w	r0, r0, sl
 800c692:	2240      	movs	r2, #64	@ 0x40
 800c694:	4082      	lsls	r2, r0
 800c696:	4313      	orrs	r3, r2
 800c698:	3401      	adds	r4, #1
 800c69a:	9304      	str	r3, [sp, #16]
 800c69c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6a0:	4824      	ldr	r0, [pc, #144]	@ (800c734 <_svfiprintf_r+0x1e8>)
 800c6a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c6a6:	2206      	movs	r2, #6
 800c6a8:	f7f3 fd9a 	bl	80001e0 <memchr>
 800c6ac:	2800      	cmp	r0, #0
 800c6ae:	d036      	beq.n	800c71e <_svfiprintf_r+0x1d2>
 800c6b0:	4b21      	ldr	r3, [pc, #132]	@ (800c738 <_svfiprintf_r+0x1ec>)
 800c6b2:	bb1b      	cbnz	r3, 800c6fc <_svfiprintf_r+0x1b0>
 800c6b4:	9b03      	ldr	r3, [sp, #12]
 800c6b6:	3307      	adds	r3, #7
 800c6b8:	f023 0307 	bic.w	r3, r3, #7
 800c6bc:	3308      	adds	r3, #8
 800c6be:	9303      	str	r3, [sp, #12]
 800c6c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6c2:	4433      	add	r3, r6
 800c6c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c6c6:	e76a      	b.n	800c59e <_svfiprintf_r+0x52>
 800c6c8:	fb0c 3202 	mla	r2, ip, r2, r3
 800c6cc:	460c      	mov	r4, r1
 800c6ce:	2001      	movs	r0, #1
 800c6d0:	e7a8      	b.n	800c624 <_svfiprintf_r+0xd8>
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	3401      	adds	r4, #1
 800c6d6:	9305      	str	r3, [sp, #20]
 800c6d8:	4619      	mov	r1, r3
 800c6da:	f04f 0c0a 	mov.w	ip, #10
 800c6de:	4620      	mov	r0, r4
 800c6e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c6e4:	3a30      	subs	r2, #48	@ 0x30
 800c6e6:	2a09      	cmp	r2, #9
 800c6e8:	d903      	bls.n	800c6f2 <_svfiprintf_r+0x1a6>
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d0c6      	beq.n	800c67c <_svfiprintf_r+0x130>
 800c6ee:	9105      	str	r1, [sp, #20]
 800c6f0:	e7c4      	b.n	800c67c <_svfiprintf_r+0x130>
 800c6f2:	fb0c 2101 	mla	r1, ip, r1, r2
 800c6f6:	4604      	mov	r4, r0
 800c6f8:	2301      	movs	r3, #1
 800c6fa:	e7f0      	b.n	800c6de <_svfiprintf_r+0x192>
 800c6fc:	ab03      	add	r3, sp, #12
 800c6fe:	9300      	str	r3, [sp, #0]
 800c700:	462a      	mov	r2, r5
 800c702:	4b0e      	ldr	r3, [pc, #56]	@ (800c73c <_svfiprintf_r+0x1f0>)
 800c704:	a904      	add	r1, sp, #16
 800c706:	4638      	mov	r0, r7
 800c708:	f3af 8000 	nop.w
 800c70c:	1c42      	adds	r2, r0, #1
 800c70e:	4606      	mov	r6, r0
 800c710:	d1d6      	bne.n	800c6c0 <_svfiprintf_r+0x174>
 800c712:	89ab      	ldrh	r3, [r5, #12]
 800c714:	065b      	lsls	r3, r3, #25
 800c716:	f53f af2d 	bmi.w	800c574 <_svfiprintf_r+0x28>
 800c71a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c71c:	e72c      	b.n	800c578 <_svfiprintf_r+0x2c>
 800c71e:	ab03      	add	r3, sp, #12
 800c720:	9300      	str	r3, [sp, #0]
 800c722:	462a      	mov	r2, r5
 800c724:	4b05      	ldr	r3, [pc, #20]	@ (800c73c <_svfiprintf_r+0x1f0>)
 800c726:	a904      	add	r1, sp, #16
 800c728:	4638      	mov	r0, r7
 800c72a:	f000 f879 	bl	800c820 <_printf_i>
 800c72e:	e7ed      	b.n	800c70c <_svfiprintf_r+0x1c0>
 800c730:	0800cb80 	.word	0x0800cb80
 800c734:	0800cb8a 	.word	0x0800cb8a
 800c738:	00000000 	.word	0x00000000
 800c73c:	0800c495 	.word	0x0800c495
 800c740:	0800cb86 	.word	0x0800cb86

0800c744 <_printf_common>:
 800c744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c748:	4616      	mov	r6, r2
 800c74a:	4698      	mov	r8, r3
 800c74c:	688a      	ldr	r2, [r1, #8]
 800c74e:	690b      	ldr	r3, [r1, #16]
 800c750:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c754:	4293      	cmp	r3, r2
 800c756:	bfb8      	it	lt
 800c758:	4613      	movlt	r3, r2
 800c75a:	6033      	str	r3, [r6, #0]
 800c75c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c760:	4607      	mov	r7, r0
 800c762:	460c      	mov	r4, r1
 800c764:	b10a      	cbz	r2, 800c76a <_printf_common+0x26>
 800c766:	3301      	adds	r3, #1
 800c768:	6033      	str	r3, [r6, #0]
 800c76a:	6823      	ldr	r3, [r4, #0]
 800c76c:	0699      	lsls	r1, r3, #26
 800c76e:	bf42      	ittt	mi
 800c770:	6833      	ldrmi	r3, [r6, #0]
 800c772:	3302      	addmi	r3, #2
 800c774:	6033      	strmi	r3, [r6, #0]
 800c776:	6825      	ldr	r5, [r4, #0]
 800c778:	f015 0506 	ands.w	r5, r5, #6
 800c77c:	d106      	bne.n	800c78c <_printf_common+0x48>
 800c77e:	f104 0a19 	add.w	sl, r4, #25
 800c782:	68e3      	ldr	r3, [r4, #12]
 800c784:	6832      	ldr	r2, [r6, #0]
 800c786:	1a9b      	subs	r3, r3, r2
 800c788:	42ab      	cmp	r3, r5
 800c78a:	dc26      	bgt.n	800c7da <_printf_common+0x96>
 800c78c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c790:	6822      	ldr	r2, [r4, #0]
 800c792:	3b00      	subs	r3, #0
 800c794:	bf18      	it	ne
 800c796:	2301      	movne	r3, #1
 800c798:	0692      	lsls	r2, r2, #26
 800c79a:	d42b      	bmi.n	800c7f4 <_printf_common+0xb0>
 800c79c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c7a0:	4641      	mov	r1, r8
 800c7a2:	4638      	mov	r0, r7
 800c7a4:	47c8      	blx	r9
 800c7a6:	3001      	adds	r0, #1
 800c7a8:	d01e      	beq.n	800c7e8 <_printf_common+0xa4>
 800c7aa:	6823      	ldr	r3, [r4, #0]
 800c7ac:	6922      	ldr	r2, [r4, #16]
 800c7ae:	f003 0306 	and.w	r3, r3, #6
 800c7b2:	2b04      	cmp	r3, #4
 800c7b4:	bf02      	ittt	eq
 800c7b6:	68e5      	ldreq	r5, [r4, #12]
 800c7b8:	6833      	ldreq	r3, [r6, #0]
 800c7ba:	1aed      	subeq	r5, r5, r3
 800c7bc:	68a3      	ldr	r3, [r4, #8]
 800c7be:	bf0c      	ite	eq
 800c7c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c7c4:	2500      	movne	r5, #0
 800c7c6:	4293      	cmp	r3, r2
 800c7c8:	bfc4      	itt	gt
 800c7ca:	1a9b      	subgt	r3, r3, r2
 800c7cc:	18ed      	addgt	r5, r5, r3
 800c7ce:	2600      	movs	r6, #0
 800c7d0:	341a      	adds	r4, #26
 800c7d2:	42b5      	cmp	r5, r6
 800c7d4:	d11a      	bne.n	800c80c <_printf_common+0xc8>
 800c7d6:	2000      	movs	r0, #0
 800c7d8:	e008      	b.n	800c7ec <_printf_common+0xa8>
 800c7da:	2301      	movs	r3, #1
 800c7dc:	4652      	mov	r2, sl
 800c7de:	4641      	mov	r1, r8
 800c7e0:	4638      	mov	r0, r7
 800c7e2:	47c8      	blx	r9
 800c7e4:	3001      	adds	r0, #1
 800c7e6:	d103      	bne.n	800c7f0 <_printf_common+0xac>
 800c7e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c7ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7f0:	3501      	adds	r5, #1
 800c7f2:	e7c6      	b.n	800c782 <_printf_common+0x3e>
 800c7f4:	18e1      	adds	r1, r4, r3
 800c7f6:	1c5a      	adds	r2, r3, #1
 800c7f8:	2030      	movs	r0, #48	@ 0x30
 800c7fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c7fe:	4422      	add	r2, r4
 800c800:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c804:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c808:	3302      	adds	r3, #2
 800c80a:	e7c7      	b.n	800c79c <_printf_common+0x58>
 800c80c:	2301      	movs	r3, #1
 800c80e:	4622      	mov	r2, r4
 800c810:	4641      	mov	r1, r8
 800c812:	4638      	mov	r0, r7
 800c814:	47c8      	blx	r9
 800c816:	3001      	adds	r0, #1
 800c818:	d0e6      	beq.n	800c7e8 <_printf_common+0xa4>
 800c81a:	3601      	adds	r6, #1
 800c81c:	e7d9      	b.n	800c7d2 <_printf_common+0x8e>
	...

0800c820 <_printf_i>:
 800c820:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c824:	7e0f      	ldrb	r7, [r1, #24]
 800c826:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c828:	2f78      	cmp	r7, #120	@ 0x78
 800c82a:	4691      	mov	r9, r2
 800c82c:	4680      	mov	r8, r0
 800c82e:	460c      	mov	r4, r1
 800c830:	469a      	mov	sl, r3
 800c832:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c836:	d807      	bhi.n	800c848 <_printf_i+0x28>
 800c838:	2f62      	cmp	r7, #98	@ 0x62
 800c83a:	d80a      	bhi.n	800c852 <_printf_i+0x32>
 800c83c:	2f00      	cmp	r7, #0
 800c83e:	f000 80d1 	beq.w	800c9e4 <_printf_i+0x1c4>
 800c842:	2f58      	cmp	r7, #88	@ 0x58
 800c844:	f000 80b8 	beq.w	800c9b8 <_printf_i+0x198>
 800c848:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c84c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c850:	e03a      	b.n	800c8c8 <_printf_i+0xa8>
 800c852:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c856:	2b15      	cmp	r3, #21
 800c858:	d8f6      	bhi.n	800c848 <_printf_i+0x28>
 800c85a:	a101      	add	r1, pc, #4	@ (adr r1, 800c860 <_printf_i+0x40>)
 800c85c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c860:	0800c8b9 	.word	0x0800c8b9
 800c864:	0800c8cd 	.word	0x0800c8cd
 800c868:	0800c849 	.word	0x0800c849
 800c86c:	0800c849 	.word	0x0800c849
 800c870:	0800c849 	.word	0x0800c849
 800c874:	0800c849 	.word	0x0800c849
 800c878:	0800c8cd 	.word	0x0800c8cd
 800c87c:	0800c849 	.word	0x0800c849
 800c880:	0800c849 	.word	0x0800c849
 800c884:	0800c849 	.word	0x0800c849
 800c888:	0800c849 	.word	0x0800c849
 800c88c:	0800c9cb 	.word	0x0800c9cb
 800c890:	0800c8f7 	.word	0x0800c8f7
 800c894:	0800c985 	.word	0x0800c985
 800c898:	0800c849 	.word	0x0800c849
 800c89c:	0800c849 	.word	0x0800c849
 800c8a0:	0800c9ed 	.word	0x0800c9ed
 800c8a4:	0800c849 	.word	0x0800c849
 800c8a8:	0800c8f7 	.word	0x0800c8f7
 800c8ac:	0800c849 	.word	0x0800c849
 800c8b0:	0800c849 	.word	0x0800c849
 800c8b4:	0800c98d 	.word	0x0800c98d
 800c8b8:	6833      	ldr	r3, [r6, #0]
 800c8ba:	1d1a      	adds	r2, r3, #4
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	6032      	str	r2, [r6, #0]
 800c8c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c8c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c8c8:	2301      	movs	r3, #1
 800c8ca:	e09c      	b.n	800ca06 <_printf_i+0x1e6>
 800c8cc:	6833      	ldr	r3, [r6, #0]
 800c8ce:	6820      	ldr	r0, [r4, #0]
 800c8d0:	1d19      	adds	r1, r3, #4
 800c8d2:	6031      	str	r1, [r6, #0]
 800c8d4:	0606      	lsls	r6, r0, #24
 800c8d6:	d501      	bpl.n	800c8dc <_printf_i+0xbc>
 800c8d8:	681d      	ldr	r5, [r3, #0]
 800c8da:	e003      	b.n	800c8e4 <_printf_i+0xc4>
 800c8dc:	0645      	lsls	r5, r0, #25
 800c8de:	d5fb      	bpl.n	800c8d8 <_printf_i+0xb8>
 800c8e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c8e4:	2d00      	cmp	r5, #0
 800c8e6:	da03      	bge.n	800c8f0 <_printf_i+0xd0>
 800c8e8:	232d      	movs	r3, #45	@ 0x2d
 800c8ea:	426d      	negs	r5, r5
 800c8ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c8f0:	4858      	ldr	r0, [pc, #352]	@ (800ca54 <_printf_i+0x234>)
 800c8f2:	230a      	movs	r3, #10
 800c8f4:	e011      	b.n	800c91a <_printf_i+0xfa>
 800c8f6:	6821      	ldr	r1, [r4, #0]
 800c8f8:	6833      	ldr	r3, [r6, #0]
 800c8fa:	0608      	lsls	r0, r1, #24
 800c8fc:	f853 5b04 	ldr.w	r5, [r3], #4
 800c900:	d402      	bmi.n	800c908 <_printf_i+0xe8>
 800c902:	0649      	lsls	r1, r1, #25
 800c904:	bf48      	it	mi
 800c906:	b2ad      	uxthmi	r5, r5
 800c908:	2f6f      	cmp	r7, #111	@ 0x6f
 800c90a:	4852      	ldr	r0, [pc, #328]	@ (800ca54 <_printf_i+0x234>)
 800c90c:	6033      	str	r3, [r6, #0]
 800c90e:	bf14      	ite	ne
 800c910:	230a      	movne	r3, #10
 800c912:	2308      	moveq	r3, #8
 800c914:	2100      	movs	r1, #0
 800c916:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c91a:	6866      	ldr	r6, [r4, #4]
 800c91c:	60a6      	str	r6, [r4, #8]
 800c91e:	2e00      	cmp	r6, #0
 800c920:	db05      	blt.n	800c92e <_printf_i+0x10e>
 800c922:	6821      	ldr	r1, [r4, #0]
 800c924:	432e      	orrs	r6, r5
 800c926:	f021 0104 	bic.w	r1, r1, #4
 800c92a:	6021      	str	r1, [r4, #0]
 800c92c:	d04b      	beq.n	800c9c6 <_printf_i+0x1a6>
 800c92e:	4616      	mov	r6, r2
 800c930:	fbb5 f1f3 	udiv	r1, r5, r3
 800c934:	fb03 5711 	mls	r7, r3, r1, r5
 800c938:	5dc7      	ldrb	r7, [r0, r7]
 800c93a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c93e:	462f      	mov	r7, r5
 800c940:	42bb      	cmp	r3, r7
 800c942:	460d      	mov	r5, r1
 800c944:	d9f4      	bls.n	800c930 <_printf_i+0x110>
 800c946:	2b08      	cmp	r3, #8
 800c948:	d10b      	bne.n	800c962 <_printf_i+0x142>
 800c94a:	6823      	ldr	r3, [r4, #0]
 800c94c:	07df      	lsls	r7, r3, #31
 800c94e:	d508      	bpl.n	800c962 <_printf_i+0x142>
 800c950:	6923      	ldr	r3, [r4, #16]
 800c952:	6861      	ldr	r1, [r4, #4]
 800c954:	4299      	cmp	r1, r3
 800c956:	bfde      	ittt	le
 800c958:	2330      	movle	r3, #48	@ 0x30
 800c95a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c95e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800c962:	1b92      	subs	r2, r2, r6
 800c964:	6122      	str	r2, [r4, #16]
 800c966:	f8cd a000 	str.w	sl, [sp]
 800c96a:	464b      	mov	r3, r9
 800c96c:	aa03      	add	r2, sp, #12
 800c96e:	4621      	mov	r1, r4
 800c970:	4640      	mov	r0, r8
 800c972:	f7ff fee7 	bl	800c744 <_printf_common>
 800c976:	3001      	adds	r0, #1
 800c978:	d14a      	bne.n	800ca10 <_printf_i+0x1f0>
 800c97a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c97e:	b004      	add	sp, #16
 800c980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c984:	6823      	ldr	r3, [r4, #0]
 800c986:	f043 0320 	orr.w	r3, r3, #32
 800c98a:	6023      	str	r3, [r4, #0]
 800c98c:	4832      	ldr	r0, [pc, #200]	@ (800ca58 <_printf_i+0x238>)
 800c98e:	2778      	movs	r7, #120	@ 0x78
 800c990:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c994:	6823      	ldr	r3, [r4, #0]
 800c996:	6831      	ldr	r1, [r6, #0]
 800c998:	061f      	lsls	r7, r3, #24
 800c99a:	f851 5b04 	ldr.w	r5, [r1], #4
 800c99e:	d402      	bmi.n	800c9a6 <_printf_i+0x186>
 800c9a0:	065f      	lsls	r7, r3, #25
 800c9a2:	bf48      	it	mi
 800c9a4:	b2ad      	uxthmi	r5, r5
 800c9a6:	6031      	str	r1, [r6, #0]
 800c9a8:	07d9      	lsls	r1, r3, #31
 800c9aa:	bf44      	itt	mi
 800c9ac:	f043 0320 	orrmi.w	r3, r3, #32
 800c9b0:	6023      	strmi	r3, [r4, #0]
 800c9b2:	b11d      	cbz	r5, 800c9bc <_printf_i+0x19c>
 800c9b4:	2310      	movs	r3, #16
 800c9b6:	e7ad      	b.n	800c914 <_printf_i+0xf4>
 800c9b8:	4826      	ldr	r0, [pc, #152]	@ (800ca54 <_printf_i+0x234>)
 800c9ba:	e7e9      	b.n	800c990 <_printf_i+0x170>
 800c9bc:	6823      	ldr	r3, [r4, #0]
 800c9be:	f023 0320 	bic.w	r3, r3, #32
 800c9c2:	6023      	str	r3, [r4, #0]
 800c9c4:	e7f6      	b.n	800c9b4 <_printf_i+0x194>
 800c9c6:	4616      	mov	r6, r2
 800c9c8:	e7bd      	b.n	800c946 <_printf_i+0x126>
 800c9ca:	6833      	ldr	r3, [r6, #0]
 800c9cc:	6825      	ldr	r5, [r4, #0]
 800c9ce:	6961      	ldr	r1, [r4, #20]
 800c9d0:	1d18      	adds	r0, r3, #4
 800c9d2:	6030      	str	r0, [r6, #0]
 800c9d4:	062e      	lsls	r6, r5, #24
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	d501      	bpl.n	800c9de <_printf_i+0x1be>
 800c9da:	6019      	str	r1, [r3, #0]
 800c9dc:	e002      	b.n	800c9e4 <_printf_i+0x1c4>
 800c9de:	0668      	lsls	r0, r5, #25
 800c9e0:	d5fb      	bpl.n	800c9da <_printf_i+0x1ba>
 800c9e2:	8019      	strh	r1, [r3, #0]
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	6123      	str	r3, [r4, #16]
 800c9e8:	4616      	mov	r6, r2
 800c9ea:	e7bc      	b.n	800c966 <_printf_i+0x146>
 800c9ec:	6833      	ldr	r3, [r6, #0]
 800c9ee:	1d1a      	adds	r2, r3, #4
 800c9f0:	6032      	str	r2, [r6, #0]
 800c9f2:	681e      	ldr	r6, [r3, #0]
 800c9f4:	6862      	ldr	r2, [r4, #4]
 800c9f6:	2100      	movs	r1, #0
 800c9f8:	4630      	mov	r0, r6
 800c9fa:	f7f3 fbf1 	bl	80001e0 <memchr>
 800c9fe:	b108      	cbz	r0, 800ca04 <_printf_i+0x1e4>
 800ca00:	1b80      	subs	r0, r0, r6
 800ca02:	6060      	str	r0, [r4, #4]
 800ca04:	6863      	ldr	r3, [r4, #4]
 800ca06:	6123      	str	r3, [r4, #16]
 800ca08:	2300      	movs	r3, #0
 800ca0a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ca0e:	e7aa      	b.n	800c966 <_printf_i+0x146>
 800ca10:	6923      	ldr	r3, [r4, #16]
 800ca12:	4632      	mov	r2, r6
 800ca14:	4649      	mov	r1, r9
 800ca16:	4640      	mov	r0, r8
 800ca18:	47d0      	blx	sl
 800ca1a:	3001      	adds	r0, #1
 800ca1c:	d0ad      	beq.n	800c97a <_printf_i+0x15a>
 800ca1e:	6823      	ldr	r3, [r4, #0]
 800ca20:	079b      	lsls	r3, r3, #30
 800ca22:	d413      	bmi.n	800ca4c <_printf_i+0x22c>
 800ca24:	68e0      	ldr	r0, [r4, #12]
 800ca26:	9b03      	ldr	r3, [sp, #12]
 800ca28:	4298      	cmp	r0, r3
 800ca2a:	bfb8      	it	lt
 800ca2c:	4618      	movlt	r0, r3
 800ca2e:	e7a6      	b.n	800c97e <_printf_i+0x15e>
 800ca30:	2301      	movs	r3, #1
 800ca32:	4632      	mov	r2, r6
 800ca34:	4649      	mov	r1, r9
 800ca36:	4640      	mov	r0, r8
 800ca38:	47d0      	blx	sl
 800ca3a:	3001      	adds	r0, #1
 800ca3c:	d09d      	beq.n	800c97a <_printf_i+0x15a>
 800ca3e:	3501      	adds	r5, #1
 800ca40:	68e3      	ldr	r3, [r4, #12]
 800ca42:	9903      	ldr	r1, [sp, #12]
 800ca44:	1a5b      	subs	r3, r3, r1
 800ca46:	42ab      	cmp	r3, r5
 800ca48:	dcf2      	bgt.n	800ca30 <_printf_i+0x210>
 800ca4a:	e7eb      	b.n	800ca24 <_printf_i+0x204>
 800ca4c:	2500      	movs	r5, #0
 800ca4e:	f104 0619 	add.w	r6, r4, #25
 800ca52:	e7f5      	b.n	800ca40 <_printf_i+0x220>
 800ca54:	0800cb91 	.word	0x0800cb91
 800ca58:	0800cba2 	.word	0x0800cba2

0800ca5c <_realloc_r>:
 800ca5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca60:	4607      	mov	r7, r0
 800ca62:	4614      	mov	r4, r2
 800ca64:	460d      	mov	r5, r1
 800ca66:	b921      	cbnz	r1, 800ca72 <_realloc_r+0x16>
 800ca68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca6c:	4611      	mov	r1, r2
 800ca6e:	f7ff bbd5 	b.w	800c21c <_malloc_r>
 800ca72:	b92a      	cbnz	r2, 800ca80 <_realloc_r+0x24>
 800ca74:	f7ff fcc4 	bl	800c400 <_free_r>
 800ca78:	4625      	mov	r5, r4
 800ca7a:	4628      	mov	r0, r5
 800ca7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca80:	f000 f842 	bl	800cb08 <_malloc_usable_size_r>
 800ca84:	4284      	cmp	r4, r0
 800ca86:	4606      	mov	r6, r0
 800ca88:	d802      	bhi.n	800ca90 <_realloc_r+0x34>
 800ca8a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ca8e:	d8f4      	bhi.n	800ca7a <_realloc_r+0x1e>
 800ca90:	4621      	mov	r1, r4
 800ca92:	4638      	mov	r0, r7
 800ca94:	f7ff fbc2 	bl	800c21c <_malloc_r>
 800ca98:	4680      	mov	r8, r0
 800ca9a:	b908      	cbnz	r0, 800caa0 <_realloc_r+0x44>
 800ca9c:	4645      	mov	r5, r8
 800ca9e:	e7ec      	b.n	800ca7a <_realloc_r+0x1e>
 800caa0:	42b4      	cmp	r4, r6
 800caa2:	4622      	mov	r2, r4
 800caa4:	4629      	mov	r1, r5
 800caa6:	bf28      	it	cs
 800caa8:	4632      	movcs	r2, r6
 800caaa:	f000 f81f 	bl	800caec <memcpy>
 800caae:	4629      	mov	r1, r5
 800cab0:	4638      	mov	r0, r7
 800cab2:	f7ff fca5 	bl	800c400 <_free_r>
 800cab6:	e7f1      	b.n	800ca9c <_realloc_r+0x40>

0800cab8 <memmove>:
 800cab8:	4288      	cmp	r0, r1
 800caba:	b510      	push	{r4, lr}
 800cabc:	eb01 0402 	add.w	r4, r1, r2
 800cac0:	d902      	bls.n	800cac8 <memmove+0x10>
 800cac2:	4284      	cmp	r4, r0
 800cac4:	4623      	mov	r3, r4
 800cac6:	d807      	bhi.n	800cad8 <memmove+0x20>
 800cac8:	1e43      	subs	r3, r0, #1
 800caca:	42a1      	cmp	r1, r4
 800cacc:	d008      	beq.n	800cae0 <memmove+0x28>
 800cace:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cad2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cad6:	e7f8      	b.n	800caca <memmove+0x12>
 800cad8:	4402      	add	r2, r0
 800cada:	4601      	mov	r1, r0
 800cadc:	428a      	cmp	r2, r1
 800cade:	d100      	bne.n	800cae2 <memmove+0x2a>
 800cae0:	bd10      	pop	{r4, pc}
 800cae2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cae6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800caea:	e7f7      	b.n	800cadc <memmove+0x24>

0800caec <memcpy>:
 800caec:	440a      	add	r2, r1
 800caee:	4291      	cmp	r1, r2
 800caf0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800caf4:	d100      	bne.n	800caf8 <memcpy+0xc>
 800caf6:	4770      	bx	lr
 800caf8:	b510      	push	{r4, lr}
 800cafa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cafe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cb02:	4291      	cmp	r1, r2
 800cb04:	d1f9      	bne.n	800cafa <memcpy+0xe>
 800cb06:	bd10      	pop	{r4, pc}

0800cb08 <_malloc_usable_size_r>:
 800cb08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb0c:	1f18      	subs	r0, r3, #4
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	bfbc      	itt	lt
 800cb12:	580b      	ldrlt	r3, [r1, r0]
 800cb14:	18c0      	addlt	r0, r0, r3
 800cb16:	4770      	bx	lr

0800cb18 <_init>:
 800cb18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb1a:	bf00      	nop
 800cb1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb1e:	bc08      	pop	{r3}
 800cb20:	469e      	mov	lr, r3
 800cb22:	4770      	bx	lr

0800cb24 <_fini>:
 800cb24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb26:	bf00      	nop
 800cb28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb2a:	bc08      	pop	{r3}
 800cb2c:	469e      	mov	lr, r3
 800cb2e:	4770      	bx	lr
