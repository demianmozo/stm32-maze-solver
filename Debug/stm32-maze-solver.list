
stm32-maze-solver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a884  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800aa0c  0800aa0c  0000ba0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa30  0800aa30  0000c07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800aa30  0800aa30  0000ba30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aa38  0800aa38  0000c07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa38  0800aa38  0000ba38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800aa3c  0800aa3c  0000ba3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800aa40  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c07c  2**0
                  CONTENTS
 10 .bss          00000b10  2000007c  2000007c  0000c07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b8c  20000b8c  0000c07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bd6d  00000000  00000000  0000c0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000044ff  00000000  00000000  00027e19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018a8  00000000  00000000  0002c318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000130f  00000000  00000000  0002dbc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005ac5  00000000  00000000  0002eecf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002036b  00000000  00000000  00034994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1294  00000000  00000000  00054cff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00135f93  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006bd8  00000000  00000000  00135fd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  0013cbb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a9f4 	.word	0x0800a9f4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	0800a9f4 	.word	0x0800a9f4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <control_motor_init>:

/**
 * @brief Inicializa el control de motores
 */
void control_motor_init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
    // Iniciar PWM en ambos canales
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // Motor izquierdo (PC8)
 80004f8:	2108      	movs	r1, #8
 80004fa:	4805      	ldr	r0, [pc, #20]	@ (8000510 <control_motor_init+0x1c>)
 80004fc:	f005 fe46 	bl	800618c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // Motor derecho (PC9)
 8000500:	210c      	movs	r1, #12
 8000502:	4803      	ldr	r0, [pc, #12]	@ (8000510 <control_motor_init+0x1c>)
 8000504:	f005 fe42 	bl	800618c <HAL_TIM_PWM_Start>

    // comienza yendo para adelante
    avanza();
 8000508:	f000 f88c 	bl	8000624 <avanza>
}
 800050c:	bf00      	nop
 800050e:	bd80      	pop	{r7, pc}
 8000510:	20000234 	.word	0x20000234

08000514 <set_motor_izq>:
 * @brief Configura motor izquierdo
 * @param estado: MOTOR_AVANCE, MOTOR_RETROCESO o MOTOR_FRENADO
 * @param pwm: Valor PWM (0-1000)
 */
void set_motor_izq(motor_estado_t estado, uint16_t pwm)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	4603      	mov	r3, r0
 800051c:	460a      	mov	r2, r1
 800051e:	71fb      	strb	r3, [r7, #7]
 8000520:	4613      	mov	r3, r2
 8000522:	80bb      	strh	r3, [r7, #4]
    switch (estado)
 8000524:	79fb      	ldrb	r3, [r7, #7]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d002      	beq.n	8000530 <set_motor_izq+0x1c>
 800052a:	2b01      	cmp	r3, #1
 800052c:	d00d      	beq.n	800054a <set_motor_izq+0x36>
 800052e:	e019      	b.n	8000564 <set_motor_izq+0x50>
    {
    case MOTOR_AVANCE:
        HAL_GPIO_WritePin(MI0_GPIO_Port, MI0_Pin, GPIO_PIN_SET);   // MI0 = 1
 8000530:	2201      	movs	r2, #1
 8000532:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000536:	4817      	ldr	r0, [pc, #92]	@ (8000594 <set_motor_izq+0x80>)
 8000538:	f001 fffe 	bl	8002538 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MI1_GPIO_Port, MI1_Pin, GPIO_PIN_RESET); // MI1 = 0
 800053c:	2200      	movs	r2, #0
 800053e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000542:	4814      	ldr	r0, [pc, #80]	@ (8000594 <set_motor_izq+0x80>)
 8000544:	f001 fff8 	bl	8002538 <HAL_GPIO_WritePin>
        break;
 8000548:	e01b      	b.n	8000582 <set_motor_izq+0x6e>

    case MOTOR_RETROCESO:
        HAL_GPIO_WritePin(MI0_GPIO_Port, MI0_Pin, GPIO_PIN_RESET); // MI0 = 0
 800054a:	2200      	movs	r2, #0
 800054c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000550:	4810      	ldr	r0, [pc, #64]	@ (8000594 <set_motor_izq+0x80>)
 8000552:	f001 fff1 	bl	8002538 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MI1_GPIO_Port, MI1_Pin, GPIO_PIN_SET);   // MI1 = 1
 8000556:	2201      	movs	r2, #1
 8000558:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800055c:	480d      	ldr	r0, [pc, #52]	@ (8000594 <set_motor_izq+0x80>)
 800055e:	f001 ffeb 	bl	8002538 <HAL_GPIO_WritePin>
        break;
 8000562:	e00e      	b.n	8000582 <set_motor_izq+0x6e>

    case MOTOR_FRENADO:
    default:
        HAL_GPIO_WritePin(MI0_GPIO_Port, MI0_Pin, GPIO_PIN_RESET); // MI0 = 0
 8000564:	2200      	movs	r2, #0
 8000566:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800056a:	480a      	ldr	r0, [pc, #40]	@ (8000594 <set_motor_izq+0x80>)
 800056c:	f001 ffe4 	bl	8002538 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MI1_GPIO_Port, MI1_Pin, GPIO_PIN_RESET); // MI1 = 0
 8000570:	2200      	movs	r2, #0
 8000572:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000576:	4807      	ldr	r0, [pc, #28]	@ (8000594 <set_motor_izq+0x80>)
 8000578:	f001 ffde 	bl	8002538 <HAL_GPIO_WritePin>
        pwm = 0;                                                   // Forzar PWM a 0 en frenado
 800057c:	2300      	movs	r3, #0
 800057e:	80bb      	strh	r3, [r7, #4]
        break;
 8000580:	bf00      	nop
    }

    // Establecer PWM, aca le definimos la velocidad
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pwm);
 8000582:	4b05      	ldr	r3, [pc, #20]	@ (8000598 <set_motor_izq+0x84>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	88ba      	ldrh	r2, [r7, #4]
 8000588:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	40020400 	.word	0x40020400
 8000598:	20000234 	.word	0x20000234

0800059c <set_motor_der>:
 * @brief Configura motor derecho
 * @param estado: MOTOR_AVANCE, MOTOR_RETROCESO o MOTOR_FRENADO
 * @param pwm: Valor PWM (0-1000)
 */
void set_motor_der(motor_estado_t estado, uint16_t pwm)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	460a      	mov	r2, r1
 80005a6:	71fb      	strb	r3, [r7, #7]
 80005a8:	4613      	mov	r3, r2
 80005aa:	80bb      	strh	r3, [r7, #4]
    switch (estado)
 80005ac:	79fb      	ldrb	r3, [r7, #7]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d002      	beq.n	80005b8 <set_motor_der+0x1c>
 80005b2:	2b01      	cmp	r3, #1
 80005b4:	d00d      	beq.n	80005d2 <set_motor_der+0x36>
 80005b6:	e019      	b.n	80005ec <set_motor_der+0x50>
    {
    case MOTOR_AVANCE:
        HAL_GPIO_WritePin(MD0_GPIO_Port, MD0_Pin, GPIO_PIN_SET);   // MD0 = 1
 80005b8:	2201      	movs	r2, #1
 80005ba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005be:	4817      	ldr	r0, [pc, #92]	@ (800061c <set_motor_der+0x80>)
 80005c0:	f001 ffba 	bl	8002538 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MD1_GPIO_Port, MD1_Pin, GPIO_PIN_RESET); // MD1 = 0
 80005c4:	2200      	movs	r2, #0
 80005c6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005ca:	4814      	ldr	r0, [pc, #80]	@ (800061c <set_motor_der+0x80>)
 80005cc:	f001 ffb4 	bl	8002538 <HAL_GPIO_WritePin>
        break;
 80005d0:	e01b      	b.n	800060a <set_motor_der+0x6e>

    case MOTOR_RETROCESO:
        HAL_GPIO_WritePin(MD0_GPIO_Port, MD0_Pin, GPIO_PIN_RESET); // MD0 = 0
 80005d2:	2200      	movs	r2, #0
 80005d4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005d8:	4810      	ldr	r0, [pc, #64]	@ (800061c <set_motor_der+0x80>)
 80005da:	f001 ffad 	bl	8002538 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MD1_GPIO_Port, MD1_Pin, GPIO_PIN_SET);   // MD1 = 1
 80005de:	2201      	movs	r2, #1
 80005e0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005e4:	480d      	ldr	r0, [pc, #52]	@ (800061c <set_motor_der+0x80>)
 80005e6:	f001 ffa7 	bl	8002538 <HAL_GPIO_WritePin>
        break;
 80005ea:	e00e      	b.n	800060a <set_motor_der+0x6e>

    case MOTOR_FRENADO:
    default:
        HAL_GPIO_WritePin(MD0_GPIO_Port, MD0_Pin, GPIO_PIN_RESET); // MD0 = 0
 80005ec:	2200      	movs	r2, #0
 80005ee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005f2:	480a      	ldr	r0, [pc, #40]	@ (800061c <set_motor_der+0x80>)
 80005f4:	f001 ffa0 	bl	8002538 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MD1_GPIO_Port, MD1_Pin, GPIO_PIN_RESET); // MD1 = 0
 80005f8:	2200      	movs	r2, #0
 80005fa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005fe:	4807      	ldr	r0, [pc, #28]	@ (800061c <set_motor_der+0x80>)
 8000600:	f001 ff9a 	bl	8002538 <HAL_GPIO_WritePin>
        pwm = 0;                                                   // Forzar PWM a 0 en frenado
 8000604:	2300      	movs	r3, #0
 8000606:	80bb      	strh	r3, [r7, #4]
        break;
 8000608:	bf00      	nop
    }

    // Establecer VELOCIDAD
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, pwm);
 800060a:	4b05      	ldr	r3, [pc, #20]	@ (8000620 <set_motor_der+0x84>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	88ba      	ldrh	r2, [r7, #4]
 8000610:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40020400 	.word	0x40020400
 8000620:	20000234 	.word	0x20000234

08000624 <avanza>:

/**
 * @brief Avanza con ambos motores al 70% de velocidad
 */
void avanza(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
    set_motor_izq(MOTOR_AVANCE, VELOCIDAD_AVANCE);
 8000628:	f44f 712f 	mov.w	r1, #700	@ 0x2bc
 800062c:	2000      	movs	r0, #0
 800062e:	f7ff ff71 	bl	8000514 <set_motor_izq>
    set_motor_der(MOTOR_AVANCE, VELOCIDAD_AVANCE);
 8000632:	f44f 712f 	mov.w	r1, #700	@ 0x2bc
 8000636:	2000      	movs	r0, #0
 8000638:	f7ff ffb0 	bl	800059c <set_motor_der>
}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}

08000640 <gira90izq>:
/**
 * @brief Gira 90 grados a la izquierda y luego continúa avanzando
 * Motor izq retrocede, motor der avanza al 100%
 */
brujula gira90izq(brujula sentido)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	71fb      	strb	r3, [r7, #7]
    set_motor_izq(MOTOR_RETROCESO, VELOCIDAD_GIRO);
 800064a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800064e:	2001      	movs	r0, #1
 8000650:	f7ff ff60 	bl	8000514 <set_motor_izq>
    set_motor_der(MOTOR_AVANCE, VELOCIDAD_GIRO);
 8000654:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000658:	2000      	movs	r0, #0
 800065a:	f7ff ff9f 	bl	800059c <set_motor_der>

    HAL_Delay(TIEMPO_GIRO_90);
 800065e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000662:	f000 ff4b 	bl	80014fc <HAL_Delay>
    switch(sentido)
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	2b03      	cmp	r3, #3
 800066a:	d817      	bhi.n	800069c <gira90izq+0x5c>
 800066c:	a201      	add	r2, pc, #4	@ (adr r2, 8000674 <gira90izq+0x34>)
 800066e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000672:	bf00      	nop
 8000674:	08000685 	.word	0x08000685
 8000678:	0800068b 	.word	0x0800068b
 800067c:	08000691 	.word	0x08000691
 8000680:	08000697 	.word	0x08000697
    {
    	case norte:
    	sentido = oeste;
 8000684:	2303      	movs	r3, #3
 8000686:	71fb      	strb	r3, [r7, #7]
    	break;
 8000688:	e008      	b.n	800069c <gira90izq+0x5c>

    	case este:
    	sentido = norte;
 800068a:	2300      	movs	r3, #0
 800068c:	71fb      	strb	r3, [r7, #7]
    	break;
 800068e:	e005      	b.n	800069c <gira90izq+0x5c>

    	case sur:
    	sentido = este;
 8000690:	2301      	movs	r3, #1
 8000692:	71fb      	strb	r3, [r7, #7]
    	break;
 8000694:	e002      	b.n	800069c <gira90izq+0x5c>

    	case oeste:
    	sentido = sur;
 8000696:	2302      	movs	r3, #2
 8000698:	71fb      	strb	r3, [r7, #7]
    	break;
 800069a:	bf00      	nop
    }

    // Después del giro, continuar avanzando
    avanza();
 800069c:	f7ff ffc2 	bl	8000624 <avanza>
    return sentido;
 80006a0:	79fb      	ldrb	r3, [r7, #7]
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	3708      	adds	r7, #8
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop

080006ac <gira90der>:
/**
 * @brief Gira 90 grados a la derecha y luego continúa avanzando
 * Motor der retrocede, motor izq avanza al 100%
 */
brujula gira90der(brujula sentido)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	71fb      	strb	r3, [r7, #7]
    set_motor_izq(MOTOR_AVANCE, VELOCIDAD_GIRO);
 80006b6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80006ba:	2000      	movs	r0, #0
 80006bc:	f7ff ff2a 	bl	8000514 <set_motor_izq>
    set_motor_der(MOTOR_RETROCESO, VELOCIDAD_GIRO);
 80006c0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80006c4:	2001      	movs	r0, #1
 80006c6:	f7ff ff69 	bl	800059c <set_motor_der>

    HAL_Delay(TIEMPO_GIRO_90);
 80006ca:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006ce:	f000 ff15 	bl	80014fc <HAL_Delay>
    switch(sentido)
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	2b03      	cmp	r3, #3
 80006d6:	d817      	bhi.n	8000708 <gira90der+0x5c>
 80006d8:	a201      	add	r2, pc, #4	@ (adr r2, 80006e0 <gira90der+0x34>)
 80006da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006de:	bf00      	nop
 80006e0:	080006f1 	.word	0x080006f1
 80006e4:	080006f7 	.word	0x080006f7
 80006e8:	080006fd 	.word	0x080006fd
 80006ec:	08000703 	.word	0x08000703
    {
    	case norte:
    	sentido = este;
 80006f0:	2301      	movs	r3, #1
 80006f2:	71fb      	strb	r3, [r7, #7]
    	break;
 80006f4:	e008      	b.n	8000708 <gira90der+0x5c>

    	case este:
    	sentido = sur;
 80006f6:	2302      	movs	r3, #2
 80006f8:	71fb      	strb	r3, [r7, #7]
    	break;
 80006fa:	e005      	b.n	8000708 <gira90der+0x5c>

    	case sur:
    	sentido = oeste;
 80006fc:	2303      	movs	r3, #3
 80006fe:	71fb      	strb	r3, [r7, #7]
    	break;
 8000700:	e002      	b.n	8000708 <gira90der+0x5c>

    	case oeste:
    	sentido = norte;
 8000702:	2300      	movs	r3, #0
 8000704:	71fb      	strb	r3, [r7, #7]
    	break;
 8000706:	bf00      	nop
    }

    // Después del giro, continuar avanzando
    avanza();
 8000708:	f7ff ff8c 	bl	8000624 <avanza>
    return sentido;
 800070c:	79fb      	ldrb	r3, [r7, #7]
}
 800070e:	4618      	mov	r0, r3
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop

08000718 <gira180>:
/**
 * @brief Gira 180 grados y luego continúa avanzando
 * Motor der retrocede, motor izq avanza al 100%
 */
brujula gira180(brujula sentido)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	71fb      	strb	r3, [r7, #7]
    set_motor_izq(MOTOR_AVANCE, VELOCIDAD_GIRO);
 8000722:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000726:	2000      	movs	r0, #0
 8000728:	f7ff fef4 	bl	8000514 <set_motor_izq>
    set_motor_der(MOTOR_RETROCESO, VELOCIDAD_GIRO);
 800072c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000730:	2001      	movs	r0, #1
 8000732:	f7ff ff33 	bl	800059c <set_motor_der>

    HAL_Delay(TIEMPO_GIRO_180);
 8000736:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800073a:	f000 fedf 	bl	80014fc <HAL_Delay>
    switch(sentido)
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	2b03      	cmp	r3, #3
 8000742:	d817      	bhi.n	8000774 <gira180+0x5c>
 8000744:	a201      	add	r2, pc, #4	@ (adr r2, 800074c <gira180+0x34>)
 8000746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800074a:	bf00      	nop
 800074c:	0800075d 	.word	0x0800075d
 8000750:	08000763 	.word	0x08000763
 8000754:	08000769 	.word	0x08000769
 8000758:	0800076f 	.word	0x0800076f
    {
    	case norte:
    	sentido = sur;
 800075c:	2302      	movs	r3, #2
 800075e:	71fb      	strb	r3, [r7, #7]
    	break;
 8000760:	e008      	b.n	8000774 <gira180+0x5c>

    	case este:
    	sentido = oeste;
 8000762:	2303      	movs	r3, #3
 8000764:	71fb      	strb	r3, [r7, #7]
    	break;
 8000766:	e005      	b.n	8000774 <gira180+0x5c>

    	case sur:
    	sentido = norte;
 8000768:	2300      	movs	r3, #0
 800076a:	71fb      	strb	r3, [r7, #7]
    	break;
 800076c:	e002      	b.n	8000774 <gira180+0x5c>

    	case oeste:
    	sentido = este;
 800076e:	2301      	movs	r3, #1
 8000770:	71fb      	strb	r3, [r7, #7]
    	break;
 8000772:	bf00      	nop
    }

    // Después del giro, continuar avanzando
    avanza();
 8000774:	f7ff ff56 	bl	8000624 <avanza>
    return sentido;
 8000778:	79fb      	ldrb	r3, [r7, #7]
}
 800077a:	4618      	mov	r0, r3
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop

08000784 <termino>:

/**
 * @brief Detiene ambos motores (cuando ganemos)
 */
void termino(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
    set_motor_izq(MOTOR_FRENADO, 0);
 8000788:	2100      	movs	r1, #0
 800078a:	2002      	movs	r0, #2
 800078c:	f7ff fec2 	bl	8000514 <set_motor_izq>
    set_motor_der(MOTOR_FRENADO, 0);
 8000790:	2100      	movs	r1, #0
 8000792:	2002      	movs	r0, #2
 8000794:	f7ff ff02 	bl	800059c <set_motor_der>
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}

0800079c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a0:	f000 fe3a 	bl	8001418 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a4:	f000 f854 	bl	8000850 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007a8:	f000 fa50 	bl	8000c4c <MX_GPIO_Init>
  MX_DMA_Init();
 80007ac:	f000 fa2e 	bl	8000c0c <MX_DMA_Init>
  MX_I2C1_Init();
 80007b0:	f000 f918 	bl	80009e4 <MX_I2C1_Init>
  MX_I2S3_Init();
 80007b4:	f000 f944 	bl	8000a40 <MX_I2S3_Init>
  MX_SPI1_Init();
 80007b8:	f000 f970 	bl	8000a9c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80007bc:	f009 fcc4 	bl	800a148 <MX_USB_HOST_Init>
  MX_ADC1_Init();
 80007c0:	f000 f8b0 	bl	8000924 <MX_ADC1_Init>
  MX_TIM3_Init();
 80007c4:	f000 f9a0 	bl	8000b08 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // Inicializar el módulo de motores
  control_motor_init();
 80007c8:	f7ff fe94 	bl	80004f4 <control_motor_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80007cc:	f009 fce2 	bl	800a194 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    if (!terminado) // Solo ejecutar si no ha terminado
 80007d0:	4b1d      	ldr	r3, [pc, #116]	@ (8000848 <main+0xac>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	f083 0301 	eor.w	r3, r3, #1
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d0f6      	beq.n	80007cc <main+0x30>
    {
      // OJO SOLO PARA PROBAR EL LUNES LOS TIEMPOS DE LOS GIROS
      avanza(); // Comenzar avanzando 1 SEGUNDO
 80007de:	f7ff ff21 	bl	8000624 <avanza>
      HAL_Delay(1000);
 80007e2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007e6:	f000 fe89 	bl	80014fc <HAL_Delay>

      // Simular detección de pared - girar a la derecha
      sentido_actual = gira90der(sentido_actual); // Gira Y SIGUE AVANZANDO POR 2 SEGUNDOS
 80007ea:	4b18      	ldr	r3, [pc, #96]	@ (800084c <main+0xb0>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	4618      	mov	r0, r3
 80007f0:	f7ff ff5c 	bl	80006ac <gira90der>
 80007f4:	4603      	mov	r3, r0
 80007f6:	461a      	mov	r2, r3
 80007f8:	4b14      	ldr	r3, [pc, #80]	@ (800084c <main+0xb0>)
 80007fa:	701a      	strb	r2, [r3, #0]
      HAL_Delay(2000);
 80007fc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000800:	f000 fe7c 	bl	80014fc <HAL_Delay>

      // Otro obstáculo - girar a la izquierda
      sentido_actual = gira90izq(sentido_actual); // Gira Y SIGUE AVANZANDO
 8000804:	4b11      	ldr	r3, [pc, #68]	@ (800084c <main+0xb0>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff ff19 	bl	8000640 <gira90izq>
 800080e:	4603      	mov	r3, r0
 8000810:	461a      	mov	r2, r3
 8000812:	4b0e      	ldr	r3, [pc, #56]	@ (800084c <main+0xb0>)
 8000814:	701a      	strb	r2, [r3, #0]
      HAL_Delay(2000);
 8000816:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800081a:	f000 fe6f 	bl	80014fc <HAL_Delay>

      // Callejón sin salida - dar media vuelta
      sentido_actual = gira180(sentido_actual); // Gira Y SIGUE AVANZANDO POR 3 SEGUNDOS
 800081e:	4b0b      	ldr	r3, [pc, #44]	@ (800084c <main+0xb0>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	4618      	mov	r0, r3
 8000824:	f7ff ff78 	bl	8000718 <gira180>
 8000828:	4603      	mov	r3, r0
 800082a:	461a      	mov	r2, r3
 800082c:	4b07      	ldr	r3, [pc, #28]	@ (800084c <main+0xb0>)
 800082e:	701a      	strb	r2, [r3, #0]
      HAL_Delay(3000);
 8000830:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000834:	f000 fe62 	bl	80014fc <HAL_Delay>

      // SIMULA QUE TERMINÓ
      termino();       // Usando tu función
 8000838:	f7ff ffa4 	bl	8000784 <termino>
      HAL_Delay(5000); // Pausa antes de reiniciar
 800083c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000840:	f000 fe5c 	bl	80014fc <HAL_Delay>
    MX_USB_HOST_Process();
 8000844:	e7c2      	b.n	80007cc <main+0x30>
 8000846:	bf00      	nop
 8000848:	2000027d 	.word	0x2000027d
 800084c:	2000027c 	.word	0x2000027c

08000850 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b094      	sub	sp, #80	@ 0x50
 8000854:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000856:	f107 0320 	add.w	r3, r7, #32
 800085a:	2230      	movs	r2, #48	@ 0x30
 800085c:	2100      	movs	r1, #0
 800085e:	4618      	mov	r0, r3
 8000860:	f00a f83a 	bl	800a8d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000864:	f107 030c 	add.w	r3, r7, #12
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000874:	2300      	movs	r3, #0
 8000876:	60bb      	str	r3, [r7, #8]
 8000878:	4b28      	ldr	r3, [pc, #160]	@ (800091c <SystemClock_Config+0xcc>)
 800087a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087c:	4a27      	ldr	r2, [pc, #156]	@ (800091c <SystemClock_Config+0xcc>)
 800087e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000882:	6413      	str	r3, [r2, #64]	@ 0x40
 8000884:	4b25      	ldr	r3, [pc, #148]	@ (800091c <SystemClock_Config+0xcc>)
 8000886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000888:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800088c:	60bb      	str	r3, [r7, #8]
 800088e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000890:	2300      	movs	r3, #0
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	4b22      	ldr	r3, [pc, #136]	@ (8000920 <SystemClock_Config+0xd0>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a21      	ldr	r2, [pc, #132]	@ (8000920 <SystemClock_Config+0xd0>)
 800089a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800089e:	6013      	str	r3, [r2, #0]
 80008a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000920 <SystemClock_Config+0xd0>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008ac:	2301      	movs	r3, #1
 80008ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008b4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b6:	2302      	movs	r3, #2
 80008b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ba:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008c0:	2308      	movs	r3, #8
 80008c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008c4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80008c8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008ca:	2302      	movs	r3, #2
 80008cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008ce:	2307      	movs	r3, #7
 80008d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d2:	f107 0320 	add.w	r3, r7, #32
 80008d6:	4618      	mov	r0, r3
 80008d8:	f004 fd60 	bl	800539c <HAL_RCC_OscConfig>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80008e2:	f000 fad1 	bl	8000e88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80008e6:	230f      	movs	r3, #15
 80008e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ea:	2302      	movs	r3, #2
 80008ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008f2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80008f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008fe:	f107 030c 	add.w	r3, r7, #12
 8000902:	2105      	movs	r1, #5
 8000904:	4618      	mov	r0, r3
 8000906:	f004 ffc1 	bl	800588c <HAL_RCC_ClockConfig>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000910:	f000 faba 	bl	8000e88 <Error_Handler>
  }
}
 8000914:	bf00      	nop
 8000916:	3750      	adds	r7, #80	@ 0x50
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40023800 	.word	0x40023800
 8000920:	40007000 	.word	0x40007000

08000924 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800092a:	463b      	mov	r3, r7
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
   */
  hadc1.Instance = ADC1;
 8000936:	4b28      	ldr	r3, [pc, #160]	@ (80009d8 <MX_ADC1_Init+0xb4>)
 8000938:	4a28      	ldr	r2, [pc, #160]	@ (80009dc <MX_ADC1_Init+0xb8>)
 800093a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800093c:	4b26      	ldr	r3, [pc, #152]	@ (80009d8 <MX_ADC1_Init+0xb4>)
 800093e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000942:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000944:	4b24      	ldr	r3, [pc, #144]	@ (80009d8 <MX_ADC1_Init+0xb4>)
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800094a:	4b23      	ldr	r3, [pc, #140]	@ (80009d8 <MX_ADC1_Init+0xb4>)
 800094c:	2201      	movs	r2, #1
 800094e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000950:	4b21      	ldr	r3, [pc, #132]	@ (80009d8 <MX_ADC1_Init+0xb4>)
 8000952:	2201      	movs	r2, #1
 8000954:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000956:	4b20      	ldr	r3, [pc, #128]	@ (80009d8 <MX_ADC1_Init+0xb4>)
 8000958:	2200      	movs	r2, #0
 800095a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800095e:	4b1e      	ldr	r3, [pc, #120]	@ (80009d8 <MX_ADC1_Init+0xb4>)
 8000960:	2200      	movs	r2, #0
 8000962:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000964:	4b1c      	ldr	r3, [pc, #112]	@ (80009d8 <MX_ADC1_Init+0xb4>)
 8000966:	4a1e      	ldr	r2, [pc, #120]	@ (80009e0 <MX_ADC1_Init+0xbc>)
 8000968:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800096a:	4b1b      	ldr	r3, [pc, #108]	@ (80009d8 <MX_ADC1_Init+0xb4>)
 800096c:	2200      	movs	r2, #0
 800096e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000970:	4b19      	ldr	r3, [pc, #100]	@ (80009d8 <MX_ADC1_Init+0xb4>)
 8000972:	2202      	movs	r2, #2
 8000974:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000976:	4b18      	ldr	r3, [pc, #96]	@ (80009d8 <MX_ADC1_Init+0xb4>)
 8000978:	2201      	movs	r2, #1
 800097a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800097e:	4b16      	ldr	r3, [pc, #88]	@ (80009d8 <MX_ADC1_Init+0xb4>)
 8000980:	2200      	movs	r2, #0
 8000982:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000984:	4814      	ldr	r0, [pc, #80]	@ (80009d8 <MX_ADC1_Init+0xb4>)
 8000986:	f000 fddd 	bl	8001544 <HAL_ADC_Init>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000990:	f000 fa7a 	bl	8000e88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_8;
 8000994:	2308      	movs	r3, #8
 8000996:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000998:	2301      	movs	r3, #1
 800099a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 800099c:	2305      	movs	r3, #5
 800099e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009a0:	463b      	mov	r3, r7
 80009a2:	4619      	mov	r1, r3
 80009a4:	480c      	ldr	r0, [pc, #48]	@ (80009d8 <MX_ADC1_Init+0xb4>)
 80009a6:	f000 fe11 	bl	80015cc <HAL_ADC_ConfigChannel>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80009b0:	f000 fa6a 	bl	8000e88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_9;
 80009b4:	2309      	movs	r3, #9
 80009b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80009b8:	2302      	movs	r3, #2
 80009ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009bc:	463b      	mov	r3, r7
 80009be:	4619      	mov	r1, r3
 80009c0:	4805      	ldr	r0, [pc, #20]	@ (80009d8 <MX_ADC1_Init+0xb4>)
 80009c2:	f000 fe03 	bl	80015cc <HAL_ADC_ConfigChannel>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80009cc:	f000 fa5c 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 80009d0:	bf00      	nop
 80009d2:	3710      	adds	r7, #16
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20000098 	.word	0x20000098
 80009dc:	40012000 	.word	0x40012000
 80009e0:	0f000001 	.word	0x0f000001

080009e4 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009e8:	4b12      	ldr	r3, [pc, #72]	@ (8000a34 <MX_I2C1_Init+0x50>)
 80009ea:	4a13      	ldr	r2, [pc, #76]	@ (8000a38 <MX_I2C1_Init+0x54>)
 80009ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80009ee:	4b11      	ldr	r3, [pc, #68]	@ (8000a34 <MX_I2C1_Init+0x50>)
 80009f0:	4a12      	ldr	r2, [pc, #72]	@ (8000a3c <MX_I2C1_Init+0x58>)
 80009f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000a34 <MX_I2C1_Init+0x50>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000a34 <MX_I2C1_Init+0x50>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a00:	4b0c      	ldr	r3, [pc, #48]	@ (8000a34 <MX_I2C1_Init+0x50>)
 8000a02:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a06:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a08:	4b0a      	ldr	r3, [pc, #40]	@ (8000a34 <MX_I2C1_Init+0x50>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a0e:	4b09      	ldr	r3, [pc, #36]	@ (8000a34 <MX_I2C1_Init+0x50>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a14:	4b07      	ldr	r3, [pc, #28]	@ (8000a34 <MX_I2C1_Init+0x50>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a1a:	4b06      	ldr	r3, [pc, #24]	@ (8000a34 <MX_I2C1_Init+0x50>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a20:	4804      	ldr	r0, [pc, #16]	@ (8000a34 <MX_I2C1_Init+0x50>)
 8000a22:	f003 fed7 	bl	80047d4 <HAL_I2C_Init>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a2c:	f000 fa2c 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	20000140 	.word	0x20000140
 8000a38:	40005400 	.word	0x40005400
 8000a3c:	000186a0 	.word	0x000186a0

08000a40 <MX_I2S3_Init>:
 * @brief I2S3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S3_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000a44:	4b13      	ldr	r3, [pc, #76]	@ (8000a94 <MX_I2S3_Init+0x54>)
 8000a46:	4a14      	ldr	r2, [pc, #80]	@ (8000a98 <MX_I2S3_Init+0x58>)
 8000a48:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000a4a:	4b12      	ldr	r3, [pc, #72]	@ (8000a94 <MX_I2S3_Init+0x54>)
 8000a4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a50:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000a52:	4b10      	ldr	r3, [pc, #64]	@ (8000a94 <MX_I2S3_Init+0x54>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000a58:	4b0e      	ldr	r3, [pc, #56]	@ (8000a94 <MX_I2S3_Init+0x54>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a94 <MX_I2S3_Init+0x54>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000a64:	4b0b      	ldr	r3, [pc, #44]	@ (8000a94 <MX_I2S3_Init+0x54>)
 8000a66:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8000a6a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000a6c:	4b09      	ldr	r3, [pc, #36]	@ (8000a94 <MX_I2S3_Init+0x54>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000a72:	4b08      	ldr	r3, [pc, #32]	@ (8000a94 <MX_I2S3_Init+0x54>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000a78:	4b06      	ldr	r3, [pc, #24]	@ (8000a94 <MX_I2S3_Init+0x54>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000a7e:	4805      	ldr	r0, [pc, #20]	@ (8000a94 <MX_I2S3_Init+0x54>)
 8000a80:	f003 ffec 	bl	8004a5c <HAL_I2S_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000a8a:	f000 f9fd 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000194 	.word	0x20000194
 8000a98:	40003c00 	.word	0x40003c00

08000a9c <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000aa0:	4b17      	ldr	r3, [pc, #92]	@ (8000b00 <MX_SPI1_Init+0x64>)
 8000aa2:	4a18      	ldr	r2, [pc, #96]	@ (8000b04 <MX_SPI1_Init+0x68>)
 8000aa4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000aa6:	4b16      	ldr	r3, [pc, #88]	@ (8000b00 <MX_SPI1_Init+0x64>)
 8000aa8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000aac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000aae:	4b14      	ldr	r3, [pc, #80]	@ (8000b00 <MX_SPI1_Init+0x64>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ab4:	4b12      	ldr	r3, [pc, #72]	@ (8000b00 <MX_SPI1_Init+0x64>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000aba:	4b11      	ldr	r3, [pc, #68]	@ (8000b00 <MX_SPI1_Init+0x64>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ac0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b00 <MX_SPI1_Init+0x64>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b00 <MX_SPI1_Init+0x64>)
 8000ac8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000acc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ace:	4b0c      	ldr	r3, [pc, #48]	@ (8000b00 <MX_SPI1_Init+0x64>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ad4:	4b0a      	ldr	r3, [pc, #40]	@ (8000b00 <MX_SPI1_Init+0x64>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ada:	4b09      	ldr	r3, [pc, #36]	@ (8000b00 <MX_SPI1_Init+0x64>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ae0:	4b07      	ldr	r3, [pc, #28]	@ (8000b00 <MX_SPI1_Init+0x64>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ae6:	4b06      	ldr	r3, [pc, #24]	@ (8000b00 <MX_SPI1_Init+0x64>)
 8000ae8:	220a      	movs	r2, #10
 8000aea:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000aec:	4804      	ldr	r0, [pc, #16]	@ (8000b00 <MX_SPI1_Init+0x64>)
 8000aee:	f005 fa1b 	bl	8005f28 <HAL_SPI_Init>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000af8:	f000 f9c6 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */
}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	200001dc 	.word	0x200001dc
 8000b04:	40013000 	.word	0x40013000

08000b08 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08e      	sub	sp, #56	@ 0x38
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b0e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	605a      	str	r2, [r3, #4]
 8000b18:	609a      	str	r2, [r3, #8]
 8000b1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b1c:	f107 0320 	add.w	r3, r7, #32
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b26:	1d3b      	adds	r3, r7, #4
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]
 8000b34:	615a      	str	r2, [r3, #20]
 8000b36:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b38:	4b32      	ldr	r3, [pc, #200]	@ (8000c04 <MX_TIM3_Init+0xfc>)
 8000b3a:	4a33      	ldr	r2, [pc, #204]	@ (8000c08 <MX_TIM3_Init+0x100>)
 8000b3c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8000b3e:	4b31      	ldr	r3, [pc, #196]	@ (8000c04 <MX_TIM3_Init+0xfc>)
 8000b40:	2253      	movs	r2, #83	@ 0x53
 8000b42:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b44:	4b2f      	ldr	r3, [pc, #188]	@ (8000c04 <MX_TIM3_Init+0xfc>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000b4a:	4b2e      	ldr	r3, [pc, #184]	@ (8000c04 <MX_TIM3_Init+0xfc>)
 8000b4c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b50:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b52:	4b2c      	ldr	r3, [pc, #176]	@ (8000c04 <MX_TIM3_Init+0xfc>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b58:	4b2a      	ldr	r3, [pc, #168]	@ (8000c04 <MX_TIM3_Init+0xfc>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b5e:	4829      	ldr	r0, [pc, #164]	@ (8000c04 <MX_TIM3_Init+0xfc>)
 8000b60:	f005 fa6b 	bl	800603a <HAL_TIM_Base_Init>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000b6a:	f000 f98d 	bl	8000e88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b6e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b72:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b74:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4822      	ldr	r0, [pc, #136]	@ (8000c04 <MX_TIM3_Init+0xfc>)
 8000b7c:	f005 fc90 	bl	80064a0 <HAL_TIM_ConfigClockSource>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000b86:	f000 f97f 	bl	8000e88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b8a:	481e      	ldr	r0, [pc, #120]	@ (8000c04 <MX_TIM3_Init+0xfc>)
 8000b8c:	f005 faa4 	bl	80060d8 <HAL_TIM_PWM_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000b96:	f000 f977 	bl	8000e88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ba2:	f107 0320 	add.w	r3, r7, #32
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4816      	ldr	r0, [pc, #88]	@ (8000c04 <MX_TIM3_Init+0xfc>)
 8000baa:	f006 f857 	bl	8006c5c <HAL_TIMEx_MasterConfigSynchronization>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000bb4:	f000 f968 	bl	8000e88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bb8:	2360      	movs	r3, #96	@ 0x60
 8000bba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bc8:	1d3b      	adds	r3, r7, #4
 8000bca:	2208      	movs	r2, #8
 8000bcc:	4619      	mov	r1, r3
 8000bce:	480d      	ldr	r0, [pc, #52]	@ (8000c04 <MX_TIM3_Init+0xfc>)
 8000bd0:	f005 fba4 	bl	800631c <HAL_TIM_PWM_ConfigChannel>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000bda:	f000 f955 	bl	8000e88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000bde:	1d3b      	adds	r3, r7, #4
 8000be0:	220c      	movs	r2, #12
 8000be2:	4619      	mov	r1, r3
 8000be4:	4807      	ldr	r0, [pc, #28]	@ (8000c04 <MX_TIM3_Init+0xfc>)
 8000be6:	f005 fb99 	bl	800631c <HAL_TIM_PWM_ConfigChannel>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000bf0:	f000 f94a 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000bf4:	4803      	ldr	r0, [pc, #12]	@ (8000c04 <MX_TIM3_Init+0xfc>)
 8000bf6:	f000 fb1f 	bl	8001238 <HAL_TIM_MspPostInit>
}
 8000bfa:	bf00      	nop
 8000bfc:	3738      	adds	r7, #56	@ 0x38
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20000234 	.word	0x20000234
 8000c08:	40000400 	.word	0x40000400

08000c0c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	607b      	str	r3, [r7, #4]
 8000c16:	4b0c      	ldr	r3, [pc, #48]	@ (8000c48 <MX_DMA_Init+0x3c>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1a:	4a0b      	ldr	r2, [pc, #44]	@ (8000c48 <MX_DMA_Init+0x3c>)
 8000c1c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c22:	4b09      	ldr	r3, [pc, #36]	@ (8000c48 <MX_DMA_Init+0x3c>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2100      	movs	r1, #0
 8000c32:	2038      	movs	r0, #56	@ 0x38
 8000c34:	f000 ffc3 	bl	8001bbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c38:	2038      	movs	r0, #56	@ 0x38
 8000c3a:	f000 ffdc 	bl	8001bf6 <HAL_NVIC_EnableIRQ>
}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40023800 	.word	0x40023800

08000c4c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08c      	sub	sp, #48	@ 0x30
 8000c50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c52:	f107 031c 	add.w	r3, r7, #28
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]
 8000c5c:	609a      	str	r2, [r3, #8]
 8000c5e:	60da      	str	r2, [r3, #12]
 8000c60:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	61bb      	str	r3, [r7, #24]
 8000c66:	4b82      	ldr	r3, [pc, #520]	@ (8000e70 <MX_GPIO_Init+0x224>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6a:	4a81      	ldr	r2, [pc, #516]	@ (8000e70 <MX_GPIO_Init+0x224>)
 8000c6c:	f043 0310 	orr.w	r3, r3, #16
 8000c70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c72:	4b7f      	ldr	r3, [pc, #508]	@ (8000e70 <MX_GPIO_Init+0x224>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c76:	f003 0310 	and.w	r3, r3, #16
 8000c7a:	61bb      	str	r3, [r7, #24]
 8000c7c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	617b      	str	r3, [r7, #20]
 8000c82:	4b7b      	ldr	r3, [pc, #492]	@ (8000e70 <MX_GPIO_Init+0x224>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c86:	4a7a      	ldr	r2, [pc, #488]	@ (8000e70 <MX_GPIO_Init+0x224>)
 8000c88:	f043 0304 	orr.w	r3, r3, #4
 8000c8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c8e:	4b78      	ldr	r3, [pc, #480]	@ (8000e70 <MX_GPIO_Init+0x224>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c92:	f003 0304 	and.w	r3, r3, #4
 8000c96:	617b      	str	r3, [r7, #20]
 8000c98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	613b      	str	r3, [r7, #16]
 8000c9e:	4b74      	ldr	r3, [pc, #464]	@ (8000e70 <MX_GPIO_Init+0x224>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca2:	4a73      	ldr	r2, [pc, #460]	@ (8000e70 <MX_GPIO_Init+0x224>)
 8000ca4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ca8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000caa:	4b71      	ldr	r3, [pc, #452]	@ (8000e70 <MX_GPIO_Init+0x224>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cb2:	613b      	str	r3, [r7, #16]
 8000cb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	4b6d      	ldr	r3, [pc, #436]	@ (8000e70 <MX_GPIO_Init+0x224>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cbe:	4a6c      	ldr	r2, [pc, #432]	@ (8000e70 <MX_GPIO_Init+0x224>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cc6:	4b6a      	ldr	r3, [pc, #424]	@ (8000e70 <MX_GPIO_Init+0x224>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60bb      	str	r3, [r7, #8]
 8000cd6:	4b66      	ldr	r3, [pc, #408]	@ (8000e70 <MX_GPIO_Init+0x224>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cda:	4a65      	ldr	r2, [pc, #404]	@ (8000e70 <MX_GPIO_Init+0x224>)
 8000cdc:	f043 0302 	orr.w	r3, r3, #2
 8000ce0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ce2:	4b63      	ldr	r3, [pc, #396]	@ (8000e70 <MX_GPIO_Init+0x224>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce6:	f003 0302 	and.w	r3, r3, #2
 8000cea:	60bb      	str	r3, [r7, #8]
 8000cec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	607b      	str	r3, [r7, #4]
 8000cf2:	4b5f      	ldr	r3, [pc, #380]	@ (8000e70 <MX_GPIO_Init+0x224>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf6:	4a5e      	ldr	r2, [pc, #376]	@ (8000e70 <MX_GPIO_Init+0x224>)
 8000cf8:	f043 0308 	orr.w	r3, r3, #8
 8000cfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cfe:	4b5c      	ldr	r3, [pc, #368]	@ (8000e70 <MX_GPIO_Init+0x224>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d02:	f003 0308 	and.w	r3, r3, #8
 8000d06:	607b      	str	r3, [r7, #4]
 8000d08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2108      	movs	r1, #8
 8000d0e:	4859      	ldr	r0, [pc, #356]	@ (8000e74 <MX_GPIO_Init+0x228>)
 8000d10:	f001 fc12 	bl	8002538 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000d14:	2201      	movs	r2, #1
 8000d16:	2101      	movs	r1, #1
 8000d18:	4857      	ldr	r0, [pc, #348]	@ (8000e78 <MX_GPIO_Init+0x22c>)
 8000d1a:	f001 fc0d 	bl	8002538 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MI0_Pin | MI1_Pin | MD0_Pin | MD1_Pin, GPIO_PIN_RESET);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f44f 41f0 	mov.w	r1, #30720	@ 0x7800
 8000d24:	4855      	ldr	r0, [pc, #340]	@ (8000e7c <MX_GPIO_Init+0x230>)
 8000d26:	f001 fc07 	bl	8002538 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin, GPIO_PIN_RESET);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000d30:	4853      	ldr	r0, [pc, #332]	@ (8000e80 <MX_GPIO_Init+0x234>)
 8000d32:	f001 fc01 	bl	8002538 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000d36:	2308      	movs	r3, #8
 8000d38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d42:	2300      	movs	r3, #0
 8000d44:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000d46:	f107 031c 	add.w	r3, r7, #28
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4849      	ldr	r0, [pc, #292]	@ (8000e74 <MX_GPIO_Init+0x228>)
 8000d4e:	f001 fa57 	bl	8002200 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000d52:	2301      	movs	r3, #1
 8000d54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d56:	2301      	movs	r3, #1
 8000d58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d62:	f107 031c 	add.w	r3, r7, #28
 8000d66:	4619      	mov	r1, r3
 8000d68:	4843      	ldr	r0, [pc, #268]	@ (8000e78 <MX_GPIO_Init+0x22c>)
 8000d6a:	f001 fa49 	bl	8002200 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000d6e:	2308      	movs	r3, #8
 8000d70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d72:	2302      	movs	r3, #2
 8000d74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d7e:	2305      	movs	r3, #5
 8000d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000d82:	f107 031c 	add.w	r3, r7, #28
 8000d86:	4619      	mov	r1, r3
 8000d88:	483b      	ldr	r0, [pc, #236]	@ (8000e78 <MX_GPIO_Init+0x22c>)
 8000d8a:	f001 fa39 	bl	8002200 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d92:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000d96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d9c:	f107 031c 	add.w	r3, r7, #28
 8000da0:	4619      	mov	r1, r3
 8000da2:	4838      	ldr	r0, [pc, #224]	@ (8000e84 <MX_GPIO_Init+0x238>)
 8000da4:	f001 fa2c 	bl	8002200 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000da8:	2304      	movs	r3, #4
 8000daa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dac:	2300      	movs	r3, #0
 8000dae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000db4:	f107 031c 	add.w	r3, r7, #28
 8000db8:	4619      	mov	r1, r3
 8000dba:	4830      	ldr	r0, [pc, #192]	@ (8000e7c <MX_GPIO_Init+0x230>)
 8000dbc:	f001 fa20 	bl	8002200 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000dc0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000dc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000dd2:	2305      	movs	r3, #5
 8000dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000dd6:	f107 031c 	add.w	r3, r7, #28
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4827      	ldr	r0, [pc, #156]	@ (8000e7c <MX_GPIO_Init+0x230>)
 8000dde:	f001 fa0f 	bl	8002200 <HAL_GPIO_Init>

  /*Configure GPIO pins : MI0_Pin MI1_Pin MD0_Pin MD1_Pin */
  GPIO_InitStruct.Pin = MI0_Pin | MI1_Pin | MD0_Pin | MD1_Pin;
 8000de2:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 8000de6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de8:	2301      	movs	r3, #1
 8000dea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df0:	2300      	movs	r3, #0
 8000df2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df4:	f107 031c 	add.w	r3, r7, #28
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4820      	ldr	r0, [pc, #128]	@ (8000e7c <MX_GPIO_Init+0x230>)
 8000dfc:	f001 fa00 	bl	8002200 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin;
 8000e00:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000e04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e06:	2301      	movs	r3, #1
 8000e08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e12:	f107 031c 	add.w	r3, r7, #28
 8000e16:	4619      	mov	r1, r3
 8000e18:	4819      	ldr	r0, [pc, #100]	@ (8000e80 <MX_GPIO_Init+0x234>)
 8000e1a:	f001 f9f1 	bl	8002200 <HAL_GPIO_Init>

  /*Configure GPIO pins : WallSensor_Pin LineSensor_Pin */
  GPIO_InitStruct.Pin = WallSensor_Pin | LineSensor_Pin;
 8000e1e:	23c0      	movs	r3, #192	@ 0xc0
 8000e20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e22:	2300      	movs	r3, #0
 8000e24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e2a:	f107 031c 	add.w	r3, r7, #28
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4811      	ldr	r0, [pc, #68]	@ (8000e78 <MX_GPIO_Init+0x22c>)
 8000e32:	f001 f9e5 	bl	8002200 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000e36:	2320      	movs	r3, #32
 8000e38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e42:	f107 031c 	add.w	r3, r7, #28
 8000e46:	4619      	mov	r1, r3
 8000e48:	480d      	ldr	r0, [pc, #52]	@ (8000e80 <MX_GPIO_Init+0x234>)
 8000e4a:	f001 f9d9 	bl	8002200 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e52:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000e56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000e5c:	f107 031c 	add.w	r3, r7, #28
 8000e60:	4619      	mov	r1, r3
 8000e62:	4804      	ldr	r0, [pc, #16]	@ (8000e74 <MX_GPIO_Init+0x228>)
 8000e64:	f001 f9cc 	bl	8002200 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000e68:	bf00      	nop
 8000e6a:	3730      	adds	r7, #48	@ 0x30
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40023800 	.word	0x40023800
 8000e74:	40021000 	.word	0x40021000
 8000e78:	40020800 	.word	0x40020800
 8000e7c:	40020400 	.word	0x40020400
 8000e80:	40020c00 	.word	0x40020c00
 8000e84:	40020000 	.word	0x40020000

08000e88 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e8c:	b672      	cpsid	i
}
 8000e8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e90:	bf00      	nop
 8000e92:	e7fd      	b.n	8000e90 <Error_Handler+0x8>

08000e94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	607b      	str	r3, [r7, #4]
 8000e9e:	4b10      	ldr	r3, [pc, #64]	@ (8000ee0 <HAL_MspInit+0x4c>)
 8000ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ea2:	4a0f      	ldr	r2, [pc, #60]	@ (8000ee0 <HAL_MspInit+0x4c>)
 8000ea4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ea8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8000ee0 <HAL_MspInit+0x4c>)
 8000eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eb2:	607b      	str	r3, [r7, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	603b      	str	r3, [r7, #0]
 8000eba:	4b09      	ldr	r3, [pc, #36]	@ (8000ee0 <HAL_MspInit+0x4c>)
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ebe:	4a08      	ldr	r2, [pc, #32]	@ (8000ee0 <HAL_MspInit+0x4c>)
 8000ec0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ec4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ec6:	4b06      	ldr	r3, [pc, #24]	@ (8000ee0 <HAL_MspInit+0x4c>)
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ece:	603b      	str	r3, [r7, #0]
 8000ed0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ed2:	2007      	movs	r0, #7
 8000ed4:	f000 fe68 	bl	8001ba8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ed8:	bf00      	nop
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40023800 	.word	0x40023800

08000ee4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08a      	sub	sp, #40	@ 0x28
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a2f      	ldr	r2, [pc, #188]	@ (8000fc0 <HAL_ADC_MspInit+0xdc>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d157      	bne.n	8000fb6 <HAL_ADC_MspInit+0xd2>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	613b      	str	r3, [r7, #16]
 8000f0a:	4b2e      	ldr	r3, [pc, #184]	@ (8000fc4 <HAL_ADC_MspInit+0xe0>)
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f0e:	4a2d      	ldr	r2, [pc, #180]	@ (8000fc4 <HAL_ADC_MspInit+0xe0>)
 8000f10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f14:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f16:	4b2b      	ldr	r3, [pc, #172]	@ (8000fc4 <HAL_ADC_MspInit+0xe0>)
 8000f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f1e:	613b      	str	r3, [r7, #16]
 8000f20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	4b27      	ldr	r3, [pc, #156]	@ (8000fc4 <HAL_ADC_MspInit+0xe0>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2a:	4a26      	ldr	r2, [pc, #152]	@ (8000fc4 <HAL_ADC_MspInit+0xe0>)
 8000f2c:	f043 0302 	orr.w	r3, r3, #2
 8000f30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f32:	4b24      	ldr	r3, [pc, #144]	@ (8000fc4 <HAL_ADC_MspInit+0xe0>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f36:	f003 0302 	and.w	r3, r3, #2
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = RightSensor_Pin|LeftSensor_Pin;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f42:	2303      	movs	r3, #3
 8000f44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4a:	f107 0314 	add.w	r3, r7, #20
 8000f4e:	4619      	mov	r1, r3
 8000f50:	481d      	ldr	r0, [pc, #116]	@ (8000fc8 <HAL_ADC_MspInit+0xe4>)
 8000f52:	f001 f955 	bl	8002200 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000f56:	4b1d      	ldr	r3, [pc, #116]	@ (8000fcc <HAL_ADC_MspInit+0xe8>)
 8000f58:	4a1d      	ldr	r2, [pc, #116]	@ (8000fd0 <HAL_ADC_MspInit+0xec>)
 8000f5a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000f5c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fcc <HAL_ADC_MspInit+0xe8>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f62:	4b1a      	ldr	r3, [pc, #104]	@ (8000fcc <HAL_ADC_MspInit+0xe8>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f68:	4b18      	ldr	r3, [pc, #96]	@ (8000fcc <HAL_ADC_MspInit+0xe8>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f6e:	4b17      	ldr	r3, [pc, #92]	@ (8000fcc <HAL_ADC_MspInit+0xe8>)
 8000f70:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f74:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f76:	4b15      	ldr	r3, [pc, #84]	@ (8000fcc <HAL_ADC_MspInit+0xe8>)
 8000f78:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f7c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f7e:	4b13      	ldr	r3, [pc, #76]	@ (8000fcc <HAL_ADC_MspInit+0xe8>)
 8000f80:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f84:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f86:	4b11      	ldr	r3, [pc, #68]	@ (8000fcc <HAL_ADC_MspInit+0xe8>)
 8000f88:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f8c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000fcc <HAL_ADC_MspInit+0xe8>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f94:	4b0d      	ldr	r3, [pc, #52]	@ (8000fcc <HAL_ADC_MspInit+0xe8>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f9a:	480c      	ldr	r0, [pc, #48]	@ (8000fcc <HAL_ADC_MspInit+0xe8>)
 8000f9c:	f000 fe46 	bl	8001c2c <HAL_DMA_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000fa6:	f7ff ff6f 	bl	8000e88 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a07      	ldr	r2, [pc, #28]	@ (8000fcc <HAL_ADC_MspInit+0xe8>)
 8000fae:	639a      	str	r2, [r3, #56]	@ 0x38
 8000fb0:	4a06      	ldr	r2, [pc, #24]	@ (8000fcc <HAL_ADC_MspInit+0xe8>)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000fb6:	bf00      	nop
 8000fb8:	3728      	adds	r7, #40	@ 0x28
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40012000 	.word	0x40012000
 8000fc4:	40023800 	.word	0x40023800
 8000fc8:	40020400 	.word	0x40020400
 8000fcc:	200000e0 	.word	0x200000e0
 8000fd0:	40026410 	.word	0x40026410

08000fd4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08a      	sub	sp, #40	@ 0x28
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fdc:	f107 0314 	add.w	r3, r7, #20
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a19      	ldr	r2, [pc, #100]	@ (8001058 <HAL_I2C_MspInit+0x84>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d12c      	bne.n	8001050 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	613b      	str	r3, [r7, #16]
 8000ffa:	4b18      	ldr	r3, [pc, #96]	@ (800105c <HAL_I2C_MspInit+0x88>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffe:	4a17      	ldr	r2, [pc, #92]	@ (800105c <HAL_I2C_MspInit+0x88>)
 8001000:	f043 0302 	orr.w	r3, r3, #2
 8001004:	6313      	str	r3, [r2, #48]	@ 0x30
 8001006:	4b15      	ldr	r3, [pc, #84]	@ (800105c <HAL_I2C_MspInit+0x88>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100a:	f003 0302 	and.w	r3, r3, #2
 800100e:	613b      	str	r3, [r7, #16]
 8001010:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001012:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001016:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001018:	2312      	movs	r3, #18
 800101a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800101c:	2301      	movs	r3, #1
 800101e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001020:	2300      	movs	r3, #0
 8001022:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001024:	2304      	movs	r3, #4
 8001026:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001028:	f107 0314 	add.w	r3, r7, #20
 800102c:	4619      	mov	r1, r3
 800102e:	480c      	ldr	r0, [pc, #48]	@ (8001060 <HAL_I2C_MspInit+0x8c>)
 8001030:	f001 f8e6 	bl	8002200 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001034:	2300      	movs	r3, #0
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	4b08      	ldr	r3, [pc, #32]	@ (800105c <HAL_I2C_MspInit+0x88>)
 800103a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800103c:	4a07      	ldr	r2, [pc, #28]	@ (800105c <HAL_I2C_MspInit+0x88>)
 800103e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001042:	6413      	str	r3, [r2, #64]	@ 0x40
 8001044:	4b05      	ldr	r3, [pc, #20]	@ (800105c <HAL_I2C_MspInit+0x88>)
 8001046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001048:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001050:	bf00      	nop
 8001052:	3728      	adds	r7, #40	@ 0x28
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	40005400 	.word	0x40005400
 800105c:	40023800 	.word	0x40023800
 8001060:	40020400 	.word	0x40020400

08001064 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08e      	sub	sp, #56	@ 0x38
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800107c:	f107 0314 	add.w	r3, r7, #20
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a31      	ldr	r2, [pc, #196]	@ (8001154 <HAL_I2S_MspInit+0xf0>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d15a      	bne.n	800114a <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001094:	2301      	movs	r3, #1
 8001096:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001098:	23c0      	movs	r3, #192	@ 0xc0
 800109a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800109c:	2302      	movs	r3, #2
 800109e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	4618      	mov	r0, r3
 80010a6:	f004 fdfd 	bl	8005ca4 <HAL_RCCEx_PeriphCLKConfig>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80010b0:	f7ff feea 	bl	8000e88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80010b4:	2300      	movs	r3, #0
 80010b6:	613b      	str	r3, [r7, #16]
 80010b8:	4b27      	ldr	r3, [pc, #156]	@ (8001158 <HAL_I2S_MspInit+0xf4>)
 80010ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010bc:	4a26      	ldr	r2, [pc, #152]	@ (8001158 <HAL_I2S_MspInit+0xf4>)
 80010be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80010c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80010c4:	4b24      	ldr	r3, [pc, #144]	@ (8001158 <HAL_I2S_MspInit+0xf4>)
 80010c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80010cc:	613b      	str	r3, [r7, #16]
 80010ce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d0:	2300      	movs	r3, #0
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	4b20      	ldr	r3, [pc, #128]	@ (8001158 <HAL_I2S_MspInit+0xf4>)
 80010d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d8:	4a1f      	ldr	r2, [pc, #124]	@ (8001158 <HAL_I2S_MspInit+0xf4>)
 80010da:	f043 0301 	orr.w	r3, r3, #1
 80010de:	6313      	str	r3, [r2, #48]	@ 0x30
 80010e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001158 <HAL_I2S_MspInit+0xf4>)
 80010e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e4:	f003 0301 	and.w	r3, r3, #1
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ec:	2300      	movs	r3, #0
 80010ee:	60bb      	str	r3, [r7, #8]
 80010f0:	4b19      	ldr	r3, [pc, #100]	@ (8001158 <HAL_I2S_MspInit+0xf4>)
 80010f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f4:	4a18      	ldr	r2, [pc, #96]	@ (8001158 <HAL_I2S_MspInit+0xf4>)
 80010f6:	f043 0304 	orr.w	r3, r3, #4
 80010fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80010fc:	4b16      	ldr	r3, [pc, #88]	@ (8001158 <HAL_I2S_MspInit+0xf4>)
 80010fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001100:	f003 0304 	and.w	r3, r3, #4
 8001104:	60bb      	str	r3, [r7, #8]
 8001106:	68bb      	ldr	r3, [r7, #8]
    /**I2S3 GPIO Configuration
    PA4     ------> I2S3_WS
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001108:	2310      	movs	r3, #16
 800110a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110c:	2302      	movs	r3, #2
 800110e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001114:	2300      	movs	r3, #0
 8001116:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001118:	2306      	movs	r3, #6
 800111a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800111c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001120:	4619      	mov	r1, r3
 8001122:	480e      	ldr	r0, [pc, #56]	@ (800115c <HAL_I2S_MspInit+0xf8>)
 8001124:	f001 f86c 	bl	8002200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_SCK_Pin|I2S3_SD_Pin;
 8001128:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800112c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112e:	2302      	movs	r3, #2
 8001130:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001136:	2300      	movs	r3, #0
 8001138:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800113a:	2306      	movs	r3, #6
 800113c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800113e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001142:	4619      	mov	r1, r3
 8001144:	4806      	ldr	r0, [pc, #24]	@ (8001160 <HAL_I2S_MspInit+0xfc>)
 8001146:	f001 f85b 	bl	8002200 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 800114a:	bf00      	nop
 800114c:	3738      	adds	r7, #56	@ 0x38
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40003c00 	.word	0x40003c00
 8001158:	40023800 	.word	0x40023800
 800115c:	40020000 	.word	0x40020000
 8001160:	40020800 	.word	0x40020800

08001164 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08a      	sub	sp, #40	@ 0x28
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116c:	f107 0314 	add.w	r3, r7, #20
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a19      	ldr	r2, [pc, #100]	@ (80011e8 <HAL_SPI_MspInit+0x84>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d12b      	bne.n	80011de <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	613b      	str	r3, [r7, #16]
 800118a:	4b18      	ldr	r3, [pc, #96]	@ (80011ec <HAL_SPI_MspInit+0x88>)
 800118c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800118e:	4a17      	ldr	r2, [pc, #92]	@ (80011ec <HAL_SPI_MspInit+0x88>)
 8001190:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001194:	6453      	str	r3, [r2, #68]	@ 0x44
 8001196:	4b15      	ldr	r3, [pc, #84]	@ (80011ec <HAL_SPI_MspInit+0x88>)
 8001198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800119a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800119e:	613b      	str	r3, [r7, #16]
 80011a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	4b11      	ldr	r3, [pc, #68]	@ (80011ec <HAL_SPI_MspInit+0x88>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011aa:	4a10      	ldr	r2, [pc, #64]	@ (80011ec <HAL_SPI_MspInit+0x88>)
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011b2:	4b0e      	ldr	r3, [pc, #56]	@ (80011ec <HAL_SPI_MspInit+0x88>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80011be:	23e0      	movs	r3, #224	@ 0xe0
 80011c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c2:	2302      	movs	r3, #2
 80011c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ca:	2300      	movs	r3, #0
 80011cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011ce:	2305      	movs	r3, #5
 80011d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d2:	f107 0314 	add.w	r3, r7, #20
 80011d6:	4619      	mov	r1, r3
 80011d8:	4805      	ldr	r0, [pc, #20]	@ (80011f0 <HAL_SPI_MspInit+0x8c>)
 80011da:	f001 f811 	bl	8002200 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80011de:	bf00      	nop
 80011e0:	3728      	adds	r7, #40	@ 0x28
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40013000 	.word	0x40013000
 80011ec:	40023800 	.word	0x40023800
 80011f0:	40020000 	.word	0x40020000

080011f4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a0b      	ldr	r2, [pc, #44]	@ (8001230 <HAL_TIM_Base_MspInit+0x3c>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d10d      	bne.n	8001222 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	4b0a      	ldr	r3, [pc, #40]	@ (8001234 <HAL_TIM_Base_MspInit+0x40>)
 800120c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120e:	4a09      	ldr	r2, [pc, #36]	@ (8001234 <HAL_TIM_Base_MspInit+0x40>)
 8001210:	f043 0302 	orr.w	r3, r3, #2
 8001214:	6413      	str	r3, [r2, #64]	@ 0x40
 8001216:	4b07      	ldr	r3, [pc, #28]	@ (8001234 <HAL_TIM_Base_MspInit+0x40>)
 8001218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001222:	bf00      	nop
 8001224:	3714      	adds	r7, #20
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	40000400 	.word	0x40000400
 8001234:	40023800 	.word	0x40023800

08001238 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b088      	sub	sp, #32
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001240:	f107 030c 	add.w	r3, r7, #12
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a12      	ldr	r2, [pc, #72]	@ (80012a0 <HAL_TIM_MspPostInit+0x68>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d11e      	bne.n	8001298 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	60bb      	str	r3, [r7, #8]
 800125e:	4b11      	ldr	r3, [pc, #68]	@ (80012a4 <HAL_TIM_MspPostInit+0x6c>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001262:	4a10      	ldr	r2, [pc, #64]	@ (80012a4 <HAL_TIM_MspPostInit+0x6c>)
 8001264:	f043 0304 	orr.w	r3, r3, #4
 8001268:	6313      	str	r3, [r2, #48]	@ 0x30
 800126a:	4b0e      	ldr	r3, [pc, #56]	@ (80012a4 <HAL_TIM_MspPostInit+0x6c>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126e:	f003 0304 	and.w	r3, r3, #4
 8001272:	60bb      	str	r3, [r7, #8]
 8001274:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = Vel_I_Pin|Vel_D_Pin;
 8001276:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800127a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127c:	2302      	movs	r3, #2
 800127e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001284:	2300      	movs	r3, #0
 8001286:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001288:	2302      	movs	r3, #2
 800128a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800128c:	f107 030c 	add.w	r3, r7, #12
 8001290:	4619      	mov	r1, r3
 8001292:	4805      	ldr	r0, [pc, #20]	@ (80012a8 <HAL_TIM_MspPostInit+0x70>)
 8001294:	f000 ffb4 	bl	8002200 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001298:	bf00      	nop
 800129a:	3720      	adds	r7, #32
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40000400 	.word	0x40000400
 80012a4:	40023800 	.word	0x40023800
 80012a8:	40020800 	.word	0x40020800

080012ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012b0:	bf00      	nop
 80012b2:	e7fd      	b.n	80012b0 <NMI_Handler+0x4>

080012b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012b8:	bf00      	nop
 80012ba:	e7fd      	b.n	80012b8 <HardFault_Handler+0x4>

080012bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c0:	bf00      	nop
 80012c2:	e7fd      	b.n	80012c0 <MemManage_Handler+0x4>

080012c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012c8:	bf00      	nop
 80012ca:	e7fd      	b.n	80012c8 <BusFault_Handler+0x4>

080012cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012d0:	bf00      	nop
 80012d2:	e7fd      	b.n	80012d0 <UsageFault_Handler+0x4>

080012d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr

080012e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001302:	f000 f8db 	bl	80014bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
	...

0800130c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001310:	4802      	ldr	r0, [pc, #8]	@ (800131c <DMA2_Stream0_IRQHandler+0x10>)
 8001312:	f000 fd39 	bl	8001d88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	200000e0 	.word	0x200000e0

08001320 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001324:	4802      	ldr	r0, [pc, #8]	@ (8001330 <OTG_FS_IRQHandler+0x10>)
 8001326:	f001 fc01 	bl	8002b2c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	20000664 	.word	0x20000664

08001334 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800133c:	4a14      	ldr	r2, [pc, #80]	@ (8001390 <_sbrk+0x5c>)
 800133e:	4b15      	ldr	r3, [pc, #84]	@ (8001394 <_sbrk+0x60>)
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001348:	4b13      	ldr	r3, [pc, #76]	@ (8001398 <_sbrk+0x64>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d102      	bne.n	8001356 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001350:	4b11      	ldr	r3, [pc, #68]	@ (8001398 <_sbrk+0x64>)
 8001352:	4a12      	ldr	r2, [pc, #72]	@ (800139c <_sbrk+0x68>)
 8001354:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001356:	4b10      	ldr	r3, [pc, #64]	@ (8001398 <_sbrk+0x64>)
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4413      	add	r3, r2
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	429a      	cmp	r2, r3
 8001362:	d207      	bcs.n	8001374 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001364:	f009 fad0 	bl	800a908 <__errno>
 8001368:	4603      	mov	r3, r0
 800136a:	220c      	movs	r2, #12
 800136c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800136e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001372:	e009      	b.n	8001388 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001374:	4b08      	ldr	r3, [pc, #32]	@ (8001398 <_sbrk+0x64>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800137a:	4b07      	ldr	r3, [pc, #28]	@ (8001398 <_sbrk+0x64>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4413      	add	r3, r2
 8001382:	4a05      	ldr	r2, [pc, #20]	@ (8001398 <_sbrk+0x64>)
 8001384:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001386:	68fb      	ldr	r3, [r7, #12]
}
 8001388:	4618      	mov	r0, r3
 800138a:	3718      	adds	r7, #24
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	20020000 	.word	0x20020000
 8001394:	00000400 	.word	0x00000400
 8001398:	20000280 	.word	0x20000280
 800139c:	20000b90 	.word	0x20000b90

080013a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013a4:	4b06      	ldr	r3, [pc, #24]	@ (80013c0 <SystemInit+0x20>)
 80013a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013aa:	4a05      	ldr	r2, [pc, #20]	@ (80013c0 <SystemInit+0x20>)
 80013ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80013c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013fc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80013c8:	f7ff ffea 	bl	80013a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013cc:	480c      	ldr	r0, [pc, #48]	@ (8001400 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013ce:	490d      	ldr	r1, [pc, #52]	@ (8001404 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001408 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013d4:	e002      	b.n	80013dc <LoopCopyDataInit>

080013d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013da:	3304      	adds	r3, #4

080013dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013e0:	d3f9      	bcc.n	80013d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013e2:	4a0a      	ldr	r2, [pc, #40]	@ (800140c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013e4:	4c0a      	ldr	r4, [pc, #40]	@ (8001410 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013e8:	e001      	b.n	80013ee <LoopFillZerobss>

080013ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013ec:	3204      	adds	r2, #4

080013ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013f0:	d3fb      	bcc.n	80013ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013f2:	f009 fa8f 	bl	800a914 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013f6:	f7ff f9d1 	bl	800079c <main>
  bx  lr    
 80013fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80013fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001400:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001404:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001408:	0800aa40 	.word	0x0800aa40
  ldr r2, =_sbss
 800140c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001410:	20000b8c 	.word	0x20000b8c

08001414 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001414:	e7fe      	b.n	8001414 <ADC_IRQHandler>
	...

08001418 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800141c:	4b0e      	ldr	r3, [pc, #56]	@ (8001458 <HAL_Init+0x40>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a0d      	ldr	r2, [pc, #52]	@ (8001458 <HAL_Init+0x40>)
 8001422:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001426:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001428:	4b0b      	ldr	r3, [pc, #44]	@ (8001458 <HAL_Init+0x40>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a0a      	ldr	r2, [pc, #40]	@ (8001458 <HAL_Init+0x40>)
 800142e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001432:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001434:	4b08      	ldr	r3, [pc, #32]	@ (8001458 <HAL_Init+0x40>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a07      	ldr	r2, [pc, #28]	@ (8001458 <HAL_Init+0x40>)
 800143a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800143e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001440:	2003      	movs	r0, #3
 8001442:	f000 fbb1 	bl	8001ba8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001446:	2000      	movs	r0, #0
 8001448:	f000 f808 	bl	800145c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800144c:	f7ff fd22 	bl	8000e94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40023c00 	.word	0x40023c00

0800145c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001464:	4b12      	ldr	r3, [pc, #72]	@ (80014b0 <HAL_InitTick+0x54>)
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	4b12      	ldr	r3, [pc, #72]	@ (80014b4 <HAL_InitTick+0x58>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	4619      	mov	r1, r3
 800146e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001472:	fbb3 f3f1 	udiv	r3, r3, r1
 8001476:	fbb2 f3f3 	udiv	r3, r2, r3
 800147a:	4618      	mov	r0, r3
 800147c:	f000 fbc9 	bl	8001c12 <HAL_SYSTICK_Config>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e00e      	b.n	80014a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2b0f      	cmp	r3, #15
 800148e:	d80a      	bhi.n	80014a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001490:	2200      	movs	r2, #0
 8001492:	6879      	ldr	r1, [r7, #4]
 8001494:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001498:	f000 fb91 	bl	8001bbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800149c:	4a06      	ldr	r2, [pc, #24]	@ (80014b8 <HAL_InitTick+0x5c>)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014a2:	2300      	movs	r3, #0
 80014a4:	e000      	b.n	80014a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000000 	.word	0x20000000
 80014b4:	20000008 	.word	0x20000008
 80014b8:	20000004 	.word	0x20000004

080014bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014c0:	4b06      	ldr	r3, [pc, #24]	@ (80014dc <HAL_IncTick+0x20>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	461a      	mov	r2, r3
 80014c6:	4b06      	ldr	r3, [pc, #24]	@ (80014e0 <HAL_IncTick+0x24>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4413      	add	r3, r2
 80014cc:	4a04      	ldr	r2, [pc, #16]	@ (80014e0 <HAL_IncTick+0x24>)
 80014ce:	6013      	str	r3, [r2, #0]
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	20000008 	.word	0x20000008
 80014e0:	20000284 	.word	0x20000284

080014e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  return uwTick;
 80014e8:	4b03      	ldr	r3, [pc, #12]	@ (80014f8 <HAL_GetTick+0x14>)
 80014ea:	681b      	ldr	r3, [r3, #0]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	20000284 	.word	0x20000284

080014fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001504:	f7ff ffee 	bl	80014e4 <HAL_GetTick>
 8001508:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001514:	d005      	beq.n	8001522 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001516:	4b0a      	ldr	r3, [pc, #40]	@ (8001540 <HAL_Delay+0x44>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	461a      	mov	r2, r3
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	4413      	add	r3, r2
 8001520:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001522:	bf00      	nop
 8001524:	f7ff ffde 	bl	80014e4 <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	68fa      	ldr	r2, [r7, #12]
 8001530:	429a      	cmp	r2, r3
 8001532:	d8f7      	bhi.n	8001524 <HAL_Delay+0x28>
  {
  }
}
 8001534:	bf00      	nop
 8001536:	bf00      	nop
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000008 	.word	0x20000008

08001544 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800154c:	2300      	movs	r3, #0
 800154e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d101      	bne.n	800155a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e033      	b.n	80015c2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155e:	2b00      	cmp	r3, #0
 8001560:	d109      	bne.n	8001576 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f7ff fcbe 	bl	8000ee4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800157a:	f003 0310 	and.w	r3, r3, #16
 800157e:	2b00      	cmp	r3, #0
 8001580:	d118      	bne.n	80015b4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001586:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800158a:	f023 0302 	bic.w	r3, r3, #2
 800158e:	f043 0202 	orr.w	r2, r3, #2
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f000 f93a 	bl	8001810 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a6:	f023 0303 	bic.w	r3, r3, #3
 80015aa:	f043 0201 	orr.w	r2, r3, #1
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	641a      	str	r2, [r3, #64]	@ 0x40
 80015b2:	e001      	b.n	80015b8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80015c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
	...

080015cc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80015d6:	2300      	movs	r3, #0
 80015d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d101      	bne.n	80015e8 <HAL_ADC_ConfigChannel+0x1c>
 80015e4:	2302      	movs	r3, #2
 80015e6:	e105      	b.n	80017f4 <HAL_ADC_ConfigChannel+0x228>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2201      	movs	r2, #1
 80015ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2b09      	cmp	r3, #9
 80015f6:	d925      	bls.n	8001644 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	68d9      	ldr	r1, [r3, #12]
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	b29b      	uxth	r3, r3
 8001604:	461a      	mov	r2, r3
 8001606:	4613      	mov	r3, r2
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	4413      	add	r3, r2
 800160c:	3b1e      	subs	r3, #30
 800160e:	2207      	movs	r2, #7
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	43da      	mvns	r2, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	400a      	ands	r2, r1
 800161c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	68d9      	ldr	r1, [r3, #12]
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	689a      	ldr	r2, [r3, #8]
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	b29b      	uxth	r3, r3
 800162e:	4618      	mov	r0, r3
 8001630:	4603      	mov	r3, r0
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	4403      	add	r3, r0
 8001636:	3b1e      	subs	r3, #30
 8001638:	409a      	lsls	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	430a      	orrs	r2, r1
 8001640:	60da      	str	r2, [r3, #12]
 8001642:	e022      	b.n	800168a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	6919      	ldr	r1, [r3, #16]
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	b29b      	uxth	r3, r3
 8001650:	461a      	mov	r2, r3
 8001652:	4613      	mov	r3, r2
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	4413      	add	r3, r2
 8001658:	2207      	movs	r2, #7
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	43da      	mvns	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	400a      	ands	r2, r1
 8001666:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	6919      	ldr	r1, [r3, #16]
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	689a      	ldr	r2, [r3, #8]
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	b29b      	uxth	r3, r3
 8001678:	4618      	mov	r0, r3
 800167a:	4603      	mov	r3, r0
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	4403      	add	r3, r0
 8001680:	409a      	lsls	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	430a      	orrs	r2, r1
 8001688:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	2b06      	cmp	r3, #6
 8001690:	d824      	bhi.n	80016dc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685a      	ldr	r2, [r3, #4]
 800169c:	4613      	mov	r3, r2
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	4413      	add	r3, r2
 80016a2:	3b05      	subs	r3, #5
 80016a4:	221f      	movs	r2, #31
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	43da      	mvns	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	400a      	ands	r2, r1
 80016b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	b29b      	uxth	r3, r3
 80016c0:	4618      	mov	r0, r3
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685a      	ldr	r2, [r3, #4]
 80016c6:	4613      	mov	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	4413      	add	r3, r2
 80016cc:	3b05      	subs	r3, #5
 80016ce:	fa00 f203 	lsl.w	r2, r0, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	430a      	orrs	r2, r1
 80016d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80016da:	e04c      	b.n	8001776 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	2b0c      	cmp	r3, #12
 80016e2:	d824      	bhi.n	800172e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685a      	ldr	r2, [r3, #4]
 80016ee:	4613      	mov	r3, r2
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	4413      	add	r3, r2
 80016f4:	3b23      	subs	r3, #35	@ 0x23
 80016f6:	221f      	movs	r2, #31
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	43da      	mvns	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	400a      	ands	r2, r1
 8001704:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	b29b      	uxth	r3, r3
 8001712:	4618      	mov	r0, r3
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685a      	ldr	r2, [r3, #4]
 8001718:	4613      	mov	r3, r2
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	4413      	add	r3, r2
 800171e:	3b23      	subs	r3, #35	@ 0x23
 8001720:	fa00 f203 	lsl.w	r2, r0, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	430a      	orrs	r2, r1
 800172a:	631a      	str	r2, [r3, #48]	@ 0x30
 800172c:	e023      	b.n	8001776 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685a      	ldr	r2, [r3, #4]
 8001738:	4613      	mov	r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	4413      	add	r3, r2
 800173e:	3b41      	subs	r3, #65	@ 0x41
 8001740:	221f      	movs	r2, #31
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	43da      	mvns	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	400a      	ands	r2, r1
 800174e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	b29b      	uxth	r3, r3
 800175c:	4618      	mov	r0, r3
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685a      	ldr	r2, [r3, #4]
 8001762:	4613      	mov	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	4413      	add	r3, r2
 8001768:	3b41      	subs	r3, #65	@ 0x41
 800176a:	fa00 f203 	lsl.w	r2, r0, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	430a      	orrs	r2, r1
 8001774:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001776:	4b22      	ldr	r3, [pc, #136]	@ (8001800 <HAL_ADC_ConfigChannel+0x234>)
 8001778:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a21      	ldr	r2, [pc, #132]	@ (8001804 <HAL_ADC_ConfigChannel+0x238>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d109      	bne.n	8001798 <HAL_ADC_ConfigChannel+0x1cc>
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2b12      	cmp	r3, #18
 800178a:	d105      	bne.n	8001798 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a19      	ldr	r2, [pc, #100]	@ (8001804 <HAL_ADC_ConfigChannel+0x238>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d123      	bne.n	80017ea <HAL_ADC_ConfigChannel+0x21e>
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2b10      	cmp	r3, #16
 80017a8:	d003      	beq.n	80017b2 <HAL_ADC_ConfigChannel+0x1e6>
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2b11      	cmp	r3, #17
 80017b0:	d11b      	bne.n	80017ea <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2b10      	cmp	r3, #16
 80017c4:	d111      	bne.n	80017ea <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017c6:	4b10      	ldr	r3, [pc, #64]	@ (8001808 <HAL_ADC_ConfigChannel+0x23c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a10      	ldr	r2, [pc, #64]	@ (800180c <HAL_ADC_ConfigChannel+0x240>)
 80017cc:	fba2 2303 	umull	r2, r3, r2, r3
 80017d0:	0c9a      	lsrs	r2, r3, #18
 80017d2:	4613      	mov	r3, r2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	4413      	add	r3, r2
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80017dc:	e002      	b.n	80017e4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	3b01      	subs	r3, #1
 80017e2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1f9      	bne.n	80017de <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80017f2:	2300      	movs	r3, #0
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3714      	adds	r7, #20
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	40012300 	.word	0x40012300
 8001804:	40012000 	.word	0x40012000
 8001808:	20000000 	.word	0x20000000
 800180c:	431bde83 	.word	0x431bde83

08001810 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001810:	b480      	push	{r7}
 8001812:	b085      	sub	sp, #20
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001818:	4b79      	ldr	r3, [pc, #484]	@ (8001a00 <ADC_Init+0x1f0>)
 800181a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	685a      	ldr	r2, [r3, #4]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	431a      	orrs	r2, r3
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	685a      	ldr	r2, [r3, #4]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001844:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	6859      	ldr	r1, [r3, #4]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	691b      	ldr	r3, [r3, #16]
 8001850:	021a      	lsls	r2, r3, #8
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	430a      	orrs	r2, r1
 8001858:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	685a      	ldr	r2, [r3, #4]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001868:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	6859      	ldr	r1, [r3, #4]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689a      	ldr	r2, [r3, #8]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	430a      	orrs	r2, r1
 800187a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	689a      	ldr	r2, [r3, #8]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800188a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	6899      	ldr	r1, [r3, #8]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	68da      	ldr	r2, [r3, #12]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	430a      	orrs	r2, r1
 800189c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018a2:	4a58      	ldr	r2, [pc, #352]	@ (8001a04 <ADC_Init+0x1f4>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d022      	beq.n	80018ee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	689a      	ldr	r2, [r3, #8]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80018b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	6899      	ldr	r1, [r3, #8]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	430a      	orrs	r2, r1
 80018c8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80018d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	6899      	ldr	r1, [r3, #8]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	430a      	orrs	r2, r1
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	e00f      	b.n	800190e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	689a      	ldr	r2, [r3, #8]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80018fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	689a      	ldr	r2, [r3, #8]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800190c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	689a      	ldr	r2, [r3, #8]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f022 0202 	bic.w	r2, r2, #2
 800191c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	6899      	ldr	r1, [r3, #8]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	7e1b      	ldrb	r3, [r3, #24]
 8001928:	005a      	lsls	r2, r3, #1
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	430a      	orrs	r2, r1
 8001930:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d01b      	beq.n	8001974 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	685a      	ldr	r2, [r3, #4]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800194a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	685a      	ldr	r2, [r3, #4]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800195a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6859      	ldr	r1, [r3, #4]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001966:	3b01      	subs	r3, #1
 8001968:	035a      	lsls	r2, r3, #13
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	430a      	orrs	r2, r1
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	e007      	b.n	8001984 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	685a      	ldr	r2, [r3, #4]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001982:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001992:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	3b01      	subs	r3, #1
 80019a0:	051a      	lsls	r2, r3, #20
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	430a      	orrs	r2, r1
 80019a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	689a      	ldr	r2, [r3, #8]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80019b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	6899      	ldr	r1, [r3, #8]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80019c6:	025a      	lsls	r2, r3, #9
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	430a      	orrs	r2, r1
 80019ce:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	689a      	ldr	r2, [r3, #8]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80019de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	6899      	ldr	r1, [r3, #8]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	695b      	ldr	r3, [r3, #20]
 80019ea:	029a      	lsls	r2, r3, #10
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	430a      	orrs	r2, r1
 80019f2:	609a      	str	r2, [r3, #8]
}
 80019f4:	bf00      	nop
 80019f6:	3714      	adds	r7, #20
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	40012300 	.word	0x40012300
 8001a04:	0f000001 	.word	0x0f000001

08001a08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f003 0307 	and.w	r3, r3, #7
 8001a16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a18:	4b0c      	ldr	r3, [pc, #48]	@ (8001a4c <__NVIC_SetPriorityGrouping+0x44>)
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a1e:	68ba      	ldr	r2, [r7, #8]
 8001a20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a24:	4013      	ands	r3, r2
 8001a26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a3a:	4a04      	ldr	r2, [pc, #16]	@ (8001a4c <__NVIC_SetPriorityGrouping+0x44>)
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	60d3      	str	r3, [r2, #12]
}
 8001a40:	bf00      	nop
 8001a42:	3714      	adds	r7, #20
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	e000ed00 	.word	0xe000ed00

08001a50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a54:	4b04      	ldr	r3, [pc, #16]	@ (8001a68 <__NVIC_GetPriorityGrouping+0x18>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	0a1b      	lsrs	r3, r3, #8
 8001a5a:	f003 0307 	and.w	r3, r3, #7
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	db0b      	blt.n	8001a96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a7e:	79fb      	ldrb	r3, [r7, #7]
 8001a80:	f003 021f 	and.w	r2, r3, #31
 8001a84:	4907      	ldr	r1, [pc, #28]	@ (8001aa4 <__NVIC_EnableIRQ+0x38>)
 8001a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8a:	095b      	lsrs	r3, r3, #5
 8001a8c:	2001      	movs	r0, #1
 8001a8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a96:	bf00      	nop
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	e000e100 	.word	0xe000e100

08001aa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	6039      	str	r1, [r7, #0]
 8001ab2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	db0a      	blt.n	8001ad2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	b2da      	uxtb	r2, r3
 8001ac0:	490c      	ldr	r1, [pc, #48]	@ (8001af4 <__NVIC_SetPriority+0x4c>)
 8001ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac6:	0112      	lsls	r2, r2, #4
 8001ac8:	b2d2      	uxtb	r2, r2
 8001aca:	440b      	add	r3, r1
 8001acc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ad0:	e00a      	b.n	8001ae8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	b2da      	uxtb	r2, r3
 8001ad6:	4908      	ldr	r1, [pc, #32]	@ (8001af8 <__NVIC_SetPriority+0x50>)
 8001ad8:	79fb      	ldrb	r3, [r7, #7]
 8001ada:	f003 030f 	and.w	r3, r3, #15
 8001ade:	3b04      	subs	r3, #4
 8001ae0:	0112      	lsls	r2, r2, #4
 8001ae2:	b2d2      	uxtb	r2, r2
 8001ae4:	440b      	add	r3, r1
 8001ae6:	761a      	strb	r2, [r3, #24]
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	e000e100 	.word	0xe000e100
 8001af8:	e000ed00 	.word	0xe000ed00

08001afc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b089      	sub	sp, #36	@ 0x24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	f1c3 0307 	rsb	r3, r3, #7
 8001b16:	2b04      	cmp	r3, #4
 8001b18:	bf28      	it	cs
 8001b1a:	2304      	movcs	r3, #4
 8001b1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	3304      	adds	r3, #4
 8001b22:	2b06      	cmp	r3, #6
 8001b24:	d902      	bls.n	8001b2c <NVIC_EncodePriority+0x30>
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	3b03      	subs	r3, #3
 8001b2a:	e000      	b.n	8001b2e <NVIC_EncodePriority+0x32>
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b30:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	43da      	mvns	r2, r3
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	401a      	ands	r2, r3
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b44:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4e:	43d9      	mvns	r1, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b54:	4313      	orrs	r3, r2
         );
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3724      	adds	r7, #36	@ 0x24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
	...

08001b64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b74:	d301      	bcc.n	8001b7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b76:	2301      	movs	r3, #1
 8001b78:	e00f      	b.n	8001b9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b7a:	4a0a      	ldr	r2, [pc, #40]	@ (8001ba4 <SysTick_Config+0x40>)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b82:	210f      	movs	r1, #15
 8001b84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001b88:	f7ff ff8e 	bl	8001aa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b8c:	4b05      	ldr	r3, [pc, #20]	@ (8001ba4 <SysTick_Config+0x40>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b92:	4b04      	ldr	r3, [pc, #16]	@ (8001ba4 <SysTick_Config+0x40>)
 8001b94:	2207      	movs	r2, #7
 8001b96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	e000e010 	.word	0xe000e010

08001ba8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f7ff ff29 	bl	8001a08 <__NVIC_SetPriorityGrouping>
}
 8001bb6:	bf00      	nop
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b086      	sub	sp, #24
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	60b9      	str	r1, [r7, #8]
 8001bc8:	607a      	str	r2, [r7, #4]
 8001bca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bd0:	f7ff ff3e 	bl	8001a50 <__NVIC_GetPriorityGrouping>
 8001bd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	68b9      	ldr	r1, [r7, #8]
 8001bda:	6978      	ldr	r0, [r7, #20]
 8001bdc:	f7ff ff8e 	bl	8001afc <NVIC_EncodePriority>
 8001be0:	4602      	mov	r2, r0
 8001be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001be6:	4611      	mov	r1, r2
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff ff5d 	bl	8001aa8 <__NVIC_SetPriority>
}
 8001bee:	bf00      	nop
 8001bf0:	3718      	adds	r7, #24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b082      	sub	sp, #8
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff ff31 	bl	8001a6c <__NVIC_EnableIRQ>
}
 8001c0a:	bf00      	nop
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b082      	sub	sp, #8
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f7ff ffa2 	bl	8001b64 <SysTick_Config>
 8001c20:	4603      	mov	r3, r0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
	...

08001c2c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c34:	2300      	movs	r3, #0
 8001c36:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c38:	f7ff fc54 	bl	80014e4 <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d101      	bne.n	8001c48 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e099      	b.n	8001d7c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2202      	movs	r2, #2
 8001c4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f022 0201 	bic.w	r2, r2, #1
 8001c66:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c68:	e00f      	b.n	8001c8a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c6a:	f7ff fc3b 	bl	80014e4 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b05      	cmp	r3, #5
 8001c76:	d908      	bls.n	8001c8a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2220      	movs	r2, #32
 8001c7c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2203      	movs	r2, #3
 8001c82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e078      	b.n	8001d7c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d1e8      	bne.n	8001c6a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ca0:	697a      	ldr	r2, [r7, #20]
 8001ca2:	4b38      	ldr	r3, [pc, #224]	@ (8001d84 <HAL_DMA_Init+0x158>)
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	685a      	ldr	r2, [r3, #4]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	691b      	ldr	r3, [r3, #16]
 8001cbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a1b      	ldr	r3, [r3, #32]
 8001cd4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cd6:	697a      	ldr	r2, [r7, #20]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce0:	2b04      	cmp	r3, #4
 8001ce2:	d107      	bne.n	8001cf4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cec:	4313      	orrs	r3, r2
 8001cee:	697a      	ldr	r2, [r7, #20]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	697a      	ldr	r2, [r7, #20]
 8001cfa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	f023 0307 	bic.w	r3, r3, #7
 8001d0a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d10:	697a      	ldr	r2, [r7, #20]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d1a:	2b04      	cmp	r3, #4
 8001d1c:	d117      	bne.n	8001d4e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d22:	697a      	ldr	r2, [r7, #20]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d00e      	beq.n	8001d4e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f000 f9e9 	bl	8002108 <DMA_CheckFifoParam>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d008      	beq.n	8001d4e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2240      	movs	r2, #64	@ 0x40
 8001d40:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2201      	movs	r2, #1
 8001d46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e016      	b.n	8001d7c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	697a      	ldr	r2, [r7, #20]
 8001d54:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f9a0 	bl	800209c <DMA_CalcBaseAndBitshift>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d64:	223f      	movs	r2, #63	@ 0x3f
 8001d66:	409a      	lsls	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2201      	movs	r2, #1
 8001d76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3718      	adds	r7, #24
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	f010803f 	.word	0xf010803f

08001d88 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d90:	2300      	movs	r3, #0
 8001d92:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d94:	4b8e      	ldr	r3, [pc, #568]	@ (8001fd0 <HAL_DMA_IRQHandler+0x248>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a8e      	ldr	r2, [pc, #568]	@ (8001fd4 <HAL_DMA_IRQHandler+0x24c>)
 8001d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9e:	0a9b      	lsrs	r3, r3, #10
 8001da0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001da6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001db2:	2208      	movs	r2, #8
 8001db4:	409a      	lsls	r2, r3
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	4013      	ands	r3, r2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d01a      	beq.n	8001df4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0304 	and.w	r3, r3, #4
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d013      	beq.n	8001df4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f022 0204 	bic.w	r2, r2, #4
 8001dda:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001de0:	2208      	movs	r2, #8
 8001de2:	409a      	lsls	r2, r3
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dec:	f043 0201 	orr.w	r2, r3, #1
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001df8:	2201      	movs	r2, #1
 8001dfa:	409a      	lsls	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d012      	beq.n	8001e2a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d00b      	beq.n	8001e2a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e16:	2201      	movs	r2, #1
 8001e18:	409a      	lsls	r2, r3
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e22:	f043 0202 	orr.w	r2, r3, #2
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e2e:	2204      	movs	r2, #4
 8001e30:	409a      	lsls	r2, r3
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	4013      	ands	r3, r2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d012      	beq.n	8001e60 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d00b      	beq.n	8001e60 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e4c:	2204      	movs	r2, #4
 8001e4e:	409a      	lsls	r2, r3
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e58:	f043 0204 	orr.w	r2, r3, #4
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e64:	2210      	movs	r2, #16
 8001e66:	409a      	lsls	r2, r3
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d043      	beq.n	8001ef8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0308 	and.w	r3, r3, #8
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d03c      	beq.n	8001ef8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e82:	2210      	movs	r2, #16
 8001e84:	409a      	lsls	r2, r3
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d018      	beq.n	8001eca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d108      	bne.n	8001eb8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d024      	beq.n	8001ef8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	4798      	blx	r3
 8001eb6:	e01f      	b.n	8001ef8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d01b      	beq.n	8001ef8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	4798      	blx	r3
 8001ec8:	e016      	b.n	8001ef8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d107      	bne.n	8001ee8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f022 0208 	bic.w	r2, r2, #8
 8001ee6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d003      	beq.n	8001ef8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001efc:	2220      	movs	r2, #32
 8001efe:	409a      	lsls	r2, r3
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	4013      	ands	r3, r2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	f000 808f 	beq.w	8002028 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0310 	and.w	r3, r3, #16
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	f000 8087 	beq.w	8002028 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f1e:	2220      	movs	r2, #32
 8001f20:	409a      	lsls	r2, r3
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b05      	cmp	r3, #5
 8001f30:	d136      	bne.n	8001fa0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f022 0216 	bic.w	r2, r2, #22
 8001f40:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	695a      	ldr	r2, [r3, #20]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f50:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d103      	bne.n	8001f62 <HAL_DMA_IRQHandler+0x1da>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d007      	beq.n	8001f72 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f022 0208 	bic.w	r2, r2, #8
 8001f70:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f76:	223f      	movs	r2, #63	@ 0x3f
 8001f78:	409a      	lsls	r2, r3
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2201      	movs	r2, #1
 8001f82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d07e      	beq.n	8002094 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	4798      	blx	r3
        }
        return;
 8001f9e:	e079      	b.n	8002094 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d01d      	beq.n	8001fea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d10d      	bne.n	8001fd8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d031      	beq.n	8002028 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	4798      	blx	r3
 8001fcc:	e02c      	b.n	8002028 <HAL_DMA_IRQHandler+0x2a0>
 8001fce:	bf00      	nop
 8001fd0:	20000000 	.word	0x20000000
 8001fd4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d023      	beq.n	8002028 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	4798      	blx	r3
 8001fe8:	e01e      	b.n	8002028 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d10f      	bne.n	8002018 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f022 0210 	bic.w	r2, r2, #16
 8002006:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800201c:	2b00      	cmp	r3, #0
 800201e:	d003      	beq.n	8002028 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800202c:	2b00      	cmp	r3, #0
 800202e:	d032      	beq.n	8002096 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	2b00      	cmp	r3, #0
 800203a:	d022      	beq.n	8002082 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2205      	movs	r2, #5
 8002040:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f022 0201 	bic.w	r2, r2, #1
 8002052:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	3301      	adds	r3, #1
 8002058:	60bb      	str	r3, [r7, #8]
 800205a:	697a      	ldr	r2, [r7, #20]
 800205c:	429a      	cmp	r2, r3
 800205e:	d307      	bcc.n	8002070 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1f2      	bne.n	8002054 <HAL_DMA_IRQHandler+0x2cc>
 800206e:	e000      	b.n	8002072 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002070:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2201      	movs	r2, #1
 8002076:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002086:	2b00      	cmp	r3, #0
 8002088:	d005      	beq.n	8002096 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	4798      	blx	r3
 8002092:	e000      	b.n	8002096 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002094:	bf00      	nop
    }
  }
}
 8002096:	3718      	adds	r7, #24
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	3b10      	subs	r3, #16
 80020ac:	4a14      	ldr	r2, [pc, #80]	@ (8002100 <DMA_CalcBaseAndBitshift+0x64>)
 80020ae:	fba2 2303 	umull	r2, r3, r2, r3
 80020b2:	091b      	lsrs	r3, r3, #4
 80020b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80020b6:	4a13      	ldr	r2, [pc, #76]	@ (8002104 <DMA_CalcBaseAndBitshift+0x68>)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	4413      	add	r3, r2
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	461a      	mov	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2b03      	cmp	r3, #3
 80020c8:	d909      	bls.n	80020de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80020d2:	f023 0303 	bic.w	r3, r3, #3
 80020d6:	1d1a      	adds	r2, r3, #4
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	659a      	str	r2, [r3, #88]	@ 0x58
 80020dc:	e007      	b.n	80020ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80020e6:	f023 0303 	bic.w	r3, r3, #3
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3714      	adds	r7, #20
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	aaaaaaab 	.word	0xaaaaaaab
 8002104:	0800aa28 	.word	0x0800aa28

08002108 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002110:	2300      	movs	r3, #0
 8002112:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002118:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d11f      	bne.n	8002162 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	2b03      	cmp	r3, #3
 8002126:	d856      	bhi.n	80021d6 <DMA_CheckFifoParam+0xce>
 8002128:	a201      	add	r2, pc, #4	@ (adr r2, 8002130 <DMA_CheckFifoParam+0x28>)
 800212a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800212e:	bf00      	nop
 8002130:	08002141 	.word	0x08002141
 8002134:	08002153 	.word	0x08002153
 8002138:	08002141 	.word	0x08002141
 800213c:	080021d7 	.word	0x080021d7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002144:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d046      	beq.n	80021da <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002150:	e043      	b.n	80021da <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002156:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800215a:	d140      	bne.n	80021de <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002160:	e03d      	b.n	80021de <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	699b      	ldr	r3, [r3, #24]
 8002166:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800216a:	d121      	bne.n	80021b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	2b03      	cmp	r3, #3
 8002170:	d837      	bhi.n	80021e2 <DMA_CheckFifoParam+0xda>
 8002172:	a201      	add	r2, pc, #4	@ (adr r2, 8002178 <DMA_CheckFifoParam+0x70>)
 8002174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002178:	08002189 	.word	0x08002189
 800217c:	0800218f 	.word	0x0800218f
 8002180:	08002189 	.word	0x08002189
 8002184:	080021a1 	.word	0x080021a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	73fb      	strb	r3, [r7, #15]
      break;
 800218c:	e030      	b.n	80021f0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002192:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d025      	beq.n	80021e6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800219e:	e022      	b.n	80021e6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021a4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80021a8:	d11f      	bne.n	80021ea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80021ae:	e01c      	b.n	80021ea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d903      	bls.n	80021be <DMA_CheckFifoParam+0xb6>
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	2b03      	cmp	r3, #3
 80021ba:	d003      	beq.n	80021c4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80021bc:	e018      	b.n	80021f0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	73fb      	strb	r3, [r7, #15]
      break;
 80021c2:	e015      	b.n	80021f0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d00e      	beq.n	80021ee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	73fb      	strb	r3, [r7, #15]
      break;
 80021d4:	e00b      	b.n	80021ee <DMA_CheckFifoParam+0xe6>
      break;
 80021d6:	bf00      	nop
 80021d8:	e00a      	b.n	80021f0 <DMA_CheckFifoParam+0xe8>
      break;
 80021da:	bf00      	nop
 80021dc:	e008      	b.n	80021f0 <DMA_CheckFifoParam+0xe8>
      break;
 80021de:	bf00      	nop
 80021e0:	e006      	b.n	80021f0 <DMA_CheckFifoParam+0xe8>
      break;
 80021e2:	bf00      	nop
 80021e4:	e004      	b.n	80021f0 <DMA_CheckFifoParam+0xe8>
      break;
 80021e6:	bf00      	nop
 80021e8:	e002      	b.n	80021f0 <DMA_CheckFifoParam+0xe8>
      break;   
 80021ea:	bf00      	nop
 80021ec:	e000      	b.n	80021f0 <DMA_CheckFifoParam+0xe8>
      break;
 80021ee:	bf00      	nop
    }
  } 
  
  return status; 
 80021f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3714      	adds	r7, #20
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop

08002200 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002200:	b480      	push	{r7}
 8002202:	b089      	sub	sp, #36	@ 0x24
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800220a:	2300      	movs	r3, #0
 800220c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800220e:	2300      	movs	r3, #0
 8002210:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002212:	2300      	movs	r3, #0
 8002214:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002216:	2300      	movs	r3, #0
 8002218:	61fb      	str	r3, [r7, #28]
 800221a:	e16b      	b.n	80024f4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800221c:	2201      	movs	r2, #1
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	697a      	ldr	r2, [r7, #20]
 800222c:	4013      	ands	r3, r2
 800222e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	429a      	cmp	r2, r3
 8002236:	f040 815a 	bne.w	80024ee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f003 0303 	and.w	r3, r3, #3
 8002242:	2b01      	cmp	r3, #1
 8002244:	d005      	beq.n	8002252 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800224e:	2b02      	cmp	r3, #2
 8002250:	d130      	bne.n	80022b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	2203      	movs	r2, #3
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	43db      	mvns	r3, r3
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	4013      	ands	r3, r2
 8002268:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	68da      	ldr	r2, [r3, #12]
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	4313      	orrs	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002288:	2201      	movs	r2, #1
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	43db      	mvns	r3, r3
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	4013      	ands	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	091b      	lsrs	r3, r3, #4
 800229e:	f003 0201 	and.w	r2, r3, #1
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f003 0303 	and.w	r3, r3, #3
 80022bc:	2b03      	cmp	r3, #3
 80022be:	d017      	beq.n	80022f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	2203      	movs	r2, #3
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	43db      	mvns	r3, r3
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	4013      	ands	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	689a      	ldr	r2, [r3, #8]
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	005b      	lsls	r3, r3, #1
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f003 0303 	and.w	r3, r3, #3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d123      	bne.n	8002344 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	08da      	lsrs	r2, r3, #3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	3208      	adds	r2, #8
 8002304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002308:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	f003 0307 	and.w	r3, r3, #7
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	220f      	movs	r2, #15
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	43db      	mvns	r3, r3
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	4013      	ands	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	691a      	ldr	r2, [r3, #16]
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	f003 0307 	and.w	r3, r3, #7
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	4313      	orrs	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	08da      	lsrs	r2, r3, #3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	3208      	adds	r2, #8
 800233e:	69b9      	ldr	r1, [r7, #24]
 8002340:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	2203      	movs	r2, #3
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	43db      	mvns	r3, r3
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	4013      	ands	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f003 0203 	and.w	r2, r3, #3
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	4313      	orrs	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002380:	2b00      	cmp	r3, #0
 8002382:	f000 80b4 	beq.w	80024ee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002386:	2300      	movs	r3, #0
 8002388:	60fb      	str	r3, [r7, #12]
 800238a:	4b60      	ldr	r3, [pc, #384]	@ (800250c <HAL_GPIO_Init+0x30c>)
 800238c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800238e:	4a5f      	ldr	r2, [pc, #380]	@ (800250c <HAL_GPIO_Init+0x30c>)
 8002390:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002394:	6453      	str	r3, [r2, #68]	@ 0x44
 8002396:	4b5d      	ldr	r3, [pc, #372]	@ (800250c <HAL_GPIO_Init+0x30c>)
 8002398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800239a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023a2:	4a5b      	ldr	r2, [pc, #364]	@ (8002510 <HAL_GPIO_Init+0x310>)
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	089b      	lsrs	r3, r3, #2
 80023a8:	3302      	adds	r3, #2
 80023aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	f003 0303 	and.w	r3, r3, #3
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	220f      	movs	r2, #15
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	43db      	mvns	r3, r3
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	4013      	ands	r3, r2
 80023c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a52      	ldr	r2, [pc, #328]	@ (8002514 <HAL_GPIO_Init+0x314>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d02b      	beq.n	8002426 <HAL_GPIO_Init+0x226>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a51      	ldr	r2, [pc, #324]	@ (8002518 <HAL_GPIO_Init+0x318>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d025      	beq.n	8002422 <HAL_GPIO_Init+0x222>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a50      	ldr	r2, [pc, #320]	@ (800251c <HAL_GPIO_Init+0x31c>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d01f      	beq.n	800241e <HAL_GPIO_Init+0x21e>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a4f      	ldr	r2, [pc, #316]	@ (8002520 <HAL_GPIO_Init+0x320>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d019      	beq.n	800241a <HAL_GPIO_Init+0x21a>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a4e      	ldr	r2, [pc, #312]	@ (8002524 <HAL_GPIO_Init+0x324>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d013      	beq.n	8002416 <HAL_GPIO_Init+0x216>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a4d      	ldr	r2, [pc, #308]	@ (8002528 <HAL_GPIO_Init+0x328>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d00d      	beq.n	8002412 <HAL_GPIO_Init+0x212>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a4c      	ldr	r2, [pc, #304]	@ (800252c <HAL_GPIO_Init+0x32c>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d007      	beq.n	800240e <HAL_GPIO_Init+0x20e>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a4b      	ldr	r2, [pc, #300]	@ (8002530 <HAL_GPIO_Init+0x330>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d101      	bne.n	800240a <HAL_GPIO_Init+0x20a>
 8002406:	2307      	movs	r3, #7
 8002408:	e00e      	b.n	8002428 <HAL_GPIO_Init+0x228>
 800240a:	2308      	movs	r3, #8
 800240c:	e00c      	b.n	8002428 <HAL_GPIO_Init+0x228>
 800240e:	2306      	movs	r3, #6
 8002410:	e00a      	b.n	8002428 <HAL_GPIO_Init+0x228>
 8002412:	2305      	movs	r3, #5
 8002414:	e008      	b.n	8002428 <HAL_GPIO_Init+0x228>
 8002416:	2304      	movs	r3, #4
 8002418:	e006      	b.n	8002428 <HAL_GPIO_Init+0x228>
 800241a:	2303      	movs	r3, #3
 800241c:	e004      	b.n	8002428 <HAL_GPIO_Init+0x228>
 800241e:	2302      	movs	r3, #2
 8002420:	e002      	b.n	8002428 <HAL_GPIO_Init+0x228>
 8002422:	2301      	movs	r3, #1
 8002424:	e000      	b.n	8002428 <HAL_GPIO_Init+0x228>
 8002426:	2300      	movs	r3, #0
 8002428:	69fa      	ldr	r2, [r7, #28]
 800242a:	f002 0203 	and.w	r2, r2, #3
 800242e:	0092      	lsls	r2, r2, #2
 8002430:	4093      	lsls	r3, r2
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	4313      	orrs	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002438:	4935      	ldr	r1, [pc, #212]	@ (8002510 <HAL_GPIO_Init+0x310>)
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	089b      	lsrs	r3, r3, #2
 800243e:	3302      	adds	r3, #2
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002446:	4b3b      	ldr	r3, [pc, #236]	@ (8002534 <HAL_GPIO_Init+0x334>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	43db      	mvns	r3, r3
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	4013      	ands	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	4313      	orrs	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800246a:	4a32      	ldr	r2, [pc, #200]	@ (8002534 <HAL_GPIO_Init+0x334>)
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002470:	4b30      	ldr	r3, [pc, #192]	@ (8002534 <HAL_GPIO_Init+0x334>)
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	43db      	mvns	r3, r3
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	4013      	ands	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d003      	beq.n	8002494 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	4313      	orrs	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002494:	4a27      	ldr	r2, [pc, #156]	@ (8002534 <HAL_GPIO_Init+0x334>)
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800249a:	4b26      	ldr	r3, [pc, #152]	@ (8002534 <HAL_GPIO_Init+0x334>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	43db      	mvns	r3, r3
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	4013      	ands	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d003      	beq.n	80024be <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024be:	4a1d      	ldr	r2, [pc, #116]	@ (8002534 <HAL_GPIO_Init+0x334>)
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002534 <HAL_GPIO_Init+0x334>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	43db      	mvns	r3, r3
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	4013      	ands	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d003      	beq.n	80024e8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024e8:	4a12      	ldr	r2, [pc, #72]	@ (8002534 <HAL_GPIO_Init+0x334>)
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	3301      	adds	r3, #1
 80024f2:	61fb      	str	r3, [r7, #28]
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	2b0f      	cmp	r3, #15
 80024f8:	f67f ae90 	bls.w	800221c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024fc:	bf00      	nop
 80024fe:	bf00      	nop
 8002500:	3724      	adds	r7, #36	@ 0x24
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	40023800 	.word	0x40023800
 8002510:	40013800 	.word	0x40013800
 8002514:	40020000 	.word	0x40020000
 8002518:	40020400 	.word	0x40020400
 800251c:	40020800 	.word	0x40020800
 8002520:	40020c00 	.word	0x40020c00
 8002524:	40021000 	.word	0x40021000
 8002528:	40021400 	.word	0x40021400
 800252c:	40021800 	.word	0x40021800
 8002530:	40021c00 	.word	0x40021c00
 8002534:	40013c00 	.word	0x40013c00

08002538 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	460b      	mov	r3, r1
 8002542:	807b      	strh	r3, [r7, #2]
 8002544:	4613      	mov	r3, r2
 8002546:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002548:	787b      	ldrb	r3, [r7, #1]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d003      	beq.n	8002556 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800254e:	887a      	ldrh	r2, [r7, #2]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002554:	e003      	b.n	800255e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002556:	887b      	ldrh	r3, [r7, #2]
 8002558:	041a      	lsls	r2, r3, #16
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	619a      	str	r2, [r3, #24]
}
 800255e:	bf00      	nop
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr

0800256a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b086      	sub	sp, #24
 800256e:	af02      	add	r7, sp, #8
 8002570:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d101      	bne.n	800257c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e059      	b.n	8002630 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d106      	bne.n	800259c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f007 fe34 	bl	800a204 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2203      	movs	r2, #3
 80025a0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025aa:	d102      	bne.n	80025b2 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f004 fc41 	bl	8006e3e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6818      	ldr	r0, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	7c1a      	ldrb	r2, [r3, #16]
 80025c4:	f88d 2000 	strb.w	r2, [sp]
 80025c8:	3304      	adds	r3, #4
 80025ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025cc:	f004 fbc2 	bl	8006d54 <USB_CoreInit>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d005      	beq.n	80025e2 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2202      	movs	r2, #2
 80025da:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e026      	b.n	8002630 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2101      	movs	r1, #1
 80025e8:	4618      	mov	r0, r3
 80025ea:	f004 fc39 	bl	8006e60 <USB_SetCurrentMode>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d005      	beq.n	8002600 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2202      	movs	r2, #2
 80025f8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e017      	b.n	8002630 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6818      	ldr	r0, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	7c1a      	ldrb	r2, [r3, #16]
 8002608:	f88d 2000 	strb.w	r2, [sp]
 800260c:	3304      	adds	r3, #4
 800260e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002610:	f004 fde2 	bl	80071d8 <USB_HostInit>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d005      	beq.n	8002626 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2202      	movs	r2, #2
 800261e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e004      	b.n	8002630 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2201      	movs	r2, #1
 800262a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	3710      	adds	r7, #16
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002638:	b590      	push	{r4, r7, lr}
 800263a:	b08b      	sub	sp, #44	@ 0x2c
 800263c:	af04      	add	r7, sp, #16
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	4608      	mov	r0, r1
 8002642:	4611      	mov	r1, r2
 8002644:	461a      	mov	r2, r3
 8002646:	4603      	mov	r3, r0
 8002648:	70fb      	strb	r3, [r7, #3]
 800264a:	460b      	mov	r3, r1
 800264c:	70bb      	strb	r3, [r7, #2]
 800264e:	4613      	mov	r3, r2
 8002650:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8002652:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002654:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800265c:	2b01      	cmp	r3, #1
 800265e:	d101      	bne.n	8002664 <HAL_HCD_HC_Init+0x2c>
 8002660:	2302      	movs	r3, #2
 8002662:	e09d      	b.n	80027a0 <HAL_HCD_HC_Init+0x168>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 800266c:	78fa      	ldrb	r2, [r7, #3]
 800266e:	6879      	ldr	r1, [r7, #4]
 8002670:	4613      	mov	r3, r2
 8002672:	011b      	lsls	r3, r3, #4
 8002674:	1a9b      	subs	r3, r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	440b      	add	r3, r1
 800267a:	3319      	adds	r3, #25
 800267c:	2200      	movs	r2, #0
 800267e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002680:	78fa      	ldrb	r2, [r7, #3]
 8002682:	6879      	ldr	r1, [r7, #4]
 8002684:	4613      	mov	r3, r2
 8002686:	011b      	lsls	r3, r3, #4
 8002688:	1a9b      	subs	r3, r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	440b      	add	r3, r1
 800268e:	3314      	adds	r3, #20
 8002690:	787a      	ldrb	r2, [r7, #1]
 8002692:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002694:	78fa      	ldrb	r2, [r7, #3]
 8002696:	6879      	ldr	r1, [r7, #4]
 8002698:	4613      	mov	r3, r2
 800269a:	011b      	lsls	r3, r3, #4
 800269c:	1a9b      	subs	r3, r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	440b      	add	r3, r1
 80026a2:	3315      	adds	r3, #21
 80026a4:	78fa      	ldrb	r2, [r7, #3]
 80026a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80026a8:	78fa      	ldrb	r2, [r7, #3]
 80026aa:	6879      	ldr	r1, [r7, #4]
 80026ac:	4613      	mov	r3, r2
 80026ae:	011b      	lsls	r3, r3, #4
 80026b0:	1a9b      	subs	r3, r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	440b      	add	r3, r1
 80026b6:	3326      	adds	r3, #38	@ 0x26
 80026b8:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80026bc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80026be:	78fa      	ldrb	r2, [r7, #3]
 80026c0:	78bb      	ldrb	r3, [r7, #2]
 80026c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80026c6:	b2d8      	uxtb	r0, r3
 80026c8:	6879      	ldr	r1, [r7, #4]
 80026ca:	4613      	mov	r3, r2
 80026cc:	011b      	lsls	r3, r3, #4
 80026ce:	1a9b      	subs	r3, r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	440b      	add	r3, r1
 80026d4:	3316      	adds	r3, #22
 80026d6:	4602      	mov	r2, r0
 80026d8:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80026da:	78fb      	ldrb	r3, [r7, #3]
 80026dc:	4619      	mov	r1, r3
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 fbc8 	bl	8002e74 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80026e4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	da0a      	bge.n	8002702 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80026ec:	78fa      	ldrb	r2, [r7, #3]
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	4613      	mov	r3, r2
 80026f2:	011b      	lsls	r3, r3, #4
 80026f4:	1a9b      	subs	r3, r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	440b      	add	r3, r1
 80026fa:	3317      	adds	r3, #23
 80026fc:	2201      	movs	r2, #1
 80026fe:	701a      	strb	r2, [r3, #0]
 8002700:	e009      	b.n	8002716 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002702:	78fa      	ldrb	r2, [r7, #3]
 8002704:	6879      	ldr	r1, [r7, #4]
 8002706:	4613      	mov	r3, r2
 8002708:	011b      	lsls	r3, r3, #4
 800270a:	1a9b      	subs	r3, r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	440b      	add	r3, r1
 8002710:	3317      	adds	r3, #23
 8002712:	2200      	movs	r2, #0
 8002714:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f004 fec0 	bl	80074a0 <USB_GetHostSpeed>
 8002720:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8002722:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002726:	2b01      	cmp	r3, #1
 8002728:	d10b      	bne.n	8002742 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800272a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800272e:	2b01      	cmp	r3, #1
 8002730:	d107      	bne.n	8002742 <HAL_HCD_HC_Init+0x10a>
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d104      	bne.n	8002742 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	2bbc      	cmp	r3, #188	@ 0xbc
 800273c:	d901      	bls.n	8002742 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800273e:	23bc      	movs	r3, #188	@ 0xbc
 8002740:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8002742:	78fa      	ldrb	r2, [r7, #3]
 8002744:	6879      	ldr	r1, [r7, #4]
 8002746:	4613      	mov	r3, r2
 8002748:	011b      	lsls	r3, r3, #4
 800274a:	1a9b      	subs	r3, r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	440b      	add	r3, r1
 8002750:	3318      	adds	r3, #24
 8002752:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002756:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002758:	78fa      	ldrb	r2, [r7, #3]
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	b298      	uxth	r0, r3
 800275e:	6879      	ldr	r1, [r7, #4]
 8002760:	4613      	mov	r3, r2
 8002762:	011b      	lsls	r3, r3, #4
 8002764:	1a9b      	subs	r3, r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	440b      	add	r3, r1
 800276a:	3328      	adds	r3, #40	@ 0x28
 800276c:	4602      	mov	r2, r0
 800276e:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6818      	ldr	r0, [r3, #0]
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	b29b      	uxth	r3, r3
 8002778:	787c      	ldrb	r4, [r7, #1]
 800277a:	78ba      	ldrb	r2, [r7, #2]
 800277c:	78f9      	ldrb	r1, [r7, #3]
 800277e:	9302      	str	r3, [sp, #8]
 8002780:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002784:	9301      	str	r3, [sp, #4]
 8002786:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800278a:	9300      	str	r3, [sp, #0]
 800278c:	4623      	mov	r3, r4
 800278e:	f004 feaf 	bl	80074f0 <USB_HC_Init>
 8002792:	4603      	mov	r3, r0
 8002794:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800279e:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	371c      	adds	r7, #28
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd90      	pop	{r4, r7, pc}

080027a8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	460b      	mov	r3, r1
 80027b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80027b4:	2300      	movs	r3, #0
 80027b6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d101      	bne.n	80027c6 <HAL_HCD_HC_Halt+0x1e>
 80027c2:	2302      	movs	r3, #2
 80027c4:	e00f      	b.n	80027e6 <HAL_HCD_HC_Halt+0x3e>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2201      	movs	r2, #1
 80027ca:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	78fa      	ldrb	r2, [r7, #3]
 80027d4:	4611      	mov	r1, r2
 80027d6:	4618      	mov	r0, r3
 80027d8:	f005 fa41 	bl	8007c5e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80027e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
	...

080027f0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	4608      	mov	r0, r1
 80027fa:	4611      	mov	r1, r2
 80027fc:	461a      	mov	r2, r3
 80027fe:	4603      	mov	r3, r0
 8002800:	70fb      	strb	r3, [r7, #3]
 8002802:	460b      	mov	r3, r1
 8002804:	70bb      	strb	r3, [r7, #2]
 8002806:	4613      	mov	r3, r2
 8002808:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800280a:	78fa      	ldrb	r2, [r7, #3]
 800280c:	6879      	ldr	r1, [r7, #4]
 800280e:	4613      	mov	r3, r2
 8002810:	011b      	lsls	r3, r3, #4
 8002812:	1a9b      	subs	r3, r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	440b      	add	r3, r1
 8002818:	3317      	adds	r3, #23
 800281a:	78ba      	ldrb	r2, [r7, #2]
 800281c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800281e:	78fa      	ldrb	r2, [r7, #3]
 8002820:	6879      	ldr	r1, [r7, #4]
 8002822:	4613      	mov	r3, r2
 8002824:	011b      	lsls	r3, r3, #4
 8002826:	1a9b      	subs	r3, r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	440b      	add	r3, r1
 800282c:	3326      	adds	r3, #38	@ 0x26
 800282e:	787a      	ldrb	r2, [r7, #1]
 8002830:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002832:	7c3b      	ldrb	r3, [r7, #16]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d114      	bne.n	8002862 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002838:	78fa      	ldrb	r2, [r7, #3]
 800283a:	6879      	ldr	r1, [r7, #4]
 800283c:	4613      	mov	r3, r2
 800283e:	011b      	lsls	r3, r3, #4
 8002840:	1a9b      	subs	r3, r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	440b      	add	r3, r1
 8002846:	332a      	adds	r3, #42	@ 0x2a
 8002848:	2203      	movs	r2, #3
 800284a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800284c:	78fa      	ldrb	r2, [r7, #3]
 800284e:	6879      	ldr	r1, [r7, #4]
 8002850:	4613      	mov	r3, r2
 8002852:	011b      	lsls	r3, r3, #4
 8002854:	1a9b      	subs	r3, r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	440b      	add	r3, r1
 800285a:	3319      	adds	r3, #25
 800285c:	7f3a      	ldrb	r2, [r7, #28]
 800285e:	701a      	strb	r2, [r3, #0]
 8002860:	e009      	b.n	8002876 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002862:	78fa      	ldrb	r2, [r7, #3]
 8002864:	6879      	ldr	r1, [r7, #4]
 8002866:	4613      	mov	r3, r2
 8002868:	011b      	lsls	r3, r3, #4
 800286a:	1a9b      	subs	r3, r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	440b      	add	r3, r1
 8002870:	332a      	adds	r3, #42	@ 0x2a
 8002872:	2202      	movs	r2, #2
 8002874:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002876:	787b      	ldrb	r3, [r7, #1]
 8002878:	2b03      	cmp	r3, #3
 800287a:	f200 8102 	bhi.w	8002a82 <HAL_HCD_HC_SubmitRequest+0x292>
 800287e:	a201      	add	r2, pc, #4	@ (adr r2, 8002884 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002884:	08002895 	.word	0x08002895
 8002888:	08002a6d 	.word	0x08002a6d
 800288c:	08002959 	.word	0x08002959
 8002890:	080029e3 	.word	0x080029e3
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002894:	7c3b      	ldrb	r3, [r7, #16]
 8002896:	2b01      	cmp	r3, #1
 8002898:	f040 80f5 	bne.w	8002a86 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 800289c:	78bb      	ldrb	r3, [r7, #2]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d12d      	bne.n	80028fe <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80028a2:	8b3b      	ldrh	r3, [r7, #24]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d109      	bne.n	80028bc <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80028a8:	78fa      	ldrb	r2, [r7, #3]
 80028aa:	6879      	ldr	r1, [r7, #4]
 80028ac:	4613      	mov	r3, r2
 80028ae:	011b      	lsls	r3, r3, #4
 80028b0:	1a9b      	subs	r3, r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	440b      	add	r3, r1
 80028b6:	333d      	adds	r3, #61	@ 0x3d
 80028b8:	2201      	movs	r2, #1
 80028ba:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80028bc:	78fa      	ldrb	r2, [r7, #3]
 80028be:	6879      	ldr	r1, [r7, #4]
 80028c0:	4613      	mov	r3, r2
 80028c2:	011b      	lsls	r3, r3, #4
 80028c4:	1a9b      	subs	r3, r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	440b      	add	r3, r1
 80028ca:	333d      	adds	r3, #61	@ 0x3d
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d10a      	bne.n	80028e8 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80028d2:	78fa      	ldrb	r2, [r7, #3]
 80028d4:	6879      	ldr	r1, [r7, #4]
 80028d6:	4613      	mov	r3, r2
 80028d8:	011b      	lsls	r3, r3, #4
 80028da:	1a9b      	subs	r3, r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	440b      	add	r3, r1
 80028e0:	332a      	adds	r3, #42	@ 0x2a
 80028e2:	2200      	movs	r2, #0
 80028e4:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80028e6:	e0ce      	b.n	8002a86 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80028e8:	78fa      	ldrb	r2, [r7, #3]
 80028ea:	6879      	ldr	r1, [r7, #4]
 80028ec:	4613      	mov	r3, r2
 80028ee:	011b      	lsls	r3, r3, #4
 80028f0:	1a9b      	subs	r3, r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	440b      	add	r3, r1
 80028f6:	332a      	adds	r3, #42	@ 0x2a
 80028f8:	2202      	movs	r2, #2
 80028fa:	701a      	strb	r2, [r3, #0]
      break;
 80028fc:	e0c3      	b.n	8002a86 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80028fe:	78fa      	ldrb	r2, [r7, #3]
 8002900:	6879      	ldr	r1, [r7, #4]
 8002902:	4613      	mov	r3, r2
 8002904:	011b      	lsls	r3, r3, #4
 8002906:	1a9b      	subs	r3, r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	440b      	add	r3, r1
 800290c:	331a      	adds	r3, #26
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	2b01      	cmp	r3, #1
 8002912:	f040 80b8 	bne.w	8002a86 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8002916:	78fa      	ldrb	r2, [r7, #3]
 8002918:	6879      	ldr	r1, [r7, #4]
 800291a:	4613      	mov	r3, r2
 800291c:	011b      	lsls	r3, r3, #4
 800291e:	1a9b      	subs	r3, r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	440b      	add	r3, r1
 8002924:	333c      	adds	r3, #60	@ 0x3c
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d10a      	bne.n	8002942 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800292c:	78fa      	ldrb	r2, [r7, #3]
 800292e:	6879      	ldr	r1, [r7, #4]
 8002930:	4613      	mov	r3, r2
 8002932:	011b      	lsls	r3, r3, #4
 8002934:	1a9b      	subs	r3, r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	440b      	add	r3, r1
 800293a:	332a      	adds	r3, #42	@ 0x2a
 800293c:	2200      	movs	r2, #0
 800293e:	701a      	strb	r2, [r3, #0]
      break;
 8002940:	e0a1      	b.n	8002a86 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002942:	78fa      	ldrb	r2, [r7, #3]
 8002944:	6879      	ldr	r1, [r7, #4]
 8002946:	4613      	mov	r3, r2
 8002948:	011b      	lsls	r3, r3, #4
 800294a:	1a9b      	subs	r3, r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	440b      	add	r3, r1
 8002950:	332a      	adds	r3, #42	@ 0x2a
 8002952:	2202      	movs	r2, #2
 8002954:	701a      	strb	r2, [r3, #0]
      break;
 8002956:	e096      	b.n	8002a86 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002958:	78bb      	ldrb	r3, [r7, #2]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d120      	bne.n	80029a0 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800295e:	78fa      	ldrb	r2, [r7, #3]
 8002960:	6879      	ldr	r1, [r7, #4]
 8002962:	4613      	mov	r3, r2
 8002964:	011b      	lsls	r3, r3, #4
 8002966:	1a9b      	subs	r3, r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	440b      	add	r3, r1
 800296c:	333d      	adds	r3, #61	@ 0x3d
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d10a      	bne.n	800298a <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002974:	78fa      	ldrb	r2, [r7, #3]
 8002976:	6879      	ldr	r1, [r7, #4]
 8002978:	4613      	mov	r3, r2
 800297a:	011b      	lsls	r3, r3, #4
 800297c:	1a9b      	subs	r3, r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	440b      	add	r3, r1
 8002982:	332a      	adds	r3, #42	@ 0x2a
 8002984:	2200      	movs	r2, #0
 8002986:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002988:	e07e      	b.n	8002a88 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800298a:	78fa      	ldrb	r2, [r7, #3]
 800298c:	6879      	ldr	r1, [r7, #4]
 800298e:	4613      	mov	r3, r2
 8002990:	011b      	lsls	r3, r3, #4
 8002992:	1a9b      	subs	r3, r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	440b      	add	r3, r1
 8002998:	332a      	adds	r3, #42	@ 0x2a
 800299a:	2202      	movs	r2, #2
 800299c:	701a      	strb	r2, [r3, #0]
      break;
 800299e:	e073      	b.n	8002a88 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80029a0:	78fa      	ldrb	r2, [r7, #3]
 80029a2:	6879      	ldr	r1, [r7, #4]
 80029a4:	4613      	mov	r3, r2
 80029a6:	011b      	lsls	r3, r3, #4
 80029a8:	1a9b      	subs	r3, r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	440b      	add	r3, r1
 80029ae:	333c      	adds	r3, #60	@ 0x3c
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10a      	bne.n	80029cc <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80029b6:	78fa      	ldrb	r2, [r7, #3]
 80029b8:	6879      	ldr	r1, [r7, #4]
 80029ba:	4613      	mov	r3, r2
 80029bc:	011b      	lsls	r3, r3, #4
 80029be:	1a9b      	subs	r3, r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	440b      	add	r3, r1
 80029c4:	332a      	adds	r3, #42	@ 0x2a
 80029c6:	2200      	movs	r2, #0
 80029c8:	701a      	strb	r2, [r3, #0]
      break;
 80029ca:	e05d      	b.n	8002a88 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80029cc:	78fa      	ldrb	r2, [r7, #3]
 80029ce:	6879      	ldr	r1, [r7, #4]
 80029d0:	4613      	mov	r3, r2
 80029d2:	011b      	lsls	r3, r3, #4
 80029d4:	1a9b      	subs	r3, r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	440b      	add	r3, r1
 80029da:	332a      	adds	r3, #42	@ 0x2a
 80029dc:	2202      	movs	r2, #2
 80029de:	701a      	strb	r2, [r3, #0]
      break;
 80029e0:	e052      	b.n	8002a88 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80029e2:	78bb      	ldrb	r3, [r7, #2]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d120      	bne.n	8002a2a <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80029e8:	78fa      	ldrb	r2, [r7, #3]
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	4613      	mov	r3, r2
 80029ee:	011b      	lsls	r3, r3, #4
 80029f0:	1a9b      	subs	r3, r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	440b      	add	r3, r1
 80029f6:	333d      	adds	r3, #61	@ 0x3d
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10a      	bne.n	8002a14 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80029fe:	78fa      	ldrb	r2, [r7, #3]
 8002a00:	6879      	ldr	r1, [r7, #4]
 8002a02:	4613      	mov	r3, r2
 8002a04:	011b      	lsls	r3, r3, #4
 8002a06:	1a9b      	subs	r3, r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	440b      	add	r3, r1
 8002a0c:	332a      	adds	r3, #42	@ 0x2a
 8002a0e:	2200      	movs	r2, #0
 8002a10:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002a12:	e039      	b.n	8002a88 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a14:	78fa      	ldrb	r2, [r7, #3]
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	011b      	lsls	r3, r3, #4
 8002a1c:	1a9b      	subs	r3, r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	440b      	add	r3, r1
 8002a22:	332a      	adds	r3, #42	@ 0x2a
 8002a24:	2202      	movs	r2, #2
 8002a26:	701a      	strb	r2, [r3, #0]
      break;
 8002a28:	e02e      	b.n	8002a88 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002a2a:	78fa      	ldrb	r2, [r7, #3]
 8002a2c:	6879      	ldr	r1, [r7, #4]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	011b      	lsls	r3, r3, #4
 8002a32:	1a9b      	subs	r3, r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	440b      	add	r3, r1
 8002a38:	333c      	adds	r3, #60	@ 0x3c
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10a      	bne.n	8002a56 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a40:	78fa      	ldrb	r2, [r7, #3]
 8002a42:	6879      	ldr	r1, [r7, #4]
 8002a44:	4613      	mov	r3, r2
 8002a46:	011b      	lsls	r3, r3, #4
 8002a48:	1a9b      	subs	r3, r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	440b      	add	r3, r1
 8002a4e:	332a      	adds	r3, #42	@ 0x2a
 8002a50:	2200      	movs	r2, #0
 8002a52:	701a      	strb	r2, [r3, #0]
      break;
 8002a54:	e018      	b.n	8002a88 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a56:	78fa      	ldrb	r2, [r7, #3]
 8002a58:	6879      	ldr	r1, [r7, #4]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	011b      	lsls	r3, r3, #4
 8002a5e:	1a9b      	subs	r3, r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	440b      	add	r3, r1
 8002a64:	332a      	adds	r3, #42	@ 0x2a
 8002a66:	2202      	movs	r2, #2
 8002a68:	701a      	strb	r2, [r3, #0]
      break;
 8002a6a:	e00d      	b.n	8002a88 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a6c:	78fa      	ldrb	r2, [r7, #3]
 8002a6e:	6879      	ldr	r1, [r7, #4]
 8002a70:	4613      	mov	r3, r2
 8002a72:	011b      	lsls	r3, r3, #4
 8002a74:	1a9b      	subs	r3, r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	440b      	add	r3, r1
 8002a7a:	332a      	adds	r3, #42	@ 0x2a
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	701a      	strb	r2, [r3, #0]
      break;
 8002a80:	e002      	b.n	8002a88 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8002a82:	bf00      	nop
 8002a84:	e000      	b.n	8002a88 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8002a86:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002a88:	78fa      	ldrb	r2, [r7, #3]
 8002a8a:	6879      	ldr	r1, [r7, #4]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	011b      	lsls	r3, r3, #4
 8002a90:	1a9b      	subs	r3, r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	440b      	add	r3, r1
 8002a96:	332c      	adds	r3, #44	@ 0x2c
 8002a98:	697a      	ldr	r2, [r7, #20]
 8002a9a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002a9c:	78fa      	ldrb	r2, [r7, #3]
 8002a9e:	8b39      	ldrh	r1, [r7, #24]
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	011b      	lsls	r3, r3, #4
 8002aa6:	1a9b      	subs	r3, r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	4403      	add	r3, r0
 8002aac:	3334      	adds	r3, #52	@ 0x34
 8002aae:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002ab0:	78fa      	ldrb	r2, [r7, #3]
 8002ab2:	6879      	ldr	r1, [r7, #4]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	011b      	lsls	r3, r3, #4
 8002ab8:	1a9b      	subs	r3, r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	440b      	add	r3, r1
 8002abe:	334c      	adds	r3, #76	@ 0x4c
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002ac4:	78fa      	ldrb	r2, [r7, #3]
 8002ac6:	6879      	ldr	r1, [r7, #4]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	011b      	lsls	r3, r3, #4
 8002acc:	1a9b      	subs	r3, r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	440b      	add	r3, r1
 8002ad2:	3338      	adds	r3, #56	@ 0x38
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002ad8:	78fa      	ldrb	r2, [r7, #3]
 8002ada:	6879      	ldr	r1, [r7, #4]
 8002adc:	4613      	mov	r3, r2
 8002ade:	011b      	lsls	r3, r3, #4
 8002ae0:	1a9b      	subs	r3, r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	440b      	add	r3, r1
 8002ae6:	3315      	adds	r3, #21
 8002ae8:	78fa      	ldrb	r2, [r7, #3]
 8002aea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002aec:	78fa      	ldrb	r2, [r7, #3]
 8002aee:	6879      	ldr	r1, [r7, #4]
 8002af0:	4613      	mov	r3, r2
 8002af2:	011b      	lsls	r3, r3, #4
 8002af4:	1a9b      	subs	r3, r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	440b      	add	r3, r1
 8002afa:	334d      	adds	r3, #77	@ 0x4d
 8002afc:	2200      	movs	r2, #0
 8002afe:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6818      	ldr	r0, [r3, #0]
 8002b04:	78fa      	ldrb	r2, [r7, #3]
 8002b06:	4613      	mov	r3, r2
 8002b08:	011b      	lsls	r3, r3, #4
 8002b0a:	1a9b      	subs	r3, r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	3310      	adds	r3, #16
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	4413      	add	r3, r2
 8002b14:	1d19      	adds	r1, r3, #4
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	799b      	ldrb	r3, [r3, #6]
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	f004 fe14 	bl	8007748 <USB_HC_StartXfer>
 8002b20:	4603      	mov	r3, r0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3708      	adds	r7, #8
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop

08002b2c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b086      	sub	sp, #24
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f004 fb02 	bl	800714c <USB_GetMode>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	f040 80fb 	bne.w	8002d46 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f004 fac5 	bl	80070e4 <USB_ReadInterrupts>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	f000 80f1 	beq.w	8002d44 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f004 fabc 	bl	80070e4 <USB_ReadInterrupts>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b72:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002b76:	d104      	bne.n	8002b82 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002b80:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f004 faac 	bl	80070e4 <USB_ReadInterrupts>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b96:	d104      	bne.n	8002ba2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002ba0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f004 fa9c 	bl	80070e4 <USB_ReadInterrupts>
 8002bac:	4603      	mov	r3, r0
 8002bae:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002bb2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002bb6:	d104      	bne.n	8002bc2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002bc0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f004 fa8c 	bl	80070e4 <USB_ReadInterrupts>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d103      	bne.n	8002bde <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2202      	movs	r2, #2
 8002bdc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f004 fa7e 	bl	80070e4 <USB_ReadInterrupts>
 8002be8:	4603      	mov	r3, r0
 8002bea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002bee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002bf2:	d120      	bne.n	8002c36 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002bfc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d113      	bne.n	8002c36 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002c0e:	2110      	movs	r1, #16
 8002c10:	6938      	ldr	r0, [r7, #16]
 8002c12:	f004 f971 	bl	8006ef8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002c16:	6938      	ldr	r0, [r7, #16]
 8002c18:	f004 f9a0 	bl	8006f5c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	7a5b      	ldrb	r3, [r3, #9]
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d105      	bne.n	8002c30 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2101      	movs	r1, #1
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f004 fb98 	bl	8007360 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f007 fb65 	bl	800a300 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f004 fa52 	bl	80070e4 <USB_ReadInterrupts>
 8002c40:	4603      	mov	r3, r0
 8002c42:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c46:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c4a:	d102      	bne.n	8002c52 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f001 fd4d 	bl	80046ec <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f004 fa44 	bl	80070e4 <USB_ReadInterrupts>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	f003 0308 	and.w	r3, r3, #8
 8002c62:	2b08      	cmp	r3, #8
 8002c64:	d106      	bne.n	8002c74 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f007 fb2e 	bl	800a2c8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2208      	movs	r2, #8
 8002c72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f004 fa33 	bl	80070e4 <USB_ReadInterrupts>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c84:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002c88:	d139      	bne.n	8002cfe <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f004 ffd4 	bl	8007c3c <USB_HC_ReadInterrupt>
 8002c94:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002c96:	2300      	movs	r3, #0
 8002c98:	617b      	str	r3, [r7, #20]
 8002c9a:	e025      	b.n	8002ce8 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	f003 030f 	and.w	r3, r3, #15
 8002ca2:	68ba      	ldr	r2, [r7, #8]
 8002ca4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d018      	beq.n	8002ce2 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	015a      	lsls	r2, r3, #5
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002cc2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cc6:	d106      	bne.n	8002cd6 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	4619      	mov	r1, r3
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 f905 	bl	8002ede <HCD_HC_IN_IRQHandler>
 8002cd4:	e005      	b.n	8002ce2 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	4619      	mov	r1, r3
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f000 ff67 	bl	8003bb0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	617b      	str	r3, [r7, #20]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	795b      	ldrb	r3, [r3, #5]
 8002cec:	461a      	mov	r2, r3
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d3d3      	bcc.n	8002c9c <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002cfc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f004 f9ee 	bl	80070e4 <USB_ReadInterrupts>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	f003 0310 	and.w	r3, r3, #16
 8002d0e:	2b10      	cmp	r3, #16
 8002d10:	d101      	bne.n	8002d16 <HAL_HCD_IRQHandler+0x1ea>
 8002d12:	2301      	movs	r3, #1
 8002d14:	e000      	b.n	8002d18 <HAL_HCD_IRQHandler+0x1ec>
 8002d16:	2300      	movs	r3, #0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d014      	beq.n	8002d46 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	699a      	ldr	r2, [r3, #24]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f022 0210 	bic.w	r2, r2, #16
 8002d2a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f001 fbfe 	bl	800452e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	699a      	ldr	r2, [r3, #24]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f042 0210 	orr.w	r2, r2, #16
 8002d40:	619a      	str	r2, [r3, #24]
 8002d42:	e000      	b.n	8002d46 <HAL_HCD_IRQHandler+0x21a>
      return;
 8002d44:	bf00      	nop
    }
  }
}
 8002d46:	3718      	adds	r7, #24
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d101      	bne.n	8002d62 <HAL_HCD_Start+0x16>
 8002d5e:	2302      	movs	r3, #2
 8002d60:	e013      	b.n	8002d8a <HAL_HCD_Start+0x3e>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2101      	movs	r1, #1
 8002d70:	4618      	mov	r0, r3
 8002d72:	f004 fb5c 	bl	800742e <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f004 f84e 	bl	8006e1c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b082      	sub	sp, #8
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d101      	bne.n	8002da8 <HAL_HCD_Stop+0x16>
 8002da4:	2302      	movs	r3, #2
 8002da6:	e00d      	b.n	8002dc4 <HAL_HCD_Stop+0x32>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f005 f8af 	bl	8007f18 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3708      	adds	r7, #8
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f004 fafe 	bl	80073da <USB_ResetPort>
 8002dde:	4603      	mov	r3, r0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3708      	adds	r7, #8
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	460b      	mov	r3, r1
 8002df2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002df4:	78fa      	ldrb	r2, [r7, #3]
 8002df6:	6879      	ldr	r1, [r7, #4]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	011b      	lsls	r3, r3, #4
 8002dfc:	1a9b      	subs	r3, r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	440b      	add	r3, r1
 8002e02:	334c      	adds	r3, #76	@ 0x4c
 8002e04:	781b      	ldrb	r3, [r3, #0]
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr

08002e12 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002e12:	b480      	push	{r7}
 8002e14:	b083      	sub	sp, #12
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002e1e:	78fa      	ldrb	r2, [r7, #3]
 8002e20:	6879      	ldr	r1, [r7, #4]
 8002e22:	4613      	mov	r3, r2
 8002e24:	011b      	lsls	r3, r3, #4
 8002e26:	1a9b      	subs	r3, r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	440b      	add	r3, r1
 8002e2c:	3338      	adds	r3, #56	@ 0x38
 8002e2e:	681b      	ldr	r3, [r3, #0]
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f004 fb40 	bl	80074ce <USB_GetCurrentFrame>
 8002e4e:	4603      	mov	r3, r0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3708      	adds	r7, #8
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f004 fb1b 	bl	80074a0 <USB_GetHostSpeed>
 8002e6a:	4603      	mov	r3, r0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3708      	adds	r7, #8
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002e80:	78fa      	ldrb	r2, [r7, #3]
 8002e82:	6879      	ldr	r1, [r7, #4]
 8002e84:	4613      	mov	r3, r2
 8002e86:	011b      	lsls	r3, r3, #4
 8002e88:	1a9b      	subs	r3, r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	440b      	add	r3, r1
 8002e8e:	331a      	adds	r3, #26
 8002e90:	2200      	movs	r2, #0
 8002e92:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002e94:	78fa      	ldrb	r2, [r7, #3]
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	011b      	lsls	r3, r3, #4
 8002e9c:	1a9b      	subs	r3, r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	440b      	add	r3, r1
 8002ea2:	331b      	adds	r3, #27
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002ea8:	78fa      	ldrb	r2, [r7, #3]
 8002eaa:	6879      	ldr	r1, [r7, #4]
 8002eac:	4613      	mov	r3, r2
 8002eae:	011b      	lsls	r3, r3, #4
 8002eb0:	1a9b      	subs	r3, r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	440b      	add	r3, r1
 8002eb6:	3325      	adds	r3, #37	@ 0x25
 8002eb8:	2200      	movs	r2, #0
 8002eba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002ebc:	78fa      	ldrb	r2, [r7, #3]
 8002ebe:	6879      	ldr	r1, [r7, #4]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	011b      	lsls	r3, r3, #4
 8002ec4:	1a9b      	subs	r3, r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	440b      	add	r3, r1
 8002eca:	3324      	adds	r3, #36	@ 0x24
 8002ecc:	2200      	movs	r2, #0
 8002ece:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr

08002ede <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b086      	sub	sp, #24
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	78fa      	ldrb	r2, [r7, #3]
 8002efa:	4611      	mov	r1, r2
 8002efc:	4618      	mov	r0, r3
 8002efe:	f004 f904 	bl	800710a <USB_ReadChInterrupts>
 8002f02:	4603      	mov	r3, r0
 8002f04:	f003 0304 	and.w	r3, r3, #4
 8002f08:	2b04      	cmp	r3, #4
 8002f0a:	d11a      	bne.n	8002f42 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002f0c:	78fb      	ldrb	r3, [r7, #3]
 8002f0e:	015a      	lsls	r2, r3, #5
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	4413      	add	r3, r2
 8002f14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f18:	461a      	mov	r2, r3
 8002f1a:	2304      	movs	r3, #4
 8002f1c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002f1e:	78fa      	ldrb	r2, [r7, #3]
 8002f20:	6879      	ldr	r1, [r7, #4]
 8002f22:	4613      	mov	r3, r2
 8002f24:	011b      	lsls	r3, r3, #4
 8002f26:	1a9b      	subs	r3, r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	440b      	add	r3, r1
 8002f2c:	334d      	adds	r3, #77	@ 0x4d
 8002f2e:	2207      	movs	r2, #7
 8002f30:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	78fa      	ldrb	r2, [r7, #3]
 8002f38:	4611      	mov	r1, r2
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f004 fe8f 	bl	8007c5e <USB_HC_Halt>
 8002f40:	e09e      	b.n	8003080 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	78fa      	ldrb	r2, [r7, #3]
 8002f48:	4611      	mov	r1, r2
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f004 f8dd 	bl	800710a <USB_ReadChInterrupts>
 8002f50:	4603      	mov	r3, r0
 8002f52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f5a:	d11b      	bne.n	8002f94 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002f5c:	78fb      	ldrb	r3, [r7, #3]
 8002f5e:	015a      	lsls	r2, r3, #5
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	4413      	add	r3, r2
 8002f64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f68:	461a      	mov	r2, r3
 8002f6a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f6e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002f70:	78fa      	ldrb	r2, [r7, #3]
 8002f72:	6879      	ldr	r1, [r7, #4]
 8002f74:	4613      	mov	r3, r2
 8002f76:	011b      	lsls	r3, r3, #4
 8002f78:	1a9b      	subs	r3, r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	440b      	add	r3, r1
 8002f7e:	334d      	adds	r3, #77	@ 0x4d
 8002f80:	2208      	movs	r2, #8
 8002f82:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	78fa      	ldrb	r2, [r7, #3]
 8002f8a:	4611      	mov	r1, r2
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f004 fe66 	bl	8007c5e <USB_HC_Halt>
 8002f92:	e075      	b.n	8003080 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	78fa      	ldrb	r2, [r7, #3]
 8002f9a:	4611      	mov	r1, r2
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f004 f8b4 	bl	800710a <USB_ReadChInterrupts>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	f003 0308 	and.w	r3, r3, #8
 8002fa8:	2b08      	cmp	r3, #8
 8002faa:	d11a      	bne.n	8002fe2 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002fac:	78fb      	ldrb	r3, [r7, #3]
 8002fae:	015a      	lsls	r2, r3, #5
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fb8:	461a      	mov	r2, r3
 8002fba:	2308      	movs	r3, #8
 8002fbc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002fbe:	78fa      	ldrb	r2, [r7, #3]
 8002fc0:	6879      	ldr	r1, [r7, #4]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	011b      	lsls	r3, r3, #4
 8002fc6:	1a9b      	subs	r3, r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	440b      	add	r3, r1
 8002fcc:	334d      	adds	r3, #77	@ 0x4d
 8002fce:	2206      	movs	r2, #6
 8002fd0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	78fa      	ldrb	r2, [r7, #3]
 8002fd8:	4611      	mov	r1, r2
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f004 fe3f 	bl	8007c5e <USB_HC_Halt>
 8002fe0:	e04e      	b.n	8003080 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	78fa      	ldrb	r2, [r7, #3]
 8002fe8:	4611      	mov	r1, r2
 8002fea:	4618      	mov	r0, r3
 8002fec:	f004 f88d 	bl	800710a <USB_ReadChInterrupts>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ff6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ffa:	d11b      	bne.n	8003034 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002ffc:	78fb      	ldrb	r3, [r7, #3]
 8002ffe:	015a      	lsls	r2, r3, #5
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	4413      	add	r3, r2
 8003004:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003008:	461a      	mov	r2, r3
 800300a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800300e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003010:	78fa      	ldrb	r2, [r7, #3]
 8003012:	6879      	ldr	r1, [r7, #4]
 8003014:	4613      	mov	r3, r2
 8003016:	011b      	lsls	r3, r3, #4
 8003018:	1a9b      	subs	r3, r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	440b      	add	r3, r1
 800301e:	334d      	adds	r3, #77	@ 0x4d
 8003020:	2209      	movs	r2, #9
 8003022:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	78fa      	ldrb	r2, [r7, #3]
 800302a:	4611      	mov	r1, r2
 800302c:	4618      	mov	r0, r3
 800302e:	f004 fe16 	bl	8007c5e <USB_HC_Halt>
 8003032:	e025      	b.n	8003080 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	78fa      	ldrb	r2, [r7, #3]
 800303a:	4611      	mov	r1, r2
 800303c:	4618      	mov	r0, r3
 800303e:	f004 f864 	bl	800710a <USB_ReadChInterrupts>
 8003042:	4603      	mov	r3, r0
 8003044:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003048:	2b80      	cmp	r3, #128	@ 0x80
 800304a:	d119      	bne.n	8003080 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800304c:	78fb      	ldrb	r3, [r7, #3]
 800304e:	015a      	lsls	r2, r3, #5
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	4413      	add	r3, r2
 8003054:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003058:	461a      	mov	r2, r3
 800305a:	2380      	movs	r3, #128	@ 0x80
 800305c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800305e:	78fa      	ldrb	r2, [r7, #3]
 8003060:	6879      	ldr	r1, [r7, #4]
 8003062:	4613      	mov	r3, r2
 8003064:	011b      	lsls	r3, r3, #4
 8003066:	1a9b      	subs	r3, r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	440b      	add	r3, r1
 800306c:	334d      	adds	r3, #77	@ 0x4d
 800306e:	2207      	movs	r2, #7
 8003070:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	78fa      	ldrb	r2, [r7, #3]
 8003078:	4611      	mov	r1, r2
 800307a:	4618      	mov	r0, r3
 800307c:	f004 fdef 	bl	8007c5e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	78fa      	ldrb	r2, [r7, #3]
 8003086:	4611      	mov	r1, r2
 8003088:	4618      	mov	r0, r3
 800308a:	f004 f83e 	bl	800710a <USB_ReadChInterrupts>
 800308e:	4603      	mov	r3, r0
 8003090:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003094:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003098:	d112      	bne.n	80030c0 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	78fa      	ldrb	r2, [r7, #3]
 80030a0:	4611      	mov	r1, r2
 80030a2:	4618      	mov	r0, r3
 80030a4:	f004 fddb 	bl	8007c5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80030a8:	78fb      	ldrb	r3, [r7, #3]
 80030aa:	015a      	lsls	r2, r3, #5
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	4413      	add	r3, r2
 80030b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030b4:	461a      	mov	r2, r3
 80030b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80030ba:	6093      	str	r3, [r2, #8]
 80030bc:	f000 bd75 	b.w	8003baa <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	78fa      	ldrb	r2, [r7, #3]
 80030c6:	4611      	mov	r1, r2
 80030c8:	4618      	mov	r0, r3
 80030ca:	f004 f81e 	bl	800710a <USB_ReadChInterrupts>
 80030ce:	4603      	mov	r3, r0
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	f040 8128 	bne.w	800332a <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80030da:	78fb      	ldrb	r3, [r7, #3]
 80030dc:	015a      	lsls	r2, r3, #5
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	4413      	add	r3, r2
 80030e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030e6:	461a      	mov	r2, r3
 80030e8:	2320      	movs	r3, #32
 80030ea:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80030ec:	78fa      	ldrb	r2, [r7, #3]
 80030ee:	6879      	ldr	r1, [r7, #4]
 80030f0:	4613      	mov	r3, r2
 80030f2:	011b      	lsls	r3, r3, #4
 80030f4:	1a9b      	subs	r3, r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	440b      	add	r3, r1
 80030fa:	331b      	adds	r3, #27
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d119      	bne.n	8003136 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003102:	78fa      	ldrb	r2, [r7, #3]
 8003104:	6879      	ldr	r1, [r7, #4]
 8003106:	4613      	mov	r3, r2
 8003108:	011b      	lsls	r3, r3, #4
 800310a:	1a9b      	subs	r3, r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	440b      	add	r3, r1
 8003110:	331b      	adds	r3, #27
 8003112:	2200      	movs	r2, #0
 8003114:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003116:	78fb      	ldrb	r3, [r7, #3]
 8003118:	015a      	lsls	r2, r3, #5
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	4413      	add	r3, r2
 800311e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	78fa      	ldrb	r2, [r7, #3]
 8003126:	0151      	lsls	r1, r2, #5
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	440a      	add	r2, r1
 800312c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003130:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003134:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	799b      	ldrb	r3, [r3, #6]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d01b      	beq.n	8003176 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800313e:	78fa      	ldrb	r2, [r7, #3]
 8003140:	6879      	ldr	r1, [r7, #4]
 8003142:	4613      	mov	r3, r2
 8003144:	011b      	lsls	r3, r3, #4
 8003146:	1a9b      	subs	r3, r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	440b      	add	r3, r1
 800314c:	3330      	adds	r3, #48	@ 0x30
 800314e:	6819      	ldr	r1, [r3, #0]
 8003150:	78fb      	ldrb	r3, [r7, #3]
 8003152:	015a      	lsls	r2, r3, #5
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	4413      	add	r3, r2
 8003158:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003162:	78fa      	ldrb	r2, [r7, #3]
 8003164:	1ac9      	subs	r1, r1, r3
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	4613      	mov	r3, r2
 800316a:	011b      	lsls	r3, r3, #4
 800316c:	1a9b      	subs	r3, r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4403      	add	r3, r0
 8003172:	3338      	adds	r3, #56	@ 0x38
 8003174:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8003176:	78fa      	ldrb	r2, [r7, #3]
 8003178:	6879      	ldr	r1, [r7, #4]
 800317a:	4613      	mov	r3, r2
 800317c:	011b      	lsls	r3, r3, #4
 800317e:	1a9b      	subs	r3, r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	440b      	add	r3, r1
 8003184:	334d      	adds	r3, #77	@ 0x4d
 8003186:	2201      	movs	r2, #1
 8003188:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800318a:	78fa      	ldrb	r2, [r7, #3]
 800318c:	6879      	ldr	r1, [r7, #4]
 800318e:	4613      	mov	r3, r2
 8003190:	011b      	lsls	r3, r3, #4
 8003192:	1a9b      	subs	r3, r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	440b      	add	r3, r1
 8003198:	3344      	adds	r3, #68	@ 0x44
 800319a:	2200      	movs	r2, #0
 800319c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800319e:	78fb      	ldrb	r3, [r7, #3]
 80031a0:	015a      	lsls	r2, r3, #5
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	4413      	add	r3, r2
 80031a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031aa:	461a      	mov	r2, r3
 80031ac:	2301      	movs	r3, #1
 80031ae:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80031b0:	78fa      	ldrb	r2, [r7, #3]
 80031b2:	6879      	ldr	r1, [r7, #4]
 80031b4:	4613      	mov	r3, r2
 80031b6:	011b      	lsls	r3, r3, #4
 80031b8:	1a9b      	subs	r3, r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	440b      	add	r3, r1
 80031be:	3326      	adds	r3, #38	@ 0x26
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00a      	beq.n	80031dc <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80031c6:	78fa      	ldrb	r2, [r7, #3]
 80031c8:	6879      	ldr	r1, [r7, #4]
 80031ca:	4613      	mov	r3, r2
 80031cc:	011b      	lsls	r3, r3, #4
 80031ce:	1a9b      	subs	r3, r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	440b      	add	r3, r1
 80031d4:	3326      	adds	r3, #38	@ 0x26
 80031d6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d110      	bne.n	80031fe <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	78fa      	ldrb	r2, [r7, #3]
 80031e2:	4611      	mov	r1, r2
 80031e4:	4618      	mov	r0, r3
 80031e6:	f004 fd3a 	bl	8007c5e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80031ea:	78fb      	ldrb	r3, [r7, #3]
 80031ec:	015a      	lsls	r2, r3, #5
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	4413      	add	r3, r2
 80031f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031f6:	461a      	mov	r2, r3
 80031f8:	2310      	movs	r3, #16
 80031fa:	6093      	str	r3, [r2, #8]
 80031fc:	e03d      	b.n	800327a <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80031fe:	78fa      	ldrb	r2, [r7, #3]
 8003200:	6879      	ldr	r1, [r7, #4]
 8003202:	4613      	mov	r3, r2
 8003204:	011b      	lsls	r3, r3, #4
 8003206:	1a9b      	subs	r3, r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	440b      	add	r3, r1
 800320c:	3326      	adds	r3, #38	@ 0x26
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	2b03      	cmp	r3, #3
 8003212:	d00a      	beq.n	800322a <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8003214:	78fa      	ldrb	r2, [r7, #3]
 8003216:	6879      	ldr	r1, [r7, #4]
 8003218:	4613      	mov	r3, r2
 800321a:	011b      	lsls	r3, r3, #4
 800321c:	1a9b      	subs	r3, r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	440b      	add	r3, r1
 8003222:	3326      	adds	r3, #38	@ 0x26
 8003224:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003226:	2b01      	cmp	r3, #1
 8003228:	d127      	bne.n	800327a <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800322a:	78fb      	ldrb	r3, [r7, #3]
 800322c:	015a      	lsls	r2, r3, #5
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	4413      	add	r3, r2
 8003232:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	78fa      	ldrb	r2, [r7, #3]
 800323a:	0151      	lsls	r1, r2, #5
 800323c:	693a      	ldr	r2, [r7, #16]
 800323e:	440a      	add	r2, r1
 8003240:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003244:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003248:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800324a:	78fa      	ldrb	r2, [r7, #3]
 800324c:	6879      	ldr	r1, [r7, #4]
 800324e:	4613      	mov	r3, r2
 8003250:	011b      	lsls	r3, r3, #4
 8003252:	1a9b      	subs	r3, r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	440b      	add	r3, r1
 8003258:	334c      	adds	r3, #76	@ 0x4c
 800325a:	2201      	movs	r2, #1
 800325c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800325e:	78fa      	ldrb	r2, [r7, #3]
 8003260:	6879      	ldr	r1, [r7, #4]
 8003262:	4613      	mov	r3, r2
 8003264:	011b      	lsls	r3, r3, #4
 8003266:	1a9b      	subs	r3, r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	440b      	add	r3, r1
 800326c:	334c      	adds	r3, #76	@ 0x4c
 800326e:	781a      	ldrb	r2, [r3, #0]
 8003270:	78fb      	ldrb	r3, [r7, #3]
 8003272:	4619      	mov	r1, r3
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f007 f851 	bl	800a31c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	799b      	ldrb	r3, [r3, #6]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d13b      	bne.n	80032fa <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8003282:	78fa      	ldrb	r2, [r7, #3]
 8003284:	6879      	ldr	r1, [r7, #4]
 8003286:	4613      	mov	r3, r2
 8003288:	011b      	lsls	r3, r3, #4
 800328a:	1a9b      	subs	r3, r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	440b      	add	r3, r1
 8003290:	3338      	adds	r3, #56	@ 0x38
 8003292:	6819      	ldr	r1, [r3, #0]
 8003294:	78fa      	ldrb	r2, [r7, #3]
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	4613      	mov	r3, r2
 800329a:	011b      	lsls	r3, r3, #4
 800329c:	1a9b      	subs	r3, r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	4403      	add	r3, r0
 80032a2:	3328      	adds	r3, #40	@ 0x28
 80032a4:	881b      	ldrh	r3, [r3, #0]
 80032a6:	440b      	add	r3, r1
 80032a8:	1e59      	subs	r1, r3, #1
 80032aa:	78fa      	ldrb	r2, [r7, #3]
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	4613      	mov	r3, r2
 80032b0:	011b      	lsls	r3, r3, #4
 80032b2:	1a9b      	subs	r3, r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	4403      	add	r3, r0
 80032b8:	3328      	adds	r3, #40	@ 0x28
 80032ba:	881b      	ldrh	r3, [r3, #0]
 80032bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80032c0:	f003 0301 	and.w	r3, r3, #1
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f000 8470 	beq.w	8003baa <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80032ca:	78fa      	ldrb	r2, [r7, #3]
 80032cc:	6879      	ldr	r1, [r7, #4]
 80032ce:	4613      	mov	r3, r2
 80032d0:	011b      	lsls	r3, r3, #4
 80032d2:	1a9b      	subs	r3, r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	440b      	add	r3, r1
 80032d8:	333c      	adds	r3, #60	@ 0x3c
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	78fa      	ldrb	r2, [r7, #3]
 80032de:	f083 0301 	eor.w	r3, r3, #1
 80032e2:	b2d8      	uxtb	r0, r3
 80032e4:	6879      	ldr	r1, [r7, #4]
 80032e6:	4613      	mov	r3, r2
 80032e8:	011b      	lsls	r3, r3, #4
 80032ea:	1a9b      	subs	r3, r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	440b      	add	r3, r1
 80032f0:	333c      	adds	r3, #60	@ 0x3c
 80032f2:	4602      	mov	r2, r0
 80032f4:	701a      	strb	r2, [r3, #0]
 80032f6:	f000 bc58 	b.w	8003baa <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80032fa:	78fa      	ldrb	r2, [r7, #3]
 80032fc:	6879      	ldr	r1, [r7, #4]
 80032fe:	4613      	mov	r3, r2
 8003300:	011b      	lsls	r3, r3, #4
 8003302:	1a9b      	subs	r3, r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	440b      	add	r3, r1
 8003308:	333c      	adds	r3, #60	@ 0x3c
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	78fa      	ldrb	r2, [r7, #3]
 800330e:	f083 0301 	eor.w	r3, r3, #1
 8003312:	b2d8      	uxtb	r0, r3
 8003314:	6879      	ldr	r1, [r7, #4]
 8003316:	4613      	mov	r3, r2
 8003318:	011b      	lsls	r3, r3, #4
 800331a:	1a9b      	subs	r3, r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	440b      	add	r3, r1
 8003320:	333c      	adds	r3, #60	@ 0x3c
 8003322:	4602      	mov	r2, r0
 8003324:	701a      	strb	r2, [r3, #0]
 8003326:	f000 bc40 	b.w	8003baa <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	78fa      	ldrb	r2, [r7, #3]
 8003330:	4611      	mov	r1, r2
 8003332:	4618      	mov	r0, r3
 8003334:	f003 fee9 	bl	800710a <USB_ReadChInterrupts>
 8003338:	4603      	mov	r3, r0
 800333a:	f003 0320 	and.w	r3, r3, #32
 800333e:	2b20      	cmp	r3, #32
 8003340:	d131      	bne.n	80033a6 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003342:	78fb      	ldrb	r3, [r7, #3]
 8003344:	015a      	lsls	r2, r3, #5
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	4413      	add	r3, r2
 800334a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800334e:	461a      	mov	r2, r3
 8003350:	2320      	movs	r3, #32
 8003352:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8003354:	78fa      	ldrb	r2, [r7, #3]
 8003356:	6879      	ldr	r1, [r7, #4]
 8003358:	4613      	mov	r3, r2
 800335a:	011b      	lsls	r3, r3, #4
 800335c:	1a9b      	subs	r3, r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	440b      	add	r3, r1
 8003362:	331a      	adds	r3, #26
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	2b01      	cmp	r3, #1
 8003368:	f040 841f 	bne.w	8003baa <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 800336c:	78fa      	ldrb	r2, [r7, #3]
 800336e:	6879      	ldr	r1, [r7, #4]
 8003370:	4613      	mov	r3, r2
 8003372:	011b      	lsls	r3, r3, #4
 8003374:	1a9b      	subs	r3, r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	440b      	add	r3, r1
 800337a:	331b      	adds	r3, #27
 800337c:	2201      	movs	r2, #1
 800337e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003380:	78fa      	ldrb	r2, [r7, #3]
 8003382:	6879      	ldr	r1, [r7, #4]
 8003384:	4613      	mov	r3, r2
 8003386:	011b      	lsls	r3, r3, #4
 8003388:	1a9b      	subs	r3, r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	440b      	add	r3, r1
 800338e:	334d      	adds	r3, #77	@ 0x4d
 8003390:	2203      	movs	r2, #3
 8003392:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	78fa      	ldrb	r2, [r7, #3]
 800339a:	4611      	mov	r1, r2
 800339c:	4618      	mov	r0, r3
 800339e:	f004 fc5e 	bl	8007c5e <USB_HC_Halt>
 80033a2:	f000 bc02 	b.w	8003baa <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	78fa      	ldrb	r2, [r7, #3]
 80033ac:	4611      	mov	r1, r2
 80033ae:	4618      	mov	r0, r3
 80033b0:	f003 feab 	bl	800710a <USB_ReadChInterrupts>
 80033b4:	4603      	mov	r3, r0
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	f040 8305 	bne.w	80039ca <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80033c0:	78fb      	ldrb	r3, [r7, #3]
 80033c2:	015a      	lsls	r2, r3, #5
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	4413      	add	r3, r2
 80033c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033cc:	461a      	mov	r2, r3
 80033ce:	2302      	movs	r3, #2
 80033d0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80033d2:	78fa      	ldrb	r2, [r7, #3]
 80033d4:	6879      	ldr	r1, [r7, #4]
 80033d6:	4613      	mov	r3, r2
 80033d8:	011b      	lsls	r3, r3, #4
 80033da:	1a9b      	subs	r3, r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	440b      	add	r3, r1
 80033e0:	334d      	adds	r3, #77	@ 0x4d
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d114      	bne.n	8003412 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033e8:	78fa      	ldrb	r2, [r7, #3]
 80033ea:	6879      	ldr	r1, [r7, #4]
 80033ec:	4613      	mov	r3, r2
 80033ee:	011b      	lsls	r3, r3, #4
 80033f0:	1a9b      	subs	r3, r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	440b      	add	r3, r1
 80033f6:	334d      	adds	r3, #77	@ 0x4d
 80033f8:	2202      	movs	r2, #2
 80033fa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80033fc:	78fa      	ldrb	r2, [r7, #3]
 80033fe:	6879      	ldr	r1, [r7, #4]
 8003400:	4613      	mov	r3, r2
 8003402:	011b      	lsls	r3, r3, #4
 8003404:	1a9b      	subs	r3, r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	440b      	add	r3, r1
 800340a:	334c      	adds	r3, #76	@ 0x4c
 800340c:	2201      	movs	r2, #1
 800340e:	701a      	strb	r2, [r3, #0]
 8003410:	e2cc      	b.n	80039ac <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003412:	78fa      	ldrb	r2, [r7, #3]
 8003414:	6879      	ldr	r1, [r7, #4]
 8003416:	4613      	mov	r3, r2
 8003418:	011b      	lsls	r3, r3, #4
 800341a:	1a9b      	subs	r3, r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	440b      	add	r3, r1
 8003420:	334d      	adds	r3, #77	@ 0x4d
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	2b06      	cmp	r3, #6
 8003426:	d114      	bne.n	8003452 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003428:	78fa      	ldrb	r2, [r7, #3]
 800342a:	6879      	ldr	r1, [r7, #4]
 800342c:	4613      	mov	r3, r2
 800342e:	011b      	lsls	r3, r3, #4
 8003430:	1a9b      	subs	r3, r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	440b      	add	r3, r1
 8003436:	334d      	adds	r3, #77	@ 0x4d
 8003438:	2202      	movs	r2, #2
 800343a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800343c:	78fa      	ldrb	r2, [r7, #3]
 800343e:	6879      	ldr	r1, [r7, #4]
 8003440:	4613      	mov	r3, r2
 8003442:	011b      	lsls	r3, r3, #4
 8003444:	1a9b      	subs	r3, r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	440b      	add	r3, r1
 800344a:	334c      	adds	r3, #76	@ 0x4c
 800344c:	2205      	movs	r2, #5
 800344e:	701a      	strb	r2, [r3, #0]
 8003450:	e2ac      	b.n	80039ac <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003452:	78fa      	ldrb	r2, [r7, #3]
 8003454:	6879      	ldr	r1, [r7, #4]
 8003456:	4613      	mov	r3, r2
 8003458:	011b      	lsls	r3, r3, #4
 800345a:	1a9b      	subs	r3, r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	440b      	add	r3, r1
 8003460:	334d      	adds	r3, #77	@ 0x4d
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	2b07      	cmp	r3, #7
 8003466:	d00b      	beq.n	8003480 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003468:	78fa      	ldrb	r2, [r7, #3]
 800346a:	6879      	ldr	r1, [r7, #4]
 800346c:	4613      	mov	r3, r2
 800346e:	011b      	lsls	r3, r3, #4
 8003470:	1a9b      	subs	r3, r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	440b      	add	r3, r1
 8003476:	334d      	adds	r3, #77	@ 0x4d
 8003478:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800347a:	2b09      	cmp	r3, #9
 800347c:	f040 80a6 	bne.w	80035cc <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003480:	78fa      	ldrb	r2, [r7, #3]
 8003482:	6879      	ldr	r1, [r7, #4]
 8003484:	4613      	mov	r3, r2
 8003486:	011b      	lsls	r3, r3, #4
 8003488:	1a9b      	subs	r3, r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	440b      	add	r3, r1
 800348e:	334d      	adds	r3, #77	@ 0x4d
 8003490:	2202      	movs	r2, #2
 8003492:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003494:	78fa      	ldrb	r2, [r7, #3]
 8003496:	6879      	ldr	r1, [r7, #4]
 8003498:	4613      	mov	r3, r2
 800349a:	011b      	lsls	r3, r3, #4
 800349c:	1a9b      	subs	r3, r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	440b      	add	r3, r1
 80034a2:	3344      	adds	r3, #68	@ 0x44
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	1c59      	adds	r1, r3, #1
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	4613      	mov	r3, r2
 80034ac:	011b      	lsls	r3, r3, #4
 80034ae:	1a9b      	subs	r3, r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	4403      	add	r3, r0
 80034b4:	3344      	adds	r3, #68	@ 0x44
 80034b6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80034b8:	78fa      	ldrb	r2, [r7, #3]
 80034ba:	6879      	ldr	r1, [r7, #4]
 80034bc:	4613      	mov	r3, r2
 80034be:	011b      	lsls	r3, r3, #4
 80034c0:	1a9b      	subs	r3, r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	440b      	add	r3, r1
 80034c6:	3344      	adds	r3, #68	@ 0x44
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d943      	bls.n	8003556 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80034ce:	78fa      	ldrb	r2, [r7, #3]
 80034d0:	6879      	ldr	r1, [r7, #4]
 80034d2:	4613      	mov	r3, r2
 80034d4:	011b      	lsls	r3, r3, #4
 80034d6:	1a9b      	subs	r3, r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	440b      	add	r3, r1
 80034dc:	3344      	adds	r3, #68	@ 0x44
 80034de:	2200      	movs	r2, #0
 80034e0:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80034e2:	78fa      	ldrb	r2, [r7, #3]
 80034e4:	6879      	ldr	r1, [r7, #4]
 80034e6:	4613      	mov	r3, r2
 80034e8:	011b      	lsls	r3, r3, #4
 80034ea:	1a9b      	subs	r3, r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	440b      	add	r3, r1
 80034f0:	331a      	adds	r3, #26
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d123      	bne.n	8003540 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80034f8:	78fa      	ldrb	r2, [r7, #3]
 80034fa:	6879      	ldr	r1, [r7, #4]
 80034fc:	4613      	mov	r3, r2
 80034fe:	011b      	lsls	r3, r3, #4
 8003500:	1a9b      	subs	r3, r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	440b      	add	r3, r1
 8003506:	331b      	adds	r3, #27
 8003508:	2200      	movs	r2, #0
 800350a:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 800350c:	78fa      	ldrb	r2, [r7, #3]
 800350e:	6879      	ldr	r1, [r7, #4]
 8003510:	4613      	mov	r3, r2
 8003512:	011b      	lsls	r3, r3, #4
 8003514:	1a9b      	subs	r3, r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	440b      	add	r3, r1
 800351a:	331c      	adds	r3, #28
 800351c:	2200      	movs	r2, #0
 800351e:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003520:	78fb      	ldrb	r3, [r7, #3]
 8003522:	015a      	lsls	r2, r3, #5
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	4413      	add	r3, r2
 8003528:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	78fa      	ldrb	r2, [r7, #3]
 8003530:	0151      	lsls	r1, r2, #5
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	440a      	add	r2, r1
 8003536:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800353a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800353e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003540:	78fa      	ldrb	r2, [r7, #3]
 8003542:	6879      	ldr	r1, [r7, #4]
 8003544:	4613      	mov	r3, r2
 8003546:	011b      	lsls	r3, r3, #4
 8003548:	1a9b      	subs	r3, r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	440b      	add	r3, r1
 800354e:	334c      	adds	r3, #76	@ 0x4c
 8003550:	2204      	movs	r2, #4
 8003552:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003554:	e229      	b.n	80039aa <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003556:	78fa      	ldrb	r2, [r7, #3]
 8003558:	6879      	ldr	r1, [r7, #4]
 800355a:	4613      	mov	r3, r2
 800355c:	011b      	lsls	r3, r3, #4
 800355e:	1a9b      	subs	r3, r3, r2
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	440b      	add	r3, r1
 8003564:	334c      	adds	r3, #76	@ 0x4c
 8003566:	2202      	movs	r2, #2
 8003568:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800356a:	78fa      	ldrb	r2, [r7, #3]
 800356c:	6879      	ldr	r1, [r7, #4]
 800356e:	4613      	mov	r3, r2
 8003570:	011b      	lsls	r3, r3, #4
 8003572:	1a9b      	subs	r3, r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	440b      	add	r3, r1
 8003578:	3326      	adds	r3, #38	@ 0x26
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00b      	beq.n	8003598 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003580:	78fa      	ldrb	r2, [r7, #3]
 8003582:	6879      	ldr	r1, [r7, #4]
 8003584:	4613      	mov	r3, r2
 8003586:	011b      	lsls	r3, r3, #4
 8003588:	1a9b      	subs	r3, r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	440b      	add	r3, r1
 800358e:	3326      	adds	r3, #38	@ 0x26
 8003590:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003592:	2b02      	cmp	r3, #2
 8003594:	f040 8209 	bne.w	80039aa <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003598:	78fb      	ldrb	r3, [r7, #3]
 800359a:	015a      	lsls	r2, r3, #5
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	4413      	add	r3, r2
 80035a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80035ae:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80035b6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80035b8:	78fb      	ldrb	r3, [r7, #3]
 80035ba:	015a      	lsls	r2, r3, #5
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	4413      	add	r3, r2
 80035c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035c4:	461a      	mov	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80035ca:	e1ee      	b.n	80039aa <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80035cc:	78fa      	ldrb	r2, [r7, #3]
 80035ce:	6879      	ldr	r1, [r7, #4]
 80035d0:	4613      	mov	r3, r2
 80035d2:	011b      	lsls	r3, r3, #4
 80035d4:	1a9b      	subs	r3, r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	440b      	add	r3, r1
 80035da:	334d      	adds	r3, #77	@ 0x4d
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	2b05      	cmp	r3, #5
 80035e0:	f040 80c8 	bne.w	8003774 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80035e4:	78fa      	ldrb	r2, [r7, #3]
 80035e6:	6879      	ldr	r1, [r7, #4]
 80035e8:	4613      	mov	r3, r2
 80035ea:	011b      	lsls	r3, r3, #4
 80035ec:	1a9b      	subs	r3, r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	440b      	add	r3, r1
 80035f2:	334d      	adds	r3, #77	@ 0x4d
 80035f4:	2202      	movs	r2, #2
 80035f6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80035f8:	78fa      	ldrb	r2, [r7, #3]
 80035fa:	6879      	ldr	r1, [r7, #4]
 80035fc:	4613      	mov	r3, r2
 80035fe:	011b      	lsls	r3, r3, #4
 8003600:	1a9b      	subs	r3, r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	440b      	add	r3, r1
 8003606:	331b      	adds	r3, #27
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	2b01      	cmp	r3, #1
 800360c:	f040 81ce 	bne.w	80039ac <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003610:	78fa      	ldrb	r2, [r7, #3]
 8003612:	6879      	ldr	r1, [r7, #4]
 8003614:	4613      	mov	r3, r2
 8003616:	011b      	lsls	r3, r3, #4
 8003618:	1a9b      	subs	r3, r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	440b      	add	r3, r1
 800361e:	3326      	adds	r3, #38	@ 0x26
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	2b03      	cmp	r3, #3
 8003624:	d16b      	bne.n	80036fe <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8003626:	78fa      	ldrb	r2, [r7, #3]
 8003628:	6879      	ldr	r1, [r7, #4]
 800362a:	4613      	mov	r3, r2
 800362c:	011b      	lsls	r3, r3, #4
 800362e:	1a9b      	subs	r3, r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	440b      	add	r3, r1
 8003634:	3348      	adds	r3, #72	@ 0x48
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	1c59      	adds	r1, r3, #1
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	4613      	mov	r3, r2
 800363e:	011b      	lsls	r3, r3, #4
 8003640:	1a9b      	subs	r3, r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	4403      	add	r3, r0
 8003646:	3348      	adds	r3, #72	@ 0x48
 8003648:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800364a:	78fa      	ldrb	r2, [r7, #3]
 800364c:	6879      	ldr	r1, [r7, #4]
 800364e:	4613      	mov	r3, r2
 8003650:	011b      	lsls	r3, r3, #4
 8003652:	1a9b      	subs	r3, r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	440b      	add	r3, r1
 8003658:	3348      	adds	r3, #72	@ 0x48
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2b02      	cmp	r3, #2
 800365e:	d943      	bls.n	80036e8 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003660:	78fa      	ldrb	r2, [r7, #3]
 8003662:	6879      	ldr	r1, [r7, #4]
 8003664:	4613      	mov	r3, r2
 8003666:	011b      	lsls	r3, r3, #4
 8003668:	1a9b      	subs	r3, r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	440b      	add	r3, r1
 800366e:	3348      	adds	r3, #72	@ 0x48
 8003670:	2200      	movs	r2, #0
 8003672:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003674:	78fa      	ldrb	r2, [r7, #3]
 8003676:	6879      	ldr	r1, [r7, #4]
 8003678:	4613      	mov	r3, r2
 800367a:	011b      	lsls	r3, r3, #4
 800367c:	1a9b      	subs	r3, r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	440b      	add	r3, r1
 8003682:	331b      	adds	r3, #27
 8003684:	2200      	movs	r2, #0
 8003686:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003688:	78fa      	ldrb	r2, [r7, #3]
 800368a:	6879      	ldr	r1, [r7, #4]
 800368c:	4613      	mov	r3, r2
 800368e:	011b      	lsls	r3, r3, #4
 8003690:	1a9b      	subs	r3, r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	440b      	add	r3, r1
 8003696:	3344      	adds	r3, #68	@ 0x44
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2b02      	cmp	r3, #2
 800369c:	d809      	bhi.n	80036b2 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800369e:	78fa      	ldrb	r2, [r7, #3]
 80036a0:	6879      	ldr	r1, [r7, #4]
 80036a2:	4613      	mov	r3, r2
 80036a4:	011b      	lsls	r3, r3, #4
 80036a6:	1a9b      	subs	r3, r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	440b      	add	r3, r1
 80036ac:	331c      	adds	r3, #28
 80036ae:	2201      	movs	r2, #1
 80036b0:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80036b2:	78fb      	ldrb	r3, [r7, #3]
 80036b4:	015a      	lsls	r2, r3, #5
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	4413      	add	r3, r2
 80036ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	78fa      	ldrb	r2, [r7, #3]
 80036c2:	0151      	lsls	r1, r2, #5
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	440a      	add	r2, r1
 80036c8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80036cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036d0:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80036d2:	78fa      	ldrb	r2, [r7, #3]
 80036d4:	6879      	ldr	r1, [r7, #4]
 80036d6:	4613      	mov	r3, r2
 80036d8:	011b      	lsls	r3, r3, #4
 80036da:	1a9b      	subs	r3, r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	440b      	add	r3, r1
 80036e0:	334c      	adds	r3, #76	@ 0x4c
 80036e2:	2204      	movs	r2, #4
 80036e4:	701a      	strb	r2, [r3, #0]
 80036e6:	e014      	b.n	8003712 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80036e8:	78fa      	ldrb	r2, [r7, #3]
 80036ea:	6879      	ldr	r1, [r7, #4]
 80036ec:	4613      	mov	r3, r2
 80036ee:	011b      	lsls	r3, r3, #4
 80036f0:	1a9b      	subs	r3, r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	440b      	add	r3, r1
 80036f6:	334c      	adds	r3, #76	@ 0x4c
 80036f8:	2202      	movs	r2, #2
 80036fa:	701a      	strb	r2, [r3, #0]
 80036fc:	e009      	b.n	8003712 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80036fe:	78fa      	ldrb	r2, [r7, #3]
 8003700:	6879      	ldr	r1, [r7, #4]
 8003702:	4613      	mov	r3, r2
 8003704:	011b      	lsls	r3, r3, #4
 8003706:	1a9b      	subs	r3, r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	440b      	add	r3, r1
 800370c:	334c      	adds	r3, #76	@ 0x4c
 800370e:	2202      	movs	r2, #2
 8003710:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003712:	78fa      	ldrb	r2, [r7, #3]
 8003714:	6879      	ldr	r1, [r7, #4]
 8003716:	4613      	mov	r3, r2
 8003718:	011b      	lsls	r3, r3, #4
 800371a:	1a9b      	subs	r3, r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	440b      	add	r3, r1
 8003720:	3326      	adds	r3, #38	@ 0x26
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00b      	beq.n	8003740 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003728:	78fa      	ldrb	r2, [r7, #3]
 800372a:	6879      	ldr	r1, [r7, #4]
 800372c:	4613      	mov	r3, r2
 800372e:	011b      	lsls	r3, r3, #4
 8003730:	1a9b      	subs	r3, r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	440b      	add	r3, r1
 8003736:	3326      	adds	r3, #38	@ 0x26
 8003738:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800373a:	2b02      	cmp	r3, #2
 800373c:	f040 8136 	bne.w	80039ac <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003740:	78fb      	ldrb	r3, [r7, #3]
 8003742:	015a      	lsls	r2, r3, #5
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	4413      	add	r3, r2
 8003748:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003756:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800375e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003760:	78fb      	ldrb	r3, [r7, #3]
 8003762:	015a      	lsls	r2, r3, #5
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	4413      	add	r3, r2
 8003768:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800376c:	461a      	mov	r2, r3
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6013      	str	r3, [r2, #0]
 8003772:	e11b      	b.n	80039ac <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003774:	78fa      	ldrb	r2, [r7, #3]
 8003776:	6879      	ldr	r1, [r7, #4]
 8003778:	4613      	mov	r3, r2
 800377a:	011b      	lsls	r3, r3, #4
 800377c:	1a9b      	subs	r3, r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	440b      	add	r3, r1
 8003782:	334d      	adds	r3, #77	@ 0x4d
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	2b03      	cmp	r3, #3
 8003788:	f040 8081 	bne.w	800388e <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800378c:	78fa      	ldrb	r2, [r7, #3]
 800378e:	6879      	ldr	r1, [r7, #4]
 8003790:	4613      	mov	r3, r2
 8003792:	011b      	lsls	r3, r3, #4
 8003794:	1a9b      	subs	r3, r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	440b      	add	r3, r1
 800379a:	334d      	adds	r3, #77	@ 0x4d
 800379c:	2202      	movs	r2, #2
 800379e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80037a0:	78fa      	ldrb	r2, [r7, #3]
 80037a2:	6879      	ldr	r1, [r7, #4]
 80037a4:	4613      	mov	r3, r2
 80037a6:	011b      	lsls	r3, r3, #4
 80037a8:	1a9b      	subs	r3, r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	440b      	add	r3, r1
 80037ae:	331b      	adds	r3, #27
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	f040 80fa 	bne.w	80039ac <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80037b8:	78fa      	ldrb	r2, [r7, #3]
 80037ba:	6879      	ldr	r1, [r7, #4]
 80037bc:	4613      	mov	r3, r2
 80037be:	011b      	lsls	r3, r3, #4
 80037c0:	1a9b      	subs	r3, r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	440b      	add	r3, r1
 80037c6:	334c      	adds	r3, #76	@ 0x4c
 80037c8:	2202      	movs	r2, #2
 80037ca:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80037cc:	78fb      	ldrb	r3, [r7, #3]
 80037ce:	015a      	lsls	r2, r3, #5
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	4413      	add	r3, r2
 80037d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	78fa      	ldrb	r2, [r7, #3]
 80037dc:	0151      	lsls	r1, r2, #5
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	440a      	add	r2, r1
 80037e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80037e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037ea:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80037ec:	78fb      	ldrb	r3, [r7, #3]
 80037ee:	015a      	lsls	r2, r3, #5
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	4413      	add	r3, r2
 80037f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	78fa      	ldrb	r2, [r7, #3]
 80037fc:	0151      	lsls	r1, r2, #5
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	440a      	add	r2, r1
 8003802:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003806:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800380a:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 800380c:	78fb      	ldrb	r3, [r7, #3]
 800380e:	015a      	lsls	r2, r3, #5
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	4413      	add	r3, r2
 8003814:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	78fa      	ldrb	r2, [r7, #3]
 800381c:	0151      	lsls	r1, r2, #5
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	440a      	add	r2, r1
 8003822:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003826:	f023 0320 	bic.w	r3, r3, #32
 800382a:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800382c:	78fa      	ldrb	r2, [r7, #3]
 800382e:	6879      	ldr	r1, [r7, #4]
 8003830:	4613      	mov	r3, r2
 8003832:	011b      	lsls	r3, r3, #4
 8003834:	1a9b      	subs	r3, r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	440b      	add	r3, r1
 800383a:	3326      	adds	r3, #38	@ 0x26
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00b      	beq.n	800385a <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003842:	78fa      	ldrb	r2, [r7, #3]
 8003844:	6879      	ldr	r1, [r7, #4]
 8003846:	4613      	mov	r3, r2
 8003848:	011b      	lsls	r3, r3, #4
 800384a:	1a9b      	subs	r3, r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	440b      	add	r3, r1
 8003850:	3326      	adds	r3, #38	@ 0x26
 8003852:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003854:	2b02      	cmp	r3, #2
 8003856:	f040 80a9 	bne.w	80039ac <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800385a:	78fb      	ldrb	r3, [r7, #3]
 800385c:	015a      	lsls	r2, r3, #5
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	4413      	add	r3, r2
 8003862:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003870:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003878:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800387a:	78fb      	ldrb	r3, [r7, #3]
 800387c:	015a      	lsls	r2, r3, #5
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	4413      	add	r3, r2
 8003882:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003886:	461a      	mov	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6013      	str	r3, [r2, #0]
 800388c:	e08e      	b.n	80039ac <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800388e:	78fa      	ldrb	r2, [r7, #3]
 8003890:	6879      	ldr	r1, [r7, #4]
 8003892:	4613      	mov	r3, r2
 8003894:	011b      	lsls	r3, r3, #4
 8003896:	1a9b      	subs	r3, r3, r2
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	440b      	add	r3, r1
 800389c:	334d      	adds	r3, #77	@ 0x4d
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	2b04      	cmp	r3, #4
 80038a2:	d143      	bne.n	800392c <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80038a4:	78fa      	ldrb	r2, [r7, #3]
 80038a6:	6879      	ldr	r1, [r7, #4]
 80038a8:	4613      	mov	r3, r2
 80038aa:	011b      	lsls	r3, r3, #4
 80038ac:	1a9b      	subs	r3, r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	440b      	add	r3, r1
 80038b2:	334d      	adds	r3, #77	@ 0x4d
 80038b4:	2202      	movs	r2, #2
 80038b6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80038b8:	78fa      	ldrb	r2, [r7, #3]
 80038ba:	6879      	ldr	r1, [r7, #4]
 80038bc:	4613      	mov	r3, r2
 80038be:	011b      	lsls	r3, r3, #4
 80038c0:	1a9b      	subs	r3, r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	440b      	add	r3, r1
 80038c6:	334c      	adds	r3, #76	@ 0x4c
 80038c8:	2202      	movs	r2, #2
 80038ca:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80038cc:	78fa      	ldrb	r2, [r7, #3]
 80038ce:	6879      	ldr	r1, [r7, #4]
 80038d0:	4613      	mov	r3, r2
 80038d2:	011b      	lsls	r3, r3, #4
 80038d4:	1a9b      	subs	r3, r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	440b      	add	r3, r1
 80038da:	3326      	adds	r3, #38	@ 0x26
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00a      	beq.n	80038f8 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80038e2:	78fa      	ldrb	r2, [r7, #3]
 80038e4:	6879      	ldr	r1, [r7, #4]
 80038e6:	4613      	mov	r3, r2
 80038e8:	011b      	lsls	r3, r3, #4
 80038ea:	1a9b      	subs	r3, r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	440b      	add	r3, r1
 80038f0:	3326      	adds	r3, #38	@ 0x26
 80038f2:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d159      	bne.n	80039ac <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80038f8:	78fb      	ldrb	r3, [r7, #3]
 80038fa:	015a      	lsls	r2, r3, #5
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	4413      	add	r3, r2
 8003900:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800390e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003916:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003918:	78fb      	ldrb	r3, [r7, #3]
 800391a:	015a      	lsls	r2, r3, #5
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	4413      	add	r3, r2
 8003920:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003924:	461a      	mov	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6013      	str	r3, [r2, #0]
 800392a:	e03f      	b.n	80039ac <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 800392c:	78fa      	ldrb	r2, [r7, #3]
 800392e:	6879      	ldr	r1, [r7, #4]
 8003930:	4613      	mov	r3, r2
 8003932:	011b      	lsls	r3, r3, #4
 8003934:	1a9b      	subs	r3, r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	440b      	add	r3, r1
 800393a:	334d      	adds	r3, #77	@ 0x4d
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	2b08      	cmp	r3, #8
 8003940:	d126      	bne.n	8003990 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003942:	78fa      	ldrb	r2, [r7, #3]
 8003944:	6879      	ldr	r1, [r7, #4]
 8003946:	4613      	mov	r3, r2
 8003948:	011b      	lsls	r3, r3, #4
 800394a:	1a9b      	subs	r3, r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	440b      	add	r3, r1
 8003950:	334d      	adds	r3, #77	@ 0x4d
 8003952:	2202      	movs	r2, #2
 8003954:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003956:	78fa      	ldrb	r2, [r7, #3]
 8003958:	6879      	ldr	r1, [r7, #4]
 800395a:	4613      	mov	r3, r2
 800395c:	011b      	lsls	r3, r3, #4
 800395e:	1a9b      	subs	r3, r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	440b      	add	r3, r1
 8003964:	3344      	adds	r3, #68	@ 0x44
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	1c59      	adds	r1, r3, #1
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	4613      	mov	r3, r2
 800396e:	011b      	lsls	r3, r3, #4
 8003970:	1a9b      	subs	r3, r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	4403      	add	r3, r0
 8003976:	3344      	adds	r3, #68	@ 0x44
 8003978:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800397a:	78fa      	ldrb	r2, [r7, #3]
 800397c:	6879      	ldr	r1, [r7, #4]
 800397e:	4613      	mov	r3, r2
 8003980:	011b      	lsls	r3, r3, #4
 8003982:	1a9b      	subs	r3, r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	440b      	add	r3, r1
 8003988:	334c      	adds	r3, #76	@ 0x4c
 800398a:	2204      	movs	r2, #4
 800398c:	701a      	strb	r2, [r3, #0]
 800398e:	e00d      	b.n	80039ac <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003990:	78fa      	ldrb	r2, [r7, #3]
 8003992:	6879      	ldr	r1, [r7, #4]
 8003994:	4613      	mov	r3, r2
 8003996:	011b      	lsls	r3, r3, #4
 8003998:	1a9b      	subs	r3, r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	440b      	add	r3, r1
 800399e:	334d      	adds	r3, #77	@ 0x4d
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	f000 8100 	beq.w	8003ba8 <HCD_HC_IN_IRQHandler+0xcca>
 80039a8:	e000      	b.n	80039ac <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80039aa:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80039ac:	78fa      	ldrb	r2, [r7, #3]
 80039ae:	6879      	ldr	r1, [r7, #4]
 80039b0:	4613      	mov	r3, r2
 80039b2:	011b      	lsls	r3, r3, #4
 80039b4:	1a9b      	subs	r3, r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	440b      	add	r3, r1
 80039ba:	334c      	adds	r3, #76	@ 0x4c
 80039bc:	781a      	ldrb	r2, [r3, #0]
 80039be:	78fb      	ldrb	r3, [r7, #3]
 80039c0:	4619      	mov	r1, r3
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f006 fcaa 	bl	800a31c <HAL_HCD_HC_NotifyURBChange_Callback>
 80039c8:	e0ef      	b.n	8003baa <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	78fa      	ldrb	r2, [r7, #3]
 80039d0:	4611      	mov	r1, r2
 80039d2:	4618      	mov	r0, r3
 80039d4:	f003 fb99 	bl	800710a <USB_ReadChInterrupts>
 80039d8:	4603      	mov	r3, r0
 80039da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039de:	2b40      	cmp	r3, #64	@ 0x40
 80039e0:	d12f      	bne.n	8003a42 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80039e2:	78fb      	ldrb	r3, [r7, #3]
 80039e4:	015a      	lsls	r2, r3, #5
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	4413      	add	r3, r2
 80039ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039ee:	461a      	mov	r2, r3
 80039f0:	2340      	movs	r3, #64	@ 0x40
 80039f2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80039f4:	78fa      	ldrb	r2, [r7, #3]
 80039f6:	6879      	ldr	r1, [r7, #4]
 80039f8:	4613      	mov	r3, r2
 80039fa:	011b      	lsls	r3, r3, #4
 80039fc:	1a9b      	subs	r3, r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	440b      	add	r3, r1
 8003a02:	334d      	adds	r3, #77	@ 0x4d
 8003a04:	2205      	movs	r2, #5
 8003a06:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003a08:	78fa      	ldrb	r2, [r7, #3]
 8003a0a:	6879      	ldr	r1, [r7, #4]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	011b      	lsls	r3, r3, #4
 8003a10:	1a9b      	subs	r3, r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	440b      	add	r3, r1
 8003a16:	331a      	adds	r3, #26
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d109      	bne.n	8003a32 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003a1e:	78fa      	ldrb	r2, [r7, #3]
 8003a20:	6879      	ldr	r1, [r7, #4]
 8003a22:	4613      	mov	r3, r2
 8003a24:	011b      	lsls	r3, r3, #4
 8003a26:	1a9b      	subs	r3, r3, r2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	440b      	add	r3, r1
 8003a2c:	3344      	adds	r3, #68	@ 0x44
 8003a2e:	2200      	movs	r2, #0
 8003a30:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	78fa      	ldrb	r2, [r7, #3]
 8003a38:	4611      	mov	r1, r2
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f004 f90f 	bl	8007c5e <USB_HC_Halt>
 8003a40:	e0b3      	b.n	8003baa <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	78fa      	ldrb	r2, [r7, #3]
 8003a48:	4611      	mov	r1, r2
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f003 fb5d 	bl	800710a <USB_ReadChInterrupts>
 8003a50:	4603      	mov	r3, r0
 8003a52:	f003 0310 	and.w	r3, r3, #16
 8003a56:	2b10      	cmp	r3, #16
 8003a58:	f040 80a7 	bne.w	8003baa <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003a5c:	78fa      	ldrb	r2, [r7, #3]
 8003a5e:	6879      	ldr	r1, [r7, #4]
 8003a60:	4613      	mov	r3, r2
 8003a62:	011b      	lsls	r3, r3, #4
 8003a64:	1a9b      	subs	r3, r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	440b      	add	r3, r1
 8003a6a:	3326      	adds	r3, #38	@ 0x26
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	2b03      	cmp	r3, #3
 8003a70:	d11b      	bne.n	8003aaa <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003a72:	78fa      	ldrb	r2, [r7, #3]
 8003a74:	6879      	ldr	r1, [r7, #4]
 8003a76:	4613      	mov	r3, r2
 8003a78:	011b      	lsls	r3, r3, #4
 8003a7a:	1a9b      	subs	r3, r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	440b      	add	r3, r1
 8003a80:	3344      	adds	r3, #68	@ 0x44
 8003a82:	2200      	movs	r2, #0
 8003a84:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003a86:	78fa      	ldrb	r2, [r7, #3]
 8003a88:	6879      	ldr	r1, [r7, #4]
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	011b      	lsls	r3, r3, #4
 8003a8e:	1a9b      	subs	r3, r3, r2
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	440b      	add	r3, r1
 8003a94:	334d      	adds	r3, #77	@ 0x4d
 8003a96:	2204      	movs	r2, #4
 8003a98:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	78fa      	ldrb	r2, [r7, #3]
 8003aa0:	4611      	mov	r1, r2
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f004 f8db 	bl	8007c5e <USB_HC_Halt>
 8003aa8:	e03f      	b.n	8003b2a <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003aaa:	78fa      	ldrb	r2, [r7, #3]
 8003aac:	6879      	ldr	r1, [r7, #4]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	011b      	lsls	r3, r3, #4
 8003ab2:	1a9b      	subs	r3, r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	440b      	add	r3, r1
 8003ab8:	3326      	adds	r3, #38	@ 0x26
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00a      	beq.n	8003ad6 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003ac0:	78fa      	ldrb	r2, [r7, #3]
 8003ac2:	6879      	ldr	r1, [r7, #4]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	011b      	lsls	r3, r3, #4
 8003ac8:	1a9b      	subs	r3, r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	440b      	add	r3, r1
 8003ace:	3326      	adds	r3, #38	@ 0x26
 8003ad0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d129      	bne.n	8003b2a <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003ad6:	78fa      	ldrb	r2, [r7, #3]
 8003ad8:	6879      	ldr	r1, [r7, #4]
 8003ada:	4613      	mov	r3, r2
 8003adc:	011b      	lsls	r3, r3, #4
 8003ade:	1a9b      	subs	r3, r3, r2
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	440b      	add	r3, r1
 8003ae4:	3344      	adds	r3, #68	@ 0x44
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	799b      	ldrb	r3, [r3, #6]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00a      	beq.n	8003b08 <HCD_HC_IN_IRQHandler+0xc2a>
 8003af2:	78fa      	ldrb	r2, [r7, #3]
 8003af4:	6879      	ldr	r1, [r7, #4]
 8003af6:	4613      	mov	r3, r2
 8003af8:	011b      	lsls	r3, r3, #4
 8003afa:	1a9b      	subs	r3, r3, r2
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	440b      	add	r3, r1
 8003b00:	331b      	adds	r3, #27
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d110      	bne.n	8003b2a <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003b08:	78fa      	ldrb	r2, [r7, #3]
 8003b0a:	6879      	ldr	r1, [r7, #4]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	011b      	lsls	r3, r3, #4
 8003b10:	1a9b      	subs	r3, r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	440b      	add	r3, r1
 8003b16:	334d      	adds	r3, #77	@ 0x4d
 8003b18:	2204      	movs	r2, #4
 8003b1a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	78fa      	ldrb	r2, [r7, #3]
 8003b22:	4611      	mov	r1, r2
 8003b24:	4618      	mov	r0, r3
 8003b26:	f004 f89a 	bl	8007c5e <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003b2a:	78fa      	ldrb	r2, [r7, #3]
 8003b2c:	6879      	ldr	r1, [r7, #4]
 8003b2e:	4613      	mov	r3, r2
 8003b30:	011b      	lsls	r3, r3, #4
 8003b32:	1a9b      	subs	r3, r3, r2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	440b      	add	r3, r1
 8003b38:	331b      	adds	r3, #27
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d129      	bne.n	8003b94 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003b40:	78fa      	ldrb	r2, [r7, #3]
 8003b42:	6879      	ldr	r1, [r7, #4]
 8003b44:	4613      	mov	r3, r2
 8003b46:	011b      	lsls	r3, r3, #4
 8003b48:	1a9b      	subs	r3, r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	440b      	add	r3, r1
 8003b4e:	331b      	adds	r3, #27
 8003b50:	2200      	movs	r2, #0
 8003b52:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003b54:	78fb      	ldrb	r3, [r7, #3]
 8003b56:	015a      	lsls	r2, r3, #5
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	78fa      	ldrb	r2, [r7, #3]
 8003b64:	0151      	lsls	r1, r2, #5
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	440a      	add	r2, r1
 8003b6a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003b6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b72:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003b74:	78fb      	ldrb	r3, [r7, #3]
 8003b76:	015a      	lsls	r2, r3, #5
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	78fa      	ldrb	r2, [r7, #3]
 8003b84:	0151      	lsls	r1, r2, #5
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	440a      	add	r2, r1
 8003b8a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003b8e:	f043 0320 	orr.w	r3, r3, #32
 8003b92:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003b94:	78fb      	ldrb	r3, [r7, #3]
 8003b96:	015a      	lsls	r2, r3, #5
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	2310      	movs	r3, #16
 8003ba4:	6093      	str	r3, [r2, #8]
 8003ba6:	e000      	b.n	8003baa <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003ba8:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003baa:	3718      	adds	r7, #24
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b086      	sub	sp, #24
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	460b      	mov	r3, r1
 8003bba:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	78fa      	ldrb	r2, [r7, #3]
 8003bcc:	4611      	mov	r1, r2
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f003 fa9b 	bl	800710a <USB_ReadChInterrupts>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	f003 0304 	and.w	r3, r3, #4
 8003bda:	2b04      	cmp	r3, #4
 8003bdc:	d11b      	bne.n	8003c16 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003bde:	78fb      	ldrb	r3, [r7, #3]
 8003be0:	015a      	lsls	r2, r3, #5
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	4413      	add	r3, r2
 8003be6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bea:	461a      	mov	r2, r3
 8003bec:	2304      	movs	r3, #4
 8003bee:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003bf0:	78fa      	ldrb	r2, [r7, #3]
 8003bf2:	6879      	ldr	r1, [r7, #4]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	011b      	lsls	r3, r3, #4
 8003bf8:	1a9b      	subs	r3, r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	440b      	add	r3, r1
 8003bfe:	334d      	adds	r3, #77	@ 0x4d
 8003c00:	2207      	movs	r2, #7
 8003c02:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	78fa      	ldrb	r2, [r7, #3]
 8003c0a:	4611      	mov	r1, r2
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f004 f826 	bl	8007c5e <USB_HC_Halt>
 8003c12:	f000 bc89 	b.w	8004528 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	78fa      	ldrb	r2, [r7, #3]
 8003c1c:	4611      	mov	r1, r2
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f003 fa73 	bl	800710a <USB_ReadChInterrupts>
 8003c24:	4603      	mov	r3, r0
 8003c26:	f003 0320 	and.w	r3, r3, #32
 8003c2a:	2b20      	cmp	r3, #32
 8003c2c:	f040 8082 	bne.w	8003d34 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003c30:	78fb      	ldrb	r3, [r7, #3]
 8003c32:	015a      	lsls	r2, r3, #5
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	4413      	add	r3, r2
 8003c38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	2320      	movs	r3, #32
 8003c40:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003c42:	78fa      	ldrb	r2, [r7, #3]
 8003c44:	6879      	ldr	r1, [r7, #4]
 8003c46:	4613      	mov	r3, r2
 8003c48:	011b      	lsls	r3, r3, #4
 8003c4a:	1a9b      	subs	r3, r3, r2
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	440b      	add	r3, r1
 8003c50:	3319      	adds	r3, #25
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d124      	bne.n	8003ca2 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003c58:	78fa      	ldrb	r2, [r7, #3]
 8003c5a:	6879      	ldr	r1, [r7, #4]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	011b      	lsls	r3, r3, #4
 8003c60:	1a9b      	subs	r3, r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	440b      	add	r3, r1
 8003c66:	3319      	adds	r3, #25
 8003c68:	2200      	movs	r2, #0
 8003c6a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003c6c:	78fa      	ldrb	r2, [r7, #3]
 8003c6e:	6879      	ldr	r1, [r7, #4]
 8003c70:	4613      	mov	r3, r2
 8003c72:	011b      	lsls	r3, r3, #4
 8003c74:	1a9b      	subs	r3, r3, r2
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	440b      	add	r3, r1
 8003c7a:	334c      	adds	r3, #76	@ 0x4c
 8003c7c:	2202      	movs	r2, #2
 8003c7e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003c80:	78fa      	ldrb	r2, [r7, #3]
 8003c82:	6879      	ldr	r1, [r7, #4]
 8003c84:	4613      	mov	r3, r2
 8003c86:	011b      	lsls	r3, r3, #4
 8003c88:	1a9b      	subs	r3, r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	440b      	add	r3, r1
 8003c8e:	334d      	adds	r3, #77	@ 0x4d
 8003c90:	2203      	movs	r2, #3
 8003c92:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	78fa      	ldrb	r2, [r7, #3]
 8003c9a:	4611      	mov	r1, r2
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f003 ffde 	bl	8007c5e <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003ca2:	78fa      	ldrb	r2, [r7, #3]
 8003ca4:	6879      	ldr	r1, [r7, #4]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	011b      	lsls	r3, r3, #4
 8003caa:	1a9b      	subs	r3, r3, r2
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	440b      	add	r3, r1
 8003cb0:	331a      	adds	r3, #26
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	f040 8437 	bne.w	8004528 <HCD_HC_OUT_IRQHandler+0x978>
 8003cba:	78fa      	ldrb	r2, [r7, #3]
 8003cbc:	6879      	ldr	r1, [r7, #4]
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	011b      	lsls	r3, r3, #4
 8003cc2:	1a9b      	subs	r3, r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	440b      	add	r3, r1
 8003cc8:	331b      	adds	r3, #27
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	f040 842b 	bne.w	8004528 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003cd2:	78fa      	ldrb	r2, [r7, #3]
 8003cd4:	6879      	ldr	r1, [r7, #4]
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	011b      	lsls	r3, r3, #4
 8003cda:	1a9b      	subs	r3, r3, r2
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	440b      	add	r3, r1
 8003ce0:	3326      	adds	r3, #38	@ 0x26
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d009      	beq.n	8003cfc <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003ce8:	78fa      	ldrb	r2, [r7, #3]
 8003cea:	6879      	ldr	r1, [r7, #4]
 8003cec:	4613      	mov	r3, r2
 8003cee:	011b      	lsls	r3, r3, #4
 8003cf0:	1a9b      	subs	r3, r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	440b      	add	r3, r1
 8003cf6:	331b      	adds	r3, #27
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003cfc:	78fa      	ldrb	r2, [r7, #3]
 8003cfe:	6879      	ldr	r1, [r7, #4]
 8003d00:	4613      	mov	r3, r2
 8003d02:	011b      	lsls	r3, r3, #4
 8003d04:	1a9b      	subs	r3, r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	440b      	add	r3, r1
 8003d0a:	334d      	adds	r3, #77	@ 0x4d
 8003d0c:	2203      	movs	r2, #3
 8003d0e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	78fa      	ldrb	r2, [r7, #3]
 8003d16:	4611      	mov	r1, r2
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f003 ffa0 	bl	8007c5e <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003d1e:	78fa      	ldrb	r2, [r7, #3]
 8003d20:	6879      	ldr	r1, [r7, #4]
 8003d22:	4613      	mov	r3, r2
 8003d24:	011b      	lsls	r3, r3, #4
 8003d26:	1a9b      	subs	r3, r3, r2
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	440b      	add	r3, r1
 8003d2c:	3344      	adds	r3, #68	@ 0x44
 8003d2e:	2200      	movs	r2, #0
 8003d30:	601a      	str	r2, [r3, #0]
 8003d32:	e3f9      	b.n	8004528 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	78fa      	ldrb	r2, [r7, #3]
 8003d3a:	4611      	mov	r1, r2
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f003 f9e4 	bl	800710a <USB_ReadChInterrupts>
 8003d42:	4603      	mov	r3, r0
 8003d44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d4c:	d111      	bne.n	8003d72 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003d4e:	78fb      	ldrb	r3, [r7, #3]
 8003d50:	015a      	lsls	r2, r3, #5
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	4413      	add	r3, r2
 8003d56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003d60:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	78fa      	ldrb	r2, [r7, #3]
 8003d68:	4611      	mov	r1, r2
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f003 ff77 	bl	8007c5e <USB_HC_Halt>
 8003d70:	e3da      	b.n	8004528 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	78fa      	ldrb	r2, [r7, #3]
 8003d78:	4611      	mov	r1, r2
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f003 f9c5 	bl	800710a <USB_ReadChInterrupts>
 8003d80:	4603      	mov	r3, r0
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d168      	bne.n	8003e5c <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003d8a:	78fa      	ldrb	r2, [r7, #3]
 8003d8c:	6879      	ldr	r1, [r7, #4]
 8003d8e:	4613      	mov	r3, r2
 8003d90:	011b      	lsls	r3, r3, #4
 8003d92:	1a9b      	subs	r3, r3, r2
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	440b      	add	r3, r1
 8003d98:	3344      	adds	r3, #68	@ 0x44
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	78fa      	ldrb	r2, [r7, #3]
 8003da4:	4611      	mov	r1, r2
 8003da6:	4618      	mov	r0, r3
 8003da8:	f003 f9af 	bl	800710a <USB_ReadChInterrupts>
 8003dac:	4603      	mov	r3, r0
 8003dae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003db2:	2b40      	cmp	r3, #64	@ 0x40
 8003db4:	d112      	bne.n	8003ddc <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003db6:	78fa      	ldrb	r2, [r7, #3]
 8003db8:	6879      	ldr	r1, [r7, #4]
 8003dba:	4613      	mov	r3, r2
 8003dbc:	011b      	lsls	r3, r3, #4
 8003dbe:	1a9b      	subs	r3, r3, r2
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	440b      	add	r3, r1
 8003dc4:	3319      	adds	r3, #25
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003dca:	78fb      	ldrb	r3, [r7, #3]
 8003dcc:	015a      	lsls	r2, r3, #5
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	2340      	movs	r3, #64	@ 0x40
 8003dda:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003ddc:	78fa      	ldrb	r2, [r7, #3]
 8003dde:	6879      	ldr	r1, [r7, #4]
 8003de0:	4613      	mov	r3, r2
 8003de2:	011b      	lsls	r3, r3, #4
 8003de4:	1a9b      	subs	r3, r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	440b      	add	r3, r1
 8003dea:	331b      	adds	r3, #27
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d019      	beq.n	8003e26 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003df2:	78fa      	ldrb	r2, [r7, #3]
 8003df4:	6879      	ldr	r1, [r7, #4]
 8003df6:	4613      	mov	r3, r2
 8003df8:	011b      	lsls	r3, r3, #4
 8003dfa:	1a9b      	subs	r3, r3, r2
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	440b      	add	r3, r1
 8003e00:	331b      	adds	r3, #27
 8003e02:	2200      	movs	r2, #0
 8003e04:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003e06:	78fb      	ldrb	r3, [r7, #3]
 8003e08:	015a      	lsls	r2, r3, #5
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	78fa      	ldrb	r2, [r7, #3]
 8003e16:	0151      	lsls	r1, r2, #5
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	440a      	add	r2, r1
 8003e1c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003e20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e24:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003e26:	78fb      	ldrb	r3, [r7, #3]
 8003e28:	015a      	lsls	r2, r3, #5
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e32:	461a      	mov	r2, r3
 8003e34:	2301      	movs	r3, #1
 8003e36:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003e38:	78fa      	ldrb	r2, [r7, #3]
 8003e3a:	6879      	ldr	r1, [r7, #4]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	011b      	lsls	r3, r3, #4
 8003e40:	1a9b      	subs	r3, r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	440b      	add	r3, r1
 8003e46:	334d      	adds	r3, #77	@ 0x4d
 8003e48:	2201      	movs	r2, #1
 8003e4a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	78fa      	ldrb	r2, [r7, #3]
 8003e52:	4611      	mov	r1, r2
 8003e54:	4618      	mov	r0, r3
 8003e56:	f003 ff02 	bl	8007c5e <USB_HC_Halt>
 8003e5a:	e365      	b.n	8004528 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	78fa      	ldrb	r2, [r7, #3]
 8003e62:	4611      	mov	r1, r2
 8003e64:	4618      	mov	r0, r3
 8003e66:	f003 f950 	bl	800710a <USB_ReadChInterrupts>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e70:	2b40      	cmp	r3, #64	@ 0x40
 8003e72:	d139      	bne.n	8003ee8 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003e74:	78fa      	ldrb	r2, [r7, #3]
 8003e76:	6879      	ldr	r1, [r7, #4]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	011b      	lsls	r3, r3, #4
 8003e7c:	1a9b      	subs	r3, r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	440b      	add	r3, r1
 8003e82:	334d      	adds	r3, #77	@ 0x4d
 8003e84:	2205      	movs	r2, #5
 8003e86:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003e88:	78fa      	ldrb	r2, [r7, #3]
 8003e8a:	6879      	ldr	r1, [r7, #4]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	011b      	lsls	r3, r3, #4
 8003e90:	1a9b      	subs	r3, r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	440b      	add	r3, r1
 8003e96:	331a      	adds	r3, #26
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d109      	bne.n	8003eb2 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003e9e:	78fa      	ldrb	r2, [r7, #3]
 8003ea0:	6879      	ldr	r1, [r7, #4]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	011b      	lsls	r3, r3, #4
 8003ea6:	1a9b      	subs	r3, r3, r2
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	440b      	add	r3, r1
 8003eac:	3319      	adds	r3, #25
 8003eae:	2201      	movs	r2, #1
 8003eb0:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003eb2:	78fa      	ldrb	r2, [r7, #3]
 8003eb4:	6879      	ldr	r1, [r7, #4]
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	011b      	lsls	r3, r3, #4
 8003eba:	1a9b      	subs	r3, r3, r2
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	440b      	add	r3, r1
 8003ec0:	3344      	adds	r3, #68	@ 0x44
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	78fa      	ldrb	r2, [r7, #3]
 8003ecc:	4611      	mov	r1, r2
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f003 fec5 	bl	8007c5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003ed4:	78fb      	ldrb	r3, [r7, #3]
 8003ed6:	015a      	lsls	r2, r3, #5
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	4413      	add	r3, r2
 8003edc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	2340      	movs	r3, #64	@ 0x40
 8003ee4:	6093      	str	r3, [r2, #8]
 8003ee6:	e31f      	b.n	8004528 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	78fa      	ldrb	r2, [r7, #3]
 8003eee:	4611      	mov	r1, r2
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f003 f90a 	bl	800710a <USB_ReadChInterrupts>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	f003 0308 	and.w	r3, r3, #8
 8003efc:	2b08      	cmp	r3, #8
 8003efe:	d11a      	bne.n	8003f36 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003f00:	78fb      	ldrb	r3, [r7, #3]
 8003f02:	015a      	lsls	r2, r3, #5
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	4413      	add	r3, r2
 8003f08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	2308      	movs	r3, #8
 8003f10:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003f12:	78fa      	ldrb	r2, [r7, #3]
 8003f14:	6879      	ldr	r1, [r7, #4]
 8003f16:	4613      	mov	r3, r2
 8003f18:	011b      	lsls	r3, r3, #4
 8003f1a:	1a9b      	subs	r3, r3, r2
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	440b      	add	r3, r1
 8003f20:	334d      	adds	r3, #77	@ 0x4d
 8003f22:	2206      	movs	r2, #6
 8003f24:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	78fa      	ldrb	r2, [r7, #3]
 8003f2c:	4611      	mov	r1, r2
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f003 fe95 	bl	8007c5e <USB_HC_Halt>
 8003f34:	e2f8      	b.n	8004528 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	78fa      	ldrb	r2, [r7, #3]
 8003f3c:	4611      	mov	r1, r2
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f003 f8e3 	bl	800710a <USB_ReadChInterrupts>
 8003f44:	4603      	mov	r3, r0
 8003f46:	f003 0310 	and.w	r3, r3, #16
 8003f4a:	2b10      	cmp	r3, #16
 8003f4c:	d144      	bne.n	8003fd8 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003f4e:	78fa      	ldrb	r2, [r7, #3]
 8003f50:	6879      	ldr	r1, [r7, #4]
 8003f52:	4613      	mov	r3, r2
 8003f54:	011b      	lsls	r3, r3, #4
 8003f56:	1a9b      	subs	r3, r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	440b      	add	r3, r1
 8003f5c:	3344      	adds	r3, #68	@ 0x44
 8003f5e:	2200      	movs	r2, #0
 8003f60:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003f62:	78fa      	ldrb	r2, [r7, #3]
 8003f64:	6879      	ldr	r1, [r7, #4]
 8003f66:	4613      	mov	r3, r2
 8003f68:	011b      	lsls	r3, r3, #4
 8003f6a:	1a9b      	subs	r3, r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	440b      	add	r3, r1
 8003f70:	334d      	adds	r3, #77	@ 0x4d
 8003f72:	2204      	movs	r2, #4
 8003f74:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003f76:	78fa      	ldrb	r2, [r7, #3]
 8003f78:	6879      	ldr	r1, [r7, #4]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	011b      	lsls	r3, r3, #4
 8003f7e:	1a9b      	subs	r3, r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	440b      	add	r3, r1
 8003f84:	3319      	adds	r3, #25
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d114      	bne.n	8003fb6 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003f8c:	78fa      	ldrb	r2, [r7, #3]
 8003f8e:	6879      	ldr	r1, [r7, #4]
 8003f90:	4613      	mov	r3, r2
 8003f92:	011b      	lsls	r3, r3, #4
 8003f94:	1a9b      	subs	r3, r3, r2
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	440b      	add	r3, r1
 8003f9a:	3318      	adds	r3, #24
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d109      	bne.n	8003fb6 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003fa2:	78fa      	ldrb	r2, [r7, #3]
 8003fa4:	6879      	ldr	r1, [r7, #4]
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	011b      	lsls	r3, r3, #4
 8003faa:	1a9b      	subs	r3, r3, r2
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	440b      	add	r3, r1
 8003fb0:	3319      	adds	r3, #25
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	78fa      	ldrb	r2, [r7, #3]
 8003fbc:	4611      	mov	r1, r2
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f003 fe4d 	bl	8007c5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003fc4:	78fb      	ldrb	r3, [r7, #3]
 8003fc6:	015a      	lsls	r2, r3, #5
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	4413      	add	r3, r2
 8003fcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	2310      	movs	r3, #16
 8003fd4:	6093      	str	r3, [r2, #8]
 8003fd6:	e2a7      	b.n	8004528 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	78fa      	ldrb	r2, [r7, #3]
 8003fde:	4611      	mov	r1, r2
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f003 f892 	bl	800710a <USB_ReadChInterrupts>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fec:	2b80      	cmp	r3, #128	@ 0x80
 8003fee:	f040 8083 	bne.w	80040f8 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	799b      	ldrb	r3, [r3, #6]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d111      	bne.n	800401e <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003ffa:	78fa      	ldrb	r2, [r7, #3]
 8003ffc:	6879      	ldr	r1, [r7, #4]
 8003ffe:	4613      	mov	r3, r2
 8004000:	011b      	lsls	r3, r3, #4
 8004002:	1a9b      	subs	r3, r3, r2
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	440b      	add	r3, r1
 8004008:	334d      	adds	r3, #77	@ 0x4d
 800400a:	2207      	movs	r2, #7
 800400c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	78fa      	ldrb	r2, [r7, #3]
 8004014:	4611      	mov	r1, r2
 8004016:	4618      	mov	r0, r3
 8004018:	f003 fe21 	bl	8007c5e <USB_HC_Halt>
 800401c:	e062      	b.n	80040e4 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800401e:	78fa      	ldrb	r2, [r7, #3]
 8004020:	6879      	ldr	r1, [r7, #4]
 8004022:	4613      	mov	r3, r2
 8004024:	011b      	lsls	r3, r3, #4
 8004026:	1a9b      	subs	r3, r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	440b      	add	r3, r1
 800402c:	3344      	adds	r3, #68	@ 0x44
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	1c59      	adds	r1, r3, #1
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	4613      	mov	r3, r2
 8004036:	011b      	lsls	r3, r3, #4
 8004038:	1a9b      	subs	r3, r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	4403      	add	r3, r0
 800403e:	3344      	adds	r3, #68	@ 0x44
 8004040:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004042:	78fa      	ldrb	r2, [r7, #3]
 8004044:	6879      	ldr	r1, [r7, #4]
 8004046:	4613      	mov	r3, r2
 8004048:	011b      	lsls	r3, r3, #4
 800404a:	1a9b      	subs	r3, r3, r2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	440b      	add	r3, r1
 8004050:	3344      	adds	r3, #68	@ 0x44
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2b02      	cmp	r3, #2
 8004056:	d922      	bls.n	800409e <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004058:	78fa      	ldrb	r2, [r7, #3]
 800405a:	6879      	ldr	r1, [r7, #4]
 800405c:	4613      	mov	r3, r2
 800405e:	011b      	lsls	r3, r3, #4
 8004060:	1a9b      	subs	r3, r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	440b      	add	r3, r1
 8004066:	3344      	adds	r3, #68	@ 0x44
 8004068:	2200      	movs	r2, #0
 800406a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800406c:	78fa      	ldrb	r2, [r7, #3]
 800406e:	6879      	ldr	r1, [r7, #4]
 8004070:	4613      	mov	r3, r2
 8004072:	011b      	lsls	r3, r3, #4
 8004074:	1a9b      	subs	r3, r3, r2
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	440b      	add	r3, r1
 800407a:	334c      	adds	r3, #76	@ 0x4c
 800407c:	2204      	movs	r2, #4
 800407e:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004080:	78fa      	ldrb	r2, [r7, #3]
 8004082:	6879      	ldr	r1, [r7, #4]
 8004084:	4613      	mov	r3, r2
 8004086:	011b      	lsls	r3, r3, #4
 8004088:	1a9b      	subs	r3, r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	440b      	add	r3, r1
 800408e:	334c      	adds	r3, #76	@ 0x4c
 8004090:	781a      	ldrb	r2, [r3, #0]
 8004092:	78fb      	ldrb	r3, [r7, #3]
 8004094:	4619      	mov	r1, r3
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f006 f940 	bl	800a31c <HAL_HCD_HC_NotifyURBChange_Callback>
 800409c:	e022      	b.n	80040e4 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800409e:	78fa      	ldrb	r2, [r7, #3]
 80040a0:	6879      	ldr	r1, [r7, #4]
 80040a2:	4613      	mov	r3, r2
 80040a4:	011b      	lsls	r3, r3, #4
 80040a6:	1a9b      	subs	r3, r3, r2
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	440b      	add	r3, r1
 80040ac:	334c      	adds	r3, #76	@ 0x4c
 80040ae:	2202      	movs	r2, #2
 80040b0:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80040b2:	78fb      	ldrb	r3, [r7, #3]
 80040b4:	015a      	lsls	r2, r3, #5
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	4413      	add	r3, r2
 80040ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80040c8:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80040d0:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80040d2:	78fb      	ldrb	r3, [r7, #3]
 80040d4:	015a      	lsls	r2, r3, #5
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	4413      	add	r3, r2
 80040da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040de:	461a      	mov	r2, r3
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80040e4:	78fb      	ldrb	r3, [r7, #3]
 80040e6:	015a      	lsls	r2, r3, #5
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	4413      	add	r3, r2
 80040ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040f0:	461a      	mov	r2, r3
 80040f2:	2380      	movs	r3, #128	@ 0x80
 80040f4:	6093      	str	r3, [r2, #8]
 80040f6:	e217      	b.n	8004528 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	78fa      	ldrb	r2, [r7, #3]
 80040fe:	4611      	mov	r1, r2
 8004100:	4618      	mov	r0, r3
 8004102:	f003 f802 	bl	800710a <USB_ReadChInterrupts>
 8004106:	4603      	mov	r3, r0
 8004108:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800410c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004110:	d11b      	bne.n	800414a <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004112:	78fa      	ldrb	r2, [r7, #3]
 8004114:	6879      	ldr	r1, [r7, #4]
 8004116:	4613      	mov	r3, r2
 8004118:	011b      	lsls	r3, r3, #4
 800411a:	1a9b      	subs	r3, r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	440b      	add	r3, r1
 8004120:	334d      	adds	r3, #77	@ 0x4d
 8004122:	2209      	movs	r2, #9
 8004124:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	78fa      	ldrb	r2, [r7, #3]
 800412c:	4611      	mov	r1, r2
 800412e:	4618      	mov	r0, r3
 8004130:	f003 fd95 	bl	8007c5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004134:	78fb      	ldrb	r3, [r7, #3]
 8004136:	015a      	lsls	r2, r3, #5
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	4413      	add	r3, r2
 800413c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004140:	461a      	mov	r2, r3
 8004142:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004146:	6093      	str	r3, [r2, #8]
 8004148:	e1ee      	b.n	8004528 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	78fa      	ldrb	r2, [r7, #3]
 8004150:	4611      	mov	r1, r2
 8004152:	4618      	mov	r0, r3
 8004154:	f002 ffd9 	bl	800710a <USB_ReadChInterrupts>
 8004158:	4603      	mov	r3, r0
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	2b02      	cmp	r3, #2
 8004160:	f040 81df 	bne.w	8004522 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004164:	78fb      	ldrb	r3, [r7, #3]
 8004166:	015a      	lsls	r2, r3, #5
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	4413      	add	r3, r2
 800416c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004170:	461a      	mov	r2, r3
 8004172:	2302      	movs	r3, #2
 8004174:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004176:	78fa      	ldrb	r2, [r7, #3]
 8004178:	6879      	ldr	r1, [r7, #4]
 800417a:	4613      	mov	r3, r2
 800417c:	011b      	lsls	r3, r3, #4
 800417e:	1a9b      	subs	r3, r3, r2
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	440b      	add	r3, r1
 8004184:	334d      	adds	r3, #77	@ 0x4d
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	2b01      	cmp	r3, #1
 800418a:	f040 8093 	bne.w	80042b4 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800418e:	78fa      	ldrb	r2, [r7, #3]
 8004190:	6879      	ldr	r1, [r7, #4]
 8004192:	4613      	mov	r3, r2
 8004194:	011b      	lsls	r3, r3, #4
 8004196:	1a9b      	subs	r3, r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	440b      	add	r3, r1
 800419c:	334d      	adds	r3, #77	@ 0x4d
 800419e:	2202      	movs	r2, #2
 80041a0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80041a2:	78fa      	ldrb	r2, [r7, #3]
 80041a4:	6879      	ldr	r1, [r7, #4]
 80041a6:	4613      	mov	r3, r2
 80041a8:	011b      	lsls	r3, r3, #4
 80041aa:	1a9b      	subs	r3, r3, r2
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	440b      	add	r3, r1
 80041b0:	334c      	adds	r3, #76	@ 0x4c
 80041b2:	2201      	movs	r2, #1
 80041b4:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80041b6:	78fa      	ldrb	r2, [r7, #3]
 80041b8:	6879      	ldr	r1, [r7, #4]
 80041ba:	4613      	mov	r3, r2
 80041bc:	011b      	lsls	r3, r3, #4
 80041be:	1a9b      	subs	r3, r3, r2
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	440b      	add	r3, r1
 80041c4:	3326      	adds	r3, #38	@ 0x26
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d00b      	beq.n	80041e4 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80041cc:	78fa      	ldrb	r2, [r7, #3]
 80041ce:	6879      	ldr	r1, [r7, #4]
 80041d0:	4613      	mov	r3, r2
 80041d2:	011b      	lsls	r3, r3, #4
 80041d4:	1a9b      	subs	r3, r3, r2
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	440b      	add	r3, r1
 80041da:	3326      	adds	r3, #38	@ 0x26
 80041dc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80041de:	2b03      	cmp	r3, #3
 80041e0:	f040 8190 	bne.w	8004504 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	799b      	ldrb	r3, [r3, #6]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d115      	bne.n	8004218 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80041ec:	78fa      	ldrb	r2, [r7, #3]
 80041ee:	6879      	ldr	r1, [r7, #4]
 80041f0:	4613      	mov	r3, r2
 80041f2:	011b      	lsls	r3, r3, #4
 80041f4:	1a9b      	subs	r3, r3, r2
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	440b      	add	r3, r1
 80041fa:	333d      	adds	r3, #61	@ 0x3d
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	78fa      	ldrb	r2, [r7, #3]
 8004200:	f083 0301 	eor.w	r3, r3, #1
 8004204:	b2d8      	uxtb	r0, r3
 8004206:	6879      	ldr	r1, [r7, #4]
 8004208:	4613      	mov	r3, r2
 800420a:	011b      	lsls	r3, r3, #4
 800420c:	1a9b      	subs	r3, r3, r2
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	440b      	add	r3, r1
 8004212:	333d      	adds	r3, #61	@ 0x3d
 8004214:	4602      	mov	r2, r0
 8004216:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	799b      	ldrb	r3, [r3, #6]
 800421c:	2b01      	cmp	r3, #1
 800421e:	f040 8171 	bne.w	8004504 <HCD_HC_OUT_IRQHandler+0x954>
 8004222:	78fa      	ldrb	r2, [r7, #3]
 8004224:	6879      	ldr	r1, [r7, #4]
 8004226:	4613      	mov	r3, r2
 8004228:	011b      	lsls	r3, r3, #4
 800422a:	1a9b      	subs	r3, r3, r2
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	440b      	add	r3, r1
 8004230:	3334      	adds	r3, #52	@ 0x34
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	f000 8165 	beq.w	8004504 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800423a:	78fa      	ldrb	r2, [r7, #3]
 800423c:	6879      	ldr	r1, [r7, #4]
 800423e:	4613      	mov	r3, r2
 8004240:	011b      	lsls	r3, r3, #4
 8004242:	1a9b      	subs	r3, r3, r2
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	440b      	add	r3, r1
 8004248:	3334      	adds	r3, #52	@ 0x34
 800424a:	6819      	ldr	r1, [r3, #0]
 800424c:	78fa      	ldrb	r2, [r7, #3]
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	4613      	mov	r3, r2
 8004252:	011b      	lsls	r3, r3, #4
 8004254:	1a9b      	subs	r3, r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	4403      	add	r3, r0
 800425a:	3328      	adds	r3, #40	@ 0x28
 800425c:	881b      	ldrh	r3, [r3, #0]
 800425e:	440b      	add	r3, r1
 8004260:	1e59      	subs	r1, r3, #1
 8004262:	78fa      	ldrb	r2, [r7, #3]
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	4613      	mov	r3, r2
 8004268:	011b      	lsls	r3, r3, #4
 800426a:	1a9b      	subs	r3, r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	4403      	add	r3, r0
 8004270:	3328      	adds	r3, #40	@ 0x28
 8004272:	881b      	ldrh	r3, [r3, #0]
 8004274:	fbb1 f3f3 	udiv	r3, r1, r3
 8004278:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	f003 0301 	and.w	r3, r3, #1
 8004280:	2b00      	cmp	r3, #0
 8004282:	f000 813f 	beq.w	8004504 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8004286:	78fa      	ldrb	r2, [r7, #3]
 8004288:	6879      	ldr	r1, [r7, #4]
 800428a:	4613      	mov	r3, r2
 800428c:	011b      	lsls	r3, r3, #4
 800428e:	1a9b      	subs	r3, r3, r2
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	440b      	add	r3, r1
 8004294:	333d      	adds	r3, #61	@ 0x3d
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	78fa      	ldrb	r2, [r7, #3]
 800429a:	f083 0301 	eor.w	r3, r3, #1
 800429e:	b2d8      	uxtb	r0, r3
 80042a0:	6879      	ldr	r1, [r7, #4]
 80042a2:	4613      	mov	r3, r2
 80042a4:	011b      	lsls	r3, r3, #4
 80042a6:	1a9b      	subs	r3, r3, r2
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	440b      	add	r3, r1
 80042ac:	333d      	adds	r3, #61	@ 0x3d
 80042ae:	4602      	mov	r2, r0
 80042b0:	701a      	strb	r2, [r3, #0]
 80042b2:	e127      	b.n	8004504 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80042b4:	78fa      	ldrb	r2, [r7, #3]
 80042b6:	6879      	ldr	r1, [r7, #4]
 80042b8:	4613      	mov	r3, r2
 80042ba:	011b      	lsls	r3, r3, #4
 80042bc:	1a9b      	subs	r3, r3, r2
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	440b      	add	r3, r1
 80042c2:	334d      	adds	r3, #77	@ 0x4d
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	2b03      	cmp	r3, #3
 80042c8:	d120      	bne.n	800430c <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80042ca:	78fa      	ldrb	r2, [r7, #3]
 80042cc:	6879      	ldr	r1, [r7, #4]
 80042ce:	4613      	mov	r3, r2
 80042d0:	011b      	lsls	r3, r3, #4
 80042d2:	1a9b      	subs	r3, r3, r2
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	440b      	add	r3, r1
 80042d8:	334d      	adds	r3, #77	@ 0x4d
 80042da:	2202      	movs	r2, #2
 80042dc:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80042de:	78fa      	ldrb	r2, [r7, #3]
 80042e0:	6879      	ldr	r1, [r7, #4]
 80042e2:	4613      	mov	r3, r2
 80042e4:	011b      	lsls	r3, r3, #4
 80042e6:	1a9b      	subs	r3, r3, r2
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	440b      	add	r3, r1
 80042ec:	331b      	adds	r3, #27
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	f040 8107 	bne.w	8004504 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80042f6:	78fa      	ldrb	r2, [r7, #3]
 80042f8:	6879      	ldr	r1, [r7, #4]
 80042fa:	4613      	mov	r3, r2
 80042fc:	011b      	lsls	r3, r3, #4
 80042fe:	1a9b      	subs	r3, r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	440b      	add	r3, r1
 8004304:	334c      	adds	r3, #76	@ 0x4c
 8004306:	2202      	movs	r2, #2
 8004308:	701a      	strb	r2, [r3, #0]
 800430a:	e0fb      	b.n	8004504 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800430c:	78fa      	ldrb	r2, [r7, #3]
 800430e:	6879      	ldr	r1, [r7, #4]
 8004310:	4613      	mov	r3, r2
 8004312:	011b      	lsls	r3, r3, #4
 8004314:	1a9b      	subs	r3, r3, r2
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	440b      	add	r3, r1
 800431a:	334d      	adds	r3, #77	@ 0x4d
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	2b04      	cmp	r3, #4
 8004320:	d13a      	bne.n	8004398 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004322:	78fa      	ldrb	r2, [r7, #3]
 8004324:	6879      	ldr	r1, [r7, #4]
 8004326:	4613      	mov	r3, r2
 8004328:	011b      	lsls	r3, r3, #4
 800432a:	1a9b      	subs	r3, r3, r2
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	440b      	add	r3, r1
 8004330:	334d      	adds	r3, #77	@ 0x4d
 8004332:	2202      	movs	r2, #2
 8004334:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004336:	78fa      	ldrb	r2, [r7, #3]
 8004338:	6879      	ldr	r1, [r7, #4]
 800433a:	4613      	mov	r3, r2
 800433c:	011b      	lsls	r3, r3, #4
 800433e:	1a9b      	subs	r3, r3, r2
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	440b      	add	r3, r1
 8004344:	334c      	adds	r3, #76	@ 0x4c
 8004346:	2202      	movs	r2, #2
 8004348:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800434a:	78fa      	ldrb	r2, [r7, #3]
 800434c:	6879      	ldr	r1, [r7, #4]
 800434e:	4613      	mov	r3, r2
 8004350:	011b      	lsls	r3, r3, #4
 8004352:	1a9b      	subs	r3, r3, r2
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	440b      	add	r3, r1
 8004358:	331b      	adds	r3, #27
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	2b01      	cmp	r3, #1
 800435e:	f040 80d1 	bne.w	8004504 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8004362:	78fa      	ldrb	r2, [r7, #3]
 8004364:	6879      	ldr	r1, [r7, #4]
 8004366:	4613      	mov	r3, r2
 8004368:	011b      	lsls	r3, r3, #4
 800436a:	1a9b      	subs	r3, r3, r2
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	440b      	add	r3, r1
 8004370:	331b      	adds	r3, #27
 8004372:	2200      	movs	r2, #0
 8004374:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004376:	78fb      	ldrb	r3, [r7, #3]
 8004378:	015a      	lsls	r2, r3, #5
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	4413      	add	r3, r2
 800437e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	78fa      	ldrb	r2, [r7, #3]
 8004386:	0151      	lsls	r1, r2, #5
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	440a      	add	r2, r1
 800438c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004390:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004394:	6053      	str	r3, [r2, #4]
 8004396:	e0b5      	b.n	8004504 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004398:	78fa      	ldrb	r2, [r7, #3]
 800439a:	6879      	ldr	r1, [r7, #4]
 800439c:	4613      	mov	r3, r2
 800439e:	011b      	lsls	r3, r3, #4
 80043a0:	1a9b      	subs	r3, r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	440b      	add	r3, r1
 80043a6:	334d      	adds	r3, #77	@ 0x4d
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	2b05      	cmp	r3, #5
 80043ac:	d114      	bne.n	80043d8 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80043ae:	78fa      	ldrb	r2, [r7, #3]
 80043b0:	6879      	ldr	r1, [r7, #4]
 80043b2:	4613      	mov	r3, r2
 80043b4:	011b      	lsls	r3, r3, #4
 80043b6:	1a9b      	subs	r3, r3, r2
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	440b      	add	r3, r1
 80043bc:	334d      	adds	r3, #77	@ 0x4d
 80043be:	2202      	movs	r2, #2
 80043c0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80043c2:	78fa      	ldrb	r2, [r7, #3]
 80043c4:	6879      	ldr	r1, [r7, #4]
 80043c6:	4613      	mov	r3, r2
 80043c8:	011b      	lsls	r3, r3, #4
 80043ca:	1a9b      	subs	r3, r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	440b      	add	r3, r1
 80043d0:	334c      	adds	r3, #76	@ 0x4c
 80043d2:	2202      	movs	r2, #2
 80043d4:	701a      	strb	r2, [r3, #0]
 80043d6:	e095      	b.n	8004504 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80043d8:	78fa      	ldrb	r2, [r7, #3]
 80043da:	6879      	ldr	r1, [r7, #4]
 80043dc:	4613      	mov	r3, r2
 80043de:	011b      	lsls	r3, r3, #4
 80043e0:	1a9b      	subs	r3, r3, r2
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	440b      	add	r3, r1
 80043e6:	334d      	adds	r3, #77	@ 0x4d
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	2b06      	cmp	r3, #6
 80043ec:	d114      	bne.n	8004418 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80043ee:	78fa      	ldrb	r2, [r7, #3]
 80043f0:	6879      	ldr	r1, [r7, #4]
 80043f2:	4613      	mov	r3, r2
 80043f4:	011b      	lsls	r3, r3, #4
 80043f6:	1a9b      	subs	r3, r3, r2
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	440b      	add	r3, r1
 80043fc:	334d      	adds	r3, #77	@ 0x4d
 80043fe:	2202      	movs	r2, #2
 8004400:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8004402:	78fa      	ldrb	r2, [r7, #3]
 8004404:	6879      	ldr	r1, [r7, #4]
 8004406:	4613      	mov	r3, r2
 8004408:	011b      	lsls	r3, r3, #4
 800440a:	1a9b      	subs	r3, r3, r2
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	440b      	add	r3, r1
 8004410:	334c      	adds	r3, #76	@ 0x4c
 8004412:	2205      	movs	r2, #5
 8004414:	701a      	strb	r2, [r3, #0]
 8004416:	e075      	b.n	8004504 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004418:	78fa      	ldrb	r2, [r7, #3]
 800441a:	6879      	ldr	r1, [r7, #4]
 800441c:	4613      	mov	r3, r2
 800441e:	011b      	lsls	r3, r3, #4
 8004420:	1a9b      	subs	r3, r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	440b      	add	r3, r1
 8004426:	334d      	adds	r3, #77	@ 0x4d
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	2b07      	cmp	r3, #7
 800442c:	d00a      	beq.n	8004444 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800442e:	78fa      	ldrb	r2, [r7, #3]
 8004430:	6879      	ldr	r1, [r7, #4]
 8004432:	4613      	mov	r3, r2
 8004434:	011b      	lsls	r3, r3, #4
 8004436:	1a9b      	subs	r3, r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	440b      	add	r3, r1
 800443c:	334d      	adds	r3, #77	@ 0x4d
 800443e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004440:	2b09      	cmp	r3, #9
 8004442:	d170      	bne.n	8004526 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004444:	78fa      	ldrb	r2, [r7, #3]
 8004446:	6879      	ldr	r1, [r7, #4]
 8004448:	4613      	mov	r3, r2
 800444a:	011b      	lsls	r3, r3, #4
 800444c:	1a9b      	subs	r3, r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	440b      	add	r3, r1
 8004452:	334d      	adds	r3, #77	@ 0x4d
 8004454:	2202      	movs	r2, #2
 8004456:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004458:	78fa      	ldrb	r2, [r7, #3]
 800445a:	6879      	ldr	r1, [r7, #4]
 800445c:	4613      	mov	r3, r2
 800445e:	011b      	lsls	r3, r3, #4
 8004460:	1a9b      	subs	r3, r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	440b      	add	r3, r1
 8004466:	3344      	adds	r3, #68	@ 0x44
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	1c59      	adds	r1, r3, #1
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	4613      	mov	r3, r2
 8004470:	011b      	lsls	r3, r3, #4
 8004472:	1a9b      	subs	r3, r3, r2
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	4403      	add	r3, r0
 8004478:	3344      	adds	r3, #68	@ 0x44
 800447a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800447c:	78fa      	ldrb	r2, [r7, #3]
 800447e:	6879      	ldr	r1, [r7, #4]
 8004480:	4613      	mov	r3, r2
 8004482:	011b      	lsls	r3, r3, #4
 8004484:	1a9b      	subs	r3, r3, r2
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	440b      	add	r3, r1
 800448a:	3344      	adds	r3, #68	@ 0x44
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2b02      	cmp	r3, #2
 8004490:	d914      	bls.n	80044bc <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004492:	78fa      	ldrb	r2, [r7, #3]
 8004494:	6879      	ldr	r1, [r7, #4]
 8004496:	4613      	mov	r3, r2
 8004498:	011b      	lsls	r3, r3, #4
 800449a:	1a9b      	subs	r3, r3, r2
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	440b      	add	r3, r1
 80044a0:	3344      	adds	r3, #68	@ 0x44
 80044a2:	2200      	movs	r2, #0
 80044a4:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80044a6:	78fa      	ldrb	r2, [r7, #3]
 80044a8:	6879      	ldr	r1, [r7, #4]
 80044aa:	4613      	mov	r3, r2
 80044ac:	011b      	lsls	r3, r3, #4
 80044ae:	1a9b      	subs	r3, r3, r2
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	440b      	add	r3, r1
 80044b4:	334c      	adds	r3, #76	@ 0x4c
 80044b6:	2204      	movs	r2, #4
 80044b8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80044ba:	e022      	b.n	8004502 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80044bc:	78fa      	ldrb	r2, [r7, #3]
 80044be:	6879      	ldr	r1, [r7, #4]
 80044c0:	4613      	mov	r3, r2
 80044c2:	011b      	lsls	r3, r3, #4
 80044c4:	1a9b      	subs	r3, r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	440b      	add	r3, r1
 80044ca:	334c      	adds	r3, #76	@ 0x4c
 80044cc:	2202      	movs	r2, #2
 80044ce:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80044d0:	78fb      	ldrb	r3, [r7, #3]
 80044d2:	015a      	lsls	r2, r3, #5
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	4413      	add	r3, r2
 80044d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80044e6:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80044ee:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80044f0:	78fb      	ldrb	r3, [r7, #3]
 80044f2:	015a      	lsls	r2, r3, #5
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	4413      	add	r3, r2
 80044f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044fc:	461a      	mov	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004502:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004504:	78fa      	ldrb	r2, [r7, #3]
 8004506:	6879      	ldr	r1, [r7, #4]
 8004508:	4613      	mov	r3, r2
 800450a:	011b      	lsls	r3, r3, #4
 800450c:	1a9b      	subs	r3, r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	440b      	add	r3, r1
 8004512:	334c      	adds	r3, #76	@ 0x4c
 8004514:	781a      	ldrb	r2, [r3, #0]
 8004516:	78fb      	ldrb	r3, [r7, #3]
 8004518:	4619      	mov	r1, r3
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f005 fefe 	bl	800a31c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004520:	e002      	b.n	8004528 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004522:	bf00      	nop
 8004524:	e000      	b.n	8004528 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8004526:	bf00      	nop
  }
}
 8004528:	3718      	adds	r7, #24
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}

0800452e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800452e:	b580      	push	{r7, lr}
 8004530:	b08a      	sub	sp, #40	@ 0x28
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800453c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800453e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	6a1b      	ldr	r3, [r3, #32]
 8004546:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	f003 030f 	and.w	r3, r3, #15
 800454e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	0c5b      	lsrs	r3, r3, #17
 8004554:	f003 030f 	and.w	r3, r3, #15
 8004558:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	091b      	lsrs	r3, r3, #4
 800455e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004562:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	2b02      	cmp	r3, #2
 8004568:	d004      	beq.n	8004574 <HCD_RXQLVL_IRQHandler+0x46>
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	2b05      	cmp	r3, #5
 800456e:	f000 80b6 	beq.w	80046de <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004572:	e0b7      	b.n	80046e4 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	2b00      	cmp	r3, #0
 8004578:	f000 80b3 	beq.w	80046e2 <HCD_RXQLVL_IRQHandler+0x1b4>
 800457c:	6879      	ldr	r1, [r7, #4]
 800457e:	69ba      	ldr	r2, [r7, #24]
 8004580:	4613      	mov	r3, r2
 8004582:	011b      	lsls	r3, r3, #4
 8004584:	1a9b      	subs	r3, r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	440b      	add	r3, r1
 800458a:	332c      	adds	r3, #44	@ 0x2c
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2b00      	cmp	r3, #0
 8004590:	f000 80a7 	beq.w	80046e2 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004594:	6879      	ldr	r1, [r7, #4]
 8004596:	69ba      	ldr	r2, [r7, #24]
 8004598:	4613      	mov	r3, r2
 800459a:	011b      	lsls	r3, r3, #4
 800459c:	1a9b      	subs	r3, r3, r2
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	440b      	add	r3, r1
 80045a2:	3338      	adds	r3, #56	@ 0x38
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	18d1      	adds	r1, r2, r3
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	4613      	mov	r3, r2
 80045b0:	011b      	lsls	r3, r3, #4
 80045b2:	1a9b      	subs	r3, r3, r2
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	4403      	add	r3, r0
 80045b8:	3334      	adds	r3, #52	@ 0x34
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4299      	cmp	r1, r3
 80045be:	f200 8083 	bhi.w	80046c8 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6818      	ldr	r0, [r3, #0]
 80045c6:	6879      	ldr	r1, [r7, #4]
 80045c8:	69ba      	ldr	r2, [r7, #24]
 80045ca:	4613      	mov	r3, r2
 80045cc:	011b      	lsls	r3, r3, #4
 80045ce:	1a9b      	subs	r3, r3, r2
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	440b      	add	r3, r1
 80045d4:	332c      	adds	r3, #44	@ 0x2c
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	b292      	uxth	r2, r2
 80045dc:	4619      	mov	r1, r3
 80045de:	f002 fd29 	bl	8007034 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80045e2:	6879      	ldr	r1, [r7, #4]
 80045e4:	69ba      	ldr	r2, [r7, #24]
 80045e6:	4613      	mov	r3, r2
 80045e8:	011b      	lsls	r3, r3, #4
 80045ea:	1a9b      	subs	r3, r3, r2
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	440b      	add	r3, r1
 80045f0:	332c      	adds	r3, #44	@ 0x2c
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	18d1      	adds	r1, r2, r3
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	69ba      	ldr	r2, [r7, #24]
 80045fc:	4613      	mov	r3, r2
 80045fe:	011b      	lsls	r3, r3, #4
 8004600:	1a9b      	subs	r3, r3, r2
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	4403      	add	r3, r0
 8004606:	332c      	adds	r3, #44	@ 0x2c
 8004608:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800460a:	6879      	ldr	r1, [r7, #4]
 800460c:	69ba      	ldr	r2, [r7, #24]
 800460e:	4613      	mov	r3, r2
 8004610:	011b      	lsls	r3, r3, #4
 8004612:	1a9b      	subs	r3, r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	440b      	add	r3, r1
 8004618:	3338      	adds	r3, #56	@ 0x38
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	18d1      	adds	r1, r2, r3
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	69ba      	ldr	r2, [r7, #24]
 8004624:	4613      	mov	r3, r2
 8004626:	011b      	lsls	r3, r3, #4
 8004628:	1a9b      	subs	r3, r3, r2
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	4403      	add	r3, r0
 800462e:	3338      	adds	r3, #56	@ 0x38
 8004630:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	015a      	lsls	r2, r3, #5
 8004636:	6a3b      	ldr	r3, [r7, #32]
 8004638:	4413      	add	r3, r2
 800463a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	0cdb      	lsrs	r3, r3, #19
 8004642:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004646:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004648:	6879      	ldr	r1, [r7, #4]
 800464a:	69ba      	ldr	r2, [r7, #24]
 800464c:	4613      	mov	r3, r2
 800464e:	011b      	lsls	r3, r3, #4
 8004650:	1a9b      	subs	r3, r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	440b      	add	r3, r1
 8004656:	3328      	adds	r3, #40	@ 0x28
 8004658:	881b      	ldrh	r3, [r3, #0]
 800465a:	461a      	mov	r2, r3
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	4293      	cmp	r3, r2
 8004660:	d13f      	bne.n	80046e2 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d03c      	beq.n	80046e2 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	015a      	lsls	r2, r3, #5
 800466c:	6a3b      	ldr	r3, [r7, #32]
 800466e:	4413      	add	r3, r2
 8004670:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800467e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004686:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	015a      	lsls	r2, r3, #5
 800468c:	6a3b      	ldr	r3, [r7, #32]
 800468e:	4413      	add	r3, r2
 8004690:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004694:	461a      	mov	r2, r3
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800469a:	6879      	ldr	r1, [r7, #4]
 800469c:	69ba      	ldr	r2, [r7, #24]
 800469e:	4613      	mov	r3, r2
 80046a0:	011b      	lsls	r3, r3, #4
 80046a2:	1a9b      	subs	r3, r3, r2
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	440b      	add	r3, r1
 80046a8:	333c      	adds	r3, #60	@ 0x3c
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	f083 0301 	eor.w	r3, r3, #1
 80046b0:	b2d8      	uxtb	r0, r3
 80046b2:	6879      	ldr	r1, [r7, #4]
 80046b4:	69ba      	ldr	r2, [r7, #24]
 80046b6:	4613      	mov	r3, r2
 80046b8:	011b      	lsls	r3, r3, #4
 80046ba:	1a9b      	subs	r3, r3, r2
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	440b      	add	r3, r1
 80046c0:	333c      	adds	r3, #60	@ 0x3c
 80046c2:	4602      	mov	r2, r0
 80046c4:	701a      	strb	r2, [r3, #0]
      break;
 80046c6:	e00c      	b.n	80046e2 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80046c8:	6879      	ldr	r1, [r7, #4]
 80046ca:	69ba      	ldr	r2, [r7, #24]
 80046cc:	4613      	mov	r3, r2
 80046ce:	011b      	lsls	r3, r3, #4
 80046d0:	1a9b      	subs	r3, r3, r2
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	440b      	add	r3, r1
 80046d6:	334c      	adds	r3, #76	@ 0x4c
 80046d8:	2204      	movs	r2, #4
 80046da:	701a      	strb	r2, [r3, #0]
      break;
 80046dc:	e001      	b.n	80046e2 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80046de:	bf00      	nop
 80046e0:	e000      	b.n	80046e4 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80046e2:	bf00      	nop
  }
}
 80046e4:	bf00      	nop
 80046e6:	3728      	adds	r7, #40	@ 0x28
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b086      	sub	sp, #24
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004718:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f003 0302 	and.w	r3, r3, #2
 8004720:	2b02      	cmp	r3, #2
 8004722:	d10b      	bne.n	800473c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	2b01      	cmp	r3, #1
 800472c:	d102      	bne.n	8004734 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f005 fdd8 	bl	800a2e4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	f043 0302 	orr.w	r3, r3, #2
 800473a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f003 0308 	and.w	r3, r3, #8
 8004742:	2b08      	cmp	r3, #8
 8004744:	d132      	bne.n	80047ac <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	f043 0308 	orr.w	r3, r3, #8
 800474c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f003 0304 	and.w	r3, r3, #4
 8004754:	2b04      	cmp	r3, #4
 8004756:	d126      	bne.n	80047a6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	7a5b      	ldrb	r3, [r3, #9]
 800475c:	2b02      	cmp	r3, #2
 800475e:	d113      	bne.n	8004788 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004766:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800476a:	d106      	bne.n	800477a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2102      	movs	r1, #2
 8004772:	4618      	mov	r0, r3
 8004774:	f002 fdf4 	bl	8007360 <USB_InitFSLSPClkSel>
 8004778:	e011      	b.n	800479e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2101      	movs	r1, #1
 8004780:	4618      	mov	r0, r3
 8004782:	f002 fded 	bl	8007360 <USB_InitFSLSPClkSel>
 8004786:	e00a      	b.n	800479e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	79db      	ldrb	r3, [r3, #7]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d106      	bne.n	800479e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004796:	461a      	mov	r2, r3
 8004798:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800479c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f005 fdca 	bl	800a338 <HAL_HCD_PortEnabled_Callback>
 80047a4:	e002      	b.n	80047ac <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f005 fdd4 	bl	800a354 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f003 0320 	and.w	r3, r3, #32
 80047b2:	2b20      	cmp	r3, #32
 80047b4:	d103      	bne.n	80047be <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	f043 0320 	orr.w	r3, r3, #32
 80047bc:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80047c4:	461a      	mov	r2, r3
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	6013      	str	r3, [r2, #0]
}
 80047ca:	bf00      	nop
 80047cc:	3718      	adds	r7, #24
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
	...

080047d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d101      	bne.n	80047e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e12b      	b.n	8004a3e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d106      	bne.n	8004800 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f7fc fbea 	bl	8000fd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2224      	movs	r2, #36	@ 0x24
 8004804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f022 0201 	bic.w	r2, r2, #1
 8004816:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004826:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004836:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004838:	f001 fa20 	bl	8005c7c <HAL_RCC_GetPCLK1Freq>
 800483c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	4a81      	ldr	r2, [pc, #516]	@ (8004a48 <HAL_I2C_Init+0x274>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d807      	bhi.n	8004858 <HAL_I2C_Init+0x84>
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	4a80      	ldr	r2, [pc, #512]	@ (8004a4c <HAL_I2C_Init+0x278>)
 800484c:	4293      	cmp	r3, r2
 800484e:	bf94      	ite	ls
 8004850:	2301      	movls	r3, #1
 8004852:	2300      	movhi	r3, #0
 8004854:	b2db      	uxtb	r3, r3
 8004856:	e006      	b.n	8004866 <HAL_I2C_Init+0x92>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	4a7d      	ldr	r2, [pc, #500]	@ (8004a50 <HAL_I2C_Init+0x27c>)
 800485c:	4293      	cmp	r3, r2
 800485e:	bf94      	ite	ls
 8004860:	2301      	movls	r3, #1
 8004862:	2300      	movhi	r3, #0
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b00      	cmp	r3, #0
 8004868:	d001      	beq.n	800486e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e0e7      	b.n	8004a3e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	4a78      	ldr	r2, [pc, #480]	@ (8004a54 <HAL_I2C_Init+0x280>)
 8004872:	fba2 2303 	umull	r2, r3, r2, r3
 8004876:	0c9b      	lsrs	r3, r3, #18
 8004878:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68ba      	ldr	r2, [r7, #8]
 800488a:	430a      	orrs	r2, r1
 800488c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	6a1b      	ldr	r3, [r3, #32]
 8004894:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	4a6a      	ldr	r2, [pc, #424]	@ (8004a48 <HAL_I2C_Init+0x274>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d802      	bhi.n	80048a8 <HAL_I2C_Init+0xd4>
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	3301      	adds	r3, #1
 80048a6:	e009      	b.n	80048bc <HAL_I2C_Init+0xe8>
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80048ae:	fb02 f303 	mul.w	r3, r2, r3
 80048b2:	4a69      	ldr	r2, [pc, #420]	@ (8004a58 <HAL_I2C_Init+0x284>)
 80048b4:	fba2 2303 	umull	r2, r3, r2, r3
 80048b8:	099b      	lsrs	r3, r3, #6
 80048ba:	3301      	adds	r3, #1
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	6812      	ldr	r2, [r2, #0]
 80048c0:	430b      	orrs	r3, r1
 80048c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	69db      	ldr	r3, [r3, #28]
 80048ca:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80048ce:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	495c      	ldr	r1, [pc, #368]	@ (8004a48 <HAL_I2C_Init+0x274>)
 80048d8:	428b      	cmp	r3, r1
 80048da:	d819      	bhi.n	8004910 <HAL_I2C_Init+0x13c>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	1e59      	subs	r1, r3, #1
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	005b      	lsls	r3, r3, #1
 80048e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80048ea:	1c59      	adds	r1, r3, #1
 80048ec:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80048f0:	400b      	ands	r3, r1
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00a      	beq.n	800490c <HAL_I2C_Init+0x138>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	1e59      	subs	r1, r3, #1
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	005b      	lsls	r3, r3, #1
 8004900:	fbb1 f3f3 	udiv	r3, r1, r3
 8004904:	3301      	adds	r3, #1
 8004906:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800490a:	e051      	b.n	80049b0 <HAL_I2C_Init+0x1dc>
 800490c:	2304      	movs	r3, #4
 800490e:	e04f      	b.n	80049b0 <HAL_I2C_Init+0x1dc>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d111      	bne.n	800493c <HAL_I2C_Init+0x168>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	1e58      	subs	r0, r3, #1
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6859      	ldr	r1, [r3, #4]
 8004920:	460b      	mov	r3, r1
 8004922:	005b      	lsls	r3, r3, #1
 8004924:	440b      	add	r3, r1
 8004926:	fbb0 f3f3 	udiv	r3, r0, r3
 800492a:	3301      	adds	r3, #1
 800492c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004930:	2b00      	cmp	r3, #0
 8004932:	bf0c      	ite	eq
 8004934:	2301      	moveq	r3, #1
 8004936:	2300      	movne	r3, #0
 8004938:	b2db      	uxtb	r3, r3
 800493a:	e012      	b.n	8004962 <HAL_I2C_Init+0x18e>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	1e58      	subs	r0, r3, #1
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6859      	ldr	r1, [r3, #4]
 8004944:	460b      	mov	r3, r1
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	440b      	add	r3, r1
 800494a:	0099      	lsls	r1, r3, #2
 800494c:	440b      	add	r3, r1
 800494e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004952:	3301      	adds	r3, #1
 8004954:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004958:	2b00      	cmp	r3, #0
 800495a:	bf0c      	ite	eq
 800495c:	2301      	moveq	r3, #1
 800495e:	2300      	movne	r3, #0
 8004960:	b2db      	uxtb	r3, r3
 8004962:	2b00      	cmp	r3, #0
 8004964:	d001      	beq.n	800496a <HAL_I2C_Init+0x196>
 8004966:	2301      	movs	r3, #1
 8004968:	e022      	b.n	80049b0 <HAL_I2C_Init+0x1dc>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d10e      	bne.n	8004990 <HAL_I2C_Init+0x1bc>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	1e58      	subs	r0, r3, #1
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6859      	ldr	r1, [r3, #4]
 800497a:	460b      	mov	r3, r1
 800497c:	005b      	lsls	r3, r3, #1
 800497e:	440b      	add	r3, r1
 8004980:	fbb0 f3f3 	udiv	r3, r0, r3
 8004984:	3301      	adds	r3, #1
 8004986:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800498a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800498e:	e00f      	b.n	80049b0 <HAL_I2C_Init+0x1dc>
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	1e58      	subs	r0, r3, #1
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6859      	ldr	r1, [r3, #4]
 8004998:	460b      	mov	r3, r1
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	440b      	add	r3, r1
 800499e:	0099      	lsls	r1, r3, #2
 80049a0:	440b      	add	r3, r1
 80049a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80049a6:	3301      	adds	r3, #1
 80049a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049ac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80049b0:	6879      	ldr	r1, [r7, #4]
 80049b2:	6809      	ldr	r1, [r1, #0]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	69da      	ldr	r2, [r3, #28]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a1b      	ldr	r3, [r3, #32]
 80049ca:	431a      	orrs	r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	430a      	orrs	r2, r1
 80049d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80049de:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	6911      	ldr	r1, [r2, #16]
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	68d2      	ldr	r2, [r2, #12]
 80049ea:	4311      	orrs	r1, r2
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	6812      	ldr	r2, [r2, #0]
 80049f0:	430b      	orrs	r3, r1
 80049f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	695a      	ldr	r2, [r3, #20]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	699b      	ldr	r3, [r3, #24]
 8004a06:	431a      	orrs	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	430a      	orrs	r2, r1
 8004a0e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f042 0201 	orr.w	r2, r2, #1
 8004a1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2220      	movs	r2, #32
 8004a2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3710      	adds	r7, #16
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	000186a0 	.word	0x000186a0
 8004a4c:	001e847f 	.word	0x001e847f
 8004a50:	003d08ff 	.word	0x003d08ff
 8004a54:	431bde83 	.word	0x431bde83
 8004a58:	10624dd3 	.word	0x10624dd3

08004a5c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b088      	sub	sp, #32
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d101      	bne.n	8004a6e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e128      	b.n	8004cc0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d109      	bne.n	8004a8e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a90      	ldr	r2, [pc, #576]	@ (8004cc8 <HAL_I2S_Init+0x26c>)
 8004a86:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f7fc faeb 	bl	8001064 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2202      	movs	r2, #2
 8004a92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	69db      	ldr	r3, [r3, #28]
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	6812      	ldr	r2, [r2, #0]
 8004aa0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004aa4:	f023 030f 	bic.w	r3, r3, #15
 8004aa8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2202      	movs	r2, #2
 8004ab0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d060      	beq.n	8004b7c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d102      	bne.n	8004ac8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004ac2:	2310      	movs	r3, #16
 8004ac4:	617b      	str	r3, [r7, #20]
 8004ac6:	e001      	b.n	8004acc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004ac8:	2320      	movs	r3, #32
 8004aca:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	2b20      	cmp	r3, #32
 8004ad2:	d802      	bhi.n	8004ada <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	005b      	lsls	r3, r3, #1
 8004ad8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004ada:	2001      	movs	r0, #1
 8004adc:	f001 f9c4 	bl	8005e68 <HAL_RCCEx_GetPeriphCLKFreq>
 8004ae0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004aea:	d125      	bne.n	8004b38 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d010      	beq.n	8004b16 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	68fa      	ldr	r2, [r7, #12]
 8004afa:	fbb2 f2f3 	udiv	r2, r2, r3
 8004afe:	4613      	mov	r3, r2
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	4413      	add	r3, r2
 8004b04:	005b      	lsls	r3, r3, #1
 8004b06:	461a      	mov	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	695b      	ldr	r3, [r3, #20]
 8004b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b10:	3305      	adds	r3, #5
 8004b12:	613b      	str	r3, [r7, #16]
 8004b14:	e01f      	b.n	8004b56 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	00db      	lsls	r3, r3, #3
 8004b1a:	68fa      	ldr	r2, [r7, #12]
 8004b1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b20:	4613      	mov	r3, r2
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	4413      	add	r3, r2
 8004b26:	005b      	lsls	r3, r3, #1
 8004b28:	461a      	mov	r2, r3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b32:	3305      	adds	r3, #5
 8004b34:	613b      	str	r3, [r7, #16]
 8004b36:	e00e      	b.n	8004b56 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b40:	4613      	mov	r3, r2
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	4413      	add	r3, r2
 8004b46:	005b      	lsls	r3, r3, #1
 8004b48:	461a      	mov	r2, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	695b      	ldr	r3, [r3, #20]
 8004b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b52:	3305      	adds	r3, #5
 8004b54:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	4a5c      	ldr	r2, [pc, #368]	@ (8004ccc <HAL_I2S_Init+0x270>)
 8004b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b5e:	08db      	lsrs	r3, r3, #3
 8004b60:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	f003 0301 	and.w	r3, r3, #1
 8004b68:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004b6a:	693a      	ldr	r2, [r7, #16]
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	085b      	lsrs	r3, r3, #1
 8004b72:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	021b      	lsls	r3, r3, #8
 8004b78:	61bb      	str	r3, [r7, #24]
 8004b7a:	e003      	b.n	8004b84 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004b7c:	2302      	movs	r3, #2
 8004b7e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004b80:	2300      	movs	r3, #0
 8004b82:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d902      	bls.n	8004b90 <HAL_I2S_Init+0x134>
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	2bff      	cmp	r3, #255	@ 0xff
 8004b8e:	d907      	bls.n	8004ba0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b94:	f043 0210 	orr.w	r2, r3, #16
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e08f      	b.n	8004cc0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	691a      	ldr	r2, [r3, #16]
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	ea42 0103 	orr.w	r1, r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	69fa      	ldr	r2, [r7, #28]
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	69db      	ldr	r3, [r3, #28]
 8004bba:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004bbe:	f023 030f 	bic.w	r3, r3, #15
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	6851      	ldr	r1, [r2, #4]
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	6892      	ldr	r2, [r2, #8]
 8004bca:	4311      	orrs	r1, r2
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	68d2      	ldr	r2, [r2, #12]
 8004bd0:	4311      	orrs	r1, r2
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	6992      	ldr	r2, [r2, #24]
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	431a      	orrs	r2, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004be2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6a1b      	ldr	r3, [r3, #32]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d161      	bne.n	8004cb0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a38      	ldr	r2, [pc, #224]	@ (8004cd0 <HAL_I2S_Init+0x274>)
 8004bf0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a37      	ldr	r2, [pc, #220]	@ (8004cd4 <HAL_I2S_Init+0x278>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d101      	bne.n	8004c00 <HAL_I2S_Init+0x1a4>
 8004bfc:	4b36      	ldr	r3, [pc, #216]	@ (8004cd8 <HAL_I2S_Init+0x27c>)
 8004bfe:	e001      	b.n	8004c04 <HAL_I2S_Init+0x1a8>
 8004c00:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c04:	69db      	ldr	r3, [r3, #28]
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	6812      	ldr	r2, [r2, #0]
 8004c0a:	4932      	ldr	r1, [pc, #200]	@ (8004cd4 <HAL_I2S_Init+0x278>)
 8004c0c:	428a      	cmp	r2, r1
 8004c0e:	d101      	bne.n	8004c14 <HAL_I2S_Init+0x1b8>
 8004c10:	4a31      	ldr	r2, [pc, #196]	@ (8004cd8 <HAL_I2S_Init+0x27c>)
 8004c12:	e001      	b.n	8004c18 <HAL_I2S_Init+0x1bc>
 8004c14:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004c18:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004c1c:	f023 030f 	bic.w	r3, r3, #15
 8004c20:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a2b      	ldr	r2, [pc, #172]	@ (8004cd4 <HAL_I2S_Init+0x278>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d101      	bne.n	8004c30 <HAL_I2S_Init+0x1d4>
 8004c2c:	4b2a      	ldr	r3, [pc, #168]	@ (8004cd8 <HAL_I2S_Init+0x27c>)
 8004c2e:	e001      	b.n	8004c34 <HAL_I2S_Init+0x1d8>
 8004c30:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c34:	2202      	movs	r2, #2
 8004c36:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a25      	ldr	r2, [pc, #148]	@ (8004cd4 <HAL_I2S_Init+0x278>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d101      	bne.n	8004c46 <HAL_I2S_Init+0x1ea>
 8004c42:	4b25      	ldr	r3, [pc, #148]	@ (8004cd8 <HAL_I2S_Init+0x27c>)
 8004c44:	e001      	b.n	8004c4a <HAL_I2S_Init+0x1ee>
 8004c46:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c4a:	69db      	ldr	r3, [r3, #28]
 8004c4c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c56:	d003      	beq.n	8004c60 <HAL_I2S_Init+0x204>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d103      	bne.n	8004c68 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004c60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004c64:	613b      	str	r3, [r7, #16]
 8004c66:	e001      	b.n	8004c6c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004c76:	4313      	orrs	r3, r2
 8004c78:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004c80:	4313      	orrs	r3, r2
 8004c82:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	699b      	ldr	r3, [r3, #24]
 8004c88:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	b29a      	uxth	r2, r3
 8004c8e:	897b      	ldrh	r3, [r7, #10]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004c98:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a0d      	ldr	r2, [pc, #52]	@ (8004cd4 <HAL_I2S_Init+0x278>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d101      	bne.n	8004ca8 <HAL_I2S_Init+0x24c>
 8004ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8004cd8 <HAL_I2S_Init+0x27c>)
 8004ca6:	e001      	b.n	8004cac <HAL_I2S_Init+0x250>
 8004ca8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004cac:	897a      	ldrh	r2, [r7, #10]
 8004cae:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3720      	adds	r7, #32
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	08004dd3 	.word	0x08004dd3
 8004ccc:	cccccccd 	.word	0xcccccccd
 8004cd0:	08004ee9 	.word	0x08004ee9
 8004cd4:	40003800 	.word	0x40003800
 8004cd8:	40003400 	.word	0x40003400

08004cdc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004ce4:	bf00      	nop
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004cf8:	bf00      	nop
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004d0c:	bf00      	nop
 8004d0e:	370c      	adds	r7, #12
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b082      	sub	sp, #8
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d24:	881a      	ldrh	r2, [r3, #0]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d30:	1c9a      	adds	r2, r3, #2
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d10e      	bne.n	8004d6c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	685a      	ldr	r2, [r3, #4]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004d5c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2201      	movs	r2, #1
 8004d62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f7ff ffb8 	bl	8004cdc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004d6c:	bf00      	nop
 8004d6e:	3708      	adds	r7, #8
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b082      	sub	sp, #8
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68da      	ldr	r2, [r3, #12]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d86:	b292      	uxth	r2, r2
 8004d88:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d8e:	1c9a      	adds	r2, r3, #2
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	b29a      	uxth	r2, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d10e      	bne.n	8004dca <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	685a      	ldr	r2, [r3, #4]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004dba:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f7ff ff93 	bl	8004cf0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004dca:	bf00      	nop
 8004dcc:	3708      	adds	r7, #8
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}

08004dd2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004dd2:	b580      	push	{r7, lr}
 8004dd4:	b086      	sub	sp, #24
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	2b04      	cmp	r3, #4
 8004dec:	d13a      	bne.n	8004e64 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	f003 0301 	and.w	r3, r3, #1
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d109      	bne.n	8004e0c <I2S_IRQHandler+0x3a>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e02:	2b40      	cmp	r3, #64	@ 0x40
 8004e04:	d102      	bne.n	8004e0c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f7ff ffb4 	bl	8004d74 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e12:	2b40      	cmp	r3, #64	@ 0x40
 8004e14:	d126      	bne.n	8004e64 <I2S_IRQHandler+0x92>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	f003 0320 	and.w	r3, r3, #32
 8004e20:	2b20      	cmp	r3, #32
 8004e22:	d11f      	bne.n	8004e64 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	685a      	ldr	r2, [r3, #4]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004e32:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004e34:	2300      	movs	r3, #0
 8004e36:	613b      	str	r3, [r7, #16]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	613b      	str	r3, [r7, #16]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	613b      	str	r3, [r7, #16]
 8004e48:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e56:	f043 0202 	orr.w	r2, r3, #2
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f7ff ff50 	bl	8004d04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	2b03      	cmp	r3, #3
 8004e6e:	d136      	bne.n	8004ede <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	f003 0302 	and.w	r3, r3, #2
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d109      	bne.n	8004e8e <I2S_IRQHandler+0xbc>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e84:	2b80      	cmp	r3, #128	@ 0x80
 8004e86:	d102      	bne.n	8004e8e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f7ff ff45 	bl	8004d18 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	f003 0308 	and.w	r3, r3, #8
 8004e94:	2b08      	cmp	r3, #8
 8004e96:	d122      	bne.n	8004ede <I2S_IRQHandler+0x10c>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f003 0320 	and.w	r3, r3, #32
 8004ea2:	2b20      	cmp	r3, #32
 8004ea4:	d11b      	bne.n	8004ede <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	685a      	ldr	r2, [r3, #4]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004eb4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	60fb      	str	r3, [r7, #12]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	60fb      	str	r3, [r7, #12]
 8004ec2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ed0:	f043 0204 	orr.w	r2, r3, #4
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f7ff ff13 	bl	8004d04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004ede:	bf00      	nop
 8004ee0:	3718      	adds	r7, #24
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
	...

08004ee8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b088      	sub	sp, #32
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a92      	ldr	r2, [pc, #584]	@ (8005148 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d101      	bne.n	8004f06 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004f02:	4b92      	ldr	r3, [pc, #584]	@ (800514c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004f04:	e001      	b.n	8004f0a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004f06:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a8b      	ldr	r2, [pc, #556]	@ (8005148 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d101      	bne.n	8004f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004f20:	4b8a      	ldr	r3, [pc, #552]	@ (800514c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004f22:	e001      	b.n	8004f28 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004f24:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f34:	d004      	beq.n	8004f40 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	f040 8099 	bne.w	8005072 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	f003 0302 	and.w	r3, r3, #2
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d107      	bne.n	8004f5a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d002      	beq.n	8004f5a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f000 f925 	bl	80051a4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	f003 0301 	and.w	r3, r3, #1
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d107      	bne.n	8004f74 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d002      	beq.n	8004f74 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 f9c8 	bl	8005304 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f7a:	2b40      	cmp	r3, #64	@ 0x40
 8004f7c:	d13a      	bne.n	8004ff4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	f003 0320 	and.w	r3, r3, #32
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d035      	beq.n	8004ff4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a6e      	ldr	r2, [pc, #440]	@ (8005148 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d101      	bne.n	8004f96 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004f92:	4b6e      	ldr	r3, [pc, #440]	@ (800514c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004f94:	e001      	b.n	8004f9a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004f96:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004f9a:	685a      	ldr	r2, [r3, #4]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4969      	ldr	r1, [pc, #420]	@ (8005148 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004fa2:	428b      	cmp	r3, r1
 8004fa4:	d101      	bne.n	8004faa <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004fa6:	4b69      	ldr	r3, [pc, #420]	@ (800514c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004fa8:	e001      	b.n	8004fae <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004faa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004fae:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004fb2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	685a      	ldr	r2, [r3, #4]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004fc2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	60fb      	str	r3, [r7, #12]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	60fb      	str	r3, [r7, #12]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	60fb      	str	r3, [r7, #12]
 8004fd8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fe6:	f043 0202 	orr.w	r2, r3, #2
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f7ff fe88 	bl	8004d04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	f003 0308 	and.w	r3, r3, #8
 8004ffa:	2b08      	cmp	r3, #8
 8004ffc:	f040 80c3 	bne.w	8005186 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	f003 0320 	and.w	r3, r3, #32
 8005006:	2b00      	cmp	r3, #0
 8005008:	f000 80bd 	beq.w	8005186 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	685a      	ldr	r2, [r3, #4]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800501a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a49      	ldr	r2, [pc, #292]	@ (8005148 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d101      	bne.n	800502a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005026:	4b49      	ldr	r3, [pc, #292]	@ (800514c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005028:	e001      	b.n	800502e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800502a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800502e:	685a      	ldr	r2, [r3, #4]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4944      	ldr	r1, [pc, #272]	@ (8005148 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005036:	428b      	cmp	r3, r1
 8005038:	d101      	bne.n	800503e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800503a:	4b44      	ldr	r3, [pc, #272]	@ (800514c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800503c:	e001      	b.n	8005042 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800503e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005042:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005046:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005048:	2300      	movs	r3, #0
 800504a:	60bb      	str	r3, [r7, #8]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	60bb      	str	r3, [r7, #8]
 8005054:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2201      	movs	r2, #1
 800505a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005062:	f043 0204 	orr.w	r2, r3, #4
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f7ff fe4a 	bl	8004d04 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005070:	e089      	b.n	8005186 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	f003 0302 	and.w	r3, r3, #2
 8005078:	2b02      	cmp	r3, #2
 800507a:	d107      	bne.n	800508c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005082:	2b00      	cmp	r3, #0
 8005084:	d002      	beq.n	800508c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 f8be 	bl	8005208 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	f003 0301 	and.w	r3, r3, #1
 8005092:	2b01      	cmp	r3, #1
 8005094:	d107      	bne.n	80050a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800509c:	2b00      	cmp	r3, #0
 800509e:	d002      	beq.n	80050a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 f8fd 	bl	80052a0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050ac:	2b40      	cmp	r3, #64	@ 0x40
 80050ae:	d12f      	bne.n	8005110 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	f003 0320 	and.w	r3, r3, #32
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d02a      	beq.n	8005110 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	685a      	ldr	r2, [r3, #4]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80050c8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a1e      	ldr	r2, [pc, #120]	@ (8005148 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d101      	bne.n	80050d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80050d4:	4b1d      	ldr	r3, [pc, #116]	@ (800514c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80050d6:	e001      	b.n	80050dc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80050d8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80050dc:	685a      	ldr	r2, [r3, #4]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4919      	ldr	r1, [pc, #100]	@ (8005148 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80050e4:	428b      	cmp	r3, r1
 80050e6:	d101      	bne.n	80050ec <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80050e8:	4b18      	ldr	r3, [pc, #96]	@ (800514c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80050ea:	e001      	b.n	80050f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80050ec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80050f0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80050f4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2201      	movs	r2, #1
 80050fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005102:	f043 0202 	orr.w	r2, r3, #2
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f7ff fdfa 	bl	8004d04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	f003 0308 	and.w	r3, r3, #8
 8005116:	2b08      	cmp	r3, #8
 8005118:	d136      	bne.n	8005188 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	f003 0320 	and.w	r3, r3, #32
 8005120:	2b00      	cmp	r3, #0
 8005122:	d031      	beq.n	8005188 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a07      	ldr	r2, [pc, #28]	@ (8005148 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d101      	bne.n	8005132 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800512e:	4b07      	ldr	r3, [pc, #28]	@ (800514c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005130:	e001      	b.n	8005136 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005132:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005136:	685a      	ldr	r2, [r3, #4]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4902      	ldr	r1, [pc, #8]	@ (8005148 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800513e:	428b      	cmp	r3, r1
 8005140:	d106      	bne.n	8005150 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005142:	4b02      	ldr	r3, [pc, #8]	@ (800514c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005144:	e006      	b.n	8005154 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8005146:	bf00      	nop
 8005148:	40003800 	.word	0x40003800
 800514c:	40003400 	.word	0x40003400
 8005150:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005154:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005158:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	685a      	ldr	r2, [r3, #4]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005168:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2201      	movs	r2, #1
 800516e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005176:	f043 0204 	orr.w	r2, r3, #4
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f7ff fdc0 	bl	8004d04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005184:	e000      	b.n	8005188 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005186:	bf00      	nop
}
 8005188:	bf00      	nop
 800518a:	3720      	adds	r7, #32
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005198:	bf00      	nop
 800519a:	370c      	adds	r7, #12
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b082      	sub	sp, #8
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b0:	1c99      	adds	r1, r3, #2
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	6251      	str	r1, [r2, #36]	@ 0x24
 80051b6:	881a      	ldrh	r2, [r3, #0]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	3b01      	subs	r3, #1
 80051c6:	b29a      	uxth	r2, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d113      	bne.n	80051fe <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	685a      	ldr	r2, [r3, #4]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80051e4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d106      	bne.n	80051fe <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f7ff ffc9 	bl	8005190 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80051fe:	bf00      	nop
 8005200:	3708      	adds	r7, #8
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
	...

08005208 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005214:	1c99      	adds	r1, r3, #2
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	6251      	str	r1, [r2, #36]	@ 0x24
 800521a:	8819      	ldrh	r1, [r3, #0]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a1d      	ldr	r2, [pc, #116]	@ (8005298 <I2SEx_TxISR_I2SExt+0x90>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d101      	bne.n	800522a <I2SEx_TxISR_I2SExt+0x22>
 8005226:	4b1d      	ldr	r3, [pc, #116]	@ (800529c <I2SEx_TxISR_I2SExt+0x94>)
 8005228:	e001      	b.n	800522e <I2SEx_TxISR_I2SExt+0x26>
 800522a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800522e:	460a      	mov	r2, r1
 8005230:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005236:	b29b      	uxth	r3, r3
 8005238:	3b01      	subs	r3, #1
 800523a:	b29a      	uxth	r2, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005244:	b29b      	uxth	r3, r3
 8005246:	2b00      	cmp	r3, #0
 8005248:	d121      	bne.n	800528e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a12      	ldr	r2, [pc, #72]	@ (8005298 <I2SEx_TxISR_I2SExt+0x90>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d101      	bne.n	8005258 <I2SEx_TxISR_I2SExt+0x50>
 8005254:	4b11      	ldr	r3, [pc, #68]	@ (800529c <I2SEx_TxISR_I2SExt+0x94>)
 8005256:	e001      	b.n	800525c <I2SEx_TxISR_I2SExt+0x54>
 8005258:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800525c:	685a      	ldr	r2, [r3, #4]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	490d      	ldr	r1, [pc, #52]	@ (8005298 <I2SEx_TxISR_I2SExt+0x90>)
 8005264:	428b      	cmp	r3, r1
 8005266:	d101      	bne.n	800526c <I2SEx_TxISR_I2SExt+0x64>
 8005268:	4b0c      	ldr	r3, [pc, #48]	@ (800529c <I2SEx_TxISR_I2SExt+0x94>)
 800526a:	e001      	b.n	8005270 <I2SEx_TxISR_I2SExt+0x68>
 800526c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005270:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005274:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800527a:	b29b      	uxth	r3, r3
 800527c:	2b00      	cmp	r3, #0
 800527e:	d106      	bne.n	800528e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f7ff ff81 	bl	8005190 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800528e:	bf00      	nop
 8005290:	3708      	adds	r7, #8
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	40003800 	.word	0x40003800
 800529c:	40003400 	.word	0x40003400

080052a0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b082      	sub	sp, #8
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68d8      	ldr	r0, [r3, #12]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052b2:	1c99      	adds	r1, r3, #2
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80052b8:	b282      	uxth	r2, r0
 80052ba:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	3b01      	subs	r3, #1
 80052c4:	b29a      	uxth	r2, r3
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d113      	bne.n	80052fc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	685a      	ldr	r2, [r3, #4]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80052e2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d106      	bne.n	80052fc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f7ff ff4a 	bl	8005190 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80052fc:	bf00      	nop
 80052fe:	3708      	adds	r7, #8
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a20      	ldr	r2, [pc, #128]	@ (8005394 <I2SEx_RxISR_I2SExt+0x90>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d101      	bne.n	800531a <I2SEx_RxISR_I2SExt+0x16>
 8005316:	4b20      	ldr	r3, [pc, #128]	@ (8005398 <I2SEx_RxISR_I2SExt+0x94>)
 8005318:	e001      	b.n	800531e <I2SEx_RxISR_I2SExt+0x1a>
 800531a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800531e:	68d8      	ldr	r0, [r3, #12]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005324:	1c99      	adds	r1, r3, #2
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800532a:	b282      	uxth	r2, r0
 800532c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005332:	b29b      	uxth	r3, r3
 8005334:	3b01      	subs	r3, #1
 8005336:	b29a      	uxth	r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005340:	b29b      	uxth	r3, r3
 8005342:	2b00      	cmp	r3, #0
 8005344:	d121      	bne.n	800538a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a12      	ldr	r2, [pc, #72]	@ (8005394 <I2SEx_RxISR_I2SExt+0x90>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d101      	bne.n	8005354 <I2SEx_RxISR_I2SExt+0x50>
 8005350:	4b11      	ldr	r3, [pc, #68]	@ (8005398 <I2SEx_RxISR_I2SExt+0x94>)
 8005352:	e001      	b.n	8005358 <I2SEx_RxISR_I2SExt+0x54>
 8005354:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005358:	685a      	ldr	r2, [r3, #4]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	490d      	ldr	r1, [pc, #52]	@ (8005394 <I2SEx_RxISR_I2SExt+0x90>)
 8005360:	428b      	cmp	r3, r1
 8005362:	d101      	bne.n	8005368 <I2SEx_RxISR_I2SExt+0x64>
 8005364:	4b0c      	ldr	r3, [pc, #48]	@ (8005398 <I2SEx_RxISR_I2SExt+0x94>)
 8005366:	e001      	b.n	800536c <I2SEx_RxISR_I2SExt+0x68>
 8005368:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800536c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005370:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005376:	b29b      	uxth	r3, r3
 8005378:	2b00      	cmp	r3, #0
 800537a:	d106      	bne.n	800538a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f7ff ff03 	bl	8005190 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800538a:	bf00      	nop
 800538c:	3708      	adds	r7, #8
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	40003800 	.word	0x40003800
 8005398:	40003400 	.word	0x40003400

0800539c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b086      	sub	sp, #24
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d101      	bne.n	80053ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e267      	b.n	800587e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0301 	and.w	r3, r3, #1
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d075      	beq.n	80054a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80053ba:	4b88      	ldr	r3, [pc, #544]	@ (80055dc <HAL_RCC_OscConfig+0x240>)
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	f003 030c 	and.w	r3, r3, #12
 80053c2:	2b04      	cmp	r3, #4
 80053c4:	d00c      	beq.n	80053e0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053c6:	4b85      	ldr	r3, [pc, #532]	@ (80055dc <HAL_RCC_OscConfig+0x240>)
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80053ce:	2b08      	cmp	r3, #8
 80053d0:	d112      	bne.n	80053f8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053d2:	4b82      	ldr	r3, [pc, #520]	@ (80055dc <HAL_RCC_OscConfig+0x240>)
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80053de:	d10b      	bne.n	80053f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053e0:	4b7e      	ldr	r3, [pc, #504]	@ (80055dc <HAL_RCC_OscConfig+0x240>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d05b      	beq.n	80054a4 <HAL_RCC_OscConfig+0x108>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d157      	bne.n	80054a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e242      	b.n	800587e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005400:	d106      	bne.n	8005410 <HAL_RCC_OscConfig+0x74>
 8005402:	4b76      	ldr	r3, [pc, #472]	@ (80055dc <HAL_RCC_OscConfig+0x240>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a75      	ldr	r2, [pc, #468]	@ (80055dc <HAL_RCC_OscConfig+0x240>)
 8005408:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800540c:	6013      	str	r3, [r2, #0]
 800540e:	e01d      	b.n	800544c <HAL_RCC_OscConfig+0xb0>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005418:	d10c      	bne.n	8005434 <HAL_RCC_OscConfig+0x98>
 800541a:	4b70      	ldr	r3, [pc, #448]	@ (80055dc <HAL_RCC_OscConfig+0x240>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a6f      	ldr	r2, [pc, #444]	@ (80055dc <HAL_RCC_OscConfig+0x240>)
 8005420:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005424:	6013      	str	r3, [r2, #0]
 8005426:	4b6d      	ldr	r3, [pc, #436]	@ (80055dc <HAL_RCC_OscConfig+0x240>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a6c      	ldr	r2, [pc, #432]	@ (80055dc <HAL_RCC_OscConfig+0x240>)
 800542c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005430:	6013      	str	r3, [r2, #0]
 8005432:	e00b      	b.n	800544c <HAL_RCC_OscConfig+0xb0>
 8005434:	4b69      	ldr	r3, [pc, #420]	@ (80055dc <HAL_RCC_OscConfig+0x240>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a68      	ldr	r2, [pc, #416]	@ (80055dc <HAL_RCC_OscConfig+0x240>)
 800543a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800543e:	6013      	str	r3, [r2, #0]
 8005440:	4b66      	ldr	r3, [pc, #408]	@ (80055dc <HAL_RCC_OscConfig+0x240>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a65      	ldr	r2, [pc, #404]	@ (80055dc <HAL_RCC_OscConfig+0x240>)
 8005446:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800544a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d013      	beq.n	800547c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005454:	f7fc f846 	bl	80014e4 <HAL_GetTick>
 8005458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800545a:	e008      	b.n	800546e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800545c:	f7fc f842 	bl	80014e4 <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	2b64      	cmp	r3, #100	@ 0x64
 8005468:	d901      	bls.n	800546e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e207      	b.n	800587e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800546e:	4b5b      	ldr	r3, [pc, #364]	@ (80055dc <HAL_RCC_OscConfig+0x240>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d0f0      	beq.n	800545c <HAL_RCC_OscConfig+0xc0>
 800547a:	e014      	b.n	80054a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800547c:	f7fc f832 	bl	80014e4 <HAL_GetTick>
 8005480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005482:	e008      	b.n	8005496 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005484:	f7fc f82e 	bl	80014e4 <HAL_GetTick>
 8005488:	4602      	mov	r2, r0
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	2b64      	cmp	r3, #100	@ 0x64
 8005490:	d901      	bls.n	8005496 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e1f3      	b.n	800587e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005496:	4b51      	ldr	r3, [pc, #324]	@ (80055dc <HAL_RCC_OscConfig+0x240>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d1f0      	bne.n	8005484 <HAL_RCC_OscConfig+0xe8>
 80054a2:	e000      	b.n	80054a6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 0302 	and.w	r3, r3, #2
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d063      	beq.n	800557a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80054b2:	4b4a      	ldr	r3, [pc, #296]	@ (80055dc <HAL_RCC_OscConfig+0x240>)
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	f003 030c 	and.w	r3, r3, #12
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00b      	beq.n	80054d6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054be:	4b47      	ldr	r3, [pc, #284]	@ (80055dc <HAL_RCC_OscConfig+0x240>)
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80054c6:	2b08      	cmp	r3, #8
 80054c8:	d11c      	bne.n	8005504 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054ca:	4b44      	ldr	r3, [pc, #272]	@ (80055dc <HAL_RCC_OscConfig+0x240>)
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d116      	bne.n	8005504 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054d6:	4b41      	ldr	r3, [pc, #260]	@ (80055dc <HAL_RCC_OscConfig+0x240>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 0302 	and.w	r3, r3, #2
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d005      	beq.n	80054ee <HAL_RCC_OscConfig+0x152>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d001      	beq.n	80054ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e1c7      	b.n	800587e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054ee:	4b3b      	ldr	r3, [pc, #236]	@ (80055dc <HAL_RCC_OscConfig+0x240>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	00db      	lsls	r3, r3, #3
 80054fc:	4937      	ldr	r1, [pc, #220]	@ (80055dc <HAL_RCC_OscConfig+0x240>)
 80054fe:	4313      	orrs	r3, r2
 8005500:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005502:	e03a      	b.n	800557a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d020      	beq.n	800554e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800550c:	4b34      	ldr	r3, [pc, #208]	@ (80055e0 <HAL_RCC_OscConfig+0x244>)
 800550e:	2201      	movs	r2, #1
 8005510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005512:	f7fb ffe7 	bl	80014e4 <HAL_GetTick>
 8005516:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005518:	e008      	b.n	800552c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800551a:	f7fb ffe3 	bl	80014e4 <HAL_GetTick>
 800551e:	4602      	mov	r2, r0
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	1ad3      	subs	r3, r2, r3
 8005524:	2b02      	cmp	r3, #2
 8005526:	d901      	bls.n	800552c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005528:	2303      	movs	r3, #3
 800552a:	e1a8      	b.n	800587e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800552c:	4b2b      	ldr	r3, [pc, #172]	@ (80055dc <HAL_RCC_OscConfig+0x240>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 0302 	and.w	r3, r3, #2
 8005534:	2b00      	cmp	r3, #0
 8005536:	d0f0      	beq.n	800551a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005538:	4b28      	ldr	r3, [pc, #160]	@ (80055dc <HAL_RCC_OscConfig+0x240>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	691b      	ldr	r3, [r3, #16]
 8005544:	00db      	lsls	r3, r3, #3
 8005546:	4925      	ldr	r1, [pc, #148]	@ (80055dc <HAL_RCC_OscConfig+0x240>)
 8005548:	4313      	orrs	r3, r2
 800554a:	600b      	str	r3, [r1, #0]
 800554c:	e015      	b.n	800557a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800554e:	4b24      	ldr	r3, [pc, #144]	@ (80055e0 <HAL_RCC_OscConfig+0x244>)
 8005550:	2200      	movs	r2, #0
 8005552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005554:	f7fb ffc6 	bl	80014e4 <HAL_GetTick>
 8005558:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800555a:	e008      	b.n	800556e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800555c:	f7fb ffc2 	bl	80014e4 <HAL_GetTick>
 8005560:	4602      	mov	r2, r0
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	2b02      	cmp	r3, #2
 8005568:	d901      	bls.n	800556e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	e187      	b.n	800587e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800556e:	4b1b      	ldr	r3, [pc, #108]	@ (80055dc <HAL_RCC_OscConfig+0x240>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 0302 	and.w	r3, r3, #2
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1f0      	bne.n	800555c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0308 	and.w	r3, r3, #8
 8005582:	2b00      	cmp	r3, #0
 8005584:	d036      	beq.n	80055f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	695b      	ldr	r3, [r3, #20]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d016      	beq.n	80055bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800558e:	4b15      	ldr	r3, [pc, #84]	@ (80055e4 <HAL_RCC_OscConfig+0x248>)
 8005590:	2201      	movs	r2, #1
 8005592:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005594:	f7fb ffa6 	bl	80014e4 <HAL_GetTick>
 8005598:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800559a:	e008      	b.n	80055ae <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800559c:	f7fb ffa2 	bl	80014e4 <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d901      	bls.n	80055ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e167      	b.n	800587e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055ae:	4b0b      	ldr	r3, [pc, #44]	@ (80055dc <HAL_RCC_OscConfig+0x240>)
 80055b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055b2:	f003 0302 	and.w	r3, r3, #2
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d0f0      	beq.n	800559c <HAL_RCC_OscConfig+0x200>
 80055ba:	e01b      	b.n	80055f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055bc:	4b09      	ldr	r3, [pc, #36]	@ (80055e4 <HAL_RCC_OscConfig+0x248>)
 80055be:	2200      	movs	r2, #0
 80055c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055c2:	f7fb ff8f 	bl	80014e4 <HAL_GetTick>
 80055c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055c8:	e00e      	b.n	80055e8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055ca:	f7fb ff8b 	bl	80014e4 <HAL_GetTick>
 80055ce:	4602      	mov	r2, r0
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	d907      	bls.n	80055e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80055d8:	2303      	movs	r3, #3
 80055da:	e150      	b.n	800587e <HAL_RCC_OscConfig+0x4e2>
 80055dc:	40023800 	.word	0x40023800
 80055e0:	42470000 	.word	0x42470000
 80055e4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055e8:	4b88      	ldr	r3, [pc, #544]	@ (800580c <HAL_RCC_OscConfig+0x470>)
 80055ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055ec:	f003 0302 	and.w	r3, r3, #2
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d1ea      	bne.n	80055ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 0304 	and.w	r3, r3, #4
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f000 8097 	beq.w	8005730 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005602:	2300      	movs	r3, #0
 8005604:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005606:	4b81      	ldr	r3, [pc, #516]	@ (800580c <HAL_RCC_OscConfig+0x470>)
 8005608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800560a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800560e:	2b00      	cmp	r3, #0
 8005610:	d10f      	bne.n	8005632 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005612:	2300      	movs	r3, #0
 8005614:	60bb      	str	r3, [r7, #8]
 8005616:	4b7d      	ldr	r3, [pc, #500]	@ (800580c <HAL_RCC_OscConfig+0x470>)
 8005618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800561a:	4a7c      	ldr	r2, [pc, #496]	@ (800580c <HAL_RCC_OscConfig+0x470>)
 800561c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005620:	6413      	str	r3, [r2, #64]	@ 0x40
 8005622:	4b7a      	ldr	r3, [pc, #488]	@ (800580c <HAL_RCC_OscConfig+0x470>)
 8005624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005626:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800562a:	60bb      	str	r3, [r7, #8]
 800562c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800562e:	2301      	movs	r3, #1
 8005630:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005632:	4b77      	ldr	r3, [pc, #476]	@ (8005810 <HAL_RCC_OscConfig+0x474>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800563a:	2b00      	cmp	r3, #0
 800563c:	d118      	bne.n	8005670 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800563e:	4b74      	ldr	r3, [pc, #464]	@ (8005810 <HAL_RCC_OscConfig+0x474>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a73      	ldr	r2, [pc, #460]	@ (8005810 <HAL_RCC_OscConfig+0x474>)
 8005644:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005648:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800564a:	f7fb ff4b 	bl	80014e4 <HAL_GetTick>
 800564e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005650:	e008      	b.n	8005664 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005652:	f7fb ff47 	bl	80014e4 <HAL_GetTick>
 8005656:	4602      	mov	r2, r0
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	1ad3      	subs	r3, r2, r3
 800565c:	2b02      	cmp	r3, #2
 800565e:	d901      	bls.n	8005664 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005660:	2303      	movs	r3, #3
 8005662:	e10c      	b.n	800587e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005664:	4b6a      	ldr	r3, [pc, #424]	@ (8005810 <HAL_RCC_OscConfig+0x474>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800566c:	2b00      	cmp	r3, #0
 800566e:	d0f0      	beq.n	8005652 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	2b01      	cmp	r3, #1
 8005676:	d106      	bne.n	8005686 <HAL_RCC_OscConfig+0x2ea>
 8005678:	4b64      	ldr	r3, [pc, #400]	@ (800580c <HAL_RCC_OscConfig+0x470>)
 800567a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800567c:	4a63      	ldr	r2, [pc, #396]	@ (800580c <HAL_RCC_OscConfig+0x470>)
 800567e:	f043 0301 	orr.w	r3, r3, #1
 8005682:	6713      	str	r3, [r2, #112]	@ 0x70
 8005684:	e01c      	b.n	80056c0 <HAL_RCC_OscConfig+0x324>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	2b05      	cmp	r3, #5
 800568c:	d10c      	bne.n	80056a8 <HAL_RCC_OscConfig+0x30c>
 800568e:	4b5f      	ldr	r3, [pc, #380]	@ (800580c <HAL_RCC_OscConfig+0x470>)
 8005690:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005692:	4a5e      	ldr	r2, [pc, #376]	@ (800580c <HAL_RCC_OscConfig+0x470>)
 8005694:	f043 0304 	orr.w	r3, r3, #4
 8005698:	6713      	str	r3, [r2, #112]	@ 0x70
 800569a:	4b5c      	ldr	r3, [pc, #368]	@ (800580c <HAL_RCC_OscConfig+0x470>)
 800569c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800569e:	4a5b      	ldr	r2, [pc, #364]	@ (800580c <HAL_RCC_OscConfig+0x470>)
 80056a0:	f043 0301 	orr.w	r3, r3, #1
 80056a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80056a6:	e00b      	b.n	80056c0 <HAL_RCC_OscConfig+0x324>
 80056a8:	4b58      	ldr	r3, [pc, #352]	@ (800580c <HAL_RCC_OscConfig+0x470>)
 80056aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056ac:	4a57      	ldr	r2, [pc, #348]	@ (800580c <HAL_RCC_OscConfig+0x470>)
 80056ae:	f023 0301 	bic.w	r3, r3, #1
 80056b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80056b4:	4b55      	ldr	r3, [pc, #340]	@ (800580c <HAL_RCC_OscConfig+0x470>)
 80056b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056b8:	4a54      	ldr	r2, [pc, #336]	@ (800580c <HAL_RCC_OscConfig+0x470>)
 80056ba:	f023 0304 	bic.w	r3, r3, #4
 80056be:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d015      	beq.n	80056f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056c8:	f7fb ff0c 	bl	80014e4 <HAL_GetTick>
 80056cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056ce:	e00a      	b.n	80056e6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056d0:	f7fb ff08 	bl	80014e4 <HAL_GetTick>
 80056d4:	4602      	mov	r2, r0
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056de:	4293      	cmp	r3, r2
 80056e0:	d901      	bls.n	80056e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80056e2:	2303      	movs	r3, #3
 80056e4:	e0cb      	b.n	800587e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056e6:	4b49      	ldr	r3, [pc, #292]	@ (800580c <HAL_RCC_OscConfig+0x470>)
 80056e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056ea:	f003 0302 	and.w	r3, r3, #2
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d0ee      	beq.n	80056d0 <HAL_RCC_OscConfig+0x334>
 80056f2:	e014      	b.n	800571e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056f4:	f7fb fef6 	bl	80014e4 <HAL_GetTick>
 80056f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056fa:	e00a      	b.n	8005712 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056fc:	f7fb fef2 	bl	80014e4 <HAL_GetTick>
 8005700:	4602      	mov	r2, r0
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	f241 3288 	movw	r2, #5000	@ 0x1388
 800570a:	4293      	cmp	r3, r2
 800570c:	d901      	bls.n	8005712 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e0b5      	b.n	800587e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005712:	4b3e      	ldr	r3, [pc, #248]	@ (800580c <HAL_RCC_OscConfig+0x470>)
 8005714:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005716:	f003 0302 	and.w	r3, r3, #2
 800571a:	2b00      	cmp	r3, #0
 800571c:	d1ee      	bne.n	80056fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800571e:	7dfb      	ldrb	r3, [r7, #23]
 8005720:	2b01      	cmp	r3, #1
 8005722:	d105      	bne.n	8005730 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005724:	4b39      	ldr	r3, [pc, #228]	@ (800580c <HAL_RCC_OscConfig+0x470>)
 8005726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005728:	4a38      	ldr	r2, [pc, #224]	@ (800580c <HAL_RCC_OscConfig+0x470>)
 800572a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800572e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	699b      	ldr	r3, [r3, #24]
 8005734:	2b00      	cmp	r3, #0
 8005736:	f000 80a1 	beq.w	800587c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800573a:	4b34      	ldr	r3, [pc, #208]	@ (800580c <HAL_RCC_OscConfig+0x470>)
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	f003 030c 	and.w	r3, r3, #12
 8005742:	2b08      	cmp	r3, #8
 8005744:	d05c      	beq.n	8005800 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	699b      	ldr	r3, [r3, #24]
 800574a:	2b02      	cmp	r3, #2
 800574c:	d141      	bne.n	80057d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800574e:	4b31      	ldr	r3, [pc, #196]	@ (8005814 <HAL_RCC_OscConfig+0x478>)
 8005750:	2200      	movs	r2, #0
 8005752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005754:	f7fb fec6 	bl	80014e4 <HAL_GetTick>
 8005758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800575a:	e008      	b.n	800576e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800575c:	f7fb fec2 	bl	80014e4 <HAL_GetTick>
 8005760:	4602      	mov	r2, r0
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	2b02      	cmp	r3, #2
 8005768:	d901      	bls.n	800576e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e087      	b.n	800587e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800576e:	4b27      	ldr	r3, [pc, #156]	@ (800580c <HAL_RCC_OscConfig+0x470>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d1f0      	bne.n	800575c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	69da      	ldr	r2, [r3, #28]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a1b      	ldr	r3, [r3, #32]
 8005782:	431a      	orrs	r2, r3
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005788:	019b      	lsls	r3, r3, #6
 800578a:	431a      	orrs	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005790:	085b      	lsrs	r3, r3, #1
 8005792:	3b01      	subs	r3, #1
 8005794:	041b      	lsls	r3, r3, #16
 8005796:	431a      	orrs	r2, r3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800579c:	061b      	lsls	r3, r3, #24
 800579e:	491b      	ldr	r1, [pc, #108]	@ (800580c <HAL_RCC_OscConfig+0x470>)
 80057a0:	4313      	orrs	r3, r2
 80057a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057a4:	4b1b      	ldr	r3, [pc, #108]	@ (8005814 <HAL_RCC_OscConfig+0x478>)
 80057a6:	2201      	movs	r2, #1
 80057a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057aa:	f7fb fe9b 	bl	80014e4 <HAL_GetTick>
 80057ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057b0:	e008      	b.n	80057c4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057b2:	f7fb fe97 	bl	80014e4 <HAL_GetTick>
 80057b6:	4602      	mov	r2, r0
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d901      	bls.n	80057c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e05c      	b.n	800587e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057c4:	4b11      	ldr	r3, [pc, #68]	@ (800580c <HAL_RCC_OscConfig+0x470>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d0f0      	beq.n	80057b2 <HAL_RCC_OscConfig+0x416>
 80057d0:	e054      	b.n	800587c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057d2:	4b10      	ldr	r3, [pc, #64]	@ (8005814 <HAL_RCC_OscConfig+0x478>)
 80057d4:	2200      	movs	r2, #0
 80057d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057d8:	f7fb fe84 	bl	80014e4 <HAL_GetTick>
 80057dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057de:	e008      	b.n	80057f2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057e0:	f7fb fe80 	bl	80014e4 <HAL_GetTick>
 80057e4:	4602      	mov	r2, r0
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d901      	bls.n	80057f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	e045      	b.n	800587e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057f2:	4b06      	ldr	r3, [pc, #24]	@ (800580c <HAL_RCC_OscConfig+0x470>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d1f0      	bne.n	80057e0 <HAL_RCC_OscConfig+0x444>
 80057fe:	e03d      	b.n	800587c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	699b      	ldr	r3, [r3, #24]
 8005804:	2b01      	cmp	r3, #1
 8005806:	d107      	bne.n	8005818 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	e038      	b.n	800587e <HAL_RCC_OscConfig+0x4e2>
 800580c:	40023800 	.word	0x40023800
 8005810:	40007000 	.word	0x40007000
 8005814:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005818:	4b1b      	ldr	r3, [pc, #108]	@ (8005888 <HAL_RCC_OscConfig+0x4ec>)
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	699b      	ldr	r3, [r3, #24]
 8005822:	2b01      	cmp	r3, #1
 8005824:	d028      	beq.n	8005878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005830:	429a      	cmp	r2, r3
 8005832:	d121      	bne.n	8005878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800583e:	429a      	cmp	r2, r3
 8005840:	d11a      	bne.n	8005878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005848:	4013      	ands	r3, r2
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800584e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005850:	4293      	cmp	r3, r2
 8005852:	d111      	bne.n	8005878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800585e:	085b      	lsrs	r3, r3, #1
 8005860:	3b01      	subs	r3, #1
 8005862:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005864:	429a      	cmp	r2, r3
 8005866:	d107      	bne.n	8005878 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005872:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005874:	429a      	cmp	r2, r3
 8005876:	d001      	beq.n	800587c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e000      	b.n	800587e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	3718      	adds	r7, #24
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	40023800 	.word	0x40023800

0800588c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d101      	bne.n	80058a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e0cc      	b.n	8005a3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80058a0:	4b68      	ldr	r3, [pc, #416]	@ (8005a44 <HAL_RCC_ClockConfig+0x1b8>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 0307 	and.w	r3, r3, #7
 80058a8:	683a      	ldr	r2, [r7, #0]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d90c      	bls.n	80058c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058ae:	4b65      	ldr	r3, [pc, #404]	@ (8005a44 <HAL_RCC_ClockConfig+0x1b8>)
 80058b0:	683a      	ldr	r2, [r7, #0]
 80058b2:	b2d2      	uxtb	r2, r2
 80058b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058b6:	4b63      	ldr	r3, [pc, #396]	@ (8005a44 <HAL_RCC_ClockConfig+0x1b8>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f003 0307 	and.w	r3, r3, #7
 80058be:	683a      	ldr	r2, [r7, #0]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d001      	beq.n	80058c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e0b8      	b.n	8005a3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 0302 	and.w	r3, r3, #2
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d020      	beq.n	8005916 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0304 	and.w	r3, r3, #4
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d005      	beq.n	80058ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058e0:	4b59      	ldr	r3, [pc, #356]	@ (8005a48 <HAL_RCC_ClockConfig+0x1bc>)
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	4a58      	ldr	r2, [pc, #352]	@ (8005a48 <HAL_RCC_ClockConfig+0x1bc>)
 80058e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80058ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 0308 	and.w	r3, r3, #8
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d005      	beq.n	8005904 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058f8:	4b53      	ldr	r3, [pc, #332]	@ (8005a48 <HAL_RCC_ClockConfig+0x1bc>)
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	4a52      	ldr	r2, [pc, #328]	@ (8005a48 <HAL_RCC_ClockConfig+0x1bc>)
 80058fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005902:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005904:	4b50      	ldr	r3, [pc, #320]	@ (8005a48 <HAL_RCC_ClockConfig+0x1bc>)
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	494d      	ldr	r1, [pc, #308]	@ (8005a48 <HAL_RCC_ClockConfig+0x1bc>)
 8005912:	4313      	orrs	r3, r2
 8005914:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 0301 	and.w	r3, r3, #1
 800591e:	2b00      	cmp	r3, #0
 8005920:	d044      	beq.n	80059ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	2b01      	cmp	r3, #1
 8005928:	d107      	bne.n	800593a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800592a:	4b47      	ldr	r3, [pc, #284]	@ (8005a48 <HAL_RCC_ClockConfig+0x1bc>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005932:	2b00      	cmp	r3, #0
 8005934:	d119      	bne.n	800596a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e07f      	b.n	8005a3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	2b02      	cmp	r3, #2
 8005940:	d003      	beq.n	800594a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005946:	2b03      	cmp	r3, #3
 8005948:	d107      	bne.n	800595a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800594a:	4b3f      	ldr	r3, [pc, #252]	@ (8005a48 <HAL_RCC_ClockConfig+0x1bc>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005952:	2b00      	cmp	r3, #0
 8005954:	d109      	bne.n	800596a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e06f      	b.n	8005a3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800595a:	4b3b      	ldr	r3, [pc, #236]	@ (8005a48 <HAL_RCC_ClockConfig+0x1bc>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 0302 	and.w	r3, r3, #2
 8005962:	2b00      	cmp	r3, #0
 8005964:	d101      	bne.n	800596a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e067      	b.n	8005a3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800596a:	4b37      	ldr	r3, [pc, #220]	@ (8005a48 <HAL_RCC_ClockConfig+0x1bc>)
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	f023 0203 	bic.w	r2, r3, #3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	4934      	ldr	r1, [pc, #208]	@ (8005a48 <HAL_RCC_ClockConfig+0x1bc>)
 8005978:	4313      	orrs	r3, r2
 800597a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800597c:	f7fb fdb2 	bl	80014e4 <HAL_GetTick>
 8005980:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005982:	e00a      	b.n	800599a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005984:	f7fb fdae 	bl	80014e4 <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005992:	4293      	cmp	r3, r2
 8005994:	d901      	bls.n	800599a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e04f      	b.n	8005a3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800599a:	4b2b      	ldr	r3, [pc, #172]	@ (8005a48 <HAL_RCC_ClockConfig+0x1bc>)
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	f003 020c 	and.w	r2, r3, #12
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d1eb      	bne.n	8005984 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80059ac:	4b25      	ldr	r3, [pc, #148]	@ (8005a44 <HAL_RCC_ClockConfig+0x1b8>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0307 	and.w	r3, r3, #7
 80059b4:	683a      	ldr	r2, [r7, #0]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d20c      	bcs.n	80059d4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059ba:	4b22      	ldr	r3, [pc, #136]	@ (8005a44 <HAL_RCC_ClockConfig+0x1b8>)
 80059bc:	683a      	ldr	r2, [r7, #0]
 80059be:	b2d2      	uxtb	r2, r2
 80059c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059c2:	4b20      	ldr	r3, [pc, #128]	@ (8005a44 <HAL_RCC_ClockConfig+0x1b8>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 0307 	and.w	r3, r3, #7
 80059ca:	683a      	ldr	r2, [r7, #0]
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d001      	beq.n	80059d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	e032      	b.n	8005a3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 0304 	and.w	r3, r3, #4
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d008      	beq.n	80059f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059e0:	4b19      	ldr	r3, [pc, #100]	@ (8005a48 <HAL_RCC_ClockConfig+0x1bc>)
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	4916      	ldr	r1, [pc, #88]	@ (8005a48 <HAL_RCC_ClockConfig+0x1bc>)
 80059ee:	4313      	orrs	r3, r2
 80059f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 0308 	and.w	r3, r3, #8
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d009      	beq.n	8005a12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059fe:	4b12      	ldr	r3, [pc, #72]	@ (8005a48 <HAL_RCC_ClockConfig+0x1bc>)
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	00db      	lsls	r3, r3, #3
 8005a0c:	490e      	ldr	r1, [pc, #56]	@ (8005a48 <HAL_RCC_ClockConfig+0x1bc>)
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005a12:	f000 f821 	bl	8005a58 <HAL_RCC_GetSysClockFreq>
 8005a16:	4602      	mov	r2, r0
 8005a18:	4b0b      	ldr	r3, [pc, #44]	@ (8005a48 <HAL_RCC_ClockConfig+0x1bc>)
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	091b      	lsrs	r3, r3, #4
 8005a1e:	f003 030f 	and.w	r3, r3, #15
 8005a22:	490a      	ldr	r1, [pc, #40]	@ (8005a4c <HAL_RCC_ClockConfig+0x1c0>)
 8005a24:	5ccb      	ldrb	r3, [r1, r3]
 8005a26:	fa22 f303 	lsr.w	r3, r2, r3
 8005a2a:	4a09      	ldr	r2, [pc, #36]	@ (8005a50 <HAL_RCC_ClockConfig+0x1c4>)
 8005a2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005a2e:	4b09      	ldr	r3, [pc, #36]	@ (8005a54 <HAL_RCC_ClockConfig+0x1c8>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4618      	mov	r0, r3
 8005a34:	f7fb fd12 	bl	800145c <HAL_InitTick>

  return HAL_OK;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3710      	adds	r7, #16
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	40023c00 	.word	0x40023c00
 8005a48:	40023800 	.word	0x40023800
 8005a4c:	0800aa10 	.word	0x0800aa10
 8005a50:	20000000 	.word	0x20000000
 8005a54:	20000004 	.word	0x20000004

08005a58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a5c:	b094      	sub	sp, #80	@ 0x50
 8005a5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005a60:	2300      	movs	r3, #0
 8005a62:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005a64:	2300      	movs	r3, #0
 8005a66:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a70:	4b79      	ldr	r3, [pc, #484]	@ (8005c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	f003 030c 	and.w	r3, r3, #12
 8005a78:	2b08      	cmp	r3, #8
 8005a7a:	d00d      	beq.n	8005a98 <HAL_RCC_GetSysClockFreq+0x40>
 8005a7c:	2b08      	cmp	r3, #8
 8005a7e:	f200 80e1 	bhi.w	8005c44 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d002      	beq.n	8005a8c <HAL_RCC_GetSysClockFreq+0x34>
 8005a86:	2b04      	cmp	r3, #4
 8005a88:	d003      	beq.n	8005a92 <HAL_RCC_GetSysClockFreq+0x3a>
 8005a8a:	e0db      	b.n	8005c44 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a8c:	4b73      	ldr	r3, [pc, #460]	@ (8005c5c <HAL_RCC_GetSysClockFreq+0x204>)
 8005a8e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005a90:	e0db      	b.n	8005c4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a92:	4b73      	ldr	r3, [pc, #460]	@ (8005c60 <HAL_RCC_GetSysClockFreq+0x208>)
 8005a94:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005a96:	e0d8      	b.n	8005c4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a98:	4b6f      	ldr	r3, [pc, #444]	@ (8005c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005aa0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005aa2:	4b6d      	ldr	r3, [pc, #436]	@ (8005c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d063      	beq.n	8005b76 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005aae:	4b6a      	ldr	r3, [pc, #424]	@ (8005c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	099b      	lsrs	r3, r3, #6
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ab8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005abc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ac0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ac6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005aca:	4622      	mov	r2, r4
 8005acc:	462b      	mov	r3, r5
 8005ace:	f04f 0000 	mov.w	r0, #0
 8005ad2:	f04f 0100 	mov.w	r1, #0
 8005ad6:	0159      	lsls	r1, r3, #5
 8005ad8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005adc:	0150      	lsls	r0, r2, #5
 8005ade:	4602      	mov	r2, r0
 8005ae0:	460b      	mov	r3, r1
 8005ae2:	4621      	mov	r1, r4
 8005ae4:	1a51      	subs	r1, r2, r1
 8005ae6:	6139      	str	r1, [r7, #16]
 8005ae8:	4629      	mov	r1, r5
 8005aea:	eb63 0301 	sbc.w	r3, r3, r1
 8005aee:	617b      	str	r3, [r7, #20]
 8005af0:	f04f 0200 	mov.w	r2, #0
 8005af4:	f04f 0300 	mov.w	r3, #0
 8005af8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005afc:	4659      	mov	r1, fp
 8005afe:	018b      	lsls	r3, r1, #6
 8005b00:	4651      	mov	r1, sl
 8005b02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005b06:	4651      	mov	r1, sl
 8005b08:	018a      	lsls	r2, r1, #6
 8005b0a:	4651      	mov	r1, sl
 8005b0c:	ebb2 0801 	subs.w	r8, r2, r1
 8005b10:	4659      	mov	r1, fp
 8005b12:	eb63 0901 	sbc.w	r9, r3, r1
 8005b16:	f04f 0200 	mov.w	r2, #0
 8005b1a:	f04f 0300 	mov.w	r3, #0
 8005b1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b2a:	4690      	mov	r8, r2
 8005b2c:	4699      	mov	r9, r3
 8005b2e:	4623      	mov	r3, r4
 8005b30:	eb18 0303 	adds.w	r3, r8, r3
 8005b34:	60bb      	str	r3, [r7, #8]
 8005b36:	462b      	mov	r3, r5
 8005b38:	eb49 0303 	adc.w	r3, r9, r3
 8005b3c:	60fb      	str	r3, [r7, #12]
 8005b3e:	f04f 0200 	mov.w	r2, #0
 8005b42:	f04f 0300 	mov.w	r3, #0
 8005b46:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005b4a:	4629      	mov	r1, r5
 8005b4c:	024b      	lsls	r3, r1, #9
 8005b4e:	4621      	mov	r1, r4
 8005b50:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005b54:	4621      	mov	r1, r4
 8005b56:	024a      	lsls	r2, r1, #9
 8005b58:	4610      	mov	r0, r2
 8005b5a:	4619      	mov	r1, r3
 8005b5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b5e:	2200      	movs	r2, #0
 8005b60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005b68:	f7fa fb2e 	bl	80001c8 <__aeabi_uldivmod>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	460b      	mov	r3, r1
 8005b70:	4613      	mov	r3, r2
 8005b72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b74:	e058      	b.n	8005c28 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b76:	4b38      	ldr	r3, [pc, #224]	@ (8005c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	099b      	lsrs	r3, r3, #6
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	4618      	mov	r0, r3
 8005b80:	4611      	mov	r1, r2
 8005b82:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005b86:	623b      	str	r3, [r7, #32]
 8005b88:	2300      	movs	r3, #0
 8005b8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b8c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005b90:	4642      	mov	r2, r8
 8005b92:	464b      	mov	r3, r9
 8005b94:	f04f 0000 	mov.w	r0, #0
 8005b98:	f04f 0100 	mov.w	r1, #0
 8005b9c:	0159      	lsls	r1, r3, #5
 8005b9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ba2:	0150      	lsls	r0, r2, #5
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	460b      	mov	r3, r1
 8005ba8:	4641      	mov	r1, r8
 8005baa:	ebb2 0a01 	subs.w	sl, r2, r1
 8005bae:	4649      	mov	r1, r9
 8005bb0:	eb63 0b01 	sbc.w	fp, r3, r1
 8005bb4:	f04f 0200 	mov.w	r2, #0
 8005bb8:	f04f 0300 	mov.w	r3, #0
 8005bbc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005bc0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005bc4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005bc8:	ebb2 040a 	subs.w	r4, r2, sl
 8005bcc:	eb63 050b 	sbc.w	r5, r3, fp
 8005bd0:	f04f 0200 	mov.w	r2, #0
 8005bd4:	f04f 0300 	mov.w	r3, #0
 8005bd8:	00eb      	lsls	r3, r5, #3
 8005bda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005bde:	00e2      	lsls	r2, r4, #3
 8005be0:	4614      	mov	r4, r2
 8005be2:	461d      	mov	r5, r3
 8005be4:	4643      	mov	r3, r8
 8005be6:	18e3      	adds	r3, r4, r3
 8005be8:	603b      	str	r3, [r7, #0]
 8005bea:	464b      	mov	r3, r9
 8005bec:	eb45 0303 	adc.w	r3, r5, r3
 8005bf0:	607b      	str	r3, [r7, #4]
 8005bf2:	f04f 0200 	mov.w	r2, #0
 8005bf6:	f04f 0300 	mov.w	r3, #0
 8005bfa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005bfe:	4629      	mov	r1, r5
 8005c00:	028b      	lsls	r3, r1, #10
 8005c02:	4621      	mov	r1, r4
 8005c04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005c08:	4621      	mov	r1, r4
 8005c0a:	028a      	lsls	r2, r1, #10
 8005c0c:	4610      	mov	r0, r2
 8005c0e:	4619      	mov	r1, r3
 8005c10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c12:	2200      	movs	r2, #0
 8005c14:	61bb      	str	r3, [r7, #24]
 8005c16:	61fa      	str	r2, [r7, #28]
 8005c18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c1c:	f7fa fad4 	bl	80001c8 <__aeabi_uldivmod>
 8005c20:	4602      	mov	r2, r0
 8005c22:	460b      	mov	r3, r1
 8005c24:	4613      	mov	r3, r2
 8005c26:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005c28:	4b0b      	ldr	r3, [pc, #44]	@ (8005c58 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	0c1b      	lsrs	r3, r3, #16
 8005c2e:	f003 0303 	and.w	r3, r3, #3
 8005c32:	3301      	adds	r3, #1
 8005c34:	005b      	lsls	r3, r3, #1
 8005c36:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005c38:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005c3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c40:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005c42:	e002      	b.n	8005c4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c44:	4b05      	ldr	r3, [pc, #20]	@ (8005c5c <HAL_RCC_GetSysClockFreq+0x204>)
 8005c46:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005c48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3750      	adds	r7, #80	@ 0x50
 8005c50:	46bd      	mov	sp, r7
 8005c52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c56:	bf00      	nop
 8005c58:	40023800 	.word	0x40023800
 8005c5c:	00f42400 	.word	0x00f42400
 8005c60:	007a1200 	.word	0x007a1200

08005c64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c64:	b480      	push	{r7}
 8005c66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c68:	4b03      	ldr	r3, [pc, #12]	@ (8005c78 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr
 8005c76:	bf00      	nop
 8005c78:	20000000 	.word	0x20000000

08005c7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005c80:	f7ff fff0 	bl	8005c64 <HAL_RCC_GetHCLKFreq>
 8005c84:	4602      	mov	r2, r0
 8005c86:	4b05      	ldr	r3, [pc, #20]	@ (8005c9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	0a9b      	lsrs	r3, r3, #10
 8005c8c:	f003 0307 	and.w	r3, r3, #7
 8005c90:	4903      	ldr	r1, [pc, #12]	@ (8005ca0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c92:	5ccb      	ldrb	r3, [r1, r3]
 8005c94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	bd80      	pop	{r7, pc}
 8005c9c:	40023800 	.word	0x40023800
 8005ca0:	0800aa20 	.word	0x0800aa20

08005ca4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b086      	sub	sp, #24
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005cac:	2300      	movs	r3, #0
 8005cae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 0301 	and.w	r3, r3, #1
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d105      	bne.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d035      	beq.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005ccc:	4b62      	ldr	r3, [pc, #392]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005cce:	2200      	movs	r2, #0
 8005cd0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005cd2:	f7fb fc07 	bl	80014e4 <HAL_GetTick>
 8005cd6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005cd8:	e008      	b.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005cda:	f7fb fc03 	bl	80014e4 <HAL_GetTick>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	1ad3      	subs	r3, r2, r3
 8005ce4:	2b02      	cmp	r3, #2
 8005ce6:	d901      	bls.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	e0b0      	b.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005cec:	4b5b      	ldr	r3, [pc, #364]	@ (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d1f0      	bne.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	019a      	lsls	r2, r3, #6
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	071b      	lsls	r3, r3, #28
 8005d04:	4955      	ldr	r1, [pc, #340]	@ (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d06:	4313      	orrs	r3, r2
 8005d08:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005d0c:	4b52      	ldr	r3, [pc, #328]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005d0e:	2201      	movs	r2, #1
 8005d10:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d12:	f7fb fbe7 	bl	80014e4 <HAL_GetTick>
 8005d16:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d18:	e008      	b.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005d1a:	f7fb fbe3 	bl	80014e4 <HAL_GetTick>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	d901      	bls.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d28:	2303      	movs	r3, #3
 8005d2a:	e090      	b.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d2c:	4b4b      	ldr	r3, [pc, #300]	@ (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d0f0      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0302 	and.w	r3, r3, #2
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	f000 8083 	beq.w	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d46:	2300      	movs	r3, #0
 8005d48:	60fb      	str	r3, [r7, #12]
 8005d4a:	4b44      	ldr	r3, [pc, #272]	@ (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d4e:	4a43      	ldr	r2, [pc, #268]	@ (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d54:	6413      	str	r3, [r2, #64]	@ 0x40
 8005d56:	4b41      	ldr	r3, [pc, #260]	@ (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d5e:	60fb      	str	r3, [r7, #12]
 8005d60:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005d62:	4b3f      	ldr	r3, [pc, #252]	@ (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a3e      	ldr	r2, [pc, #248]	@ (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d6c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d6e:	f7fb fbb9 	bl	80014e4 <HAL_GetTick>
 8005d72:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005d74:	e008      	b.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d76:	f7fb fbb5 	bl	80014e4 <HAL_GetTick>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	2b02      	cmp	r3, #2
 8005d82:	d901      	bls.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005d84:	2303      	movs	r3, #3
 8005d86:	e062      	b.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005d88:	4b35      	ldr	r3, [pc, #212]	@ (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d0f0      	beq.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005d94:	4b31      	ldr	r3, [pc, #196]	@ (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d98:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d9c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d02f      	beq.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dac:	693a      	ldr	r2, [r7, #16]
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d028      	beq.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005db2:	4b2a      	ldr	r3, [pc, #168]	@ (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005db4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005db6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005dba:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005dbc:	4b29      	ldr	r3, [pc, #164]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005dc2:	4b28      	ldr	r3, [pc, #160]	@ (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005dc8:	4a24      	ldr	r2, [pc, #144]	@ (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005dce:	4b23      	ldr	r3, [pc, #140]	@ (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dd2:	f003 0301 	and.w	r3, r3, #1
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d114      	bne.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005dda:	f7fb fb83 	bl	80014e4 <HAL_GetTick>
 8005dde:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005de0:	e00a      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005de2:	f7fb fb7f 	bl	80014e4 <HAL_GetTick>
 8005de6:	4602      	mov	r2, r0
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	1ad3      	subs	r3, r2, r3
 8005dec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d901      	bls.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005df4:	2303      	movs	r3, #3
 8005df6:	e02a      	b.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005df8:	4b18      	ldr	r3, [pc, #96]	@ (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dfc:	f003 0302 	and.w	r3, r3, #2
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d0ee      	beq.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e0c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e10:	d10d      	bne.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005e12:	4b12      	ldr	r3, [pc, #72]	@ (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005e22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e26:	490d      	ldr	r1, [pc, #52]	@ (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	608b      	str	r3, [r1, #8]
 8005e2c:	e005      	b.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005e2e:	4b0b      	ldr	r3, [pc, #44]	@ (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	4a0a      	ldr	r2, [pc, #40]	@ (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e34:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005e38:	6093      	str	r3, [r2, #8]
 8005e3a:	4b08      	ldr	r3, [pc, #32]	@ (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e3c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e46:	4905      	ldr	r1, [pc, #20]	@ (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005e4c:	2300      	movs	r3, #0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3718      	adds	r7, #24
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop
 8005e58:	42470068 	.word	0x42470068
 8005e5c:	40023800 	.word	0x40023800
 8005e60:	40007000 	.word	0x40007000
 8005e64:	42470e40 	.word	0x42470e40

08005e68 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b087      	sub	sp, #28
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005e70:	2300      	movs	r3, #0
 8005e72:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005e74:	2300      	movs	r3, #0
 8005e76:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d13f      	bne.n	8005f06 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005e86:	4b24      	ldr	r3, [pc, #144]	@ (8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e8e:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d006      	beq.n	8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005e9c:	d12f      	bne.n	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005e9e:	4b1f      	ldr	r3, [pc, #124]	@ (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005ea0:	617b      	str	r3, [r7, #20]
          break;
 8005ea2:	e02f      	b.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005ea4:	4b1c      	ldr	r3, [pc, #112]	@ (8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005eac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005eb0:	d108      	bne.n	8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005eb2:	4b19      	ldr	r3, [pc, #100]	@ (8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005eba:	4a19      	ldr	r2, [pc, #100]	@ (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ec0:	613b      	str	r3, [r7, #16]
 8005ec2:	e007      	b.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005ec4:	4b14      	ldr	r3, [pc, #80]	@ (8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ecc:	4a15      	ldr	r2, [pc, #84]	@ (8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ed2:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005ed4:	4b10      	ldr	r3, [pc, #64]	@ (8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005ed6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005eda:	099b      	lsrs	r3, r3, #6
 8005edc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	fb02 f303 	mul.w	r3, r2, r3
 8005ee6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005eea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005eee:	0f1b      	lsrs	r3, r3, #28
 8005ef0:	f003 0307 	and.w	r3, r3, #7
 8005ef4:	68ba      	ldr	r2, [r7, #8]
 8005ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005efa:	617b      	str	r3, [r7, #20]
          break;
 8005efc:	e002      	b.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8005efe:	2300      	movs	r3, #0
 8005f00:	617b      	str	r3, [r7, #20]
          break;
 8005f02:	bf00      	nop
        }
      }
      break;
 8005f04:	e000      	b.n	8005f08 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8005f06:	bf00      	nop
    }
  }
  return frequency;
 8005f08:	697b      	ldr	r3, [r7, #20]
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	371c      	adds	r7, #28
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	40023800 	.word	0x40023800
 8005f1c:	00bb8000 	.word	0x00bb8000
 8005f20:	007a1200 	.word	0x007a1200
 8005f24:	00f42400 	.word	0x00f42400

08005f28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d101      	bne.n	8005f3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e07b      	b.n	8006032 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d108      	bne.n	8005f54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f4a:	d009      	beq.n	8005f60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	61da      	str	r2, [r3, #28]
 8005f52:	e005      	b.n	8005f60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d106      	bne.n	8005f80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f7fb f8f2 	bl	8001164 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2202      	movs	r2, #2
 8005f84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f96:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005fa8:	431a      	orrs	r2, r3
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fb2:	431a      	orrs	r2, r3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	691b      	ldr	r3, [r3, #16]
 8005fb8:	f003 0302 	and.w	r3, r3, #2
 8005fbc:	431a      	orrs	r2, r3
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	695b      	ldr	r3, [r3, #20]
 8005fc2:	f003 0301 	and.w	r3, r3, #1
 8005fc6:	431a      	orrs	r2, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	699b      	ldr	r3, [r3, #24]
 8005fcc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005fd0:	431a      	orrs	r2, r3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	69db      	ldr	r3, [r3, #28]
 8005fd6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005fda:	431a      	orrs	r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6a1b      	ldr	r3, [r3, #32]
 8005fe0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fe4:	ea42 0103 	orr.w	r1, r2, r3
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fec:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	430a      	orrs	r2, r1
 8005ff6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	699b      	ldr	r3, [r3, #24]
 8005ffc:	0c1b      	lsrs	r3, r3, #16
 8005ffe:	f003 0104 	and.w	r1, r3, #4
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006006:	f003 0210 	and.w	r2, r3, #16
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	430a      	orrs	r2, r1
 8006010:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	69da      	ldr	r2, [r3, #28]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006020:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006030:	2300      	movs	r3, #0
}
 8006032:	4618      	mov	r0, r3
 8006034:	3708      	adds	r7, #8
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}

0800603a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800603a:	b580      	push	{r7, lr}
 800603c:	b082      	sub	sp, #8
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d101      	bne.n	800604c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e041      	b.n	80060d0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006052:	b2db      	uxtb	r3, r3
 8006054:	2b00      	cmp	r3, #0
 8006056:	d106      	bne.n	8006066 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f7fb f8c7 	bl	80011f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2202      	movs	r2, #2
 800606a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	3304      	adds	r3, #4
 8006076:	4619      	mov	r1, r3
 8006078:	4610      	mov	r0, r2
 800607a:	f000 fad9 	bl	8006630 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2201      	movs	r2, #1
 8006082:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2201      	movs	r2, #1
 800608a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2201      	movs	r2, #1
 8006092:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2201      	movs	r2, #1
 800609a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2201      	movs	r2, #1
 80060a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2201      	movs	r2, #1
 80060aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2201      	movs	r2, #1
 80060b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2201      	movs	r2, #1
 80060ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2201      	movs	r2, #1
 80060c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2201      	movs	r2, #1
 80060ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80060ce:	2300      	movs	r3, #0
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3708      	adds	r7, #8
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d101      	bne.n	80060ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e041      	b.n	800616e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d106      	bne.n	8006104 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 f839 	bl	8006176 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2202      	movs	r2, #2
 8006108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	3304      	adds	r3, #4
 8006114:	4619      	mov	r1, r3
 8006116:	4610      	mov	r0, r2
 8006118:	f000 fa8a 	bl	8006630 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3708      	adds	r7, #8
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}

08006176 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006176:	b480      	push	{r7}
 8006178:	b083      	sub	sp, #12
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800617e:	bf00      	nop
 8006180:	370c      	adds	r7, #12
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr
	...

0800618c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b084      	sub	sp, #16
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d109      	bne.n	80061b0 <HAL_TIM_PWM_Start+0x24>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	bf14      	ite	ne
 80061a8:	2301      	movne	r3, #1
 80061aa:	2300      	moveq	r3, #0
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	e022      	b.n	80061f6 <HAL_TIM_PWM_Start+0x6a>
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	2b04      	cmp	r3, #4
 80061b4:	d109      	bne.n	80061ca <HAL_TIM_PWM_Start+0x3e>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	2b01      	cmp	r3, #1
 80061c0:	bf14      	ite	ne
 80061c2:	2301      	movne	r3, #1
 80061c4:	2300      	moveq	r3, #0
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	e015      	b.n	80061f6 <HAL_TIM_PWM_Start+0x6a>
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	2b08      	cmp	r3, #8
 80061ce:	d109      	bne.n	80061e4 <HAL_TIM_PWM_Start+0x58>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	2b01      	cmp	r3, #1
 80061da:	bf14      	ite	ne
 80061dc:	2301      	movne	r3, #1
 80061de:	2300      	moveq	r3, #0
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	e008      	b.n	80061f6 <HAL_TIM_PWM_Start+0x6a>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	bf14      	ite	ne
 80061f0:	2301      	movne	r3, #1
 80061f2:	2300      	moveq	r3, #0
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d001      	beq.n	80061fe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e07c      	b.n	80062f8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d104      	bne.n	800620e <HAL_TIM_PWM_Start+0x82>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2202      	movs	r2, #2
 8006208:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800620c:	e013      	b.n	8006236 <HAL_TIM_PWM_Start+0xaa>
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	2b04      	cmp	r3, #4
 8006212:	d104      	bne.n	800621e <HAL_TIM_PWM_Start+0x92>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2202      	movs	r2, #2
 8006218:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800621c:	e00b      	b.n	8006236 <HAL_TIM_PWM_Start+0xaa>
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	2b08      	cmp	r3, #8
 8006222:	d104      	bne.n	800622e <HAL_TIM_PWM_Start+0xa2>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2202      	movs	r2, #2
 8006228:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800622c:	e003      	b.n	8006236 <HAL_TIM_PWM_Start+0xaa>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2202      	movs	r2, #2
 8006232:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	2201      	movs	r2, #1
 800623c:	6839      	ldr	r1, [r7, #0]
 800623e:	4618      	mov	r0, r3
 8006240:	f000 fce6 	bl	8006c10 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a2d      	ldr	r2, [pc, #180]	@ (8006300 <HAL_TIM_PWM_Start+0x174>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d004      	beq.n	8006258 <HAL_TIM_PWM_Start+0xcc>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a2c      	ldr	r2, [pc, #176]	@ (8006304 <HAL_TIM_PWM_Start+0x178>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d101      	bne.n	800625c <HAL_TIM_PWM_Start+0xd0>
 8006258:	2301      	movs	r3, #1
 800625a:	e000      	b.n	800625e <HAL_TIM_PWM_Start+0xd2>
 800625c:	2300      	movs	r3, #0
 800625e:	2b00      	cmp	r3, #0
 8006260:	d007      	beq.n	8006272 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006270:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a22      	ldr	r2, [pc, #136]	@ (8006300 <HAL_TIM_PWM_Start+0x174>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d022      	beq.n	80062c2 <HAL_TIM_PWM_Start+0x136>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006284:	d01d      	beq.n	80062c2 <HAL_TIM_PWM_Start+0x136>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a1f      	ldr	r2, [pc, #124]	@ (8006308 <HAL_TIM_PWM_Start+0x17c>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d018      	beq.n	80062c2 <HAL_TIM_PWM_Start+0x136>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a1d      	ldr	r2, [pc, #116]	@ (800630c <HAL_TIM_PWM_Start+0x180>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d013      	beq.n	80062c2 <HAL_TIM_PWM_Start+0x136>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a1c      	ldr	r2, [pc, #112]	@ (8006310 <HAL_TIM_PWM_Start+0x184>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d00e      	beq.n	80062c2 <HAL_TIM_PWM_Start+0x136>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a16      	ldr	r2, [pc, #88]	@ (8006304 <HAL_TIM_PWM_Start+0x178>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d009      	beq.n	80062c2 <HAL_TIM_PWM_Start+0x136>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a18      	ldr	r2, [pc, #96]	@ (8006314 <HAL_TIM_PWM_Start+0x188>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d004      	beq.n	80062c2 <HAL_TIM_PWM_Start+0x136>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a16      	ldr	r2, [pc, #88]	@ (8006318 <HAL_TIM_PWM_Start+0x18c>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d111      	bne.n	80062e6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	f003 0307 	and.w	r3, r3, #7
 80062cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2b06      	cmp	r3, #6
 80062d2:	d010      	beq.n	80062f6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f042 0201 	orr.w	r2, r2, #1
 80062e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062e4:	e007      	b.n	80062f6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f042 0201 	orr.w	r2, r2, #1
 80062f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062f6:	2300      	movs	r3, #0
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3710      	adds	r7, #16
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	40010000 	.word	0x40010000
 8006304:	40010400 	.word	0x40010400
 8006308:	40000400 	.word	0x40000400
 800630c:	40000800 	.word	0x40000800
 8006310:	40000c00 	.word	0x40000c00
 8006314:	40014000 	.word	0x40014000
 8006318:	40001800 	.word	0x40001800

0800631c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b086      	sub	sp, #24
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006328:	2300      	movs	r3, #0
 800632a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006332:	2b01      	cmp	r3, #1
 8006334:	d101      	bne.n	800633a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006336:	2302      	movs	r3, #2
 8006338:	e0ae      	b.n	8006498 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2201      	movs	r2, #1
 800633e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2b0c      	cmp	r3, #12
 8006346:	f200 809f 	bhi.w	8006488 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800634a:	a201      	add	r2, pc, #4	@ (adr r2, 8006350 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800634c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006350:	08006385 	.word	0x08006385
 8006354:	08006489 	.word	0x08006489
 8006358:	08006489 	.word	0x08006489
 800635c:	08006489 	.word	0x08006489
 8006360:	080063c5 	.word	0x080063c5
 8006364:	08006489 	.word	0x08006489
 8006368:	08006489 	.word	0x08006489
 800636c:	08006489 	.word	0x08006489
 8006370:	08006407 	.word	0x08006407
 8006374:	08006489 	.word	0x08006489
 8006378:	08006489 	.word	0x08006489
 800637c:	08006489 	.word	0x08006489
 8006380:	08006447 	.word	0x08006447
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	68b9      	ldr	r1, [r7, #8]
 800638a:	4618      	mov	r0, r3
 800638c:	f000 f9f6 	bl	800677c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	699a      	ldr	r2, [r3, #24]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f042 0208 	orr.w	r2, r2, #8
 800639e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	699a      	ldr	r2, [r3, #24]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f022 0204 	bic.w	r2, r2, #4
 80063ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	6999      	ldr	r1, [r3, #24]
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	691a      	ldr	r2, [r3, #16]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	430a      	orrs	r2, r1
 80063c0:	619a      	str	r2, [r3, #24]
      break;
 80063c2:	e064      	b.n	800648e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	68b9      	ldr	r1, [r7, #8]
 80063ca:	4618      	mov	r0, r3
 80063cc:	f000 fa46 	bl	800685c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	699a      	ldr	r2, [r3, #24]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80063de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	699a      	ldr	r2, [r3, #24]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80063ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	6999      	ldr	r1, [r3, #24]
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	021a      	lsls	r2, r3, #8
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	430a      	orrs	r2, r1
 8006402:	619a      	str	r2, [r3, #24]
      break;
 8006404:	e043      	b.n	800648e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	68b9      	ldr	r1, [r7, #8]
 800640c:	4618      	mov	r0, r3
 800640e:	f000 fa9b 	bl	8006948 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	69da      	ldr	r2, [r3, #28]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f042 0208 	orr.w	r2, r2, #8
 8006420:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	69da      	ldr	r2, [r3, #28]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f022 0204 	bic.w	r2, r2, #4
 8006430:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	69d9      	ldr	r1, [r3, #28]
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	691a      	ldr	r2, [r3, #16]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	430a      	orrs	r2, r1
 8006442:	61da      	str	r2, [r3, #28]
      break;
 8006444:	e023      	b.n	800648e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	68b9      	ldr	r1, [r7, #8]
 800644c:	4618      	mov	r0, r3
 800644e:	f000 faef 	bl	8006a30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	69da      	ldr	r2, [r3, #28]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006460:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	69da      	ldr	r2, [r3, #28]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006470:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	69d9      	ldr	r1, [r3, #28]
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	691b      	ldr	r3, [r3, #16]
 800647c:	021a      	lsls	r2, r3, #8
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	430a      	orrs	r2, r1
 8006484:	61da      	str	r2, [r3, #28]
      break;
 8006486:	e002      	b.n	800648e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	75fb      	strb	r3, [r7, #23]
      break;
 800648c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2200      	movs	r2, #0
 8006492:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006496:	7dfb      	ldrb	r3, [r7, #23]
}
 8006498:	4618      	mov	r0, r3
 800649a:	3718      	adds	r7, #24
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b084      	sub	sp, #16
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064aa:	2300      	movs	r3, #0
 80064ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d101      	bne.n	80064bc <HAL_TIM_ConfigClockSource+0x1c>
 80064b8:	2302      	movs	r3, #2
 80064ba:	e0b4      	b.n	8006626 <HAL_TIM_ConfigClockSource+0x186>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2202      	movs	r2, #2
 80064c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80064da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80064e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	68ba      	ldr	r2, [r7, #8]
 80064ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064f4:	d03e      	beq.n	8006574 <HAL_TIM_ConfigClockSource+0xd4>
 80064f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064fa:	f200 8087 	bhi.w	800660c <HAL_TIM_ConfigClockSource+0x16c>
 80064fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006502:	f000 8086 	beq.w	8006612 <HAL_TIM_ConfigClockSource+0x172>
 8006506:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800650a:	d87f      	bhi.n	800660c <HAL_TIM_ConfigClockSource+0x16c>
 800650c:	2b70      	cmp	r3, #112	@ 0x70
 800650e:	d01a      	beq.n	8006546 <HAL_TIM_ConfigClockSource+0xa6>
 8006510:	2b70      	cmp	r3, #112	@ 0x70
 8006512:	d87b      	bhi.n	800660c <HAL_TIM_ConfigClockSource+0x16c>
 8006514:	2b60      	cmp	r3, #96	@ 0x60
 8006516:	d050      	beq.n	80065ba <HAL_TIM_ConfigClockSource+0x11a>
 8006518:	2b60      	cmp	r3, #96	@ 0x60
 800651a:	d877      	bhi.n	800660c <HAL_TIM_ConfigClockSource+0x16c>
 800651c:	2b50      	cmp	r3, #80	@ 0x50
 800651e:	d03c      	beq.n	800659a <HAL_TIM_ConfigClockSource+0xfa>
 8006520:	2b50      	cmp	r3, #80	@ 0x50
 8006522:	d873      	bhi.n	800660c <HAL_TIM_ConfigClockSource+0x16c>
 8006524:	2b40      	cmp	r3, #64	@ 0x40
 8006526:	d058      	beq.n	80065da <HAL_TIM_ConfigClockSource+0x13a>
 8006528:	2b40      	cmp	r3, #64	@ 0x40
 800652a:	d86f      	bhi.n	800660c <HAL_TIM_ConfigClockSource+0x16c>
 800652c:	2b30      	cmp	r3, #48	@ 0x30
 800652e:	d064      	beq.n	80065fa <HAL_TIM_ConfigClockSource+0x15a>
 8006530:	2b30      	cmp	r3, #48	@ 0x30
 8006532:	d86b      	bhi.n	800660c <HAL_TIM_ConfigClockSource+0x16c>
 8006534:	2b20      	cmp	r3, #32
 8006536:	d060      	beq.n	80065fa <HAL_TIM_ConfigClockSource+0x15a>
 8006538:	2b20      	cmp	r3, #32
 800653a:	d867      	bhi.n	800660c <HAL_TIM_ConfigClockSource+0x16c>
 800653c:	2b00      	cmp	r3, #0
 800653e:	d05c      	beq.n	80065fa <HAL_TIM_ConfigClockSource+0x15a>
 8006540:	2b10      	cmp	r3, #16
 8006542:	d05a      	beq.n	80065fa <HAL_TIM_ConfigClockSource+0x15a>
 8006544:	e062      	b.n	800660c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006556:	f000 fb3b 	bl	8006bd0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006568:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	68ba      	ldr	r2, [r7, #8]
 8006570:	609a      	str	r2, [r3, #8]
      break;
 8006572:	e04f      	b.n	8006614 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006584:	f000 fb24 	bl	8006bd0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	689a      	ldr	r2, [r3, #8]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006596:	609a      	str	r2, [r3, #8]
      break;
 8006598:	e03c      	b.n	8006614 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065a6:	461a      	mov	r2, r3
 80065a8:	f000 fa98 	bl	8006adc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	2150      	movs	r1, #80	@ 0x50
 80065b2:	4618      	mov	r0, r3
 80065b4:	f000 faf1 	bl	8006b9a <TIM_ITRx_SetConfig>
      break;
 80065b8:	e02c      	b.n	8006614 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80065c6:	461a      	mov	r2, r3
 80065c8:	f000 fab7 	bl	8006b3a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	2160      	movs	r1, #96	@ 0x60
 80065d2:	4618      	mov	r0, r3
 80065d4:	f000 fae1 	bl	8006b9a <TIM_ITRx_SetConfig>
      break;
 80065d8:	e01c      	b.n	8006614 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065e6:	461a      	mov	r2, r3
 80065e8:	f000 fa78 	bl	8006adc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2140      	movs	r1, #64	@ 0x40
 80065f2:	4618      	mov	r0, r3
 80065f4:	f000 fad1 	bl	8006b9a <TIM_ITRx_SetConfig>
      break;
 80065f8:	e00c      	b.n	8006614 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4619      	mov	r1, r3
 8006604:	4610      	mov	r0, r2
 8006606:	f000 fac8 	bl	8006b9a <TIM_ITRx_SetConfig>
      break;
 800660a:	e003      	b.n	8006614 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	73fb      	strb	r3, [r7, #15]
      break;
 8006610:	e000      	b.n	8006614 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006612:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006624:	7bfb      	ldrb	r3, [r7, #15]
}
 8006626:	4618      	mov	r0, r3
 8006628:	3710      	adds	r7, #16
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
	...

08006630 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006630:	b480      	push	{r7}
 8006632:	b085      	sub	sp, #20
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4a43      	ldr	r2, [pc, #268]	@ (8006750 <TIM_Base_SetConfig+0x120>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d013      	beq.n	8006670 <TIM_Base_SetConfig+0x40>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800664e:	d00f      	beq.n	8006670 <TIM_Base_SetConfig+0x40>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	4a40      	ldr	r2, [pc, #256]	@ (8006754 <TIM_Base_SetConfig+0x124>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d00b      	beq.n	8006670 <TIM_Base_SetConfig+0x40>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4a3f      	ldr	r2, [pc, #252]	@ (8006758 <TIM_Base_SetConfig+0x128>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d007      	beq.n	8006670 <TIM_Base_SetConfig+0x40>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	4a3e      	ldr	r2, [pc, #248]	@ (800675c <TIM_Base_SetConfig+0x12c>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d003      	beq.n	8006670 <TIM_Base_SetConfig+0x40>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	4a3d      	ldr	r2, [pc, #244]	@ (8006760 <TIM_Base_SetConfig+0x130>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d108      	bne.n	8006682 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006676:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	4313      	orrs	r3, r2
 8006680:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a32      	ldr	r2, [pc, #200]	@ (8006750 <TIM_Base_SetConfig+0x120>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d02b      	beq.n	80066e2 <TIM_Base_SetConfig+0xb2>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006690:	d027      	beq.n	80066e2 <TIM_Base_SetConfig+0xb2>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4a2f      	ldr	r2, [pc, #188]	@ (8006754 <TIM_Base_SetConfig+0x124>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d023      	beq.n	80066e2 <TIM_Base_SetConfig+0xb2>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a2e      	ldr	r2, [pc, #184]	@ (8006758 <TIM_Base_SetConfig+0x128>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d01f      	beq.n	80066e2 <TIM_Base_SetConfig+0xb2>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4a2d      	ldr	r2, [pc, #180]	@ (800675c <TIM_Base_SetConfig+0x12c>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d01b      	beq.n	80066e2 <TIM_Base_SetConfig+0xb2>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4a2c      	ldr	r2, [pc, #176]	@ (8006760 <TIM_Base_SetConfig+0x130>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d017      	beq.n	80066e2 <TIM_Base_SetConfig+0xb2>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4a2b      	ldr	r2, [pc, #172]	@ (8006764 <TIM_Base_SetConfig+0x134>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d013      	beq.n	80066e2 <TIM_Base_SetConfig+0xb2>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a2a      	ldr	r2, [pc, #168]	@ (8006768 <TIM_Base_SetConfig+0x138>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d00f      	beq.n	80066e2 <TIM_Base_SetConfig+0xb2>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a29      	ldr	r2, [pc, #164]	@ (800676c <TIM_Base_SetConfig+0x13c>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d00b      	beq.n	80066e2 <TIM_Base_SetConfig+0xb2>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a28      	ldr	r2, [pc, #160]	@ (8006770 <TIM_Base_SetConfig+0x140>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d007      	beq.n	80066e2 <TIM_Base_SetConfig+0xb2>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4a27      	ldr	r2, [pc, #156]	@ (8006774 <TIM_Base_SetConfig+0x144>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d003      	beq.n	80066e2 <TIM_Base_SetConfig+0xb2>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4a26      	ldr	r2, [pc, #152]	@ (8006778 <TIM_Base_SetConfig+0x148>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d108      	bne.n	80066f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	4313      	orrs	r3, r2
 80066f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	695b      	ldr	r3, [r3, #20]
 80066fe:	4313      	orrs	r3, r2
 8006700:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	689a      	ldr	r2, [r3, #8]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	4a0e      	ldr	r2, [pc, #56]	@ (8006750 <TIM_Base_SetConfig+0x120>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d003      	beq.n	8006722 <TIM_Base_SetConfig+0xf2>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4a10      	ldr	r2, [pc, #64]	@ (8006760 <TIM_Base_SetConfig+0x130>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d103      	bne.n	800672a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	691a      	ldr	r2, [r3, #16]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f043 0204 	orr.w	r2, r3, #4
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2201      	movs	r2, #1
 800673a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	601a      	str	r2, [r3, #0]
}
 8006742:	bf00      	nop
 8006744:	3714      	adds	r7, #20
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr
 800674e:	bf00      	nop
 8006750:	40010000 	.word	0x40010000
 8006754:	40000400 	.word	0x40000400
 8006758:	40000800 	.word	0x40000800
 800675c:	40000c00 	.word	0x40000c00
 8006760:	40010400 	.word	0x40010400
 8006764:	40014000 	.word	0x40014000
 8006768:	40014400 	.word	0x40014400
 800676c:	40014800 	.word	0x40014800
 8006770:	40001800 	.word	0x40001800
 8006774:	40001c00 	.word	0x40001c00
 8006778:	40002000 	.word	0x40002000

0800677c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800677c:	b480      	push	{r7}
 800677e:	b087      	sub	sp, #28
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a1b      	ldr	r3, [r3, #32]
 800678a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6a1b      	ldr	r3, [r3, #32]
 8006790:	f023 0201 	bic.w	r2, r3, #1
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	699b      	ldr	r3, [r3, #24]
 80067a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f023 0303 	bic.w	r3, r3, #3
 80067b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68fa      	ldr	r2, [r7, #12]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	f023 0302 	bic.w	r3, r3, #2
 80067c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	697a      	ldr	r2, [r7, #20]
 80067cc:	4313      	orrs	r3, r2
 80067ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a20      	ldr	r2, [pc, #128]	@ (8006854 <TIM_OC1_SetConfig+0xd8>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d003      	beq.n	80067e0 <TIM_OC1_SetConfig+0x64>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a1f      	ldr	r2, [pc, #124]	@ (8006858 <TIM_OC1_SetConfig+0xdc>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d10c      	bne.n	80067fa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	f023 0308 	bic.w	r3, r3, #8
 80067e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	697a      	ldr	r2, [r7, #20]
 80067ee:	4313      	orrs	r3, r2
 80067f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	f023 0304 	bic.w	r3, r3, #4
 80067f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4a15      	ldr	r2, [pc, #84]	@ (8006854 <TIM_OC1_SetConfig+0xd8>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d003      	beq.n	800680a <TIM_OC1_SetConfig+0x8e>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4a14      	ldr	r2, [pc, #80]	@ (8006858 <TIM_OC1_SetConfig+0xdc>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d111      	bne.n	800682e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006810:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006818:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	695b      	ldr	r3, [r3, #20]
 800681e:	693a      	ldr	r2, [r7, #16]
 8006820:	4313      	orrs	r3, r2
 8006822:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	699b      	ldr	r3, [r3, #24]
 8006828:	693a      	ldr	r2, [r7, #16]
 800682a:	4313      	orrs	r3, r2
 800682c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	693a      	ldr	r2, [r7, #16]
 8006832:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	68fa      	ldr	r2, [r7, #12]
 8006838:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	685a      	ldr	r2, [r3, #4]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	697a      	ldr	r2, [r7, #20]
 8006846:	621a      	str	r2, [r3, #32]
}
 8006848:	bf00      	nop
 800684a:	371c      	adds	r7, #28
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr
 8006854:	40010000 	.word	0x40010000
 8006858:	40010400 	.word	0x40010400

0800685c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800685c:	b480      	push	{r7}
 800685e:	b087      	sub	sp, #28
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6a1b      	ldr	r3, [r3, #32]
 800686a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6a1b      	ldr	r3, [r3, #32]
 8006870:	f023 0210 	bic.w	r2, r3, #16
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	699b      	ldr	r3, [r3, #24]
 8006882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800688a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006892:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	021b      	lsls	r3, r3, #8
 800689a:	68fa      	ldr	r2, [r7, #12]
 800689c:	4313      	orrs	r3, r2
 800689e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	f023 0320 	bic.w	r3, r3, #32
 80068a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	011b      	lsls	r3, r3, #4
 80068ae:	697a      	ldr	r2, [r7, #20]
 80068b0:	4313      	orrs	r3, r2
 80068b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a22      	ldr	r2, [pc, #136]	@ (8006940 <TIM_OC2_SetConfig+0xe4>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d003      	beq.n	80068c4 <TIM_OC2_SetConfig+0x68>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a21      	ldr	r2, [pc, #132]	@ (8006944 <TIM_OC2_SetConfig+0xe8>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d10d      	bne.n	80068e0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	011b      	lsls	r3, r3, #4
 80068d2:	697a      	ldr	r2, [r7, #20]
 80068d4:	4313      	orrs	r3, r2
 80068d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	4a17      	ldr	r2, [pc, #92]	@ (8006940 <TIM_OC2_SetConfig+0xe4>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d003      	beq.n	80068f0 <TIM_OC2_SetConfig+0x94>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	4a16      	ldr	r2, [pc, #88]	@ (8006944 <TIM_OC2_SetConfig+0xe8>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d113      	bne.n	8006918 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80068f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80068fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	695b      	ldr	r3, [r3, #20]
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	693a      	ldr	r2, [r7, #16]
 8006908:	4313      	orrs	r3, r2
 800690a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	699b      	ldr	r3, [r3, #24]
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	693a      	ldr	r2, [r7, #16]
 8006914:	4313      	orrs	r3, r2
 8006916:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	693a      	ldr	r2, [r7, #16]
 800691c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	68fa      	ldr	r2, [r7, #12]
 8006922:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	685a      	ldr	r2, [r3, #4]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	697a      	ldr	r2, [r7, #20]
 8006930:	621a      	str	r2, [r3, #32]
}
 8006932:	bf00      	nop
 8006934:	371c      	adds	r7, #28
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr
 800693e:	bf00      	nop
 8006940:	40010000 	.word	0x40010000
 8006944:	40010400 	.word	0x40010400

08006948 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006948:	b480      	push	{r7}
 800694a:	b087      	sub	sp, #28
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a1b      	ldr	r3, [r3, #32]
 8006956:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6a1b      	ldr	r3, [r3, #32]
 800695c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	69db      	ldr	r3, [r3, #28]
 800696e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006976:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f023 0303 	bic.w	r3, r3, #3
 800697e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	68fa      	ldr	r2, [r7, #12]
 8006986:	4313      	orrs	r3, r2
 8006988:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006990:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	021b      	lsls	r3, r3, #8
 8006998:	697a      	ldr	r2, [r7, #20]
 800699a:	4313      	orrs	r3, r2
 800699c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4a21      	ldr	r2, [pc, #132]	@ (8006a28 <TIM_OC3_SetConfig+0xe0>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d003      	beq.n	80069ae <TIM_OC3_SetConfig+0x66>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	4a20      	ldr	r2, [pc, #128]	@ (8006a2c <TIM_OC3_SetConfig+0xe4>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d10d      	bne.n	80069ca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80069b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	021b      	lsls	r3, r3, #8
 80069bc:	697a      	ldr	r2, [r7, #20]
 80069be:	4313      	orrs	r3, r2
 80069c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80069c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4a16      	ldr	r2, [pc, #88]	@ (8006a28 <TIM_OC3_SetConfig+0xe0>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d003      	beq.n	80069da <TIM_OC3_SetConfig+0x92>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4a15      	ldr	r2, [pc, #84]	@ (8006a2c <TIM_OC3_SetConfig+0xe4>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d113      	bne.n	8006a02 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80069e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80069e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	695b      	ldr	r3, [r3, #20]
 80069ee:	011b      	lsls	r3, r3, #4
 80069f0:	693a      	ldr	r2, [r7, #16]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	699b      	ldr	r3, [r3, #24]
 80069fa:	011b      	lsls	r3, r3, #4
 80069fc:	693a      	ldr	r2, [r7, #16]
 80069fe:	4313      	orrs	r3, r2
 8006a00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	693a      	ldr	r2, [r7, #16]
 8006a06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	68fa      	ldr	r2, [r7, #12]
 8006a0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	685a      	ldr	r2, [r3, #4]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	697a      	ldr	r2, [r7, #20]
 8006a1a:	621a      	str	r2, [r3, #32]
}
 8006a1c:	bf00      	nop
 8006a1e:	371c      	adds	r7, #28
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr
 8006a28:	40010000 	.word	0x40010000
 8006a2c:	40010400 	.word	0x40010400

08006a30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b087      	sub	sp, #28
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6a1b      	ldr	r3, [r3, #32]
 8006a3e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6a1b      	ldr	r3, [r3, #32]
 8006a44:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	69db      	ldr	r3, [r3, #28]
 8006a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	021b      	lsls	r3, r3, #8
 8006a6e:	68fa      	ldr	r2, [r7, #12]
 8006a70:	4313      	orrs	r3, r2
 8006a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006a7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	031b      	lsls	r3, r3, #12
 8006a82:	693a      	ldr	r2, [r7, #16]
 8006a84:	4313      	orrs	r3, r2
 8006a86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	4a12      	ldr	r2, [pc, #72]	@ (8006ad4 <TIM_OC4_SetConfig+0xa4>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d003      	beq.n	8006a98 <TIM_OC4_SetConfig+0x68>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	4a11      	ldr	r2, [pc, #68]	@ (8006ad8 <TIM_OC4_SetConfig+0xa8>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d109      	bne.n	8006aac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	695b      	ldr	r3, [r3, #20]
 8006aa4:	019b      	lsls	r3, r3, #6
 8006aa6:	697a      	ldr	r2, [r7, #20]
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	697a      	ldr	r2, [r7, #20]
 8006ab0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	68fa      	ldr	r2, [r7, #12]
 8006ab6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	685a      	ldr	r2, [r3, #4]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	693a      	ldr	r2, [r7, #16]
 8006ac4:	621a      	str	r2, [r3, #32]
}
 8006ac6:	bf00      	nop
 8006ac8:	371c      	adds	r7, #28
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr
 8006ad2:	bf00      	nop
 8006ad4:	40010000 	.word	0x40010000
 8006ad8:	40010400 	.word	0x40010400

08006adc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b087      	sub	sp, #28
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6a1b      	ldr	r3, [r3, #32]
 8006aec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	6a1b      	ldr	r3, [r3, #32]
 8006af2:	f023 0201 	bic.w	r2, r3, #1
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	699b      	ldr	r3, [r3, #24]
 8006afe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	011b      	lsls	r3, r3, #4
 8006b0c:	693a      	ldr	r2, [r7, #16]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	f023 030a 	bic.w	r3, r3, #10
 8006b18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b1a:	697a      	ldr	r2, [r7, #20]
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	693a      	ldr	r2, [r7, #16]
 8006b26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	697a      	ldr	r2, [r7, #20]
 8006b2c:	621a      	str	r2, [r3, #32]
}
 8006b2e:	bf00      	nop
 8006b30:	371c      	adds	r7, #28
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr

08006b3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b3a:	b480      	push	{r7}
 8006b3c:	b087      	sub	sp, #28
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	60f8      	str	r0, [r7, #12]
 8006b42:	60b9      	str	r1, [r7, #8]
 8006b44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	6a1b      	ldr	r3, [r3, #32]
 8006b4a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6a1b      	ldr	r3, [r3, #32]
 8006b50:	f023 0210 	bic.w	r2, r3, #16
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	699b      	ldr	r3, [r3, #24]
 8006b5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006b64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	031b      	lsls	r3, r3, #12
 8006b6a:	693a      	ldr	r2, [r7, #16]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006b76:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	011b      	lsls	r3, r3, #4
 8006b7c:	697a      	ldr	r2, [r7, #20]
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	693a      	ldr	r2, [r7, #16]
 8006b86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	697a      	ldr	r2, [r7, #20]
 8006b8c:	621a      	str	r2, [r3, #32]
}
 8006b8e:	bf00      	nop
 8006b90:	371c      	adds	r7, #28
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr

08006b9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b9a:	b480      	push	{r7}
 8006b9c:	b085      	sub	sp, #20
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
 8006ba2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bb0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006bb2:	683a      	ldr	r2, [r7, #0]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	f043 0307 	orr.w	r3, r3, #7
 8006bbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	68fa      	ldr	r2, [r7, #12]
 8006bc2:	609a      	str	r2, [r3, #8]
}
 8006bc4:	bf00      	nop
 8006bc6:	3714      	adds	r7, #20
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr

08006bd0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b087      	sub	sp, #28
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	60f8      	str	r0, [r7, #12]
 8006bd8:	60b9      	str	r1, [r7, #8]
 8006bda:	607a      	str	r2, [r7, #4]
 8006bdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006bea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	021a      	lsls	r2, r3, #8
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	431a      	orrs	r2, r3
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	697a      	ldr	r2, [r7, #20]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	697a      	ldr	r2, [r7, #20]
 8006c02:	609a      	str	r2, [r3, #8]
}
 8006c04:	bf00      	nop
 8006c06:	371c      	adds	r7, #28
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b087      	sub	sp, #28
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	f003 031f 	and.w	r3, r3, #31
 8006c22:	2201      	movs	r2, #1
 8006c24:	fa02 f303 	lsl.w	r3, r2, r3
 8006c28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	6a1a      	ldr	r2, [r3, #32]
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	43db      	mvns	r3, r3
 8006c32:	401a      	ands	r2, r3
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6a1a      	ldr	r2, [r3, #32]
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	f003 031f 	and.w	r3, r3, #31
 8006c42:	6879      	ldr	r1, [r7, #4]
 8006c44:	fa01 f303 	lsl.w	r3, r1, r3
 8006c48:	431a      	orrs	r2, r3
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	621a      	str	r2, [r3, #32]
}
 8006c4e:	bf00      	nop
 8006c50:	371c      	adds	r7, #28
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr
	...

08006c5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b085      	sub	sp, #20
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d101      	bne.n	8006c74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c70:	2302      	movs	r3, #2
 8006c72:	e05a      	b.n	8006d2a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2202      	movs	r2, #2
 8006c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	68fa      	ldr	r2, [r7, #12]
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	68fa      	ldr	r2, [r7, #12]
 8006cac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a21      	ldr	r2, [pc, #132]	@ (8006d38 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d022      	beq.n	8006cfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cc0:	d01d      	beq.n	8006cfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a1d      	ldr	r2, [pc, #116]	@ (8006d3c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d018      	beq.n	8006cfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a1b      	ldr	r2, [pc, #108]	@ (8006d40 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d013      	beq.n	8006cfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a1a      	ldr	r2, [pc, #104]	@ (8006d44 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d00e      	beq.n	8006cfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a18      	ldr	r2, [pc, #96]	@ (8006d48 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d009      	beq.n	8006cfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a17      	ldr	r2, [pc, #92]	@ (8006d4c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d004      	beq.n	8006cfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a15      	ldr	r2, [pc, #84]	@ (8006d50 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d10c      	bne.n	8006d18 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	68ba      	ldr	r2, [r7, #8]
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	68ba      	ldr	r2, [r7, #8]
 8006d16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006d28:	2300      	movs	r3, #0
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3714      	adds	r7, #20
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr
 8006d36:	bf00      	nop
 8006d38:	40010000 	.word	0x40010000
 8006d3c:	40000400 	.word	0x40000400
 8006d40:	40000800 	.word	0x40000800
 8006d44:	40000c00 	.word	0x40000c00
 8006d48:	40010400 	.word	0x40010400
 8006d4c:	40014000 	.word	0x40014000
 8006d50:	40001800 	.word	0x40001800

08006d54 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d54:	b084      	sub	sp, #16
 8006d56:	b580      	push	{r7, lr}
 8006d58:	b084      	sub	sp, #16
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
 8006d5e:	f107 001c 	add.w	r0, r7, #28
 8006d62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006d66:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	d123      	bne.n	8006db6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d72:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	68db      	ldr	r3, [r3, #12]
 8006d7e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006d82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	68db      	ldr	r3, [r3, #12]
 8006d8e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006d96:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006d9a:	2b01      	cmp	r3, #1
 8006d9c:	d105      	bne.n	8006daa <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 f9dc 	bl	8007168 <USB_CoreReset>
 8006db0:	4603      	mov	r3, r0
 8006db2:	73fb      	strb	r3, [r7, #15]
 8006db4:	e01b      	b.n	8006dee <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	68db      	ldr	r3, [r3, #12]
 8006dba:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 f9d0 	bl	8007168 <USB_CoreReset>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006dcc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d106      	bne.n	8006de2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dd8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	639a      	str	r2, [r3, #56]	@ 0x38
 8006de0:	e005      	b.n	8006dee <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006de6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006dee:	7fbb      	ldrb	r3, [r7, #30]
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d10b      	bne.n	8006e0c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	f043 0206 	orr.w	r2, r3, #6
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	f043 0220 	orr.w	r2, r3, #32
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3710      	adds	r7, #16
 8006e12:	46bd      	mov	sp, r7
 8006e14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e18:	b004      	add	sp, #16
 8006e1a:	4770      	bx	lr

08006e1c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	f043 0201 	orr.w	r2, r3, #1
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e30:	2300      	movs	r3, #0
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	370c      	adds	r7, #12
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr

08006e3e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e3e:	b480      	push	{r7}
 8006e40:	b083      	sub	sp, #12
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	f023 0201 	bic.w	r2, r3, #1
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e52:	2300      	movs	r3, #0
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	370c      	adds	r7, #12
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	460b      	mov	r3, r1
 8006e6a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006e7c:	78fb      	ldrb	r3, [r7, #3]
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	d115      	bne.n	8006eae <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	68db      	ldr	r3, [r3, #12]
 8006e86:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006e8e:	200a      	movs	r0, #10
 8006e90:	f7fa fb34 	bl	80014fc <HAL_Delay>
      ms += 10U;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	330a      	adds	r3, #10
 8006e98:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 f956 	bl	800714c <USB_GetMode>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d01e      	beq.n	8006ee4 <USB_SetCurrentMode+0x84>
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2bc7      	cmp	r3, #199	@ 0xc7
 8006eaa:	d9f0      	bls.n	8006e8e <USB_SetCurrentMode+0x2e>
 8006eac:	e01a      	b.n	8006ee4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006eae:	78fb      	ldrb	r3, [r7, #3]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d115      	bne.n	8006ee0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006ec0:	200a      	movs	r0, #10
 8006ec2:	f7fa fb1b 	bl	80014fc <HAL_Delay>
      ms += 10U;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	330a      	adds	r3, #10
 8006eca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 f93d 	bl	800714c <USB_GetMode>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d005      	beq.n	8006ee4 <USB_SetCurrentMode+0x84>
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2bc7      	cmp	r3, #199	@ 0xc7
 8006edc:	d9f0      	bls.n	8006ec0 <USB_SetCurrentMode+0x60>
 8006ede:	e001      	b.n	8006ee4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e005      	b.n	8006ef0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2bc8      	cmp	r3, #200	@ 0xc8
 8006ee8:	d101      	bne.n	8006eee <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
 8006eec:	e000      	b.n	8006ef0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006eee:	2300      	movs	r3, #0
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3710      	adds	r7, #16
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b085      	sub	sp, #20
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006f02:	2300      	movs	r3, #0
 8006f04:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	3301      	adds	r3, #1
 8006f0a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f12:	d901      	bls.n	8006f18 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006f14:	2303      	movs	r3, #3
 8006f16:	e01b      	b.n	8006f50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	691b      	ldr	r3, [r3, #16]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	daf2      	bge.n	8006f06 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006f20:	2300      	movs	r3, #0
 8006f22:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	019b      	lsls	r3, r3, #6
 8006f28:	f043 0220 	orr.w	r2, r3, #32
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	3301      	adds	r3, #1
 8006f34:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f3c:	d901      	bls.n	8006f42 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006f3e:	2303      	movs	r3, #3
 8006f40:	e006      	b.n	8006f50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	691b      	ldr	r3, [r3, #16]
 8006f46:	f003 0320 	and.w	r3, r3, #32
 8006f4a:	2b20      	cmp	r3, #32
 8006f4c:	d0f0      	beq.n	8006f30 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006f4e:	2300      	movs	r3, #0
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3714      	adds	r7, #20
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr

08006f5c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b085      	sub	sp, #20
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f64:	2300      	movs	r3, #0
 8006f66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	3301      	adds	r3, #1
 8006f6c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f74:	d901      	bls.n	8006f7a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006f76:	2303      	movs	r3, #3
 8006f78:	e018      	b.n	8006fac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	691b      	ldr	r3, [r3, #16]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	daf2      	bge.n	8006f68 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006f82:	2300      	movs	r3, #0
 8006f84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2210      	movs	r2, #16
 8006f8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	3301      	adds	r3, #1
 8006f90:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f98:	d901      	bls.n	8006f9e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006f9a:	2303      	movs	r3, #3
 8006f9c:	e006      	b.n	8006fac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	691b      	ldr	r3, [r3, #16]
 8006fa2:	f003 0310 	and.w	r3, r3, #16
 8006fa6:	2b10      	cmp	r3, #16
 8006fa8:	d0f0      	beq.n	8006f8c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006faa:	2300      	movs	r3, #0
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3714      	adds	r7, #20
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr

08006fb8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b089      	sub	sp, #36	@ 0x24
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	60b9      	str	r1, [r7, #8]
 8006fc2:	4611      	mov	r1, r2
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	460b      	mov	r3, r1
 8006fc8:	71fb      	strb	r3, [r7, #7]
 8006fca:	4613      	mov	r3, r2
 8006fcc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006fd6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d123      	bne.n	8007026 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006fde:	88bb      	ldrh	r3, [r7, #4]
 8006fe0:	3303      	adds	r3, #3
 8006fe2:	089b      	lsrs	r3, r3, #2
 8006fe4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	61bb      	str	r3, [r7, #24]
 8006fea:	e018      	b.n	800701e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006fec:	79fb      	ldrb	r3, [r7, #7]
 8006fee:	031a      	lsls	r2, r3, #12
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	4413      	add	r3, r2
 8006ff4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	69fb      	ldr	r3, [r7, #28]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007000:	69fb      	ldr	r3, [r7, #28]
 8007002:	3301      	adds	r3, #1
 8007004:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007006:	69fb      	ldr	r3, [r7, #28]
 8007008:	3301      	adds	r3, #1
 800700a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800700c:	69fb      	ldr	r3, [r7, #28]
 800700e:	3301      	adds	r3, #1
 8007010:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007012:	69fb      	ldr	r3, [r7, #28]
 8007014:	3301      	adds	r3, #1
 8007016:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007018:	69bb      	ldr	r3, [r7, #24]
 800701a:	3301      	adds	r3, #1
 800701c:	61bb      	str	r3, [r7, #24]
 800701e:	69ba      	ldr	r2, [r7, #24]
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	429a      	cmp	r2, r3
 8007024:	d3e2      	bcc.n	8006fec <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007026:	2300      	movs	r3, #0
}
 8007028:	4618      	mov	r0, r3
 800702a:	3724      	adds	r7, #36	@ 0x24
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr

08007034 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007034:	b480      	push	{r7}
 8007036:	b08b      	sub	sp, #44	@ 0x2c
 8007038:	af00      	add	r7, sp, #0
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	60b9      	str	r1, [r7, #8]
 800703e:	4613      	mov	r3, r2
 8007040:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800704a:	88fb      	ldrh	r3, [r7, #6]
 800704c:	089b      	lsrs	r3, r3, #2
 800704e:	b29b      	uxth	r3, r3
 8007050:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007052:	88fb      	ldrh	r3, [r7, #6]
 8007054:	f003 0303 	and.w	r3, r3, #3
 8007058:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800705a:	2300      	movs	r3, #0
 800705c:	623b      	str	r3, [r7, #32]
 800705e:	e014      	b.n	800708a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007060:	69bb      	ldr	r3, [r7, #24]
 8007062:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800706a:	601a      	str	r2, [r3, #0]
    pDest++;
 800706c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800706e:	3301      	adds	r3, #1
 8007070:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007074:	3301      	adds	r3, #1
 8007076:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800707a:	3301      	adds	r3, #1
 800707c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800707e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007080:	3301      	adds	r3, #1
 8007082:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007084:	6a3b      	ldr	r3, [r7, #32]
 8007086:	3301      	adds	r3, #1
 8007088:	623b      	str	r3, [r7, #32]
 800708a:	6a3a      	ldr	r2, [r7, #32]
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	429a      	cmp	r2, r3
 8007090:	d3e6      	bcc.n	8007060 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007092:	8bfb      	ldrh	r3, [r7, #30]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d01e      	beq.n	80070d6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007098:	2300      	movs	r3, #0
 800709a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800709c:	69bb      	ldr	r3, [r7, #24]
 800709e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070a2:	461a      	mov	r2, r3
 80070a4:	f107 0310 	add.w	r3, r7, #16
 80070a8:	6812      	ldr	r2, [r2, #0]
 80070aa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80070ac:	693a      	ldr	r2, [r7, #16]
 80070ae:	6a3b      	ldr	r3, [r7, #32]
 80070b0:	b2db      	uxtb	r3, r3
 80070b2:	00db      	lsls	r3, r3, #3
 80070b4:	fa22 f303 	lsr.w	r3, r2, r3
 80070b8:	b2da      	uxtb	r2, r3
 80070ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070bc:	701a      	strb	r2, [r3, #0]
      i++;
 80070be:	6a3b      	ldr	r3, [r7, #32]
 80070c0:	3301      	adds	r3, #1
 80070c2:	623b      	str	r3, [r7, #32]
      pDest++;
 80070c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c6:	3301      	adds	r3, #1
 80070c8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80070ca:	8bfb      	ldrh	r3, [r7, #30]
 80070cc:	3b01      	subs	r3, #1
 80070ce:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80070d0:	8bfb      	ldrh	r3, [r7, #30]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d1ea      	bne.n	80070ac <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80070d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80070d8:	4618      	mov	r0, r3
 80070da:	372c      	adds	r7, #44	@ 0x2c
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr

080070e4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b085      	sub	sp, #20
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	695b      	ldr	r3, [r3, #20]
 80070f0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	699b      	ldr	r3, [r3, #24]
 80070f6:	68fa      	ldr	r2, [r7, #12]
 80070f8:	4013      	ands	r3, r2
 80070fa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80070fc:	68fb      	ldr	r3, [r7, #12]
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3714      	adds	r7, #20
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr

0800710a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800710a:	b480      	push	{r7}
 800710c:	b085      	sub	sp, #20
 800710e:	af00      	add	r7, sp, #0
 8007110:	6078      	str	r0, [r7, #4]
 8007112:	460b      	mov	r3, r1
 8007114:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800711a:	78fb      	ldrb	r3, [r7, #3]
 800711c:	015a      	lsls	r2, r3, #5
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	4413      	add	r3, r2
 8007122:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800712a:	78fb      	ldrb	r3, [r7, #3]
 800712c:	015a      	lsls	r2, r3, #5
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	4413      	add	r3, r2
 8007132:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	68ba      	ldr	r2, [r7, #8]
 800713a:	4013      	ands	r3, r2
 800713c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800713e:	68bb      	ldr	r3, [r7, #8]
}
 8007140:	4618      	mov	r0, r3
 8007142:	3714      	adds	r7, #20
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr

0800714c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800714c:	b480      	push	{r7}
 800714e:	b083      	sub	sp, #12
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	695b      	ldr	r3, [r3, #20]
 8007158:	f003 0301 	and.w	r3, r3, #1
}
 800715c:	4618      	mov	r0, r3
 800715e:	370c      	adds	r7, #12
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr

08007168 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007168:	b480      	push	{r7}
 800716a:	b085      	sub	sp, #20
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007170:	2300      	movs	r3, #0
 8007172:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	3301      	adds	r3, #1
 8007178:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007180:	d901      	bls.n	8007186 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007182:	2303      	movs	r3, #3
 8007184:	e022      	b.n	80071cc <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	691b      	ldr	r3, [r3, #16]
 800718a:	2b00      	cmp	r3, #0
 800718c:	daf2      	bge.n	8007174 <USB_CoreReset+0xc>

  count = 10U;
 800718e:	230a      	movs	r3, #10
 8007190:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8007192:	e002      	b.n	800719a <USB_CoreReset+0x32>
  {
    count--;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	3b01      	subs	r3, #1
 8007198:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d1f9      	bne.n	8007194 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	691b      	ldr	r3, [r3, #16]
 80071a4:	f043 0201 	orr.w	r2, r3, #1
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	3301      	adds	r3, #1
 80071b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80071b8:	d901      	bls.n	80071be <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80071ba:	2303      	movs	r3, #3
 80071bc:	e006      	b.n	80071cc <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	691b      	ldr	r3, [r3, #16]
 80071c2:	f003 0301 	and.w	r3, r3, #1
 80071c6:	2b01      	cmp	r3, #1
 80071c8:	d0f0      	beq.n	80071ac <USB_CoreReset+0x44>

  return HAL_OK;
 80071ca:	2300      	movs	r3, #0
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3714      	adds	r7, #20
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr

080071d8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80071d8:	b084      	sub	sp, #16
 80071da:	b580      	push	{r7, lr}
 80071dc:	b086      	sub	sp, #24
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
 80071e2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80071e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80071ea:	2300      	movs	r3, #0
 80071ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80071f8:	461a      	mov	r2, r3
 80071fa:	2300      	movs	r3, #0
 80071fc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007202:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800720e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800721a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	68db      	ldr	r3, [r3, #12]
 8007226:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800722a:	2b00      	cmp	r3, #0
 800722c:	d119      	bne.n	8007262 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800722e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007232:	2b01      	cmp	r3, #1
 8007234:	d10a      	bne.n	800724c <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	68fa      	ldr	r2, [r7, #12]
 8007240:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007244:	f043 0304 	orr.w	r3, r3, #4
 8007248:	6013      	str	r3, [r2, #0]
 800724a:	e014      	b.n	8007276 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	68fa      	ldr	r2, [r7, #12]
 8007256:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800725a:	f023 0304 	bic.w	r3, r3, #4
 800725e:	6013      	str	r3, [r2, #0]
 8007260:	e009      	b.n	8007276 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	68fa      	ldr	r2, [r7, #12]
 800726c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007270:	f023 0304 	bic.w	r3, r3, #4
 8007274:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007276:	2110      	movs	r1, #16
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f7ff fe3d 	bl	8006ef8 <USB_FlushTxFifo>
 800727e:	4603      	mov	r3, r0
 8007280:	2b00      	cmp	r3, #0
 8007282:	d001      	beq.n	8007288 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8007284:	2301      	movs	r3, #1
 8007286:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f7ff fe67 	bl	8006f5c <USB_FlushRxFifo>
 800728e:	4603      	mov	r3, r0
 8007290:	2b00      	cmp	r3, #0
 8007292:	d001      	beq.n	8007298 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8007294:	2301      	movs	r3, #1
 8007296:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007298:	2300      	movs	r3, #0
 800729a:	613b      	str	r3, [r7, #16]
 800729c:	e015      	b.n	80072ca <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	015a      	lsls	r2, r3, #5
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	4413      	add	r3, r2
 80072a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072aa:	461a      	mov	r2, r3
 80072ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80072b0:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	015a      	lsls	r2, r3, #5
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	4413      	add	r3, r2
 80072ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072be:	461a      	mov	r2, r3
 80072c0:	2300      	movs	r3, #0
 80072c2:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	3301      	adds	r3, #1
 80072c8:	613b      	str	r3, [r7, #16]
 80072ca:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80072ce:	461a      	mov	r2, r3
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d3e3      	bcc.n	800729e <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2200      	movs	r2, #0
 80072da:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80072e2:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	4a18      	ldr	r2, [pc, #96]	@ (8007348 <USB_HostInit+0x170>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d10b      	bne.n	8007304 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80072f2:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	4a15      	ldr	r2, [pc, #84]	@ (800734c <USB_HostInit+0x174>)
 80072f8:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	4a14      	ldr	r2, [pc, #80]	@ (8007350 <USB_HostInit+0x178>)
 80072fe:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8007302:	e009      	b.n	8007318 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2280      	movs	r2, #128	@ 0x80
 8007308:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	4a11      	ldr	r2, [pc, #68]	@ (8007354 <USB_HostInit+0x17c>)
 800730e:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	4a11      	ldr	r2, [pc, #68]	@ (8007358 <USB_HostInit+0x180>)
 8007314:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007318:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800731c:	2b00      	cmp	r3, #0
 800731e:	d105      	bne.n	800732c <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	699b      	ldr	r3, [r3, #24]
 8007324:	f043 0210 	orr.w	r2, r3, #16
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	699a      	ldr	r2, [r3, #24]
 8007330:	4b0a      	ldr	r3, [pc, #40]	@ (800735c <USB_HostInit+0x184>)
 8007332:	4313      	orrs	r3, r2
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007338:	7dfb      	ldrb	r3, [r7, #23]
}
 800733a:	4618      	mov	r0, r3
 800733c:	3718      	adds	r7, #24
 800733e:	46bd      	mov	sp, r7
 8007340:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007344:	b004      	add	sp, #16
 8007346:	4770      	bx	lr
 8007348:	40040000 	.word	0x40040000
 800734c:	01000200 	.word	0x01000200
 8007350:	00e00300 	.word	0x00e00300
 8007354:	00600080 	.word	0x00600080
 8007358:	004000e0 	.word	0x004000e0
 800735c:	a3200008 	.word	0xa3200008

08007360 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007360:	b480      	push	{r7}
 8007362:	b085      	sub	sp, #20
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	460b      	mov	r3, r1
 800736a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	68fa      	ldr	r2, [r7, #12]
 800737a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800737e:	f023 0303 	bic.w	r3, r3, #3
 8007382:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	78fb      	ldrb	r3, [r7, #3]
 800738e:	f003 0303 	and.w	r3, r3, #3
 8007392:	68f9      	ldr	r1, [r7, #12]
 8007394:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007398:	4313      	orrs	r3, r2
 800739a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800739c:	78fb      	ldrb	r3, [r7, #3]
 800739e:	2b01      	cmp	r3, #1
 80073a0:	d107      	bne.n	80073b2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80073a8:	461a      	mov	r2, r3
 80073aa:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80073ae:	6053      	str	r3, [r2, #4]
 80073b0:	e00c      	b.n	80073cc <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80073b2:	78fb      	ldrb	r3, [r7, #3]
 80073b4:	2b02      	cmp	r3, #2
 80073b6:	d107      	bne.n	80073c8 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80073be:	461a      	mov	r2, r3
 80073c0:	f241 7370 	movw	r3, #6000	@ 0x1770
 80073c4:	6053      	str	r3, [r2, #4]
 80073c6:	e001      	b.n	80073cc <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80073c8:	2301      	movs	r3, #1
 80073ca:	e000      	b.n	80073ce <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80073cc:	2300      	movs	r3, #0
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3714      	adds	r7, #20
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr

080073da <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80073da:	b580      	push	{r7, lr}
 80073dc:	b084      	sub	sp, #16
 80073de:	af00      	add	r7, sp, #0
 80073e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80073e6:	2300      	movs	r3, #0
 80073e8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80073fa:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	68fa      	ldr	r2, [r7, #12]
 8007400:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007404:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007408:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800740a:	2064      	movs	r0, #100	@ 0x64
 800740c:	f7fa f876 	bl	80014fc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	68fa      	ldr	r2, [r7, #12]
 8007414:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007418:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800741c:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800741e:	200a      	movs	r0, #10
 8007420:	f7fa f86c 	bl	80014fc <HAL_Delay>

  return HAL_OK;
 8007424:	2300      	movs	r3, #0
}
 8007426:	4618      	mov	r0, r3
 8007428:	3710      	adds	r7, #16
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}

0800742e <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800742e:	b480      	push	{r7}
 8007430:	b085      	sub	sp, #20
 8007432:	af00      	add	r7, sp, #0
 8007434:	6078      	str	r0, [r7, #4]
 8007436:	460b      	mov	r3, r1
 8007438:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800743e:	2300      	movs	r3, #0
 8007440:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007452:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800745a:	2b00      	cmp	r3, #0
 800745c:	d109      	bne.n	8007472 <USB_DriveVbus+0x44>
 800745e:	78fb      	ldrb	r3, [r7, #3]
 8007460:	2b01      	cmp	r3, #1
 8007462:	d106      	bne.n	8007472 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	68fa      	ldr	r2, [r7, #12]
 8007468:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800746c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007470:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007478:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800747c:	d109      	bne.n	8007492 <USB_DriveVbus+0x64>
 800747e:	78fb      	ldrb	r3, [r7, #3]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d106      	bne.n	8007492 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	68fa      	ldr	r2, [r7, #12]
 8007488:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800748c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007490:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007492:	2300      	movs	r3, #0
}
 8007494:	4618      	mov	r0, r3
 8007496:	3714      	adds	r7, #20
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr

080074a0 <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b085      	sub	sp, #20
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80074ac:	2300      	movs	r3, #0
 80074ae:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	0c5b      	lsrs	r3, r3, #17
 80074be:	f003 0303 	and.w	r3, r3, #3
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3714      	adds	r7, #20
 80074c6:	46bd      	mov	sp, r7
 80074c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074cc:	4770      	bx	lr

080074ce <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80074ce:	b480      	push	{r7}
 80074d0:	b085      	sub	sp, #20
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	b29b      	uxth	r3, r3
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3714      	adds	r7, #20
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr

080074f0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b088      	sub	sp, #32
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	4608      	mov	r0, r1
 80074fa:	4611      	mov	r1, r2
 80074fc:	461a      	mov	r2, r3
 80074fe:	4603      	mov	r3, r0
 8007500:	70fb      	strb	r3, [r7, #3]
 8007502:	460b      	mov	r3, r1
 8007504:	70bb      	strb	r3, [r7, #2]
 8007506:	4613      	mov	r3, r2
 8007508:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800750a:	2300      	movs	r3, #0
 800750c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8007512:	78fb      	ldrb	r3, [r7, #3]
 8007514:	015a      	lsls	r2, r3, #5
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	4413      	add	r3, r2
 800751a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800751e:	461a      	mov	r2, r3
 8007520:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007524:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007526:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800752a:	2b03      	cmp	r3, #3
 800752c:	d87c      	bhi.n	8007628 <USB_HC_Init+0x138>
 800752e:	a201      	add	r2, pc, #4	@ (adr r2, 8007534 <USB_HC_Init+0x44>)
 8007530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007534:	08007545 	.word	0x08007545
 8007538:	080075eb 	.word	0x080075eb
 800753c:	08007545 	.word	0x08007545
 8007540:	080075ad 	.word	0x080075ad
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007544:	78fb      	ldrb	r3, [r7, #3]
 8007546:	015a      	lsls	r2, r3, #5
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	4413      	add	r3, r2
 800754c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007550:	461a      	mov	r2, r3
 8007552:	f240 439d 	movw	r3, #1181	@ 0x49d
 8007556:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007558:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800755c:	2b00      	cmp	r3, #0
 800755e:	da10      	bge.n	8007582 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007560:	78fb      	ldrb	r3, [r7, #3]
 8007562:	015a      	lsls	r2, r3, #5
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	4413      	add	r3, r2
 8007568:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800756c:	68db      	ldr	r3, [r3, #12]
 800756e:	78fa      	ldrb	r2, [r7, #3]
 8007570:	0151      	lsls	r1, r2, #5
 8007572:	693a      	ldr	r2, [r7, #16]
 8007574:	440a      	add	r2, r1
 8007576:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800757a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800757e:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8007580:	e055      	b.n	800762e <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	4a6f      	ldr	r2, [pc, #444]	@ (8007744 <USB_HC_Init+0x254>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d151      	bne.n	800762e <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800758a:	78fb      	ldrb	r3, [r7, #3]
 800758c:	015a      	lsls	r2, r3, #5
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	4413      	add	r3, r2
 8007592:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007596:	68db      	ldr	r3, [r3, #12]
 8007598:	78fa      	ldrb	r2, [r7, #3]
 800759a:	0151      	lsls	r1, r2, #5
 800759c:	693a      	ldr	r2, [r7, #16]
 800759e:	440a      	add	r2, r1
 80075a0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80075a4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80075a8:	60d3      	str	r3, [r2, #12]
      break;
 80075aa:	e040      	b.n	800762e <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80075ac:	78fb      	ldrb	r3, [r7, #3]
 80075ae:	015a      	lsls	r2, r3, #5
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	4413      	add	r3, r2
 80075b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075b8:	461a      	mov	r2, r3
 80075ba:	f240 639d 	movw	r3, #1693	@ 0x69d
 80075be:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80075c0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	da34      	bge.n	8007632 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80075c8:	78fb      	ldrb	r3, [r7, #3]
 80075ca:	015a      	lsls	r2, r3, #5
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	4413      	add	r3, r2
 80075d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075d4:	68db      	ldr	r3, [r3, #12]
 80075d6:	78fa      	ldrb	r2, [r7, #3]
 80075d8:	0151      	lsls	r1, r2, #5
 80075da:	693a      	ldr	r2, [r7, #16]
 80075dc:	440a      	add	r2, r1
 80075de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80075e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075e6:	60d3      	str	r3, [r2, #12]
      }

      break;
 80075e8:	e023      	b.n	8007632 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80075ea:	78fb      	ldrb	r3, [r7, #3]
 80075ec:	015a      	lsls	r2, r3, #5
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	4413      	add	r3, r2
 80075f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075f6:	461a      	mov	r2, r3
 80075f8:	f240 2325 	movw	r3, #549	@ 0x225
 80075fc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80075fe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007602:	2b00      	cmp	r3, #0
 8007604:	da17      	bge.n	8007636 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007606:	78fb      	ldrb	r3, [r7, #3]
 8007608:	015a      	lsls	r2, r3, #5
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	4413      	add	r3, r2
 800760e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	78fa      	ldrb	r2, [r7, #3]
 8007616:	0151      	lsls	r1, r2, #5
 8007618:	693a      	ldr	r2, [r7, #16]
 800761a:	440a      	add	r2, r1
 800761c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007620:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8007624:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007626:	e006      	b.n	8007636 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8007628:	2301      	movs	r3, #1
 800762a:	77fb      	strb	r3, [r7, #31]
      break;
 800762c:	e004      	b.n	8007638 <USB_HC_Init+0x148>
      break;
 800762e:	bf00      	nop
 8007630:	e002      	b.n	8007638 <USB_HC_Init+0x148>
      break;
 8007632:	bf00      	nop
 8007634:	e000      	b.n	8007638 <USB_HC_Init+0x148>
      break;
 8007636:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007638:	78fb      	ldrb	r3, [r7, #3]
 800763a:	015a      	lsls	r2, r3, #5
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	4413      	add	r3, r2
 8007640:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007644:	461a      	mov	r2, r3
 8007646:	2300      	movs	r3, #0
 8007648:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800764a:	78fb      	ldrb	r3, [r7, #3]
 800764c:	015a      	lsls	r2, r3, #5
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	4413      	add	r3, r2
 8007652:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007656:	68db      	ldr	r3, [r3, #12]
 8007658:	78fa      	ldrb	r2, [r7, #3]
 800765a:	0151      	lsls	r1, r2, #5
 800765c:	693a      	ldr	r2, [r7, #16]
 800765e:	440a      	add	r2, r1
 8007660:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007664:	f043 0302 	orr.w	r3, r3, #2
 8007668:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007670:	699a      	ldr	r2, [r3, #24]
 8007672:	78fb      	ldrb	r3, [r7, #3]
 8007674:	f003 030f 	and.w	r3, r3, #15
 8007678:	2101      	movs	r1, #1
 800767a:	fa01 f303 	lsl.w	r3, r1, r3
 800767e:	6939      	ldr	r1, [r7, #16]
 8007680:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007684:	4313      	orrs	r3, r2
 8007686:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	699b      	ldr	r3, [r3, #24]
 800768c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007694:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007698:	2b00      	cmp	r3, #0
 800769a:	da03      	bge.n	80076a4 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800769c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80076a0:	61bb      	str	r3, [r7, #24]
 80076a2:	e001      	b.n	80076a8 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 80076a4:	2300      	movs	r3, #0
 80076a6:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f7ff fef9 	bl	80074a0 <USB_GetHostSpeed>
 80076ae:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80076b0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80076b4:	2b02      	cmp	r3, #2
 80076b6:	d106      	bne.n	80076c6 <USB_HC_Init+0x1d6>
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2b02      	cmp	r3, #2
 80076bc:	d003      	beq.n	80076c6 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80076be:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80076c2:	617b      	str	r3, [r7, #20]
 80076c4:	e001      	b.n	80076ca <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80076c6:	2300      	movs	r3, #0
 80076c8:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80076ca:	787b      	ldrb	r3, [r7, #1]
 80076cc:	059b      	lsls	r3, r3, #22
 80076ce:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80076d2:	78bb      	ldrb	r3, [r7, #2]
 80076d4:	02db      	lsls	r3, r3, #11
 80076d6:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80076da:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80076dc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80076e0:	049b      	lsls	r3, r3, #18
 80076e2:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80076e6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80076e8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80076ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80076ee:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80076f0:	69bb      	ldr	r3, [r7, #24]
 80076f2:	431a      	orrs	r2, r3
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80076f8:	78fa      	ldrb	r2, [r7, #3]
 80076fa:	0151      	lsls	r1, r2, #5
 80076fc:	693a      	ldr	r2, [r7, #16]
 80076fe:	440a      	add	r2, r1
 8007700:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007704:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007708:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800770a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800770e:	2b03      	cmp	r3, #3
 8007710:	d003      	beq.n	800771a <USB_HC_Init+0x22a>
 8007712:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007716:	2b01      	cmp	r3, #1
 8007718:	d10f      	bne.n	800773a <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800771a:	78fb      	ldrb	r3, [r7, #3]
 800771c:	015a      	lsls	r2, r3, #5
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	4413      	add	r3, r2
 8007722:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	78fa      	ldrb	r2, [r7, #3]
 800772a:	0151      	lsls	r1, r2, #5
 800772c:	693a      	ldr	r2, [r7, #16]
 800772e:	440a      	add	r2, r1
 8007730:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007734:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007738:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800773a:	7ffb      	ldrb	r3, [r7, #31]
}
 800773c:	4618      	mov	r0, r3
 800773e:	3720      	adds	r7, #32
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}
 8007744:	40040000 	.word	0x40040000

08007748 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b08c      	sub	sp, #48	@ 0x30
 800774c:	af02      	add	r7, sp, #8
 800774e:	60f8      	str	r0, [r7, #12]
 8007750:	60b9      	str	r1, [r7, #8]
 8007752:	4613      	mov	r3, r2
 8007754:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	785b      	ldrb	r3, [r3, #1]
 800775e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8007760:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007764:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	4a5d      	ldr	r2, [pc, #372]	@ (80078e0 <USB_HC_StartXfer+0x198>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d12f      	bne.n	80077ce <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800776e:	79fb      	ldrb	r3, [r7, #7]
 8007770:	2b01      	cmp	r3, #1
 8007772:	d11c      	bne.n	80077ae <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	7c9b      	ldrb	r3, [r3, #18]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d003      	beq.n	8007784 <USB_HC_StartXfer+0x3c>
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	7c9b      	ldrb	r3, [r3, #18]
 8007780:	2b02      	cmp	r3, #2
 8007782:	d124      	bne.n	80077ce <USB_HC_StartXfer+0x86>
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	799b      	ldrb	r3, [r3, #6]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d120      	bne.n	80077ce <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800778c:	69fb      	ldr	r3, [r7, #28]
 800778e:	015a      	lsls	r2, r3, #5
 8007790:	6a3b      	ldr	r3, [r7, #32]
 8007792:	4413      	add	r3, r2
 8007794:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007798:	68db      	ldr	r3, [r3, #12]
 800779a:	69fa      	ldr	r2, [r7, #28]
 800779c:	0151      	lsls	r1, r2, #5
 800779e:	6a3a      	ldr	r2, [r7, #32]
 80077a0:	440a      	add	r2, r1
 80077a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80077a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077aa:	60d3      	str	r3, [r2, #12]
 80077ac:	e00f      	b.n	80077ce <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	791b      	ldrb	r3, [r3, #4]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d10b      	bne.n	80077ce <USB_HC_StartXfer+0x86>
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	795b      	ldrb	r3, [r3, #5]
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d107      	bne.n	80077ce <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	785b      	ldrb	r3, [r3, #1]
 80077c2:	4619      	mov	r1, r3
 80077c4:	68f8      	ldr	r0, [r7, #12]
 80077c6:	f000 fb6b 	bl	8007ea0 <USB_DoPing>
        return HAL_OK;
 80077ca:	2300      	movs	r3, #0
 80077cc:	e232      	b.n	8007c34 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	799b      	ldrb	r3, [r3, #6]
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d158      	bne.n	8007888 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80077d6:	2301      	movs	r3, #1
 80077d8:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	78db      	ldrb	r3, [r3, #3]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d007      	beq.n	80077f2 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80077e2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80077e4:	68ba      	ldr	r2, [r7, #8]
 80077e6:	8a92      	ldrh	r2, [r2, #20]
 80077e8:	fb03 f202 	mul.w	r2, r3, r2
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	61da      	str	r2, [r3, #28]
 80077f0:	e07c      	b.n	80078ec <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	7c9b      	ldrb	r3, [r3, #18]
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d130      	bne.n	800785c <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	6a1b      	ldr	r3, [r3, #32]
 80077fe:	2bbc      	cmp	r3, #188	@ 0xbc
 8007800:	d918      	bls.n	8007834 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	8a9b      	ldrh	r3, [r3, #20]
 8007806:	461a      	mov	r2, r3
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	69da      	ldr	r2, [r3, #28]
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	2b01      	cmp	r3, #1
 800781a:	d003      	beq.n	8007824 <USB_HC_StartXfer+0xdc>
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	68db      	ldr	r3, [r3, #12]
 8007820:	2b02      	cmp	r3, #2
 8007822:	d103      	bne.n	800782c <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	2202      	movs	r2, #2
 8007828:	60da      	str	r2, [r3, #12]
 800782a:	e05f      	b.n	80078ec <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	2201      	movs	r2, #1
 8007830:	60da      	str	r2, [r3, #12]
 8007832:	e05b      	b.n	80078ec <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	6a1a      	ldr	r2, [r3, #32]
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	68db      	ldr	r3, [r3, #12]
 8007840:	2b01      	cmp	r3, #1
 8007842:	d007      	beq.n	8007854 <USB_HC_StartXfer+0x10c>
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	68db      	ldr	r3, [r3, #12]
 8007848:	2b02      	cmp	r3, #2
 800784a:	d003      	beq.n	8007854 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	2204      	movs	r2, #4
 8007850:	60da      	str	r2, [r3, #12]
 8007852:	e04b      	b.n	80078ec <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	2203      	movs	r2, #3
 8007858:	60da      	str	r2, [r3, #12]
 800785a:	e047      	b.n	80078ec <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800785c:	79fb      	ldrb	r3, [r7, #7]
 800785e:	2b01      	cmp	r3, #1
 8007860:	d10d      	bne.n	800787e <USB_HC_StartXfer+0x136>
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	6a1b      	ldr	r3, [r3, #32]
 8007866:	68ba      	ldr	r2, [r7, #8]
 8007868:	8a92      	ldrh	r2, [r2, #20]
 800786a:	4293      	cmp	r3, r2
 800786c:	d907      	bls.n	800787e <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800786e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007870:	68ba      	ldr	r2, [r7, #8]
 8007872:	8a92      	ldrh	r2, [r2, #20]
 8007874:	fb03 f202 	mul.w	r2, r3, r2
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	61da      	str	r2, [r3, #28]
 800787c:	e036      	b.n	80078ec <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	6a1a      	ldr	r2, [r3, #32]
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	61da      	str	r2, [r3, #28]
 8007886:	e031      	b.n	80078ec <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	6a1b      	ldr	r3, [r3, #32]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d018      	beq.n	80078c2 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	6a1b      	ldr	r3, [r3, #32]
 8007894:	68ba      	ldr	r2, [r7, #8]
 8007896:	8a92      	ldrh	r2, [r2, #20]
 8007898:	4413      	add	r3, r2
 800789a:	3b01      	subs	r3, #1
 800789c:	68ba      	ldr	r2, [r7, #8]
 800789e:	8a92      	ldrh	r2, [r2, #20]
 80078a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80078a4:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 80078a6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80078a8:	8b7b      	ldrh	r3, [r7, #26]
 80078aa:	429a      	cmp	r2, r3
 80078ac:	d90b      	bls.n	80078c6 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 80078ae:	8b7b      	ldrh	r3, [r7, #26]
 80078b0:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80078b2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80078b4:	68ba      	ldr	r2, [r7, #8]
 80078b6:	8a92      	ldrh	r2, [r2, #20]
 80078b8:	fb03 f202 	mul.w	r2, r3, r2
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	61da      	str	r2, [r3, #28]
 80078c0:	e001      	b.n	80078c6 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 80078c2:	2301      	movs	r3, #1
 80078c4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	78db      	ldrb	r3, [r3, #3]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d00a      	beq.n	80078e4 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80078ce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80078d0:	68ba      	ldr	r2, [r7, #8]
 80078d2:	8a92      	ldrh	r2, [r2, #20]
 80078d4:	fb03 f202 	mul.w	r2, r3, r2
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	61da      	str	r2, [r3, #28]
 80078dc:	e006      	b.n	80078ec <USB_HC_StartXfer+0x1a4>
 80078de:	bf00      	nop
 80078e0:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	6a1a      	ldr	r2, [r3, #32]
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	69db      	ldr	r3, [r3, #28]
 80078f0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80078f4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80078f6:	04d9      	lsls	r1, r3, #19
 80078f8:	4ba3      	ldr	r3, [pc, #652]	@ (8007b88 <USB_HC_StartXfer+0x440>)
 80078fa:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80078fc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	7d9b      	ldrb	r3, [r3, #22]
 8007902:	075b      	lsls	r3, r3, #29
 8007904:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007908:	69f9      	ldr	r1, [r7, #28]
 800790a:	0148      	lsls	r0, r1, #5
 800790c:	6a39      	ldr	r1, [r7, #32]
 800790e:	4401      	add	r1, r0
 8007910:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007914:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007916:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007918:	79fb      	ldrb	r3, [r7, #7]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d009      	beq.n	8007932 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	6999      	ldr	r1, [r3, #24]
 8007922:	69fb      	ldr	r3, [r7, #28]
 8007924:	015a      	lsls	r2, r3, #5
 8007926:	6a3b      	ldr	r3, [r7, #32]
 8007928:	4413      	add	r3, r2
 800792a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800792e:	460a      	mov	r2, r1
 8007930:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007932:	6a3b      	ldr	r3, [r7, #32]
 8007934:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	f003 0301 	and.w	r3, r3, #1
 800793e:	2b00      	cmp	r3, #0
 8007940:	bf0c      	ite	eq
 8007942:	2301      	moveq	r3, #1
 8007944:	2300      	movne	r3, #0
 8007946:	b2db      	uxtb	r3, r3
 8007948:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800794a:	69fb      	ldr	r3, [r7, #28]
 800794c:	015a      	lsls	r2, r3, #5
 800794e:	6a3b      	ldr	r3, [r7, #32]
 8007950:	4413      	add	r3, r2
 8007952:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	69fa      	ldr	r2, [r7, #28]
 800795a:	0151      	lsls	r1, r2, #5
 800795c:	6a3a      	ldr	r2, [r7, #32]
 800795e:	440a      	add	r2, r1
 8007960:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007964:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007968:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800796a:	69fb      	ldr	r3, [r7, #28]
 800796c:	015a      	lsls	r2, r3, #5
 800796e:	6a3b      	ldr	r3, [r7, #32]
 8007970:	4413      	add	r3, r2
 8007972:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	7e7b      	ldrb	r3, [r7, #25]
 800797a:	075b      	lsls	r3, r3, #29
 800797c:	69f9      	ldr	r1, [r7, #28]
 800797e:	0148      	lsls	r0, r1, #5
 8007980:	6a39      	ldr	r1, [r7, #32]
 8007982:	4401      	add	r1, r0
 8007984:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8007988:	4313      	orrs	r3, r2
 800798a:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	799b      	ldrb	r3, [r3, #6]
 8007990:	2b01      	cmp	r3, #1
 8007992:	f040 80c3 	bne.w	8007b1c <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	7c5b      	ldrb	r3, [r3, #17]
 800799a:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800799c:	68ba      	ldr	r2, [r7, #8]
 800799e:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80079a0:	4313      	orrs	r3, r2
 80079a2:	69fa      	ldr	r2, [r7, #28]
 80079a4:	0151      	lsls	r1, r2, #5
 80079a6:	6a3a      	ldr	r2, [r7, #32]
 80079a8:	440a      	add	r2, r1
 80079aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80079ae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80079b2:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80079b4:	69fb      	ldr	r3, [r7, #28]
 80079b6:	015a      	lsls	r2, r3, #5
 80079b8:	6a3b      	ldr	r3, [r7, #32]
 80079ba:	4413      	add	r3, r2
 80079bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079c0:	68db      	ldr	r3, [r3, #12]
 80079c2:	69fa      	ldr	r2, [r7, #28]
 80079c4:	0151      	lsls	r1, r2, #5
 80079c6:	6a3a      	ldr	r2, [r7, #32]
 80079c8:	440a      	add	r2, r1
 80079ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80079ce:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80079d2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	79db      	ldrb	r3, [r3, #7]
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d123      	bne.n	8007a24 <USB_HC_StartXfer+0x2dc>
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	78db      	ldrb	r3, [r3, #3]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d11f      	bne.n	8007a24 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80079e4:	69fb      	ldr	r3, [r7, #28]
 80079e6:	015a      	lsls	r2, r3, #5
 80079e8:	6a3b      	ldr	r3, [r7, #32]
 80079ea:	4413      	add	r3, r2
 80079ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	69fa      	ldr	r2, [r7, #28]
 80079f4:	0151      	lsls	r1, r2, #5
 80079f6:	6a3a      	ldr	r2, [r7, #32]
 80079f8:	440a      	add	r2, r1
 80079fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80079fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a02:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8007a04:	69fb      	ldr	r3, [r7, #28]
 8007a06:	015a      	lsls	r2, r3, #5
 8007a08:	6a3b      	ldr	r3, [r7, #32]
 8007a0a:	4413      	add	r3, r2
 8007a0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a10:	68db      	ldr	r3, [r3, #12]
 8007a12:	69fa      	ldr	r2, [r7, #28]
 8007a14:	0151      	lsls	r1, r2, #5
 8007a16:	6a3a      	ldr	r2, [r7, #32]
 8007a18:	440a      	add	r2, r1
 8007a1a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a22:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	7c9b      	ldrb	r3, [r3, #18]
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d003      	beq.n	8007a34 <USB_HC_StartXfer+0x2ec>
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	7c9b      	ldrb	r3, [r3, #18]
 8007a30:	2b03      	cmp	r3, #3
 8007a32:	d117      	bne.n	8007a64 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d113      	bne.n	8007a64 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	78db      	ldrb	r3, [r3, #3]
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d10f      	bne.n	8007a64 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007a44:	69fb      	ldr	r3, [r7, #28]
 8007a46:	015a      	lsls	r2, r3, #5
 8007a48:	6a3b      	ldr	r3, [r7, #32]
 8007a4a:	4413      	add	r3, r2
 8007a4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	69fa      	ldr	r2, [r7, #28]
 8007a54:	0151      	lsls	r1, r2, #5
 8007a56:	6a3a      	ldr	r2, [r7, #32]
 8007a58:	440a      	add	r2, r1
 8007a5a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a62:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	7c9b      	ldrb	r3, [r3, #18]
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	d162      	bne.n	8007b32 <USB_HC_StartXfer+0x3ea>
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	78db      	ldrb	r3, [r3, #3]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d15e      	bne.n	8007b32 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	68db      	ldr	r3, [r3, #12]
 8007a78:	3b01      	subs	r3, #1
 8007a7a:	2b03      	cmp	r3, #3
 8007a7c:	d858      	bhi.n	8007b30 <USB_HC_StartXfer+0x3e8>
 8007a7e:	a201      	add	r2, pc, #4	@ (adr r2, 8007a84 <USB_HC_StartXfer+0x33c>)
 8007a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a84:	08007a95 	.word	0x08007a95
 8007a88:	08007ab7 	.word	0x08007ab7
 8007a8c:	08007ad9 	.word	0x08007ad9
 8007a90:	08007afb 	.word	0x08007afb
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8007a94:	69fb      	ldr	r3, [r7, #28]
 8007a96:	015a      	lsls	r2, r3, #5
 8007a98:	6a3b      	ldr	r3, [r7, #32]
 8007a9a:	4413      	add	r3, r2
 8007a9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	69fa      	ldr	r2, [r7, #28]
 8007aa4:	0151      	lsls	r1, r2, #5
 8007aa6:	6a3a      	ldr	r2, [r7, #32]
 8007aa8:	440a      	add	r2, r1
 8007aaa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007aae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ab2:	6053      	str	r3, [r2, #4]
          break;
 8007ab4:	e03d      	b.n	8007b32 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8007ab6:	69fb      	ldr	r3, [r7, #28]
 8007ab8:	015a      	lsls	r2, r3, #5
 8007aba:	6a3b      	ldr	r3, [r7, #32]
 8007abc:	4413      	add	r3, r2
 8007abe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	69fa      	ldr	r2, [r7, #28]
 8007ac6:	0151      	lsls	r1, r2, #5
 8007ac8:	6a3a      	ldr	r2, [r7, #32]
 8007aca:	440a      	add	r2, r1
 8007acc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ad0:	f043 030e 	orr.w	r3, r3, #14
 8007ad4:	6053      	str	r3, [r2, #4]
          break;
 8007ad6:	e02c      	b.n	8007b32 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8007ad8:	69fb      	ldr	r3, [r7, #28]
 8007ada:	015a      	lsls	r2, r3, #5
 8007adc:	6a3b      	ldr	r3, [r7, #32]
 8007ade:	4413      	add	r3, r2
 8007ae0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	69fa      	ldr	r2, [r7, #28]
 8007ae8:	0151      	lsls	r1, r2, #5
 8007aea:	6a3a      	ldr	r2, [r7, #32]
 8007aec:	440a      	add	r2, r1
 8007aee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007af2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007af6:	6053      	str	r3, [r2, #4]
          break;
 8007af8:	e01b      	b.n	8007b32 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8007afa:	69fb      	ldr	r3, [r7, #28]
 8007afc:	015a      	lsls	r2, r3, #5
 8007afe:	6a3b      	ldr	r3, [r7, #32]
 8007b00:	4413      	add	r3, r2
 8007b02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	69fa      	ldr	r2, [r7, #28]
 8007b0a:	0151      	lsls	r1, r2, #5
 8007b0c:	6a3a      	ldr	r2, [r7, #32]
 8007b0e:	440a      	add	r2, r1
 8007b10:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b14:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007b18:	6053      	str	r3, [r2, #4]
          break;
 8007b1a:	e00a      	b.n	8007b32 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007b1c:	69fb      	ldr	r3, [r7, #28]
 8007b1e:	015a      	lsls	r2, r3, #5
 8007b20:	6a3b      	ldr	r3, [r7, #32]
 8007b22:	4413      	add	r3, r2
 8007b24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b28:	461a      	mov	r2, r3
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	6053      	str	r3, [r2, #4]
 8007b2e:	e000      	b.n	8007b32 <USB_HC_StartXfer+0x3ea>
          break;
 8007b30:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007b32:	69fb      	ldr	r3, [r7, #28]
 8007b34:	015a      	lsls	r2, r3, #5
 8007b36:	6a3b      	ldr	r3, [r7, #32]
 8007b38:	4413      	add	r3, r2
 8007b3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007b48:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	78db      	ldrb	r3, [r3, #3]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d004      	beq.n	8007b5c <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b58:	613b      	str	r3, [r7, #16]
 8007b5a:	e003      	b.n	8007b64 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007b62:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007b6a:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007b6c:	69fb      	ldr	r3, [r7, #28]
 8007b6e:	015a      	lsls	r2, r3, #5
 8007b70:	6a3b      	ldr	r3, [r7, #32]
 8007b72:	4413      	add	r3, r2
 8007b74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b78:	461a      	mov	r2, r3
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007b7e:	79fb      	ldrb	r3, [r7, #7]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d003      	beq.n	8007b8c <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8007b84:	2300      	movs	r3, #0
 8007b86:	e055      	b.n	8007c34 <USB_HC_StartXfer+0x4ec>
 8007b88:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	78db      	ldrb	r3, [r3, #3]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d14e      	bne.n	8007c32 <USB_HC_StartXfer+0x4ea>
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	6a1b      	ldr	r3, [r3, #32]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d04a      	beq.n	8007c32 <USB_HC_StartXfer+0x4ea>
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	79db      	ldrb	r3, [r3, #7]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d146      	bne.n	8007c32 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	7c9b      	ldrb	r3, [r3, #18]
 8007ba8:	2b03      	cmp	r3, #3
 8007baa:	d831      	bhi.n	8007c10 <USB_HC_StartXfer+0x4c8>
 8007bac:	a201      	add	r2, pc, #4	@ (adr r2, 8007bb4 <USB_HC_StartXfer+0x46c>)
 8007bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bb2:	bf00      	nop
 8007bb4:	08007bc5 	.word	0x08007bc5
 8007bb8:	08007be9 	.word	0x08007be9
 8007bbc:	08007bc5 	.word	0x08007bc5
 8007bc0:	08007be9 	.word	0x08007be9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	6a1b      	ldr	r3, [r3, #32]
 8007bc8:	3303      	adds	r3, #3
 8007bca:	089b      	lsrs	r3, r3, #2
 8007bcc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007bce:	8afa      	ldrh	r2, [r7, #22]
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d91c      	bls.n	8007c14 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	699b      	ldr	r3, [r3, #24]
 8007bde:	f043 0220 	orr.w	r2, r3, #32
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	619a      	str	r2, [r3, #24]
        }
        break;
 8007be6:	e015      	b.n	8007c14 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	6a1b      	ldr	r3, [r3, #32]
 8007bec:	3303      	adds	r3, #3
 8007bee:	089b      	lsrs	r3, r3, #2
 8007bf0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007bf2:	8afa      	ldrh	r2, [r7, #22]
 8007bf4:	6a3b      	ldr	r3, [r7, #32]
 8007bf6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007bfa:	691b      	ldr	r3, [r3, #16]
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	d90a      	bls.n	8007c18 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	699b      	ldr	r3, [r3, #24]
 8007c06:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	619a      	str	r2, [r3, #24]
        }
        break;
 8007c0e:	e003      	b.n	8007c18 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8007c10:	bf00      	nop
 8007c12:	e002      	b.n	8007c1a <USB_HC_StartXfer+0x4d2>
        break;
 8007c14:	bf00      	nop
 8007c16:	e000      	b.n	8007c1a <USB_HC_StartXfer+0x4d2>
        break;
 8007c18:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	6999      	ldr	r1, [r3, #24]
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	785a      	ldrb	r2, [r3, #1]
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	6a1b      	ldr	r3, [r3, #32]
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	2000      	movs	r0, #0
 8007c2a:	9000      	str	r0, [sp, #0]
 8007c2c:	68f8      	ldr	r0, [r7, #12]
 8007c2e:	f7ff f9c3 	bl	8006fb8 <USB_WritePacket>
  }

  return HAL_OK;
 8007c32:	2300      	movs	r3, #0
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3728      	adds	r7, #40	@ 0x28
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}

08007c3c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b085      	sub	sp, #20
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007c4e:	695b      	ldr	r3, [r3, #20]
 8007c50:	b29b      	uxth	r3, r3
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3714      	adds	r7, #20
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr

08007c5e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007c5e:	b480      	push	{r7}
 8007c60:	b089      	sub	sp, #36	@ 0x24
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	6078      	str	r0, [r7, #4]
 8007c66:	460b      	mov	r3, r1
 8007c68:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007c6e:	78fb      	ldrb	r3, [r7, #3]
 8007c70:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007c72:	2300      	movs	r3, #0
 8007c74:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007c76:	69bb      	ldr	r3, [r7, #24]
 8007c78:	015a      	lsls	r2, r3, #5
 8007c7a:	69fb      	ldr	r3, [r7, #28]
 8007c7c:	4413      	add	r3, r2
 8007c7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	0c9b      	lsrs	r3, r3, #18
 8007c86:	f003 0303 	and.w	r3, r3, #3
 8007c8a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007c8c:	69bb      	ldr	r3, [r7, #24]
 8007c8e:	015a      	lsls	r2, r3, #5
 8007c90:	69fb      	ldr	r3, [r7, #28]
 8007c92:	4413      	add	r3, r2
 8007c94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	0fdb      	lsrs	r3, r3, #31
 8007c9c:	f003 0301 	and.w	r3, r3, #1
 8007ca0:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8007ca2:	69bb      	ldr	r3, [r7, #24]
 8007ca4:	015a      	lsls	r2, r3, #5
 8007ca6:	69fb      	ldr	r3, [r7, #28]
 8007ca8:	4413      	add	r3, r2
 8007caa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	0fdb      	lsrs	r3, r3, #31
 8007cb2:	f003 0301 	and.w	r3, r3, #1
 8007cb6:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	f003 0320 	and.w	r3, r3, #32
 8007cc0:	2b20      	cmp	r3, #32
 8007cc2:	d10d      	bne.n	8007ce0 <USB_HC_Halt+0x82>
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d10a      	bne.n	8007ce0 <USB_HC_Halt+0x82>
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d005      	beq.n	8007cdc <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	d002      	beq.n	8007cdc <USB_HC_Halt+0x7e>
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	2b03      	cmp	r3, #3
 8007cda:	d101      	bne.n	8007ce0 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	e0d8      	b.n	8007e92 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d002      	beq.n	8007cec <USB_HC_Halt+0x8e>
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	2b02      	cmp	r3, #2
 8007cea:	d173      	bne.n	8007dd4 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007cec:	69bb      	ldr	r3, [r7, #24]
 8007cee:	015a      	lsls	r2, r3, #5
 8007cf0:	69fb      	ldr	r3, [r7, #28]
 8007cf2:	4413      	add	r3, r2
 8007cf4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	69ba      	ldr	r2, [r7, #24]
 8007cfc:	0151      	lsls	r1, r2, #5
 8007cfe:	69fa      	ldr	r2, [r7, #28]
 8007d00:	440a      	add	r2, r1
 8007d02:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d06:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007d0a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	689b      	ldr	r3, [r3, #8]
 8007d10:	f003 0320 	and.w	r3, r3, #32
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d14a      	bne.n	8007dae <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d1c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d133      	bne.n	8007d8c <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007d24:	69bb      	ldr	r3, [r7, #24]
 8007d26:	015a      	lsls	r2, r3, #5
 8007d28:	69fb      	ldr	r3, [r7, #28]
 8007d2a:	4413      	add	r3, r2
 8007d2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	69ba      	ldr	r2, [r7, #24]
 8007d34:	0151      	lsls	r1, r2, #5
 8007d36:	69fa      	ldr	r2, [r7, #28]
 8007d38:	440a      	add	r2, r1
 8007d3a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d3e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007d42:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007d44:	69bb      	ldr	r3, [r7, #24]
 8007d46:	015a      	lsls	r2, r3, #5
 8007d48:	69fb      	ldr	r3, [r7, #28]
 8007d4a:	4413      	add	r3, r2
 8007d4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	69ba      	ldr	r2, [r7, #24]
 8007d54:	0151      	lsls	r1, r2, #5
 8007d56:	69fa      	ldr	r2, [r7, #28]
 8007d58:	440a      	add	r2, r1
 8007d5a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d5e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007d62:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	3301      	adds	r3, #1
 8007d68:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007d70:	d82e      	bhi.n	8007dd0 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007d72:	69bb      	ldr	r3, [r7, #24]
 8007d74:	015a      	lsls	r2, r3, #5
 8007d76:	69fb      	ldr	r3, [r7, #28]
 8007d78:	4413      	add	r3, r2
 8007d7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007d84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d88:	d0ec      	beq.n	8007d64 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007d8a:	e081      	b.n	8007e90 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007d8c:	69bb      	ldr	r3, [r7, #24]
 8007d8e:	015a      	lsls	r2, r3, #5
 8007d90:	69fb      	ldr	r3, [r7, #28]
 8007d92:	4413      	add	r3, r2
 8007d94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	69ba      	ldr	r2, [r7, #24]
 8007d9c:	0151      	lsls	r1, r2, #5
 8007d9e:	69fa      	ldr	r2, [r7, #28]
 8007da0:	440a      	add	r2, r1
 8007da2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007da6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007daa:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007dac:	e070      	b.n	8007e90 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007dae:	69bb      	ldr	r3, [r7, #24]
 8007db0:	015a      	lsls	r2, r3, #5
 8007db2:	69fb      	ldr	r3, [r7, #28]
 8007db4:	4413      	add	r3, r2
 8007db6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	69ba      	ldr	r2, [r7, #24]
 8007dbe:	0151      	lsls	r1, r2, #5
 8007dc0:	69fa      	ldr	r2, [r7, #28]
 8007dc2:	440a      	add	r2, r1
 8007dc4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007dc8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007dcc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007dce:	e05f      	b.n	8007e90 <USB_HC_Halt+0x232>
            break;
 8007dd0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007dd2:	e05d      	b.n	8007e90 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007dd4:	69bb      	ldr	r3, [r7, #24]
 8007dd6:	015a      	lsls	r2, r3, #5
 8007dd8:	69fb      	ldr	r3, [r7, #28]
 8007dda:	4413      	add	r3, r2
 8007ddc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	69ba      	ldr	r2, [r7, #24]
 8007de4:	0151      	lsls	r1, r2, #5
 8007de6:	69fa      	ldr	r2, [r7, #28]
 8007de8:	440a      	add	r2, r1
 8007dea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007dee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007df2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007df4:	69fb      	ldr	r3, [r7, #28]
 8007df6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007dfa:	691b      	ldr	r3, [r3, #16]
 8007dfc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d133      	bne.n	8007e6c <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007e04:	69bb      	ldr	r3, [r7, #24]
 8007e06:	015a      	lsls	r2, r3, #5
 8007e08:	69fb      	ldr	r3, [r7, #28]
 8007e0a:	4413      	add	r3, r2
 8007e0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	69ba      	ldr	r2, [r7, #24]
 8007e14:	0151      	lsls	r1, r2, #5
 8007e16:	69fa      	ldr	r2, [r7, #28]
 8007e18:	440a      	add	r2, r1
 8007e1a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007e1e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007e22:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007e24:	69bb      	ldr	r3, [r7, #24]
 8007e26:	015a      	lsls	r2, r3, #5
 8007e28:	69fb      	ldr	r3, [r7, #28]
 8007e2a:	4413      	add	r3, r2
 8007e2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	69ba      	ldr	r2, [r7, #24]
 8007e34:	0151      	lsls	r1, r2, #5
 8007e36:	69fa      	ldr	r2, [r7, #28]
 8007e38:	440a      	add	r2, r1
 8007e3a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007e3e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007e42:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	3301      	adds	r3, #1
 8007e48:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007e50:	d81d      	bhi.n	8007e8e <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007e52:	69bb      	ldr	r3, [r7, #24]
 8007e54:	015a      	lsls	r2, r3, #5
 8007e56:	69fb      	ldr	r3, [r7, #28]
 8007e58:	4413      	add	r3, r2
 8007e5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e64:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e68:	d0ec      	beq.n	8007e44 <USB_HC_Halt+0x1e6>
 8007e6a:	e011      	b.n	8007e90 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007e6c:	69bb      	ldr	r3, [r7, #24]
 8007e6e:	015a      	lsls	r2, r3, #5
 8007e70:	69fb      	ldr	r3, [r7, #28]
 8007e72:	4413      	add	r3, r2
 8007e74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	69ba      	ldr	r2, [r7, #24]
 8007e7c:	0151      	lsls	r1, r2, #5
 8007e7e:	69fa      	ldr	r2, [r7, #28]
 8007e80:	440a      	add	r2, r1
 8007e82:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007e86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007e8a:	6013      	str	r3, [r2, #0]
 8007e8c:	e000      	b.n	8007e90 <USB_HC_Halt+0x232>
          break;
 8007e8e:	bf00      	nop
    }
  }

  return HAL_OK;
 8007e90:	2300      	movs	r3, #0
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3724      	adds	r7, #36	@ 0x24
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr
	...

08007ea0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b087      	sub	sp, #28
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	460b      	mov	r3, r1
 8007eaa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007eb0:	78fb      	ldrb	r3, [r7, #3]
 8007eb2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	04da      	lsls	r2, r3, #19
 8007ebc:	4b15      	ldr	r3, [pc, #84]	@ (8007f14 <USB_DoPing+0x74>)
 8007ebe:	4013      	ands	r3, r2
 8007ec0:	693a      	ldr	r2, [r7, #16]
 8007ec2:	0151      	lsls	r1, r2, #5
 8007ec4:	697a      	ldr	r2, [r7, #20]
 8007ec6:	440a      	add	r2, r1
 8007ec8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ecc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007ed0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	015a      	lsls	r2, r3, #5
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	4413      	add	r3, r2
 8007eda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007ee8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007ef0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	015a      	lsls	r2, r3, #5
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	4413      	add	r3, r2
 8007efa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007efe:	461a      	mov	r2, r3
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007f04:	2300      	movs	r3, #0
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	371c      	adds	r7, #28
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr
 8007f12:	bf00      	nop
 8007f14:	1ff80000 	.word	0x1ff80000

08007f18 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b088      	sub	sp, #32
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007f20:	2300      	movs	r3, #0
 8007f22:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f7fe ff86 	bl	8006e3e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007f32:	2110      	movs	r1, #16
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f7fe ffdf 	bl	8006ef8 <USB_FlushTxFifo>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d001      	beq.n	8007f44 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007f40:	2301      	movs	r3, #1
 8007f42:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f7ff f809 	bl	8006f5c <USB_FlushRxFifo>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d001      	beq.n	8007f54 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007f50:	2301      	movs	r3, #1
 8007f52:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007f54:	2300      	movs	r3, #0
 8007f56:	61bb      	str	r3, [r7, #24]
 8007f58:	e01f      	b.n	8007f9a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007f5a:	69bb      	ldr	r3, [r7, #24]
 8007f5c:	015a      	lsls	r2, r3, #5
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	4413      	add	r3, r2
 8007f62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007f70:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007f78:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007f80:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007f82:	69bb      	ldr	r3, [r7, #24]
 8007f84:	015a      	lsls	r2, r3, #5
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	4413      	add	r3, r2
 8007f8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f8e:	461a      	mov	r2, r3
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007f94:	69bb      	ldr	r3, [r7, #24]
 8007f96:	3301      	adds	r3, #1
 8007f98:	61bb      	str	r3, [r7, #24]
 8007f9a:	69bb      	ldr	r3, [r7, #24]
 8007f9c:	2b0f      	cmp	r3, #15
 8007f9e:	d9dc      	bls.n	8007f5a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	61bb      	str	r3, [r7, #24]
 8007fa4:	e034      	b.n	8008010 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007fa6:	69bb      	ldr	r3, [r7, #24]
 8007fa8:	015a      	lsls	r2, r3, #5
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	4413      	add	r3, r2
 8007fae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007fbc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007fc4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007fcc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007fce:	69bb      	ldr	r3, [r7, #24]
 8007fd0:	015a      	lsls	r2, r3, #5
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	4413      	add	r3, r2
 8007fd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fda:	461a      	mov	r2, r3
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	3301      	adds	r3, #1
 8007fe4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007fec:	d80c      	bhi.n	8008008 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007fee:	69bb      	ldr	r3, [r7, #24]
 8007ff0:	015a      	lsls	r2, r3, #5
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	4413      	add	r3, r2
 8007ff6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008000:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008004:	d0ec      	beq.n	8007fe0 <USB_StopHost+0xc8>
 8008006:	e000      	b.n	800800a <USB_StopHost+0xf2>
        break;
 8008008:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800800a:	69bb      	ldr	r3, [r7, #24]
 800800c:	3301      	adds	r3, #1
 800800e:	61bb      	str	r3, [r7, #24]
 8008010:	69bb      	ldr	r3, [r7, #24]
 8008012:	2b0f      	cmp	r3, #15
 8008014:	d9c7      	bls.n	8007fa6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800801c:	461a      	mov	r2, r3
 800801e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008022:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800802a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f7fe fef5 	bl	8006e1c <USB_EnableGlobalInt>

  return ret;
 8008032:	7ffb      	ldrb	r3, [r7, #31]
}
 8008034:	4618      	mov	r0, r3
 8008036:	3720      	adds	r7, #32
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800803c:	b590      	push	{r4, r7, lr}
 800803e:	b089      	sub	sp, #36	@ 0x24
 8008040:	af04      	add	r7, sp, #16
 8008042:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008044:	2301      	movs	r3, #1
 8008046:	2202      	movs	r2, #2
 8008048:	2102      	movs	r1, #2
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f000 fc83 	bl	8008956 <USBH_FindInterface>
 8008050:	4603      	mov	r3, r0
 8008052:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008054:	7bfb      	ldrb	r3, [r7, #15]
 8008056:	2bff      	cmp	r3, #255	@ 0xff
 8008058:	d002      	beq.n	8008060 <USBH_CDC_InterfaceInit+0x24>
 800805a:	7bfb      	ldrb	r3, [r7, #15]
 800805c:	2b01      	cmp	r3, #1
 800805e:	d901      	bls.n	8008064 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008060:	2302      	movs	r3, #2
 8008062:	e13d      	b.n	80082e0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008064:	7bfb      	ldrb	r3, [r7, #15]
 8008066:	4619      	mov	r1, r3
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f000 fc58 	bl	800891e <USBH_SelectInterface>
 800806e:	4603      	mov	r3, r0
 8008070:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008072:	7bbb      	ldrb	r3, [r7, #14]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d001      	beq.n	800807c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008078:	2302      	movs	r3, #2
 800807a:	e131      	b.n	80082e0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8008082:	2050      	movs	r0, #80	@ 0x50
 8008084:	f002 fb6a 	bl	800a75c <malloc>
 8008088:	4603      	mov	r3, r0
 800808a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008092:	69db      	ldr	r3, [r3, #28]
 8008094:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d101      	bne.n	80080a0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800809c:	2302      	movs	r3, #2
 800809e:	e11f      	b.n	80082e0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80080a0:	2250      	movs	r2, #80	@ 0x50
 80080a2:	2100      	movs	r1, #0
 80080a4:	68b8      	ldr	r0, [r7, #8]
 80080a6:	f002 fc17 	bl	800a8d8 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80080aa:	7bfb      	ldrb	r3, [r7, #15]
 80080ac:	687a      	ldr	r2, [r7, #4]
 80080ae:	211a      	movs	r1, #26
 80080b0:	fb01 f303 	mul.w	r3, r1, r3
 80080b4:	4413      	add	r3, r2
 80080b6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	b25b      	sxtb	r3, r3
 80080be:	2b00      	cmp	r3, #0
 80080c0:	da15      	bge.n	80080ee <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80080c2:	7bfb      	ldrb	r3, [r7, #15]
 80080c4:	687a      	ldr	r2, [r7, #4]
 80080c6:	211a      	movs	r1, #26
 80080c8:	fb01 f303 	mul.w	r3, r1, r3
 80080cc:	4413      	add	r3, r2
 80080ce:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80080d2:	781a      	ldrb	r2, [r3, #0]
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80080d8:	7bfb      	ldrb	r3, [r7, #15]
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	211a      	movs	r1, #26
 80080de:	fb01 f303 	mul.w	r3, r1, r3
 80080e2:	4413      	add	r3, r2
 80080e4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80080e8:	881a      	ldrh	r2, [r3, #0]
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	785b      	ldrb	r3, [r3, #1]
 80080f2:	4619      	mov	r1, r3
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f001 ffc4 	bl	800a082 <USBH_AllocPipe>
 80080fa:	4603      	mov	r3, r0
 80080fc:	461a      	mov	r2, r3
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	7819      	ldrb	r1, [r3, #0]
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	7858      	ldrb	r0, [r3, #1]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008116:	68ba      	ldr	r2, [r7, #8]
 8008118:	8952      	ldrh	r2, [r2, #10]
 800811a:	9202      	str	r2, [sp, #8]
 800811c:	2203      	movs	r2, #3
 800811e:	9201      	str	r2, [sp, #4]
 8008120:	9300      	str	r3, [sp, #0]
 8008122:	4623      	mov	r3, r4
 8008124:	4602      	mov	r2, r0
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f001 ff7c 	bl	800a024 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	2200      	movs	r2, #0
 8008132:	4619      	mov	r1, r3
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f002 fa8b 	bl	800a650 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800813a:	2300      	movs	r3, #0
 800813c:	2200      	movs	r2, #0
 800813e:	210a      	movs	r1, #10
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f000 fc08 	bl	8008956 <USBH_FindInterface>
 8008146:	4603      	mov	r3, r0
 8008148:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800814a:	7bfb      	ldrb	r3, [r7, #15]
 800814c:	2bff      	cmp	r3, #255	@ 0xff
 800814e:	d002      	beq.n	8008156 <USBH_CDC_InterfaceInit+0x11a>
 8008150:	7bfb      	ldrb	r3, [r7, #15]
 8008152:	2b01      	cmp	r3, #1
 8008154:	d901      	bls.n	800815a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008156:	2302      	movs	r3, #2
 8008158:	e0c2      	b.n	80082e0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800815a:	7bfb      	ldrb	r3, [r7, #15]
 800815c:	687a      	ldr	r2, [r7, #4]
 800815e:	211a      	movs	r1, #26
 8008160:	fb01 f303 	mul.w	r3, r1, r3
 8008164:	4413      	add	r3, r2
 8008166:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800816a:	781b      	ldrb	r3, [r3, #0]
 800816c:	b25b      	sxtb	r3, r3
 800816e:	2b00      	cmp	r3, #0
 8008170:	da16      	bge.n	80081a0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008172:	7bfb      	ldrb	r3, [r7, #15]
 8008174:	687a      	ldr	r2, [r7, #4]
 8008176:	211a      	movs	r1, #26
 8008178:	fb01 f303 	mul.w	r3, r1, r3
 800817c:	4413      	add	r3, r2
 800817e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008182:	781a      	ldrb	r2, [r3, #0]
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008188:	7bfb      	ldrb	r3, [r7, #15]
 800818a:	687a      	ldr	r2, [r7, #4]
 800818c:	211a      	movs	r1, #26
 800818e:	fb01 f303 	mul.w	r3, r1, r3
 8008192:	4413      	add	r3, r2
 8008194:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008198:	881a      	ldrh	r2, [r3, #0]
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	835a      	strh	r2, [r3, #26]
 800819e:	e015      	b.n	80081cc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80081a0:	7bfb      	ldrb	r3, [r7, #15]
 80081a2:	687a      	ldr	r2, [r7, #4]
 80081a4:	211a      	movs	r1, #26
 80081a6:	fb01 f303 	mul.w	r3, r1, r3
 80081aa:	4413      	add	r3, r2
 80081ac:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80081b0:	781a      	ldrb	r2, [r3, #0]
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80081b6:	7bfb      	ldrb	r3, [r7, #15]
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	211a      	movs	r1, #26
 80081bc:	fb01 f303 	mul.w	r3, r1, r3
 80081c0:	4413      	add	r3, r2
 80081c2:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80081c6:	881a      	ldrh	r2, [r3, #0]
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80081cc:	7bfb      	ldrb	r3, [r7, #15]
 80081ce:	687a      	ldr	r2, [r7, #4]
 80081d0:	211a      	movs	r1, #26
 80081d2:	fb01 f303 	mul.w	r3, r1, r3
 80081d6:	4413      	add	r3, r2
 80081d8:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	b25b      	sxtb	r3, r3
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	da16      	bge.n	8008212 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80081e4:	7bfb      	ldrb	r3, [r7, #15]
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	211a      	movs	r1, #26
 80081ea:	fb01 f303 	mul.w	r3, r1, r3
 80081ee:	4413      	add	r3, r2
 80081f0:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80081f4:	781a      	ldrb	r2, [r3, #0]
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80081fa:	7bfb      	ldrb	r3, [r7, #15]
 80081fc:	687a      	ldr	r2, [r7, #4]
 80081fe:	211a      	movs	r1, #26
 8008200:	fb01 f303 	mul.w	r3, r1, r3
 8008204:	4413      	add	r3, r2
 8008206:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800820a:	881a      	ldrh	r2, [r3, #0]
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	835a      	strh	r2, [r3, #26]
 8008210:	e015      	b.n	800823e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008212:	7bfb      	ldrb	r3, [r7, #15]
 8008214:	687a      	ldr	r2, [r7, #4]
 8008216:	211a      	movs	r1, #26
 8008218:	fb01 f303 	mul.w	r3, r1, r3
 800821c:	4413      	add	r3, r2
 800821e:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008222:	781a      	ldrb	r2, [r3, #0]
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008228:	7bfb      	ldrb	r3, [r7, #15]
 800822a:	687a      	ldr	r2, [r7, #4]
 800822c:	211a      	movs	r1, #26
 800822e:	fb01 f303 	mul.w	r3, r1, r3
 8008232:	4413      	add	r3, r2
 8008234:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008238:	881a      	ldrh	r2, [r3, #0]
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	7b9b      	ldrb	r3, [r3, #14]
 8008242:	4619      	mov	r1, r3
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f001 ff1c 	bl	800a082 <USBH_AllocPipe>
 800824a:	4603      	mov	r3, r0
 800824c:	461a      	mov	r2, r3
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	7bdb      	ldrb	r3, [r3, #15]
 8008256:	4619      	mov	r1, r3
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f001 ff12 	bl	800a082 <USBH_AllocPipe>
 800825e:	4603      	mov	r3, r0
 8008260:	461a      	mov	r2, r3
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	7b59      	ldrb	r1, [r3, #13]
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	7b98      	ldrb	r0, [r3, #14]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800827a:	68ba      	ldr	r2, [r7, #8]
 800827c:	8b12      	ldrh	r2, [r2, #24]
 800827e:	9202      	str	r2, [sp, #8]
 8008280:	2202      	movs	r2, #2
 8008282:	9201      	str	r2, [sp, #4]
 8008284:	9300      	str	r3, [sp, #0]
 8008286:	4623      	mov	r3, r4
 8008288:	4602      	mov	r2, r0
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f001 feca 	bl	800a024 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	7b19      	ldrb	r1, [r3, #12]
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	7bd8      	ldrb	r0, [r3, #15]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80082a4:	68ba      	ldr	r2, [r7, #8]
 80082a6:	8b52      	ldrh	r2, [r2, #26]
 80082a8:	9202      	str	r2, [sp, #8]
 80082aa:	2202      	movs	r2, #2
 80082ac:	9201      	str	r2, [sp, #4]
 80082ae:	9300      	str	r3, [sp, #0]
 80082b0:	4623      	mov	r3, r4
 80082b2:	4602      	mov	r2, r0
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f001 feb5 	bl	800a024 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	2200      	movs	r2, #0
 80082be:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	7b5b      	ldrb	r3, [r3, #13]
 80082c6:	2200      	movs	r2, #0
 80082c8:	4619      	mov	r1, r3
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f002 f9c0 	bl	800a650 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	7b1b      	ldrb	r3, [r3, #12]
 80082d4:	2200      	movs	r2, #0
 80082d6:	4619      	mov	r1, r3
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f002 f9b9 	bl	800a650 <USBH_LL_SetToggle>

  return USBH_OK;
 80082de:	2300      	movs	r3, #0
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3714      	adds	r7, #20
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd90      	pop	{r4, r7, pc}

080082e8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b084      	sub	sp, #16
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80082f6:	69db      	ldr	r3, [r3, #28]
 80082f8:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	781b      	ldrb	r3, [r3, #0]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d00e      	beq.n	8008320 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	781b      	ldrb	r3, [r3, #0]
 8008306:	4619      	mov	r1, r3
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f001 feaa 	bl	800a062 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	4619      	mov	r1, r3
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f001 fed5 	bl	800a0c4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	2200      	movs	r2, #0
 800831e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	7b1b      	ldrb	r3, [r3, #12]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d00e      	beq.n	8008346 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	7b1b      	ldrb	r3, [r3, #12]
 800832c:	4619      	mov	r1, r3
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f001 fe97 	bl	800a062 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	7b1b      	ldrb	r3, [r3, #12]
 8008338:	4619      	mov	r1, r3
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f001 fec2 	bl	800a0c4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2200      	movs	r2, #0
 8008344:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	7b5b      	ldrb	r3, [r3, #13]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d00e      	beq.n	800836c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	7b5b      	ldrb	r3, [r3, #13]
 8008352:	4619      	mov	r1, r3
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f001 fe84 	bl	800a062 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	7b5b      	ldrb	r3, [r3, #13]
 800835e:	4619      	mov	r1, r3
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f001 feaf 	bl	800a0c4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2200      	movs	r2, #0
 800836a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008372:	69db      	ldr	r3, [r3, #28]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d00b      	beq.n	8008390 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800837e:	69db      	ldr	r3, [r3, #28]
 8008380:	4618      	mov	r0, r3
 8008382:	f002 f9f3 	bl	800a76c <free>
    phost->pActiveClass->pData = 0U;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800838c:	2200      	movs	r2, #0
 800838e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008390:	2300      	movs	r3, #0
}
 8008392:	4618      	mov	r0, r3
 8008394:	3710      	adds	r7, #16
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}

0800839a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800839a:	b580      	push	{r7, lr}
 800839c:	b084      	sub	sp, #16
 800839e:	af00      	add	r7, sp, #0
 80083a0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80083a8:	69db      	ldr	r3, [r3, #28]
 80083aa:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	3340      	adds	r3, #64	@ 0x40
 80083b0:	4619      	mov	r1, r3
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 f8b1 	bl	800851a <GetLineCoding>
 80083b8:	4603      	mov	r3, r0
 80083ba:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80083bc:	7afb      	ldrb	r3, [r7, #11]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d105      	bne.n	80083ce <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80083c8:	2102      	movs	r1, #2
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80083ce:	7afb      	ldrb	r3, [r7, #11]
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	3710      	adds	r7, #16
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}

080083d8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b084      	sub	sp, #16
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80083e0:	2301      	movs	r3, #1
 80083e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80083e4:	2300      	movs	r3, #0
 80083e6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80083ee:	69db      	ldr	r3, [r3, #28]
 80083f0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80083f8:	2b04      	cmp	r3, #4
 80083fa:	d877      	bhi.n	80084ec <USBH_CDC_Process+0x114>
 80083fc:	a201      	add	r2, pc, #4	@ (adr r2, 8008404 <USBH_CDC_Process+0x2c>)
 80083fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008402:	bf00      	nop
 8008404:	08008419 	.word	0x08008419
 8008408:	0800841f 	.word	0x0800841f
 800840c:	0800844f 	.word	0x0800844f
 8008410:	080084c3 	.word	0x080084c3
 8008414:	080084d1 	.word	0x080084d1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008418:	2300      	movs	r3, #0
 800841a:	73fb      	strb	r3, [r7, #15]
      break;
 800841c:	e06d      	b.n	80084fa <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008422:	4619      	mov	r1, r3
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f000 f897 	bl	8008558 <SetLineCoding>
 800842a:	4603      	mov	r3, r0
 800842c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800842e:	7bbb      	ldrb	r3, [r7, #14]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d104      	bne.n	800843e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	2202      	movs	r2, #2
 8008438:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800843c:	e058      	b.n	80084f0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800843e:	7bbb      	ldrb	r3, [r7, #14]
 8008440:	2b01      	cmp	r3, #1
 8008442:	d055      	beq.n	80084f0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	2204      	movs	r2, #4
 8008448:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800844c:	e050      	b.n	80084f0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	3340      	adds	r3, #64	@ 0x40
 8008452:	4619      	mov	r1, r3
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f000 f860 	bl	800851a <GetLineCoding>
 800845a:	4603      	mov	r3, r0
 800845c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800845e:	7bbb      	ldrb	r3, [r7, #14]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d126      	bne.n	80084b2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	2200      	movs	r2, #0
 8008468:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008476:	791b      	ldrb	r3, [r3, #4]
 8008478:	429a      	cmp	r2, r3
 800847a:	d13b      	bne.n	80084f4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008486:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008488:	429a      	cmp	r2, r3
 800848a:	d133      	bne.n	80084f4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008496:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008498:	429a      	cmp	r2, r3
 800849a:	d12b      	bne.n	80084f4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80084a4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d124      	bne.n	80084f4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 f958 	bl	8008760 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80084b0:	e020      	b.n	80084f4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80084b2:	7bbb      	ldrb	r3, [r7, #14]
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	d01d      	beq.n	80084f4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	2204      	movs	r2, #4
 80084bc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80084c0:	e018      	b.n	80084f4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 f867 	bl	8008596 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f000 f8da 	bl	8008682 <CDC_ProcessReception>
      break;
 80084ce:	e014      	b.n	80084fa <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80084d0:	2100      	movs	r1, #0
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f001 f81e 	bl	8009514 <USBH_ClrFeature>
 80084d8:	4603      	mov	r3, r0
 80084da:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80084dc:	7bbb      	ldrb	r3, [r7, #14]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d10a      	bne.n	80084f8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	2200      	movs	r2, #0
 80084e6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 80084ea:	e005      	b.n	80084f8 <USBH_CDC_Process+0x120>

    default:
      break;
 80084ec:	bf00      	nop
 80084ee:	e004      	b.n	80084fa <USBH_CDC_Process+0x122>
      break;
 80084f0:	bf00      	nop
 80084f2:	e002      	b.n	80084fa <USBH_CDC_Process+0x122>
      break;
 80084f4:	bf00      	nop
 80084f6:	e000      	b.n	80084fa <USBH_CDC_Process+0x122>
      break;
 80084f8:	bf00      	nop

  }

  return status;
 80084fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3710      	adds	r7, #16
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}

08008504 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008504:	b480      	push	{r7}
 8008506:	b083      	sub	sp, #12
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800850c:	2300      	movs	r3, #0
}
 800850e:	4618      	mov	r0, r3
 8008510:	370c      	adds	r7, #12
 8008512:	46bd      	mov	sp, r7
 8008514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008518:	4770      	bx	lr

0800851a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800851a:	b580      	push	{r7, lr}
 800851c:	b082      	sub	sp, #8
 800851e:	af00      	add	r7, sp, #0
 8008520:	6078      	str	r0, [r7, #4]
 8008522:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	22a1      	movs	r2, #161	@ 0xa1
 8008528:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2221      	movs	r2, #33	@ 0x21
 800852e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2200      	movs	r2, #0
 8008534:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2200      	movs	r2, #0
 800853a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2207      	movs	r2, #7
 8008540:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	2207      	movs	r2, #7
 8008546:	4619      	mov	r1, r3
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f001 fb17 	bl	8009b7c <USBH_CtlReq>
 800854e:	4603      	mov	r3, r0
}
 8008550:	4618      	mov	r0, r3
 8008552:	3708      	adds	r7, #8
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}

08008558 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b082      	sub	sp, #8
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2221      	movs	r2, #33	@ 0x21
 8008566:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2220      	movs	r2, #32
 800856c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2200      	movs	r2, #0
 8008572:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2200      	movs	r2, #0
 8008578:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2207      	movs	r2, #7
 800857e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	2207      	movs	r2, #7
 8008584:	4619      	mov	r1, r3
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f001 faf8 	bl	8009b7c <USBH_CtlReq>
 800858c:	4603      	mov	r3, r0
}
 800858e:	4618      	mov	r0, r3
 8008590:	3708      	adds	r7, #8
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}

08008596 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008596:	b580      	push	{r7, lr}
 8008598:	b086      	sub	sp, #24
 800859a:	af02      	add	r7, sp, #8
 800859c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80085a4:	69db      	ldr	r3, [r3, #28]
 80085a6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80085a8:	2300      	movs	r3, #0
 80085aa:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80085b2:	2b01      	cmp	r3, #1
 80085b4:	d002      	beq.n	80085bc <CDC_ProcessTransmission+0x26>
 80085b6:	2b02      	cmp	r3, #2
 80085b8:	d023      	beq.n	8008602 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80085ba:	e05e      	b.n	800867a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085c0:	68fa      	ldr	r2, [r7, #12]
 80085c2:	8b12      	ldrh	r2, [r2, #24]
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d90b      	bls.n	80085e0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	69d9      	ldr	r1, [r3, #28]
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	8b1a      	ldrh	r2, [r3, #24]
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	7b5b      	ldrb	r3, [r3, #13]
 80085d4:	2001      	movs	r0, #1
 80085d6:	9000      	str	r0, [sp, #0]
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f001 fce0 	bl	8009f9e <USBH_BulkSendData>
 80085de:	e00b      	b.n	80085f8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80085e8:	b29a      	uxth	r2, r3
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	7b5b      	ldrb	r3, [r3, #13]
 80085ee:	2001      	movs	r0, #1
 80085f0:	9000      	str	r0, [sp, #0]
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f001 fcd3 	bl	8009f9e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	2202      	movs	r2, #2
 80085fc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008600:	e03b      	b.n	800867a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	7b5b      	ldrb	r3, [r3, #13]
 8008606:	4619      	mov	r1, r3
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f001 fff7 	bl	800a5fc <USBH_LL_GetURBState>
 800860e:	4603      	mov	r3, r0
 8008610:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8008612:	7afb      	ldrb	r3, [r7, #11]
 8008614:	2b01      	cmp	r3, #1
 8008616:	d128      	bne.n	800866a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800861c:	68fa      	ldr	r2, [r7, #12]
 800861e:	8b12      	ldrh	r2, [r2, #24]
 8008620:	4293      	cmp	r3, r2
 8008622:	d90e      	bls.n	8008642 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008628:	68fa      	ldr	r2, [r7, #12]
 800862a:	8b12      	ldrh	r2, [r2, #24]
 800862c:	1a9a      	subs	r2, r3, r2
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	69db      	ldr	r3, [r3, #28]
 8008636:	68fa      	ldr	r2, [r7, #12]
 8008638:	8b12      	ldrh	r2, [r2, #24]
 800863a:	441a      	add	r2, r3
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	61da      	str	r2, [r3, #28]
 8008640:	e002      	b.n	8008648 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2200      	movs	r2, #0
 8008646:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800864c:	2b00      	cmp	r3, #0
 800864e:	d004      	beq.n	800865a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2201      	movs	r2, #1
 8008654:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008658:	e00e      	b.n	8008678 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2200      	movs	r2, #0
 800865e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f000 f868 	bl	8008738 <USBH_CDC_TransmitCallback>
      break;
 8008668:	e006      	b.n	8008678 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800866a:	7afb      	ldrb	r3, [r7, #11]
 800866c:	2b02      	cmp	r3, #2
 800866e:	d103      	bne.n	8008678 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	2201      	movs	r2, #1
 8008674:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008678:	bf00      	nop
  }
}
 800867a:	bf00      	nop
 800867c:	3710      	adds	r7, #16
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}

08008682 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008682:	b580      	push	{r7, lr}
 8008684:	b086      	sub	sp, #24
 8008686:	af00      	add	r7, sp, #0
 8008688:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008690:	69db      	ldr	r3, [r3, #28]
 8008692:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008694:	2300      	movs	r3, #0
 8008696:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800869e:	2b03      	cmp	r3, #3
 80086a0:	d002      	beq.n	80086a8 <CDC_ProcessReception+0x26>
 80086a2:	2b04      	cmp	r3, #4
 80086a4:	d00e      	beq.n	80086c4 <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 80086a6:	e043      	b.n	8008730 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	6a19      	ldr	r1, [r3, #32]
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	8b5a      	ldrh	r2, [r3, #26]
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	7b1b      	ldrb	r3, [r3, #12]
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f001 fc97 	bl	8009fe8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	2204      	movs	r2, #4
 80086be:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80086c2:	e035      	b.n	8008730 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	7b1b      	ldrb	r3, [r3, #12]
 80086c8:	4619      	mov	r1, r3
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f001 ff96 	bl	800a5fc <USBH_LL_GetURBState>
 80086d0:	4603      	mov	r3, r0
 80086d2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80086d4:	7cfb      	ldrb	r3, [r7, #19]
 80086d6:	2b01      	cmp	r3, #1
 80086d8:	d129      	bne.n	800872e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	7b1b      	ldrb	r3, [r3, #12]
 80086de:	4619      	mov	r1, r3
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f001 fef9 	bl	800a4d8 <USBH_LL_GetLastXferSize>
 80086e6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086ec:	68fa      	ldr	r2, [r7, #12]
 80086ee:	429a      	cmp	r2, r3
 80086f0:	d016      	beq.n	8008720 <CDC_ProcessReception+0x9e>
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	8b5b      	ldrh	r3, [r3, #26]
 80086f6:	461a      	mov	r2, r3
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d110      	bne.n	8008720 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	1ad2      	subs	r2, r2, r3
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	6a1a      	ldr	r2, [r3, #32]
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	441a      	add	r2, r3
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	2203      	movs	r2, #3
 800871a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800871e:	e006      	b.n	800872e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	2200      	movs	r2, #0
 8008724:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f000 f80f 	bl	800874c <USBH_CDC_ReceiveCallback>
      break;
 800872e:	bf00      	nop
  }
}
 8008730:	bf00      	nop
 8008732:	3718      	adds	r7, #24
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}

08008738 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008738:	b480      	push	{r7}
 800873a:	b083      	sub	sp, #12
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008740:	bf00      	nop
 8008742:	370c      	adds	r7, #12
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr

0800874c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800874c:	b480      	push	{r7}
 800874e:	b083      	sub	sp, #12
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008754:	bf00      	nop
 8008756:	370c      	adds	r7, #12
 8008758:	46bd      	mov	sp, r7
 800875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875e:	4770      	bx	lr

08008760 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008760:	b480      	push	{r7}
 8008762:	b083      	sub	sp, #12
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008768:	bf00      	nop
 800876a:	370c      	adds	r7, #12
 800876c:	46bd      	mov	sp, r7
 800876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008772:	4770      	bx	lr

08008774 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b084      	sub	sp, #16
 8008778:	af00      	add	r7, sp, #0
 800877a:	60f8      	str	r0, [r7, #12]
 800877c:	60b9      	str	r1, [r7, #8]
 800877e:	4613      	mov	r3, r2
 8008780:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d101      	bne.n	800878c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008788:	2302      	movs	r3, #2
 800878a:	e029      	b.n	80087e0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	79fa      	ldrb	r2, [r7, #7]
 8008790:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2200      	movs	r2, #0
 8008798:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2200      	movs	r2, #0
 80087a0:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80087a4:	68f8      	ldr	r0, [r7, #12]
 80087a6:	f000 f81f 	bl	80087e8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	2200      	movs	r2, #0
 80087ae:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2200      	movs	r2, #0
 80087b6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2200      	movs	r2, #0
 80087be:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2200      	movs	r2, #0
 80087c6:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d003      	beq.n	80087d8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	68ba      	ldr	r2, [r7, #8]
 80087d4:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80087d8:	68f8      	ldr	r0, [r7, #12]
 80087da:	f001 fdc9 	bl	800a370 <USBH_LL_Init>

  return USBH_OK;
 80087de:	2300      	movs	r3, #0
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3710      	adds	r7, #16
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}

080087e8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b084      	sub	sp, #16
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80087f0:	2300      	movs	r3, #0
 80087f2:	60fb      	str	r3, [r7, #12]
 80087f4:	e009      	b.n	800880a <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 80087f6:	687a      	ldr	r2, [r7, #4]
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	33e0      	adds	r3, #224	@ 0xe0
 80087fc:	009b      	lsls	r3, r3, #2
 80087fe:	4413      	add	r3, r2
 8008800:	2200      	movs	r2, #0
 8008802:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	3301      	adds	r3, #1
 8008808:	60fb      	str	r3, [r7, #12]
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2b0f      	cmp	r3, #15
 800880e:	d9f2      	bls.n	80087f6 <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008810:	2300      	movs	r3, #0
 8008812:	60fb      	str	r3, [r7, #12]
 8008814:	e009      	b.n	800882a <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 8008816:	687a      	ldr	r2, [r7, #4]
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	4413      	add	r3, r2
 800881c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008820:	2200      	movs	r2, #0
 8008822:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	3301      	adds	r3, #1
 8008828:	60fb      	str	r3, [r7, #12]
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008830:	d3f1      	bcc.n	8008816 <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2200      	movs	r2, #0
 8008836:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2200      	movs	r2, #0
 800883c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2201      	movs	r2, #1
 8008842:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2200      	movs	r2, #0
 8008848:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2201      	movs	r2, #1
 8008850:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2240      	movs	r2, #64	@ 0x40
 8008856:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2200      	movs	r2, #0
 800885c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2200      	movs	r2, #0
 8008862:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2201      	movs	r2, #1
 800886a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2200      	movs	r2, #0
 8008872:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2200      	movs	r2, #0
 800887a:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	331c      	adds	r3, #28
 8008882:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008886:	2100      	movs	r1, #0
 8008888:	4618      	mov	r0, r3
 800888a:	f002 f825 	bl	800a8d8 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008894:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008898:	2100      	movs	r1, #0
 800889a:	4618      	mov	r0, r3
 800889c:	f002 f81c 	bl	800a8d8 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80088a6:	2212      	movs	r2, #18
 80088a8:	2100      	movs	r1, #0
 80088aa:	4618      	mov	r0, r3
 80088ac:	f002 f814 	bl	800a8d8 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80088b6:	223e      	movs	r2, #62	@ 0x3e
 80088b8:	2100      	movs	r1, #0
 80088ba:	4618      	mov	r0, r3
 80088bc:	f002 f80c 	bl	800a8d8 <memset>

  return USBH_OK;
 80088c0:	2300      	movs	r3, #0
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3710      	adds	r7, #16
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}

080088ca <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80088ca:	b480      	push	{r7}
 80088cc:	b085      	sub	sp, #20
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	6078      	str	r0, [r7, #4]
 80088d2:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80088d4:	2300      	movs	r3, #0
 80088d6:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d016      	beq.n	800890c <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d10e      	bne.n	8008906 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80088ee:	1c59      	adds	r1, r3, #1
 80088f0:	687a      	ldr	r2, [r7, #4]
 80088f2:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 80088f6:	687a      	ldr	r2, [r7, #4]
 80088f8:	33de      	adds	r3, #222	@ 0xde
 80088fa:	6839      	ldr	r1, [r7, #0]
 80088fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008900:	2300      	movs	r3, #0
 8008902:	73fb      	strb	r3, [r7, #15]
 8008904:	e004      	b.n	8008910 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008906:	2302      	movs	r3, #2
 8008908:	73fb      	strb	r3, [r7, #15]
 800890a:	e001      	b.n	8008910 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800890c:	2302      	movs	r3, #2
 800890e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008910:	7bfb      	ldrb	r3, [r7, #15]
}
 8008912:	4618      	mov	r0, r3
 8008914:	3714      	adds	r7, #20
 8008916:	46bd      	mov	sp, r7
 8008918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891c:	4770      	bx	lr

0800891e <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800891e:	b480      	push	{r7}
 8008920:	b085      	sub	sp, #20
 8008922:	af00      	add	r7, sp, #0
 8008924:	6078      	str	r0, [r7, #4]
 8008926:	460b      	mov	r3, r1
 8008928:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800892a:	2300      	movs	r3, #0
 800892c:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8008934:	78fa      	ldrb	r2, [r7, #3]
 8008936:	429a      	cmp	r2, r3
 8008938:	d204      	bcs.n	8008944 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	78fa      	ldrb	r2, [r7, #3]
 800893e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8008942:	e001      	b.n	8008948 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008944:	2302      	movs	r3, #2
 8008946:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008948:	7bfb      	ldrb	r3, [r7, #15]
}
 800894a:	4618      	mov	r0, r3
 800894c:	3714      	adds	r7, #20
 800894e:	46bd      	mov	sp, r7
 8008950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008954:	4770      	bx	lr

08008956 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008956:	b480      	push	{r7}
 8008958:	b087      	sub	sp, #28
 800895a:	af00      	add	r7, sp, #0
 800895c:	6078      	str	r0, [r7, #4]
 800895e:	4608      	mov	r0, r1
 8008960:	4611      	mov	r1, r2
 8008962:	461a      	mov	r2, r3
 8008964:	4603      	mov	r3, r0
 8008966:	70fb      	strb	r3, [r7, #3]
 8008968:	460b      	mov	r3, r1
 800896a:	70bb      	strb	r3, [r7, #2]
 800896c:	4613      	mov	r3, r2
 800896e:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008970:	2300      	movs	r3, #0
 8008972:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008974:	2300      	movs	r3, #0
 8008976:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800897e:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008980:	e025      	b.n	80089ce <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008982:	7dfb      	ldrb	r3, [r7, #23]
 8008984:	221a      	movs	r2, #26
 8008986:	fb02 f303 	mul.w	r3, r2, r3
 800898a:	3308      	adds	r3, #8
 800898c:	68fa      	ldr	r2, [r7, #12]
 800898e:	4413      	add	r3, r2
 8008990:	3302      	adds	r3, #2
 8008992:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	795b      	ldrb	r3, [r3, #5]
 8008998:	78fa      	ldrb	r2, [r7, #3]
 800899a:	429a      	cmp	r2, r3
 800899c:	d002      	beq.n	80089a4 <USBH_FindInterface+0x4e>
 800899e:	78fb      	ldrb	r3, [r7, #3]
 80089a0:	2bff      	cmp	r3, #255	@ 0xff
 80089a2:	d111      	bne.n	80089c8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80089a8:	78ba      	ldrb	r2, [r7, #2]
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d002      	beq.n	80089b4 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80089ae:	78bb      	ldrb	r3, [r7, #2]
 80089b0:	2bff      	cmp	r3, #255	@ 0xff
 80089b2:	d109      	bne.n	80089c8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80089b8:	787a      	ldrb	r2, [r7, #1]
 80089ba:	429a      	cmp	r2, r3
 80089bc:	d002      	beq.n	80089c4 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80089be:	787b      	ldrb	r3, [r7, #1]
 80089c0:	2bff      	cmp	r3, #255	@ 0xff
 80089c2:	d101      	bne.n	80089c8 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80089c4:	7dfb      	ldrb	r3, [r7, #23]
 80089c6:	e006      	b.n	80089d6 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80089c8:	7dfb      	ldrb	r3, [r7, #23]
 80089ca:	3301      	adds	r3, #1
 80089cc:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80089ce:	7dfb      	ldrb	r3, [r7, #23]
 80089d0:	2b01      	cmp	r3, #1
 80089d2:	d9d6      	bls.n	8008982 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80089d4:	23ff      	movs	r3, #255	@ 0xff
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	371c      	adds	r7, #28
 80089da:	46bd      	mov	sp, r7
 80089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e0:	4770      	bx	lr

080089e2 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 80089e2:	b580      	push	{r7, lr}
 80089e4:	b082      	sub	sp, #8
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f001 fcfc 	bl	800a3e8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80089f0:	2101      	movs	r1, #1
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f001 fe15 	bl	800a622 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80089f8:	2300      	movs	r3, #0
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3708      	adds	r7, #8
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
	...

08008a04 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b088      	sub	sp, #32
 8008a08:	af04      	add	r7, sp, #16
 8008a0a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008a0c:	2302      	movs	r3, #2
 8008a0e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008a10:	2300      	movs	r3, #0
 8008a12:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8008a1a:	b2db      	uxtb	r3, r3
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d102      	bne.n	8008a26 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2203      	movs	r2, #3
 8008a24:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	781b      	ldrb	r3, [r3, #0]
 8008a2a:	b2db      	uxtb	r3, r3
 8008a2c:	2b0b      	cmp	r3, #11
 8008a2e:	f200 81bc 	bhi.w	8008daa <USBH_Process+0x3a6>
 8008a32:	a201      	add	r2, pc, #4	@ (adr r2, 8008a38 <USBH_Process+0x34>)
 8008a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a38:	08008a69 	.word	0x08008a69
 8008a3c:	08008a9b 	.word	0x08008a9b
 8008a40:	08008b05 	.word	0x08008b05
 8008a44:	08008d45 	.word	0x08008d45
 8008a48:	08008dab 	.word	0x08008dab
 8008a4c:	08008ba5 	.word	0x08008ba5
 8008a50:	08008ceb 	.word	0x08008ceb
 8008a54:	08008bdb 	.word	0x08008bdb
 8008a58:	08008bfb 	.word	0x08008bfb
 8008a5c:	08008c19 	.word	0x08008c19
 8008a60:	08008c5d 	.word	0x08008c5d
 8008a64:	08008d2d 	.word	0x08008d2d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8008a6e:	b2db      	uxtb	r3, r3
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	f000 819c 	beq.w	8008dae <USBH_Process+0x3aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2201      	movs	r2, #1
 8008a7a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008a7c:	20c8      	movs	r0, #200	@ 0xc8
 8008a7e:	f001 fe1a 	bl	800a6b6 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f001 fd0d 	bl	800a4a2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2200      	movs	r2, #0
 8008a94:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8008a98:	e189      	b.n	8008dae <USBH_Process+0x3aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8008aa0:	b2db      	uxtb	r3, r3
 8008aa2:	2b01      	cmp	r3, #1
 8008aa4:	d107      	bne.n	8008ab6 <USBH_Process+0xb2>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2202      	movs	r2, #2
 8008ab2:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8008ab4:	e18a      	b.n	8008dcc <USBH_Process+0x3c8>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008abc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008ac0:	d914      	bls.n	8008aec <USBH_Process+0xe8>
          phost->device.RstCnt++;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008ac8:	3301      	adds	r3, #1
 8008aca:	b2da      	uxtb	r2, r3
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008ad8:	2b03      	cmp	r3, #3
 8008ada:	d903      	bls.n	8008ae4 <USBH_Process+0xe0>
            phost->gState = HOST_ABORT_STATE;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	220d      	movs	r2, #13
 8008ae0:	701a      	strb	r2, [r3, #0]
      break;
 8008ae2:	e173      	b.n	8008dcc <USBH_Process+0x3c8>
            phost->gState = HOST_IDLE;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	701a      	strb	r2, [r3, #0]
      break;
 8008aea:	e16f      	b.n	8008dcc <USBH_Process+0x3c8>
          phost->Timeout += 10U;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008af2:	f103 020a 	add.w	r2, r3, #10
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8008afc:	200a      	movs	r0, #10
 8008afe:	f001 fdda 	bl	800a6b6 <USBH_Delay>
      break;
 8008b02:	e163      	b.n	8008dcc <USBH_Process+0x3c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d005      	beq.n	8008b1a <USBH_Process+0x116>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008b14:	2104      	movs	r1, #4
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008b1a:	2064      	movs	r0, #100	@ 0x64
 8008b1c:	f001 fdcb 	bl	800a6b6 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f001 fc97 	bl	800a454 <USBH_LL_GetSpeed>
 8008b26:	4603      	mov	r3, r0
 8008b28:	461a      	mov	r2, r3
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2205      	movs	r2, #5
 8008b34:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008b36:	2100      	movs	r1, #0
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f001 faa2 	bl	800a082 <USBH_AllocPipe>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	461a      	mov	r2, r3
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008b46:	2180      	movs	r1, #128	@ 0x80
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f001 fa9a 	bl	800a082 <USBH_AllocPipe>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	461a      	mov	r2, r3
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	7919      	ldrb	r1, [r3, #4]
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008b66:	687a      	ldr	r2, [r7, #4]
 8008b68:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008b6a:	9202      	str	r2, [sp, #8]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	9201      	str	r2, [sp, #4]
 8008b70:	9300      	str	r3, [sp, #0]
 8008b72:	4603      	mov	r3, r0
 8008b74:	2280      	movs	r2, #128	@ 0x80
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f001 fa54 	bl	800a024 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	7959      	ldrb	r1, [r3, #5]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008b8c:	687a      	ldr	r2, [r7, #4]
 8008b8e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008b90:	9202      	str	r2, [sp, #8]
 8008b92:	2200      	movs	r2, #0
 8008b94:	9201      	str	r2, [sp, #4]
 8008b96:	9300      	str	r3, [sp, #0]
 8008b98:	4603      	mov	r3, r0
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f001 fa41 	bl	800a024 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8008ba2:	e113      	b.n	8008dcc <USBH_Process+0x3c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f000 f917 	bl	8008dd8 <USBH_HandleEnum>
 8008baa:	4603      	mov	r3, r0
 8008bac:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008bae:	7bbb      	ldrb	r3, [r7, #14]
 8008bb0:	b2db      	uxtb	r3, r3
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	f040 80fd 	bne.w	8008db2 <USBH_Process+0x3ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8008bc6:	2b01      	cmp	r3, #1
 8008bc8:	d103      	bne.n	8008bd2 <USBH_Process+0x1ce>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2208      	movs	r2, #8
 8008bce:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8008bd0:	e0ef      	b.n	8008db2 <USBH_Process+0x3ae>
          phost->gState = HOST_INPUT;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2207      	movs	r2, #7
 8008bd6:	701a      	strb	r2, [r3, #0]
      break;
 8008bd8:	e0eb      	b.n	8008db2 <USBH_Process+0x3ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	f000 80e8 	beq.w	8008db6 <USBH_Process+0x3b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008bec:	2101      	movs	r1, #1
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2208      	movs	r2, #8
 8008bf6:	701a      	strb	r2, [r3, #0]
#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 8008bf8:	e0dd      	b.n	8008db6 <USBH_Process+0x3b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8008c00:	4619      	mov	r1, r3
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f000 fc3f 	bl	8009486 <USBH_SetCfg>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	f040 80d5 	bne.w	8008dba <USBH_Process+0x3b6>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2209      	movs	r2, #9
 8008c14:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8008c16:	e0d0      	b.n	8008dba <USBH_Process+0x3b6>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8008c1e:	f003 0320 	and.w	r3, r3, #32
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d016      	beq.n	8008c54 <USBH_Process+0x250>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008c26:	2101      	movs	r1, #1
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f000 fc4f 	bl	80094cc <USBH_SetFeature>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008c32:	7bbb      	ldrb	r3, [r7, #14]
 8008c34:	b2db      	uxtb	r3, r3
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d103      	bne.n	8008c42 <USBH_Process+0x23e>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	220a      	movs	r2, #10
 8008c3e:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8008c40:	e0bd      	b.n	8008dbe <USBH_Process+0x3ba>
        else if (status == USBH_NOT_SUPPORTED)
 8008c42:	7bbb      	ldrb	r3, [r7, #14]
 8008c44:	b2db      	uxtb	r3, r3
 8008c46:	2b03      	cmp	r3, #3
 8008c48:	f040 80b9 	bne.w	8008dbe <USBH_Process+0x3ba>
          phost->gState = HOST_CHECK_CLASS;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	220a      	movs	r2, #10
 8008c50:	701a      	strb	r2, [r3, #0]
      break;
 8008c52:	e0b4      	b.n	8008dbe <USBH_Process+0x3ba>
        phost->gState = HOST_CHECK_CLASS;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	220a      	movs	r2, #10
 8008c58:	701a      	strb	r2, [r3, #0]
      break;
 8008c5a:	e0b0      	b.n	8008dbe <USBH_Process+0x3ba>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	f000 80ad 	beq.w	8008dc2 <USBH_Process+0x3be>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008c70:	2300      	movs	r3, #0
 8008c72:	73fb      	strb	r3, [r7, #15]
 8008c74:	e016      	b.n	8008ca4 <USBH_Process+0x2a0>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008c76:	7bfa      	ldrb	r2, [r7, #15]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	32de      	adds	r2, #222	@ 0xde
 8008c7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c80:	791a      	ldrb	r2, [r3, #4]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d108      	bne.n	8008c9e <USBH_Process+0x29a>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008c8c:	7bfa      	ldrb	r2, [r7, #15]
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	32de      	adds	r2, #222	@ 0xde
 8008c92:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8008c9c:	e005      	b.n	8008caa <USBH_Process+0x2a6>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008c9e:	7bfb      	ldrb	r3, [r7, #15]
 8008ca0:	3301      	adds	r3, #1
 8008ca2:	73fb      	strb	r3, [r7, #15]
 8008ca4:	7bfb      	ldrb	r3, [r7, #15]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d0e5      	beq.n	8008c76 <USBH_Process+0x272>
          }
        }

        if (phost->pActiveClass != NULL)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d016      	beq.n	8008ce2 <USBH_Process+0x2de>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008cba:	689b      	ldr	r3, [r3, #8]
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	4798      	blx	r3
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d109      	bne.n	8008cda <USBH_Process+0x2d6>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2206      	movs	r2, #6
 8008cca:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008cd2:	2103      	movs	r1, #3
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	4798      	blx	r3
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8008cd8:	e073      	b.n	8008dc2 <USBH_Process+0x3be>
            phost->gState = HOST_ABORT_STATE;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	220d      	movs	r2, #13
 8008cde:	701a      	strb	r2, [r3, #0]
      break;
 8008ce0:	e06f      	b.n	8008dc2 <USBH_Process+0x3be>
          phost->gState = HOST_ABORT_STATE;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	220d      	movs	r2, #13
 8008ce6:	701a      	strb	r2, [r3, #0]
      break;
 8008ce8:	e06b      	b.n	8008dc2 <USBH_Process+0x3be>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d017      	beq.n	8008d24 <USBH_Process+0x320>
      {
        status = phost->pActiveClass->Requests(phost);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008cfa:	691b      	ldr	r3, [r3, #16]
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	4798      	blx	r3
 8008d00:	4603      	mov	r3, r0
 8008d02:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008d04:	7bbb      	ldrb	r3, [r7, #14]
 8008d06:	b2db      	uxtb	r3, r3
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d103      	bne.n	8008d14 <USBH_Process+0x310>
        {
          phost->gState = HOST_CLASS;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	220b      	movs	r2, #11
 8008d10:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8008d12:	e058      	b.n	8008dc6 <USBH_Process+0x3c2>
        else if (status == USBH_FAIL)
 8008d14:	7bbb      	ldrb	r3, [r7, #14]
 8008d16:	b2db      	uxtb	r3, r3
 8008d18:	2b02      	cmp	r3, #2
 8008d1a:	d154      	bne.n	8008dc6 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	220d      	movs	r2, #13
 8008d20:	701a      	strb	r2, [r3, #0]
      break;
 8008d22:	e050      	b.n	8008dc6 <USBH_Process+0x3c2>
        phost->gState = HOST_ABORT_STATE;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	220d      	movs	r2, #13
 8008d28:	701a      	strb	r2, [r3, #0]
      break;
 8008d2a:	e04c      	b.n	8008dc6 <USBH_Process+0x3c2>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d049      	beq.n	8008dca <USBH_Process+0x3c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008d3c:	695b      	ldr	r3, [r3, #20]
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	4798      	blx	r3
      }
      break;
 8008d42:	e042      	b.n	8008dca <USBH_Process+0x3c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2200      	movs	r2, #0
 8008d48:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f7ff fd4b 	bl	80087e8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d009      	beq.n	8008d70 <USBH_Process+0x36c>
      {
        phost->pActiveClass->DeInit(phost);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008d62:	68db      	ldr	r3, [r3, #12]
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d005      	beq.n	8008d86 <USBH_Process+0x382>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008d80:	2105      	movs	r1, #5
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8008d8c:	b2db      	uxtb	r3, r3
 8008d8e:	2b01      	cmp	r3, #1
 8008d90:	d107      	bne.n	8008da2 <USBH_Process+0x39e>
      {
        phost->device.is_ReEnumerated = 0U;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2200      	movs	r2, #0
 8008d96:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f7ff fe21 	bl	80089e2 <USBH_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8008da0:	e014      	b.n	8008dcc <USBH_Process+0x3c8>
        (void)USBH_LL_Start(phost);
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f001 fb20 	bl	800a3e8 <USBH_LL_Start>
      break;
 8008da8:	e010      	b.n	8008dcc <USBH_Process+0x3c8>

    case HOST_ABORT_STATE:
    default :
      break;
 8008daa:	bf00      	nop
 8008dac:	e00e      	b.n	8008dcc <USBH_Process+0x3c8>
      break;
 8008dae:	bf00      	nop
 8008db0:	e00c      	b.n	8008dcc <USBH_Process+0x3c8>
      break;
 8008db2:	bf00      	nop
 8008db4:	e00a      	b.n	8008dcc <USBH_Process+0x3c8>
    break;
 8008db6:	bf00      	nop
 8008db8:	e008      	b.n	8008dcc <USBH_Process+0x3c8>
      break;
 8008dba:	bf00      	nop
 8008dbc:	e006      	b.n	8008dcc <USBH_Process+0x3c8>
      break;
 8008dbe:	bf00      	nop
 8008dc0:	e004      	b.n	8008dcc <USBH_Process+0x3c8>
      break;
 8008dc2:	bf00      	nop
 8008dc4:	e002      	b.n	8008dcc <USBH_Process+0x3c8>
      break;
 8008dc6:	bf00      	nop
 8008dc8:	e000      	b.n	8008dcc <USBH_Process+0x3c8>
      break;
 8008dca:	bf00      	nop
  }
  return USBH_OK;
 8008dcc:	2300      	movs	r3, #0
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3710      	adds	r7, #16
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}
 8008dd6:	bf00      	nop

08008dd8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b088      	sub	sp, #32
 8008ddc:	af04      	add	r7, sp, #16
 8008dde:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008de0:	2301      	movs	r3, #1
 8008de2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008de4:	2301      	movs	r3, #1
 8008de6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	785b      	ldrb	r3, [r3, #1]
 8008dec:	2b07      	cmp	r3, #7
 8008dee:	f200 81bd 	bhi.w	800916c <USBH_HandleEnum+0x394>
 8008df2:	a201      	add	r2, pc, #4	@ (adr r2, 8008df8 <USBH_HandleEnum+0x20>)
 8008df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008df8:	08008e19 	.word	0x08008e19
 8008dfc:	08008ed3 	.word	0x08008ed3
 8008e00:	08008f3d 	.word	0x08008f3d
 8008e04:	08008fc7 	.word	0x08008fc7
 8008e08:	08009031 	.word	0x08009031
 8008e0c:	080090a1 	.word	0x080090a1
 8008e10:	080090e7 	.word	0x080090e7
 8008e14:	0800912d 	.word	0x0800912d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008e18:	2108      	movs	r1, #8
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 fa50 	bl	80092c0 <USBH_Get_DevDesc>
 8008e20:	4603      	mov	r3, r0
 8008e22:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008e24:	7bbb      	ldrb	r3, [r7, #14]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d12e      	bne.n	8008e88 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2201      	movs	r2, #1
 8008e38:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	7919      	ldrb	r1, [r3, #4]
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008e4a:	687a      	ldr	r2, [r7, #4]
 8008e4c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008e4e:	9202      	str	r2, [sp, #8]
 8008e50:	2200      	movs	r2, #0
 8008e52:	9201      	str	r2, [sp, #4]
 8008e54:	9300      	str	r3, [sp, #0]
 8008e56:	4603      	mov	r3, r0
 8008e58:	2280      	movs	r2, #128	@ 0x80
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f001 f8e2 	bl	800a024 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	7959      	ldrb	r1, [r3, #5]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008e70:	687a      	ldr	r2, [r7, #4]
 8008e72:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008e74:	9202      	str	r2, [sp, #8]
 8008e76:	2200      	movs	r2, #0
 8008e78:	9201      	str	r2, [sp, #4]
 8008e7a:	9300      	str	r3, [sp, #0]
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	2200      	movs	r2, #0
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f001 f8cf 	bl	800a024 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008e86:	e173      	b.n	8009170 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008e88:	7bbb      	ldrb	r3, [r7, #14]
 8008e8a:	2b03      	cmp	r3, #3
 8008e8c:	f040 8170 	bne.w	8009170 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008e96:	3301      	adds	r3, #1
 8008e98:	b2da      	uxtb	r2, r3
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008ea6:	2b03      	cmp	r3, #3
 8008ea8:	d903      	bls.n	8008eb2 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	220d      	movs	r2, #13
 8008eae:	701a      	strb	r2, [r3, #0]
      break;
 8008eb0:	e15e      	b.n	8009170 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	795b      	ldrb	r3, [r3, #5]
 8008eb6:	4619      	mov	r1, r3
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f001 f903 	bl	800a0c4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	791b      	ldrb	r3, [r3, #4]
 8008ec2:	4619      	mov	r1, r3
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f001 f8fd 	bl	800a0c4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	701a      	strb	r2, [r3, #0]
      break;
 8008ed0:	e14e      	b.n	8009170 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008ed2:	2112      	movs	r1, #18
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f000 f9f3 	bl	80092c0 <USBH_Get_DevDesc>
 8008eda:	4603      	mov	r3, r0
 8008edc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008ede:	7bbb      	ldrb	r3, [r7, #14]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d103      	bne.n	8008eec <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2202      	movs	r2, #2
 8008ee8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008eea:	e143      	b.n	8009174 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008eec:	7bbb      	ldrb	r3, [r7, #14]
 8008eee:	2b03      	cmp	r3, #3
 8008ef0:	f040 8140 	bne.w	8009174 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008efa:	3301      	adds	r3, #1
 8008efc:	b2da      	uxtb	r2, r3
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008f0a:	2b03      	cmp	r3, #3
 8008f0c:	d903      	bls.n	8008f16 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	220d      	movs	r2, #13
 8008f12:	701a      	strb	r2, [r3, #0]
      break;
 8008f14:	e12e      	b.n	8009174 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	795b      	ldrb	r3, [r3, #5]
 8008f1a:	4619      	mov	r1, r3
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f001 f8d1 	bl	800a0c4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	791b      	ldrb	r3, [r3, #4]
 8008f26:	4619      	mov	r1, r3
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f001 f8cb 	bl	800a0c4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2200      	movs	r2, #0
 8008f32:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2200      	movs	r2, #0
 8008f38:	701a      	strb	r2, [r3, #0]
      break;
 8008f3a:	e11b      	b.n	8009174 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008f3c:	2101      	movs	r1, #1
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f000 fa7d 	bl	800943e <USBH_SetAddress>
 8008f44:	4603      	mov	r3, r0
 8008f46:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008f48:	7bbb      	ldrb	r3, [r7, #14]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d130      	bne.n	8008fb0 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8008f4e:	2002      	movs	r0, #2
 8008f50:	f001 fbb1 	bl	800a6b6 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2201      	movs	r2, #1
 8008f58:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2203      	movs	r2, #3
 8008f60:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	7919      	ldrb	r1, [r3, #4]
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008f72:	687a      	ldr	r2, [r7, #4]
 8008f74:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008f76:	9202      	str	r2, [sp, #8]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	9201      	str	r2, [sp, #4]
 8008f7c:	9300      	str	r3, [sp, #0]
 8008f7e:	4603      	mov	r3, r0
 8008f80:	2280      	movs	r2, #128	@ 0x80
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f001 f84e 	bl	800a024 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	7959      	ldrb	r1, [r3, #5]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008f98:	687a      	ldr	r2, [r7, #4]
 8008f9a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008f9c:	9202      	str	r2, [sp, #8]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	9201      	str	r2, [sp, #4]
 8008fa2:	9300      	str	r3, [sp, #0]
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f001 f83b 	bl	800a024 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008fae:	e0e3      	b.n	8009178 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008fb0:	7bbb      	ldrb	r3, [r7, #14]
 8008fb2:	2b03      	cmp	r3, #3
 8008fb4:	f040 80e0 	bne.w	8009178 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	220d      	movs	r2, #13
 8008fbc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	705a      	strb	r2, [r3, #1]
      break;
 8008fc4:	e0d8      	b.n	8009178 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008fc6:	2109      	movs	r1, #9
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f000 f9a5 	bl	8009318 <USBH_Get_CfgDesc>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008fd2:	7bbb      	ldrb	r3, [r7, #14]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d103      	bne.n	8008fe0 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2204      	movs	r2, #4
 8008fdc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008fde:	e0cd      	b.n	800917c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008fe0:	7bbb      	ldrb	r3, [r7, #14]
 8008fe2:	2b03      	cmp	r3, #3
 8008fe4:	f040 80ca 	bne.w	800917c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008fee:	3301      	adds	r3, #1
 8008ff0:	b2da      	uxtb	r2, r3
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008ffe:	2b03      	cmp	r3, #3
 8009000:	d903      	bls.n	800900a <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	220d      	movs	r2, #13
 8009006:	701a      	strb	r2, [r3, #0]
      break;
 8009008:	e0b8      	b.n	800917c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	795b      	ldrb	r3, [r3, #5]
 800900e:	4619      	mov	r1, r3
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f001 f857 	bl	800a0c4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	791b      	ldrb	r3, [r3, #4]
 800901a:	4619      	mov	r1, r3
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f001 f851 	bl	800a0c4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2200      	movs	r2, #0
 8009026:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2200      	movs	r2, #0
 800902c:	701a      	strb	r2, [r3, #0]
      break;
 800902e:	e0a5      	b.n	800917c <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8009036:	4619      	mov	r1, r3
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f000 f96d 	bl	8009318 <USBH_Get_CfgDesc>
 800903e:	4603      	mov	r3, r0
 8009040:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009042:	7bbb      	ldrb	r3, [r7, #14]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d103      	bne.n	8009050 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2205      	movs	r2, #5
 800904c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800904e:	e097      	b.n	8009180 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009050:	7bbb      	ldrb	r3, [r7, #14]
 8009052:	2b03      	cmp	r3, #3
 8009054:	f040 8094 	bne.w	8009180 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800905e:	3301      	adds	r3, #1
 8009060:	b2da      	uxtb	r2, r3
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800906e:	2b03      	cmp	r3, #3
 8009070:	d903      	bls.n	800907a <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	220d      	movs	r2, #13
 8009076:	701a      	strb	r2, [r3, #0]
      break;
 8009078:	e082      	b.n	8009180 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	795b      	ldrb	r3, [r3, #5]
 800907e:	4619      	mov	r1, r3
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f001 f81f 	bl	800a0c4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	791b      	ldrb	r3, [r3, #4]
 800908a:	4619      	mov	r1, r3
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f001 f819 	bl	800a0c4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2200      	movs	r2, #0
 8009096:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2200      	movs	r2, #0
 800909c:	701a      	strb	r2, [r3, #0]
      break;
 800909e:	e06f      	b.n	8009180 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d019      	beq.n	80090de <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80090b6:	23ff      	movs	r3, #255	@ 0xff
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f000 f957 	bl	800936c <USBH_Get_StringDesc>
 80090be:	4603      	mov	r3, r0
 80090c0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80090c2:	7bbb      	ldrb	r3, [r7, #14]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d103      	bne.n	80090d0 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2206      	movs	r2, #6
 80090cc:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 80090ce:	e059      	b.n	8009184 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80090d0:	7bbb      	ldrb	r3, [r7, #14]
 80090d2:	2b03      	cmp	r3, #3
 80090d4:	d156      	bne.n	8009184 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2206      	movs	r2, #6
 80090da:	705a      	strb	r2, [r3, #1]
      break;
 80090dc:	e052      	b.n	8009184 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2206      	movs	r2, #6
 80090e2:	705a      	strb	r2, [r3, #1]
      break;
 80090e4:	e04e      	b.n	8009184 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d019      	beq.n	8009124 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80090fc:	23ff      	movs	r3, #255	@ 0xff
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f000 f934 	bl	800936c <USBH_Get_StringDesc>
 8009104:	4603      	mov	r3, r0
 8009106:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009108:	7bbb      	ldrb	r3, [r7, #14]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d103      	bne.n	8009116 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2207      	movs	r2, #7
 8009112:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8009114:	e038      	b.n	8009188 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009116:	7bbb      	ldrb	r3, [r7, #14]
 8009118:	2b03      	cmp	r3, #3
 800911a:	d135      	bne.n	8009188 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2207      	movs	r2, #7
 8009120:	705a      	strb	r2, [r3, #1]
      break;
 8009122:	e031      	b.n	8009188 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2207      	movs	r2, #7
 8009128:	705a      	strb	r2, [r3, #1]
      break;
 800912a:	e02d      	b.n	8009188 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8009132:	2b00      	cmp	r3, #0
 8009134:	d017      	beq.n	8009166 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009142:	23ff      	movs	r3, #255	@ 0xff
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f000 f911 	bl	800936c <USBH_Get_StringDesc>
 800914a:	4603      	mov	r3, r0
 800914c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800914e:	7bbb      	ldrb	r3, [r7, #14]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d102      	bne.n	800915a <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009154:	2300      	movs	r3, #0
 8009156:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009158:	e018      	b.n	800918c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800915a:	7bbb      	ldrb	r3, [r7, #14]
 800915c:	2b03      	cmp	r3, #3
 800915e:	d115      	bne.n	800918c <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8009160:	2300      	movs	r3, #0
 8009162:	73fb      	strb	r3, [r7, #15]
      break;
 8009164:	e012      	b.n	800918c <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8009166:	2300      	movs	r3, #0
 8009168:	73fb      	strb	r3, [r7, #15]
      break;
 800916a:	e00f      	b.n	800918c <USBH_HandleEnum+0x3b4>

    default:
      break;
 800916c:	bf00      	nop
 800916e:	e00e      	b.n	800918e <USBH_HandleEnum+0x3b6>
      break;
 8009170:	bf00      	nop
 8009172:	e00c      	b.n	800918e <USBH_HandleEnum+0x3b6>
      break;
 8009174:	bf00      	nop
 8009176:	e00a      	b.n	800918e <USBH_HandleEnum+0x3b6>
      break;
 8009178:	bf00      	nop
 800917a:	e008      	b.n	800918e <USBH_HandleEnum+0x3b6>
      break;
 800917c:	bf00      	nop
 800917e:	e006      	b.n	800918e <USBH_HandleEnum+0x3b6>
      break;
 8009180:	bf00      	nop
 8009182:	e004      	b.n	800918e <USBH_HandleEnum+0x3b6>
      break;
 8009184:	bf00      	nop
 8009186:	e002      	b.n	800918e <USBH_HandleEnum+0x3b6>
      break;
 8009188:	bf00      	nop
 800918a:	e000      	b.n	800918e <USBH_HandleEnum+0x3b6>
      break;
 800918c:	bf00      	nop
  }
  return Status;
 800918e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009190:	4618      	mov	r0, r3
 8009192:	3710      	adds	r7, #16
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}

08009198 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009198:	b480      	push	{r7}
 800919a:	b083      	sub	sp, #12
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
 80091a0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	683a      	ldr	r2, [r7, #0]
 80091a6:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 80091aa:	bf00      	nop
 80091ac:	370c      	adds	r7, #12
 80091ae:	46bd      	mov	sp, r7
 80091b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b4:	4770      	bx	lr

080091b6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80091b6:	b580      	push	{r7, lr}
 80091b8:	b082      	sub	sp, #8
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80091c4:	1c5a      	adds	r2, r3, #1
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f000 f804 	bl	80091da <USBH_HandleSof>
}
 80091d2:	bf00      	nop
 80091d4:	3708      	adds	r7, #8
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}

080091da <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80091da:	b580      	push	{r7, lr}
 80091dc:	b082      	sub	sp, #8
 80091de:	af00      	add	r7, sp, #0
 80091e0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	781b      	ldrb	r3, [r3, #0]
 80091e6:	b2db      	uxtb	r3, r3
 80091e8:	2b0b      	cmp	r3, #11
 80091ea:	d10a      	bne.n	8009202 <USBH_HandleSof+0x28>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d005      	beq.n	8009202 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80091fc:	699b      	ldr	r3, [r3, #24]
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	4798      	blx	r3
  }
}
 8009202:	bf00      	nop
 8009204:	3708      	adds	r7, #8
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}

0800920a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800920a:	b480      	push	{r7}
 800920c:	b083      	sub	sp, #12
 800920e:	af00      	add	r7, sp, #0
 8009210:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2201      	movs	r2, #1
 8009216:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
 800921a:	bf00      	nop
}
 800921c:	370c      	adds	r7, #12
 800921e:	46bd      	mov	sp, r7
 8009220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009224:	4770      	bx	lr

08009226 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009226:	b480      	push	{r7}
 8009228:	b083      	sub	sp, #12
 800922a:	af00      	add	r7, sp, #0
 800922c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2200      	movs	r2, #0
 8009232:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2201      	movs	r2, #1
 800923a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 800923e:	bf00      	nop
}
 8009240:	370c      	adds	r7, #12
 8009242:	46bd      	mov	sp, r7
 8009244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009248:	4770      	bx	lr

0800924a <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800924a:	b480      	push	{r7}
 800924c:	b083      	sub	sp, #12
 800924e:	af00      	add	r7, sp, #0
 8009250:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2201      	movs	r2, #1
 8009256:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2200      	movs	r2, #0
 800925e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2200      	movs	r2, #0
 8009266:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800926a:	2300      	movs	r3, #0
}
 800926c:	4618      	mov	r0, r3
 800926e:	370c      	adds	r7, #12
 8009270:	46bd      	mov	sp, r7
 8009272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009276:	4770      	bx	lr

08009278 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b082      	sub	sp, #8
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2201      	movs	r2, #1
 8009284:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2200      	movs	r2, #0
 800928c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2200      	movs	r2, #0
 8009294:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f001 f8c0 	bl	800a41e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	791b      	ldrb	r3, [r3, #4]
 80092a2:	4619      	mov	r1, r3
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f000 ff0d 	bl	800a0c4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	795b      	ldrb	r3, [r3, #5]
 80092ae:	4619      	mov	r1, r3
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f000 ff07 	bl	800a0c4 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 80092b6:	2300      	movs	r3, #0
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3708      	adds	r7, #8
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b086      	sub	sp, #24
 80092c4:	af02      	add	r7, sp, #8
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	460b      	mov	r3, r1
 80092ca:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 80092cc:	887b      	ldrh	r3, [r7, #2]
 80092ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092d2:	d901      	bls.n	80092d8 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80092d4:	2303      	movs	r3, #3
 80092d6:	e01b      	b.n	8009310 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80092de:	887b      	ldrh	r3, [r7, #2]
 80092e0:	9300      	str	r3, [sp, #0]
 80092e2:	4613      	mov	r3, r2
 80092e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80092e8:	2100      	movs	r1, #0
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f000 f872 	bl	80093d4 <USBH_GetDescriptor>
 80092f0:	4603      	mov	r3, r0
 80092f2:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 80092f4:	7bfb      	ldrb	r3, [r7, #15]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d109      	bne.n	800930e <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009300:	887a      	ldrh	r2, [r7, #2]
 8009302:	4619      	mov	r1, r3
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f000 f929 	bl	800955c <USBH_ParseDevDesc>
 800930a:	4603      	mov	r3, r0
 800930c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800930e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009310:	4618      	mov	r0, r3
 8009312:	3710      	adds	r7, #16
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}

08009318 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b086      	sub	sp, #24
 800931c:	af02      	add	r7, sp, #8
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	460b      	mov	r3, r1
 8009322:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	331c      	adds	r3, #28
 8009328:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800932a:	887b      	ldrh	r3, [r7, #2]
 800932c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009330:	d901      	bls.n	8009336 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009332:	2303      	movs	r3, #3
 8009334:	e016      	b.n	8009364 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009336:	887b      	ldrh	r3, [r7, #2]
 8009338:	9300      	str	r3, [sp, #0]
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009340:	2100      	movs	r1, #0
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f000 f846 	bl	80093d4 <USBH_GetDescriptor>
 8009348:	4603      	mov	r3, r0
 800934a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800934c:	7bfb      	ldrb	r3, [r7, #15]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d107      	bne.n	8009362 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8009352:	887b      	ldrh	r3, [r7, #2]
 8009354:	461a      	mov	r2, r3
 8009356:	68b9      	ldr	r1, [r7, #8]
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f000 f9af 	bl	80096bc <USBH_ParseCfgDesc>
 800935e:	4603      	mov	r3, r0
 8009360:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009362:	7bfb      	ldrb	r3, [r7, #15]
}
 8009364:	4618      	mov	r0, r3
 8009366:	3710      	adds	r7, #16
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}

0800936c <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b088      	sub	sp, #32
 8009370:	af02      	add	r7, sp, #8
 8009372:	60f8      	str	r0, [r7, #12]
 8009374:	607a      	str	r2, [r7, #4]
 8009376:	461a      	mov	r2, r3
 8009378:	460b      	mov	r3, r1
 800937a:	72fb      	strb	r3, [r7, #11]
 800937c:	4613      	mov	r3, r2
 800937e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8009380:	893b      	ldrh	r3, [r7, #8]
 8009382:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009386:	d802      	bhi.n	800938e <USBH_Get_StringDesc+0x22>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d101      	bne.n	8009392 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800938e:	2303      	movs	r3, #3
 8009390:	e01c      	b.n	80093cc <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8009392:	7afb      	ldrb	r3, [r7, #11]
 8009394:	b29b      	uxth	r3, r3
 8009396:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800939a:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80093a2:	893b      	ldrh	r3, [r7, #8]
 80093a4:	9300      	str	r3, [sp, #0]
 80093a6:	460b      	mov	r3, r1
 80093a8:	2100      	movs	r1, #0
 80093aa:	68f8      	ldr	r0, [r7, #12]
 80093ac:	f000 f812 	bl	80093d4 <USBH_GetDescriptor>
 80093b0:	4603      	mov	r3, r0
 80093b2:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80093b4:	7dfb      	ldrb	r3, [r7, #23]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d107      	bne.n	80093ca <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80093c0:	893a      	ldrh	r2, [r7, #8]
 80093c2:	6879      	ldr	r1, [r7, #4]
 80093c4:	4618      	mov	r0, r3
 80093c6:	f000 fb8c 	bl	8009ae2 <USBH_ParseStringDesc>
  }

  return status;
 80093ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3718      	adds	r7, #24
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}

080093d4 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b084      	sub	sp, #16
 80093d8:	af00      	add	r7, sp, #0
 80093da:	60f8      	str	r0, [r7, #12]
 80093dc:	607b      	str	r3, [r7, #4]
 80093de:	460b      	mov	r3, r1
 80093e0:	72fb      	strb	r3, [r7, #11]
 80093e2:	4613      	mov	r3, r2
 80093e4:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	789b      	ldrb	r3, [r3, #2]
 80093ea:	2b01      	cmp	r3, #1
 80093ec:	d11c      	bne.n	8009428 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80093ee:	7afb      	ldrb	r3, [r7, #11]
 80093f0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80093f4:	b2da      	uxtb	r2, r3
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	2206      	movs	r2, #6
 80093fe:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	893a      	ldrh	r2, [r7, #8]
 8009404:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009406:	893b      	ldrh	r3, [r7, #8]
 8009408:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800940c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009410:	d104      	bne.n	800941c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	f240 4209 	movw	r2, #1033	@ 0x409
 8009418:	829a      	strh	r2, [r3, #20]
 800941a:	e002      	b.n	8009422 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	2200      	movs	r2, #0
 8009420:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	8b3a      	ldrh	r2, [r7, #24]
 8009426:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009428:	8b3b      	ldrh	r3, [r7, #24]
 800942a:	461a      	mov	r2, r3
 800942c:	6879      	ldr	r1, [r7, #4]
 800942e:	68f8      	ldr	r0, [r7, #12]
 8009430:	f000 fba4 	bl	8009b7c <USBH_CtlReq>
 8009434:	4603      	mov	r3, r0
}
 8009436:	4618      	mov	r0, r3
 8009438:	3710      	adds	r7, #16
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}

0800943e <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800943e:	b580      	push	{r7, lr}
 8009440:	b082      	sub	sp, #8
 8009442:	af00      	add	r7, sp, #0
 8009444:	6078      	str	r0, [r7, #4]
 8009446:	460b      	mov	r3, r1
 8009448:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	789b      	ldrb	r3, [r3, #2]
 800944e:	2b01      	cmp	r3, #1
 8009450:	d10f      	bne.n	8009472 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2200      	movs	r2, #0
 8009456:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2205      	movs	r2, #5
 800945c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800945e:	78fb      	ldrb	r3, [r7, #3]
 8009460:	b29a      	uxth	r2, r3
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2200      	movs	r2, #0
 800946a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2200      	movs	r2, #0
 8009470:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009472:	2200      	movs	r2, #0
 8009474:	2100      	movs	r1, #0
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f000 fb80 	bl	8009b7c <USBH_CtlReq>
 800947c:	4603      	mov	r3, r0
}
 800947e:	4618      	mov	r0, r3
 8009480:	3708      	adds	r7, #8
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}

08009486 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009486:	b580      	push	{r7, lr}
 8009488:	b082      	sub	sp, #8
 800948a:	af00      	add	r7, sp, #0
 800948c:	6078      	str	r0, [r7, #4]
 800948e:	460b      	mov	r3, r1
 8009490:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	789b      	ldrb	r3, [r3, #2]
 8009496:	2b01      	cmp	r3, #1
 8009498:	d10e      	bne.n	80094b8 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2200      	movs	r2, #0
 800949e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2209      	movs	r2, #9
 80094a4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	887a      	ldrh	r2, [r7, #2]
 80094aa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2200      	movs	r2, #0
 80094b0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2200      	movs	r2, #0
 80094b6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80094b8:	2200      	movs	r2, #0
 80094ba:	2100      	movs	r1, #0
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f000 fb5d 	bl	8009b7c <USBH_CtlReq>
 80094c2:	4603      	mov	r3, r0
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3708      	adds	r7, #8
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}

080094cc <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b082      	sub	sp, #8
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
 80094d4:	460b      	mov	r3, r1
 80094d6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	789b      	ldrb	r3, [r3, #2]
 80094dc:	2b01      	cmp	r3, #1
 80094de:	d10f      	bne.n	8009500 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2200      	movs	r2, #0
 80094e4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2203      	movs	r2, #3
 80094ea:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80094ec:	78fb      	ldrb	r3, [r7, #3]
 80094ee:	b29a      	uxth	r2, r3
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2200      	movs	r2, #0
 80094f8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2200      	movs	r2, #0
 80094fe:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009500:	2200      	movs	r2, #0
 8009502:	2100      	movs	r1, #0
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f000 fb39 	bl	8009b7c <USBH_CtlReq>
 800950a:	4603      	mov	r3, r0
}
 800950c:	4618      	mov	r0, r3
 800950e:	3708      	adds	r7, #8
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}

08009514 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b082      	sub	sp, #8
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
 800951c:	460b      	mov	r3, r1
 800951e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	789b      	ldrb	r3, [r3, #2]
 8009524:	2b01      	cmp	r3, #1
 8009526:	d10f      	bne.n	8009548 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2202      	movs	r2, #2
 800952c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2201      	movs	r2, #1
 8009532:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2200      	movs	r2, #0
 8009538:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800953a:	78fb      	ldrb	r3, [r7, #3]
 800953c:	b29a      	uxth	r2, r3
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2200      	movs	r2, #0
 8009546:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009548:	2200      	movs	r2, #0
 800954a:	2100      	movs	r1, #0
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f000 fb15 	bl	8009b7c <USBH_CtlReq>
 8009552:	4603      	mov	r3, r0
}
 8009554:	4618      	mov	r0, r3
 8009556:	3708      	adds	r7, #8
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}

0800955c <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800955c:	b480      	push	{r7}
 800955e:	b087      	sub	sp, #28
 8009560:	af00      	add	r7, sp, #0
 8009562:	60f8      	str	r0, [r7, #12]
 8009564:	60b9      	str	r1, [r7, #8]
 8009566:	4613      	mov	r3, r2
 8009568:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8009570:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8009572:	2300      	movs	r3, #0
 8009574:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d101      	bne.n	8009580 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800957c:	2302      	movs	r3, #2
 800957e:	e094      	b.n	80096aa <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	781a      	ldrb	r2, [r3, #0]
 8009584:	693b      	ldr	r3, [r7, #16]
 8009586:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	785a      	ldrb	r2, [r3, #1]
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	3302      	adds	r3, #2
 8009594:	781b      	ldrb	r3, [r3, #0]
 8009596:	461a      	mov	r2, r3
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	3303      	adds	r3, #3
 800959c:	781b      	ldrb	r3, [r3, #0]
 800959e:	021b      	lsls	r3, r3, #8
 80095a0:	b29b      	uxth	r3, r3
 80095a2:	4313      	orrs	r3, r2
 80095a4:	b29a      	uxth	r2, r3
 80095a6:	693b      	ldr	r3, [r7, #16]
 80095a8:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	791a      	ldrb	r2, [r3, #4]
 80095ae:	693b      	ldr	r3, [r7, #16]
 80095b0:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	795a      	ldrb	r2, [r3, #5]
 80095b6:	693b      	ldr	r3, [r7, #16]
 80095b8:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	799a      	ldrb	r2, [r3, #6]
 80095be:	693b      	ldr	r3, [r7, #16]
 80095c0:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	79da      	ldrb	r2, [r3, #7]
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d004      	beq.n	80095de <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80095da:	2b01      	cmp	r3, #1
 80095dc:	d11b      	bne.n	8009616 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	79db      	ldrb	r3, [r3, #7]
 80095e2:	2b20      	cmp	r3, #32
 80095e4:	dc0f      	bgt.n	8009606 <USBH_ParseDevDesc+0xaa>
 80095e6:	2b08      	cmp	r3, #8
 80095e8:	db0f      	blt.n	800960a <USBH_ParseDevDesc+0xae>
 80095ea:	3b08      	subs	r3, #8
 80095ec:	4a32      	ldr	r2, [pc, #200]	@ (80096b8 <USBH_ParseDevDesc+0x15c>)
 80095ee:	fa22 f303 	lsr.w	r3, r2, r3
 80095f2:	f003 0301 	and.w	r3, r3, #1
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	bf14      	ite	ne
 80095fa:	2301      	movne	r3, #1
 80095fc:	2300      	moveq	r3, #0
 80095fe:	b2db      	uxtb	r3, r3
 8009600:	2b00      	cmp	r3, #0
 8009602:	d106      	bne.n	8009612 <USBH_ParseDevDesc+0xb6>
 8009604:	e001      	b.n	800960a <USBH_ParseDevDesc+0xae>
 8009606:	2b40      	cmp	r3, #64	@ 0x40
 8009608:	d003      	beq.n	8009612 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800960a:	693b      	ldr	r3, [r7, #16]
 800960c:	2208      	movs	r2, #8
 800960e:	71da      	strb	r2, [r3, #7]
        break;
 8009610:	e000      	b.n	8009614 <USBH_ParseDevDesc+0xb8>
        break;
 8009612:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8009614:	e00e      	b.n	8009634 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800961c:	2b02      	cmp	r3, #2
 800961e:	d107      	bne.n	8009630 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8009620:	693b      	ldr	r3, [r7, #16]
 8009622:	79db      	ldrb	r3, [r3, #7]
 8009624:	2b08      	cmp	r3, #8
 8009626:	d005      	beq.n	8009634 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	2208      	movs	r2, #8
 800962c:	71da      	strb	r2, [r3, #7]
 800962e:	e001      	b.n	8009634 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009630:	2303      	movs	r3, #3
 8009632:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8009634:	88fb      	ldrh	r3, [r7, #6]
 8009636:	2b08      	cmp	r3, #8
 8009638:	d936      	bls.n	80096a8 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	3308      	adds	r3, #8
 800963e:	781b      	ldrb	r3, [r3, #0]
 8009640:	461a      	mov	r2, r3
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	3309      	adds	r3, #9
 8009646:	781b      	ldrb	r3, [r3, #0]
 8009648:	021b      	lsls	r3, r3, #8
 800964a:	b29b      	uxth	r3, r3
 800964c:	4313      	orrs	r3, r2
 800964e:	b29a      	uxth	r2, r3
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	330a      	adds	r3, #10
 8009658:	781b      	ldrb	r3, [r3, #0]
 800965a:	461a      	mov	r2, r3
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	330b      	adds	r3, #11
 8009660:	781b      	ldrb	r3, [r3, #0]
 8009662:	021b      	lsls	r3, r3, #8
 8009664:	b29b      	uxth	r3, r3
 8009666:	4313      	orrs	r3, r2
 8009668:	b29a      	uxth	r2, r3
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	330c      	adds	r3, #12
 8009672:	781b      	ldrb	r3, [r3, #0]
 8009674:	461a      	mov	r2, r3
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	330d      	adds	r3, #13
 800967a:	781b      	ldrb	r3, [r3, #0]
 800967c:	021b      	lsls	r3, r3, #8
 800967e:	b29b      	uxth	r3, r3
 8009680:	4313      	orrs	r3, r2
 8009682:	b29a      	uxth	r2, r3
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	7b9a      	ldrb	r2, [r3, #14]
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	7bda      	ldrb	r2, [r3, #15]
 8009694:	693b      	ldr	r3, [r7, #16]
 8009696:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	7c1a      	ldrb	r2, [r3, #16]
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	7c5a      	ldrb	r2, [r3, #17]
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	745a      	strb	r2, [r3, #17]
  }

  return status;
 80096a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	371c      	adds	r7, #28
 80096ae:	46bd      	mov	sp, r7
 80096b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b4:	4770      	bx	lr
 80096b6:	bf00      	nop
 80096b8:	01000101 	.word	0x01000101

080096bc <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b08c      	sub	sp, #48	@ 0x30
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	60f8      	str	r0, [r7, #12]
 80096c4:	60b9      	str	r1, [r7, #8]
 80096c6:	4613      	mov	r3, r2
 80096c8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80096d0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80096d2:	2300      	movs	r3, #0
 80096d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80096d8:	2300      	movs	r3, #0
 80096da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 80096de:	2300      	movs	r3, #0
 80096e0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d101      	bne.n	80096ee <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 80096ea:	2302      	movs	r3, #2
 80096ec:	e0de      	b.n	80098ac <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80096f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096f4:	781b      	ldrb	r3, [r3, #0]
 80096f6:	2b09      	cmp	r3, #9
 80096f8:	d002      	beq.n	8009700 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80096fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096fc:	2209      	movs	r2, #9
 80096fe:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	781a      	ldrb	r2, [r3, #0]
 8009704:	6a3b      	ldr	r3, [r7, #32]
 8009706:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	785a      	ldrb	r2, [r3, #1]
 800970c:	6a3b      	ldr	r3, [r7, #32]
 800970e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	3302      	adds	r3, #2
 8009714:	781b      	ldrb	r3, [r3, #0]
 8009716:	461a      	mov	r2, r3
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	3303      	adds	r3, #3
 800971c:	781b      	ldrb	r3, [r3, #0]
 800971e:	021b      	lsls	r3, r3, #8
 8009720:	b29b      	uxth	r3, r3
 8009722:	4313      	orrs	r3, r2
 8009724:	b29b      	uxth	r3, r3
 8009726:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800972a:	bf28      	it	cs
 800972c:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8009730:	b29a      	uxth	r2, r3
 8009732:	6a3b      	ldr	r3, [r7, #32]
 8009734:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	791a      	ldrb	r2, [r3, #4]
 800973a:	6a3b      	ldr	r3, [r7, #32]
 800973c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	795a      	ldrb	r2, [r3, #5]
 8009742:	6a3b      	ldr	r3, [r7, #32]
 8009744:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	799a      	ldrb	r2, [r3, #6]
 800974a:	6a3b      	ldr	r3, [r7, #32]
 800974c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	79da      	ldrb	r2, [r3, #7]
 8009752:	6a3b      	ldr	r3, [r7, #32]
 8009754:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	7a1a      	ldrb	r2, [r3, #8]
 800975a:	6a3b      	ldr	r3, [r7, #32]
 800975c:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800975e:	88fb      	ldrh	r3, [r7, #6]
 8009760:	2b09      	cmp	r3, #9
 8009762:	f240 80a1 	bls.w	80098a8 <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 8009766:	2309      	movs	r3, #9
 8009768:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800976a:	2300      	movs	r3, #0
 800976c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800976e:	e085      	b.n	800987c <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009770:	f107 0316 	add.w	r3, r7, #22
 8009774:	4619      	mov	r1, r3
 8009776:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009778:	f000 f9e6 	bl	8009b48 <USBH_GetNextDesc>
 800977c:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800977e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009780:	785b      	ldrb	r3, [r3, #1]
 8009782:	2b04      	cmp	r3, #4
 8009784:	d17a      	bne.n	800987c <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8009786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009788:	781b      	ldrb	r3, [r3, #0]
 800978a:	2b09      	cmp	r3, #9
 800978c:	d002      	beq.n	8009794 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800978e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009790:	2209      	movs	r2, #9
 8009792:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009794:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009798:	221a      	movs	r2, #26
 800979a:	fb02 f303 	mul.w	r3, r2, r3
 800979e:	3308      	adds	r3, #8
 80097a0:	6a3a      	ldr	r2, [r7, #32]
 80097a2:	4413      	add	r3, r2
 80097a4:	3302      	adds	r3, #2
 80097a6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80097a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80097aa:	69f8      	ldr	r0, [r7, #28]
 80097ac:	f000 f882 	bl	80098b4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80097b0:	2300      	movs	r3, #0
 80097b2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80097b6:	2300      	movs	r3, #0
 80097b8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80097ba:	e043      	b.n	8009844 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80097bc:	f107 0316 	add.w	r3, r7, #22
 80097c0:	4619      	mov	r1, r3
 80097c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80097c4:	f000 f9c0 	bl	8009b48 <USBH_GetNextDesc>
 80097c8:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80097ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097cc:	785b      	ldrb	r3, [r3, #1]
 80097ce:	2b05      	cmp	r3, #5
 80097d0:	d138      	bne.n	8009844 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 80097d2:	69fb      	ldr	r3, [r7, #28]
 80097d4:	795b      	ldrb	r3, [r3, #5]
 80097d6:	2b01      	cmp	r3, #1
 80097d8:	d113      	bne.n	8009802 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80097da:	69fb      	ldr	r3, [r7, #28]
 80097dc:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 80097de:	2b02      	cmp	r3, #2
 80097e0:	d003      	beq.n	80097ea <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80097e2:	69fb      	ldr	r3, [r7, #28]
 80097e4:	799b      	ldrb	r3, [r3, #6]
 80097e6:	2b03      	cmp	r3, #3
 80097e8:	d10b      	bne.n	8009802 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80097ea:	69fb      	ldr	r3, [r7, #28]
 80097ec:	79db      	ldrb	r3, [r3, #7]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d10b      	bne.n	800980a <USBH_ParseCfgDesc+0x14e>
 80097f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097f4:	781b      	ldrb	r3, [r3, #0]
 80097f6:	2b09      	cmp	r3, #9
 80097f8:	d007      	beq.n	800980a <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 80097fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097fc:	2209      	movs	r2, #9
 80097fe:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009800:	e003      	b.n	800980a <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8009802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009804:	2207      	movs	r2, #7
 8009806:	701a      	strb	r2, [r3, #0]
 8009808:	e000      	b.n	800980c <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800980a:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800980c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009810:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009814:	3201      	adds	r2, #1
 8009816:	00d2      	lsls	r2, r2, #3
 8009818:	211a      	movs	r1, #26
 800981a:	fb01 f303 	mul.w	r3, r1, r3
 800981e:	4413      	add	r3, r2
 8009820:	3308      	adds	r3, #8
 8009822:	6a3a      	ldr	r2, [r7, #32]
 8009824:	4413      	add	r3, r2
 8009826:	3304      	adds	r3, #4
 8009828:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800982a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800982c:	69b9      	ldr	r1, [r7, #24]
 800982e:	68f8      	ldr	r0, [r7, #12]
 8009830:	f000 f86f 	bl	8009912 <USBH_ParseEPDesc>
 8009834:	4603      	mov	r3, r0
 8009836:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800983a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800983e:	3301      	adds	r3, #1
 8009840:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009844:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009848:	2b01      	cmp	r3, #1
 800984a:	d80a      	bhi.n	8009862 <USBH_ParseCfgDesc+0x1a6>
 800984c:	69fb      	ldr	r3, [r7, #28]
 800984e:	791b      	ldrb	r3, [r3, #4]
 8009850:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009854:	429a      	cmp	r2, r3
 8009856:	d204      	bcs.n	8009862 <USBH_ParseCfgDesc+0x1a6>
 8009858:	6a3b      	ldr	r3, [r7, #32]
 800985a:	885a      	ldrh	r2, [r3, #2]
 800985c:	8afb      	ldrh	r3, [r7, #22]
 800985e:	429a      	cmp	r2, r3
 8009860:	d8ac      	bhi.n	80097bc <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8009862:	69fb      	ldr	r3, [r7, #28]
 8009864:	791b      	ldrb	r3, [r3, #4]
 8009866:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800986a:	429a      	cmp	r2, r3
 800986c:	d201      	bcs.n	8009872 <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 800986e:	2303      	movs	r3, #3
 8009870:	e01c      	b.n	80098ac <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 8009872:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009876:	3301      	adds	r3, #1
 8009878:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800987c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009880:	2b01      	cmp	r3, #1
 8009882:	d805      	bhi.n	8009890 <USBH_ParseCfgDesc+0x1d4>
 8009884:	6a3b      	ldr	r3, [r7, #32]
 8009886:	885a      	ldrh	r2, [r3, #2]
 8009888:	8afb      	ldrh	r3, [r7, #22]
 800988a:	429a      	cmp	r2, r3
 800988c:	f63f af70 	bhi.w	8009770 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8009890:	6a3b      	ldr	r3, [r7, #32]
 8009892:	791b      	ldrb	r3, [r3, #4]
 8009894:	2b02      	cmp	r3, #2
 8009896:	bf28      	it	cs
 8009898:	2302      	movcs	r3, #2
 800989a:	b2db      	uxtb	r3, r3
 800989c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80098a0:	429a      	cmp	r2, r3
 80098a2:	d201      	bcs.n	80098a8 <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 80098a4:	2303      	movs	r3, #3
 80098a6:	e001      	b.n	80098ac <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 80098a8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	3730      	adds	r7, #48	@ 0x30
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}

080098b4 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 80098b4:	b480      	push	{r7}
 80098b6:	b083      	sub	sp, #12
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
 80098bc:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	781a      	ldrb	r2, [r3, #0]
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	785a      	ldrb	r2, [r3, #1]
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	789a      	ldrb	r2, [r3, #2]
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	78da      	ldrb	r2, [r3, #3]
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	791a      	ldrb	r2, [r3, #4]
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	795a      	ldrb	r2, [r3, #5]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	799a      	ldrb	r2, [r3, #6]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	79da      	ldrb	r2, [r3, #7]
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	7a1a      	ldrb	r2, [r3, #8]
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	721a      	strb	r2, [r3, #8]
}
 8009906:	bf00      	nop
 8009908:	370c      	adds	r7, #12
 800990a:	46bd      	mov	sp, r7
 800990c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009910:	4770      	bx	lr

08009912 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8009912:	b480      	push	{r7}
 8009914:	b087      	sub	sp, #28
 8009916:	af00      	add	r7, sp, #0
 8009918:	60f8      	str	r0, [r7, #12]
 800991a:	60b9      	str	r1, [r7, #8]
 800991c:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800991e:	2300      	movs	r3, #0
 8009920:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	781a      	ldrb	r2, [r3, #0]
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	785a      	ldrb	r2, [r3, #1]
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	789a      	ldrb	r2, [r3, #2]
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	78da      	ldrb	r2, [r3, #3]
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	3304      	adds	r3, #4
 8009946:	781b      	ldrb	r3, [r3, #0]
 8009948:	461a      	mov	r2, r3
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	3305      	adds	r3, #5
 800994e:	781b      	ldrb	r3, [r3, #0]
 8009950:	021b      	lsls	r3, r3, #8
 8009952:	b29b      	uxth	r3, r3
 8009954:	4313      	orrs	r3, r2
 8009956:	b29a      	uxth	r2, r3
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	799a      	ldrb	r2, [r3, #6]
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	889b      	ldrh	r3, [r3, #4]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d009      	beq.n	8009980 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009970:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009974:	d804      	bhi.n	8009980 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800997a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800997e:	d901      	bls.n	8009984 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8009980:	2303      	movs	r3, #3
 8009982:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800998a:	2b00      	cmp	r3, #0
 800998c:	d136      	bne.n	80099fc <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800998e:	68bb      	ldr	r3, [r7, #8]
 8009990:	78db      	ldrb	r3, [r3, #3]
 8009992:	f003 0303 	and.w	r3, r3, #3
 8009996:	2b02      	cmp	r3, #2
 8009998:	d108      	bne.n	80099ac <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	889b      	ldrh	r3, [r3, #4]
 800999e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80099a2:	f240 8097 	bls.w	8009ad4 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80099a6:	2303      	movs	r3, #3
 80099a8:	75fb      	strb	r3, [r7, #23]
 80099aa:	e093      	b.n	8009ad4 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	78db      	ldrb	r3, [r3, #3]
 80099b0:	f003 0303 	and.w	r3, r3, #3
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d107      	bne.n	80099c8 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	889b      	ldrh	r3, [r3, #4]
 80099bc:	2b40      	cmp	r3, #64	@ 0x40
 80099be:	f240 8089 	bls.w	8009ad4 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80099c2:	2303      	movs	r3, #3
 80099c4:	75fb      	strb	r3, [r7, #23]
 80099c6:	e085      	b.n	8009ad4 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	78db      	ldrb	r3, [r3, #3]
 80099cc:	f003 0303 	and.w	r3, r3, #3
 80099d0:	2b01      	cmp	r3, #1
 80099d2:	d005      	beq.n	80099e0 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	78db      	ldrb	r3, [r3, #3]
 80099d8:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80099dc:	2b03      	cmp	r3, #3
 80099de:	d10a      	bne.n	80099f6 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	799b      	ldrb	r3, [r3, #6]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d003      	beq.n	80099f0 <USBH_ParseEPDesc+0xde>
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	799b      	ldrb	r3, [r3, #6]
 80099ec:	2b10      	cmp	r3, #16
 80099ee:	d970      	bls.n	8009ad2 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 80099f0:	2303      	movs	r3, #3
 80099f2:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80099f4:	e06d      	b.n	8009ad2 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80099f6:	2303      	movs	r3, #3
 80099f8:	75fb      	strb	r3, [r7, #23]
 80099fa:	e06b      	b.n	8009ad4 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009a02:	2b01      	cmp	r3, #1
 8009a04:	d13c      	bne.n	8009a80 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	78db      	ldrb	r3, [r3, #3]
 8009a0a:	f003 0303 	and.w	r3, r3, #3
 8009a0e:	2b02      	cmp	r3, #2
 8009a10:	d005      	beq.n	8009a1e <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	78db      	ldrb	r3, [r3, #3]
 8009a16:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d106      	bne.n	8009a2c <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	889b      	ldrh	r3, [r3, #4]
 8009a22:	2b40      	cmp	r3, #64	@ 0x40
 8009a24:	d956      	bls.n	8009ad4 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009a26:	2303      	movs	r3, #3
 8009a28:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009a2a:	e053      	b.n	8009ad4 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	78db      	ldrb	r3, [r3, #3]
 8009a30:	f003 0303 	and.w	r3, r3, #3
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	d10e      	bne.n	8009a56 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	799b      	ldrb	r3, [r3, #6]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d007      	beq.n	8009a50 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8009a44:	2b10      	cmp	r3, #16
 8009a46:	d803      	bhi.n	8009a50 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8009a4c:	2b40      	cmp	r3, #64	@ 0x40
 8009a4e:	d941      	bls.n	8009ad4 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009a50:	2303      	movs	r3, #3
 8009a52:	75fb      	strb	r3, [r7, #23]
 8009a54:	e03e      	b.n	8009ad4 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	78db      	ldrb	r3, [r3, #3]
 8009a5a:	f003 0303 	and.w	r3, r3, #3
 8009a5e:	2b03      	cmp	r3, #3
 8009a60:	d10b      	bne.n	8009a7a <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	799b      	ldrb	r3, [r3, #6]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d004      	beq.n	8009a74 <USBH_ParseEPDesc+0x162>
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	889b      	ldrh	r3, [r3, #4]
 8009a6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a72:	d32f      	bcc.n	8009ad4 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009a74:	2303      	movs	r3, #3
 8009a76:	75fb      	strb	r3, [r7, #23]
 8009a78:	e02c      	b.n	8009ad4 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009a7a:	2303      	movs	r3, #3
 8009a7c:	75fb      	strb	r3, [r7, #23]
 8009a7e:	e029      	b.n	8009ad4 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009a86:	2b02      	cmp	r3, #2
 8009a88:	d120      	bne.n	8009acc <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	78db      	ldrb	r3, [r3, #3]
 8009a8e:	f003 0303 	and.w	r3, r3, #3
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d106      	bne.n	8009aa4 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	889b      	ldrh	r3, [r3, #4]
 8009a9a:	2b08      	cmp	r3, #8
 8009a9c:	d01a      	beq.n	8009ad4 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009a9e:	2303      	movs	r3, #3
 8009aa0:	75fb      	strb	r3, [r7, #23]
 8009aa2:	e017      	b.n	8009ad4 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	78db      	ldrb	r3, [r3, #3]
 8009aa8:	f003 0303 	and.w	r3, r3, #3
 8009aac:	2b03      	cmp	r3, #3
 8009aae:	d10a      	bne.n	8009ac6 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	799b      	ldrb	r3, [r3, #6]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d003      	beq.n	8009ac0 <USBH_ParseEPDesc+0x1ae>
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	889b      	ldrh	r3, [r3, #4]
 8009abc:	2b08      	cmp	r3, #8
 8009abe:	d909      	bls.n	8009ad4 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009ac0:	2303      	movs	r3, #3
 8009ac2:	75fb      	strb	r3, [r7, #23]
 8009ac4:	e006      	b.n	8009ad4 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009ac6:	2303      	movs	r3, #3
 8009ac8:	75fb      	strb	r3, [r7, #23]
 8009aca:	e003      	b.n	8009ad4 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009acc:	2303      	movs	r3, #3
 8009ace:	75fb      	strb	r3, [r7, #23]
 8009ad0:	e000      	b.n	8009ad4 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009ad2:	bf00      	nop
  }

  return status;
 8009ad4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	371c      	adds	r7, #28
 8009ada:	46bd      	mov	sp, r7
 8009adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae0:	4770      	bx	lr

08009ae2 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009ae2:	b480      	push	{r7}
 8009ae4:	b087      	sub	sp, #28
 8009ae6:	af00      	add	r7, sp, #0
 8009ae8:	60f8      	str	r0, [r7, #12]
 8009aea:	60b9      	str	r1, [r7, #8]
 8009aec:	4613      	mov	r3, r2
 8009aee:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	3301      	adds	r3, #1
 8009af4:	781b      	ldrb	r3, [r3, #0]
 8009af6:	2b03      	cmp	r3, #3
 8009af8:	d120      	bne.n	8009b3c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	781b      	ldrb	r3, [r3, #0]
 8009afe:	1e9a      	subs	r2, r3, #2
 8009b00:	88fb      	ldrh	r3, [r7, #6]
 8009b02:	4293      	cmp	r3, r2
 8009b04:	bf28      	it	cs
 8009b06:	4613      	movcs	r3, r2
 8009b08:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	3302      	adds	r3, #2
 8009b0e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009b10:	2300      	movs	r3, #0
 8009b12:	82fb      	strh	r3, [r7, #22]
 8009b14:	e00b      	b.n	8009b2e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009b16:	8afb      	ldrh	r3, [r7, #22]
 8009b18:	68fa      	ldr	r2, [r7, #12]
 8009b1a:	4413      	add	r3, r2
 8009b1c:	781a      	ldrb	r2, [r3, #0]
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	3301      	adds	r3, #1
 8009b26:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009b28:	8afb      	ldrh	r3, [r7, #22]
 8009b2a:	3302      	adds	r3, #2
 8009b2c:	82fb      	strh	r3, [r7, #22]
 8009b2e:	8afa      	ldrh	r2, [r7, #22]
 8009b30:	8abb      	ldrh	r3, [r7, #20]
 8009b32:	429a      	cmp	r2, r3
 8009b34:	d3ef      	bcc.n	8009b16 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	701a      	strb	r2, [r3, #0]
  }
}
 8009b3c:	bf00      	nop
 8009b3e:	371c      	adds	r7, #28
 8009b40:	46bd      	mov	sp, r7
 8009b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b46:	4770      	bx	lr

08009b48 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009b48:	b480      	push	{r7}
 8009b4a:	b085      	sub	sp, #20
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
 8009b50:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	881b      	ldrh	r3, [r3, #0]
 8009b56:	687a      	ldr	r2, [r7, #4]
 8009b58:	7812      	ldrb	r2, [r2, #0]
 8009b5a:	4413      	add	r3, r2
 8009b5c:	b29a      	uxth	r2, r3
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	781b      	ldrb	r3, [r3, #0]
 8009b66:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	4413      	add	r3, r2
 8009b6c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009b6e:	68fb      	ldr	r3, [r7, #12]
}
 8009b70:	4618      	mov	r0, r3
 8009b72:	3714      	adds	r7, #20
 8009b74:	46bd      	mov	sp, r7
 8009b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7a:	4770      	bx	lr

08009b7c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b086      	sub	sp, #24
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	60f8      	str	r0, [r7, #12]
 8009b84:	60b9      	str	r1, [r7, #8]
 8009b86:	4613      	mov	r3, r2
 8009b88:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009b8a:	2301      	movs	r3, #1
 8009b8c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	789b      	ldrb	r3, [r3, #2]
 8009b92:	2b01      	cmp	r3, #1
 8009b94:	d002      	beq.n	8009b9c <USBH_CtlReq+0x20>
 8009b96:	2b02      	cmp	r3, #2
 8009b98:	d00f      	beq.n	8009bba <USBH_CtlReq+0x3e>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 8009b9a:	e027      	b.n	8009bec <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	68ba      	ldr	r2, [r7, #8]
 8009ba0:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	88fa      	ldrh	r2, [r7, #6]
 8009ba6:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	2201      	movs	r2, #1
 8009bac:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	2202      	movs	r2, #2
 8009bb2:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	75fb      	strb	r3, [r7, #23]
      break;
 8009bb8:	e018      	b.n	8009bec <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009bba:	68f8      	ldr	r0, [r7, #12]
 8009bbc:	f000 f81c 	bl	8009bf8 <USBH_HandleControl>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009bc4:	7dfb      	ldrb	r3, [r7, #23]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d002      	beq.n	8009bd0 <USBH_CtlReq+0x54>
 8009bca:	7dfb      	ldrb	r3, [r7, #23]
 8009bcc:	2b03      	cmp	r3, #3
 8009bce:	d106      	bne.n	8009bde <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	2201      	movs	r2, #1
 8009bd4:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	761a      	strb	r2, [r3, #24]
      break;
 8009bdc:	e005      	b.n	8009bea <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009bde:	7dfb      	ldrb	r3, [r7, #23]
 8009be0:	2b02      	cmp	r3, #2
 8009be2:	d102      	bne.n	8009bea <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	2201      	movs	r2, #1
 8009be8:	709a      	strb	r2, [r3, #2]
      break;
 8009bea:	bf00      	nop
  }
  return status;
 8009bec:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	3718      	adds	r7, #24
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}
	...

08009bf8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b086      	sub	sp, #24
 8009bfc:	af02      	add	r7, sp, #8
 8009bfe:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009c00:	2301      	movs	r3, #1
 8009c02:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009c04:	2300      	movs	r3, #0
 8009c06:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	7e1b      	ldrb	r3, [r3, #24]
 8009c0c:	3b01      	subs	r3, #1
 8009c0e:	2b0a      	cmp	r3, #10
 8009c10:	f200 8157 	bhi.w	8009ec2 <USBH_HandleControl+0x2ca>
 8009c14:	a201      	add	r2, pc, #4	@ (adr r2, 8009c1c <USBH_HandleControl+0x24>)
 8009c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c1a:	bf00      	nop
 8009c1c:	08009c49 	.word	0x08009c49
 8009c20:	08009c63 	.word	0x08009c63
 8009c24:	08009ccd 	.word	0x08009ccd
 8009c28:	08009cf3 	.word	0x08009cf3
 8009c2c:	08009d2d 	.word	0x08009d2d
 8009c30:	08009d57 	.word	0x08009d57
 8009c34:	08009da9 	.word	0x08009da9
 8009c38:	08009dcb 	.word	0x08009dcb
 8009c3c:	08009e07 	.word	0x08009e07
 8009c40:	08009e2d 	.word	0x08009e2d
 8009c44:	08009e6b 	.word	0x08009e6b
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f103 0110 	add.w	r1, r3, #16
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	795b      	ldrb	r3, [r3, #5]
 8009c52:	461a      	mov	r2, r3
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f000 f945 	bl	8009ee4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2202      	movs	r2, #2
 8009c5e:	761a      	strb	r2, [r3, #24]
      break;
 8009c60:	e13a      	b.n	8009ed8 <USBH_HandleControl+0x2e0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	795b      	ldrb	r3, [r3, #5]
 8009c66:	4619      	mov	r1, r3
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f000 fcc7 	bl	800a5fc <USBH_LL_GetURBState>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009c72:	7bbb      	ldrb	r3, [r7, #14]
 8009c74:	2b01      	cmp	r3, #1
 8009c76:	d11e      	bne.n	8009cb6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	7c1b      	ldrb	r3, [r3, #16]
 8009c7c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009c80:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	8adb      	ldrh	r3, [r3, #22]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d00a      	beq.n	8009ca0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009c8a:	7b7b      	ldrb	r3, [r7, #13]
 8009c8c:	2b80      	cmp	r3, #128	@ 0x80
 8009c8e:	d103      	bne.n	8009c98 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2203      	movs	r2, #3
 8009c94:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8009c96:	e116      	b.n	8009ec6 <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_DATA_OUT;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2205      	movs	r2, #5
 8009c9c:	761a      	strb	r2, [r3, #24]
      break;
 8009c9e:	e112      	b.n	8009ec6 <USBH_HandleControl+0x2ce>
          if (direction == USB_D2H)
 8009ca0:	7b7b      	ldrb	r3, [r7, #13]
 8009ca2:	2b80      	cmp	r3, #128	@ 0x80
 8009ca4:	d103      	bne.n	8009cae <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2209      	movs	r2, #9
 8009caa:	761a      	strb	r2, [r3, #24]
      break;
 8009cac:	e10b      	b.n	8009ec6 <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_STATUS_IN;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2207      	movs	r2, #7
 8009cb2:	761a      	strb	r2, [r3, #24]
      break;
 8009cb4:	e107      	b.n	8009ec6 <USBH_HandleControl+0x2ce>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009cb6:	7bbb      	ldrb	r3, [r7, #14]
 8009cb8:	2b04      	cmp	r3, #4
 8009cba:	d003      	beq.n	8009cc4 <USBH_HandleControl+0xcc>
 8009cbc:	7bbb      	ldrb	r3, [r7, #14]
 8009cbe:	2b02      	cmp	r3, #2
 8009cc0:	f040 8101 	bne.w	8009ec6 <USBH_HandleControl+0x2ce>
          phost->Control.state = CTRL_ERROR;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	220b      	movs	r2, #11
 8009cc8:	761a      	strb	r2, [r3, #24]
      break;
 8009cca:	e0fc      	b.n	8009ec6 <USBH_HandleControl+0x2ce>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009cd2:	b29a      	uxth	r2, r3
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	6899      	ldr	r1, [r3, #8]
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	899a      	ldrh	r2, [r3, #12]
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	791b      	ldrb	r3, [r3, #4]
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f000 f93c 	bl	8009f62 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2204      	movs	r2, #4
 8009cee:	761a      	strb	r2, [r3, #24]
      break;
 8009cf0:	e0f2      	b.n	8009ed8 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	791b      	ldrb	r3, [r3, #4]
 8009cf6:	4619      	mov	r1, r3
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f000 fc7f 	bl	800a5fc <USBH_LL_GetURBState>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009d02:	7bbb      	ldrb	r3, [r7, #14]
 8009d04:	2b01      	cmp	r3, #1
 8009d06:	d103      	bne.n	8009d10 <USBH_HandleControl+0x118>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2209      	movs	r2, #9
 8009d0c:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8009d0e:	e0dc      	b.n	8009eca <USBH_HandleControl+0x2d2>
      else if (URB_Status == USBH_URB_STALL)
 8009d10:	7bbb      	ldrb	r3, [r7, #14]
 8009d12:	2b05      	cmp	r3, #5
 8009d14:	d102      	bne.n	8009d1c <USBH_HandleControl+0x124>
        status = USBH_NOT_SUPPORTED;
 8009d16:	2303      	movs	r3, #3
 8009d18:	73fb      	strb	r3, [r7, #15]
      break;
 8009d1a:	e0d6      	b.n	8009eca <USBH_HandleControl+0x2d2>
        if (URB_Status == USBH_URB_ERROR)
 8009d1c:	7bbb      	ldrb	r3, [r7, #14]
 8009d1e:	2b04      	cmp	r3, #4
 8009d20:	f040 80d3 	bne.w	8009eca <USBH_HandleControl+0x2d2>
          phost->Control.state = CTRL_ERROR;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	220b      	movs	r2, #11
 8009d28:	761a      	strb	r2, [r3, #24]
      break;
 8009d2a:	e0ce      	b.n	8009eca <USBH_HandleControl+0x2d2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6899      	ldr	r1, [r3, #8]
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	899a      	ldrh	r2, [r3, #12]
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	795b      	ldrb	r3, [r3, #5]
 8009d38:	2001      	movs	r0, #1
 8009d3a:	9000      	str	r0, [sp, #0]
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	f000 f8eb 	bl	8009f18 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009d48:	b29a      	uxth	r2, r3
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2206      	movs	r2, #6
 8009d52:	761a      	strb	r2, [r3, #24]
      break;
 8009d54:	e0c0      	b.n	8009ed8 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	795b      	ldrb	r3, [r3, #5]
 8009d5a:	4619      	mov	r1, r3
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f000 fc4d 	bl	800a5fc <USBH_LL_GetURBState>
 8009d62:	4603      	mov	r3, r0
 8009d64:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009d66:	7bbb      	ldrb	r3, [r7, #14]
 8009d68:	2b01      	cmp	r3, #1
 8009d6a:	d103      	bne.n	8009d74 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2207      	movs	r2, #7
 8009d70:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8009d72:	e0ac      	b.n	8009ece <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_STALL)
 8009d74:	7bbb      	ldrb	r3, [r7, #14]
 8009d76:	2b05      	cmp	r3, #5
 8009d78:	d105      	bne.n	8009d86 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	220c      	movs	r2, #12
 8009d7e:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009d80:	2303      	movs	r3, #3
 8009d82:	73fb      	strb	r3, [r7, #15]
      break;
 8009d84:	e0a3      	b.n	8009ece <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009d86:	7bbb      	ldrb	r3, [r7, #14]
 8009d88:	2b02      	cmp	r3, #2
 8009d8a:	d103      	bne.n	8009d94 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2205      	movs	r2, #5
 8009d90:	761a      	strb	r2, [r3, #24]
      break;
 8009d92:	e09c      	b.n	8009ece <USBH_HandleControl+0x2d6>
        if (URB_Status == USBH_URB_ERROR)
 8009d94:	7bbb      	ldrb	r3, [r7, #14]
 8009d96:	2b04      	cmp	r3, #4
 8009d98:	f040 8099 	bne.w	8009ece <USBH_HandleControl+0x2d6>
          phost->Control.state = CTRL_ERROR;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	220b      	movs	r2, #11
 8009da0:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009da2:	2302      	movs	r3, #2
 8009da4:	73fb      	strb	r3, [r7, #15]
      break;
 8009da6:	e092      	b.n	8009ece <USBH_HandleControl+0x2d6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	791b      	ldrb	r3, [r3, #4]
 8009dac:	2200      	movs	r2, #0
 8009dae:	2100      	movs	r1, #0
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f000 f8d6 	bl	8009f62 <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009dbc:	b29a      	uxth	r2, r3
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2208      	movs	r2, #8
 8009dc6:	761a      	strb	r2, [r3, #24]

      break;
 8009dc8:	e086      	b.n	8009ed8 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	791b      	ldrb	r3, [r3, #4]
 8009dce:	4619      	mov	r1, r3
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f000 fc13 	bl	800a5fc <USBH_LL_GetURBState>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009dda:	7bbb      	ldrb	r3, [r7, #14]
 8009ddc:	2b01      	cmp	r3, #1
 8009dde:	d105      	bne.n	8009dec <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	220d      	movs	r2, #13
 8009de4:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009de6:	2300      	movs	r3, #0
 8009de8:	73fb      	strb	r3, [r7, #15]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8009dea:	e072      	b.n	8009ed2 <USBH_HandleControl+0x2da>
      else if (URB_Status == USBH_URB_ERROR)
 8009dec:	7bbb      	ldrb	r3, [r7, #14]
 8009dee:	2b04      	cmp	r3, #4
 8009df0:	d103      	bne.n	8009dfa <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	220b      	movs	r2, #11
 8009df6:	761a      	strb	r2, [r3, #24]
      break;
 8009df8:	e06b      	b.n	8009ed2 <USBH_HandleControl+0x2da>
        if (URB_Status == USBH_URB_STALL)
 8009dfa:	7bbb      	ldrb	r3, [r7, #14]
 8009dfc:	2b05      	cmp	r3, #5
 8009dfe:	d168      	bne.n	8009ed2 <USBH_HandleControl+0x2da>
          status = USBH_NOT_SUPPORTED;
 8009e00:	2303      	movs	r3, #3
 8009e02:	73fb      	strb	r3, [r7, #15]
      break;
 8009e04:	e065      	b.n	8009ed2 <USBH_HandleControl+0x2da>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	795b      	ldrb	r3, [r3, #5]
 8009e0a:	2201      	movs	r2, #1
 8009e0c:	9200      	str	r2, [sp, #0]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	2100      	movs	r1, #0
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f000 f880 	bl	8009f18 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009e1e:	b29a      	uxth	r2, r3
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	220a      	movs	r2, #10
 8009e28:	761a      	strb	r2, [r3, #24]
      break;
 8009e2a:	e055      	b.n	8009ed8 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	795b      	ldrb	r3, [r3, #5]
 8009e30:	4619      	mov	r1, r3
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	f000 fbe2 	bl	800a5fc <USBH_LL_GetURBState>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009e3c:	7bbb      	ldrb	r3, [r7, #14]
 8009e3e:	2b01      	cmp	r3, #1
 8009e40:	d105      	bne.n	8009e4e <USBH_HandleControl+0x256>
      {
        status = USBH_OK;
 8009e42:	2300      	movs	r3, #0
 8009e44:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	220d      	movs	r2, #13
 8009e4a:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8009e4c:	e043      	b.n	8009ed6 <USBH_HandleControl+0x2de>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009e4e:	7bbb      	ldrb	r3, [r7, #14]
 8009e50:	2b02      	cmp	r3, #2
 8009e52:	d103      	bne.n	8009e5c <USBH_HandleControl+0x264>
        phost->Control.state = CTRL_STATUS_OUT;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2209      	movs	r2, #9
 8009e58:	761a      	strb	r2, [r3, #24]
      break;
 8009e5a:	e03c      	b.n	8009ed6 <USBH_HandleControl+0x2de>
        if (URB_Status == USBH_URB_ERROR)
 8009e5c:	7bbb      	ldrb	r3, [r7, #14]
 8009e5e:	2b04      	cmp	r3, #4
 8009e60:	d139      	bne.n	8009ed6 <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	220b      	movs	r2, #11
 8009e66:	761a      	strb	r2, [r3, #24]
      break;
 8009e68:	e035      	b.n	8009ed6 <USBH_HandleControl+0x2de>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	7e5b      	ldrb	r3, [r3, #25]
 8009e6e:	3301      	adds	r3, #1
 8009e70:	b2da      	uxtb	r2, r3
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	765a      	strb	r2, [r3, #25]
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	7e5b      	ldrb	r3, [r3, #25]
 8009e7a:	2b02      	cmp	r3, #2
 8009e7c:	d806      	bhi.n	8009e8c <USBH_HandleControl+0x294>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2201      	movs	r2, #1
 8009e82:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2201      	movs	r2, #1
 8009e88:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009e8a:	e025      	b.n	8009ed8 <USBH_HandleControl+0x2e0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009e92:	2106      	movs	r1, #6
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	795b      	ldrb	r3, [r3, #5]
 8009ea2:	4619      	mov	r1, r3
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f000 f90d 	bl	800a0c4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	791b      	ldrb	r3, [r3, #4]
 8009eae:	4619      	mov	r1, r3
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f000 f907 	bl	800a0c4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2200      	movs	r2, #0
 8009eba:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009ebc:	2302      	movs	r3, #2
 8009ebe:	73fb      	strb	r3, [r7, #15]
      break;
 8009ec0:	e00a      	b.n	8009ed8 <USBH_HandleControl+0x2e0>

    default:
      break;
 8009ec2:	bf00      	nop
 8009ec4:	e008      	b.n	8009ed8 <USBH_HandleControl+0x2e0>
      break;
 8009ec6:	bf00      	nop
 8009ec8:	e006      	b.n	8009ed8 <USBH_HandleControl+0x2e0>
      break;
 8009eca:	bf00      	nop
 8009ecc:	e004      	b.n	8009ed8 <USBH_HandleControl+0x2e0>
      break;
 8009ece:	bf00      	nop
 8009ed0:	e002      	b.n	8009ed8 <USBH_HandleControl+0x2e0>
      break;
 8009ed2:	bf00      	nop
 8009ed4:	e000      	b.n	8009ed8 <USBH_HandleControl+0x2e0>
      break;
 8009ed6:	bf00      	nop
  }

  return status;
 8009ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3710      	adds	r7, #16
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}
 8009ee2:	bf00      	nop

08009ee4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b088      	sub	sp, #32
 8009ee8:	af04      	add	r7, sp, #16
 8009eea:	60f8      	str	r0, [r7, #12]
 8009eec:	60b9      	str	r1, [r7, #8]
 8009eee:	4613      	mov	r3, r2
 8009ef0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009ef2:	79f9      	ldrb	r1, [r7, #7]
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	9303      	str	r3, [sp, #12]
 8009ef8:	2308      	movs	r3, #8
 8009efa:	9302      	str	r3, [sp, #8]
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	9301      	str	r3, [sp, #4]
 8009f00:	2300      	movs	r3, #0
 8009f02:	9300      	str	r3, [sp, #0]
 8009f04:	2300      	movs	r3, #0
 8009f06:	2200      	movs	r2, #0
 8009f08:	68f8      	ldr	r0, [r7, #12]
 8009f0a:	f000 fb46 	bl	800a59a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009f0e:	2300      	movs	r3, #0
}
 8009f10:	4618      	mov	r0, r3
 8009f12:	3710      	adds	r7, #16
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}

08009f18 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b088      	sub	sp, #32
 8009f1c:	af04      	add	r7, sp, #16
 8009f1e:	60f8      	str	r0, [r7, #12]
 8009f20:	60b9      	str	r1, [r7, #8]
 8009f22:	4611      	mov	r1, r2
 8009f24:	461a      	mov	r2, r3
 8009f26:	460b      	mov	r3, r1
 8009f28:	80fb      	strh	r3, [r7, #6]
 8009f2a:	4613      	mov	r3, r2
 8009f2c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d001      	beq.n	8009f3c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009f3c:	7979      	ldrb	r1, [r7, #5]
 8009f3e:	7e3b      	ldrb	r3, [r7, #24]
 8009f40:	9303      	str	r3, [sp, #12]
 8009f42:	88fb      	ldrh	r3, [r7, #6]
 8009f44:	9302      	str	r3, [sp, #8]
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	9301      	str	r3, [sp, #4]
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	9300      	str	r3, [sp, #0]
 8009f4e:	2300      	movs	r3, #0
 8009f50:	2200      	movs	r2, #0
 8009f52:	68f8      	ldr	r0, [r7, #12]
 8009f54:	f000 fb21 	bl	800a59a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009f58:	2300      	movs	r3, #0
}
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	3710      	adds	r7, #16
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}

08009f62 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009f62:	b580      	push	{r7, lr}
 8009f64:	b088      	sub	sp, #32
 8009f66:	af04      	add	r7, sp, #16
 8009f68:	60f8      	str	r0, [r7, #12]
 8009f6a:	60b9      	str	r1, [r7, #8]
 8009f6c:	4611      	mov	r1, r2
 8009f6e:	461a      	mov	r2, r3
 8009f70:	460b      	mov	r3, r1
 8009f72:	80fb      	strh	r3, [r7, #6]
 8009f74:	4613      	mov	r3, r2
 8009f76:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009f78:	7979      	ldrb	r1, [r7, #5]
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	9303      	str	r3, [sp, #12]
 8009f7e:	88fb      	ldrh	r3, [r7, #6]
 8009f80:	9302      	str	r3, [sp, #8]
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	9301      	str	r3, [sp, #4]
 8009f86:	2301      	movs	r3, #1
 8009f88:	9300      	str	r3, [sp, #0]
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	2201      	movs	r2, #1
 8009f8e:	68f8      	ldr	r0, [r7, #12]
 8009f90:	f000 fb03 	bl	800a59a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009f94:	2300      	movs	r3, #0

}
 8009f96:	4618      	mov	r0, r3
 8009f98:	3710      	adds	r7, #16
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}

08009f9e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009f9e:	b580      	push	{r7, lr}
 8009fa0:	b088      	sub	sp, #32
 8009fa2:	af04      	add	r7, sp, #16
 8009fa4:	60f8      	str	r0, [r7, #12]
 8009fa6:	60b9      	str	r1, [r7, #8]
 8009fa8:	4611      	mov	r1, r2
 8009faa:	461a      	mov	r2, r3
 8009fac:	460b      	mov	r3, r1
 8009fae:	80fb      	strh	r3, [r7, #6]
 8009fb0:	4613      	mov	r3, r2
 8009fb2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d001      	beq.n	8009fc2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009fc2:	7979      	ldrb	r1, [r7, #5]
 8009fc4:	7e3b      	ldrb	r3, [r7, #24]
 8009fc6:	9303      	str	r3, [sp, #12]
 8009fc8:	88fb      	ldrh	r3, [r7, #6]
 8009fca:	9302      	str	r3, [sp, #8]
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	9301      	str	r3, [sp, #4]
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	9300      	str	r3, [sp, #0]
 8009fd4:	2302      	movs	r3, #2
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	68f8      	ldr	r0, [r7, #12]
 8009fda:	f000 fade 	bl	800a59a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009fde:	2300      	movs	r3, #0
}
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	3710      	adds	r7, #16
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bd80      	pop	{r7, pc}

08009fe8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b088      	sub	sp, #32
 8009fec:	af04      	add	r7, sp, #16
 8009fee:	60f8      	str	r0, [r7, #12]
 8009ff0:	60b9      	str	r1, [r7, #8]
 8009ff2:	4611      	mov	r1, r2
 8009ff4:	461a      	mov	r2, r3
 8009ff6:	460b      	mov	r3, r1
 8009ff8:	80fb      	strh	r3, [r7, #6]
 8009ffa:	4613      	mov	r3, r2
 8009ffc:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009ffe:	7979      	ldrb	r1, [r7, #5]
 800a000:	2300      	movs	r3, #0
 800a002:	9303      	str	r3, [sp, #12]
 800a004:	88fb      	ldrh	r3, [r7, #6]
 800a006:	9302      	str	r3, [sp, #8]
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	9301      	str	r3, [sp, #4]
 800a00c:	2301      	movs	r3, #1
 800a00e:	9300      	str	r3, [sp, #0]
 800a010:	2302      	movs	r3, #2
 800a012:	2201      	movs	r2, #1
 800a014:	68f8      	ldr	r0, [r7, #12]
 800a016:	f000 fac0 	bl	800a59a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a01a:	2300      	movs	r3, #0
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	3710      	adds	r7, #16
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}

0800a024 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b086      	sub	sp, #24
 800a028:	af04      	add	r7, sp, #16
 800a02a:	6078      	str	r0, [r7, #4]
 800a02c:	4608      	mov	r0, r1
 800a02e:	4611      	mov	r1, r2
 800a030:	461a      	mov	r2, r3
 800a032:	4603      	mov	r3, r0
 800a034:	70fb      	strb	r3, [r7, #3]
 800a036:	460b      	mov	r3, r1
 800a038:	70bb      	strb	r3, [r7, #2]
 800a03a:	4613      	mov	r3, r2
 800a03c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a03e:	7878      	ldrb	r0, [r7, #1]
 800a040:	78ba      	ldrb	r2, [r7, #2]
 800a042:	78f9      	ldrb	r1, [r7, #3]
 800a044:	8b3b      	ldrh	r3, [r7, #24]
 800a046:	9302      	str	r3, [sp, #8]
 800a048:	7d3b      	ldrb	r3, [r7, #20]
 800a04a:	9301      	str	r3, [sp, #4]
 800a04c:	7c3b      	ldrb	r3, [r7, #16]
 800a04e:	9300      	str	r3, [sp, #0]
 800a050:	4603      	mov	r3, r0
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f000 fa53 	bl	800a4fe <USBH_LL_OpenPipe>

  return USBH_OK;
 800a058:	2300      	movs	r3, #0
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	3708      	adds	r7, #8
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}

0800a062 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a062:	b580      	push	{r7, lr}
 800a064:	b082      	sub	sp, #8
 800a066:	af00      	add	r7, sp, #0
 800a068:	6078      	str	r0, [r7, #4]
 800a06a:	460b      	mov	r3, r1
 800a06c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a06e:	78fb      	ldrb	r3, [r7, #3]
 800a070:	4619      	mov	r1, r3
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f000 fa72 	bl	800a55c <USBH_LL_ClosePipe>

  return USBH_OK;
 800a078:	2300      	movs	r3, #0
}
 800a07a:	4618      	mov	r0, r3
 800a07c:	3708      	adds	r7, #8
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}

0800a082 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a082:	b580      	push	{r7, lr}
 800a084:	b084      	sub	sp, #16
 800a086:	af00      	add	r7, sp, #0
 800a088:	6078      	str	r0, [r7, #4]
 800a08a:	460b      	mov	r3, r1
 800a08c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f000 f836 	bl	800a100 <USBH_GetFreePipe>
 800a094:	4603      	mov	r3, r0
 800a096:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a098:	89fb      	ldrh	r3, [r7, #14]
 800a09a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	d00a      	beq.n	800a0b8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a0a2:	78fa      	ldrb	r2, [r7, #3]
 800a0a4:	89fb      	ldrh	r3, [r7, #14]
 800a0a6:	f003 030f 	and.w	r3, r3, #15
 800a0aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a0ae:	6879      	ldr	r1, [r7, #4]
 800a0b0:	33e0      	adds	r3, #224	@ 0xe0
 800a0b2:	009b      	lsls	r3, r3, #2
 800a0b4:	440b      	add	r3, r1
 800a0b6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a0b8:	89fb      	ldrh	r3, [r7, #14]
 800a0ba:	b2db      	uxtb	r3, r3
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3710      	adds	r7, #16
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}

0800a0c4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b083      	sub	sp, #12
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
 800a0cc:	460b      	mov	r3, r1
 800a0ce:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a0d0:	78fb      	ldrb	r3, [r7, #3]
 800a0d2:	2b0f      	cmp	r3, #15
 800a0d4:	d80d      	bhi.n	800a0f2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a0d6:	78fb      	ldrb	r3, [r7, #3]
 800a0d8:	687a      	ldr	r2, [r7, #4]
 800a0da:	33e0      	adds	r3, #224	@ 0xe0
 800a0dc:	009b      	lsls	r3, r3, #2
 800a0de:	4413      	add	r3, r2
 800a0e0:	685a      	ldr	r2, [r3, #4]
 800a0e2:	78fb      	ldrb	r3, [r7, #3]
 800a0e4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a0e8:	6879      	ldr	r1, [r7, #4]
 800a0ea:	33e0      	adds	r3, #224	@ 0xe0
 800a0ec:	009b      	lsls	r3, r3, #2
 800a0ee:	440b      	add	r3, r1
 800a0f0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a0f2:	2300      	movs	r3, #0
}
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	370c      	adds	r7, #12
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fe:	4770      	bx	lr

0800a100 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a100:	b480      	push	{r7}
 800a102:	b085      	sub	sp, #20
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a108:	2300      	movs	r3, #0
 800a10a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a10c:	2300      	movs	r3, #0
 800a10e:	73fb      	strb	r3, [r7, #15]
 800a110:	e00f      	b.n	800a132 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a112:	7bfb      	ldrb	r3, [r7, #15]
 800a114:	687a      	ldr	r2, [r7, #4]
 800a116:	33e0      	adds	r3, #224	@ 0xe0
 800a118:	009b      	lsls	r3, r3, #2
 800a11a:	4413      	add	r3, r2
 800a11c:	685b      	ldr	r3, [r3, #4]
 800a11e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a122:	2b00      	cmp	r3, #0
 800a124:	d102      	bne.n	800a12c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a126:	7bfb      	ldrb	r3, [r7, #15]
 800a128:	b29b      	uxth	r3, r3
 800a12a:	e007      	b.n	800a13c <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a12c:	7bfb      	ldrb	r3, [r7, #15]
 800a12e:	3301      	adds	r3, #1
 800a130:	73fb      	strb	r3, [r7, #15]
 800a132:	7bfb      	ldrb	r3, [r7, #15]
 800a134:	2b0f      	cmp	r3, #15
 800a136:	d9ec      	bls.n	800a112 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a138:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800a13c:	4618      	mov	r0, r3
 800a13e:	3714      	adds	r7, #20
 800a140:	46bd      	mov	sp, r7
 800a142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a146:	4770      	bx	lr

0800a148 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a14c:	2201      	movs	r2, #1
 800a14e:	490e      	ldr	r1, [pc, #56]	@ (800a188 <MX_USB_HOST_Init+0x40>)
 800a150:	480e      	ldr	r0, [pc, #56]	@ (800a18c <MX_USB_HOST_Init+0x44>)
 800a152:	f7fe fb0f 	bl	8008774 <USBH_Init>
 800a156:	4603      	mov	r3, r0
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d001      	beq.n	800a160 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a15c:	f7f6 fe94 	bl	8000e88 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a160:	490b      	ldr	r1, [pc, #44]	@ (800a190 <MX_USB_HOST_Init+0x48>)
 800a162:	480a      	ldr	r0, [pc, #40]	@ (800a18c <MX_USB_HOST_Init+0x44>)
 800a164:	f7fe fbb1 	bl	80088ca <USBH_RegisterClass>
 800a168:	4603      	mov	r3, r0
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d001      	beq.n	800a172 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a16e:	f7f6 fe8b 	bl	8000e88 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a172:	4806      	ldr	r0, [pc, #24]	@ (800a18c <MX_USB_HOST_Init+0x44>)
 800a174:	f7fe fc35 	bl	80089e2 <USBH_Start>
 800a178:	4603      	mov	r3, r0
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d001      	beq.n	800a182 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a17e:	f7f6 fe83 	bl	8000e88 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a182:	bf00      	nop
 800a184:	bd80      	pop	{r7, pc}
 800a186:	bf00      	nop
 800a188:	0800a1a9 	.word	0x0800a1a9
 800a18c:	20000288 	.word	0x20000288
 800a190:	2000000c 	.word	0x2000000c

0800a194 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a198:	4802      	ldr	r0, [pc, #8]	@ (800a1a4 <MX_USB_HOST_Process+0x10>)
 800a19a:	f7fe fc33 	bl	8008a04 <USBH_Process>
}
 800a19e:	bf00      	nop
 800a1a0:	bd80      	pop	{r7, pc}
 800a1a2:	bf00      	nop
 800a1a4:	20000288 	.word	0x20000288

0800a1a8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b083      	sub	sp, #12
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
 800a1b0:	460b      	mov	r3, r1
 800a1b2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a1b4:	78fb      	ldrb	r3, [r7, #3]
 800a1b6:	3b01      	subs	r3, #1
 800a1b8:	2b04      	cmp	r3, #4
 800a1ba:	d819      	bhi.n	800a1f0 <USBH_UserProcess+0x48>
 800a1bc:	a201      	add	r2, pc, #4	@ (adr r2, 800a1c4 <USBH_UserProcess+0x1c>)
 800a1be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1c2:	bf00      	nop
 800a1c4:	0800a1f1 	.word	0x0800a1f1
 800a1c8:	0800a1e1 	.word	0x0800a1e1
 800a1cc:	0800a1f1 	.word	0x0800a1f1
 800a1d0:	0800a1e9 	.word	0x0800a1e9
 800a1d4:	0800a1d9 	.word	0x0800a1d9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a1d8:	4b09      	ldr	r3, [pc, #36]	@ (800a200 <USBH_UserProcess+0x58>)
 800a1da:	2203      	movs	r2, #3
 800a1dc:	701a      	strb	r2, [r3, #0]
  break;
 800a1de:	e008      	b.n	800a1f2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a1e0:	4b07      	ldr	r3, [pc, #28]	@ (800a200 <USBH_UserProcess+0x58>)
 800a1e2:	2202      	movs	r2, #2
 800a1e4:	701a      	strb	r2, [r3, #0]
  break;
 800a1e6:	e004      	b.n	800a1f2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a1e8:	4b05      	ldr	r3, [pc, #20]	@ (800a200 <USBH_UserProcess+0x58>)
 800a1ea:	2201      	movs	r2, #1
 800a1ec:	701a      	strb	r2, [r3, #0]
  break;
 800a1ee:	e000      	b.n	800a1f2 <USBH_UserProcess+0x4a>

  default:
  break;
 800a1f0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a1f2:	bf00      	nop
 800a1f4:	370c      	adds	r7, #12
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fc:	4770      	bx	lr
 800a1fe:	bf00      	nop
 800a200:	20000660 	.word	0x20000660

0800a204 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b08a      	sub	sp, #40	@ 0x28
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a20c:	f107 0314 	add.w	r3, r7, #20
 800a210:	2200      	movs	r2, #0
 800a212:	601a      	str	r2, [r3, #0]
 800a214:	605a      	str	r2, [r3, #4]
 800a216:	609a      	str	r2, [r3, #8]
 800a218:	60da      	str	r2, [r3, #12]
 800a21a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a224:	d147      	bne.n	800a2b6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a226:	2300      	movs	r3, #0
 800a228:	613b      	str	r3, [r7, #16]
 800a22a:	4b25      	ldr	r3, [pc, #148]	@ (800a2c0 <HAL_HCD_MspInit+0xbc>)
 800a22c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a22e:	4a24      	ldr	r2, [pc, #144]	@ (800a2c0 <HAL_HCD_MspInit+0xbc>)
 800a230:	f043 0301 	orr.w	r3, r3, #1
 800a234:	6313      	str	r3, [r2, #48]	@ 0x30
 800a236:	4b22      	ldr	r3, [pc, #136]	@ (800a2c0 <HAL_HCD_MspInit+0xbc>)
 800a238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a23a:	f003 0301 	and.w	r3, r3, #1
 800a23e:	613b      	str	r3, [r7, #16]
 800a240:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a242:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a246:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a248:	2300      	movs	r3, #0
 800a24a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a24c:	2300      	movs	r3, #0
 800a24e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a250:	f107 0314 	add.w	r3, r7, #20
 800a254:	4619      	mov	r1, r3
 800a256:	481b      	ldr	r0, [pc, #108]	@ (800a2c4 <HAL_HCD_MspInit+0xc0>)
 800a258:	f7f7 ffd2 	bl	8002200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a25c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800a260:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a262:	2302      	movs	r3, #2
 800a264:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a266:	2300      	movs	r3, #0
 800a268:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a26a:	2300      	movs	r3, #0
 800a26c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a26e:	230a      	movs	r3, #10
 800a270:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a272:	f107 0314 	add.w	r3, r7, #20
 800a276:	4619      	mov	r1, r3
 800a278:	4812      	ldr	r0, [pc, #72]	@ (800a2c4 <HAL_HCD_MspInit+0xc0>)
 800a27a:	f7f7 ffc1 	bl	8002200 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a27e:	4b10      	ldr	r3, [pc, #64]	@ (800a2c0 <HAL_HCD_MspInit+0xbc>)
 800a280:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a282:	4a0f      	ldr	r2, [pc, #60]	@ (800a2c0 <HAL_HCD_MspInit+0xbc>)
 800a284:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a288:	6353      	str	r3, [r2, #52]	@ 0x34
 800a28a:	2300      	movs	r3, #0
 800a28c:	60fb      	str	r3, [r7, #12]
 800a28e:	4b0c      	ldr	r3, [pc, #48]	@ (800a2c0 <HAL_HCD_MspInit+0xbc>)
 800a290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a292:	4a0b      	ldr	r2, [pc, #44]	@ (800a2c0 <HAL_HCD_MspInit+0xbc>)
 800a294:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a298:	6453      	str	r3, [r2, #68]	@ 0x44
 800a29a:	4b09      	ldr	r3, [pc, #36]	@ (800a2c0 <HAL_HCD_MspInit+0xbc>)
 800a29c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a29e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a2a2:	60fb      	str	r3, [r7, #12]
 800a2a4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	2100      	movs	r1, #0
 800a2aa:	2043      	movs	r0, #67	@ 0x43
 800a2ac:	f7f7 fc87 	bl	8001bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a2b0:	2043      	movs	r0, #67	@ 0x43
 800a2b2:	f7f7 fca0 	bl	8001bf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a2b6:	bf00      	nop
 800a2b8:	3728      	adds	r7, #40	@ 0x28
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}
 800a2be:	bf00      	nop
 800a2c0:	40023800 	.word	0x40023800
 800a2c4:	40020000 	.word	0x40020000

0800a2c8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b082      	sub	sp, #8
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f7fe ff6d 	bl	80091b6 <USBH_LL_IncTimer>
}
 800a2dc:	bf00      	nop
 800a2de:	3708      	adds	r7, #8
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}

0800a2e4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b082      	sub	sp, #8
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	f7fe ffa9 	bl	800924a <USBH_LL_Connect>
}
 800a2f8:	bf00      	nop
 800a2fa:	3708      	adds	r7, #8
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bd80      	pop	{r7, pc}

0800a300 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b082      	sub	sp, #8
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a30e:	4618      	mov	r0, r3
 800a310:	f7fe ffb2 	bl	8009278 <USBH_LL_Disconnect>
}
 800a314:	bf00      	nop
 800a316:	3708      	adds	r7, #8
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}

0800a31c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a31c:	b480      	push	{r7}
 800a31e:	b083      	sub	sp, #12
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
 800a324:	460b      	mov	r3, r1
 800a326:	70fb      	strb	r3, [r7, #3]
 800a328:	4613      	mov	r3, r2
 800a32a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a32c:	bf00      	nop
 800a32e:	370c      	adds	r7, #12
 800a330:	46bd      	mov	sp, r7
 800a332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a336:	4770      	bx	lr

0800a338 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b082      	sub	sp, #8
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a346:	4618      	mov	r0, r3
 800a348:	f7fe ff5f 	bl	800920a <USBH_LL_PortEnabled>
}
 800a34c:	bf00      	nop
 800a34e:	3708      	adds	r7, #8
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}

0800a354 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b082      	sub	sp, #8
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a362:	4618      	mov	r0, r3
 800a364:	f7fe ff5f 	bl	8009226 <USBH_LL_PortDisabled>
}
 800a368:	bf00      	nop
 800a36a:	3708      	adds	r7, #8
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}

0800a370 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b082      	sub	sp, #8
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a37e:	2b01      	cmp	r3, #1
 800a380:	d12a      	bne.n	800a3d8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a382:	4a18      	ldr	r2, [pc, #96]	@ (800a3e4 <USBH_LL_Init+0x74>)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	4a15      	ldr	r2, [pc, #84]	@ (800a3e4 <USBH_LL_Init+0x74>)
 800a38e:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a392:	4b14      	ldr	r3, [pc, #80]	@ (800a3e4 <USBH_LL_Init+0x74>)
 800a394:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a398:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a39a:	4b12      	ldr	r3, [pc, #72]	@ (800a3e4 <USBH_LL_Init+0x74>)
 800a39c:	2208      	movs	r2, #8
 800a39e:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a3a0:	4b10      	ldr	r3, [pc, #64]	@ (800a3e4 <USBH_LL_Init+0x74>)
 800a3a2:	2201      	movs	r2, #1
 800a3a4:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a3a6:	4b0f      	ldr	r3, [pc, #60]	@ (800a3e4 <USBH_LL_Init+0x74>)
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a3ac:	4b0d      	ldr	r3, [pc, #52]	@ (800a3e4 <USBH_LL_Init+0x74>)
 800a3ae:	2202      	movs	r2, #2
 800a3b0:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a3b2:	4b0c      	ldr	r3, [pc, #48]	@ (800a3e4 <USBH_LL_Init+0x74>)
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a3b8:	480a      	ldr	r0, [pc, #40]	@ (800a3e4 <USBH_LL_Init+0x74>)
 800a3ba:	f7f8 f8d6 	bl	800256a <HAL_HCD_Init>
 800a3be:	4603      	mov	r3, r0
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d001      	beq.n	800a3c8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a3c4:	f7f6 fd60 	bl	8000e88 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a3c8:	4806      	ldr	r0, [pc, #24]	@ (800a3e4 <USBH_LL_Init+0x74>)
 800a3ca:	f7f8 fd37 	bl	8002e3c <HAL_HCD_GetCurrentFrame>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	4619      	mov	r1, r3
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f7fe fee0 	bl	8009198 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a3d8:	2300      	movs	r3, #0
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3708      	adds	r7, #8
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}
 800a3e2:	bf00      	nop
 800a3e4:	20000664 	.word	0x20000664

0800a3e8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b084      	sub	sp, #16
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a3fe:	4618      	mov	r0, r3
 800a400:	f7f8 fca4 	bl	8002d4c <HAL_HCD_Start>
 800a404:	4603      	mov	r3, r0
 800a406:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a408:	7bfb      	ldrb	r3, [r7, #15]
 800a40a:	4618      	mov	r0, r3
 800a40c:	f000 f95e 	bl	800a6cc <USBH_Get_USB_Status>
 800a410:	4603      	mov	r3, r0
 800a412:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a414:	7bbb      	ldrb	r3, [r7, #14]
}
 800a416:	4618      	mov	r0, r3
 800a418:	3710      	adds	r7, #16
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}

0800a41e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a41e:	b580      	push	{r7, lr}
 800a420:	b084      	sub	sp, #16
 800a422:	af00      	add	r7, sp, #0
 800a424:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a426:	2300      	movs	r3, #0
 800a428:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a42a:	2300      	movs	r3, #0
 800a42c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a434:	4618      	mov	r0, r3
 800a436:	f7f8 fcac 	bl	8002d92 <HAL_HCD_Stop>
 800a43a:	4603      	mov	r3, r0
 800a43c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a43e:	7bfb      	ldrb	r3, [r7, #15]
 800a440:	4618      	mov	r0, r3
 800a442:	f000 f943 	bl	800a6cc <USBH_Get_USB_Status>
 800a446:	4603      	mov	r3, r0
 800a448:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a44a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	3710      	adds	r7, #16
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}

0800a454 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b084      	sub	sp, #16
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a45c:	2301      	movs	r3, #1
 800a45e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a466:	4618      	mov	r0, r3
 800a468:	f7f8 fcf6 	bl	8002e58 <HAL_HCD_GetCurrentSpeed>
 800a46c:	4603      	mov	r3, r0
 800a46e:	2b02      	cmp	r3, #2
 800a470:	d00c      	beq.n	800a48c <USBH_LL_GetSpeed+0x38>
 800a472:	2b02      	cmp	r3, #2
 800a474:	d80d      	bhi.n	800a492 <USBH_LL_GetSpeed+0x3e>
 800a476:	2b00      	cmp	r3, #0
 800a478:	d002      	beq.n	800a480 <USBH_LL_GetSpeed+0x2c>
 800a47a:	2b01      	cmp	r3, #1
 800a47c:	d003      	beq.n	800a486 <USBH_LL_GetSpeed+0x32>
 800a47e:	e008      	b.n	800a492 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a480:	2300      	movs	r3, #0
 800a482:	73fb      	strb	r3, [r7, #15]
    break;
 800a484:	e008      	b.n	800a498 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a486:	2301      	movs	r3, #1
 800a488:	73fb      	strb	r3, [r7, #15]
    break;
 800a48a:	e005      	b.n	800a498 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a48c:	2302      	movs	r3, #2
 800a48e:	73fb      	strb	r3, [r7, #15]
    break;
 800a490:	e002      	b.n	800a498 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a492:	2301      	movs	r3, #1
 800a494:	73fb      	strb	r3, [r7, #15]
    break;
 800a496:	bf00      	nop
  }
  return  speed;
 800a498:	7bfb      	ldrb	r3, [r7, #15]
}
 800a49a:	4618      	mov	r0, r3
 800a49c:	3710      	adds	r7, #16
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd80      	pop	{r7, pc}

0800a4a2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a4a2:	b580      	push	{r7, lr}
 800a4a4:	b084      	sub	sp, #16
 800a4a6:	af00      	add	r7, sp, #0
 800a4a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	f7f8 fc87 	bl	8002dcc <HAL_HCD_ResetPort>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a4c2:	7bfb      	ldrb	r3, [r7, #15]
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	f000 f901 	bl	800a6cc <USBH_Get_USB_Status>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4ce:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	3710      	adds	r7, #16
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}

0800a4d8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b082      	sub	sp, #8
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
 800a4e0:	460b      	mov	r3, r1
 800a4e2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a4ea:	78fa      	ldrb	r2, [r7, #3]
 800a4ec:	4611      	mov	r1, r2
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f7f8 fc8f 	bl	8002e12 <HAL_HCD_HC_GetXferCount>
 800a4f4:	4603      	mov	r3, r0
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3708      	adds	r7, #8
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}

0800a4fe <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a4fe:	b590      	push	{r4, r7, lr}
 800a500:	b089      	sub	sp, #36	@ 0x24
 800a502:	af04      	add	r7, sp, #16
 800a504:	6078      	str	r0, [r7, #4]
 800a506:	4608      	mov	r0, r1
 800a508:	4611      	mov	r1, r2
 800a50a:	461a      	mov	r2, r3
 800a50c:	4603      	mov	r3, r0
 800a50e:	70fb      	strb	r3, [r7, #3]
 800a510:	460b      	mov	r3, r1
 800a512:	70bb      	strb	r3, [r7, #2]
 800a514:	4613      	mov	r3, r2
 800a516:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a518:	2300      	movs	r3, #0
 800a51a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a51c:	2300      	movs	r3, #0
 800a51e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800a526:	787c      	ldrb	r4, [r7, #1]
 800a528:	78ba      	ldrb	r2, [r7, #2]
 800a52a:	78f9      	ldrb	r1, [r7, #3]
 800a52c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a52e:	9302      	str	r3, [sp, #8]
 800a530:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a534:	9301      	str	r3, [sp, #4]
 800a536:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a53a:	9300      	str	r3, [sp, #0]
 800a53c:	4623      	mov	r3, r4
 800a53e:	f7f8 f87b 	bl	8002638 <HAL_HCD_HC_Init>
 800a542:	4603      	mov	r3, r0
 800a544:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a546:	7bfb      	ldrb	r3, [r7, #15]
 800a548:	4618      	mov	r0, r3
 800a54a:	f000 f8bf 	bl	800a6cc <USBH_Get_USB_Status>
 800a54e:	4603      	mov	r3, r0
 800a550:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a552:	7bbb      	ldrb	r3, [r7, #14]
}
 800a554:	4618      	mov	r0, r3
 800a556:	3714      	adds	r7, #20
 800a558:	46bd      	mov	sp, r7
 800a55a:	bd90      	pop	{r4, r7, pc}

0800a55c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b084      	sub	sp, #16
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
 800a564:	460b      	mov	r3, r1
 800a566:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a568:	2300      	movs	r3, #0
 800a56a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a56c:	2300      	movs	r3, #0
 800a56e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a576:	78fa      	ldrb	r2, [r7, #3]
 800a578:	4611      	mov	r1, r2
 800a57a:	4618      	mov	r0, r3
 800a57c:	f7f8 f914 	bl	80027a8 <HAL_HCD_HC_Halt>
 800a580:	4603      	mov	r3, r0
 800a582:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a584:	7bfb      	ldrb	r3, [r7, #15]
 800a586:	4618      	mov	r0, r3
 800a588:	f000 f8a0 	bl	800a6cc <USBH_Get_USB_Status>
 800a58c:	4603      	mov	r3, r0
 800a58e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a590:	7bbb      	ldrb	r3, [r7, #14]
}
 800a592:	4618      	mov	r0, r3
 800a594:	3710      	adds	r7, #16
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}

0800a59a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a59a:	b590      	push	{r4, r7, lr}
 800a59c:	b089      	sub	sp, #36	@ 0x24
 800a59e:	af04      	add	r7, sp, #16
 800a5a0:	6078      	str	r0, [r7, #4]
 800a5a2:	4608      	mov	r0, r1
 800a5a4:	4611      	mov	r1, r2
 800a5a6:	461a      	mov	r2, r3
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	70fb      	strb	r3, [r7, #3]
 800a5ac:	460b      	mov	r3, r1
 800a5ae:	70bb      	strb	r3, [r7, #2]
 800a5b0:	4613      	mov	r3, r2
 800a5b2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800a5c2:	787c      	ldrb	r4, [r7, #1]
 800a5c4:	78ba      	ldrb	r2, [r7, #2]
 800a5c6:	78f9      	ldrb	r1, [r7, #3]
 800a5c8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a5cc:	9303      	str	r3, [sp, #12]
 800a5ce:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a5d0:	9302      	str	r3, [sp, #8]
 800a5d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5d4:	9301      	str	r3, [sp, #4]
 800a5d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a5da:	9300      	str	r3, [sp, #0]
 800a5dc:	4623      	mov	r3, r4
 800a5de:	f7f8 f907 	bl	80027f0 <HAL_HCD_HC_SubmitRequest>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a5e6:	7bfb      	ldrb	r3, [r7, #15]
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	f000 f86f 	bl	800a6cc <USBH_Get_USB_Status>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	3714      	adds	r7, #20
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd90      	pop	{r4, r7, pc}

0800a5fc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b082      	sub	sp, #8
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
 800a604:	460b      	mov	r3, r1
 800a606:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a60e:	78fa      	ldrb	r2, [r7, #3]
 800a610:	4611      	mov	r1, r2
 800a612:	4618      	mov	r0, r3
 800a614:	f7f8 fbe8 	bl	8002de8 <HAL_HCD_HC_GetURBState>
 800a618:	4603      	mov	r3, r0
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	3708      	adds	r7, #8
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}

0800a622 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a622:	b580      	push	{r7, lr}
 800a624:	b082      	sub	sp, #8
 800a626:	af00      	add	r7, sp, #0
 800a628:	6078      	str	r0, [r7, #4]
 800a62a:	460b      	mov	r3, r1
 800a62c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a634:	2b01      	cmp	r3, #1
 800a636:	d103      	bne.n	800a640 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a638:	78fb      	ldrb	r3, [r7, #3]
 800a63a:	4618      	mov	r0, r3
 800a63c:	f000 f872 	bl	800a724 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a640:	20c8      	movs	r0, #200	@ 0xc8
 800a642:	f7f6 ff5b 	bl	80014fc <HAL_Delay>
  return USBH_OK;
 800a646:	2300      	movs	r3, #0
}
 800a648:	4618      	mov	r0, r3
 800a64a:	3708      	adds	r7, #8
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}

0800a650 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a650:	b480      	push	{r7}
 800a652:	b085      	sub	sp, #20
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
 800a658:	460b      	mov	r3, r1
 800a65a:	70fb      	strb	r3, [r7, #3]
 800a65c:	4613      	mov	r3, r2
 800a65e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a666:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a668:	78fa      	ldrb	r2, [r7, #3]
 800a66a:	68f9      	ldr	r1, [r7, #12]
 800a66c:	4613      	mov	r3, r2
 800a66e:	011b      	lsls	r3, r3, #4
 800a670:	1a9b      	subs	r3, r3, r2
 800a672:	009b      	lsls	r3, r3, #2
 800a674:	440b      	add	r3, r1
 800a676:	3317      	adds	r3, #23
 800a678:	781b      	ldrb	r3, [r3, #0]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d00a      	beq.n	800a694 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a67e:	78fa      	ldrb	r2, [r7, #3]
 800a680:	68f9      	ldr	r1, [r7, #12]
 800a682:	4613      	mov	r3, r2
 800a684:	011b      	lsls	r3, r3, #4
 800a686:	1a9b      	subs	r3, r3, r2
 800a688:	009b      	lsls	r3, r3, #2
 800a68a:	440b      	add	r3, r1
 800a68c:	333c      	adds	r3, #60	@ 0x3c
 800a68e:	78ba      	ldrb	r2, [r7, #2]
 800a690:	701a      	strb	r2, [r3, #0]
 800a692:	e009      	b.n	800a6a8 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a694:	78fa      	ldrb	r2, [r7, #3]
 800a696:	68f9      	ldr	r1, [r7, #12]
 800a698:	4613      	mov	r3, r2
 800a69a:	011b      	lsls	r3, r3, #4
 800a69c:	1a9b      	subs	r3, r3, r2
 800a69e:	009b      	lsls	r3, r3, #2
 800a6a0:	440b      	add	r3, r1
 800a6a2:	333d      	adds	r3, #61	@ 0x3d
 800a6a4:	78ba      	ldrb	r2, [r7, #2]
 800a6a6:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a6a8:	2300      	movs	r3, #0
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	3714      	adds	r7, #20
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b4:	4770      	bx	lr

0800a6b6 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a6b6:	b580      	push	{r7, lr}
 800a6b8:	b082      	sub	sp, #8
 800a6ba:	af00      	add	r7, sp, #0
 800a6bc:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	f7f6 ff1c 	bl	80014fc <HAL_Delay>
}
 800a6c4:	bf00      	nop
 800a6c6:	3708      	adds	r7, #8
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}

0800a6cc <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b085      	sub	sp, #20
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a6da:	79fb      	ldrb	r3, [r7, #7]
 800a6dc:	2b03      	cmp	r3, #3
 800a6de:	d817      	bhi.n	800a710 <USBH_Get_USB_Status+0x44>
 800a6e0:	a201      	add	r2, pc, #4	@ (adr r2, 800a6e8 <USBH_Get_USB_Status+0x1c>)
 800a6e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6e6:	bf00      	nop
 800a6e8:	0800a6f9 	.word	0x0800a6f9
 800a6ec:	0800a6ff 	.word	0x0800a6ff
 800a6f0:	0800a705 	.word	0x0800a705
 800a6f4:	0800a70b 	.word	0x0800a70b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	73fb      	strb	r3, [r7, #15]
    break;
 800a6fc:	e00b      	b.n	800a716 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a6fe:	2302      	movs	r3, #2
 800a700:	73fb      	strb	r3, [r7, #15]
    break;
 800a702:	e008      	b.n	800a716 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a704:	2301      	movs	r3, #1
 800a706:	73fb      	strb	r3, [r7, #15]
    break;
 800a708:	e005      	b.n	800a716 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a70a:	2302      	movs	r3, #2
 800a70c:	73fb      	strb	r3, [r7, #15]
    break;
 800a70e:	e002      	b.n	800a716 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a710:	2302      	movs	r3, #2
 800a712:	73fb      	strb	r3, [r7, #15]
    break;
 800a714:	bf00      	nop
  }
  return usb_status;
 800a716:	7bfb      	ldrb	r3, [r7, #15]
}
 800a718:	4618      	mov	r0, r3
 800a71a:	3714      	adds	r7, #20
 800a71c:	46bd      	mov	sp, r7
 800a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a722:	4770      	bx	lr

0800a724 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b084      	sub	sp, #16
 800a728:	af00      	add	r7, sp, #0
 800a72a:	4603      	mov	r3, r0
 800a72c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a72e:	79fb      	ldrb	r3, [r7, #7]
 800a730:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a732:	79fb      	ldrb	r3, [r7, #7]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d102      	bne.n	800a73e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800a738:	2300      	movs	r3, #0
 800a73a:	73fb      	strb	r3, [r7, #15]
 800a73c:	e001      	b.n	800a742 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800a73e:	2301      	movs	r3, #1
 800a740:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800a742:	7bfb      	ldrb	r3, [r7, #15]
 800a744:	461a      	mov	r2, r3
 800a746:	2101      	movs	r1, #1
 800a748:	4803      	ldr	r0, [pc, #12]	@ (800a758 <MX_DriverVbusFS+0x34>)
 800a74a:	f7f7 fef5 	bl	8002538 <HAL_GPIO_WritePin>
}
 800a74e:	bf00      	nop
 800a750:	3710      	adds	r7, #16
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}
 800a756:	bf00      	nop
 800a758:	40020800 	.word	0x40020800

0800a75c <malloc>:
 800a75c:	4b02      	ldr	r3, [pc, #8]	@ (800a768 <malloc+0xc>)
 800a75e:	4601      	mov	r1, r0
 800a760:	6818      	ldr	r0, [r3, #0]
 800a762:	f000 b82d 	b.w	800a7c0 <_malloc_r>
 800a766:	bf00      	nop
 800a768:	2000002c 	.word	0x2000002c

0800a76c <free>:
 800a76c:	4b02      	ldr	r3, [pc, #8]	@ (800a778 <free+0xc>)
 800a76e:	4601      	mov	r1, r0
 800a770:	6818      	ldr	r0, [r3, #0]
 800a772:	f000 b8f5 	b.w	800a960 <_free_r>
 800a776:	bf00      	nop
 800a778:	2000002c 	.word	0x2000002c

0800a77c <sbrk_aligned>:
 800a77c:	b570      	push	{r4, r5, r6, lr}
 800a77e:	4e0f      	ldr	r6, [pc, #60]	@ (800a7bc <sbrk_aligned+0x40>)
 800a780:	460c      	mov	r4, r1
 800a782:	6831      	ldr	r1, [r6, #0]
 800a784:	4605      	mov	r5, r0
 800a786:	b911      	cbnz	r1, 800a78e <sbrk_aligned+0x12>
 800a788:	f000 f8ae 	bl	800a8e8 <_sbrk_r>
 800a78c:	6030      	str	r0, [r6, #0]
 800a78e:	4621      	mov	r1, r4
 800a790:	4628      	mov	r0, r5
 800a792:	f000 f8a9 	bl	800a8e8 <_sbrk_r>
 800a796:	1c43      	adds	r3, r0, #1
 800a798:	d103      	bne.n	800a7a2 <sbrk_aligned+0x26>
 800a79a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a79e:	4620      	mov	r0, r4
 800a7a0:	bd70      	pop	{r4, r5, r6, pc}
 800a7a2:	1cc4      	adds	r4, r0, #3
 800a7a4:	f024 0403 	bic.w	r4, r4, #3
 800a7a8:	42a0      	cmp	r0, r4
 800a7aa:	d0f8      	beq.n	800a79e <sbrk_aligned+0x22>
 800a7ac:	1a21      	subs	r1, r4, r0
 800a7ae:	4628      	mov	r0, r5
 800a7b0:	f000 f89a 	bl	800a8e8 <_sbrk_r>
 800a7b4:	3001      	adds	r0, #1
 800a7b6:	d1f2      	bne.n	800a79e <sbrk_aligned+0x22>
 800a7b8:	e7ef      	b.n	800a79a <sbrk_aligned+0x1e>
 800a7ba:	bf00      	nop
 800a7bc:	20000a44 	.word	0x20000a44

0800a7c0 <_malloc_r>:
 800a7c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7c4:	1ccd      	adds	r5, r1, #3
 800a7c6:	f025 0503 	bic.w	r5, r5, #3
 800a7ca:	3508      	adds	r5, #8
 800a7cc:	2d0c      	cmp	r5, #12
 800a7ce:	bf38      	it	cc
 800a7d0:	250c      	movcc	r5, #12
 800a7d2:	2d00      	cmp	r5, #0
 800a7d4:	4606      	mov	r6, r0
 800a7d6:	db01      	blt.n	800a7dc <_malloc_r+0x1c>
 800a7d8:	42a9      	cmp	r1, r5
 800a7da:	d904      	bls.n	800a7e6 <_malloc_r+0x26>
 800a7dc:	230c      	movs	r3, #12
 800a7de:	6033      	str	r3, [r6, #0]
 800a7e0:	2000      	movs	r0, #0
 800a7e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a8bc <_malloc_r+0xfc>
 800a7ea:	f000 f869 	bl	800a8c0 <__malloc_lock>
 800a7ee:	f8d8 3000 	ldr.w	r3, [r8]
 800a7f2:	461c      	mov	r4, r3
 800a7f4:	bb44      	cbnz	r4, 800a848 <_malloc_r+0x88>
 800a7f6:	4629      	mov	r1, r5
 800a7f8:	4630      	mov	r0, r6
 800a7fa:	f7ff ffbf 	bl	800a77c <sbrk_aligned>
 800a7fe:	1c43      	adds	r3, r0, #1
 800a800:	4604      	mov	r4, r0
 800a802:	d158      	bne.n	800a8b6 <_malloc_r+0xf6>
 800a804:	f8d8 4000 	ldr.w	r4, [r8]
 800a808:	4627      	mov	r7, r4
 800a80a:	2f00      	cmp	r7, #0
 800a80c:	d143      	bne.n	800a896 <_malloc_r+0xd6>
 800a80e:	2c00      	cmp	r4, #0
 800a810:	d04b      	beq.n	800a8aa <_malloc_r+0xea>
 800a812:	6823      	ldr	r3, [r4, #0]
 800a814:	4639      	mov	r1, r7
 800a816:	4630      	mov	r0, r6
 800a818:	eb04 0903 	add.w	r9, r4, r3
 800a81c:	f000 f864 	bl	800a8e8 <_sbrk_r>
 800a820:	4581      	cmp	r9, r0
 800a822:	d142      	bne.n	800a8aa <_malloc_r+0xea>
 800a824:	6821      	ldr	r1, [r4, #0]
 800a826:	1a6d      	subs	r5, r5, r1
 800a828:	4629      	mov	r1, r5
 800a82a:	4630      	mov	r0, r6
 800a82c:	f7ff ffa6 	bl	800a77c <sbrk_aligned>
 800a830:	3001      	adds	r0, #1
 800a832:	d03a      	beq.n	800a8aa <_malloc_r+0xea>
 800a834:	6823      	ldr	r3, [r4, #0]
 800a836:	442b      	add	r3, r5
 800a838:	6023      	str	r3, [r4, #0]
 800a83a:	f8d8 3000 	ldr.w	r3, [r8]
 800a83e:	685a      	ldr	r2, [r3, #4]
 800a840:	bb62      	cbnz	r2, 800a89c <_malloc_r+0xdc>
 800a842:	f8c8 7000 	str.w	r7, [r8]
 800a846:	e00f      	b.n	800a868 <_malloc_r+0xa8>
 800a848:	6822      	ldr	r2, [r4, #0]
 800a84a:	1b52      	subs	r2, r2, r5
 800a84c:	d420      	bmi.n	800a890 <_malloc_r+0xd0>
 800a84e:	2a0b      	cmp	r2, #11
 800a850:	d917      	bls.n	800a882 <_malloc_r+0xc2>
 800a852:	1961      	adds	r1, r4, r5
 800a854:	42a3      	cmp	r3, r4
 800a856:	6025      	str	r5, [r4, #0]
 800a858:	bf18      	it	ne
 800a85a:	6059      	strne	r1, [r3, #4]
 800a85c:	6863      	ldr	r3, [r4, #4]
 800a85e:	bf08      	it	eq
 800a860:	f8c8 1000 	streq.w	r1, [r8]
 800a864:	5162      	str	r2, [r4, r5]
 800a866:	604b      	str	r3, [r1, #4]
 800a868:	4630      	mov	r0, r6
 800a86a:	f000 f82f 	bl	800a8cc <__malloc_unlock>
 800a86e:	f104 000b 	add.w	r0, r4, #11
 800a872:	1d23      	adds	r3, r4, #4
 800a874:	f020 0007 	bic.w	r0, r0, #7
 800a878:	1ac2      	subs	r2, r0, r3
 800a87a:	bf1c      	itt	ne
 800a87c:	1a1b      	subne	r3, r3, r0
 800a87e:	50a3      	strne	r3, [r4, r2]
 800a880:	e7af      	b.n	800a7e2 <_malloc_r+0x22>
 800a882:	6862      	ldr	r2, [r4, #4]
 800a884:	42a3      	cmp	r3, r4
 800a886:	bf0c      	ite	eq
 800a888:	f8c8 2000 	streq.w	r2, [r8]
 800a88c:	605a      	strne	r2, [r3, #4]
 800a88e:	e7eb      	b.n	800a868 <_malloc_r+0xa8>
 800a890:	4623      	mov	r3, r4
 800a892:	6864      	ldr	r4, [r4, #4]
 800a894:	e7ae      	b.n	800a7f4 <_malloc_r+0x34>
 800a896:	463c      	mov	r4, r7
 800a898:	687f      	ldr	r7, [r7, #4]
 800a89a:	e7b6      	b.n	800a80a <_malloc_r+0x4a>
 800a89c:	461a      	mov	r2, r3
 800a89e:	685b      	ldr	r3, [r3, #4]
 800a8a0:	42a3      	cmp	r3, r4
 800a8a2:	d1fb      	bne.n	800a89c <_malloc_r+0xdc>
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	6053      	str	r3, [r2, #4]
 800a8a8:	e7de      	b.n	800a868 <_malloc_r+0xa8>
 800a8aa:	230c      	movs	r3, #12
 800a8ac:	6033      	str	r3, [r6, #0]
 800a8ae:	4630      	mov	r0, r6
 800a8b0:	f000 f80c 	bl	800a8cc <__malloc_unlock>
 800a8b4:	e794      	b.n	800a7e0 <_malloc_r+0x20>
 800a8b6:	6005      	str	r5, [r0, #0]
 800a8b8:	e7d6      	b.n	800a868 <_malloc_r+0xa8>
 800a8ba:	bf00      	nop
 800a8bc:	20000a48 	.word	0x20000a48

0800a8c0 <__malloc_lock>:
 800a8c0:	4801      	ldr	r0, [pc, #4]	@ (800a8c8 <__malloc_lock+0x8>)
 800a8c2:	f000 b84b 	b.w	800a95c <__retarget_lock_acquire_recursive>
 800a8c6:	bf00      	nop
 800a8c8:	20000b84 	.word	0x20000b84

0800a8cc <__malloc_unlock>:
 800a8cc:	4801      	ldr	r0, [pc, #4]	@ (800a8d4 <__malloc_unlock+0x8>)
 800a8ce:	f000 b846 	b.w	800a95e <__retarget_lock_release_recursive>
 800a8d2:	bf00      	nop
 800a8d4:	20000b84 	.word	0x20000b84

0800a8d8 <memset>:
 800a8d8:	4402      	add	r2, r0
 800a8da:	4603      	mov	r3, r0
 800a8dc:	4293      	cmp	r3, r2
 800a8de:	d100      	bne.n	800a8e2 <memset+0xa>
 800a8e0:	4770      	bx	lr
 800a8e2:	f803 1b01 	strb.w	r1, [r3], #1
 800a8e6:	e7f9      	b.n	800a8dc <memset+0x4>

0800a8e8 <_sbrk_r>:
 800a8e8:	b538      	push	{r3, r4, r5, lr}
 800a8ea:	4d06      	ldr	r5, [pc, #24]	@ (800a904 <_sbrk_r+0x1c>)
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	4604      	mov	r4, r0
 800a8f0:	4608      	mov	r0, r1
 800a8f2:	602b      	str	r3, [r5, #0]
 800a8f4:	f7f6 fd1e 	bl	8001334 <_sbrk>
 800a8f8:	1c43      	adds	r3, r0, #1
 800a8fa:	d102      	bne.n	800a902 <_sbrk_r+0x1a>
 800a8fc:	682b      	ldr	r3, [r5, #0]
 800a8fe:	b103      	cbz	r3, 800a902 <_sbrk_r+0x1a>
 800a900:	6023      	str	r3, [r4, #0]
 800a902:	bd38      	pop	{r3, r4, r5, pc}
 800a904:	20000b88 	.word	0x20000b88

0800a908 <__errno>:
 800a908:	4b01      	ldr	r3, [pc, #4]	@ (800a910 <__errno+0x8>)
 800a90a:	6818      	ldr	r0, [r3, #0]
 800a90c:	4770      	bx	lr
 800a90e:	bf00      	nop
 800a910:	2000002c 	.word	0x2000002c

0800a914 <__libc_init_array>:
 800a914:	b570      	push	{r4, r5, r6, lr}
 800a916:	4d0d      	ldr	r5, [pc, #52]	@ (800a94c <__libc_init_array+0x38>)
 800a918:	4c0d      	ldr	r4, [pc, #52]	@ (800a950 <__libc_init_array+0x3c>)
 800a91a:	1b64      	subs	r4, r4, r5
 800a91c:	10a4      	asrs	r4, r4, #2
 800a91e:	2600      	movs	r6, #0
 800a920:	42a6      	cmp	r6, r4
 800a922:	d109      	bne.n	800a938 <__libc_init_array+0x24>
 800a924:	4d0b      	ldr	r5, [pc, #44]	@ (800a954 <__libc_init_array+0x40>)
 800a926:	4c0c      	ldr	r4, [pc, #48]	@ (800a958 <__libc_init_array+0x44>)
 800a928:	f000 f864 	bl	800a9f4 <_init>
 800a92c:	1b64      	subs	r4, r4, r5
 800a92e:	10a4      	asrs	r4, r4, #2
 800a930:	2600      	movs	r6, #0
 800a932:	42a6      	cmp	r6, r4
 800a934:	d105      	bne.n	800a942 <__libc_init_array+0x2e>
 800a936:	bd70      	pop	{r4, r5, r6, pc}
 800a938:	f855 3b04 	ldr.w	r3, [r5], #4
 800a93c:	4798      	blx	r3
 800a93e:	3601      	adds	r6, #1
 800a940:	e7ee      	b.n	800a920 <__libc_init_array+0xc>
 800a942:	f855 3b04 	ldr.w	r3, [r5], #4
 800a946:	4798      	blx	r3
 800a948:	3601      	adds	r6, #1
 800a94a:	e7f2      	b.n	800a932 <__libc_init_array+0x1e>
 800a94c:	0800aa38 	.word	0x0800aa38
 800a950:	0800aa38 	.word	0x0800aa38
 800a954:	0800aa38 	.word	0x0800aa38
 800a958:	0800aa3c 	.word	0x0800aa3c

0800a95c <__retarget_lock_acquire_recursive>:
 800a95c:	4770      	bx	lr

0800a95e <__retarget_lock_release_recursive>:
 800a95e:	4770      	bx	lr

0800a960 <_free_r>:
 800a960:	b538      	push	{r3, r4, r5, lr}
 800a962:	4605      	mov	r5, r0
 800a964:	2900      	cmp	r1, #0
 800a966:	d041      	beq.n	800a9ec <_free_r+0x8c>
 800a968:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a96c:	1f0c      	subs	r4, r1, #4
 800a96e:	2b00      	cmp	r3, #0
 800a970:	bfb8      	it	lt
 800a972:	18e4      	addlt	r4, r4, r3
 800a974:	f7ff ffa4 	bl	800a8c0 <__malloc_lock>
 800a978:	4a1d      	ldr	r2, [pc, #116]	@ (800a9f0 <_free_r+0x90>)
 800a97a:	6813      	ldr	r3, [r2, #0]
 800a97c:	b933      	cbnz	r3, 800a98c <_free_r+0x2c>
 800a97e:	6063      	str	r3, [r4, #4]
 800a980:	6014      	str	r4, [r2, #0]
 800a982:	4628      	mov	r0, r5
 800a984:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a988:	f7ff bfa0 	b.w	800a8cc <__malloc_unlock>
 800a98c:	42a3      	cmp	r3, r4
 800a98e:	d908      	bls.n	800a9a2 <_free_r+0x42>
 800a990:	6820      	ldr	r0, [r4, #0]
 800a992:	1821      	adds	r1, r4, r0
 800a994:	428b      	cmp	r3, r1
 800a996:	bf01      	itttt	eq
 800a998:	6819      	ldreq	r1, [r3, #0]
 800a99a:	685b      	ldreq	r3, [r3, #4]
 800a99c:	1809      	addeq	r1, r1, r0
 800a99e:	6021      	streq	r1, [r4, #0]
 800a9a0:	e7ed      	b.n	800a97e <_free_r+0x1e>
 800a9a2:	461a      	mov	r2, r3
 800a9a4:	685b      	ldr	r3, [r3, #4]
 800a9a6:	b10b      	cbz	r3, 800a9ac <_free_r+0x4c>
 800a9a8:	42a3      	cmp	r3, r4
 800a9aa:	d9fa      	bls.n	800a9a2 <_free_r+0x42>
 800a9ac:	6811      	ldr	r1, [r2, #0]
 800a9ae:	1850      	adds	r0, r2, r1
 800a9b0:	42a0      	cmp	r0, r4
 800a9b2:	d10b      	bne.n	800a9cc <_free_r+0x6c>
 800a9b4:	6820      	ldr	r0, [r4, #0]
 800a9b6:	4401      	add	r1, r0
 800a9b8:	1850      	adds	r0, r2, r1
 800a9ba:	4283      	cmp	r3, r0
 800a9bc:	6011      	str	r1, [r2, #0]
 800a9be:	d1e0      	bne.n	800a982 <_free_r+0x22>
 800a9c0:	6818      	ldr	r0, [r3, #0]
 800a9c2:	685b      	ldr	r3, [r3, #4]
 800a9c4:	6053      	str	r3, [r2, #4]
 800a9c6:	4408      	add	r0, r1
 800a9c8:	6010      	str	r0, [r2, #0]
 800a9ca:	e7da      	b.n	800a982 <_free_r+0x22>
 800a9cc:	d902      	bls.n	800a9d4 <_free_r+0x74>
 800a9ce:	230c      	movs	r3, #12
 800a9d0:	602b      	str	r3, [r5, #0]
 800a9d2:	e7d6      	b.n	800a982 <_free_r+0x22>
 800a9d4:	6820      	ldr	r0, [r4, #0]
 800a9d6:	1821      	adds	r1, r4, r0
 800a9d8:	428b      	cmp	r3, r1
 800a9da:	bf04      	itt	eq
 800a9dc:	6819      	ldreq	r1, [r3, #0]
 800a9de:	685b      	ldreq	r3, [r3, #4]
 800a9e0:	6063      	str	r3, [r4, #4]
 800a9e2:	bf04      	itt	eq
 800a9e4:	1809      	addeq	r1, r1, r0
 800a9e6:	6021      	streq	r1, [r4, #0]
 800a9e8:	6054      	str	r4, [r2, #4]
 800a9ea:	e7ca      	b.n	800a982 <_free_r+0x22>
 800a9ec:	bd38      	pop	{r3, r4, r5, pc}
 800a9ee:	bf00      	nop
 800a9f0:	20000a48 	.word	0x20000a48

0800a9f4 <_init>:
 800a9f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9f6:	bf00      	nop
 800a9f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9fa:	bc08      	pop	{r3}
 800a9fc:	469e      	mov	lr, r3
 800a9fe:	4770      	bx	lr

0800aa00 <_fini>:
 800aa00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa02:	bf00      	nop
 800aa04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa06:	bc08      	pop	{r3}
 800aa08:	469e      	mov	lr, r3
 800aa0a:	4770      	bx	lr
