
stm32-maze-solver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c9e4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  0800cb74  0800cb74  0000db74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cbf8  0800cbf8  0000e098  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800cbf8  0800cbf8  0000dbf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cc00  0800cc00  0000e098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc00  0800cc00  0000dc00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cc04  0800cc04  0000dc04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  0800cc08  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e098  2**0
                  CONTENTS
 10 .bss          00000d5c  20000098  20000098  0000e098  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000df4  20000df4  0000e098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ef2e  00000000  00000000  0000e0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000497e  00000000  00000000  0002cff6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a10  00000000  00000000  00031978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001439  00000000  00000000  00033388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000273af  00000000  00000000  000347c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022509  00000000  00000000  0005bb70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1fe5  00000000  00000000  0007e079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0016005e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007348  00000000  00000000  001600a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  001673ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cb5c 	.word	0x0800cb5c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	0800cb5c 	.word	0x0800cb5c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <antirebote>:
/**
 * @brief Función genérica de antirebote para cualquier pin GPIO
 * @ingroup ANTIREBOTE
 */
bool antirebote(GPIO_TypeDef *puerto, uint16_t pin)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	460b      	mov	r3, r1
 80005b6:	807b      	strh	r3, [r7, #2]
        ultimas_lecturas[16]; // Para hasta 16 pines distintos uso un array, god
    static uint8_t inicializado[16] = {
        0}; // se inicializan en cero solo la 1era vez que llamas la funcion

    // Calcular el índice del pin a partir de la máscara (posición del bit)
    uint8_t index = 0;
 80005b8:	2300      	movs	r3, #0
 80005ba:	73fb      	strb	r3, [r7, #15]
    uint16_t mask = pin;
 80005bc:	887b      	ldrh	r3, [r7, #2]
 80005be:	81bb      	strh	r3, [r7, #12]
    while (mask > 1)
 80005c0:	e005      	b.n	80005ce <antirebote+0x22>
    {
        mask >>= 1; // Desplazar a la derecha el bit
 80005c2:	89bb      	ldrh	r3, [r7, #12]
 80005c4:	085b      	lsrs	r3, r3, #1
 80005c6:	81bb      	strh	r3, [r7, #12]
        index++;    // Contar cuántos desplazamientos hicimos
 80005c8:	7bfb      	ldrb	r3, [r7, #15]
 80005ca:	3301      	adds	r3, #1
 80005cc:	73fb      	strb	r3, [r7, #15]
    while (mask > 1)
 80005ce:	89bb      	ldrh	r3, [r7, #12]
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	d8f6      	bhi.n	80005c2 <antirebote+0x16>
    }

    GPIO_PinState lectura1, lectura2;
    bool pulsado = false;
 80005d4:	2300      	movs	r3, #0
 80005d6:	72fb      	strb	r3, [r7, #11]

    // Leer el estado actual del pin
    lectura1 =
        HAL_GPIO_ReadPin(puerto, pin); //  xq puerto es el puntero al pueertooo
 80005d8:	887b      	ldrh	r3, [r7, #2]
 80005da:	4619      	mov	r1, r3
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f003 fa23 	bl	8003a28 <HAL_GPIO_ReadPin>
 80005e2:	4603      	mov	r3, r0
 80005e4:	72bb      	strb	r3, [r7, #10]

    // Si no se había inicializado antes, guardar lectura inicial y salir
    if (!inicializado[index])
 80005e6:	7bfb      	ldrb	r3, [r7, #15]
 80005e8:	4a17      	ldr	r2, [pc, #92]	@ (8000648 <antirebote+0x9c>)
 80005ea:	5cd3      	ldrb	r3, [r2, r3]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d109      	bne.n	8000604 <antirebote+0x58>
    { // se ejecuta solo la primera vez que se llama a
      // la función para ese pin.
        ultimas_lecturas[index] = lectura1;
 80005f0:	7bfb      	ldrb	r3, [r7, #15]
 80005f2:	4916      	ldr	r1, [pc, #88]	@ (800064c <antirebote+0xa0>)
 80005f4:	7aba      	ldrb	r2, [r7, #10]
 80005f6:	54ca      	strb	r2, [r1, r3]
        inicializado[index] = 1;
 80005f8:	7bfb      	ldrb	r3, [r7, #15]
 80005fa:	4a13      	ldr	r2, [pc, #76]	@ (8000648 <antirebote+0x9c>)
 80005fc:	2101      	movs	r1, #1
 80005fe:	54d1      	strb	r1, [r2, r3]
        return false;
 8000600:	2300      	movs	r3, #0
 8000602:	e01d      	b.n	8000640 <antirebote+0x94>
    }

    // Si detectamos un cambio respecto a la última lectura válida
    if (lectura1 != ultimas_lecturas[index])
 8000604:	7bfb      	ldrb	r3, [r7, #15]
 8000606:	4a11      	ldr	r2, [pc, #68]	@ (800064c <antirebote+0xa0>)
 8000608:	5cd3      	ldrb	r3, [r2, r3]
 800060a:	7aba      	ldrb	r2, [r7, #10]
 800060c:	429a      	cmp	r2, r3
 800060e:	d016      	beq.n	800063e <antirebote+0x92>
    {
        HAL_Delay(TREBOTES); // Esperar para filtrar rebotes
 8000610:	2032      	movs	r0, #50	@ 0x32
 8000612:	f001 ff01 	bl	8002418 <HAL_Delay>

        // Leer el pin otra vez para confirmar que la lectura es estable
        lectura2 = HAL_GPIO_ReadPin(puerto, pin);
 8000616:	887b      	ldrh	r3, [r7, #2]
 8000618:	4619      	mov	r1, r3
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f003 fa04 	bl	8003a28 <HAL_GPIO_ReadPin>
 8000620:	4603      	mov	r3, r0
 8000622:	727b      	strb	r3, [r7, #9]

        // Si la segunda lectura coincide con la primera, es válida
        if (lectura1 == lectura2)
 8000624:	7aba      	ldrb	r2, [r7, #10]
 8000626:	7a7b      	ldrb	r3, [r7, #9]
 8000628:	429a      	cmp	r2, r3
 800062a:	d108      	bne.n	800063e <antirebote+0x92>
        {
            ultimas_lecturas[index] = lectura2; // Guardar lectura válida
 800062c:	7bfb      	ldrb	r3, [r7, #15]
 800062e:	4907      	ldr	r1, [pc, #28]	@ (800064c <antirebote+0xa0>)
 8000630:	7a7a      	ldrb	r2, [r7, #9]
 8000632:	54ca      	strb	r2, [r1, r3]

            // Detectar si el botón fue presionado (activo en bajo)
            if (lectura2 == GPIO_PIN_RESET)
 8000634:	7a7b      	ldrb	r3, [r7, #9]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d101      	bne.n	800063e <antirebote+0x92>
            {
                pulsado = true;
 800063a:	2301      	movs	r3, #1
 800063c:	72fb      	strb	r3, [r7, #11]
            }
        }
    }

    return pulsado;
 800063e:	7afb      	ldrb	r3, [r7, #11]
 8000640:	4618      	mov	r0, r3
 8000642:	3710      	adds	r7, #16
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	200000b4 	.word	0x200000b4
 800064c:	200000c4 	.word	0x200000c4

08000650 <HAL_ADC_ConvHalfCpltCallback>:
/** @defgroup ControlLinea_DMA_Callbacks Callbacks DMA del ADC
 * @brief Funciones callback para procesamiento en tiempo real de sensores
 * @{
 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
    promediar_sensores(&dma_buffer[0]);
 8000658:	4803      	ldr	r0, [pc, #12]	@ (8000668 <HAL_ADC_ConvHalfCpltCallback+0x18>)
 800065a:	f000 f815 	bl	8000688 <promediar_sensores>
}
 800065e:	bf00      	nop
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000334 	.word	0x20000334

0800066c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
    promediar_sensores(&dma_buffer[BUFFER_MINIMO]);
 8000674:	4803      	ldr	r0, [pc, #12]	@ (8000684 <HAL_ADC_ConvCpltCallback+0x18>)
 8000676:	f000 f807 	bl	8000688 <promediar_sensores>
}
 800067a:	bf00      	nop
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	200003fc 	.word	0x200003fc

08000688 <promediar_sensores>:
 * - Actualiza variables globales sensor_der_avg y sensor_izq_avg
 *
 * @note Se ejecuta constantemente en DMA para actualización en tiempo real
 */
void promediar_sensores(uint16_t *buffer)
{
 8000688:	b480      	push	{r7}
 800068a:	b087      	sub	sp, #28
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
    uint32_t izq_sum = 0, der_sum = 0;
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]
 8000694:	2300      	movs	r3, #0
 8000696:	613b      	str	r3, [r7, #16]

    // Canal 8 (derecho), Canal 9 (izquierdo)
    for (int i = 0; i < MUESTRAS; ++i)
 8000698:	2300      	movs	r3, #0
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	e012      	b.n	80006c4 <promediar_sensores+0x3c>
    {
        der_sum += buffer[0]; // Canal 8 (PB0)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	881b      	ldrh	r3, [r3, #0]
 80006a2:	461a      	mov	r2, r3
 80006a4:	693b      	ldr	r3, [r7, #16]
 80006a6:	4413      	add	r3, r2
 80006a8:	613b      	str	r3, [r7, #16]
        izq_sum += buffer[1]; // Canal 9 (PB1)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	3302      	adds	r3, #2
 80006ae:	881b      	ldrh	r3, [r3, #0]
 80006b0:	461a      	mov	r2, r3
 80006b2:	697b      	ldr	r3, [r7, #20]
 80006b4:	4413      	add	r3, r2
 80006b6:	617b      	str	r3, [r7, #20]
        buffer += 2;          // Avanza 2 posiciones
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	3304      	adds	r3, #4
 80006bc:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < MUESTRAS; ++i)
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	3301      	adds	r3, #1
 80006c2:	60fb      	str	r3, [r7, #12]
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	2b13      	cmp	r3, #19
 80006c8:	dde9      	ble.n	800069e <promediar_sensores+0x16>
    }

    sensor_der_avg = der_sum / MUESTRAS;
 80006ca:	693b      	ldr	r3, [r7, #16]
 80006cc:	4a0a      	ldr	r2, [pc, #40]	@ (80006f8 <promediar_sensores+0x70>)
 80006ce:	fba2 2303 	umull	r2, r3, r2, r3
 80006d2:	091b      	lsrs	r3, r3, #4
 80006d4:	b29a      	uxth	r2, r3
 80006d6:	4b09      	ldr	r3, [pc, #36]	@ (80006fc <promediar_sensores+0x74>)
 80006d8:	801a      	strh	r2, [r3, #0]
    sensor_izq_avg = izq_sum / MUESTRAS;
 80006da:	697b      	ldr	r3, [r7, #20]
 80006dc:	4a06      	ldr	r2, [pc, #24]	@ (80006f8 <promediar_sensores+0x70>)
 80006de:	fba2 2303 	umull	r2, r3, r2, r3
 80006e2:	091b      	lsrs	r3, r3, #4
 80006e4:	b29a      	uxth	r2, r3
 80006e6:	4b06      	ldr	r3, [pc, #24]	@ (8000700 <promediar_sensores+0x78>)
 80006e8:	801a      	strh	r2, [r3, #0]
}
 80006ea:	bf00      	nop
 80006ec:	371c      	adds	r7, #28
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	cccccccd 	.word	0xcccccccd
 80006fc:	200000d6 	.word	0x200000d6
 8000700:	200000d4 	.word	0x200000d4

08000704 <auto_calibracion>:
 *
 * @warning Requiere intervención manual para posicionar el robot
 * @note Los umbrales se calculan dinámicamente según las condiciones del entorno
 */
void auto_calibracion(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
    HAL_Delay(1000);
 8000708:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800070c:	f001 fe84 	bl	8002418 <HAL_Delay>

    // Medición 1: CERCA DE PARED DERECHA
    HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET); // Naranja
 8000710:	2201      	movs	r2, #1
 8000712:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000716:	4835      	ldr	r0, [pc, #212]	@ (80007ec <auto_calibracion+0xe8>)
 8000718:	f003 f99e 	bl	8003a58 <HAL_GPIO_WritePin>
    HAL_Delay(3000);                                         // Tiempo para posicionar cerca de pared derecha
 800071c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000720:	f001 fe7a 	bl	8002418 <HAL_Delay>

    der_cerca = sensor_der_avg;
 8000724:	4b32      	ldr	r3, [pc, #200]	@ (80007f0 <auto_calibracion+0xec>)
 8000726:	881a      	ldrh	r2, [r3, #0]
 8000728:	4b32      	ldr	r3, [pc, #200]	@ (80007f4 <auto_calibracion+0xf0>)
 800072a:	801a      	strh	r2, [r3, #0]

    // Medición 2: CERCA DE PARED IZQUIERDA
    HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 800072c:	2200      	movs	r2, #0
 800072e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000732:	482e      	ldr	r0, [pc, #184]	@ (80007ec <auto_calibracion+0xe8>)
 8000734:	f003 f990 	bl	8003a58 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET); // Rojo
 8000738:	2201      	movs	r2, #1
 800073a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800073e:	482b      	ldr	r0, [pc, #172]	@ (80007ec <auto_calibracion+0xe8>)
 8000740:	f003 f98a 	bl	8003a58 <HAL_GPIO_WritePin>
    HAL_Delay(3000);                                         // Tiempo para posicionar cerca de pared izquierda
 8000744:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000748:	f001 fe66 	bl	8002418 <HAL_Delay>

    izq_cerca = sensor_izq_avg;
 800074c:	4b2a      	ldr	r3, [pc, #168]	@ (80007f8 <auto_calibracion+0xf4>)
 800074e:	881a      	ldrh	r2, [r3, #0]
 8000750:	4b2a      	ldr	r3, [pc, #168]	@ (80007fc <auto_calibracion+0xf8>)
 8000752:	801a      	strh	r2, [r3, #0]

    // Medición 3: CENTRADO EN PASILLO
    HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 8000754:	2200      	movs	r2, #0
 8000756:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800075a:	4824      	ldr	r0, [pc, #144]	@ (80007ec <auto_calibracion+0xe8>)
 800075c:	f003 f97c 	bl	8003a58 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_SET); // Azul
 8000760:	2201      	movs	r2, #1
 8000762:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000766:	4821      	ldr	r0, [pc, #132]	@ (80007ec <auto_calibracion+0xe8>)
 8000768:	f003 f976 	bl	8003a58 <HAL_GPIO_WritePin>
    HAL_Delay(3000);                                         // Tiempo para centrar
 800076c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000770:	f001 fe52 	bl	8002418 <HAL_Delay>

    izq_lejos = sensor_izq_avg;
 8000774:	4b20      	ldr	r3, [pc, #128]	@ (80007f8 <auto_calibracion+0xf4>)
 8000776:	881a      	ldrh	r2, [r3, #0]
 8000778:	4b21      	ldr	r3, [pc, #132]	@ (8000800 <auto_calibracion+0xfc>)
 800077a:	801a      	strh	r2, [r3, #0]
    der_lejos = sensor_der_avg;
 800077c:	4b1c      	ldr	r3, [pc, #112]	@ (80007f0 <auto_calibracion+0xec>)
 800077e:	881a      	ldrh	r2, [r3, #0]
 8000780:	4b20      	ldr	r3, [pc, #128]	@ (8000804 <auto_calibracion+0x100>)
 8000782:	801a      	strh	r2, [r3, #0]

    // Calcular valores medios
    izq_centrado = (izq_cerca + izq_lejos) / 2;
 8000784:	4b1d      	ldr	r3, [pc, #116]	@ (80007fc <auto_calibracion+0xf8>)
 8000786:	881b      	ldrh	r3, [r3, #0]
 8000788:	461a      	mov	r2, r3
 800078a:	4b1d      	ldr	r3, [pc, #116]	@ (8000800 <auto_calibracion+0xfc>)
 800078c:	881b      	ldrh	r3, [r3, #0]
 800078e:	4413      	add	r3, r2
 8000790:	0fda      	lsrs	r2, r3, #31
 8000792:	4413      	add	r3, r2
 8000794:	105b      	asrs	r3, r3, #1
 8000796:	b29a      	uxth	r2, r3
 8000798:	4b1b      	ldr	r3, [pc, #108]	@ (8000808 <auto_calibracion+0x104>)
 800079a:	801a      	strh	r2, [r3, #0]
    der_centrado = (der_cerca + der_lejos) / 2;
 800079c:	4b15      	ldr	r3, [pc, #84]	@ (80007f4 <auto_calibracion+0xf0>)
 800079e:	881b      	ldrh	r3, [r3, #0]
 80007a0:	461a      	mov	r2, r3
 80007a2:	4b18      	ldr	r3, [pc, #96]	@ (8000804 <auto_calibracion+0x100>)
 80007a4:	881b      	ldrh	r3, [r3, #0]
 80007a6:	4413      	add	r3, r2
 80007a8:	0fda      	lsrs	r2, r3, #31
 80007aa:	4413      	add	r3, r2
 80007ac:	105b      	asrs	r3, r3, #1
 80007ae:	b29a      	uxth	r2, r3
 80007b0:	4b16      	ldr	r3, [pc, #88]	@ (800080c <auto_calibracion+0x108>)
 80007b2:	801a      	strh	r2, [r3, #0]

    // Calibración completa
    HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 80007b4:	2200      	movs	r2, #0
 80007b6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007ba:	480c      	ldr	r0, [pc, #48]	@ (80007ec <auto_calibracion+0xe8>)
 80007bc:	f003 f94c 	bl	8003a58 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET); // Verde
 80007c0:	2201      	movs	r2, #1
 80007c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007c6:	4809      	ldr	r0, [pc, #36]	@ (80007ec <auto_calibracion+0xe8>)
 80007c8:	f003 f946 	bl	8003a58 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 80007cc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007d0:	f001 fe22 	bl	8002418 <HAL_Delay>
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80007d4:	2200      	movs	r2, #0
 80007d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007da:	4804      	ldr	r0, [pc, #16]	@ (80007ec <auto_calibracion+0xe8>)
 80007dc:	f003 f93c 	bl	8003a58 <HAL_GPIO_WritePin>

    calibrado = true;
 80007e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000810 <auto_calibracion+0x10c>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	701a      	strb	r2, [r3, #0]
}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40020c00 	.word	0x40020c00
 80007f0:	200000d6 	.word	0x200000d6
 80007f4:	20000006 	.word	0x20000006
 80007f8:	200000d4 	.word	0x200000d4
 80007fc:	20000000 	.word	0x20000000
 8000800:	20000002 	.word	0x20000002
 8000804:	20000008 	.word	0x20000008
 8000808:	20000004 	.word	0x20000004
 800080c:	2000000a 	.word	0x2000000a
 8000810:	200000d8 	.word	0x200000d8

08000814 <controlar_linea_recta>:
 * @note Utiliza umbrales dinámicos calculados en calibración
 * @note Margen de seguridad de 200 unidades sobre valores de calibración
 * @warning No opera sin calibración previa (calibrado = false)
 */
void controlar_linea_recta(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
    if (!calibrado)
 800081a:	4b1a      	ldr	r3, [pc, #104]	@ (8000884 <controlar_linea_recta+0x70>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	f083 0301 	eor.w	r3, r3, #1
 8000822:	b2db      	uxtb	r3, r3
 8000824:	2b00      	cmp	r3, #0
 8000826:	d128      	bne.n	800087a <controlar_linea_recta+0x66>
        return;

    // Determinar posición relativa
    bool muy_cerca_izq = (sensor_izq_avg < izq_cerca + 100);
 8000828:	4b17      	ldr	r3, [pc, #92]	@ (8000888 <controlar_linea_recta+0x74>)
 800082a:	881b      	ldrh	r3, [r3, #0]
 800082c:	3363      	adds	r3, #99	@ 0x63
 800082e:	4a17      	ldr	r2, [pc, #92]	@ (800088c <controlar_linea_recta+0x78>)
 8000830:	8812      	ldrh	r2, [r2, #0]
 8000832:	4293      	cmp	r3, r2
 8000834:	bfac      	ite	ge
 8000836:	2301      	movge	r3, #1
 8000838:	2300      	movlt	r3, #0
 800083a:	71fb      	strb	r3, [r7, #7]
    bool muy_cerca_der = (sensor_der_avg < der_cerca + 100);
 800083c:	4b14      	ldr	r3, [pc, #80]	@ (8000890 <controlar_linea_recta+0x7c>)
 800083e:	881b      	ldrh	r3, [r3, #0]
 8000840:	3363      	adds	r3, #99	@ 0x63
 8000842:	4a14      	ldr	r2, [pc, #80]	@ (8000894 <controlar_linea_recta+0x80>)
 8000844:	8812      	ldrh	r2, [r2, #0]
 8000846:	4293      	cmp	r3, r2
 8000848:	bfac      	ite	ge
 800084a:	2301      	movge	r3, #1
 800084c:	2300      	movlt	r3, #0
 800084e:	71bb      	strb	r3, [r7, #6]

    if (muy_cerca_izq)
 8000850:	79fb      	ldrb	r3, [r7, #7]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d002      	beq.n	800085c <controlar_linea_recta+0x48>
    {
        correccion_derecha(); // Alejarse de pared izquierda
 8000856:	f000 f9c7 	bl	8000be8 <correccion_derecha>
 800085a:	e00f      	b.n	800087c <controlar_linea_recta+0x68>
    }
    else if (muy_cerca_der)
 800085c:	79bb      	ldrb	r3, [r7, #6]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d002      	beq.n	8000868 <controlar_linea_recta+0x54>
    {
        correccion_izquierda(); // Alejarse de pared derecha
 8000862:	f000 f993 	bl	8000b8c <correccion_izquierda>
 8000866:	e009      	b.n	800087c <controlar_linea_recta+0x68>
    }
    else if (muy_cerca_izq)
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d002      	beq.n	8000874 <controlar_linea_recta+0x60>
    {
        correccion_derecha(); // Alejarse de pared izquierda
 800086e:	f000 f9bb 	bl	8000be8 <correccion_derecha>
 8000872:	e003      	b.n	800087c <controlar_linea_recta+0x68>
    }
    else
    {
        avanza(); // Ir recto si está centrado
 8000874:	f000 f8bc 	bl	80009f0 <avanza>
 8000878:	e000      	b.n	800087c <controlar_linea_recta+0x68>
        return;
 800087a:	bf00      	nop
    }
}
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	200000d8 	.word	0x200000d8
 8000888:	20000000 	.word	0x20000000
 800088c:	200000d4 	.word	0x200000d4
 8000890:	20000006 	.word	0x20000006
 8000894:	200000d6 	.word	0x200000d6

08000898 <activar_modo_sprint>:
 * @brief Activa el modo sprint de alta velocidad
 * @details Cambia las velocidades de avance a valores de sprint (90% vs 70%)
 * @note Se llama cuando se presiona el botón "I AM SPEED"
 */
void activar_modo_sprint(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
    velocidad_actual_izq = VELOCIDAD_SPRINT_IZQ;
 800089c:	4b06      	ldr	r3, [pc, #24]	@ (80008b8 <activar_modo_sprint+0x20>)
 800089e:	f44f 7261 	mov.w	r2, #900	@ 0x384
 80008a2:	801a      	strh	r2, [r3, #0]
    velocidad_actual_der = VELOCIDAD_SPRINT_DER;
 80008a4:	4b05      	ldr	r3, [pc, #20]	@ (80008bc <activar_modo_sprint+0x24>)
 80008a6:	f44f 7261 	mov.w	r2, #900	@ 0x384
 80008aa:	801a      	strh	r2, [r3, #0]
}
 80008ac:	bf00      	nop
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	2000000c 	.word	0x2000000c
 80008bc:	2000000e 	.word	0x2000000e

080008c0 <control_motor_init>:

/**
 * @brief Inicializa el control de motores
 */
void control_motor_init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
    // Iniciar PWM en ambos canales
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // Motor izquierdo (PC8)
 80008c4:	2108      	movs	r1, #8
 80008c6:	4805      	ldr	r0, [pc, #20]	@ (80008dc <control_motor_init+0x1c>)
 80008c8:	f006 f93a 	bl	8006b40 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // Motor derecho (PC9)
 80008cc:	210c      	movs	r1, #12
 80008ce:	4803      	ldr	r0, [pc, #12]	@ (80008dc <control_motor_init+0x1c>)
 80008d0:	f006 f936 	bl	8006b40 <HAL_TIM_PWM_Start>

    // comienza yendo para adelante
    avanza();
 80008d4:	f000 f88c 	bl	80009f0 <avanza>
}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	200002a0 	.word	0x200002a0

080008e0 <set_motor_izq>:
 * @brief Configura motor izquierdo
 * @param estado: MOTOR_AVANCE, MOTOR_RETROCESO o MOTOR_FRENADO
 * @param pwm: Valor PWM (0-1000)
 */
void set_motor_izq(motor_estado_t estado, uint16_t pwm)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	460a      	mov	r2, r1
 80008ea:	71fb      	strb	r3, [r7, #7]
 80008ec:	4613      	mov	r3, r2
 80008ee:	80bb      	strh	r3, [r7, #4]
    switch (estado)
 80008f0:	79fb      	ldrb	r3, [r7, #7]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d002      	beq.n	80008fc <set_motor_izq+0x1c>
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d00d      	beq.n	8000916 <set_motor_izq+0x36>
 80008fa:	e019      	b.n	8000930 <set_motor_izq+0x50>
    {
    case MOTOR_AVANCE:
        HAL_GPIO_WritePin(MI0_GPIO_Port, MI0_Pin, GPIO_PIN_SET);   // MI0 = 1
 80008fc:	2201      	movs	r2, #1
 80008fe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000902:	4817      	ldr	r0, [pc, #92]	@ (8000960 <set_motor_izq+0x80>)
 8000904:	f003 f8a8 	bl	8003a58 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MI1_GPIO_Port, MI1_Pin, GPIO_PIN_RESET); // MI1 = 0
 8000908:	2200      	movs	r2, #0
 800090a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800090e:	4814      	ldr	r0, [pc, #80]	@ (8000960 <set_motor_izq+0x80>)
 8000910:	f003 f8a2 	bl	8003a58 <HAL_GPIO_WritePin>
        break;
 8000914:	e01b      	b.n	800094e <set_motor_izq+0x6e>

    case MOTOR_RETROCESO:
        HAL_GPIO_WritePin(MI0_GPIO_Port, MI0_Pin, GPIO_PIN_RESET); // MI0 = 0
 8000916:	2200      	movs	r2, #0
 8000918:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800091c:	4810      	ldr	r0, [pc, #64]	@ (8000960 <set_motor_izq+0x80>)
 800091e:	f003 f89b 	bl	8003a58 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MI1_GPIO_Port, MI1_Pin, GPIO_PIN_SET);   // MI1 = 1
 8000922:	2201      	movs	r2, #1
 8000924:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000928:	480d      	ldr	r0, [pc, #52]	@ (8000960 <set_motor_izq+0x80>)
 800092a:	f003 f895 	bl	8003a58 <HAL_GPIO_WritePin>
        break;
 800092e:	e00e      	b.n	800094e <set_motor_izq+0x6e>

    case MOTOR_FRENADO:
    default:
        HAL_GPIO_WritePin(MI0_GPIO_Port, MI0_Pin, GPIO_PIN_RESET); // MI0 = 0
 8000930:	2200      	movs	r2, #0
 8000932:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000936:	480a      	ldr	r0, [pc, #40]	@ (8000960 <set_motor_izq+0x80>)
 8000938:	f003 f88e 	bl	8003a58 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MI1_GPIO_Port, MI1_Pin, GPIO_PIN_RESET); // MI1 = 0
 800093c:	2200      	movs	r2, #0
 800093e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000942:	4807      	ldr	r0, [pc, #28]	@ (8000960 <set_motor_izq+0x80>)
 8000944:	f003 f888 	bl	8003a58 <HAL_GPIO_WritePin>
        pwm = 0;                                                   // Forzar PWM a 0 en frenado
 8000948:	2300      	movs	r3, #0
 800094a:	80bb      	strh	r3, [r7, #4]
        break;
 800094c:	bf00      	nop
    }

    // Establecer PWM, aca le definimos la velocidad
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pwm);
 800094e:	4b05      	ldr	r3, [pc, #20]	@ (8000964 <set_motor_izq+0x84>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	88ba      	ldrh	r2, [r7, #4]
 8000954:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40020400 	.word	0x40020400
 8000964:	200002a0 	.word	0x200002a0

08000968 <set_motor_der>:
 * @brief Configura motor derecho
 * @param estado: MOTOR_AVANCE, MOTOR_RETROCESO o MOTOR_FRENADO
 * @param pwm: Valor PWM (0-1000)
 */
void set_motor_der(motor_estado_t estado, uint16_t pwm)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	460a      	mov	r2, r1
 8000972:	71fb      	strb	r3, [r7, #7]
 8000974:	4613      	mov	r3, r2
 8000976:	80bb      	strh	r3, [r7, #4]
    switch (estado)
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d002      	beq.n	8000984 <set_motor_der+0x1c>
 800097e:	2b01      	cmp	r3, #1
 8000980:	d00d      	beq.n	800099e <set_motor_der+0x36>
 8000982:	e019      	b.n	80009b8 <set_motor_der+0x50>
    {
    case MOTOR_AVANCE:
        HAL_GPIO_WritePin(MD0_GPIO_Port, MD0_Pin, GPIO_PIN_SET);   // MD0 = 1
 8000984:	2201      	movs	r2, #1
 8000986:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800098a:	4817      	ldr	r0, [pc, #92]	@ (80009e8 <set_motor_der+0x80>)
 800098c:	f003 f864 	bl	8003a58 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MD1_GPIO_Port, MD1_Pin, GPIO_PIN_RESET); // MD1 = 0
 8000990:	2200      	movs	r2, #0
 8000992:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000996:	4814      	ldr	r0, [pc, #80]	@ (80009e8 <set_motor_der+0x80>)
 8000998:	f003 f85e 	bl	8003a58 <HAL_GPIO_WritePin>
        break;
 800099c:	e01b      	b.n	80009d6 <set_motor_der+0x6e>

    case MOTOR_RETROCESO:
        HAL_GPIO_WritePin(MD0_GPIO_Port, MD0_Pin, GPIO_PIN_RESET); // MD0 = 0
 800099e:	2200      	movs	r2, #0
 80009a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009a4:	4810      	ldr	r0, [pc, #64]	@ (80009e8 <set_motor_der+0x80>)
 80009a6:	f003 f857 	bl	8003a58 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MD1_GPIO_Port, MD1_Pin, GPIO_PIN_SET);   // MD1 = 1
 80009aa:	2201      	movs	r2, #1
 80009ac:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009b0:	480d      	ldr	r0, [pc, #52]	@ (80009e8 <set_motor_der+0x80>)
 80009b2:	f003 f851 	bl	8003a58 <HAL_GPIO_WritePin>
        break;
 80009b6:	e00e      	b.n	80009d6 <set_motor_der+0x6e>

    case MOTOR_FRENADO:
    default:
        HAL_GPIO_WritePin(MD0_GPIO_Port, MD0_Pin, GPIO_PIN_RESET); // MD0 = 0
 80009b8:	2200      	movs	r2, #0
 80009ba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009be:	480a      	ldr	r0, [pc, #40]	@ (80009e8 <set_motor_der+0x80>)
 80009c0:	f003 f84a 	bl	8003a58 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MD1_GPIO_Port, MD1_Pin, GPIO_PIN_RESET); // MD1 = 0
 80009c4:	2200      	movs	r2, #0
 80009c6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009ca:	4807      	ldr	r0, [pc, #28]	@ (80009e8 <set_motor_der+0x80>)
 80009cc:	f003 f844 	bl	8003a58 <HAL_GPIO_WritePin>
        pwm = 0;                                                   // Forzar PWM a 0 en frenado
 80009d0:	2300      	movs	r3, #0
 80009d2:	80bb      	strh	r3, [r7, #4]
        break;
 80009d4:	bf00      	nop
    }

    // Establecer VELOCIDAD
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, pwm);
 80009d6:	4b05      	ldr	r3, [pc, #20]	@ (80009ec <set_motor_der+0x84>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	88ba      	ldrh	r2, [r7, #4]
 80009dc:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40020400 	.word	0x40020400
 80009ec:	200002a0 	.word	0x200002a0

080009f0 <avanza>:

/**
 * @brief Avanza con ambos motores
 */
void avanza(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
    set_motor_izq(MOTOR_AVANCE, velocidad_actual_izq);
 80009f4:	4b06      	ldr	r3, [pc, #24]	@ (8000a10 <avanza+0x20>)
 80009f6:	881b      	ldrh	r3, [r3, #0]
 80009f8:	4619      	mov	r1, r3
 80009fa:	2000      	movs	r0, #0
 80009fc:	f7ff ff70 	bl	80008e0 <set_motor_izq>
    set_motor_der(MOTOR_AVANCE, velocidad_actual_der);
 8000a00:	4b04      	ldr	r3, [pc, #16]	@ (8000a14 <avanza+0x24>)
 8000a02:	881b      	ldrh	r3, [r3, #0]
 8000a04:	4619      	mov	r1, r3
 8000a06:	2000      	movs	r0, #0
 8000a08:	f7ff ffae 	bl	8000968 <set_motor_der>
}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	2000000c 	.word	0x2000000c
 8000a14:	2000000e 	.word	0x2000000e

08000a18 <gira90izq>:
/**
 * @brief Gira 90 grados a la izquierda y luego continúa avanzando
 * Motor izq retrocede, motor der avanza
 */
brujula gira90izq(brujula sentido)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	71fb      	strb	r3, [r7, #7]
    set_motor_izq(MOTOR_RETROCESO, velocidad_giro_actual_izq);
 8000a22:	4b18      	ldr	r3, [pc, #96]	@ (8000a84 <gira90izq+0x6c>)
 8000a24:	881b      	ldrh	r3, [r3, #0]
 8000a26:	4619      	mov	r1, r3
 8000a28:	2001      	movs	r0, #1
 8000a2a:	f7ff ff59 	bl	80008e0 <set_motor_izq>
    set_motor_der(MOTOR_AVANCE, velocidad_giro_actual_der);
 8000a2e:	4b16      	ldr	r3, [pc, #88]	@ (8000a88 <gira90izq+0x70>)
 8000a30:	881b      	ldrh	r3, [r3, #0]
 8000a32:	4619      	mov	r1, r3
 8000a34:	2000      	movs	r0, #0
 8000a36:	f7ff ff97 	bl	8000968 <set_motor_der>

    HAL_Delay(TIEMPO_GIRO_90_IZQ);
 8000a3a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a3e:	f001 fceb 	bl	8002418 <HAL_Delay>
    switch (sentido)
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	2b03      	cmp	r3, #3
 8000a46:	d817      	bhi.n	8000a78 <gira90izq+0x60>
 8000a48:	a201      	add	r2, pc, #4	@ (adr r2, 8000a50 <gira90izq+0x38>)
 8000a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a4e:	bf00      	nop
 8000a50:	08000a61 	.word	0x08000a61
 8000a54:	08000a67 	.word	0x08000a67
 8000a58:	08000a6d 	.word	0x08000a6d
 8000a5c:	08000a73 	.word	0x08000a73
    {
    case norte:
        sentido = oeste;
 8000a60:	2303      	movs	r3, #3
 8000a62:	71fb      	strb	r3, [r7, #7]
        break;
 8000a64:	e008      	b.n	8000a78 <gira90izq+0x60>

    case este:
        sentido = norte;
 8000a66:	2300      	movs	r3, #0
 8000a68:	71fb      	strb	r3, [r7, #7]
        break;
 8000a6a:	e005      	b.n	8000a78 <gira90izq+0x60>

    case sur:
        sentido = este;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	71fb      	strb	r3, [r7, #7]
        break;
 8000a70:	e002      	b.n	8000a78 <gira90izq+0x60>

    case oeste:
        sentido = sur;
 8000a72:	2302      	movs	r3, #2
 8000a74:	71fb      	strb	r3, [r7, #7]
        break;
 8000a76:	bf00      	nop
    // Después del giro, continuar avanzando
    //avanza();

    // termina de girar y verifica que no halla un muro adelante

    return sentido;
 8000a78:	79fb      	ldrb	r3, [r7, #7]
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000010 	.word	0x20000010
 8000a88:	20000012 	.word	0x20000012

08000a8c <gira90der>:
/**
 * @brief Gira 90 grados a la derecha y luego continúa avanzando
 * Motor der retrocede, motor izq avanza
 */
brujula gira90der(brujula sentido)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	4603      	mov	r3, r0
 8000a94:	71fb      	strb	r3, [r7, #7]
    set_motor_izq(MOTOR_AVANCE, velocidad_giro_actual_izq);
 8000a96:	4b18      	ldr	r3, [pc, #96]	@ (8000af8 <gira90der+0x6c>)
 8000a98:	881b      	ldrh	r3, [r3, #0]
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	f7ff ff1f 	bl	80008e0 <set_motor_izq>
    set_motor_der(MOTOR_RETROCESO, velocidad_giro_actual_der);
 8000aa2:	4b16      	ldr	r3, [pc, #88]	@ (8000afc <gira90der+0x70>)
 8000aa4:	881b      	ldrh	r3, [r3, #0]
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	f7ff ff5d 	bl	8000968 <set_motor_der>

    HAL_Delay(TIEMPO_GIRO_90_DER);
 8000aae:	f240 2026 	movw	r0, #550	@ 0x226
 8000ab2:	f001 fcb1 	bl	8002418 <HAL_Delay>
    switch (sentido)
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	2b03      	cmp	r3, #3
 8000aba:	d817      	bhi.n	8000aec <gira90der+0x60>
 8000abc:	a201      	add	r2, pc, #4	@ (adr r2, 8000ac4 <gira90der+0x38>)
 8000abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ac2:	bf00      	nop
 8000ac4:	08000ad5 	.word	0x08000ad5
 8000ac8:	08000adb 	.word	0x08000adb
 8000acc:	08000ae1 	.word	0x08000ae1
 8000ad0:	08000ae7 	.word	0x08000ae7
    {
    case norte:
        sentido = este;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	71fb      	strb	r3, [r7, #7]
        break;
 8000ad8:	e008      	b.n	8000aec <gira90der+0x60>

    case este:
        sentido = sur;
 8000ada:	2302      	movs	r3, #2
 8000adc:	71fb      	strb	r3, [r7, #7]
        break;
 8000ade:	e005      	b.n	8000aec <gira90der+0x60>

    case sur:
        sentido = oeste;
 8000ae0:	2303      	movs	r3, #3
 8000ae2:	71fb      	strb	r3, [r7, #7]
        break;
 8000ae4:	e002      	b.n	8000aec <gira90der+0x60>

    case oeste:
        sentido = norte;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	71fb      	strb	r3, [r7, #7]
        break;
 8000aea:	bf00      	nop
    }

    // Después del giro, continuar avanzando
    //avanza();
    
    return sentido;
 8000aec:	79fb      	ldrb	r3, [r7, #7]
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000010 	.word	0x20000010
 8000afc:	20000012 	.word	0x20000012

08000b00 <gira180>:
/**
 * @brief Gira 180 grados y luego continúa avanzando
 * Motor der retrocede, motor izq avanza
 */
brujula gira180(brujula sentido)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	71fb      	strb	r3, [r7, #7]
    set_motor_izq(MOTOR_AVANCE, velocidad_giro_actual_izq);
 8000b0a:	4b18      	ldr	r3, [pc, #96]	@ (8000b6c <gira180+0x6c>)
 8000b0c:	881b      	ldrh	r3, [r3, #0]
 8000b0e:	4619      	mov	r1, r3
 8000b10:	2000      	movs	r0, #0
 8000b12:	f7ff fee5 	bl	80008e0 <set_motor_izq>
    set_motor_der(MOTOR_RETROCESO, velocidad_giro_actual_der);
 8000b16:	4b16      	ldr	r3, [pc, #88]	@ (8000b70 <gira180+0x70>)
 8000b18:	881b      	ldrh	r3, [r3, #0]
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	2001      	movs	r0, #1
 8000b1e:	f7ff ff23 	bl	8000968 <set_motor_der>

    HAL_Delay(TIEMPO_GIRO_180);
 8000b22:	f240 404c 	movw	r0, #1100	@ 0x44c
 8000b26:	f001 fc77 	bl	8002418 <HAL_Delay>
    switch (sentido)
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	2b03      	cmp	r3, #3
 8000b2e:	d817      	bhi.n	8000b60 <gira180+0x60>
 8000b30:	a201      	add	r2, pc, #4	@ (adr r2, 8000b38 <gira180+0x38>)
 8000b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b36:	bf00      	nop
 8000b38:	08000b49 	.word	0x08000b49
 8000b3c:	08000b4f 	.word	0x08000b4f
 8000b40:	08000b55 	.word	0x08000b55
 8000b44:	08000b5b 	.word	0x08000b5b
    {
    case norte:
        sentido = sur;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	71fb      	strb	r3, [r7, #7]
        break;
 8000b4c:	e008      	b.n	8000b60 <gira180+0x60>

    case este:
        sentido = oeste;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	71fb      	strb	r3, [r7, #7]
        break;
 8000b52:	e005      	b.n	8000b60 <gira180+0x60>

    case sur:
        sentido = norte;
 8000b54:	2300      	movs	r3, #0
 8000b56:	71fb      	strb	r3, [r7, #7]
        break;
 8000b58:	e002      	b.n	8000b60 <gira180+0x60>

    case oeste:
        sentido = este;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	71fb      	strb	r3, [r7, #7]
        break;
 8000b5e:	bf00      	nop
    }

    // Después del giro, continuar avanzando
    //avanza();
    return sentido;
 8000b60:	79fb      	ldrb	r3, [r7, #7]
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000010 	.word	0x20000010
 8000b70:	20000012 	.word	0x20000012

08000b74 <termino>:

/**
 * @brief Detiene ambos motores (cuando ganemos)
 */
void termino(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
    set_motor_izq(MOTOR_FRENADO, 0);
 8000b78:	2100      	movs	r1, #0
 8000b7a:	2002      	movs	r0, #2
 8000b7c:	f7ff feb0 	bl	80008e0 <set_motor_izq>
    set_motor_der(MOTOR_FRENADO, 0);
 8000b80:	2100      	movs	r1, #0
 8000b82:	2002      	movs	r0, #2
 8000b84:	f7ff fef0 	bl	8000968 <set_motor_der>
}
 8000b88:	bf00      	nop
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <correccion_izquierda>:
 * @details Reduce velocidad del motor izquierdo temporalmente para corregir
 *          la trayectoria cuando el robot se desvía hacia la derecha
 * @note Se interrumpe automáticamente si se detecta línea
 */
void correccion_izquierda(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 100); // Motor izq más lento
 8000b92:	4b12      	ldr	r3, [pc, #72]	@ (8000bdc <correccion_izquierda+0x50>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	2264      	movs	r2, #100	@ 0x64
 8000b98:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 700); // Motor der normal
 8000b9a:	4b10      	ldr	r3, [pc, #64]	@ (8000bdc <correccion_izquierda+0x50>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 8000ba2:	641a      	str	r2, [r3, #64]	@ 0x40
     for (int i = 0; i < 7; i++)                       // 10 ciclos de 10 ms = 100 ms de corrección
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	e00f      	b.n	8000bca <correccion_izquierda+0x3e>
    {
        if (flag_linea_detectada || flag_muro_detectado)
 8000baa:	4b0d      	ldr	r3, [pc, #52]	@ (8000be0 <correccion_izquierda+0x54>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d10e      	bne.n	8000bd2 <correccion_izquierda+0x46>
 8000bb4:	4b0b      	ldr	r3, [pc, #44]	@ (8000be4 <correccion_izquierda+0x58>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d109      	bne.n	8000bd2 <correccion_izquierda+0x46>
            return; // Salir si hay algo urgente

        HAL_Delay(10);
 8000bbe:	200a      	movs	r0, #10
 8000bc0:	f001 fc2a 	bl	8002418 <HAL_Delay>
     for (int i = 0; i < 7; i++)                       // 10 ciclos de 10 ms = 100 ms de corrección
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	607b      	str	r3, [r7, #4]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2b06      	cmp	r3, #6
 8000bce:	ddec      	ble.n	8000baa <correccion_izquierda+0x1e>
 8000bd0:	e000      	b.n	8000bd4 <correccion_izquierda+0x48>
            return; // Salir si hay algo urgente
 8000bd2:	bf00      	nop
    } 
}
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	200002a0 	.word	0x200002a0
 8000be0:	200004c4 	.word	0x200004c4
 8000be4:	200004c5 	.word	0x200004c5

08000be8 <correccion_derecha>:
 * @details Reduce velocidad del motor derecho temporalmente para corregir
 *          la trayectoria cuando el robot se desvía hacia la izquierda
 * @note Se interrumpe automáticamente si se detecta línea o muro
 */
void correccion_derecha(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 700); // Motor izq normal
 8000bee:	4b12      	ldr	r3, [pc, #72]	@ (8000c38 <correccion_derecha+0x50>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 8000bf6:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 100); // Motor der más lento
 8000bf8:	4b0f      	ldr	r3, [pc, #60]	@ (8000c38 <correccion_derecha+0x50>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2264      	movs	r2, #100	@ 0x64
 8000bfe:	641a      	str	r2, [r3, #64]	@ 0x40
     for (int i = 0; i < 7; i++)                       // 10 ciclos de 10 ms = 100 ms de corrección
 8000c00:	2300      	movs	r3, #0
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	e00f      	b.n	8000c26 <correccion_derecha+0x3e>
    {
        if (flag_linea_detectada || flag_muro_detectado)
 8000c06:	4b0d      	ldr	r3, [pc, #52]	@ (8000c3c <correccion_derecha+0x54>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d10e      	bne.n	8000c2e <correccion_derecha+0x46>
 8000c10:	4b0b      	ldr	r3, [pc, #44]	@ (8000c40 <correccion_derecha+0x58>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d109      	bne.n	8000c2e <correccion_derecha+0x46>
            return; // Salir si hay algo urgente

        HAL_Delay(10);
 8000c1a:	200a      	movs	r0, #10
 8000c1c:	f001 fbfc 	bl	8002418 <HAL_Delay>
     for (int i = 0; i < 7; i++)                       // 10 ciclos de 10 ms = 100 ms de corrección
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	3301      	adds	r3, #1
 8000c24:	607b      	str	r3, [r7, #4]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2b06      	cmp	r3, #6
 8000c2a:	ddec      	ble.n	8000c06 <correccion_derecha+0x1e>
 8000c2c:	e000      	b.n	8000c30 <correccion_derecha+0x48>
            return; // Salir si hay algo urgente
 8000c2e:	bf00      	nop
    } 
}
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	200002a0 	.word	0x200002a0
 8000c3c:	200004c4 	.word	0x200004c4
 8000c40:	200004c5 	.word	0x200004c5

08000c44 <laberinto_init>:
 * - Peso inicial calculado como distancia Manhattan a la meta
 * - Sin muros inicialmente (laberinto abierto)
 * - Meta en (1,1) con peso 0
 */
void laberinto_init(void)
{
 8000c44:	b490      	push	{r4, r7}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
    // Inicializar cada casilla
    for (uint8_t fila = 1; fila <= TAMAÑO_LABERINTO; fila++)
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	71fb      	strb	r3, [r7, #7]
 8000c4e:	e075      	b.n	8000d3c <laberinto_init+0xf8>
    {
        for (uint8_t columna = 1; columna <= TAMAÑO_LABERINTO; columna++)
 8000c50:	2301      	movs	r3, #1
 8000c52:	71bb      	strb	r3, [r7, #6]
 8000c54:	e06c      	b.n	8000d30 <laberinto_init+0xec>
        {

            // Configurar identificación
            laberinto[fila - 1][columna - 1].posicion.fila = fila;
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	1e59      	subs	r1, r3, #1
 8000c5a:	79bb      	ldrb	r3, [r7, #6]
 8000c5c:	3b01      	subs	r3, #1
 8000c5e:	483d      	ldr	r0, [pc, #244]	@ (8000d54 <laberinto_init+0x110>)
 8000c60:	461a      	mov	r2, r3
 8000c62:	00d2      	lsls	r2, r2, #3
 8000c64:	1ad2      	subs	r2, r2, r3
 8000c66:	460b      	mov	r3, r1
 8000c68:	00db      	lsls	r3, r3, #3
 8000c6a:	1a5b      	subs	r3, r3, r1
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	4413      	add	r3, r2
 8000c70:	4403      	add	r3, r0
 8000c72:	79fa      	ldrb	r2, [r7, #7]
 8000c74:	701a      	strb	r2, [r3, #0]
            laberinto[fila - 1][columna - 1].posicion.columna = columna;
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	1e59      	subs	r1, r3, #1
 8000c7a:	79bb      	ldrb	r3, [r7, #6]
 8000c7c:	3b01      	subs	r3, #1
 8000c7e:	4835      	ldr	r0, [pc, #212]	@ (8000d54 <laberinto_init+0x110>)
 8000c80:	461a      	mov	r2, r3
 8000c82:	00d2      	lsls	r2, r2, #3
 8000c84:	1ad2      	subs	r2, r2, r3
 8000c86:	460b      	mov	r3, r1
 8000c88:	00db      	lsls	r3, r3, #3
 8000c8a:	1a5b      	subs	r3, r3, r1
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	4413      	add	r3, r2
 8000c90:	4403      	add	r3, r0
 8000c92:	3301      	adds	r3, #1
 8000c94:	79ba      	ldrb	r2, [r7, #6]
 8000c96:	701a      	strb	r2, [r3, #0]

            // Calcular peso inicial (distancia jaja sape a la meta)
            uint8_t distancia_fila = (fila > POSICION_META_FILA) ? (fila - POSICION_META_FILA) : (POSICION_META_FILA - fila);
 8000c98:	79fb      	ldrb	r3, [r7, #7]
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d903      	bls.n	8000ca6 <laberinto_init+0x62>
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	3b01      	subs	r3, #1
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	e003      	b.n	8000cae <laberinto_init+0x6a>
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	f1c3 0301 	rsb	r3, r3, #1
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	713b      	strb	r3, [r7, #4]
            uint8_t distancia_columna = (columna > POSICION_META_COLUMNA) ? (columna - POSICION_META_COLUMNA) : (POSICION_META_COLUMNA - columna);
 8000cb0:	79bb      	ldrb	r3, [r7, #6]
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d903      	bls.n	8000cbe <laberinto_init+0x7a>
 8000cb6:	79bb      	ldrb	r3, [r7, #6]
 8000cb8:	3b01      	subs	r3, #1
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	e003      	b.n	8000cc6 <laberinto_init+0x82>
 8000cbe:	79bb      	ldrb	r3, [r7, #6]
 8000cc0:	f1c3 0301 	rsb	r3, r3, #1
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	70fb      	strb	r3, [r7, #3]

            laberinto[fila - 1][columna - 1].peso = distancia_fila + distancia_columna;
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	1e59      	subs	r1, r3, #1
 8000ccc:	79bb      	ldrb	r3, [r7, #6]
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	7938      	ldrb	r0, [r7, #4]
 8000cd2:	78fa      	ldrb	r2, [r7, #3]
 8000cd4:	4402      	add	r2, r0
 8000cd6:	b2d4      	uxtb	r4, r2
 8000cd8:	481e      	ldr	r0, [pc, #120]	@ (8000d54 <laberinto_init+0x110>)
 8000cda:	461a      	mov	r2, r3
 8000cdc:	00d2      	lsls	r2, r2, #3
 8000cde:	1ad2      	subs	r2, r2, r3
 8000ce0:	460b      	mov	r3, r1
 8000ce2:	00db      	lsls	r3, r3, #3
 8000ce4:	1a5b      	subs	r3, r3, r1
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	4413      	add	r3, r2
 8000cea:	4403      	add	r3, r0
 8000cec:	3302      	adds	r3, #2
 8000cee:	4622      	mov	r2, r4
 8000cf0:	701a      	strb	r2, [r3, #0]

            // Inicializar sin muros
            for (uint8_t dir = 0; dir < 4; dir++)
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	717b      	strb	r3, [r7, #5]
 8000cf6:	e015      	b.n	8000d24 <laberinto_init+0xe0>
            {
                laberinto[fila - 1][columna - 1].muros[dir] = false;
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	1e59      	subs	r1, r3, #1
 8000cfc:	79bb      	ldrb	r3, [r7, #6]
 8000cfe:	3b01      	subs	r3, #1
 8000d00:	7978      	ldrb	r0, [r7, #5]
 8000d02:	4c14      	ldr	r4, [pc, #80]	@ (8000d54 <laberinto_init+0x110>)
 8000d04:	461a      	mov	r2, r3
 8000d06:	00d2      	lsls	r2, r2, #3
 8000d08:	1ad2      	subs	r2, r2, r3
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	00db      	lsls	r3, r3, #3
 8000d0e:	1a5b      	subs	r3, r3, r1
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	4413      	add	r3, r2
 8000d14:	4423      	add	r3, r4
 8000d16:	4403      	add	r3, r0
 8000d18:	3303      	adds	r3, #3
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	701a      	strb	r2, [r3, #0]
            for (uint8_t dir = 0; dir < 4; dir++)
 8000d1e:	797b      	ldrb	r3, [r7, #5]
 8000d20:	3301      	adds	r3, #1
 8000d22:	717b      	strb	r3, [r7, #5]
 8000d24:	797b      	ldrb	r3, [r7, #5]
 8000d26:	2b03      	cmp	r3, #3
 8000d28:	d9e6      	bls.n	8000cf8 <laberinto_init+0xb4>
        for (uint8_t columna = 1; columna <= TAMAÑO_LABERINTO; columna++)
 8000d2a:	79bb      	ldrb	r3, [r7, #6]
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	71bb      	strb	r3, [r7, #6]
 8000d30:	79bb      	ldrb	r3, [r7, #6]
 8000d32:	2b04      	cmp	r3, #4
 8000d34:	d98f      	bls.n	8000c56 <laberinto_init+0x12>
    for (uint8_t fila = 1; fila <= TAMAÑO_LABERINTO; fila++)
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	71fb      	strb	r3, [r7, #7]
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	2b04      	cmp	r3, #4
 8000d40:	d986      	bls.n	8000c50 <laberinto_init+0xc>
            }
        }
    }

    // La meta tiene peso 0
    laberinto[POSICION_META_FILA - 1][POSICION_META_COLUMNA - 1].peso = 0;
 8000d42:	4b04      	ldr	r3, [pc, #16]	@ (8000d54 <laberinto_init+0x110>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	709a      	strb	r2, [r3, #2]
}
 8000d48:	bf00      	nop
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bc90      	pop	{r4, r7}
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	200000dc 	.word	0x200000dc

08000d58 <laberinto_get_peso>:
 * @param fila Fila de la casilla 
 * @param columna Columna de la casilla 
 * @return Peso de la casilla, PESO_MAXIMO si posición inválida
 */
uint8_t laberinto_get_peso(uint8_t fila, uint8_t columna)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	460a      	mov	r2, r1
 8000d62:	71fb      	strb	r3, [r7, #7]
 8000d64:	4613      	mov	r3, r2
 8000d66:	71bb      	strb	r3, [r7, #6]
    if (!laberinto_posicion_valida(fila, columna))
 8000d68:	79ba      	ldrb	r2, [r7, #6]
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
 8000d6c:	4611      	mov	r1, r2
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f000 f996 	bl	80010a0 <laberinto_posicion_valida>
 8000d74:	4603      	mov	r3, r0
 8000d76:	f083 0301 	eor.w	r3, r3, #1
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <laberinto_get_peso+0x2c>
    {
        return PESO_MAXIMO;
 8000d80:	23ff      	movs	r3, #255	@ 0xff
 8000d82:	e00f      	b.n	8000da4 <laberinto_get_peso+0x4c>
    }

    return laberinto[fila - 1][columna - 1].peso;
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	1e59      	subs	r1, r3, #1
 8000d88:	79bb      	ldrb	r3, [r7, #6]
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	4807      	ldr	r0, [pc, #28]	@ (8000dac <laberinto_get_peso+0x54>)
 8000d8e:	461a      	mov	r2, r3
 8000d90:	00d2      	lsls	r2, r2, #3
 8000d92:	1ad2      	subs	r2, r2, r3
 8000d94:	460b      	mov	r3, r1
 8000d96:	00db      	lsls	r3, r3, #3
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	4413      	add	r3, r2
 8000d9e:	4403      	add	r3, r0
 8000da0:	3302      	adds	r3, #2
 8000da2:	781b      	ldrb	r3, [r3, #0]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	200000dc 	.word	0x200000dc

08000db0 <laberinto_set_muro>:
 * 1. Marca el muro en la casilla actual
 * 2. Marca el muro opuesto en la casilla adyacente
 * 3. Recalcula todos los pesos con Flood Fill
 */
void laberinto_set_muro(uint8_t fila, uint8_t columna, brujula direccion)
{
 8000db0:	b590      	push	{r4, r7, lr}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	71fb      	strb	r3, [r7, #7]
 8000dba:	460b      	mov	r3, r1
 8000dbc:	71bb      	strb	r3, [r7, #6]
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	717b      	strb	r3, [r7, #5]
    if (!laberinto_posicion_valida(fila, columna))
 8000dc2:	79ba      	ldrb	r2, [r7, #6]
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	4611      	mov	r1, r2
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f000 f969 	bl	80010a0 <laberinto_posicion_valida>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	f083 0301 	eor.w	r3, r3, #1
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d146      	bne.n	8000e68 <laberinto_set_muro+0xb8>
    {
        return;
    }

    // Marcar muro en casilla actual
    laberinto[fila - 1][columna - 1].muros[direccion] = true;
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	1e59      	subs	r1, r3, #1
 8000dde:	79bb      	ldrb	r3, [r7, #6]
 8000de0:	3b01      	subs	r3, #1
 8000de2:	7978      	ldrb	r0, [r7, #5]
 8000de4:	4c22      	ldr	r4, [pc, #136]	@ (8000e70 <laberinto_set_muro+0xc0>)
 8000de6:	461a      	mov	r2, r3
 8000de8:	00d2      	lsls	r2, r2, #3
 8000dea:	1ad2      	subs	r2, r2, r3
 8000dec:	460b      	mov	r3, r1
 8000dee:	00db      	lsls	r3, r3, #3
 8000df0:	1a5b      	subs	r3, r3, r1
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	4413      	add	r3, r2
 8000df6:	4423      	add	r3, r4
 8000df8:	4403      	add	r3, r0
 8000dfa:	3303      	adds	r3, #3
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	701a      	strb	r2, [r3, #0]

    // Marcar muro en casilla adyacente (si existe)
    posicion_t pos_adyacente = laberinto_get_posicion_adyacente(
        (posicion_t){fila, columna}, direccion);
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	723b      	strb	r3, [r7, #8]
 8000e04:	79bb      	ldrb	r3, [r7, #6]
 8000e06:	727b      	strb	r3, [r7, #9]
    posicion_t pos_adyacente = laberinto_get_posicion_adyacente(
 8000e08:	797b      	ldrb	r3, [r7, #5]
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	68b8      	ldr	r0, [r7, #8]
 8000e0e:	f000 f90d 	bl	800102c <laberinto_get_posicion_adyacente>
 8000e12:	4603      	mov	r3, r0
 8000e14:	81bb      	strh	r3, [r7, #12]

    if (laberinto_posicion_valida(pos_adyacente.fila, pos_adyacente.columna))
 8000e16:	7b3b      	ldrb	r3, [r7, #12]
 8000e18:	7b7a      	ldrb	r2, [r7, #13]
 8000e1a:	4611      	mov	r1, r2
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f000 f93f 	bl	80010a0 <laberinto_posicion_valida>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d01c      	beq.n	8000e62 <laberinto_set_muro+0xb2>
    {
        // Dirección opuesta
        brujula direccion_opuesta = (direccion + 2) % 4;
 8000e28:	797b      	ldrb	r3, [r7, #5]
 8000e2a:	3302      	adds	r3, #2
 8000e2c:	425a      	negs	r2, r3
 8000e2e:	f003 0303 	and.w	r3, r3, #3
 8000e32:	f002 0203 	and.w	r2, r2, #3
 8000e36:	bf58      	it	pl
 8000e38:	4253      	negpl	r3, r2
 8000e3a:	73fb      	strb	r3, [r7, #15]
        laberinto[pos_adyacente.fila - 1][pos_adyacente.columna - 1].muros[direccion_opuesta] = true;
 8000e3c:	7b3b      	ldrb	r3, [r7, #12]
 8000e3e:	1e59      	subs	r1, r3, #1
 8000e40:	7b7b      	ldrb	r3, [r7, #13]
 8000e42:	3b01      	subs	r3, #1
 8000e44:	7bf8      	ldrb	r0, [r7, #15]
 8000e46:	4c0a      	ldr	r4, [pc, #40]	@ (8000e70 <laberinto_set_muro+0xc0>)
 8000e48:	461a      	mov	r2, r3
 8000e4a:	00d2      	lsls	r2, r2, #3
 8000e4c:	1ad2      	subs	r2, r2, r3
 8000e4e:	460b      	mov	r3, r1
 8000e50:	00db      	lsls	r3, r3, #3
 8000e52:	1a5b      	subs	r3, r3, r1
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	4413      	add	r3, r2
 8000e58:	4423      	add	r3, r4
 8000e5a:	4403      	add	r3, r0
 8000e5c:	3303      	adds	r3, #3
 8000e5e:	2201      	movs	r2, #1
 8000e60:	701a      	strb	r2, [r3, #0]
    }

    // Recalcular pesos después de agregar muro
    laberinto_recalcular_pesos();
 8000e62:	f000 f807 	bl	8000e74 <laberinto_recalcular_pesos>
 8000e66:	e000      	b.n	8000e6a <laberinto_set_muro+0xba>
        return;
 8000e68:	bf00      	nop
}
 8000e6a:	3714      	adds	r7, #20
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd90      	pop	{r4, r7, pc}
 8000e70:	200000dc 	.word	0x200000dc

08000e74 <laberinto_recalcular_pesos>:
 * 4. Itera hasta convergencia o máximo de iteraciones
 *
 * @note Protección contra bucles infinitos con MAX_ITERACIONES = 20
 */
void laberinto_recalcular_pesos(void)
{
 8000e74:	b590      	push	{r4, r7, lr}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
    bool cambio_detectado = true;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	73fb      	strb	r3, [r7, #15]
    uint8_t iteraciones = 0;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	73bb      	strb	r3, [r7, #14]
    const uint8_t MAX_ITERACIONES = 20; // Evitar bucles infinitos Protección contra boludos
 8000e82:	2314      	movs	r3, #20
 8000e84:	727b      	strb	r3, [r7, #9]

    // Algoritmo Flood Fill iterativo
    while (cambio_detectado && iteraciones < MAX_ITERACIONES)
 8000e86:	e092      	b.n	8000fae <laberinto_recalcular_pesos+0x13a>
    {
        cambio_detectado = false;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	73fb      	strb	r3, [r7, #15]
        iteraciones++;
 8000e8c:	7bbb      	ldrb	r3, [r7, #14]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	73bb      	strb	r3, [r7, #14]

        for (uint8_t fila = 1; fila <= TAMAÑO_LABERINTO; fila++) // se propaga desde (1,1) hacia afuera
 8000e92:	2301      	movs	r3, #1
 8000e94:	737b      	strb	r3, [r7, #13]
 8000e96:	e086      	b.n	8000fa6 <laberinto_recalcular_pesos+0x132>
        {
            for (uint8_t columna = 1; columna <= TAMAÑO_LABERINTO; columna++)
 8000e98:	2301      	movs	r3, #1
 8000e9a:	733b      	strb	r3, [r7, #12]
 8000e9c:	e07c      	b.n	8000f98 <laberinto_recalcular_pesos+0x124>
            {

                // No recalcular la meta
                if (fila == POSICION_META_FILA && columna == POSICION_META_COLUMNA)
 8000e9e:	7b7b      	ldrb	r3, [r7, #13]
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d102      	bne.n	8000eaa <laberinto_recalcular_pesos+0x36>
 8000ea4:	7b3b      	ldrb	r3, [r7, #12]
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d072      	beq.n	8000f90 <laberinto_recalcular_pesos+0x11c>
                {
                    continue;
                }

                uint8_t peso_minimo = PESO_MAXIMO;
 8000eaa:	23ff      	movs	r3, #255	@ 0xff
 8000eac:	72fb      	strb	r3, [r7, #11]

                // Verificar todas las direcciones adyacentes
                for (brujula dir = norte; dir <= oeste; dir++)
 8000eae:	2300      	movs	r3, #0
 8000eb0:	72bb      	strb	r3, [r7, #10]
 8000eb2:	e03a      	b.n	8000f2a <laberinto_recalcular_pesos+0xb6>
                {

                    // Saltar si hay muro en esta dirección
                    if (laberinto[fila - 1][columna - 1].muros[dir])
 8000eb4:	7b7b      	ldrb	r3, [r7, #13]
 8000eb6:	1e59      	subs	r1, r3, #1
 8000eb8:	7b3b      	ldrb	r3, [r7, #12]
 8000eba:	3b01      	subs	r3, #1
 8000ebc:	7ab8      	ldrb	r0, [r7, #10]
 8000ebe:	4c42      	ldr	r4, [pc, #264]	@ (8000fc8 <laberinto_recalcular_pesos+0x154>)
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	00d2      	lsls	r2, r2, #3
 8000ec4:	1ad2      	subs	r2, r2, r3
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	00db      	lsls	r3, r3, #3
 8000eca:	1a5b      	subs	r3, r3, r1
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	4413      	add	r3, r2
 8000ed0:	4423      	add	r3, r4
 8000ed2:	4403      	add	r3, r0
 8000ed4:	3303      	adds	r3, #3
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d122      	bne.n	8000f22 <laberinto_recalcular_pesos+0xae>
                    {
                        continue;
                    }

                    posicion_t pos_adyacente = laberinto_get_posicion_adyacente(
                        (posicion_t){fila, columna}, dir);
 8000edc:	7b7b      	ldrb	r3, [r7, #13]
 8000ede:	703b      	strb	r3, [r7, #0]
 8000ee0:	7b3b      	ldrb	r3, [r7, #12]
 8000ee2:	707b      	strb	r3, [r7, #1]
                    posicion_t pos_adyacente = laberinto_get_posicion_adyacente(
 8000ee4:	7abb      	ldrb	r3, [r7, #10]
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	6838      	ldr	r0, [r7, #0]
 8000eea:	f000 f89f 	bl	800102c <laberinto_get_posicion_adyacente>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	80bb      	strh	r3, [r7, #4]

                    if (laberinto_posicion_valida(pos_adyacente.fila, pos_adyacente.columna))
 8000ef2:	793b      	ldrb	r3, [r7, #4]
 8000ef4:	797a      	ldrb	r2, [r7, #5]
 8000ef6:	4611      	mov	r1, r2
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f000 f8d1 	bl	80010a0 <laberinto_posicion_valida>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d00f      	beq.n	8000f24 <laberinto_recalcular_pesos+0xb0>
                    {
                        uint8_t peso_adyacente = laberinto_get_peso(
 8000f04:	793b      	ldrb	r3, [r7, #4]
 8000f06:	797a      	ldrb	r2, [r7, #5]
 8000f08:	4611      	mov	r1, r2
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff ff24 	bl	8000d58 <laberinto_get_peso>
 8000f10:	4603      	mov	r3, r0
 8000f12:	71fb      	strb	r3, [r7, #7]
                            pos_adyacente.fila, pos_adyacente.columna);

                        if (peso_adyacente < peso_minimo)
 8000f14:	79fa      	ldrb	r2, [r7, #7]
 8000f16:	7afb      	ldrb	r3, [r7, #11]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d203      	bcs.n	8000f24 <laberinto_recalcular_pesos+0xb0>
                        {
                            peso_minimo = peso_adyacente;
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
 8000f1e:	72fb      	strb	r3, [r7, #11]
 8000f20:	e000      	b.n	8000f24 <laberinto_recalcular_pesos+0xb0>
                        continue;
 8000f22:	bf00      	nop
                for (brujula dir = norte; dir <= oeste; dir++)
 8000f24:	7abb      	ldrb	r3, [r7, #10]
 8000f26:	3301      	adds	r3, #1
 8000f28:	72bb      	strb	r3, [r7, #10]
 8000f2a:	7abb      	ldrb	r3, [r7, #10]
 8000f2c:	2b03      	cmp	r3, #3
 8000f2e:	d9c1      	bls.n	8000eb4 <laberinto_recalcular_pesos+0x40>
                        }
                    }
                }

                // Nuevo peso = menor peso adyacente + 1
                uint8_t nuevo_peso = (peso_minimo == PESO_MAXIMO) ? PESO_MAXIMO : peso_minimo + 1;
 8000f30:	7afb      	ldrb	r3, [r7, #11]
 8000f32:	2bff      	cmp	r3, #255	@ 0xff
 8000f34:	d003      	beq.n	8000f3e <laberinto_recalcular_pesos+0xca>
 8000f36:	7afb      	ldrb	r3, [r7, #11]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	e000      	b.n	8000f40 <laberinto_recalcular_pesos+0xcc>
 8000f3e:	23ff      	movs	r3, #255	@ 0xff
 8000f40:	723b      	strb	r3, [r7, #8]

                // Actualizar si hay cambio
                if (nuevo_peso != laberinto[fila - 1][columna - 1].peso)
 8000f42:	7b7b      	ldrb	r3, [r7, #13]
 8000f44:	1e59      	subs	r1, r3, #1
 8000f46:	7b3b      	ldrb	r3, [r7, #12]
 8000f48:	3b01      	subs	r3, #1
 8000f4a:	481f      	ldr	r0, [pc, #124]	@ (8000fc8 <laberinto_recalcular_pesos+0x154>)
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	00d2      	lsls	r2, r2, #3
 8000f50:	1ad2      	subs	r2, r2, r3
 8000f52:	460b      	mov	r3, r1
 8000f54:	00db      	lsls	r3, r3, #3
 8000f56:	1a5b      	subs	r3, r3, r1
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	4413      	add	r3, r2
 8000f5c:	4403      	add	r3, r0
 8000f5e:	3302      	adds	r3, #2
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	7a3a      	ldrb	r2, [r7, #8]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d014      	beq.n	8000f92 <laberinto_recalcular_pesos+0x11e>
                {
                    laberinto[fila - 1][columna - 1].peso = nuevo_peso;
 8000f68:	7b7b      	ldrb	r3, [r7, #13]
 8000f6a:	1e59      	subs	r1, r3, #1
 8000f6c:	7b3b      	ldrb	r3, [r7, #12]
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	4815      	ldr	r0, [pc, #84]	@ (8000fc8 <laberinto_recalcular_pesos+0x154>)
 8000f72:	461a      	mov	r2, r3
 8000f74:	00d2      	lsls	r2, r2, #3
 8000f76:	1ad2      	subs	r2, r2, r3
 8000f78:	460b      	mov	r3, r1
 8000f7a:	00db      	lsls	r3, r3, #3
 8000f7c:	1a5b      	subs	r3, r3, r1
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	4413      	add	r3, r2
 8000f82:	4403      	add	r3, r0
 8000f84:	3302      	adds	r3, #2
 8000f86:	7a3a      	ldrb	r2, [r7, #8]
 8000f88:	701a      	strb	r2, [r3, #0]
                    cambio_detectado = true;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	73fb      	strb	r3, [r7, #15]
 8000f8e:	e000      	b.n	8000f92 <laberinto_recalcular_pesos+0x11e>
                    continue;
 8000f90:	bf00      	nop
            for (uint8_t columna = 1; columna <= TAMAÑO_LABERINTO; columna++)
 8000f92:	7b3b      	ldrb	r3, [r7, #12]
 8000f94:	3301      	adds	r3, #1
 8000f96:	733b      	strb	r3, [r7, #12]
 8000f98:	7b3b      	ldrb	r3, [r7, #12]
 8000f9a:	2b04      	cmp	r3, #4
 8000f9c:	f67f af7f 	bls.w	8000e9e <laberinto_recalcular_pesos+0x2a>
        for (uint8_t fila = 1; fila <= TAMAÑO_LABERINTO; fila++) // se propaga desde (1,1) hacia afuera
 8000fa0:	7b7b      	ldrb	r3, [r7, #13]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	737b      	strb	r3, [r7, #13]
 8000fa6:	7b7b      	ldrb	r3, [r7, #13]
 8000fa8:	2b04      	cmp	r3, #4
 8000faa:	f67f af75 	bls.w	8000e98 <laberinto_recalcular_pesos+0x24>
    while (cambio_detectado && iteraciones < MAX_ITERACIONES)
 8000fae:	7bfb      	ldrb	r3, [r7, #15]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d004      	beq.n	8000fbe <laberinto_recalcular_pesos+0x14a>
 8000fb4:	7bba      	ldrb	r2, [r7, #14]
 8000fb6:	7a7b      	ldrb	r3, [r7, #9]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	f4ff af65 	bcc.w	8000e88 <laberinto_recalcular_pesos+0x14>
                }
            }
        }
    }
}
 8000fbe:	bf00      	nop
 8000fc0:	3714      	adds	r7, #20
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd90      	pop	{r4, r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	200000dc 	.word	0x200000dc

08000fcc <laberinto_hay_muro>:
 * @param columna Columna de la casilla a verificar
 * @param direccion Dirección a verificar (norte, este, sur, oeste)
 * @return true si hay muro o posición inválida, false si está libre
 */
bool laberinto_hay_muro(uint8_t fila, uint8_t columna, brujula direccion)
{
 8000fcc:	b590      	push	{r4, r7, lr}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	71fb      	strb	r3, [r7, #7]
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	71bb      	strb	r3, [r7, #6]
 8000fda:	4613      	mov	r3, r2
 8000fdc:	717b      	strb	r3, [r7, #5]
    if (!laberinto_posicion_valida(fila, columna))
 8000fde:	79ba      	ldrb	r2, [r7, #6]
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	4611      	mov	r1, r2
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f000 f85b 	bl	80010a0 <laberinto_posicion_valida>
 8000fea:	4603      	mov	r3, r0
 8000fec:	f083 0301 	eor.w	r3, r3, #1
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <laberinto_hay_muro+0x2e>
    {
        return true; // Considerar bordes como muros
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e011      	b.n	800101e <laberinto_hay_muro+0x52>
    }

    return laberinto[fila - 1][columna - 1].muros[direccion];
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	1e59      	subs	r1, r3, #1
 8000ffe:	79bb      	ldrb	r3, [r7, #6]
 8001000:	3b01      	subs	r3, #1
 8001002:	7978      	ldrb	r0, [r7, #5]
 8001004:	4c08      	ldr	r4, [pc, #32]	@ (8001028 <laberinto_hay_muro+0x5c>)
 8001006:	461a      	mov	r2, r3
 8001008:	00d2      	lsls	r2, r2, #3
 800100a:	1ad2      	subs	r2, r2, r3
 800100c:	460b      	mov	r3, r1
 800100e:	00db      	lsls	r3, r3, #3
 8001010:	1a5b      	subs	r3, r3, r1
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	4413      	add	r3, r2
 8001016:	4423      	add	r3, r4
 8001018:	4403      	add	r3, r0
 800101a:	3303      	adds	r3, #3
 800101c:	781b      	ldrb	r3, [r3, #0]
}
 800101e:	4618      	mov	r0, r3
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	bd90      	pop	{r4, r7, pc}
 8001026:	bf00      	nop
 8001028:	200000dc 	.word	0x200000dc

0800102c <laberinto_get_posicion_adyacente>:
 * @param pos_actual Posición de referencia
 * @param direccion Dirección de movimiento (norte, este, sur, oeste)
 * @return Nueva posición calculada (puede ser inválida si está fuera del laberinto)
 */
posicion_t laberinto_get_posicion_adyacente(posicion_t pos_actual, brujula direccion)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	80b8      	strh	r0, [r7, #4]
 8001034:	460b      	mov	r3, r1
 8001036:	70fb      	strb	r3, [r7, #3]
    posicion_t nueva_pos = pos_actual;
 8001038:	88bb      	ldrh	r3, [r7, #4]
 800103a:	813b      	strh	r3, [r7, #8]

    switch (direccion)
 800103c:	78fb      	ldrb	r3, [r7, #3]
 800103e:	2b03      	cmp	r3, #3
 8001040:	d81e      	bhi.n	8001080 <laberinto_get_posicion_adyacente+0x54>
 8001042:	a201      	add	r2, pc, #4	@ (adr r2, 8001048 <laberinto_get_posicion_adyacente+0x1c>)
 8001044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001048:	08001059 	.word	0x08001059
 800104c:	08001063 	.word	0x08001063
 8001050:	0800106d 	.word	0x0800106d
 8001054:	08001077 	.word	0x08001077
    {
    case norte:
        nueva_pos.fila = pos_actual.fila - 1;
 8001058:	793b      	ldrb	r3, [r7, #4]
 800105a:	3b01      	subs	r3, #1
 800105c:	b2db      	uxtb	r3, r3
 800105e:	723b      	strb	r3, [r7, #8]
        break;
 8001060:	e00e      	b.n	8001080 <laberinto_get_posicion_adyacente+0x54>
    case este:
        nueva_pos.columna = pos_actual.columna + 1;
 8001062:	797b      	ldrb	r3, [r7, #5]
 8001064:	3301      	adds	r3, #1
 8001066:	b2db      	uxtb	r3, r3
 8001068:	727b      	strb	r3, [r7, #9]
        break;
 800106a:	e009      	b.n	8001080 <laberinto_get_posicion_adyacente+0x54>
    case sur:
        nueva_pos.fila = pos_actual.fila + 1;
 800106c:	793b      	ldrb	r3, [r7, #4]
 800106e:	3301      	adds	r3, #1
 8001070:	b2db      	uxtb	r3, r3
 8001072:	723b      	strb	r3, [r7, #8]
        break;
 8001074:	e004      	b.n	8001080 <laberinto_get_posicion_adyacente+0x54>
    case oeste:
        nueva_pos.columna = pos_actual.columna - 1;
 8001076:	797b      	ldrb	r3, [r7, #5]
 8001078:	3b01      	subs	r3, #1
 800107a:	b2db      	uxtb	r3, r3
 800107c:	727b      	strb	r3, [r7, #9]
        break;
 800107e:	bf00      	nop
    }

    return nueva_pos;
 8001080:	893b      	ldrh	r3, [r7, #8]
 8001082:	81bb      	strh	r3, [r7, #12]
 8001084:	2300      	movs	r3, #0
 8001086:	7b3a      	ldrb	r2, [r7, #12]
 8001088:	f362 0307 	bfi	r3, r2, #0, #8
 800108c:	7b7a      	ldrb	r2, [r7, #13]
 800108e:	f362 230f 	bfi	r3, r2, #8, #8
}
 8001092:	4618      	mov	r0, r3
 8001094:	3714      	adds	r7, #20
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop

080010a0 <laberinto_posicion_valida>:
 * @param fila Fila a validar
 * @param columna Columna a validar
 * @return true si la posición es válida (1 ≤ fila,columna ≤ 4), false en caso contrario
 */
bool laberinto_posicion_valida(uint8_t fila, uint8_t columna)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	460a      	mov	r2, r1
 80010aa:	71fb      	strb	r3, [r7, #7]
 80010ac:	4613      	mov	r3, r2
 80010ae:	71bb      	strb	r3, [r7, #6]
    return (fila >= 1 && fila <= TAMAÑO_LABERINTO &&
            columna >= 1 && columna <= TAMAÑO_LABERINTO);
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d00a      	beq.n	80010cc <laberinto_posicion_valida+0x2c>
    return (fila >= 1 && fila <= TAMAÑO_LABERINTO &&
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	2b04      	cmp	r3, #4
 80010ba:	d807      	bhi.n	80010cc <laberinto_posicion_valida+0x2c>
 80010bc:	79bb      	ldrb	r3, [r7, #6]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d004      	beq.n	80010cc <laberinto_posicion_valida+0x2c>
            columna >= 1 && columna <= TAMAÑO_LABERINTO);
 80010c2:	79bb      	ldrb	r3, [r7, #6]
 80010c4:	2b04      	cmp	r3, #4
 80010c6:	d801      	bhi.n	80010cc <laberinto_posicion_valida+0x2c>
 80010c8:	2301      	movs	r3, #1
 80010ca:	e000      	b.n	80010ce <laberinto_posicion_valida+0x2e>
 80010cc:	2300      	movs	r3, #0
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	4618      	mov	r0, r3
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <main>:
 * @details Inicializa todos los periféricos, calibra sensores e inicia
 *          el bucle principal de navegación del laberinto
 * @retval Código de retorno (nunca debería retornar en funcionamiento normal)
 */
int main(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010e4:	f001 f926 	bl	8002334 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010e8:	f000 f856 	bl	8001198 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ec:	f000 fa4e 	bl	800158c <MX_GPIO_Init>
  MX_DMA_Init();
 80010f0:	f000 fa2c 	bl	800154c <MX_DMA_Init>
  MX_I2C1_Init();
 80010f4:	f000 f91a 	bl	800132c <MX_I2C1_Init>
  MX_SPI1_Init();
 80010f8:	f000 f946 	bl	8001388 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80010fc:	f00a fd74 	bl	800bbe8 <MX_USB_HOST_Init>
  MX_ADC1_Init();
 8001100:	f000 f8b4 	bl	800126c <MX_ADC1_Init>
  MX_TIM3_Init();
 8001104:	f000 f976 	bl	80013f4 <MX_TIM3_Init>
  MX_UART5_Init();
 8001108:	f000 f9f6 	bl	80014f8 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  // Inicializar ADC con DMA primero
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)dma_buffer, BUFFER_TOTAL);
 800110c:	22c8      	movs	r2, #200	@ 0xc8
 800110e:	491d      	ldr	r1, [pc, #116]	@ (8001184 <main+0xa4>)
 8001110:	481d      	ldr	r0, [pc, #116]	@ (8001188 <main+0xa8>)
 8001112:	f001 f9e9 	bl	80024e8 <HAL_ADC_Start_DMA>

  // Auto-calibración (sin motores activos)
  auto_calibracion();
 8001116:	f7ff faf5 	bl	8000704 <auto_calibracion>

  // Inicializar módulos
  control_motor_init();
 800111a:	f7ff fbd1 	bl	80008c0 <control_motor_init>
  laberinto_init();
 800111e:	f7ff fd91 	bl	8000c44 <laberinto_init>
  Inicializar_UART();
 8001122:	f001 f8b3 	bl	800228c <Inicializar_UART>
   * - Verificación de estado terminado
   */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001126:	f00a fd85 	bl	800bc34 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    if (!terminado)
 800112a:	4b18      	ldr	r3, [pc, #96]	@ (800118c <main+0xac>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	f083 0301 	eor.w	r3, r3, #1
 8001132:	b2db      	uxtb	r3, r3
 8001134:	2b00      	cmp	r3, #0
 8001136:	d01f      	beq.n	8001178 <main+0x98>
    {
      controlar_linea_recta();
 8001138:	f7ff fb6c 	bl	8000814 <controlar_linea_recta>
      // PROCESAR FLAGS CON PRIORIDAD: LÍNEA > MURO
      if (flag_linea_detectada)
 800113c:	4b14      	ldr	r3, [pc, #80]	@ (8001190 <main+0xb0>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	b2db      	uxtb	r3, r3
 8001142:	2b00      	cmp	r3, #0
 8001144:	d004      	beq.n	8001150 <main+0x70>
      {
        flag_linea_detectada = false;                            // Clear flag PRIMERO
 8001146:	4b12      	ldr	r3, [pc, #72]	@ (8001190 <main+0xb0>)
 8001148:	2200      	movs	r2, #0
 800114a:	701a      	strb	r2, [r3, #0]
        chequeolinea();
 800114c:	f000 fbb2 	bl	80018b4 <chequeolinea>
      }
      if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(WallSensor_GPIO_Port, WallSensor_Pin))
 8001150:	2140      	movs	r1, #64	@ 0x40
 8001152:	4810      	ldr	r0, [pc, #64]	@ (8001194 <main+0xb4>)
 8001154:	f002 fc68 	bl	8003a28 <HAL_GPIO_ReadPin>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d10e      	bne.n	800117c <main+0x9c>
      {
        HAL_Delay(20);
 800115e:	2014      	movs	r0, #20
 8001160:	f001 f95a 	bl	8002418 <HAL_Delay>
        if (HAL_GPIO_ReadPin(WallSensor_GPIO_Port, WallSensor_Pin) == GPIO_PIN_RESET)
 8001164:	2140      	movs	r1, #64	@ 0x40
 8001166:	480b      	ldr	r0, [pc, #44]	@ (8001194 <main+0xb4>)
 8001168:	f002 fc5e 	bl	8003a28 <HAL_GPIO_ReadPin>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d104      	bne.n	800117c <main+0x9c>
        {
          chequeomuro();
 8001172:	f000 fc0b 	bl	800198c <chequeomuro>
 8001176:	e001      	b.n	800117c <main+0x9c>
        }
      }
    }
    else
    {
      termino(); // Robot detenido en meta
 8001178:	f7ff fcfc 	bl	8000b74 <termino>
    }
    reset_posicion_pushbutton(); // ⚡ I AM SPEED button */
 800117c:	f000 fc44 	bl	8001a08 <reset_posicion_pushbutton>
    MX_USB_HOST_Process();
 8001180:	e7d1      	b.n	8001126 <main+0x46>
 8001182:	bf00      	nop
 8001184:	20000334 	.word	0x20000334
 8001188:	2000014c 	.word	0x2000014c
 800118c:	20000331 	.word	0x20000331
 8001190:	200004c4 	.word	0x200004c4
 8001194:	40020800 	.word	0x40020800

08001198 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b094      	sub	sp, #80	@ 0x50
 800119c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800119e:	f107 0320 	add.w	r3, r7, #32
 80011a2:	2230      	movs	r2, #48	@ 0x30
 80011a4:	2100      	movs	r1, #0
 80011a6:	4618      	mov	r0, r3
 80011a8:	f00b f908 	bl	800c3bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ac:	f107 030c 	add.w	r3, r7, #12
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011bc:	2300      	movs	r3, #0
 80011be:	60bb      	str	r3, [r7, #8]
 80011c0:	4b28      	ldr	r3, [pc, #160]	@ (8001264 <SystemClock_Config+0xcc>)
 80011c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c4:	4a27      	ldr	r2, [pc, #156]	@ (8001264 <SystemClock_Config+0xcc>)
 80011c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80011cc:	4b25      	ldr	r3, [pc, #148]	@ (8001264 <SystemClock_Config+0xcc>)
 80011ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011d4:	60bb      	str	r3, [r7, #8]
 80011d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011d8:	2300      	movs	r3, #0
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	4b22      	ldr	r3, [pc, #136]	@ (8001268 <SystemClock_Config+0xd0>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a21      	ldr	r2, [pc, #132]	@ (8001268 <SystemClock_Config+0xd0>)
 80011e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011e6:	6013      	str	r3, [r2, #0]
 80011e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001268 <SystemClock_Config+0xd0>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011f0:	607b      	str	r3, [r7, #4]
 80011f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011f4:	2301      	movs	r3, #1
 80011f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011fc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011fe:	2302      	movs	r3, #2
 8001200:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001202:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001206:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001208:	2308      	movs	r3, #8
 800120a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800120c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001210:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001212:	2302      	movs	r3, #2
 8001214:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001216:	2307      	movs	r3, #7
 8001218:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800121a:	f107 0320 	add.w	r3, r7, #32
 800121e:	4618      	mov	r0, r3
 8001220:	f004 fec4 	bl	8005fac <HAL_RCC_OscConfig>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800122a:	f000 fc71 	bl	8001b10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800122e:	230f      	movs	r3, #15
 8001230:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001232:	2302      	movs	r3, #2
 8001234:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001236:	2300      	movs	r3, #0
 8001238:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800123a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800123e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001240:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001244:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001246:	f107 030c 	add.w	r3, r7, #12
 800124a:	2105      	movs	r1, #5
 800124c:	4618      	mov	r0, r3
 800124e:	f005 f925 	bl	800649c <HAL_RCC_ClockConfig>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001258:	f000 fc5a 	bl	8001b10 <Error_Handler>
  }
}
 800125c:	bf00      	nop
 800125e:	3750      	adds	r7, #80	@ 0x50
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40023800 	.word	0x40023800
 8001268:	40007000 	.word	0x40007000

0800126c <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001272:	463b      	mov	r3, r7
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
   */
  hadc1.Instance = ADC1;
 800127e:	4b28      	ldr	r3, [pc, #160]	@ (8001320 <MX_ADC1_Init+0xb4>)
 8001280:	4a28      	ldr	r2, [pc, #160]	@ (8001324 <MX_ADC1_Init+0xb8>)
 8001282:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001284:	4b26      	ldr	r3, [pc, #152]	@ (8001320 <MX_ADC1_Init+0xb4>)
 8001286:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800128a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800128c:	4b24      	ldr	r3, [pc, #144]	@ (8001320 <MX_ADC1_Init+0xb4>)
 800128e:	2200      	movs	r2, #0
 8001290:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001292:	4b23      	ldr	r3, [pc, #140]	@ (8001320 <MX_ADC1_Init+0xb4>)
 8001294:	2201      	movs	r2, #1
 8001296:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001298:	4b21      	ldr	r3, [pc, #132]	@ (8001320 <MX_ADC1_Init+0xb4>)
 800129a:	2201      	movs	r2, #1
 800129c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800129e:	4b20      	ldr	r3, [pc, #128]	@ (8001320 <MX_ADC1_Init+0xb4>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001320 <MX_ADC1_Init+0xb4>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001320 <MX_ADC1_Init+0xb4>)
 80012ae:	4a1e      	ldr	r2, [pc, #120]	@ (8001328 <MX_ADC1_Init+0xbc>)
 80012b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001320 <MX_ADC1_Init+0xb4>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80012b8:	4b19      	ldr	r3, [pc, #100]	@ (8001320 <MX_ADC1_Init+0xb4>)
 80012ba:	2202      	movs	r2, #2
 80012bc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80012be:	4b18      	ldr	r3, [pc, #96]	@ (8001320 <MX_ADC1_Init+0xb4>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80012c6:	4b16      	ldr	r3, [pc, #88]	@ (8001320 <MX_ADC1_Init+0xb4>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012cc:	4814      	ldr	r0, [pc, #80]	@ (8001320 <MX_ADC1_Init+0xb4>)
 80012ce:	f001 f8c7 	bl	8002460 <HAL_ADC_Init>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80012d8:	f000 fc1a 	bl	8001b10 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_8;
 80012dc:	2308      	movs	r3, #8
 80012de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012e0:	2301      	movs	r3, #1
 80012e2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 80012e4:	2305      	movs	r3, #5
 80012e6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012e8:	463b      	mov	r3, r7
 80012ea:	4619      	mov	r1, r3
 80012ec:	480c      	ldr	r0, [pc, #48]	@ (8001320 <MX_ADC1_Init+0xb4>)
 80012ee:	f001 fa19 	bl	8002724 <HAL_ADC_ConfigChannel>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80012f8:	f000 fc0a 	bl	8001b10 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_9;
 80012fc:	2309      	movs	r3, #9
 80012fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001300:	2302      	movs	r3, #2
 8001302:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001304:	463b      	mov	r3, r7
 8001306:	4619      	mov	r1, r3
 8001308:	4805      	ldr	r0, [pc, #20]	@ (8001320 <MX_ADC1_Init+0xb4>)
 800130a:	f001 fa0b 	bl	8002724 <HAL_ADC_ConfigChannel>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001314:	f000 fbfc 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 8001318:	bf00      	nop
 800131a:	3710      	adds	r7, #16
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	2000014c 	.word	0x2000014c
 8001324:	40012000 	.word	0x40012000
 8001328:	0f000001 	.word	0x0f000001

0800132c <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001330:	4b12      	ldr	r3, [pc, #72]	@ (800137c <MX_I2C1_Init+0x50>)
 8001332:	4a13      	ldr	r2, [pc, #76]	@ (8001380 <MX_I2C1_Init+0x54>)
 8001334:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001336:	4b11      	ldr	r3, [pc, #68]	@ (800137c <MX_I2C1_Init+0x50>)
 8001338:	4a12      	ldr	r2, [pc, #72]	@ (8001384 <MX_I2C1_Init+0x58>)
 800133a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800133c:	4b0f      	ldr	r3, [pc, #60]	@ (800137c <MX_I2C1_Init+0x50>)
 800133e:	2200      	movs	r2, #0
 8001340:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001342:	4b0e      	ldr	r3, [pc, #56]	@ (800137c <MX_I2C1_Init+0x50>)
 8001344:	2200      	movs	r2, #0
 8001346:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001348:	4b0c      	ldr	r3, [pc, #48]	@ (800137c <MX_I2C1_Init+0x50>)
 800134a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800134e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001350:	4b0a      	ldr	r3, [pc, #40]	@ (800137c <MX_I2C1_Init+0x50>)
 8001352:	2200      	movs	r2, #0
 8001354:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001356:	4b09      	ldr	r3, [pc, #36]	@ (800137c <MX_I2C1_Init+0x50>)
 8001358:	2200      	movs	r2, #0
 800135a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800135c:	4b07      	ldr	r3, [pc, #28]	@ (800137c <MX_I2C1_Init+0x50>)
 800135e:	2200      	movs	r2, #0
 8001360:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001362:	4b06      	ldr	r3, [pc, #24]	@ (800137c <MX_I2C1_Init+0x50>)
 8001364:	2200      	movs	r2, #0
 8001366:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001368:	4804      	ldr	r0, [pc, #16]	@ (800137c <MX_I2C1_Init+0x50>)
 800136a:	f004 fcdb 	bl	8005d24 <HAL_I2C_Init>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001374:	f000 fbcc 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}
 800137c:	200001f4 	.word	0x200001f4
 8001380:	40005400 	.word	0x40005400
 8001384:	000186a0 	.word	0x000186a0

08001388 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800138c:	4b17      	ldr	r3, [pc, #92]	@ (80013ec <MX_SPI1_Init+0x64>)
 800138e:	4a18      	ldr	r2, [pc, #96]	@ (80013f0 <MX_SPI1_Init+0x68>)
 8001390:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001392:	4b16      	ldr	r3, [pc, #88]	@ (80013ec <MX_SPI1_Init+0x64>)
 8001394:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001398:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800139a:	4b14      	ldr	r3, [pc, #80]	@ (80013ec <MX_SPI1_Init+0x64>)
 800139c:	2200      	movs	r2, #0
 800139e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013a0:	4b12      	ldr	r3, [pc, #72]	@ (80013ec <MX_SPI1_Init+0x64>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013a6:	4b11      	ldr	r3, [pc, #68]	@ (80013ec <MX_SPI1_Init+0x64>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013ac:	4b0f      	ldr	r3, [pc, #60]	@ (80013ec <MX_SPI1_Init+0x64>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013b2:	4b0e      	ldr	r3, [pc, #56]	@ (80013ec <MX_SPI1_Init+0x64>)
 80013b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013b8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013ba:	4b0c      	ldr	r3, [pc, #48]	@ (80013ec <MX_SPI1_Init+0x64>)
 80013bc:	2200      	movs	r2, #0
 80013be:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013c0:	4b0a      	ldr	r3, [pc, #40]	@ (80013ec <MX_SPI1_Init+0x64>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013c6:	4b09      	ldr	r3, [pc, #36]	@ (80013ec <MX_SPI1_Init+0x64>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013cc:	4b07      	ldr	r3, [pc, #28]	@ (80013ec <MX_SPI1_Init+0x64>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80013d2:	4b06      	ldr	r3, [pc, #24]	@ (80013ec <MX_SPI1_Init+0x64>)
 80013d4:	220a      	movs	r2, #10
 80013d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013d8:	4804      	ldr	r0, [pc, #16]	@ (80013ec <MX_SPI1_Init+0x64>)
 80013da:	f005 fa7f 	bl	80068dc <HAL_SPI_Init>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80013e4:	f000 fb94 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */
}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000248 	.word	0x20000248
 80013f0:	40013000 	.word	0x40013000

080013f4 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08e      	sub	sp, #56	@ 0x38
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	609a      	str	r2, [r3, #8]
 8001406:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001408:	f107 0320 	add.w	r3, r7, #32
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001412:	1d3b      	adds	r3, r7, #4
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]
 8001420:	615a      	str	r2, [r3, #20]
 8001422:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001424:	4b32      	ldr	r3, [pc, #200]	@ (80014f0 <MX_TIM3_Init+0xfc>)
 8001426:	4a33      	ldr	r2, [pc, #204]	@ (80014f4 <MX_TIM3_Init+0x100>)
 8001428:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 800142a:	4b31      	ldr	r3, [pc, #196]	@ (80014f0 <MX_TIM3_Init+0xfc>)
 800142c:	2253      	movs	r2, #83	@ 0x53
 800142e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001430:	4b2f      	ldr	r3, [pc, #188]	@ (80014f0 <MX_TIM3_Init+0xfc>)
 8001432:	2200      	movs	r2, #0
 8001434:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001436:	4b2e      	ldr	r3, [pc, #184]	@ (80014f0 <MX_TIM3_Init+0xfc>)
 8001438:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800143c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800143e:	4b2c      	ldr	r3, [pc, #176]	@ (80014f0 <MX_TIM3_Init+0xfc>)
 8001440:	2200      	movs	r2, #0
 8001442:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001444:	4b2a      	ldr	r3, [pc, #168]	@ (80014f0 <MX_TIM3_Init+0xfc>)
 8001446:	2200      	movs	r2, #0
 8001448:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800144a:	4829      	ldr	r0, [pc, #164]	@ (80014f0 <MX_TIM3_Init+0xfc>)
 800144c:	f005 facf 	bl	80069ee <HAL_TIM_Base_Init>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001456:	f000 fb5b 	bl	8001b10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800145a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800145e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001460:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001464:	4619      	mov	r1, r3
 8001466:	4822      	ldr	r0, [pc, #136]	@ (80014f0 <MX_TIM3_Init+0xfc>)
 8001468:	f005 fcf4 	bl	8006e54 <HAL_TIM_ConfigClockSource>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001472:	f000 fb4d 	bl	8001b10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001476:	481e      	ldr	r0, [pc, #120]	@ (80014f0 <MX_TIM3_Init+0xfc>)
 8001478:	f005 fb08 	bl	8006a8c <HAL_TIM_PWM_Init>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001482:	f000 fb45 	bl	8001b10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001486:	2300      	movs	r3, #0
 8001488:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800148a:	2300      	movs	r3, #0
 800148c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800148e:	f107 0320 	add.w	r3, r7, #32
 8001492:	4619      	mov	r1, r3
 8001494:	4816      	ldr	r0, [pc, #88]	@ (80014f0 <MX_TIM3_Init+0xfc>)
 8001496:	f006 f8bb 	bl	8007610 <HAL_TIMEx_MasterConfigSynchronization>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80014a0:	f000 fb36 	bl	8001b10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014a4:	2360      	movs	r3, #96	@ 0x60
 80014a6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014ac:	2300      	movs	r3, #0
 80014ae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014b4:	1d3b      	adds	r3, r7, #4
 80014b6:	2208      	movs	r2, #8
 80014b8:	4619      	mov	r1, r3
 80014ba:	480d      	ldr	r0, [pc, #52]	@ (80014f0 <MX_TIM3_Init+0xfc>)
 80014bc:	f005 fc08 	bl	8006cd0 <HAL_TIM_PWM_ConfigChannel>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80014c6:	f000 fb23 	bl	8001b10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014ca:	1d3b      	adds	r3, r7, #4
 80014cc:	220c      	movs	r2, #12
 80014ce:	4619      	mov	r1, r3
 80014d0:	4807      	ldr	r0, [pc, #28]	@ (80014f0 <MX_TIM3_Init+0xfc>)
 80014d2:	f005 fbfd 	bl	8006cd0 <HAL_TIM_PWM_ConfigChannel>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80014dc:	f000 fb18 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80014e0:	4803      	ldr	r0, [pc, #12]	@ (80014f0 <MX_TIM3_Init+0xfc>)
 80014e2:	f000 fd6d 	bl	8001fc0 <HAL_TIM_MspPostInit>
}
 80014e6:	bf00      	nop
 80014e8:	3738      	adds	r7, #56	@ 0x38
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	200002a0 	.word	0x200002a0
 80014f4:	40000400 	.word	0x40000400

080014f8 <MX_UART5_Init>:
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80014fc:	4b11      	ldr	r3, [pc, #68]	@ (8001544 <MX_UART5_Init+0x4c>)
 80014fe:	4a12      	ldr	r2, [pc, #72]	@ (8001548 <MX_UART5_Init+0x50>)
 8001500:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001502:	4b10      	ldr	r3, [pc, #64]	@ (8001544 <MX_UART5_Init+0x4c>)
 8001504:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001508:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800150a:	4b0e      	ldr	r3, [pc, #56]	@ (8001544 <MX_UART5_Init+0x4c>)
 800150c:	2200      	movs	r2, #0
 800150e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001510:	4b0c      	ldr	r3, [pc, #48]	@ (8001544 <MX_UART5_Init+0x4c>)
 8001512:	2200      	movs	r2, #0
 8001514:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001516:	4b0b      	ldr	r3, [pc, #44]	@ (8001544 <MX_UART5_Init+0x4c>)
 8001518:	2200      	movs	r2, #0
 800151a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800151c:	4b09      	ldr	r3, [pc, #36]	@ (8001544 <MX_UART5_Init+0x4c>)
 800151e:	220c      	movs	r2, #12
 8001520:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001522:	4b08      	ldr	r3, [pc, #32]	@ (8001544 <MX_UART5_Init+0x4c>)
 8001524:	2200      	movs	r2, #0
 8001526:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001528:	4b06      	ldr	r3, [pc, #24]	@ (8001544 <MX_UART5_Init+0x4c>)
 800152a:	2200      	movs	r2, #0
 800152c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800152e:	4805      	ldr	r0, [pc, #20]	@ (8001544 <MX_UART5_Init+0x4c>)
 8001530:	f006 f8ea 	bl	8007708 <HAL_UART_Init>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800153a:	f000 fae9 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	200002e8 	.word	0x200002e8
 8001548:	40005000 	.word	0x40005000

0800154c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	607b      	str	r3, [r7, #4]
 8001556:	4b0c      	ldr	r3, [pc, #48]	@ (8001588 <MX_DMA_Init+0x3c>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155a:	4a0b      	ldr	r2, [pc, #44]	@ (8001588 <MX_DMA_Init+0x3c>)
 800155c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001560:	6313      	str	r3, [r2, #48]	@ 0x30
 8001562:	4b09      	ldr	r3, [pc, #36]	@ (8001588 <MX_DMA_Init+0x3c>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001566:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800156a:	607b      	str	r3, [r7, #4]
 800156c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800156e:	2200      	movs	r2, #0
 8001570:	2100      	movs	r1, #0
 8001572:	2038      	movs	r0, #56	@ 0x38
 8001574:	f001 fc75 	bl	8002e62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001578:	2038      	movs	r0, #56	@ 0x38
 800157a:	f001 fc8e 	bl	8002e9a <HAL_NVIC_EnableIRQ>
}
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40023800 	.word	0x40023800

0800158c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b08c      	sub	sp, #48	@ 0x30
 8001590:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001592:	f107 031c 	add.w	r3, r7, #28
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	605a      	str	r2, [r3, #4]
 800159c:	609a      	str	r2, [r3, #8]
 800159e:	60da      	str	r2, [r3, #12]
 80015a0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	61bb      	str	r3, [r7, #24]
 80015a6:	4ba1      	ldr	r3, [pc, #644]	@ (800182c <MX_GPIO_Init+0x2a0>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015aa:	4aa0      	ldr	r2, [pc, #640]	@ (800182c <MX_GPIO_Init+0x2a0>)
 80015ac:	f043 0310 	orr.w	r3, r3, #16
 80015b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015b2:	4b9e      	ldr	r3, [pc, #632]	@ (800182c <MX_GPIO_Init+0x2a0>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b6:	f003 0310 	and.w	r3, r3, #16
 80015ba:	61bb      	str	r3, [r7, #24]
 80015bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	617b      	str	r3, [r7, #20]
 80015c2:	4b9a      	ldr	r3, [pc, #616]	@ (800182c <MX_GPIO_Init+0x2a0>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c6:	4a99      	ldr	r2, [pc, #612]	@ (800182c <MX_GPIO_Init+0x2a0>)
 80015c8:	f043 0304 	orr.w	r3, r3, #4
 80015cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ce:	4b97      	ldr	r3, [pc, #604]	@ (800182c <MX_GPIO_Init+0x2a0>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d2:	f003 0304 	and.w	r3, r3, #4
 80015d6:	617b      	str	r3, [r7, #20]
 80015d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	613b      	str	r3, [r7, #16]
 80015de:	4b93      	ldr	r3, [pc, #588]	@ (800182c <MX_GPIO_Init+0x2a0>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e2:	4a92      	ldr	r2, [pc, #584]	@ (800182c <MX_GPIO_Init+0x2a0>)
 80015e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ea:	4b90      	ldr	r3, [pc, #576]	@ (800182c <MX_GPIO_Init+0x2a0>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015f2:	613b      	str	r3, [r7, #16]
 80015f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	4b8c      	ldr	r3, [pc, #560]	@ (800182c <MX_GPIO_Init+0x2a0>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fe:	4a8b      	ldr	r2, [pc, #556]	@ (800182c <MX_GPIO_Init+0x2a0>)
 8001600:	f043 0301 	orr.w	r3, r3, #1
 8001604:	6313      	str	r3, [r2, #48]	@ 0x30
 8001606:	4b89      	ldr	r3, [pc, #548]	@ (800182c <MX_GPIO_Init+0x2a0>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	60bb      	str	r3, [r7, #8]
 8001616:	4b85      	ldr	r3, [pc, #532]	@ (800182c <MX_GPIO_Init+0x2a0>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161a:	4a84      	ldr	r2, [pc, #528]	@ (800182c <MX_GPIO_Init+0x2a0>)
 800161c:	f043 0302 	orr.w	r3, r3, #2
 8001620:	6313      	str	r3, [r2, #48]	@ 0x30
 8001622:	4b82      	ldr	r3, [pc, #520]	@ (800182c <MX_GPIO_Init+0x2a0>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	60bb      	str	r3, [r7, #8]
 800162c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	607b      	str	r3, [r7, #4]
 8001632:	4b7e      	ldr	r3, [pc, #504]	@ (800182c <MX_GPIO_Init+0x2a0>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001636:	4a7d      	ldr	r2, [pc, #500]	@ (800182c <MX_GPIO_Init+0x2a0>)
 8001638:	f043 0308 	orr.w	r3, r3, #8
 800163c:	6313      	str	r3, [r2, #48]	@ 0x30
 800163e:	4b7b      	ldr	r3, [pc, #492]	@ (800182c <MX_GPIO_Init+0x2a0>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001642:	f003 0308 	and.w	r3, r3, #8
 8001646:	607b      	str	r3, [r7, #4]
 8001648:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800164a:	2200      	movs	r2, #0
 800164c:	2108      	movs	r1, #8
 800164e:	4878      	ldr	r0, [pc, #480]	@ (8001830 <MX_GPIO_Init+0x2a4>)
 8001650:	f002 fa02 	bl	8003a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001654:	2201      	movs	r2, #1
 8001656:	2101      	movs	r1, #1
 8001658:	4876      	ldr	r0, [pc, #472]	@ (8001834 <MX_GPIO_Init+0x2a8>)
 800165a:	f002 f9fd 	bl	8003a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MI0_Pin | MI1_Pin | MD0_Pin | MD1_Pin, GPIO_PIN_RESET);
 800165e:	2200      	movs	r2, #0
 8001660:	f44f 41f0 	mov.w	r1, #30720	@ 0x7800
 8001664:	4874      	ldr	r0, [pc, #464]	@ (8001838 <MX_GPIO_Init+0x2ac>)
 8001666:	f002 f9f7 	bl	8003a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin, GPIO_PIN_RESET);
 800166a:	2200      	movs	r2, #0
 800166c:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8001670:	4872      	ldr	r0, [pc, #456]	@ (800183c <MX_GPIO_Init+0x2b0>)
 8001672:	f002 f9f1 	bl	8003a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001676:	2308      	movs	r3, #8
 8001678:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800167a:	2301      	movs	r3, #1
 800167c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001682:	2300      	movs	r3, #0
 8001684:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001686:	f107 031c 	add.w	r3, r7, #28
 800168a:	4619      	mov	r1, r3
 800168c:	4868      	ldr	r0, [pc, #416]	@ (8001830 <MX_GPIO_Init+0x2a4>)
 800168e:	f002 f82f 	bl	80036f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001692:	2301      	movs	r3, #1
 8001694:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001696:	2301      	movs	r3, #1
 8001698:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169e:	2300      	movs	r3, #0
 80016a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80016a2:	f107 031c 	add.w	r3, r7, #28
 80016a6:	4619      	mov	r1, r3
 80016a8:	4862      	ldr	r0, [pc, #392]	@ (8001834 <MX_GPIO_Init+0x2a8>)
 80016aa:	f002 f821 	bl	80036f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80016ae:	2308      	movs	r3, #8
 80016b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b2:	2302      	movs	r3, #2
 80016b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ba:	2300      	movs	r3, #0
 80016bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016be:	2305      	movs	r3, #5
 80016c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80016c2:	f107 031c 	add.w	r3, r7, #28
 80016c6:	4619      	mov	r1, r3
 80016c8:	485a      	ldr	r0, [pc, #360]	@ (8001834 <MX_GPIO_Init+0x2a8>)
 80016ca:	f002 f811 	bl	80036f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : i_am_speed_Pin */
  GPIO_InitStruct.Pin = i_am_speed_Pin;
 80016ce:	2301      	movs	r3, #1
 80016d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016d2:	2300      	movs	r3, #0
 80016d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(i_am_speed_GPIO_Port, &GPIO_InitStruct);
 80016da:	f107 031c 	add.w	r3, r7, #28
 80016de:	4619      	mov	r1, r3
 80016e0:	4857      	ldr	r0, [pc, #348]	@ (8001840 <MX_GPIO_Init+0x2b4>)
 80016e2:	f002 f805 	bl	80036f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80016e6:	2310      	movs	r3, #16
 80016e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ea:	2302      	movs	r3, #2
 80016ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f2:	2300      	movs	r3, #0
 80016f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80016f6:	2306      	movs	r3, #6
 80016f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80016fa:	f107 031c 	add.w	r3, r7, #28
 80016fe:	4619      	mov	r1, r3
 8001700:	484f      	ldr	r0, [pc, #316]	@ (8001840 <MX_GPIO_Init+0x2b4>)
 8001702:	f001 fff5 	bl	80036f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001706:	2304      	movs	r3, #4
 8001708:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800170a:	2300      	movs	r3, #0
 800170c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001712:	f107 031c 	add.w	r3, r7, #28
 8001716:	4619      	mov	r1, r3
 8001718:	4847      	ldr	r0, [pc, #284]	@ (8001838 <MX_GPIO_Init+0x2ac>)
 800171a:	f001 ffe9 	bl	80036f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800171e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001722:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001724:	2302      	movs	r3, #2
 8001726:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172c:	2300      	movs	r3, #0
 800172e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001730:	2305      	movs	r3, #5
 8001732:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001734:	f107 031c 	add.w	r3, r7, #28
 8001738:	4619      	mov	r1, r3
 800173a:	483f      	ldr	r0, [pc, #252]	@ (8001838 <MX_GPIO_Init+0x2ac>)
 800173c:	f001 ffd8 	bl	80036f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MI0_Pin MI1_Pin MD0_Pin MD1_Pin */
  GPIO_InitStruct.Pin = MI0_Pin | MI1_Pin | MD0_Pin | MD1_Pin;
 8001740:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 8001744:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001746:	2301      	movs	r3, #1
 8001748:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174e:	2300      	movs	r3, #0
 8001750:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001752:	f107 031c 	add.w	r3, r7, #28
 8001756:	4619      	mov	r1, r3
 8001758:	4837      	ldr	r0, [pc, #220]	@ (8001838 <MX_GPIO_Init+0x2ac>)
 800175a:	f001 ffc9 	bl	80036f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin;
 800175e:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8001762:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001764:	2301      	movs	r3, #1
 8001766:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176c:	2300      	movs	r3, #0
 800176e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001770:	f107 031c 	add.w	r3, r7, #28
 8001774:	4619      	mov	r1, r3
 8001776:	4831      	ldr	r0, [pc, #196]	@ (800183c <MX_GPIO_Init+0x2b0>)
 8001778:	f001 ffba 	bl	80036f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : WallSensor_Pin */
  GPIO_InitStruct.Pin = WallSensor_Pin;
 800177c:	2340      	movs	r3, #64	@ 0x40
 800177e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001780:	2300      	movs	r3, #0
 8001782:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001784:	2300      	movs	r3, #0
 8001786:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(WallSensor_GPIO_Port, &GPIO_InitStruct);
 8001788:	f107 031c 	add.w	r3, r7, #28
 800178c:	4619      	mov	r1, r3
 800178e:	4829      	ldr	r0, [pc, #164]	@ (8001834 <MX_GPIO_Init+0x2a8>)
 8001790:	f001 ffae 	bl	80036f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LineSensor_Pin */
  GPIO_InitStruct.Pin = LineSensor_Pin;
 8001794:	2380      	movs	r3, #128	@ 0x80
 8001796:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001798:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800179c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(LineSensor_GPIO_Port, &GPIO_InitStruct);
 80017a2:	f107 031c 	add.w	r3, r7, #28
 80017a6:	4619      	mov	r1, r3
 80017a8:	4822      	ldr	r0, [pc, #136]	@ (8001834 <MX_GPIO_Init+0x2a8>)
 80017aa:	f001 ffa1 	bl	80036f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_SCK_Pin */
  GPIO_InitStruct.Pin = I2S3_SCK_Pin;
 80017ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b4:	2302      	movs	r3, #2
 80017b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017bc:	2300      	movs	r3, #0
 80017be:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017c0:	2306      	movs	r3, #6
 80017c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_SCK_GPIO_Port, &GPIO_InitStruct);
 80017c4:	f107 031c 	add.w	r3, r7, #28
 80017c8:	4619      	mov	r1, r3
 80017ca:	481a      	ldr	r0, [pc, #104]	@ (8001834 <MX_GPIO_Init+0x2a8>)
 80017cc:	f001 ff90 	bl	80036f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80017d0:	2320      	movs	r3, #32
 80017d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017d4:	2300      	movs	r3, #0
 80017d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	2300      	movs	r3, #0
 80017da:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80017dc:	f107 031c 	add.w	r3, r7, #28
 80017e0:	4619      	mov	r1, r3
 80017e2:	4816      	ldr	r0, [pc, #88]	@ (800183c <MX_GPIO_Init+0x2b0>)
 80017e4:	f001 ff84 	bl	80036f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80017e8:	2302      	movs	r3, #2
 80017ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80017ec:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80017f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80017f6:	f107 031c 	add.w	r3, r7, #28
 80017fa:	4619      	mov	r1, r3
 80017fc:	480c      	ldr	r0, [pc, #48]	@ (8001830 <MX_GPIO_Init+0x2a4>)
 80017fe:	f001 ff77 	bl	80036f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001802:	2200      	movs	r2, #0
 8001804:	2100      	movs	r1, #0
 8001806:	2017      	movs	r0, #23
 8001808:	f001 fb2b 	bl	8002e62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800180c:	2017      	movs	r0, #23
 800180e:	f001 fb44 	bl	8002e9a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0); // Prioridad alta para ambos sensores
 8001812:	2200      	movs	r2, #0
 8001814:	2101      	movs	r1, #1
 8001816:	2017      	movs	r0, #23
 8001818:	f001 fb23 	bl	8002e62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800181c:	2017      	movs	r0, #23
 800181e:	f001 fb3c 	bl	8002e9a <HAL_NVIC_EnableIRQ>

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001822:	bf00      	nop
 8001824:	3730      	adds	r7, #48	@ 0x30
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40023800 	.word	0x40023800
 8001830:	40021000 	.word	0x40021000
 8001834:	40020800 	.word	0x40020800
 8001838:	40020400 	.word	0x40020400
 800183c:	40020c00 	.word	0x40020c00
 8001840:	40020000 	.word	0x40020000

08001844 <actualizar_posicion>:
 * @param sentido Orientación actual del robot
 *
 * @note Las coordenadas van de 1 a 4 para un laberinto 4x4
 */
void actualizar_posicion(uint8_t *fila, uint8_t *columna, brujula sentido)
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	4613      	mov	r3, r2
 8001850:	71fb      	strb	r3, [r7, #7]
  switch (sentido)
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	2b03      	cmp	r3, #3
 8001856:	d827      	bhi.n	80018a8 <actualizar_posicion+0x64>
 8001858:	a201      	add	r2, pc, #4	@ (adr r2, 8001860 <actualizar_posicion+0x1c>)
 800185a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800185e:	bf00      	nop
 8001860:	08001871 	.word	0x08001871
 8001864:	0800187f 	.word	0x0800187f
 8001868:	0800188d 	.word	0x0800188d
 800186c:	0800189b 	.word	0x0800189b
  {
  case norte:
    (*fila)--;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	3b01      	subs	r3, #1
 8001876:	b2da      	uxtb	r2, r3
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	701a      	strb	r2, [r3, #0]
    break;
 800187c:	e014      	b.n	80018a8 <actualizar_posicion+0x64>
  case este:
    (*columna)++;
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	3301      	adds	r3, #1
 8001884:	b2da      	uxtb	r2, r3
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	701a      	strb	r2, [r3, #0]
    break;
 800188a:	e00d      	b.n	80018a8 <actualizar_posicion+0x64>
  case sur:
    (*fila)++;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	3301      	adds	r3, #1
 8001892:	b2da      	uxtb	r2, r3
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	701a      	strb	r2, [r3, #0]
    break;
 8001898:	e006      	b.n	80018a8 <actualizar_posicion+0x64>
  case oeste:
    (*columna)--;
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	3b01      	subs	r3, #1
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	701a      	strb	r2, [r3, #0]
    break;
 80018a6:	bf00      	nop
  }
}
 80018a8:	bf00      	nop
 80018aa:	3714      	adds	r7, #20
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <chequeolinea>:
 * 7. Reactiva interrupciones
 *
 * @note Usa TIEMPO_AVANCE_LINEA que varía según el modo (exploración/sprint)
 */
void chequeolinea(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 80018ba:	2017      	movs	r0, #23
 80018bc:	f001 fafb 	bl	8002eb6 <HAL_NVIC_DisableIRQ>
  HAL_Delay(TIEMPO_AVANCE_LINEA); // por si es sprint o no
 80018c0:	4b29      	ldr	r3, [pc, #164]	@ (8001968 <chequeolinea+0xb4>)
 80018c2:	881b      	ldrh	r3, [r3, #0]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f000 fda7 	bl	8002418 <HAL_Delay>

  // Actualizar posición
  actualizar_posicion(&fila_actual, &columna_actual, sentido_actual);
 80018ca:	4b28      	ldr	r3, [pc, #160]	@ (800196c <chequeolinea+0xb8>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	461a      	mov	r2, r3
 80018d0:	4927      	ldr	r1, [pc, #156]	@ (8001970 <chequeolinea+0xbc>)
 80018d2:	4828      	ldr	r0, [pc, #160]	@ (8001974 <chequeolinea+0xc0>)
 80018d4:	f7ff ffb6 	bl	8001844 <actualizar_posicion>

  sprintf(mensaje, "%d,%d", fila_actual, columna_actual);
 80018d8:	4b26      	ldr	r3, [pc, #152]	@ (8001974 <chequeolinea+0xc0>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	461a      	mov	r2, r3
 80018de:	4b24      	ldr	r3, [pc, #144]	@ (8001970 <chequeolinea+0xbc>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	4925      	ldr	r1, [pc, #148]	@ (8001978 <chequeolinea+0xc4>)
 80018e4:	4825      	ldr	r0, [pc, #148]	@ (800197c <chequeolinea+0xc8>)
 80018e6:	f00a fd47 	bl	800c378 <siprintf>
  Transmision();
 80018ea:	f000 fcaf 	bl	800224c <Transmision>

  // terminó?
  if (fila_actual == 1 && columna_actual == 1)
 80018ee:	4b21      	ldr	r3, [pc, #132]	@ (8001974 <chequeolinea+0xc0>)
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d114      	bne.n	8001920 <chequeolinea+0x6c>
 80018f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001970 <chequeolinea+0xbc>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d110      	bne.n	8001920 <chequeolinea+0x6c>
  {
    termino();
 80018fe:	f7ff f939 	bl	8000b74 <termino>
    terminado = true;
 8001902:	4b1f      	ldr	r3, [pc, #124]	@ (8001980 <chequeolinea+0xcc>)
 8001904:	2201      	movs	r2, #1
 8001906:	701a      	strb	r2, [r3, #0]
    strcpy(mensaje, "Finalizado");
 8001908:	4a1c      	ldr	r2, [pc, #112]	@ (800197c <chequeolinea+0xc8>)
 800190a:	4b1e      	ldr	r3, [pc, #120]	@ (8001984 <chequeolinea+0xd0>)
 800190c:	cb03      	ldmia	r3!, {r0, r1}
 800190e:	6010      	str	r0, [r2, #0]
 8001910:	6051      	str	r1, [r2, #4]
 8001912:	8819      	ldrh	r1, [r3, #0]
 8001914:	789b      	ldrb	r3, [r3, #2]
 8001916:	8111      	strh	r1, [r2, #8]
 8001918:	7293      	strb	r3, [r2, #10]
    Transmision();
 800191a:	f000 fc97 	bl	800224c <Transmision>
    return;
 800191e:	e01f      	b.n	8001960 <chequeolinea+0xac>
  }

  // Calcular y ejecutar
  brujula sentido_deseado = calcular_mejor_direccion(fila_actual, columna_actual); // funcion definida en navegacion.h
 8001920:	4b14      	ldr	r3, [pc, #80]	@ (8001974 <chequeolinea+0xc0>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	4a12      	ldr	r2, [pc, #72]	@ (8001970 <chequeolinea+0xbc>)
 8001926:	7812      	ldrb	r2, [r2, #0]
 8001928:	4611      	mov	r1, r2
 800192a:	4618      	mov	r0, r3
 800192c:	f000 f8f6 	bl	8001b1c <calcular_mejor_direccion>
 8001930:	4603      	mov	r3, r0
 8001932:	71fb      	strb	r3, [r7, #7]
  sentido_actual = ejecutar_movimiento(sentido_actual, sentido_deseado);           // funcion definida en navegacion.h
 8001934:	4b0d      	ldr	r3, [pc, #52]	@ (800196c <chequeolinea+0xb8>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	79fa      	ldrb	r2, [r7, #7]
 800193a:	4611      	mov	r1, r2
 800193c:	4618      	mov	r0, r3
 800193e:	f000 f9af 	bl	8001ca0 <ejecutar_movimiento>
 8001942:	4603      	mov	r3, r0
 8001944:	461a      	mov	r2, r3
 8001946:	4b09      	ldr	r3, [pc, #36]	@ (800196c <chequeolinea+0xb8>)
 8001948:	701a      	strb	r2, [r3, #0]
  avanza();
 800194a:	f7ff f851 	bl	80009f0 <avanza>

  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800194e:	2017      	movs	r0, #23
 8001950:	f001 faa3 	bl	8002e9a <HAL_NVIC_EnableIRQ>
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8001954:	2200      	movs	r2, #0
 8001956:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800195a:	480b      	ldr	r0, [pc, #44]	@ (8001988 <chequeolinea+0xd4>)
 800195c:	f002 f87c 	bl	8003a58 <HAL_GPIO_WritePin>
}
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	20000016 	.word	0x20000016
 800196c:	20000330 	.word	0x20000330
 8001970:	20000015 	.word	0x20000015
 8001974:	20000014 	.word	0x20000014
 8001978:	0800cb74 	.word	0x0800cb74
 800197c:	200004cc 	.word	0x200004cc
 8001980:	20000331 	.word	0x20000331
 8001984:	0800cb7c 	.word	0x0800cb7c
 8001988:	40020c00 	.word	0x40020c00

0800198c <chequeomuro>:
 * 6. Reactiva interrupciones
 *
 * @note El algoritmo Flood Fill se ejecuta completamente tras cada muro detectado
 */
void chequeomuro(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8001992:	2017      	movs	r0, #23
 8001994:	f001 fa8f 	bl	8002eb6 <HAL_NVIC_DisableIRQ>

  // 1. Registrar el muro detectado
  laberinto_set_muro(fila_actual, columna_actual, sentido_actual);
 8001998:	4b17      	ldr	r3, [pc, #92]	@ (80019f8 <chequeomuro+0x6c>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	4a17      	ldr	r2, [pc, #92]	@ (80019fc <chequeomuro+0x70>)
 800199e:	7811      	ldrb	r1, [r2, #0]
 80019a0:	4a17      	ldr	r2, [pc, #92]	@ (8001a00 <chequeomuro+0x74>)
 80019a2:	7812      	ldrb	r2, [r2, #0]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff fa03 	bl	8000db0 <laberinto_set_muro>

  // 2. Recalcular todos los pesos con el nuevo muro
  laberinto_recalcular_pesos();
 80019aa:	f7ff fa63 	bl	8000e74 <laberinto_recalcular_pesos>

  // 3. Calcular nueva mejor dirección
  brujula sentido_deseado = calcular_mejor_direccion(fila_actual, columna_actual);
 80019ae:	4b12      	ldr	r3, [pc, #72]	@ (80019f8 <chequeomuro+0x6c>)
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	4a12      	ldr	r2, [pc, #72]	@ (80019fc <chequeomuro+0x70>)
 80019b4:	7812      	ldrb	r2, [r2, #0]
 80019b6:	4611      	mov	r1, r2
 80019b8:	4618      	mov	r0, r3
 80019ba:	f000 f8af 	bl	8001b1c <calcular_mejor_direccion>
 80019be:	4603      	mov	r3, r0
 80019c0:	71fb      	strb	r3, [r7, #7]

  // 4. Ejecutar movimiento LO QUE HIZO EL COLO YA ACTUALIZA EL SENTIDO ACTUAL SOLO
  sentido_actual = ejecutar_movimiento(sentido_actual, sentido_deseado);
 80019c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001a00 <chequeomuro+0x74>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	79fa      	ldrb	r2, [r7, #7]
 80019c8:	4611      	mov	r1, r2
 80019ca:	4618      	mov	r0, r3
 80019cc:	f000 f968 	bl	8001ca0 <ejecutar_movimiento>
 80019d0:	4603      	mov	r3, r0
 80019d2:	461a      	mov	r2, r3
 80019d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001a00 <chequeomuro+0x74>)
 80019d6:	701a      	strb	r2, [r3, #0]
  avanza();
 80019d8:	f7ff f80a 	bl	80009f0 <avanza>

  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80019dc:	2017      	movs	r0, #23
 80019de:	f001 fa5c 	bl	8002e9a <HAL_NVIC_EnableIRQ>
  HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 80019e2:	2200      	movs	r2, #0
 80019e4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019e8:	4806      	ldr	r0, [pc, #24]	@ (8001a04 <chequeomuro+0x78>)
 80019ea:	f002 f835 	bl	8003a58 <HAL_GPIO_WritePin>
}
 80019ee:	bf00      	nop
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	20000014 	.word	0x20000014
 80019fc:	20000015 	.word	0x20000015
 8001a00:	20000330 	.word	0x20000330
 8001a04:	40020c00 	.word	0x40020c00

08001a08 <reset_posicion_pushbutton>:
 * 5. Inicia el movimiento inmediatamente
 *
 * @note El robot mantiene el conocimiento del laberinto de la primera ejecución
 */
void reset_posicion_pushbutton(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  if (antirebote(i_am_speed_GPIO_Port, i_am_speed_Pin))
 8001a0c:	2101      	movs	r1, #1
 8001a0e:	4817      	ldr	r0, [pc, #92]	@ (8001a6c <reset_posicion_pushbutton+0x64>)
 8001a10:	f7fe fdcc 	bl	80005ac <antirebote>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d025      	beq.n	8001a66 <reset_posicion_pushbutton+0x5e>
  {
    HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8001a1a:	2017      	movs	r0, #23
 8001a1c:	f001 fa4b 	bl	8002eb6 <HAL_NVIC_DisableIRQ>

    // Resetear posición
    fila_actual = 4;
 8001a20:	4b13      	ldr	r3, [pc, #76]	@ (8001a70 <reset_posicion_pushbutton+0x68>)
 8001a22:	2204      	movs	r2, #4
 8001a24:	701a      	strb	r2, [r3, #0]
    columna_actual = 4;
 8001a26:	4b13      	ldr	r3, [pc, #76]	@ (8001a74 <reset_posicion_pushbutton+0x6c>)
 8001a28:	2204      	movs	r2, #4
 8001a2a:	701a      	strb	r2, [r3, #0]
    sentido_actual = norte;
 8001a2c:	4b12      	ldr	r3, [pc, #72]	@ (8001a78 <reset_posicion_pushbutton+0x70>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	701a      	strb	r2, [r3, #0]
    terminado = false;
 8001a32:	4b12      	ldr	r3, [pc, #72]	@ (8001a7c <reset_posicion_pushbutton+0x74>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	701a      	strb	r2, [r3, #0]

    // ⚡ I AM SPEED!
    activar_modo_sprint();     // Esta función está en control_motor.c
 8001a38:	f7fe ff2e 	bl	8000898 <activar_modo_sprint>
    TIEMPO_AVANCE_LINEA = 400; // Reducir tiempo de avance a 400 ms
 8001a3c:	4b10      	ldr	r3, [pc, #64]	@ (8001a80 <reset_posicion_pushbutton+0x78>)
 8001a3e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001a42:	801a      	strh	r2, [r3, #0]

    flag_linea_detectada = false;
 8001a44:	4b0f      	ldr	r3, [pc, #60]	@ (8001a84 <reset_posicion_pushbutton+0x7c>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	701a      	strb	r2, [r3, #0]
    flag_muro_detectado = false;
 8001a4a:	4b0f      	ldr	r3, [pc, #60]	@ (8001a88 <reset_posicion_pushbutton+0x80>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	701a      	strb	r2, [r3, #0]

    // Resetear estados de sensores
    ultimo_estado_linea = true;
 8001a50:	4b0e      	ldr	r3, [pc, #56]	@ (8001a8c <reset_posicion_pushbutton+0x84>)
 8001a52:	2201      	movs	r2, #1
 8001a54:	701a      	strb	r2, [r3, #0]
    ultimo_estado_muro = true;
 8001a56:	4b0e      	ldr	r3, [pc, #56]	@ (8001a90 <reset_posicion_pushbutton+0x88>)
 8001a58:	2201      	movs	r2, #1
 8001a5a:	701a      	strb	r2, [r3, #0]

    avanza();
 8001a5c:	f7fe ffc8 	bl	80009f0 <avanza>
    // Reactivar interrupciones
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001a60:	2017      	movs	r0, #23
 8001a62:	f001 fa1a 	bl	8002e9a <HAL_NVIC_EnableIRQ>
  }
}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40020000 	.word	0x40020000
 8001a70:	20000014 	.word	0x20000014
 8001a74:	20000015 	.word	0x20000015
 8001a78:	20000330 	.word	0x20000330
 8001a7c:	20000331 	.word	0x20000331
 8001a80:	20000016 	.word	0x20000016
 8001a84:	200004c4 	.word	0x200004c4
 8001a88:	200004c5 	.word	0x200004c5
 8001a8c:	20000018 	.word	0x20000018
 8001a90:	20000019 	.word	0x20000019

08001a94 <HAL_GPIO_EXTI_Callback>:
 * @param GPIO_Pin Pin que generó la interrupción
 *
 * @note Esta función implementa antirebote con delay no bloqueante
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == LineSensor_Pin)
 8001a9e:	88fb      	ldrh	r3, [r7, #6]
 8001aa0:	2b80      	cmp	r3, #128	@ 0x80
 8001aa2:	d128      	bne.n	8001af6 <HAL_GPIO_EXTI_Callback+0x62>
  {
    static GPIO_PinState ultima_lectura_valida_linea = GPIO_PIN_SET;
    GPIO_PinState lectura1, lectura2;

    lectura1 = HAL_GPIO_ReadPin(LineSensor_GPIO_Port, LineSensor_Pin);
 8001aa4:	2180      	movs	r1, #128	@ 0x80
 8001aa6:	4816      	ldr	r0, [pc, #88]	@ (8001b00 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001aa8:	f001 ffbe 	bl	8003a28 <HAL_GPIO_ReadPin>
 8001aac:	4603      	mov	r3, r0
 8001aae:	73fb      	strb	r3, [r7, #15]
    if (lectura1 != ultima_lectura_valida_linea)
 8001ab0:	4b14      	ldr	r3, [pc, #80]	@ (8001b04 <HAL_GPIO_EXTI_Callback+0x70>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	7bfa      	ldrb	r2, [r7, #15]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d01d      	beq.n	8001af6 <HAL_GPIO_EXTI_Callback+0x62>
    {
      // Micro-delay en lugar de HAL_Delay (no bloquea tanto)
      for (volatile int i = 0; i < 1000000; i++)
 8001aba:	2300      	movs	r3, #0
 8001abc:	60bb      	str	r3, [r7, #8]
 8001abe:	e002      	b.n	8001ac6 <HAL_GPIO_EXTI_Callback+0x32>
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	60bb      	str	r3, [r7, #8]
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	4a0f      	ldr	r2, [pc, #60]	@ (8001b08 <HAL_GPIO_EXTI_Callback+0x74>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	ddf8      	ble.n	8001ac0 <HAL_GPIO_EXTI_Callback+0x2c>
        ; // ~20ms aprox

      lectura2 = HAL_GPIO_ReadPin(LineSensor_GPIO_Port, LineSensor_Pin);
 8001ace:	2180      	movs	r1, #128	@ 0x80
 8001ad0:	480b      	ldr	r0, [pc, #44]	@ (8001b00 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001ad2:	f001 ffa9 	bl	8003a28 <HAL_GPIO_ReadPin>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	73bb      	strb	r3, [r7, #14]
      if (lectura2 == lectura1)
 8001ada:	7bba      	ldrb	r2, [r7, #14]
 8001adc:	7bfb      	ldrb	r3, [r7, #15]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d109      	bne.n	8001af6 <HAL_GPIO_EXTI_Callback+0x62>
      {
        ultima_lectura_valida_linea = lectura2;
 8001ae2:	4a08      	ldr	r2, [pc, #32]	@ (8001b04 <HAL_GPIO_EXTI_Callback+0x70>)
 8001ae4:	7bbb      	ldrb	r3, [r7, #14]
 8001ae6:	7013      	strb	r3, [r2, #0]
        if (ultima_lectura_valida_linea == GPIO_PIN_RESET)
 8001ae8:	4b06      	ldr	r3, [pc, #24]	@ (8001b04 <HAL_GPIO_EXTI_Callback+0x70>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d102      	bne.n	8001af6 <HAL_GPIO_EXTI_Callback+0x62>
        {
          flag_linea_detectada = true;
 8001af0:	4b06      	ldr	r3, [pc, #24]	@ (8001b0c <HAL_GPIO_EXTI_Callback+0x78>)
 8001af2:	2201      	movs	r2, #1
 8001af4:	701a      	strb	r2, [r3, #0]
        }
      }
    }
  }
}
 8001af6:	bf00      	nop
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40020800 	.word	0x40020800
 8001b04:	2000001a 	.word	0x2000001a
 8001b08:	000f423f 	.word	0x000f423f
 8001b0c:	200004c4 	.word	0x200004c4

08001b10 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b14:	b672      	cpsid	i
}
 8001b16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b18:	bf00      	nop
 8001b1a:	e7fd      	b.n	8001b18 <Error_Handler+0x8>

08001b1c <calcular_mejor_direccion>:
 * 6. Incluye verificación de seguridad final
 *
 * @note El orden de evaluación favorece movimientos hacia la meta (1,1)
 */
brujula calcular_mejor_direccion(uint8_t fila_actual, uint8_t columna_actual) // nos devuelve direccion en TIPO BRUJULA gracias colo
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b08c      	sub	sp, #48	@ 0x30
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	460a      	mov	r2, r1
 8001b26:	71fb      	strb	r3, [r7, #7]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	71bb      	strb	r3, [r7, #6]
    uint8_t peso_minimo = PESO_MAXIMO;
 8001b2c:	23ff      	movs	r3, #255	@ 0xff
 8001b2e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    brujula mejor_direccion = norte; // Dirección por defecto
 8001b32:	2300      	movs	r3, #0
 8001b34:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    bool direccion_valida_encontrada = false;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

    // Para dar preferencia a oeste y norte que llevan hacia la meta (1,1)
    // Primero oeste, luego norte, luego sur, luego este
    static const brujula orden_eval[] = {oeste, norte, sur, este};

    for (int i = 0; i < 4; i++)
 8001b3e:	2300      	movs	r3, #0
 8001b40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b42:	e04f      	b.n	8001be4 <calcular_mejor_direccion+0xc8>
    {
        brujula direccion = orden_eval[i];
 8001b44:	4a55      	ldr	r2, [pc, #340]	@ (8001c9c <calcular_mejor_direccion+0x180>)
 8001b46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b48:	4413      	add	r3, r2
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

        // 1. ¿Hay muro en esta dirección?
        if (laberinto_hay_muro(fila_actual, columna_actual, direccion))
 8001b50:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8001b54:	79b9      	ldrb	r1, [r7, #6]
 8001b56:	79fb      	ldrb	r3, [r7, #7]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff fa37 	bl	8000fcc <laberinto_hay_muro>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d139      	bne.n	8001bd8 <calcular_mejor_direccion+0xbc>
            continue; // Saltar si hay muro
        }

        // 2. Obtener posición adyacente
        posicion_t pos_adyacente = laberinto_get_posicion_adyacente(
            (posicion_t){fila_actual, columna_actual}, direccion);
 8001b64:	79fb      	ldrb	r3, [r7, #7]
 8001b66:	763b      	strb	r3, [r7, #24]
 8001b68:	79bb      	ldrb	r3, [r7, #6]
 8001b6a:	767b      	strb	r3, [r7, #25]
        posicion_t pos_adyacente = laberinto_get_posicion_adyacente(
 8001b6c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001b70:	4619      	mov	r1, r3
 8001b72:	69b8      	ldr	r0, [r7, #24]
 8001b74:	f7ff fa5a 	bl	800102c <laberinto_get_posicion_adyacente>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	83bb      	strh	r3, [r7, #28]

        // 3. ¿Es válida? (no salirse del laberinto)
        if (!laberinto_posicion_valida(pos_adyacente.fila, pos_adyacente.columna))
 8001b7c:	7f3b      	ldrb	r3, [r7, #28]
 8001b7e:	7f7a      	ldrb	r2, [r7, #29]
 8001b80:	4611      	mov	r1, r2
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff fa8c 	bl	80010a0 <laberinto_posicion_valida>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	f083 0301 	eor.w	r3, r3, #1
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d123      	bne.n	8001bdc <calcular_mejor_direccion+0xc0>
        {
            continue; // Saltar si está fuera del laberinto
        }

        // 4. Obtener peso de la casilla adyacente
        uint8_t peso_adyacente = laberinto_get_peso(pos_adyacente.fila, pos_adyacente.columna);
 8001b94:	7f3b      	ldrb	r3, [r7, #28]
 8001b96:	7f7a      	ldrb	r2, [r7, #29]
 8001b98:	4611      	mov	r1, r2
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff f8dc 	bl	8000d58 <laberinto_get_peso>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

        // 5. ¿Es el mejor peso hasta ahora? O primera dirección válida encontrada
        if (!direccion_valida_encontrada || peso_adyacente < peso_minimo)
 8001ba6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001baa:	f083 0301 	eor.w	r3, r3, #1
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d105      	bne.n	8001bc0 <calcular_mejor_direccion+0xa4>
 8001bb4:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8001bb8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d20e      	bcs.n	8001bde <calcular_mejor_direccion+0xc2>
        {
            peso_minimo = peso_adyacente;
 8001bc0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001bc4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            mejor_direccion = direccion;
 8001bc8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001bcc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            direccion_valida_encontrada = true;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8001bd6:	e002      	b.n	8001bde <calcular_mejor_direccion+0xc2>
            continue; // Saltar si hay muro
 8001bd8:	bf00      	nop
 8001bda:	e000      	b.n	8001bde <calcular_mejor_direccion+0xc2>
            continue; // Saltar si está fuera del laberinto
 8001bdc:	bf00      	nop
    for (int i = 0; i < 4; i++)
 8001bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001be0:	3301      	adds	r3, #1
 8001be2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001be6:	2b03      	cmp	r3, #3
 8001be8:	ddac      	ble.n	8001b44 <calcular_mejor_direccion+0x28>
        }
    }

    // Verificación final de seguridad: asegurarnos que la dirección elegida es válida
    if (direccion_valida_encontrada)
 8001bea:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d04d      	beq.n	8001c8e <calcular_mejor_direccion+0x172>
    {
        posicion_t pos_siguiente = laberinto_get_posicion_adyacente(
            (posicion_t){fila_actual, columna_actual}, mejor_direccion);
 8001bf2:	79fb      	ldrb	r3, [r7, #7]
 8001bf4:	743b      	strb	r3, [r7, #16]
 8001bf6:	79bb      	ldrb	r3, [r7, #6]
 8001bf8:	747b      	strb	r3, [r7, #17]
        posicion_t pos_siguiente = laberinto_get_posicion_adyacente(
 8001bfa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001bfe:	4619      	mov	r1, r3
 8001c00:	6938      	ldr	r0, [r7, #16]
 8001c02:	f7ff fa13 	bl	800102c <laberinto_get_posicion_adyacente>
 8001c06:	4603      	mov	r3, r0
 8001c08:	82bb      	strh	r3, [r7, #20]

        // Doble verificación para asegurarnos que no nos salimos del laberinto
        if (!laberinto_posicion_valida(pos_siguiente.fila, pos_siguiente.columna))
 8001c0a:	7d3b      	ldrb	r3, [r7, #20]
 8001c0c:	7d7a      	ldrb	r2, [r7, #21]
 8001c0e:	4611      	mov	r1, r2
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff fa45 	bl	80010a0 <laberinto_posicion_valida>
 8001c16:	4603      	mov	r3, r0
 8001c18:	f083 0301 	eor.w	r3, r3, #1
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d035      	beq.n	8001c8e <calcular_mejor_direccion+0x172>
        {
            // Algo salió mal, buscar cualquier dirección válida
            for (int i = 0; i < 4; i++)
 8001c22:	2300      	movs	r3, #0
 8001c24:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c26:	e02f      	b.n	8001c88 <calcular_mejor_direccion+0x16c>
            {
                brujula dir_alternativa = orden_eval[i];
 8001c28:	4a1c      	ldr	r2, [pc, #112]	@ (8001c9c <calcular_mejor_direccion+0x180>)
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c2c:	4413      	add	r3, r2
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                pos_siguiente = laberinto_get_posicion_adyacente(
                    (posicion_t){fila_actual, columna_actual}, dir_alternativa);
 8001c34:	79fb      	ldrb	r3, [r7, #7]
 8001c36:	733b      	strb	r3, [r7, #12]
 8001c38:	79bb      	ldrb	r3, [r7, #6]
 8001c3a:	737b      	strb	r3, [r7, #13]
                pos_siguiente = laberinto_get_posicion_adyacente(
 8001c3c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001c40:	4619      	mov	r1, r3
 8001c42:	68f8      	ldr	r0, [r7, #12]
 8001c44:	f7ff f9f2 	bl	800102c <laberinto_get_posicion_adyacente>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	82bb      	strh	r3, [r7, #20]

                if (laberinto_posicion_valida(pos_siguiente.fila, pos_siguiente.columna) &&
 8001c4c:	7d3b      	ldrb	r3, [r7, #20]
 8001c4e:	7d7a      	ldrb	r2, [r7, #21]
 8001c50:	4611      	mov	r1, r2
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff fa24 	bl	80010a0 <laberinto_posicion_valida>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d011      	beq.n	8001c82 <calcular_mejor_direccion+0x166>
                    !laberinto_hay_muro(fila_actual, columna_actual, dir_alternativa))
 8001c5e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001c62:	79b9      	ldrb	r1, [r7, #6]
 8001c64:	79fb      	ldrb	r3, [r7, #7]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff f9b0 	bl	8000fcc <laberinto_hay_muro>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	f083 0301 	eor.w	r3, r3, #1
 8001c72:	b2db      	uxtb	r3, r3
                if (laberinto_posicion_valida(pos_siguiente.fila, pos_siguiente.columna) &&
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d004      	beq.n	8001c82 <calcular_mejor_direccion+0x166>
                {
                    mejor_direccion = dir_alternativa;
 8001c78:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001c7c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8001c80:	e005      	b.n	8001c8e <calcular_mejor_direccion+0x172>
            for (int i = 0; i < 4; i++)
 8001c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c84:	3301      	adds	r3, #1
 8001c86:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c8a:	2b03      	cmp	r3, #3
 8001c8c:	ddcc      	ble.n	8001c28 <calcular_mejor_direccion+0x10c>
                }
            }
        }
    }

    return mejor_direccion;
 8001c8e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3730      	adds	r7, #48	@ 0x30
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	0800cba0 	.word	0x0800cba0

08001ca0 <ejecutar_movimiento>:
 *
 * @note Utiliza aritmética modular para calcular la diferencia angular
 * @note Los valores de brújula son: norte=0, este=1, sur=2, oeste=3
 */
brujula ejecutar_movimiento(brujula sentido_actual, brujula sentido_deseado)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	460a      	mov	r2, r1
 8001caa:	71fb      	strb	r3, [r7, #7]
 8001cac:	4613      	mov	r3, r2
 8001cae:	71bb      	strb	r3, [r7, #6]
    // ¿Ya está orientado correctamente?
    if (sentido_actual == sentido_deseado)
 8001cb0:	79fa      	ldrb	r2, [r7, #7]
 8001cb2:	79bb      	ldrb	r3, [r7, #6]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d101      	bne.n	8001cbc <ejecutar_movimiento+0x1c>
    {
        // avanza(); // Solo avanzar
        return sentido_actual;
 8001cb8:	79fb      	ldrb	r3, [r7, #7]
 8001cba:	e02b      	b.n	8001d14 <ejecutar_movimiento+0x74>
    }

    // Calcular diferencia usando aritmética xq es un tipo brujula
    // norte=0, este=1, sur=2, oeste=3
    int diferencia = (sentido_deseado - sentido_actual + 4) % 4;
 8001cbc:	79ba      	ldrb	r2, [r7, #6]
 8001cbe:	79fb      	ldrb	r3, [r7, #7]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	3304      	adds	r3, #4
 8001cc4:	425a      	negs	r2, r3
 8001cc6:	f003 0303 	and.w	r3, r3, #3
 8001cca:	f002 0203 	and.w	r2, r2, #3
 8001cce:	bf58      	it	pl
 8001cd0:	4253      	negpl	r3, r2
 8001cd2:	60fb      	str	r3, [r7, #12]

    switch (diferencia)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2b03      	cmp	r3, #3
 8001cd8:	d015      	beq.n	8001d06 <ejecutar_movimiento+0x66>
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2b03      	cmp	r3, #3
 8001cde:	dc18      	bgt.n	8001d12 <ejecutar_movimiento+0x72>
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d003      	beq.n	8001cee <ejecutar_movimiento+0x4e>
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d006      	beq.n	8001cfa <ejecutar_movimiento+0x5a>
 8001cec:	e011      	b.n	8001d12 <ejecutar_movimiento+0x72>
    {
    case 1: // Girar 90° a la derecha
        return gira90der(sentido_actual);
 8001cee:	79fb      	ldrb	r3, [r7, #7]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7fe fecb 	bl	8000a8c <gira90der>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	e00c      	b.n	8001d14 <ejecutar_movimiento+0x74>

    case 2: // Girar 180° (media vuelta)
        return gira180(sentido_actual);
 8001cfa:	79fb      	ldrb	r3, [r7, #7]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7fe feff 	bl	8000b00 <gira180>
 8001d02:	4603      	mov	r3, r0
 8001d04:	e006      	b.n	8001d14 <ejecutar_movimiento+0x74>

    case 3: // Girar 90° a la izquierda
        return gira90izq(sentido_actual);
 8001d06:	79fb      	ldrb	r3, [r7, #7]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7fe fe85 	bl	8000a18 <gira90izq>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	e000      	b.n	8001d14 <ejecutar_movimiento+0x74>

    default: // No debería pasar (caso 0) pero pola dice que siempre se pone default
        // avanza();
        return sentido_actual;
 8001d12:	79fb      	ldrb	r3, [r7, #7]
    }
 8001d14:	4618      	mov	r0, r3
 8001d16:	3710      	adds	r7, #16
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	607b      	str	r3, [r7, #4]
 8001d26:	4b10      	ldr	r3, [pc, #64]	@ (8001d68 <HAL_MspInit+0x4c>)
 8001d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d2a:	4a0f      	ldr	r2, [pc, #60]	@ (8001d68 <HAL_MspInit+0x4c>)
 8001d2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d30:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d32:	4b0d      	ldr	r3, [pc, #52]	@ (8001d68 <HAL_MspInit+0x4c>)
 8001d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d3a:	607b      	str	r3, [r7, #4]
 8001d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	603b      	str	r3, [r7, #0]
 8001d42:	4b09      	ldr	r3, [pc, #36]	@ (8001d68 <HAL_MspInit+0x4c>)
 8001d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d46:	4a08      	ldr	r2, [pc, #32]	@ (8001d68 <HAL_MspInit+0x4c>)
 8001d48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d4e:	4b06      	ldr	r3, [pc, #24]	@ (8001d68 <HAL_MspInit+0x4c>)
 8001d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d56:	603b      	str	r3, [r7, #0]
 8001d58:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d5a:	2007      	movs	r0, #7
 8001d5c:	f001 f876 	bl	8002e4c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d60:	bf00      	nop
 8001d62:	3708      	adds	r7, #8
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40023800 	.word	0x40023800

08001d6c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08a      	sub	sp, #40	@ 0x28
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d74:	f107 0314 	add.w	r3, r7, #20
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
 8001d80:	60da      	str	r2, [r3, #12]
 8001d82:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a2f      	ldr	r2, [pc, #188]	@ (8001e48 <HAL_ADC_MspInit+0xdc>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d157      	bne.n	8001e3e <HAL_ADC_MspInit+0xd2>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	613b      	str	r3, [r7, #16]
 8001d92:	4b2e      	ldr	r3, [pc, #184]	@ (8001e4c <HAL_ADC_MspInit+0xe0>)
 8001d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d96:	4a2d      	ldr	r2, [pc, #180]	@ (8001e4c <HAL_ADC_MspInit+0xe0>)
 8001d98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d9e:	4b2b      	ldr	r3, [pc, #172]	@ (8001e4c <HAL_ADC_MspInit+0xe0>)
 8001da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001da2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001da6:	613b      	str	r3, [r7, #16]
 8001da8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	4b27      	ldr	r3, [pc, #156]	@ (8001e4c <HAL_ADC_MspInit+0xe0>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db2:	4a26      	ldr	r2, [pc, #152]	@ (8001e4c <HAL_ADC_MspInit+0xe0>)
 8001db4:	f043 0302 	orr.w	r3, r3, #2
 8001db8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dba:	4b24      	ldr	r3, [pc, #144]	@ (8001e4c <HAL_ADC_MspInit+0xe0>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = RightSensor_Pin|LeftSensor_Pin;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dd2:	f107 0314 	add.w	r3, r7, #20
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	481d      	ldr	r0, [pc, #116]	@ (8001e50 <HAL_ADC_MspInit+0xe4>)
 8001dda:	f001 fc89 	bl	80036f0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001dde:	4b1d      	ldr	r3, [pc, #116]	@ (8001e54 <HAL_ADC_MspInit+0xe8>)
 8001de0:	4a1d      	ldr	r2, [pc, #116]	@ (8001e58 <HAL_ADC_MspInit+0xec>)
 8001de2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001de4:	4b1b      	ldr	r3, [pc, #108]	@ (8001e54 <HAL_ADC_MspInit+0xe8>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dea:	4b1a      	ldr	r3, [pc, #104]	@ (8001e54 <HAL_ADC_MspInit+0xe8>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001df0:	4b18      	ldr	r3, [pc, #96]	@ (8001e54 <HAL_ADC_MspInit+0xe8>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001df6:	4b17      	ldr	r3, [pc, #92]	@ (8001e54 <HAL_ADC_MspInit+0xe8>)
 8001df8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001dfc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001dfe:	4b15      	ldr	r3, [pc, #84]	@ (8001e54 <HAL_ADC_MspInit+0xe8>)
 8001e00:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001e04:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e06:	4b13      	ldr	r3, [pc, #76]	@ (8001e54 <HAL_ADC_MspInit+0xe8>)
 8001e08:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e0c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e0e:	4b11      	ldr	r3, [pc, #68]	@ (8001e54 <HAL_ADC_MspInit+0xe8>)
 8001e10:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e14:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001e16:	4b0f      	ldr	r3, [pc, #60]	@ (8001e54 <HAL_ADC_MspInit+0xe8>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e1c:	4b0d      	ldr	r3, [pc, #52]	@ (8001e54 <HAL_ADC_MspInit+0xe8>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e22:	480c      	ldr	r0, [pc, #48]	@ (8001e54 <HAL_ADC_MspInit+0xe8>)
 8001e24:	f001 f862 	bl	8002eec <HAL_DMA_Init>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001e2e:	f7ff fe6f 	bl	8001b10 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a07      	ldr	r2, [pc, #28]	@ (8001e54 <HAL_ADC_MspInit+0xe8>)
 8001e36:	639a      	str	r2, [r3, #56]	@ 0x38
 8001e38:	4a06      	ldr	r2, [pc, #24]	@ (8001e54 <HAL_ADC_MspInit+0xe8>)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001e3e:	bf00      	nop
 8001e40:	3728      	adds	r7, #40	@ 0x28
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40012000 	.word	0x40012000
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	40020400 	.word	0x40020400
 8001e54:	20000194 	.word	0x20000194
 8001e58:	40026410 	.word	0x40026410

08001e5c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b08a      	sub	sp, #40	@ 0x28
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e64:	f107 0314 	add.w	r3, r7, #20
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	605a      	str	r2, [r3, #4]
 8001e6e:	609a      	str	r2, [r3, #8]
 8001e70:	60da      	str	r2, [r3, #12]
 8001e72:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a19      	ldr	r2, [pc, #100]	@ (8001ee0 <HAL_I2C_MspInit+0x84>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d12c      	bne.n	8001ed8 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	613b      	str	r3, [r7, #16]
 8001e82:	4b18      	ldr	r3, [pc, #96]	@ (8001ee4 <HAL_I2C_MspInit+0x88>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e86:	4a17      	ldr	r2, [pc, #92]	@ (8001ee4 <HAL_I2C_MspInit+0x88>)
 8001e88:	f043 0302 	orr.w	r3, r3, #2
 8001e8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e8e:	4b15      	ldr	r3, [pc, #84]	@ (8001ee4 <HAL_I2C_MspInit+0x88>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	613b      	str	r3, [r7, #16]
 8001e98:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001e9a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001e9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ea0:	2312      	movs	r3, #18
 8001ea2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001eac:	2304      	movs	r3, #4
 8001eae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb0:	f107 0314 	add.w	r3, r7, #20
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	480c      	ldr	r0, [pc, #48]	@ (8001ee8 <HAL_I2C_MspInit+0x8c>)
 8001eb8:	f001 fc1a 	bl	80036f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	4b08      	ldr	r3, [pc, #32]	@ (8001ee4 <HAL_I2C_MspInit+0x88>)
 8001ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec4:	4a07      	ldr	r2, [pc, #28]	@ (8001ee4 <HAL_I2C_MspInit+0x88>)
 8001ec6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001eca:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ecc:	4b05      	ldr	r3, [pc, #20]	@ (8001ee4 <HAL_I2C_MspInit+0x88>)
 8001ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ed4:	60fb      	str	r3, [r7, #12]
 8001ed6:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001ed8:	bf00      	nop
 8001eda:	3728      	adds	r7, #40	@ 0x28
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40005400 	.word	0x40005400
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	40020400 	.word	0x40020400

08001eec <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b08a      	sub	sp, #40	@ 0x28
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef4:	f107 0314 	add.w	r3, r7, #20
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	605a      	str	r2, [r3, #4]
 8001efe:	609a      	str	r2, [r3, #8]
 8001f00:	60da      	str	r2, [r3, #12]
 8001f02:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a19      	ldr	r2, [pc, #100]	@ (8001f70 <HAL_SPI_MspInit+0x84>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d12b      	bne.n	8001f66 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f0e:	2300      	movs	r3, #0
 8001f10:	613b      	str	r3, [r7, #16]
 8001f12:	4b18      	ldr	r3, [pc, #96]	@ (8001f74 <HAL_SPI_MspInit+0x88>)
 8001f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f16:	4a17      	ldr	r2, [pc, #92]	@ (8001f74 <HAL_SPI_MspInit+0x88>)
 8001f18:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f1e:	4b15      	ldr	r3, [pc, #84]	@ (8001f74 <HAL_SPI_MspInit+0x88>)
 8001f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f22:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f26:	613b      	str	r3, [r7, #16]
 8001f28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	60fb      	str	r3, [r7, #12]
 8001f2e:	4b11      	ldr	r3, [pc, #68]	@ (8001f74 <HAL_SPI_MspInit+0x88>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f32:	4a10      	ldr	r2, [pc, #64]	@ (8001f74 <HAL_SPI_MspInit+0x88>)
 8001f34:	f043 0301 	orr.w	r3, r3, #1
 8001f38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f74 <HAL_SPI_MspInit+0x88>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	60fb      	str	r3, [r7, #12]
 8001f44:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001f46:	23e0      	movs	r3, #224	@ 0xe0
 8001f48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f52:	2300      	movs	r3, #0
 8001f54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f56:	2305      	movs	r3, #5
 8001f58:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f5a:	f107 0314 	add.w	r3, r7, #20
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4805      	ldr	r0, [pc, #20]	@ (8001f78 <HAL_SPI_MspInit+0x8c>)
 8001f62:	f001 fbc5 	bl	80036f0 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001f66:	bf00      	nop
 8001f68:	3728      	adds	r7, #40	@ 0x28
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	40013000 	.word	0x40013000
 8001f74:	40023800 	.word	0x40023800
 8001f78:	40020000 	.word	0x40020000

08001f7c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a0b      	ldr	r2, [pc, #44]	@ (8001fb8 <HAL_TIM_Base_MspInit+0x3c>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d10d      	bne.n	8001faa <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60fb      	str	r3, [r7, #12]
 8001f92:	4b0a      	ldr	r3, [pc, #40]	@ (8001fbc <HAL_TIM_Base_MspInit+0x40>)
 8001f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f96:	4a09      	ldr	r2, [pc, #36]	@ (8001fbc <HAL_TIM_Base_MspInit+0x40>)
 8001f98:	f043 0302 	orr.w	r3, r3, #2
 8001f9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f9e:	4b07      	ldr	r3, [pc, #28]	@ (8001fbc <HAL_TIM_Base_MspInit+0x40>)
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	60fb      	str	r3, [r7, #12]
 8001fa8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001faa:	bf00      	nop
 8001fac:	3714      	adds	r7, #20
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	40000400 	.word	0x40000400
 8001fbc:	40023800 	.word	0x40023800

08001fc0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b088      	sub	sp, #32
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc8:	f107 030c 	add.w	r3, r7, #12
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	605a      	str	r2, [r3, #4]
 8001fd2:	609a      	str	r2, [r3, #8]
 8001fd4:	60da      	str	r2, [r3, #12]
 8001fd6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a12      	ldr	r2, [pc, #72]	@ (8002028 <HAL_TIM_MspPostInit+0x68>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d11e      	bne.n	8002020 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	60bb      	str	r3, [r7, #8]
 8001fe6:	4b11      	ldr	r3, [pc, #68]	@ (800202c <HAL_TIM_MspPostInit+0x6c>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fea:	4a10      	ldr	r2, [pc, #64]	@ (800202c <HAL_TIM_MspPostInit+0x6c>)
 8001fec:	f043 0304 	orr.w	r3, r3, #4
 8001ff0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ff2:	4b0e      	ldr	r3, [pc, #56]	@ (800202c <HAL_TIM_MspPostInit+0x6c>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff6:	f003 0304 	and.w	r3, r3, #4
 8001ffa:	60bb      	str	r3, [r7, #8]
 8001ffc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = Vel_I_Pin|Vel_D_Pin;
 8001ffe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002002:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002004:	2302      	movs	r3, #2
 8002006:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002008:	2300      	movs	r3, #0
 800200a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200c:	2300      	movs	r3, #0
 800200e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002010:	2302      	movs	r3, #2
 8002012:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002014:	f107 030c 	add.w	r3, r7, #12
 8002018:	4619      	mov	r1, r3
 800201a:	4805      	ldr	r0, [pc, #20]	@ (8002030 <HAL_TIM_MspPostInit+0x70>)
 800201c:	f001 fb68 	bl	80036f0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002020:	bf00      	nop
 8002022:	3720      	adds	r7, #32
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40000400 	.word	0x40000400
 800202c:	40023800 	.word	0x40023800
 8002030:	40020800 	.word	0x40020800

08002034 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b08a      	sub	sp, #40	@ 0x28
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800203c:	f107 0314 	add.w	r3, r7, #20
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	605a      	str	r2, [r3, #4]
 8002046:	609a      	str	r2, [r3, #8]
 8002048:	60da      	str	r2, [r3, #12]
 800204a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a2c      	ldr	r2, [pc, #176]	@ (8002104 <HAL_UART_MspInit+0xd0>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d152      	bne.n	80020fc <HAL_UART_MspInit+0xc8>
  {
    /* USER CODE BEGIN UART5_MspInit 0 */

    /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002056:	2300      	movs	r3, #0
 8002058:	613b      	str	r3, [r7, #16]
 800205a:	4b2b      	ldr	r3, [pc, #172]	@ (8002108 <HAL_UART_MspInit+0xd4>)
 800205c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205e:	4a2a      	ldr	r2, [pc, #168]	@ (8002108 <HAL_UART_MspInit+0xd4>)
 8002060:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002064:	6413      	str	r3, [r2, #64]	@ 0x40
 8002066:	4b28      	ldr	r3, [pc, #160]	@ (8002108 <HAL_UART_MspInit+0xd4>)
 8002068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800206a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800206e:	613b      	str	r3, [r7, #16]
 8002070:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002072:	2300      	movs	r3, #0
 8002074:	60fb      	str	r3, [r7, #12]
 8002076:	4b24      	ldr	r3, [pc, #144]	@ (8002108 <HAL_UART_MspInit+0xd4>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800207a:	4a23      	ldr	r2, [pc, #140]	@ (8002108 <HAL_UART_MspInit+0xd4>)
 800207c:	f043 0304 	orr.w	r3, r3, #4
 8002080:	6313      	str	r3, [r2, #48]	@ 0x30
 8002082:	4b21      	ldr	r3, [pc, #132]	@ (8002108 <HAL_UART_MspInit+0xd4>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002086:	f003 0304 	and.w	r3, r3, #4
 800208a:	60fb      	str	r3, [r7, #12]
 800208c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800208e:	2300      	movs	r3, #0
 8002090:	60bb      	str	r3, [r7, #8]
 8002092:	4b1d      	ldr	r3, [pc, #116]	@ (8002108 <HAL_UART_MspInit+0xd4>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002096:	4a1c      	ldr	r2, [pc, #112]	@ (8002108 <HAL_UART_MspInit+0xd4>)
 8002098:	f043 0308 	orr.w	r3, r3, #8
 800209c:	6313      	str	r3, [r2, #48]	@ 0x30
 800209e:	4b1a      	ldr	r3, [pc, #104]	@ (8002108 <HAL_UART_MspInit+0xd4>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a2:	f003 0308 	and.w	r3, r3, #8
 80020a6:	60bb      	str	r3, [r7, #8]
 80020a8:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80020aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b0:	2302      	movs	r3, #2
 80020b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b4:	2300      	movs	r3, #0
 80020b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b8:	2303      	movs	r3, #3
 80020ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80020bc:	2308      	movs	r3, #8
 80020be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020c0:	f107 0314 	add.w	r3, r7, #20
 80020c4:	4619      	mov	r1, r3
 80020c6:	4811      	ldr	r0, [pc, #68]	@ (800210c <HAL_UART_MspInit+0xd8>)
 80020c8:	f001 fb12 	bl	80036f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80020cc:	2304      	movs	r3, #4
 80020ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d0:	2302      	movs	r3, #2
 80020d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d8:	2303      	movs	r3, #3
 80020da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80020dc:	2308      	movs	r3, #8
 80020de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020e0:	f107 0314 	add.w	r3, r7, #20
 80020e4:	4619      	mov	r1, r3
 80020e6:	480a      	ldr	r0, [pc, #40]	@ (8002110 <HAL_UART_MspInit+0xdc>)
 80020e8:	f001 fb02 	bl	80036f0 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80020ec:	2200      	movs	r2, #0
 80020ee:	2100      	movs	r1, #0
 80020f0:	2035      	movs	r0, #53	@ 0x35
 80020f2:	f000 feb6 	bl	8002e62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80020f6:	2035      	movs	r0, #53	@ 0x35
 80020f8:	f000 fecf 	bl	8002e9a <HAL_NVIC_EnableIRQ>

    /* USER CODE END UART5_MspInit 1 */

  }

}
 80020fc:	bf00      	nop
 80020fe:	3728      	adds	r7, #40	@ 0x28
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40005000 	.word	0x40005000
 8002108:	40023800 	.word	0x40023800
 800210c:	40020800 	.word	0x40020800
 8002110:	40020c00 	.word	0x40020c00

08002114 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002118:	bf00      	nop
 800211a:	e7fd      	b.n	8002118 <NMI_Handler+0x4>

0800211c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002120:	bf00      	nop
 8002122:	e7fd      	b.n	8002120 <HardFault_Handler+0x4>

08002124 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002128:	bf00      	nop
 800212a:	e7fd      	b.n	8002128 <MemManage_Handler+0x4>

0800212c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002130:	bf00      	nop
 8002132:	e7fd      	b.n	8002130 <BusFault_Handler+0x4>

08002134 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002138:	bf00      	nop
 800213a:	e7fd      	b.n	8002138 <UsageFault_Handler+0x4>

0800213c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002140:	bf00      	nop
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800214a:	b480      	push	{r7}
 800214c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800214e:	bf00      	nop
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800215c:	bf00      	nop
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800216a:	f000 f935 	bl	80023d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800216e:	bf00      	nop
 8002170:	bd80      	pop	{r7, pc}

08002172 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LineSensor_Pin);
 8002176:	2080      	movs	r0, #128	@ 0x80
 8002178:	f001 fc88 	bl	8003a8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800217c:	bf00      	nop
 800217e:	bd80      	pop	{r7, pc}

08002180 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002184:	4802      	ldr	r0, [pc, #8]	@ (8002190 <UART5_IRQHandler+0x10>)
 8002186:	f005 fbbf 	bl	8007908 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800218a:	bf00      	nop
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	200002e8 	.word	0x200002e8

08002194 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002198:	4802      	ldr	r0, [pc, #8]	@ (80021a4 <DMA2_Stream0_IRQHandler+0x10>)
 800219a:	f001 f83f 	bl	800321c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	20000194 	.word	0x20000194

080021a8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80021ac:	4802      	ldr	r0, [pc, #8]	@ (80021b8 <OTG_FS_IRQHandler+0x10>)
 80021ae:	f001 ff65 	bl	800407c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	200008cc 	.word	0x200008cc

080021bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021c4:	4a14      	ldr	r2, [pc, #80]	@ (8002218 <_sbrk+0x5c>)
 80021c6:	4b15      	ldr	r3, [pc, #84]	@ (800221c <_sbrk+0x60>)
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021d0:	4b13      	ldr	r3, [pc, #76]	@ (8002220 <_sbrk+0x64>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d102      	bne.n	80021de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021d8:	4b11      	ldr	r3, [pc, #68]	@ (8002220 <_sbrk+0x64>)
 80021da:	4a12      	ldr	r2, [pc, #72]	@ (8002224 <_sbrk+0x68>)
 80021dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021de:	4b10      	ldr	r3, [pc, #64]	@ (8002220 <_sbrk+0x64>)
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4413      	add	r3, r2
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d207      	bcs.n	80021fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021ec:	f00a f8fe 	bl	800c3ec <__errno>
 80021f0:	4603      	mov	r3, r0
 80021f2:	220c      	movs	r2, #12
 80021f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80021fa:	e009      	b.n	8002210 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021fc:	4b08      	ldr	r3, [pc, #32]	@ (8002220 <_sbrk+0x64>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002202:	4b07      	ldr	r3, [pc, #28]	@ (8002220 <_sbrk+0x64>)
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4413      	add	r3, r2
 800220a:	4a05      	ldr	r2, [pc, #20]	@ (8002220 <_sbrk+0x64>)
 800220c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800220e:	68fb      	ldr	r3, [r7, #12]
}
 8002210:	4618      	mov	r0, r3
 8002212:	3718      	adds	r7, #24
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	20020000 	.word	0x20020000
 800221c:	00000400 	.word	0x00000400
 8002220:	200004c8 	.word	0x200004c8
 8002224:	20000df8 	.word	0x20000df8

08002228 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800222c:	4b06      	ldr	r3, [pc, #24]	@ (8002248 <SystemInit+0x20>)
 800222e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002232:	4a05      	ldr	r2, [pc, #20]	@ (8002248 <SystemInit+0x20>)
 8002234:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002238:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800223c:	bf00      	nop
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	e000ed00 	.word	0xe000ed00

0800224c <Transmision>:
 *
 * @note Requiere que la variable global 'mensaje' esté configurada previamente
 * @warning Transmisión bloqueante - puede causar delay de hasta 50ms
 */
void Transmision(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
    strcat(mensaje, "\r\n");
 8002250:	480b      	ldr	r0, [pc, #44]	@ (8002280 <Transmision+0x34>)
 8002252:	f7fd ffbd 	bl	80001d0 <strlen>
 8002256:	4603      	mov	r3, r0
 8002258:	461a      	mov	r2, r3
 800225a:	4b09      	ldr	r3, [pc, #36]	@ (8002280 <Transmision+0x34>)
 800225c:	4413      	add	r3, r2
 800225e:	4a09      	ldr	r2, [pc, #36]	@ (8002284 <Transmision+0x38>)
 8002260:	8811      	ldrh	r1, [r2, #0]
 8002262:	7892      	ldrb	r2, [r2, #2]
 8002264:	8019      	strh	r1, [r3, #0]
 8002266:	709a      	strb	r2, [r3, #2]
    HAL_UART_Transmit(&huart5, (uint8_t *)mensaje, strlen(mensaje), delay);
 8002268:	4805      	ldr	r0, [pc, #20]	@ (8002280 <Transmision+0x34>)
 800226a:	f7fd ffb1 	bl	80001d0 <strlen>
 800226e:	4603      	mov	r3, r0
 8002270:	b29a      	uxth	r2, r3
 8002272:	2332      	movs	r3, #50	@ 0x32
 8002274:	4902      	ldr	r1, [pc, #8]	@ (8002280 <Transmision+0x34>)
 8002276:	4804      	ldr	r0, [pc, #16]	@ (8002288 <Transmision+0x3c>)
 8002278:	f005 fa96 	bl	80077a8 <HAL_UART_Transmit>
}
 800227c:	bf00      	nop
 800227e:	bd80      	pop	{r7, pc}
 8002280:	200004cc 	.word	0x200004cc
 8002284:	0800cb88 	.word	0x0800cb88
 8002288:	200002e8 	.word	0x200002e8

0800228c <Inicializar_UART>:
 *
 * @note Se ejecuta una sola vez al inicio del programa
 * @note Habilita recepción continua por interrupciones
 */
void Inicializar_UART(void)
{
 800228c:	b598      	push	{r3, r4, r7, lr}
 800228e:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart5, buffer, sizeof(buffer));
 8002290:	2210      	movs	r2, #16
 8002292:	490f      	ldr	r1, [pc, #60]	@ (80022d0 <Inicializar_UART+0x44>)
 8002294:	480f      	ldr	r0, [pc, #60]	@ (80022d4 <Inicializar_UART+0x48>)
 8002296:	f005 fb12 	bl	80078be <HAL_UART_Receive_IT>
    mensaje[0] = '\r';
 800229a:	4b0f      	ldr	r3, [pc, #60]	@ (80022d8 <Inicializar_UART+0x4c>)
 800229c:	220d      	movs	r2, #13
 800229e:	701a      	strb	r2, [r3, #0]
    mensaje[1] = '\n';
 80022a0:	4b0d      	ldr	r3, [pc, #52]	@ (80022d8 <Inicializar_UART+0x4c>)
 80022a2:	220a      	movs	r2, #10
 80022a4:	705a      	strb	r2, [r3, #1]
    mensaje[2] = '\0';
 80022a6:	4b0c      	ldr	r3, [pc, #48]	@ (80022d8 <Inicializar_UART+0x4c>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	709a      	strb	r2, [r3, #2]
    Transmision();
 80022ac:	f7ff ffce 	bl	800224c <Transmision>
    strcpy(mensaje, "UART conectada");
 80022b0:	4a09      	ldr	r2, [pc, #36]	@ (80022d8 <Inicializar_UART+0x4c>)
 80022b2:	4b0a      	ldr	r3, [pc, #40]	@ (80022dc <Inicializar_UART+0x50>)
 80022b4:	4614      	mov	r4, r2
 80022b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022b8:	c407      	stmia	r4!, {r0, r1, r2}
 80022ba:	8023      	strh	r3, [r4, #0]
 80022bc:	3402      	adds	r4, #2
 80022be:	0c1b      	lsrs	r3, r3, #16
 80022c0:	7023      	strb	r3, [r4, #0]
    Transmision();
 80022c2:	f7ff ffc3 	bl	800224c <Transmision>
    mensaje[0] = '\0';
 80022c6:	4b04      	ldr	r3, [pc, #16]	@ (80022d8 <Inicializar_UART+0x4c>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	701a      	strb	r2, [r3, #0]
}
 80022cc:	bf00      	nop
 80022ce:	bd98      	pop	{r3, r4, r7, pc}
 80022d0:	200004dc 	.word	0x200004dc
 80022d4:	200002e8 	.word	0x200002e8
 80022d8:	200004cc 	.word	0x200004cc
 80022dc:	0800cb8c 	.word	0x0800cb8c

080022e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80022e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002318 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80022e4:	f7ff ffa0 	bl	8002228 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022e8:	480c      	ldr	r0, [pc, #48]	@ (800231c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022ea:	490d      	ldr	r1, [pc, #52]	@ (8002320 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002324 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022f0:	e002      	b.n	80022f8 <LoopCopyDataInit>

080022f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022f6:	3304      	adds	r3, #4

080022f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022fc:	d3f9      	bcc.n	80022f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002328 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002300:	4c0a      	ldr	r4, [pc, #40]	@ (800232c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002302:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002304:	e001      	b.n	800230a <LoopFillZerobss>

08002306 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002306:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002308:	3204      	adds	r2, #4

0800230a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800230a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800230c:	d3fb      	bcc.n	8002306 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800230e:	f00a f873 	bl	800c3f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002312:	f7fe fee5 	bl	80010e0 <main>
  bx  lr    
 8002316:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002318:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800231c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002320:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8002324:	0800cc08 	.word	0x0800cc08
  ldr r2, =_sbss
 8002328:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 800232c:	20000df4 	.word	0x20000df4

08002330 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002330:	e7fe      	b.n	8002330 <ADC_IRQHandler>
	...

08002334 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002338:	4b0e      	ldr	r3, [pc, #56]	@ (8002374 <HAL_Init+0x40>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a0d      	ldr	r2, [pc, #52]	@ (8002374 <HAL_Init+0x40>)
 800233e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002342:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002344:	4b0b      	ldr	r3, [pc, #44]	@ (8002374 <HAL_Init+0x40>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a0a      	ldr	r2, [pc, #40]	@ (8002374 <HAL_Init+0x40>)
 800234a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800234e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002350:	4b08      	ldr	r3, [pc, #32]	@ (8002374 <HAL_Init+0x40>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a07      	ldr	r2, [pc, #28]	@ (8002374 <HAL_Init+0x40>)
 8002356:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800235a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800235c:	2003      	movs	r0, #3
 800235e:	f000 fd75 	bl	8002e4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002362:	2000      	movs	r0, #0
 8002364:	f000 f808 	bl	8002378 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002368:	f7ff fcd8 	bl	8001d1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	40023c00 	.word	0x40023c00

08002378 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002380:	4b12      	ldr	r3, [pc, #72]	@ (80023cc <HAL_InitTick+0x54>)
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	4b12      	ldr	r3, [pc, #72]	@ (80023d0 <HAL_InitTick+0x58>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	4619      	mov	r1, r3
 800238a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800238e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002392:	fbb2 f3f3 	udiv	r3, r2, r3
 8002396:	4618      	mov	r0, r3
 8002398:	f000 fd9b 	bl	8002ed2 <HAL_SYSTICK_Config>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e00e      	b.n	80023c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2b0f      	cmp	r3, #15
 80023aa:	d80a      	bhi.n	80023c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023ac:	2200      	movs	r2, #0
 80023ae:	6879      	ldr	r1, [r7, #4]
 80023b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80023b4:	f000 fd55 	bl	8002e62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023b8:	4a06      	ldr	r2, [pc, #24]	@ (80023d4 <HAL_InitTick+0x5c>)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023be:	2300      	movs	r3, #0
 80023c0:	e000      	b.n	80023c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3708      	adds	r7, #8
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	2000001c 	.word	0x2000001c
 80023d0:	20000024 	.word	0x20000024
 80023d4:	20000020 	.word	0x20000020

080023d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023dc:	4b06      	ldr	r3, [pc, #24]	@ (80023f8 <HAL_IncTick+0x20>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	461a      	mov	r2, r3
 80023e2:	4b06      	ldr	r3, [pc, #24]	@ (80023fc <HAL_IncTick+0x24>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4413      	add	r3, r2
 80023e8:	4a04      	ldr	r2, [pc, #16]	@ (80023fc <HAL_IncTick+0x24>)
 80023ea:	6013      	str	r3, [r2, #0]
}
 80023ec:	bf00      	nop
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	20000024 	.word	0x20000024
 80023fc:	200004ec 	.word	0x200004ec

08002400 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  return uwTick;
 8002404:	4b03      	ldr	r3, [pc, #12]	@ (8002414 <HAL_GetTick+0x14>)
 8002406:	681b      	ldr	r3, [r3, #0]
}
 8002408:	4618      	mov	r0, r3
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	200004ec 	.word	0x200004ec

08002418 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002420:	f7ff ffee 	bl	8002400 <HAL_GetTick>
 8002424:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002430:	d005      	beq.n	800243e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002432:	4b0a      	ldr	r3, [pc, #40]	@ (800245c <HAL_Delay+0x44>)
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	461a      	mov	r2, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	4413      	add	r3, r2
 800243c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800243e:	bf00      	nop
 8002440:	f7ff ffde 	bl	8002400 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	68fa      	ldr	r2, [r7, #12]
 800244c:	429a      	cmp	r2, r3
 800244e:	d8f7      	bhi.n	8002440 <HAL_Delay+0x28>
  {
  }
}
 8002450:	bf00      	nop
 8002452:	bf00      	nop
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	20000024 	.word	0x20000024

08002460 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002468:	2300      	movs	r3, #0
 800246a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e033      	b.n	80024de <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247a:	2b00      	cmp	r3, #0
 800247c:	d109      	bne.n	8002492 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f7ff fc74 	bl	8001d6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002496:	f003 0310 	and.w	r3, r3, #16
 800249a:	2b00      	cmp	r3, #0
 800249c:	d118      	bne.n	80024d0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80024a6:	f023 0302 	bic.w	r3, r3, #2
 80024aa:	f043 0202 	orr.w	r2, r3, #2
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 fa58 	bl	8002968 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c2:	f023 0303 	bic.w	r3, r3, #3
 80024c6:	f043 0201 	orr.w	r2, r3, #1
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	641a      	str	r2, [r3, #64]	@ 0x40
 80024ce:	e001      	b.n	80024d4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80024dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
	...

080024e8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b088      	sub	sp, #32
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80024f4:	2300      	movs	r3, #0
 80024f6:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024f8:	2300      	movs	r3, #0
 80024fa:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002502:	2b01      	cmp	r3, #1
 8002504:	d101      	bne.n	800250a <HAL_ADC_Start_DMA+0x22>
 8002506:	2302      	movs	r3, #2
 8002508:	e0eb      	b.n	80026e2 <HAL_ADC_Start_DMA+0x1fa>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2201      	movs	r2, #1
 800250e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f003 0301 	and.w	r3, r3, #1
 800251c:	2b01      	cmp	r3, #1
 800251e:	d018      	beq.n	8002552 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	689a      	ldr	r2, [r3, #8]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f042 0201 	orr.w	r2, r2, #1
 800252e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002530:	4b6e      	ldr	r3, [pc, #440]	@ (80026ec <HAL_ADC_Start_DMA+0x204>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a6e      	ldr	r2, [pc, #440]	@ (80026f0 <HAL_ADC_Start_DMA+0x208>)
 8002536:	fba2 2303 	umull	r2, r3, r2, r3
 800253a:	0c9a      	lsrs	r2, r3, #18
 800253c:	4613      	mov	r3, r2
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	4413      	add	r3, r2
 8002542:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8002544:	e002      	b.n	800254c <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	3b01      	subs	r3, #1
 800254a:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1f9      	bne.n	8002546 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800255c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002560:	d107      	bne.n	8002572 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	689a      	ldr	r2, [r3, #8]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002570:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	2b01      	cmp	r3, #1
 800257e:	f040 80a3 	bne.w	80026c8 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002586:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800258a:	f023 0301 	bic.w	r3, r3, #1
 800258e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d007      	beq.n	80025b4 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80025ac:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025c0:	d106      	bne.n	80025d0 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025c6:	f023 0206 	bic.w	r2, r3, #6
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	645a      	str	r2, [r3, #68]	@ 0x44
 80025ce:	e002      	b.n	80025d6 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2200      	movs	r2, #0
 80025d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025de:	4b45      	ldr	r3, [pc, #276]	@ (80026f4 <HAL_ADC_Start_DMA+0x20c>)
 80025e0:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025e6:	4a44      	ldr	r2, [pc, #272]	@ (80026f8 <HAL_ADC_Start_DMA+0x210>)
 80025e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025ee:	4a43      	ldr	r2, [pc, #268]	@ (80026fc <HAL_ADC_Start_DMA+0x214>)
 80025f0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025f6:	4a42      	ldr	r2, [pc, #264]	@ (8002700 <HAL_ADC_Start_DMA+0x218>)
 80025f8:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002602:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	685a      	ldr	r2, [r3, #4]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002612:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	689a      	ldr	r2, [r3, #8]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002622:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	334c      	adds	r3, #76	@ 0x4c
 800262e:	4619      	mov	r1, r3
 8002630:	68ba      	ldr	r2, [r7, #8]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f000 fd08 	bl	8003048 <HAL_DMA_Start_IT>
 8002638:	4603      	mov	r3, r0
 800263a:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f003 031f 	and.w	r3, r3, #31
 8002644:	2b00      	cmp	r3, #0
 8002646:	d12a      	bne.n	800269e <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a2d      	ldr	r2, [pc, #180]	@ (8002704 <HAL_ADC_Start_DMA+0x21c>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d015      	beq.n	800267e <HAL_ADC_Start_DMA+0x196>
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a2c      	ldr	r2, [pc, #176]	@ (8002708 <HAL_ADC_Start_DMA+0x220>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d105      	bne.n	8002668 <HAL_ADC_Start_DMA+0x180>
 800265c:	4b25      	ldr	r3, [pc, #148]	@ (80026f4 <HAL_ADC_Start_DMA+0x20c>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f003 031f 	and.w	r3, r3, #31
 8002664:	2b00      	cmp	r3, #0
 8002666:	d00a      	beq.n	800267e <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a27      	ldr	r2, [pc, #156]	@ (800270c <HAL_ADC_Start_DMA+0x224>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d136      	bne.n	80026e0 <HAL_ADC_Start_DMA+0x1f8>
 8002672:	4b20      	ldr	r3, [pc, #128]	@ (80026f4 <HAL_ADC_Start_DMA+0x20c>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f003 0310 	and.w	r3, r3, #16
 800267a:	2b00      	cmp	r3, #0
 800267c:	d130      	bne.n	80026e0 <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d129      	bne.n	80026e0 <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	689a      	ldr	r2, [r3, #8]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800269a:	609a      	str	r2, [r3, #8]
 800269c:	e020      	b.n	80026e0 <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a18      	ldr	r2, [pc, #96]	@ (8002704 <HAL_ADC_Start_DMA+0x21c>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d11b      	bne.n	80026e0 <HAL_ADC_Start_DMA+0x1f8>
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d114      	bne.n	80026e0 <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80026c4:	609a      	str	r2, [r3, #8]
 80026c6:	e00b      	b.n	80026e0 <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026cc:	f043 0210 	orr.w	r2, r3, #16
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026d8:	f043 0201 	orr.w	r2, r3, #1
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 80026e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3720      	adds	r7, #32
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	2000001c 	.word	0x2000001c
 80026f0:	431bde83 	.word	0x431bde83
 80026f4:	40012300 	.word	0x40012300
 80026f8:	08002b61 	.word	0x08002b61
 80026fc:	08002c1b 	.word	0x08002c1b
 8002700:	08002c37 	.word	0x08002c37
 8002704:	40012000 	.word	0x40012000
 8002708:	40012100 	.word	0x40012100
 800270c:	40012200 	.word	0x40012200

08002710 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002724:	b480      	push	{r7}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800272e:	2300      	movs	r3, #0
 8002730:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002738:	2b01      	cmp	r3, #1
 800273a:	d101      	bne.n	8002740 <HAL_ADC_ConfigChannel+0x1c>
 800273c:	2302      	movs	r3, #2
 800273e:	e105      	b.n	800294c <HAL_ADC_ConfigChannel+0x228>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2b09      	cmp	r3, #9
 800274e:	d925      	bls.n	800279c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68d9      	ldr	r1, [r3, #12]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	b29b      	uxth	r3, r3
 800275c:	461a      	mov	r2, r3
 800275e:	4613      	mov	r3, r2
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	4413      	add	r3, r2
 8002764:	3b1e      	subs	r3, #30
 8002766:	2207      	movs	r2, #7
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	43da      	mvns	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	400a      	ands	r2, r1
 8002774:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68d9      	ldr	r1, [r3, #12]
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	689a      	ldr	r2, [r3, #8]
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	b29b      	uxth	r3, r3
 8002786:	4618      	mov	r0, r3
 8002788:	4603      	mov	r3, r0
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	4403      	add	r3, r0
 800278e:	3b1e      	subs	r3, #30
 8002790:	409a      	lsls	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	430a      	orrs	r2, r1
 8002798:	60da      	str	r2, [r3, #12]
 800279a:	e022      	b.n	80027e2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6919      	ldr	r1, [r3, #16]
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	461a      	mov	r2, r3
 80027aa:	4613      	mov	r3, r2
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	4413      	add	r3, r2
 80027b0:	2207      	movs	r2, #7
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	43da      	mvns	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	400a      	ands	r2, r1
 80027be:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6919      	ldr	r1, [r3, #16]
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	689a      	ldr	r2, [r3, #8]
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	4618      	mov	r0, r3
 80027d2:	4603      	mov	r3, r0
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	4403      	add	r3, r0
 80027d8:	409a      	lsls	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	430a      	orrs	r2, r1
 80027e0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	2b06      	cmp	r3, #6
 80027e8:	d824      	bhi.n	8002834 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	4613      	mov	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	4413      	add	r3, r2
 80027fa:	3b05      	subs	r3, #5
 80027fc:	221f      	movs	r2, #31
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	43da      	mvns	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	400a      	ands	r2, r1
 800280a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	b29b      	uxth	r3, r3
 8002818:	4618      	mov	r0, r3
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685a      	ldr	r2, [r3, #4]
 800281e:	4613      	mov	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	4413      	add	r3, r2
 8002824:	3b05      	subs	r3, #5
 8002826:	fa00 f203 	lsl.w	r2, r0, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	430a      	orrs	r2, r1
 8002830:	635a      	str	r2, [r3, #52]	@ 0x34
 8002832:	e04c      	b.n	80028ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	2b0c      	cmp	r3, #12
 800283a:	d824      	bhi.n	8002886 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685a      	ldr	r2, [r3, #4]
 8002846:	4613      	mov	r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4413      	add	r3, r2
 800284c:	3b23      	subs	r3, #35	@ 0x23
 800284e:	221f      	movs	r2, #31
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	43da      	mvns	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	400a      	ands	r2, r1
 800285c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	b29b      	uxth	r3, r3
 800286a:	4618      	mov	r0, r3
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	4613      	mov	r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	4413      	add	r3, r2
 8002876:	3b23      	subs	r3, #35	@ 0x23
 8002878:	fa00 f203 	lsl.w	r2, r0, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	430a      	orrs	r2, r1
 8002882:	631a      	str	r2, [r3, #48]	@ 0x30
 8002884:	e023      	b.n	80028ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	4613      	mov	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	4413      	add	r3, r2
 8002896:	3b41      	subs	r3, #65	@ 0x41
 8002898:	221f      	movs	r2, #31
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	43da      	mvns	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	400a      	ands	r2, r1
 80028a6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	4618      	mov	r0, r3
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	4613      	mov	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	4413      	add	r3, r2
 80028c0:	3b41      	subs	r3, #65	@ 0x41
 80028c2:	fa00 f203 	lsl.w	r2, r0, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	430a      	orrs	r2, r1
 80028cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028ce:	4b22      	ldr	r3, [pc, #136]	@ (8002958 <HAL_ADC_ConfigChannel+0x234>)
 80028d0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a21      	ldr	r2, [pc, #132]	@ (800295c <HAL_ADC_ConfigChannel+0x238>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d109      	bne.n	80028f0 <HAL_ADC_ConfigChannel+0x1cc>
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2b12      	cmp	r3, #18
 80028e2:	d105      	bne.n	80028f0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a19      	ldr	r2, [pc, #100]	@ (800295c <HAL_ADC_ConfigChannel+0x238>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d123      	bne.n	8002942 <HAL_ADC_ConfigChannel+0x21e>
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2b10      	cmp	r3, #16
 8002900:	d003      	beq.n	800290a <HAL_ADC_ConfigChannel+0x1e6>
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2b11      	cmp	r3, #17
 8002908:	d11b      	bne.n	8002942 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2b10      	cmp	r3, #16
 800291c:	d111      	bne.n	8002942 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800291e:	4b10      	ldr	r3, [pc, #64]	@ (8002960 <HAL_ADC_ConfigChannel+0x23c>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a10      	ldr	r2, [pc, #64]	@ (8002964 <HAL_ADC_ConfigChannel+0x240>)
 8002924:	fba2 2303 	umull	r2, r3, r2, r3
 8002928:	0c9a      	lsrs	r2, r3, #18
 800292a:	4613      	mov	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4413      	add	r3, r2
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002934:	e002      	b.n	800293c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	3b01      	subs	r3, #1
 800293a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1f9      	bne.n	8002936 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3714      	adds	r7, #20
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr
 8002958:	40012300 	.word	0x40012300
 800295c:	40012000 	.word	0x40012000
 8002960:	2000001c 	.word	0x2000001c
 8002964:	431bde83 	.word	0x431bde83

08002968 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002970:	4b79      	ldr	r3, [pc, #484]	@ (8002b58 <ADC_Init+0x1f0>)
 8002972:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	431a      	orrs	r2, r3
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	685a      	ldr	r2, [r3, #4]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800299c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	6859      	ldr	r1, [r3, #4]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	021a      	lsls	r2, r3, #8
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	430a      	orrs	r2, r1
 80029b0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	685a      	ldr	r2, [r3, #4]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80029c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	6859      	ldr	r1, [r3, #4]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689a      	ldr	r2, [r3, #8]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	430a      	orrs	r2, r1
 80029d2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	689a      	ldr	r2, [r3, #8]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6899      	ldr	r1, [r3, #8]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	68da      	ldr	r2, [r3, #12]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	430a      	orrs	r2, r1
 80029f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029fa:	4a58      	ldr	r2, [pc, #352]	@ (8002b5c <ADC_Init+0x1f4>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d022      	beq.n	8002a46 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	689a      	ldr	r2, [r3, #8]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002a0e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	6899      	ldr	r1, [r3, #8]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002a30:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	6899      	ldr	r1, [r3, #8]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	430a      	orrs	r2, r1
 8002a42:	609a      	str	r2, [r3, #8]
 8002a44:	e00f      	b.n	8002a66 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002a54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	689a      	ldr	r2, [r3, #8]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002a64:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	689a      	ldr	r2, [r3, #8]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 0202 	bic.w	r2, r2, #2
 8002a74:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	6899      	ldr	r1, [r3, #8]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	7e1b      	ldrb	r3, [r3, #24]
 8002a80:	005a      	lsls	r2, r3, #1
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	430a      	orrs	r2, r1
 8002a88:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d01b      	beq.n	8002acc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	685a      	ldr	r2, [r3, #4]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002aa2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	685a      	ldr	r2, [r3, #4]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002ab2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6859      	ldr	r1, [r3, #4]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	035a      	lsls	r2, r3, #13
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	605a      	str	r2, [r3, #4]
 8002aca:	e007      	b.n	8002adc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	685a      	ldr	r2, [r3, #4]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ada:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002aea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	69db      	ldr	r3, [r3, #28]
 8002af6:	3b01      	subs	r3, #1
 8002af8:	051a      	lsls	r2, r3, #20
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	430a      	orrs	r2, r1
 8002b00:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	689a      	ldr	r2, [r3, #8]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002b10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	6899      	ldr	r1, [r3, #8]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002b1e:	025a      	lsls	r2, r3, #9
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	430a      	orrs	r2, r1
 8002b26:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	689a      	ldr	r2, [r3, #8]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6899      	ldr	r1, [r3, #8]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	029a      	lsls	r2, r3, #10
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	609a      	str	r2, [r3, #8]
}
 8002b4c:	bf00      	nop
 8002b4e:	3714      	adds	r7, #20
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr
 8002b58:	40012300 	.word	0x40012300
 8002b5c:	0f000001 	.word	0x0f000001

08002b60 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b6c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b72:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d13c      	bne.n	8002bf4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d12b      	bne.n	8002bec <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d127      	bne.n	8002bec <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ba2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d006      	beq.n	8002bb8 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d119      	bne.n	8002bec <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	685a      	ldr	r2, [r3, #4]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f022 0220 	bic.w	r2, r2, #32
 8002bc6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bcc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d105      	bne.n	8002bec <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be4:	f043 0201 	orr.w	r2, r3, #1
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f7fd fd3d 	bl	800066c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002bf2:	e00e      	b.n	8002c12 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf8:	f003 0310 	and.w	r3, r3, #16
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d003      	beq.n	8002c08 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002c00:	68f8      	ldr	r0, [r7, #12]
 8002c02:	f7ff fd85 	bl	8002710 <HAL_ADC_ErrorCallback>
}
 8002c06:	e004      	b.n	8002c12 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	4798      	blx	r3
}
 8002c12:	bf00      	nop
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b084      	sub	sp, #16
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c26:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002c28:	68f8      	ldr	r0, [r7, #12]
 8002c2a:	f7fd fd11 	bl	8000650 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c2e:	bf00      	nop
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b084      	sub	sp, #16
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c42:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2240      	movs	r2, #64	@ 0x40
 8002c48:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c4e:	f043 0204 	orr.w	r2, r3, #4
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f7ff fd5a 	bl	8002710 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c5c:	bf00      	nop
 8002c5e:	3710      	adds	r7, #16
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f003 0307 	and.w	r3, r3, #7
 8002c72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c74:	4b0c      	ldr	r3, [pc, #48]	@ (8002ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c7a:	68ba      	ldr	r2, [r7, #8]
 8002c7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c80:	4013      	ands	r3, r2
 8002c82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c96:	4a04      	ldr	r2, [pc, #16]	@ (8002ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	60d3      	str	r3, [r2, #12]
}
 8002c9c:	bf00      	nop
 8002c9e:	3714      	adds	r7, #20
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr
 8002ca8:	e000ed00 	.word	0xe000ed00

08002cac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cb0:	4b04      	ldr	r3, [pc, #16]	@ (8002cc4 <__NVIC_GetPriorityGrouping+0x18>)
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	0a1b      	lsrs	r3, r3, #8
 8002cb6:	f003 0307 	and.w	r3, r3, #7
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr
 8002cc4:	e000ed00 	.word	0xe000ed00

08002cc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	4603      	mov	r3, r0
 8002cd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	db0b      	blt.n	8002cf2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cda:	79fb      	ldrb	r3, [r7, #7]
 8002cdc:	f003 021f 	and.w	r2, r3, #31
 8002ce0:	4907      	ldr	r1, [pc, #28]	@ (8002d00 <__NVIC_EnableIRQ+0x38>)
 8002ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce6:	095b      	lsrs	r3, r3, #5
 8002ce8:	2001      	movs	r0, #1
 8002cea:	fa00 f202 	lsl.w	r2, r0, r2
 8002cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002cf2:	bf00      	nop
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	e000e100 	.word	0xe000e100

08002d04 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	db12      	blt.n	8002d3c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d16:	79fb      	ldrb	r3, [r7, #7]
 8002d18:	f003 021f 	and.w	r2, r3, #31
 8002d1c:	490a      	ldr	r1, [pc, #40]	@ (8002d48 <__NVIC_DisableIRQ+0x44>)
 8002d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d22:	095b      	lsrs	r3, r3, #5
 8002d24:	2001      	movs	r0, #1
 8002d26:	fa00 f202 	lsl.w	r2, r0, r2
 8002d2a:	3320      	adds	r3, #32
 8002d2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002d30:	f3bf 8f4f 	dsb	sy
}
 8002d34:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002d36:	f3bf 8f6f 	isb	sy
}
 8002d3a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr
 8002d48:	e000e100 	.word	0xe000e100

08002d4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	4603      	mov	r3, r0
 8002d54:	6039      	str	r1, [r7, #0]
 8002d56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	db0a      	blt.n	8002d76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	490c      	ldr	r1, [pc, #48]	@ (8002d98 <__NVIC_SetPriority+0x4c>)
 8002d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6a:	0112      	lsls	r2, r2, #4
 8002d6c:	b2d2      	uxtb	r2, r2
 8002d6e:	440b      	add	r3, r1
 8002d70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d74:	e00a      	b.n	8002d8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	b2da      	uxtb	r2, r3
 8002d7a:	4908      	ldr	r1, [pc, #32]	@ (8002d9c <__NVIC_SetPriority+0x50>)
 8002d7c:	79fb      	ldrb	r3, [r7, #7]
 8002d7e:	f003 030f 	and.w	r3, r3, #15
 8002d82:	3b04      	subs	r3, #4
 8002d84:	0112      	lsls	r2, r2, #4
 8002d86:	b2d2      	uxtb	r2, r2
 8002d88:	440b      	add	r3, r1
 8002d8a:	761a      	strb	r2, [r3, #24]
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	e000e100 	.word	0xe000e100
 8002d9c:	e000ed00 	.word	0xe000ed00

08002da0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b089      	sub	sp, #36	@ 0x24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f003 0307 	and.w	r3, r3, #7
 8002db2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	f1c3 0307 	rsb	r3, r3, #7
 8002dba:	2b04      	cmp	r3, #4
 8002dbc:	bf28      	it	cs
 8002dbe:	2304      	movcs	r3, #4
 8002dc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	3304      	adds	r3, #4
 8002dc6:	2b06      	cmp	r3, #6
 8002dc8:	d902      	bls.n	8002dd0 <NVIC_EncodePriority+0x30>
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	3b03      	subs	r3, #3
 8002dce:	e000      	b.n	8002dd2 <NVIC_EncodePriority+0x32>
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dd4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	fa02 f303 	lsl.w	r3, r2, r3
 8002dde:	43da      	mvns	r2, r3
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	401a      	ands	r2, r3
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002de8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	fa01 f303 	lsl.w	r3, r1, r3
 8002df2:	43d9      	mvns	r1, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002df8:	4313      	orrs	r3, r2
         );
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3724      	adds	r7, #36	@ 0x24
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
	...

08002e08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	3b01      	subs	r3, #1
 8002e14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e18:	d301      	bcc.n	8002e1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e00f      	b.n	8002e3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e1e:	4a0a      	ldr	r2, [pc, #40]	@ (8002e48 <SysTick_Config+0x40>)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	3b01      	subs	r3, #1
 8002e24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e26:	210f      	movs	r1, #15
 8002e28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002e2c:	f7ff ff8e 	bl	8002d4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e30:	4b05      	ldr	r3, [pc, #20]	@ (8002e48 <SysTick_Config+0x40>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e36:	4b04      	ldr	r3, [pc, #16]	@ (8002e48 <SysTick_Config+0x40>)
 8002e38:	2207      	movs	r2, #7
 8002e3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	e000e010 	.word	0xe000e010

08002e4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f7ff ff05 	bl	8002c64 <__NVIC_SetPriorityGrouping>
}
 8002e5a:	bf00      	nop
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b086      	sub	sp, #24
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	4603      	mov	r3, r0
 8002e6a:	60b9      	str	r1, [r7, #8]
 8002e6c:	607a      	str	r2, [r7, #4]
 8002e6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e70:	2300      	movs	r3, #0
 8002e72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e74:	f7ff ff1a 	bl	8002cac <__NVIC_GetPriorityGrouping>
 8002e78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	68b9      	ldr	r1, [r7, #8]
 8002e7e:	6978      	ldr	r0, [r7, #20]
 8002e80:	f7ff ff8e 	bl	8002da0 <NVIC_EncodePriority>
 8002e84:	4602      	mov	r2, r0
 8002e86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e8a:	4611      	mov	r1, r2
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7ff ff5d 	bl	8002d4c <__NVIC_SetPriority>
}
 8002e92:	bf00      	nop
 8002e94:	3718      	adds	r7, #24
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b082      	sub	sp, #8
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff ff0d 	bl	8002cc8 <__NVIC_EnableIRQ>
}
 8002eae:	bf00      	nop
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b082      	sub	sp, #8
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7ff ff1d 	bl	8002d04 <__NVIC_DisableIRQ>
}
 8002eca:	bf00      	nop
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b082      	sub	sp, #8
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f7ff ff94 	bl	8002e08 <SysTick_Config>
 8002ee0:	4603      	mov	r3, r0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
	...

08002eec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b086      	sub	sp, #24
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ef8:	f7ff fa82 	bl	8002400 <HAL_GetTick>
 8002efc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d101      	bne.n	8002f08 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e099      	b.n	800303c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f022 0201 	bic.w	r2, r2, #1
 8002f26:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f28:	e00f      	b.n	8002f4a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f2a:	f7ff fa69 	bl	8002400 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b05      	cmp	r3, #5
 8002f36:	d908      	bls.n	8002f4a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2220      	movs	r2, #32
 8002f3c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2203      	movs	r2, #3
 8002f42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e078      	b.n	800303c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0301 	and.w	r3, r3, #1
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1e8      	bne.n	8002f2a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f60:	697a      	ldr	r2, [r7, #20]
 8002f62:	4b38      	ldr	r3, [pc, #224]	@ (8003044 <HAL_DMA_Init+0x158>)
 8002f64:	4013      	ands	r3, r2
 8002f66:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685a      	ldr	r2, [r3, #4]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f76:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a1b      	ldr	r3, [r3, #32]
 8002f94:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f96:	697a      	ldr	r2, [r7, #20]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa0:	2b04      	cmp	r3, #4
 8002fa2:	d107      	bne.n	8002fb4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fac:	4313      	orrs	r3, r2
 8002fae:	697a      	ldr	r2, [r7, #20]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	f023 0307 	bic.w	r3, r3, #7
 8002fca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd0:	697a      	ldr	r2, [r7, #20]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fda:	2b04      	cmp	r3, #4
 8002fdc:	d117      	bne.n	800300e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fe2:	697a      	ldr	r2, [r7, #20]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d00e      	beq.n	800300e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f000 fb01 	bl	80035f8 <DMA_CheckFifoParam>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d008      	beq.n	800300e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2240      	movs	r2, #64	@ 0x40
 8003000:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2201      	movs	r2, #1
 8003006:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800300a:	2301      	movs	r3, #1
 800300c:	e016      	b.n	800303c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	697a      	ldr	r2, [r7, #20]
 8003014:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 fab8 	bl	800358c <DMA_CalcBaseAndBitshift>
 800301c:	4603      	mov	r3, r0
 800301e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003024:	223f      	movs	r2, #63	@ 0x3f
 8003026:	409a      	lsls	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800303a:	2300      	movs	r3, #0
}
 800303c:	4618      	mov	r0, r3
 800303e:	3718      	adds	r7, #24
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	f010803f 	.word	0xf010803f

08003048 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b086      	sub	sp, #24
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
 8003054:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003056:	2300      	movs	r3, #0
 8003058:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800305e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003066:	2b01      	cmp	r3, #1
 8003068:	d101      	bne.n	800306e <HAL_DMA_Start_IT+0x26>
 800306a:	2302      	movs	r3, #2
 800306c:	e040      	b.n	80030f0 <HAL_DMA_Start_IT+0xa8>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2201      	movs	r2, #1
 8003072:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b01      	cmp	r3, #1
 8003080:	d12f      	bne.n	80030e2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2202      	movs	r2, #2
 8003086:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	68b9      	ldr	r1, [r7, #8]
 8003096:	68f8      	ldr	r0, [r7, #12]
 8003098:	f000 fa4a 	bl	8003530 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030a0:	223f      	movs	r2, #63	@ 0x3f
 80030a2:	409a      	lsls	r2, r3
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f042 0216 	orr.w	r2, r2, #22
 80030b6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d007      	beq.n	80030d0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f042 0208 	orr.w	r2, r2, #8
 80030ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f042 0201 	orr.w	r2, r2, #1
 80030de:	601a      	str	r2, [r3, #0]
 80030e0:	e005      	b.n	80030ee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80030ea:	2302      	movs	r3, #2
 80030ec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80030ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3718      	adds	r7, #24
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003104:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003106:	f7ff f97b 	bl	8002400 <HAL_GetTick>
 800310a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003112:	b2db      	uxtb	r3, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d008      	beq.n	800312a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2280      	movs	r2, #128	@ 0x80
 800311c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e052      	b.n	80031d0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f022 0216 	bic.w	r2, r2, #22
 8003138:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	695a      	ldr	r2, [r3, #20]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003148:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800314e:	2b00      	cmp	r3, #0
 8003150:	d103      	bne.n	800315a <HAL_DMA_Abort+0x62>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003156:	2b00      	cmp	r3, #0
 8003158:	d007      	beq.n	800316a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f022 0208 	bic.w	r2, r2, #8
 8003168:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f022 0201 	bic.w	r2, r2, #1
 8003178:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800317a:	e013      	b.n	80031a4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800317c:	f7ff f940 	bl	8002400 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b05      	cmp	r3, #5
 8003188:	d90c      	bls.n	80031a4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2220      	movs	r2, #32
 800318e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2203      	movs	r2, #3
 8003194:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e015      	b.n	80031d0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1e4      	bne.n	800317c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031b6:	223f      	movs	r2, #63	@ 0x3f
 80031b8:	409a      	lsls	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3710      	adds	r7, #16
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d004      	beq.n	80031f6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2280      	movs	r2, #128	@ 0x80
 80031f0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e00c      	b.n	8003210 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2205      	movs	r2, #5
 80031fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f022 0201 	bic.w	r2, r2, #1
 800320c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003224:	2300      	movs	r3, #0
 8003226:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003228:	4b8e      	ldr	r3, [pc, #568]	@ (8003464 <HAL_DMA_IRQHandler+0x248>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a8e      	ldr	r2, [pc, #568]	@ (8003468 <HAL_DMA_IRQHandler+0x24c>)
 800322e:	fba2 2303 	umull	r2, r3, r2, r3
 8003232:	0a9b      	lsrs	r3, r3, #10
 8003234:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800323a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003246:	2208      	movs	r2, #8
 8003248:	409a      	lsls	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	4013      	ands	r3, r2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d01a      	beq.n	8003288 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0304 	and.w	r3, r3, #4
 800325c:	2b00      	cmp	r3, #0
 800325e:	d013      	beq.n	8003288 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f022 0204 	bic.w	r2, r2, #4
 800326e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003274:	2208      	movs	r2, #8
 8003276:	409a      	lsls	r2, r3
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003280:	f043 0201 	orr.w	r2, r3, #1
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800328c:	2201      	movs	r2, #1
 800328e:	409a      	lsls	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	4013      	ands	r3, r2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d012      	beq.n	80032be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00b      	beq.n	80032be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032aa:	2201      	movs	r2, #1
 80032ac:	409a      	lsls	r2, r3
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032b6:	f043 0202 	orr.w	r2, r3, #2
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032c2:	2204      	movs	r2, #4
 80032c4:	409a      	lsls	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	4013      	ands	r3, r2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d012      	beq.n	80032f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00b      	beq.n	80032f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032e0:	2204      	movs	r2, #4
 80032e2:	409a      	lsls	r2, r3
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ec:	f043 0204 	orr.w	r2, r3, #4
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032f8:	2210      	movs	r2, #16
 80032fa:	409a      	lsls	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	4013      	ands	r3, r2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d043      	beq.n	800338c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0308 	and.w	r3, r3, #8
 800330e:	2b00      	cmp	r3, #0
 8003310:	d03c      	beq.n	800338c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003316:	2210      	movs	r2, #16
 8003318:	409a      	lsls	r2, r3
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d018      	beq.n	800335e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d108      	bne.n	800334c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333e:	2b00      	cmp	r3, #0
 8003340:	d024      	beq.n	800338c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	4798      	blx	r3
 800334a:	e01f      	b.n	800338c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003350:	2b00      	cmp	r3, #0
 8003352:	d01b      	beq.n	800338c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	4798      	blx	r3
 800335c:	e016      	b.n	800338c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003368:	2b00      	cmp	r3, #0
 800336a:	d107      	bne.n	800337c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f022 0208 	bic.w	r2, r2, #8
 800337a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003380:	2b00      	cmp	r3, #0
 8003382:	d003      	beq.n	800338c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003390:	2220      	movs	r2, #32
 8003392:	409a      	lsls	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	4013      	ands	r3, r2
 8003398:	2b00      	cmp	r3, #0
 800339a:	f000 808f 	beq.w	80034bc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0310 	and.w	r3, r3, #16
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f000 8087 	beq.w	80034bc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033b2:	2220      	movs	r2, #32
 80033b4:	409a      	lsls	r2, r3
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b05      	cmp	r3, #5
 80033c4:	d136      	bne.n	8003434 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f022 0216 	bic.w	r2, r2, #22
 80033d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	695a      	ldr	r2, [r3, #20]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80033e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d103      	bne.n	80033f6 <HAL_DMA_IRQHandler+0x1da>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d007      	beq.n	8003406 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f022 0208 	bic.w	r2, r2, #8
 8003404:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800340a:	223f      	movs	r2, #63	@ 0x3f
 800340c:	409a      	lsls	r2, r3
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003426:	2b00      	cmp	r3, #0
 8003428:	d07e      	beq.n	8003528 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	4798      	blx	r3
        }
        return;
 8003432:	e079      	b.n	8003528 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d01d      	beq.n	800347e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d10d      	bne.n	800346c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003454:	2b00      	cmp	r3, #0
 8003456:	d031      	beq.n	80034bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	4798      	blx	r3
 8003460:	e02c      	b.n	80034bc <HAL_DMA_IRQHandler+0x2a0>
 8003462:	bf00      	nop
 8003464:	2000001c 	.word	0x2000001c
 8003468:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003470:	2b00      	cmp	r3, #0
 8003472:	d023      	beq.n	80034bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	4798      	blx	r3
 800347c:	e01e      	b.n	80034bc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003488:	2b00      	cmp	r3, #0
 800348a:	d10f      	bne.n	80034ac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f022 0210 	bic.w	r2, r2, #16
 800349a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d003      	beq.n	80034bc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d032      	beq.n	800352a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034c8:	f003 0301 	and.w	r3, r3, #1
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d022      	beq.n	8003516 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2205      	movs	r2, #5
 80034d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f022 0201 	bic.w	r2, r2, #1
 80034e6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	3301      	adds	r3, #1
 80034ec:	60bb      	str	r3, [r7, #8]
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d307      	bcc.n	8003504 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1f2      	bne.n	80034e8 <HAL_DMA_IRQHandler+0x2cc>
 8003502:	e000      	b.n	8003506 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003504:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2201      	movs	r2, #1
 800350a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800351a:	2b00      	cmp	r3, #0
 800351c:	d005      	beq.n	800352a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	4798      	blx	r3
 8003526:	e000      	b.n	800352a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003528:	bf00      	nop
    }
  }
}
 800352a:	3718      	adds	r7, #24
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003530:	b480      	push	{r7}
 8003532:	b085      	sub	sp, #20
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	607a      	str	r2, [r7, #4]
 800353c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800354c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	683a      	ldr	r2, [r7, #0]
 8003554:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	2b40      	cmp	r3, #64	@ 0x40
 800355c:	d108      	bne.n	8003570 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	68ba      	ldr	r2, [r7, #8]
 800356c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800356e:	e007      	b.n	8003580 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	68ba      	ldr	r2, [r7, #8]
 8003576:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	60da      	str	r2, [r3, #12]
}
 8003580:	bf00      	nop
 8003582:	3714      	adds	r7, #20
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800358c:	b480      	push	{r7}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	b2db      	uxtb	r3, r3
 800359a:	3b10      	subs	r3, #16
 800359c:	4a14      	ldr	r2, [pc, #80]	@ (80035f0 <DMA_CalcBaseAndBitshift+0x64>)
 800359e:	fba2 2303 	umull	r2, r3, r2, r3
 80035a2:	091b      	lsrs	r3, r3, #4
 80035a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80035a6:	4a13      	ldr	r2, [pc, #76]	@ (80035f4 <DMA_CalcBaseAndBitshift+0x68>)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	4413      	add	r3, r2
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	461a      	mov	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2b03      	cmp	r3, #3
 80035b8:	d909      	bls.n	80035ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80035c2:	f023 0303 	bic.w	r3, r3, #3
 80035c6:	1d1a      	adds	r2, r3, #4
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	659a      	str	r2, [r3, #88]	@ 0x58
 80035cc:	e007      	b.n	80035de <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80035d6:	f023 0303 	bic.w	r3, r3, #3
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3714      	adds	r7, #20
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	aaaaaaab 	.word	0xaaaaaaab
 80035f4:	0800cbbc 	.word	0x0800cbbc

080035f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003600:	2300      	movs	r3, #0
 8003602:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003608:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	699b      	ldr	r3, [r3, #24]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d11f      	bne.n	8003652 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	2b03      	cmp	r3, #3
 8003616:	d856      	bhi.n	80036c6 <DMA_CheckFifoParam+0xce>
 8003618:	a201      	add	r2, pc, #4	@ (adr r2, 8003620 <DMA_CheckFifoParam+0x28>)
 800361a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800361e:	bf00      	nop
 8003620:	08003631 	.word	0x08003631
 8003624:	08003643 	.word	0x08003643
 8003628:	08003631 	.word	0x08003631
 800362c:	080036c7 	.word	0x080036c7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003634:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d046      	beq.n	80036ca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003640:	e043      	b.n	80036ca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003646:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800364a:	d140      	bne.n	80036ce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003650:	e03d      	b.n	80036ce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800365a:	d121      	bne.n	80036a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	2b03      	cmp	r3, #3
 8003660:	d837      	bhi.n	80036d2 <DMA_CheckFifoParam+0xda>
 8003662:	a201      	add	r2, pc, #4	@ (adr r2, 8003668 <DMA_CheckFifoParam+0x70>)
 8003664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003668:	08003679 	.word	0x08003679
 800366c:	0800367f 	.word	0x0800367f
 8003670:	08003679 	.word	0x08003679
 8003674:	08003691 	.word	0x08003691
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	73fb      	strb	r3, [r7, #15]
      break;
 800367c:	e030      	b.n	80036e0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003682:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d025      	beq.n	80036d6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800368e:	e022      	b.n	80036d6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003694:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003698:	d11f      	bne.n	80036da <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800369e:	e01c      	b.n	80036da <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d903      	bls.n	80036ae <DMA_CheckFifoParam+0xb6>
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	2b03      	cmp	r3, #3
 80036aa:	d003      	beq.n	80036b4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80036ac:	e018      	b.n	80036e0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	73fb      	strb	r3, [r7, #15]
      break;
 80036b2:	e015      	b.n	80036e0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00e      	beq.n	80036de <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	73fb      	strb	r3, [r7, #15]
      break;
 80036c4:	e00b      	b.n	80036de <DMA_CheckFifoParam+0xe6>
      break;
 80036c6:	bf00      	nop
 80036c8:	e00a      	b.n	80036e0 <DMA_CheckFifoParam+0xe8>
      break;
 80036ca:	bf00      	nop
 80036cc:	e008      	b.n	80036e0 <DMA_CheckFifoParam+0xe8>
      break;
 80036ce:	bf00      	nop
 80036d0:	e006      	b.n	80036e0 <DMA_CheckFifoParam+0xe8>
      break;
 80036d2:	bf00      	nop
 80036d4:	e004      	b.n	80036e0 <DMA_CheckFifoParam+0xe8>
      break;
 80036d6:	bf00      	nop
 80036d8:	e002      	b.n	80036e0 <DMA_CheckFifoParam+0xe8>
      break;   
 80036da:	bf00      	nop
 80036dc:	e000      	b.n	80036e0 <DMA_CheckFifoParam+0xe8>
      break;
 80036de:	bf00      	nop
    }
  } 
  
  return status; 
 80036e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3714      	adds	r7, #20
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop

080036f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b089      	sub	sp, #36	@ 0x24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036fa:	2300      	movs	r3, #0
 80036fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036fe:	2300      	movs	r3, #0
 8003700:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003702:	2300      	movs	r3, #0
 8003704:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003706:	2300      	movs	r3, #0
 8003708:	61fb      	str	r3, [r7, #28]
 800370a:	e16b      	b.n	80039e4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800370c:	2201      	movs	r2, #1
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	fa02 f303 	lsl.w	r3, r2, r3
 8003714:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	697a      	ldr	r2, [r7, #20]
 800371c:	4013      	ands	r3, r2
 800371e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	429a      	cmp	r2, r3
 8003726:	f040 815a 	bne.w	80039de <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f003 0303 	and.w	r3, r3, #3
 8003732:	2b01      	cmp	r3, #1
 8003734:	d005      	beq.n	8003742 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800373e:	2b02      	cmp	r3, #2
 8003740:	d130      	bne.n	80037a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	005b      	lsls	r3, r3, #1
 800374c:	2203      	movs	r2, #3
 800374e:	fa02 f303 	lsl.w	r3, r2, r3
 8003752:	43db      	mvns	r3, r3
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	4013      	ands	r3, r2
 8003758:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	68da      	ldr	r2, [r3, #12]
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	005b      	lsls	r3, r3, #1
 8003762:	fa02 f303 	lsl.w	r3, r2, r3
 8003766:	69ba      	ldr	r2, [r7, #24]
 8003768:	4313      	orrs	r3, r2
 800376a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	69ba      	ldr	r2, [r7, #24]
 8003770:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003778:	2201      	movs	r2, #1
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	fa02 f303 	lsl.w	r3, r2, r3
 8003780:	43db      	mvns	r3, r3
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	4013      	ands	r3, r2
 8003786:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	091b      	lsrs	r3, r3, #4
 800378e:	f003 0201 	and.w	r2, r3, #1
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	fa02 f303 	lsl.w	r3, r2, r3
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	4313      	orrs	r3, r2
 800379c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f003 0303 	and.w	r3, r3, #3
 80037ac:	2b03      	cmp	r3, #3
 80037ae:	d017      	beq.n	80037e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	2203      	movs	r2, #3
 80037bc:	fa02 f303 	lsl.w	r3, r2, r3
 80037c0:	43db      	mvns	r3, r3
 80037c2:	69ba      	ldr	r2, [r7, #24]
 80037c4:	4013      	ands	r3, r2
 80037c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	689a      	ldr	r2, [r3, #8]
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	005b      	lsls	r3, r3, #1
 80037d0:	fa02 f303 	lsl.w	r3, r2, r3
 80037d4:	69ba      	ldr	r2, [r7, #24]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f003 0303 	and.w	r3, r3, #3
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d123      	bne.n	8003834 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	08da      	lsrs	r2, r3, #3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	3208      	adds	r2, #8
 80037f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	f003 0307 	and.w	r3, r3, #7
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	220f      	movs	r2, #15
 8003804:	fa02 f303 	lsl.w	r3, r2, r3
 8003808:	43db      	mvns	r3, r3
 800380a:	69ba      	ldr	r2, [r7, #24]
 800380c:	4013      	ands	r3, r2
 800380e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	691a      	ldr	r2, [r3, #16]
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	f003 0307 	and.w	r3, r3, #7
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	fa02 f303 	lsl.w	r3, r2, r3
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	4313      	orrs	r3, r2
 8003824:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	08da      	lsrs	r2, r3, #3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	3208      	adds	r2, #8
 800382e:	69b9      	ldr	r1, [r7, #24]
 8003830:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	2203      	movs	r2, #3
 8003840:	fa02 f303 	lsl.w	r3, r2, r3
 8003844:	43db      	mvns	r3, r3
 8003846:	69ba      	ldr	r2, [r7, #24]
 8003848:	4013      	ands	r3, r2
 800384a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f003 0203 	and.w	r2, r3, #3
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	005b      	lsls	r3, r3, #1
 8003858:	fa02 f303 	lsl.w	r3, r2, r3
 800385c:	69ba      	ldr	r2, [r7, #24]
 800385e:	4313      	orrs	r3, r2
 8003860:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003870:	2b00      	cmp	r3, #0
 8003872:	f000 80b4 	beq.w	80039de <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003876:	2300      	movs	r3, #0
 8003878:	60fb      	str	r3, [r7, #12]
 800387a:	4b60      	ldr	r3, [pc, #384]	@ (80039fc <HAL_GPIO_Init+0x30c>)
 800387c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800387e:	4a5f      	ldr	r2, [pc, #380]	@ (80039fc <HAL_GPIO_Init+0x30c>)
 8003880:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003884:	6453      	str	r3, [r2, #68]	@ 0x44
 8003886:	4b5d      	ldr	r3, [pc, #372]	@ (80039fc <HAL_GPIO_Init+0x30c>)
 8003888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800388a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800388e:	60fb      	str	r3, [r7, #12]
 8003890:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003892:	4a5b      	ldr	r2, [pc, #364]	@ (8003a00 <HAL_GPIO_Init+0x310>)
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	089b      	lsrs	r3, r3, #2
 8003898:	3302      	adds	r3, #2
 800389a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800389e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	f003 0303 	and.w	r3, r3, #3
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	220f      	movs	r2, #15
 80038aa:	fa02 f303 	lsl.w	r3, r2, r3
 80038ae:	43db      	mvns	r3, r3
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	4013      	ands	r3, r2
 80038b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a52      	ldr	r2, [pc, #328]	@ (8003a04 <HAL_GPIO_Init+0x314>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d02b      	beq.n	8003916 <HAL_GPIO_Init+0x226>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a51      	ldr	r2, [pc, #324]	@ (8003a08 <HAL_GPIO_Init+0x318>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d025      	beq.n	8003912 <HAL_GPIO_Init+0x222>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a50      	ldr	r2, [pc, #320]	@ (8003a0c <HAL_GPIO_Init+0x31c>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d01f      	beq.n	800390e <HAL_GPIO_Init+0x21e>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a4f      	ldr	r2, [pc, #316]	@ (8003a10 <HAL_GPIO_Init+0x320>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d019      	beq.n	800390a <HAL_GPIO_Init+0x21a>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a4e      	ldr	r2, [pc, #312]	@ (8003a14 <HAL_GPIO_Init+0x324>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d013      	beq.n	8003906 <HAL_GPIO_Init+0x216>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a4d      	ldr	r2, [pc, #308]	@ (8003a18 <HAL_GPIO_Init+0x328>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d00d      	beq.n	8003902 <HAL_GPIO_Init+0x212>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a4c      	ldr	r2, [pc, #304]	@ (8003a1c <HAL_GPIO_Init+0x32c>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d007      	beq.n	80038fe <HAL_GPIO_Init+0x20e>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a4b      	ldr	r2, [pc, #300]	@ (8003a20 <HAL_GPIO_Init+0x330>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d101      	bne.n	80038fa <HAL_GPIO_Init+0x20a>
 80038f6:	2307      	movs	r3, #7
 80038f8:	e00e      	b.n	8003918 <HAL_GPIO_Init+0x228>
 80038fa:	2308      	movs	r3, #8
 80038fc:	e00c      	b.n	8003918 <HAL_GPIO_Init+0x228>
 80038fe:	2306      	movs	r3, #6
 8003900:	e00a      	b.n	8003918 <HAL_GPIO_Init+0x228>
 8003902:	2305      	movs	r3, #5
 8003904:	e008      	b.n	8003918 <HAL_GPIO_Init+0x228>
 8003906:	2304      	movs	r3, #4
 8003908:	e006      	b.n	8003918 <HAL_GPIO_Init+0x228>
 800390a:	2303      	movs	r3, #3
 800390c:	e004      	b.n	8003918 <HAL_GPIO_Init+0x228>
 800390e:	2302      	movs	r3, #2
 8003910:	e002      	b.n	8003918 <HAL_GPIO_Init+0x228>
 8003912:	2301      	movs	r3, #1
 8003914:	e000      	b.n	8003918 <HAL_GPIO_Init+0x228>
 8003916:	2300      	movs	r3, #0
 8003918:	69fa      	ldr	r2, [r7, #28]
 800391a:	f002 0203 	and.w	r2, r2, #3
 800391e:	0092      	lsls	r2, r2, #2
 8003920:	4093      	lsls	r3, r2
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	4313      	orrs	r3, r2
 8003926:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003928:	4935      	ldr	r1, [pc, #212]	@ (8003a00 <HAL_GPIO_Init+0x310>)
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	089b      	lsrs	r3, r3, #2
 800392e:	3302      	adds	r3, #2
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003936:	4b3b      	ldr	r3, [pc, #236]	@ (8003a24 <HAL_GPIO_Init+0x334>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	43db      	mvns	r3, r3
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	4013      	ands	r3, r2
 8003944:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d003      	beq.n	800395a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003952:	69ba      	ldr	r2, [r7, #24]
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	4313      	orrs	r3, r2
 8003958:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800395a:	4a32      	ldr	r2, [pc, #200]	@ (8003a24 <HAL_GPIO_Init+0x334>)
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003960:	4b30      	ldr	r3, [pc, #192]	@ (8003a24 <HAL_GPIO_Init+0x334>)
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	43db      	mvns	r3, r3
 800396a:	69ba      	ldr	r2, [r7, #24]
 800396c:	4013      	ands	r3, r2
 800396e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d003      	beq.n	8003984 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	4313      	orrs	r3, r2
 8003982:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003984:	4a27      	ldr	r2, [pc, #156]	@ (8003a24 <HAL_GPIO_Init+0x334>)
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800398a:	4b26      	ldr	r3, [pc, #152]	@ (8003a24 <HAL_GPIO_Init+0x334>)
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	43db      	mvns	r3, r3
 8003994:	69ba      	ldr	r2, [r7, #24]
 8003996:	4013      	ands	r3, r2
 8003998:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d003      	beq.n	80039ae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80039a6:	69ba      	ldr	r2, [r7, #24]
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039ae:	4a1d      	ldr	r2, [pc, #116]	@ (8003a24 <HAL_GPIO_Init+0x334>)
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039b4:	4b1b      	ldr	r3, [pc, #108]	@ (8003a24 <HAL_GPIO_Init+0x334>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	43db      	mvns	r3, r3
 80039be:	69ba      	ldr	r2, [r7, #24]
 80039c0:	4013      	ands	r3, r2
 80039c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d003      	beq.n	80039d8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80039d0:	69ba      	ldr	r2, [r7, #24]
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039d8:	4a12      	ldr	r2, [pc, #72]	@ (8003a24 <HAL_GPIO_Init+0x334>)
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	3301      	adds	r3, #1
 80039e2:	61fb      	str	r3, [r7, #28]
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	2b0f      	cmp	r3, #15
 80039e8:	f67f ae90 	bls.w	800370c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039ec:	bf00      	nop
 80039ee:	bf00      	nop
 80039f0:	3724      	adds	r7, #36	@ 0x24
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	40023800 	.word	0x40023800
 8003a00:	40013800 	.word	0x40013800
 8003a04:	40020000 	.word	0x40020000
 8003a08:	40020400 	.word	0x40020400
 8003a0c:	40020800 	.word	0x40020800
 8003a10:	40020c00 	.word	0x40020c00
 8003a14:	40021000 	.word	0x40021000
 8003a18:	40021400 	.word	0x40021400
 8003a1c:	40021800 	.word	0x40021800
 8003a20:	40021c00 	.word	0x40021c00
 8003a24:	40013c00 	.word	0x40013c00

08003a28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b085      	sub	sp, #20
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	460b      	mov	r3, r1
 8003a32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	691a      	ldr	r2, [r3, #16]
 8003a38:	887b      	ldrh	r3, [r7, #2]
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d002      	beq.n	8003a46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a40:	2301      	movs	r3, #1
 8003a42:	73fb      	strb	r3, [r7, #15]
 8003a44:	e001      	b.n	8003a4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a46:	2300      	movs	r3, #0
 8003a48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3714      	adds	r7, #20
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	460b      	mov	r3, r1
 8003a62:	807b      	strh	r3, [r7, #2]
 8003a64:	4613      	mov	r3, r2
 8003a66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a68:	787b      	ldrb	r3, [r7, #1]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a6e:	887a      	ldrh	r2, [r7, #2]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a74:	e003      	b.n	8003a7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a76:	887b      	ldrh	r3, [r7, #2]
 8003a78:	041a      	lsls	r2, r3, #16
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	619a      	str	r2, [r3, #24]
}
 8003a7e:	bf00      	nop
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
	...

08003a8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	4603      	mov	r3, r0
 8003a94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003a96:	4b08      	ldr	r3, [pc, #32]	@ (8003ab8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a98:	695a      	ldr	r2, [r3, #20]
 8003a9a:	88fb      	ldrh	r3, [r7, #6]
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d006      	beq.n	8003ab0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003aa2:	4a05      	ldr	r2, [pc, #20]	@ (8003ab8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003aa4:	88fb      	ldrh	r3, [r7, #6]
 8003aa6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003aa8:	88fb      	ldrh	r3, [r7, #6]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7fd fff2 	bl	8001a94 <HAL_GPIO_EXTI_Callback>
  }
}
 8003ab0:	bf00      	nop
 8003ab2:	3708      	adds	r7, #8
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	40013c00 	.word	0x40013c00

08003abc <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af02      	add	r7, sp, #8
 8003ac2:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d101      	bne.n	8003ace <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e059      	b.n	8003b82 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d106      	bne.n	8003aee <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f008 f8db 	bl	800bca4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2203      	movs	r2, #3
 8003af2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003afc:	d102      	bne.n	8003b04 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f004 fee8 	bl	80088de <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6818      	ldr	r0, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	7c1a      	ldrb	r2, [r3, #16]
 8003b16:	f88d 2000 	strb.w	r2, [sp]
 8003b1a:	3304      	adds	r3, #4
 8003b1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b1e:	f004 fe69 	bl	80087f4 <USB_CoreInit>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d005      	beq.n	8003b34 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2202      	movs	r2, #2
 8003b2c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e026      	b.n	8003b82 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2101      	movs	r1, #1
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f004 fee0 	bl	8008900 <USB_SetCurrentMode>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d005      	beq.n	8003b52 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2202      	movs	r2, #2
 8003b4a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e017      	b.n	8003b82 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6818      	ldr	r0, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	7c1a      	ldrb	r2, [r3, #16]
 8003b5a:	f88d 2000 	strb.w	r2, [sp]
 8003b5e:	3304      	adds	r3, #4
 8003b60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b62:	f005 f889 	bl	8008c78 <USB_HostInit>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d005      	beq.n	8003b78 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2202      	movs	r2, #2
 8003b70:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e004      	b.n	8003b82 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8003b8a:	b590      	push	{r4, r7, lr}
 8003b8c:	b08b      	sub	sp, #44	@ 0x2c
 8003b8e:	af04      	add	r7, sp, #16
 8003b90:	6078      	str	r0, [r7, #4]
 8003b92:	4608      	mov	r0, r1
 8003b94:	4611      	mov	r1, r2
 8003b96:	461a      	mov	r2, r3
 8003b98:	4603      	mov	r3, r0
 8003b9a:	70fb      	strb	r3, [r7, #3]
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	70bb      	strb	r3, [r7, #2]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8003ba4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003ba6:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d101      	bne.n	8003bb6 <HAL_HCD_HC_Init+0x2c>
 8003bb2:	2302      	movs	r3, #2
 8003bb4:	e09d      	b.n	8003cf2 <HAL_HCD_HC_Init+0x168>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8003bbe:	78fa      	ldrb	r2, [r7, #3]
 8003bc0:	6879      	ldr	r1, [r7, #4]
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	011b      	lsls	r3, r3, #4
 8003bc6:	1a9b      	subs	r3, r3, r2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	440b      	add	r3, r1
 8003bcc:	3319      	adds	r3, #25
 8003bce:	2200      	movs	r2, #0
 8003bd0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003bd2:	78fa      	ldrb	r2, [r7, #3]
 8003bd4:	6879      	ldr	r1, [r7, #4]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	011b      	lsls	r3, r3, #4
 8003bda:	1a9b      	subs	r3, r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	440b      	add	r3, r1
 8003be0:	3314      	adds	r3, #20
 8003be2:	787a      	ldrb	r2, [r7, #1]
 8003be4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003be6:	78fa      	ldrb	r2, [r7, #3]
 8003be8:	6879      	ldr	r1, [r7, #4]
 8003bea:	4613      	mov	r3, r2
 8003bec:	011b      	lsls	r3, r3, #4
 8003bee:	1a9b      	subs	r3, r3, r2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	440b      	add	r3, r1
 8003bf4:	3315      	adds	r3, #21
 8003bf6:	78fa      	ldrb	r2, [r7, #3]
 8003bf8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003bfa:	78fa      	ldrb	r2, [r7, #3]
 8003bfc:	6879      	ldr	r1, [r7, #4]
 8003bfe:	4613      	mov	r3, r2
 8003c00:	011b      	lsls	r3, r3, #4
 8003c02:	1a9b      	subs	r3, r3, r2
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	440b      	add	r3, r1
 8003c08:	3326      	adds	r3, #38	@ 0x26
 8003c0a:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8003c0e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003c10:	78fa      	ldrb	r2, [r7, #3]
 8003c12:	78bb      	ldrb	r3, [r7, #2]
 8003c14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c18:	b2d8      	uxtb	r0, r3
 8003c1a:	6879      	ldr	r1, [r7, #4]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	011b      	lsls	r3, r3, #4
 8003c20:	1a9b      	subs	r3, r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	440b      	add	r3, r1
 8003c26:	3316      	adds	r3, #22
 8003c28:	4602      	mov	r2, r0
 8003c2a:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8003c2c:	78fb      	ldrb	r3, [r7, #3]
 8003c2e:	4619      	mov	r1, r3
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 fbc7 	bl	80043c4 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8003c36:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	da0a      	bge.n	8003c54 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003c3e:	78fa      	ldrb	r2, [r7, #3]
 8003c40:	6879      	ldr	r1, [r7, #4]
 8003c42:	4613      	mov	r3, r2
 8003c44:	011b      	lsls	r3, r3, #4
 8003c46:	1a9b      	subs	r3, r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	440b      	add	r3, r1
 8003c4c:	3317      	adds	r3, #23
 8003c4e:	2201      	movs	r2, #1
 8003c50:	701a      	strb	r2, [r3, #0]
 8003c52:	e009      	b.n	8003c68 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003c54:	78fa      	ldrb	r2, [r7, #3]
 8003c56:	6879      	ldr	r1, [r7, #4]
 8003c58:	4613      	mov	r3, r2
 8003c5a:	011b      	lsls	r3, r3, #4
 8003c5c:	1a9b      	subs	r3, r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	440b      	add	r3, r1
 8003c62:	3317      	adds	r3, #23
 8003c64:	2200      	movs	r2, #0
 8003c66:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f005 f967 	bl	8008f40 <USB_GetHostSpeed>
 8003c72:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8003c74:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d10b      	bne.n	8003c94 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8003c7c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d107      	bne.n	8003c94 <HAL_HCD_HC_Init+0x10a>
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d104      	bne.n	8003c94 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	2bbc      	cmp	r3, #188	@ 0xbc
 8003c8e:	d901      	bls.n	8003c94 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8003c90:	23bc      	movs	r3, #188	@ 0xbc
 8003c92:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8003c94:	78fa      	ldrb	r2, [r7, #3]
 8003c96:	6879      	ldr	r1, [r7, #4]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	011b      	lsls	r3, r3, #4
 8003c9c:	1a9b      	subs	r3, r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	440b      	add	r3, r1
 8003ca2:	3318      	adds	r3, #24
 8003ca4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8003ca8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8003caa:	78fa      	ldrb	r2, [r7, #3]
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	b298      	uxth	r0, r3
 8003cb0:	6879      	ldr	r1, [r7, #4]
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	011b      	lsls	r3, r3, #4
 8003cb6:	1a9b      	subs	r3, r3, r2
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	440b      	add	r3, r1
 8003cbc:	3328      	adds	r3, #40	@ 0x28
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6818      	ldr	r0, [r3, #0]
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	787c      	ldrb	r4, [r7, #1]
 8003ccc:	78ba      	ldrb	r2, [r7, #2]
 8003cce:	78f9      	ldrb	r1, [r7, #3]
 8003cd0:	9302      	str	r3, [sp, #8]
 8003cd2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003cd6:	9301      	str	r3, [sp, #4]
 8003cd8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003cdc:	9300      	str	r3, [sp, #0]
 8003cde:	4623      	mov	r3, r4
 8003ce0:	f005 f956 	bl	8008f90 <USB_HC_Init>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8003cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	371c      	adds	r7, #28
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd90      	pop	{r4, r7, pc}

08003cfa <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b084      	sub	sp, #16
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
 8003d02:	460b      	mov	r3, r1
 8003d04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003d06:	2300      	movs	r3, #0
 8003d08:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d101      	bne.n	8003d18 <HAL_HCD_HC_Halt+0x1e>
 8003d14:	2302      	movs	r3, #2
 8003d16:	e00f      	b.n	8003d38 <HAL_HCD_HC_Halt+0x3e>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	78fa      	ldrb	r2, [r7, #3]
 8003d26:	4611      	mov	r1, r2
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f005 fce8 	bl	80096fe <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8003d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3710      	adds	r7, #16
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	4608      	mov	r0, r1
 8003d4a:	4611      	mov	r1, r2
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	4603      	mov	r3, r0
 8003d50:	70fb      	strb	r3, [r7, #3]
 8003d52:	460b      	mov	r3, r1
 8003d54:	70bb      	strb	r3, [r7, #2]
 8003d56:	4613      	mov	r3, r2
 8003d58:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003d5a:	78fa      	ldrb	r2, [r7, #3]
 8003d5c:	6879      	ldr	r1, [r7, #4]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	011b      	lsls	r3, r3, #4
 8003d62:	1a9b      	subs	r3, r3, r2
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	440b      	add	r3, r1
 8003d68:	3317      	adds	r3, #23
 8003d6a:	78ba      	ldrb	r2, [r7, #2]
 8003d6c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003d6e:	78fa      	ldrb	r2, [r7, #3]
 8003d70:	6879      	ldr	r1, [r7, #4]
 8003d72:	4613      	mov	r3, r2
 8003d74:	011b      	lsls	r3, r3, #4
 8003d76:	1a9b      	subs	r3, r3, r2
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	440b      	add	r3, r1
 8003d7c:	3326      	adds	r3, #38	@ 0x26
 8003d7e:	787a      	ldrb	r2, [r7, #1]
 8003d80:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003d82:	7c3b      	ldrb	r3, [r7, #16]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d114      	bne.n	8003db2 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003d88:	78fa      	ldrb	r2, [r7, #3]
 8003d8a:	6879      	ldr	r1, [r7, #4]
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	011b      	lsls	r3, r3, #4
 8003d90:	1a9b      	subs	r3, r3, r2
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	440b      	add	r3, r1
 8003d96:	332a      	adds	r3, #42	@ 0x2a
 8003d98:	2203      	movs	r2, #3
 8003d9a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003d9c:	78fa      	ldrb	r2, [r7, #3]
 8003d9e:	6879      	ldr	r1, [r7, #4]
 8003da0:	4613      	mov	r3, r2
 8003da2:	011b      	lsls	r3, r3, #4
 8003da4:	1a9b      	subs	r3, r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	440b      	add	r3, r1
 8003daa:	3319      	adds	r3, #25
 8003dac:	7f3a      	ldrb	r2, [r7, #28]
 8003dae:	701a      	strb	r2, [r3, #0]
 8003db0:	e009      	b.n	8003dc6 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003db2:	78fa      	ldrb	r2, [r7, #3]
 8003db4:	6879      	ldr	r1, [r7, #4]
 8003db6:	4613      	mov	r3, r2
 8003db8:	011b      	lsls	r3, r3, #4
 8003dba:	1a9b      	subs	r3, r3, r2
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	440b      	add	r3, r1
 8003dc0:	332a      	adds	r3, #42	@ 0x2a
 8003dc2:	2202      	movs	r2, #2
 8003dc4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003dc6:	787b      	ldrb	r3, [r7, #1]
 8003dc8:	2b03      	cmp	r3, #3
 8003dca:	f200 8102 	bhi.w	8003fd2 <HAL_HCD_HC_SubmitRequest+0x292>
 8003dce:	a201      	add	r2, pc, #4	@ (adr r2, 8003dd4 <HAL_HCD_HC_SubmitRequest+0x94>)
 8003dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd4:	08003de5 	.word	0x08003de5
 8003dd8:	08003fbd 	.word	0x08003fbd
 8003ddc:	08003ea9 	.word	0x08003ea9
 8003de0:	08003f33 	.word	0x08003f33
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8003de4:	7c3b      	ldrb	r3, [r7, #16]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	f040 80f5 	bne.w	8003fd6 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8003dec:	78bb      	ldrb	r3, [r7, #2]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d12d      	bne.n	8003e4e <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8003df2:	8b3b      	ldrh	r3, [r7, #24]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d109      	bne.n	8003e0c <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8003df8:	78fa      	ldrb	r2, [r7, #3]
 8003dfa:	6879      	ldr	r1, [r7, #4]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	011b      	lsls	r3, r3, #4
 8003e00:	1a9b      	subs	r3, r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	440b      	add	r3, r1
 8003e06:	333d      	adds	r3, #61	@ 0x3d
 8003e08:	2201      	movs	r2, #1
 8003e0a:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8003e0c:	78fa      	ldrb	r2, [r7, #3]
 8003e0e:	6879      	ldr	r1, [r7, #4]
 8003e10:	4613      	mov	r3, r2
 8003e12:	011b      	lsls	r3, r3, #4
 8003e14:	1a9b      	subs	r3, r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	440b      	add	r3, r1
 8003e1a:	333d      	adds	r3, #61	@ 0x3d
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d10a      	bne.n	8003e38 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003e22:	78fa      	ldrb	r2, [r7, #3]
 8003e24:	6879      	ldr	r1, [r7, #4]
 8003e26:	4613      	mov	r3, r2
 8003e28:	011b      	lsls	r3, r3, #4
 8003e2a:	1a9b      	subs	r3, r3, r2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	440b      	add	r3, r1
 8003e30:	332a      	adds	r3, #42	@ 0x2a
 8003e32:	2200      	movs	r2, #0
 8003e34:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8003e36:	e0ce      	b.n	8003fd6 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003e38:	78fa      	ldrb	r2, [r7, #3]
 8003e3a:	6879      	ldr	r1, [r7, #4]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	011b      	lsls	r3, r3, #4
 8003e40:	1a9b      	subs	r3, r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	440b      	add	r3, r1
 8003e46:	332a      	adds	r3, #42	@ 0x2a
 8003e48:	2202      	movs	r2, #2
 8003e4a:	701a      	strb	r2, [r3, #0]
      break;
 8003e4c:	e0c3      	b.n	8003fd6 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8003e4e:	78fa      	ldrb	r2, [r7, #3]
 8003e50:	6879      	ldr	r1, [r7, #4]
 8003e52:	4613      	mov	r3, r2
 8003e54:	011b      	lsls	r3, r3, #4
 8003e56:	1a9b      	subs	r3, r3, r2
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	440b      	add	r3, r1
 8003e5c:	331a      	adds	r3, #26
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	f040 80b8 	bne.w	8003fd6 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8003e66:	78fa      	ldrb	r2, [r7, #3]
 8003e68:	6879      	ldr	r1, [r7, #4]
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	011b      	lsls	r3, r3, #4
 8003e6e:	1a9b      	subs	r3, r3, r2
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	440b      	add	r3, r1
 8003e74:	333c      	adds	r3, #60	@ 0x3c
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d10a      	bne.n	8003e92 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003e7c:	78fa      	ldrb	r2, [r7, #3]
 8003e7e:	6879      	ldr	r1, [r7, #4]
 8003e80:	4613      	mov	r3, r2
 8003e82:	011b      	lsls	r3, r3, #4
 8003e84:	1a9b      	subs	r3, r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	440b      	add	r3, r1
 8003e8a:	332a      	adds	r3, #42	@ 0x2a
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	701a      	strb	r2, [r3, #0]
      break;
 8003e90:	e0a1      	b.n	8003fd6 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003e92:	78fa      	ldrb	r2, [r7, #3]
 8003e94:	6879      	ldr	r1, [r7, #4]
 8003e96:	4613      	mov	r3, r2
 8003e98:	011b      	lsls	r3, r3, #4
 8003e9a:	1a9b      	subs	r3, r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	440b      	add	r3, r1
 8003ea0:	332a      	adds	r3, #42	@ 0x2a
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	701a      	strb	r2, [r3, #0]
      break;
 8003ea6:	e096      	b.n	8003fd6 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003ea8:	78bb      	ldrb	r3, [r7, #2]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d120      	bne.n	8003ef0 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003eae:	78fa      	ldrb	r2, [r7, #3]
 8003eb0:	6879      	ldr	r1, [r7, #4]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	011b      	lsls	r3, r3, #4
 8003eb6:	1a9b      	subs	r3, r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	440b      	add	r3, r1
 8003ebc:	333d      	adds	r3, #61	@ 0x3d
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d10a      	bne.n	8003eda <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003ec4:	78fa      	ldrb	r2, [r7, #3]
 8003ec6:	6879      	ldr	r1, [r7, #4]
 8003ec8:	4613      	mov	r3, r2
 8003eca:	011b      	lsls	r3, r3, #4
 8003ecc:	1a9b      	subs	r3, r3, r2
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	440b      	add	r3, r1
 8003ed2:	332a      	adds	r3, #42	@ 0x2a
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003ed8:	e07e      	b.n	8003fd8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003eda:	78fa      	ldrb	r2, [r7, #3]
 8003edc:	6879      	ldr	r1, [r7, #4]
 8003ede:	4613      	mov	r3, r2
 8003ee0:	011b      	lsls	r3, r3, #4
 8003ee2:	1a9b      	subs	r3, r3, r2
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	440b      	add	r3, r1
 8003ee8:	332a      	adds	r3, #42	@ 0x2a
 8003eea:	2202      	movs	r2, #2
 8003eec:	701a      	strb	r2, [r3, #0]
      break;
 8003eee:	e073      	b.n	8003fd8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003ef0:	78fa      	ldrb	r2, [r7, #3]
 8003ef2:	6879      	ldr	r1, [r7, #4]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	011b      	lsls	r3, r3, #4
 8003ef8:	1a9b      	subs	r3, r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	440b      	add	r3, r1
 8003efe:	333c      	adds	r3, #60	@ 0x3c
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d10a      	bne.n	8003f1c <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003f06:	78fa      	ldrb	r2, [r7, #3]
 8003f08:	6879      	ldr	r1, [r7, #4]
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	011b      	lsls	r3, r3, #4
 8003f0e:	1a9b      	subs	r3, r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	440b      	add	r3, r1
 8003f14:	332a      	adds	r3, #42	@ 0x2a
 8003f16:	2200      	movs	r2, #0
 8003f18:	701a      	strb	r2, [r3, #0]
      break;
 8003f1a:	e05d      	b.n	8003fd8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003f1c:	78fa      	ldrb	r2, [r7, #3]
 8003f1e:	6879      	ldr	r1, [r7, #4]
 8003f20:	4613      	mov	r3, r2
 8003f22:	011b      	lsls	r3, r3, #4
 8003f24:	1a9b      	subs	r3, r3, r2
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	440b      	add	r3, r1
 8003f2a:	332a      	adds	r3, #42	@ 0x2a
 8003f2c:	2202      	movs	r2, #2
 8003f2e:	701a      	strb	r2, [r3, #0]
      break;
 8003f30:	e052      	b.n	8003fd8 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003f32:	78bb      	ldrb	r3, [r7, #2]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d120      	bne.n	8003f7a <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003f38:	78fa      	ldrb	r2, [r7, #3]
 8003f3a:	6879      	ldr	r1, [r7, #4]
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	011b      	lsls	r3, r3, #4
 8003f40:	1a9b      	subs	r3, r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	440b      	add	r3, r1
 8003f46:	333d      	adds	r3, #61	@ 0x3d
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d10a      	bne.n	8003f64 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003f4e:	78fa      	ldrb	r2, [r7, #3]
 8003f50:	6879      	ldr	r1, [r7, #4]
 8003f52:	4613      	mov	r3, r2
 8003f54:	011b      	lsls	r3, r3, #4
 8003f56:	1a9b      	subs	r3, r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	440b      	add	r3, r1
 8003f5c:	332a      	adds	r3, #42	@ 0x2a
 8003f5e:	2200      	movs	r2, #0
 8003f60:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003f62:	e039      	b.n	8003fd8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003f64:	78fa      	ldrb	r2, [r7, #3]
 8003f66:	6879      	ldr	r1, [r7, #4]
 8003f68:	4613      	mov	r3, r2
 8003f6a:	011b      	lsls	r3, r3, #4
 8003f6c:	1a9b      	subs	r3, r3, r2
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	440b      	add	r3, r1
 8003f72:	332a      	adds	r3, #42	@ 0x2a
 8003f74:	2202      	movs	r2, #2
 8003f76:	701a      	strb	r2, [r3, #0]
      break;
 8003f78:	e02e      	b.n	8003fd8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003f7a:	78fa      	ldrb	r2, [r7, #3]
 8003f7c:	6879      	ldr	r1, [r7, #4]
 8003f7e:	4613      	mov	r3, r2
 8003f80:	011b      	lsls	r3, r3, #4
 8003f82:	1a9b      	subs	r3, r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	440b      	add	r3, r1
 8003f88:	333c      	adds	r3, #60	@ 0x3c
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d10a      	bne.n	8003fa6 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003f90:	78fa      	ldrb	r2, [r7, #3]
 8003f92:	6879      	ldr	r1, [r7, #4]
 8003f94:	4613      	mov	r3, r2
 8003f96:	011b      	lsls	r3, r3, #4
 8003f98:	1a9b      	subs	r3, r3, r2
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	440b      	add	r3, r1
 8003f9e:	332a      	adds	r3, #42	@ 0x2a
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	701a      	strb	r2, [r3, #0]
      break;
 8003fa4:	e018      	b.n	8003fd8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003fa6:	78fa      	ldrb	r2, [r7, #3]
 8003fa8:	6879      	ldr	r1, [r7, #4]
 8003faa:	4613      	mov	r3, r2
 8003fac:	011b      	lsls	r3, r3, #4
 8003fae:	1a9b      	subs	r3, r3, r2
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	440b      	add	r3, r1
 8003fb4:	332a      	adds	r3, #42	@ 0x2a
 8003fb6:	2202      	movs	r2, #2
 8003fb8:	701a      	strb	r2, [r3, #0]
      break;
 8003fba:	e00d      	b.n	8003fd8 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003fbc:	78fa      	ldrb	r2, [r7, #3]
 8003fbe:	6879      	ldr	r1, [r7, #4]
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	011b      	lsls	r3, r3, #4
 8003fc4:	1a9b      	subs	r3, r3, r2
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	440b      	add	r3, r1
 8003fca:	332a      	adds	r3, #42	@ 0x2a
 8003fcc:	2200      	movs	r2, #0
 8003fce:	701a      	strb	r2, [r3, #0]
      break;
 8003fd0:	e002      	b.n	8003fd8 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8003fd2:	bf00      	nop
 8003fd4:	e000      	b.n	8003fd8 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8003fd6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003fd8:	78fa      	ldrb	r2, [r7, #3]
 8003fda:	6879      	ldr	r1, [r7, #4]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	011b      	lsls	r3, r3, #4
 8003fe0:	1a9b      	subs	r3, r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	440b      	add	r3, r1
 8003fe6:	332c      	adds	r3, #44	@ 0x2c
 8003fe8:	697a      	ldr	r2, [r7, #20]
 8003fea:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003fec:	78fa      	ldrb	r2, [r7, #3]
 8003fee:	8b39      	ldrh	r1, [r7, #24]
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	011b      	lsls	r3, r3, #4
 8003ff6:	1a9b      	subs	r3, r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	4403      	add	r3, r0
 8003ffc:	3334      	adds	r3, #52	@ 0x34
 8003ffe:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004000:	78fa      	ldrb	r2, [r7, #3]
 8004002:	6879      	ldr	r1, [r7, #4]
 8004004:	4613      	mov	r3, r2
 8004006:	011b      	lsls	r3, r3, #4
 8004008:	1a9b      	subs	r3, r3, r2
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	440b      	add	r3, r1
 800400e:	334c      	adds	r3, #76	@ 0x4c
 8004010:	2200      	movs	r2, #0
 8004012:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004014:	78fa      	ldrb	r2, [r7, #3]
 8004016:	6879      	ldr	r1, [r7, #4]
 8004018:	4613      	mov	r3, r2
 800401a:	011b      	lsls	r3, r3, #4
 800401c:	1a9b      	subs	r3, r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	440b      	add	r3, r1
 8004022:	3338      	adds	r3, #56	@ 0x38
 8004024:	2200      	movs	r2, #0
 8004026:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004028:	78fa      	ldrb	r2, [r7, #3]
 800402a:	6879      	ldr	r1, [r7, #4]
 800402c:	4613      	mov	r3, r2
 800402e:	011b      	lsls	r3, r3, #4
 8004030:	1a9b      	subs	r3, r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	440b      	add	r3, r1
 8004036:	3315      	adds	r3, #21
 8004038:	78fa      	ldrb	r2, [r7, #3]
 800403a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800403c:	78fa      	ldrb	r2, [r7, #3]
 800403e:	6879      	ldr	r1, [r7, #4]
 8004040:	4613      	mov	r3, r2
 8004042:	011b      	lsls	r3, r3, #4
 8004044:	1a9b      	subs	r3, r3, r2
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	440b      	add	r3, r1
 800404a:	334d      	adds	r3, #77	@ 0x4d
 800404c:	2200      	movs	r2, #0
 800404e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6818      	ldr	r0, [r3, #0]
 8004054:	78fa      	ldrb	r2, [r7, #3]
 8004056:	4613      	mov	r3, r2
 8004058:	011b      	lsls	r3, r3, #4
 800405a:	1a9b      	subs	r3, r3, r2
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	3310      	adds	r3, #16
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	4413      	add	r3, r2
 8004064:	1d19      	adds	r1, r3, #4
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	799b      	ldrb	r3, [r3, #6]
 800406a:	461a      	mov	r2, r3
 800406c:	f005 f8bc 	bl	80091e8 <USB_HC_StartXfer>
 8004070:	4603      	mov	r3, r0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3708      	adds	r7, #8
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop

0800407c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4618      	mov	r0, r3
 8004094:	f004 fdaa 	bl	8008bec <USB_GetMode>
 8004098:	4603      	mov	r3, r0
 800409a:	2b01      	cmp	r3, #1
 800409c:	f040 80fb 	bne.w	8004296 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4618      	mov	r0, r3
 80040a6:	f004 fd6d 	bl	8008b84 <USB_ReadInterrupts>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f000 80f1 	beq.w	8004294 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4618      	mov	r0, r3
 80040b8:	f004 fd64 	bl	8008b84 <USB_ReadInterrupts>
 80040bc:	4603      	mov	r3, r0
 80040be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80040c6:	d104      	bne.n	80040d2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80040d0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f004 fd54 	bl	8008b84 <USB_ReadInterrupts>
 80040dc:	4603      	mov	r3, r0
 80040de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040e6:	d104      	bne.n	80040f2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80040f0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4618      	mov	r0, r3
 80040f8:	f004 fd44 	bl	8008b84 <USB_ReadInterrupts>
 80040fc:	4603      	mov	r3, r0
 80040fe:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004102:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004106:	d104      	bne.n	8004112 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004110:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4618      	mov	r0, r3
 8004118:	f004 fd34 	bl	8008b84 <USB_ReadInterrupts>
 800411c:	4603      	mov	r3, r0
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b02      	cmp	r3, #2
 8004124:	d103      	bne.n	800412e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2202      	movs	r2, #2
 800412c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4618      	mov	r0, r3
 8004134:	f004 fd26 	bl	8008b84 <USB_ReadInterrupts>
 8004138:	4603      	mov	r3, r0
 800413a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800413e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004142:	d120      	bne.n	8004186 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800414c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	2b00      	cmp	r3, #0
 800415c:	d113      	bne.n	8004186 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800415e:	2110      	movs	r1, #16
 8004160:	6938      	ldr	r0, [r7, #16]
 8004162:	f004 fc19 	bl	8008998 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004166:	6938      	ldr	r0, [r7, #16]
 8004168:	f004 fc48 	bl	80089fc <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	7a5b      	ldrb	r3, [r3, #9]
 8004170:	2b02      	cmp	r3, #2
 8004172:	d105      	bne.n	8004180 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2101      	movs	r1, #1
 800417a:	4618      	mov	r0, r3
 800417c:	f004 fe40 	bl	8008e00 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f007 fe0d 	bl	800bda0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4618      	mov	r0, r3
 800418c:	f004 fcfa 	bl	8008b84 <USB_ReadInterrupts>
 8004190:	4603      	mov	r3, r0
 8004192:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004196:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800419a:	d102      	bne.n	80041a2 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f001 fd4d 	bl	8005c3c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f004 fcec 	bl	8008b84 <USB_ReadInterrupts>
 80041ac:	4603      	mov	r3, r0
 80041ae:	f003 0308 	and.w	r3, r3, #8
 80041b2:	2b08      	cmp	r3, #8
 80041b4:	d106      	bne.n	80041c4 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f007 fdd6 	bl	800bd68 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2208      	movs	r2, #8
 80041c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4618      	mov	r0, r3
 80041ca:	f004 fcdb 	bl	8008b84 <USB_ReadInterrupts>
 80041ce:	4603      	mov	r3, r0
 80041d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80041d8:	d139      	bne.n	800424e <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4618      	mov	r0, r3
 80041e0:	f005 fa7c 	bl	80096dc <USB_HC_ReadInterrupt>
 80041e4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80041e6:	2300      	movs	r3, #0
 80041e8:	617b      	str	r3, [r7, #20]
 80041ea:	e025      	b.n	8004238 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	f003 030f 	and.w	r3, r3, #15
 80041f2:	68ba      	ldr	r2, [r7, #8]
 80041f4:	fa22 f303 	lsr.w	r3, r2, r3
 80041f8:	f003 0301 	and.w	r3, r3, #1
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d018      	beq.n	8004232 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	015a      	lsls	r2, r3, #5
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	4413      	add	r3, r2
 8004208:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004212:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004216:	d106      	bne.n	8004226 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	b2db      	uxtb	r3, r3
 800421c:	4619      	mov	r1, r3
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 f905 	bl	800442e <HCD_HC_IN_IRQHandler>
 8004224:	e005      	b.n	8004232 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	b2db      	uxtb	r3, r3
 800422a:	4619      	mov	r1, r3
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 ff67 	bl	8005100 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	3301      	adds	r3, #1
 8004236:	617b      	str	r3, [r7, #20]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	795b      	ldrb	r3, [r3, #5]
 800423c:	461a      	mov	r2, r3
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	4293      	cmp	r3, r2
 8004242:	d3d3      	bcc.n	80041ec <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800424c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4618      	mov	r0, r3
 8004254:	f004 fc96 	bl	8008b84 <USB_ReadInterrupts>
 8004258:	4603      	mov	r3, r0
 800425a:	f003 0310 	and.w	r3, r3, #16
 800425e:	2b10      	cmp	r3, #16
 8004260:	d101      	bne.n	8004266 <HAL_HCD_IRQHandler+0x1ea>
 8004262:	2301      	movs	r3, #1
 8004264:	e000      	b.n	8004268 <HAL_HCD_IRQHandler+0x1ec>
 8004266:	2300      	movs	r3, #0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d014      	beq.n	8004296 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	699a      	ldr	r2, [r3, #24]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f022 0210 	bic.w	r2, r2, #16
 800427a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f001 fbfe 	bl	8005a7e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	699a      	ldr	r2, [r3, #24]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f042 0210 	orr.w	r2, r2, #16
 8004290:	619a      	str	r2, [r3, #24]
 8004292:	e000      	b.n	8004296 <HAL_HCD_IRQHandler+0x21a>
      return;
 8004294:	bf00      	nop
    }
  }
}
 8004296:	3718      	adds	r7, #24
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b082      	sub	sp, #8
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d101      	bne.n	80042b2 <HAL_HCD_Start+0x16>
 80042ae:	2302      	movs	r3, #2
 80042b0:	e013      	b.n	80042da <HAL_HCD_Start+0x3e>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2101      	movs	r1, #1
 80042c0:	4618      	mov	r0, r3
 80042c2:	f004 fe04 	bl	8008ece <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4618      	mov	r0, r3
 80042cc:	f004 faf6 	bl	80088bc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3708      	adds	r7, #8
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b082      	sub	sp, #8
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d101      	bne.n	80042f8 <HAL_HCD_Stop+0x16>
 80042f4:	2302      	movs	r3, #2
 80042f6:	e00d      	b.n	8004314 <HAL_HCD_Stop+0x32>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4618      	mov	r0, r3
 8004306:	f005 fb57 	bl	80099b8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	3708      	adds	r7, #8
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4618      	mov	r0, r3
 800432a:	f004 fda6 	bl	8008e7a <USB_ResetPort>
 800432e:	4603      	mov	r3, r0
}
 8004330:	4618      	mov	r0, r3
 8004332:	3708      	adds	r7, #8
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	460b      	mov	r3, r1
 8004342:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004344:	78fa      	ldrb	r2, [r7, #3]
 8004346:	6879      	ldr	r1, [r7, #4]
 8004348:	4613      	mov	r3, r2
 800434a:	011b      	lsls	r3, r3, #4
 800434c:	1a9b      	subs	r3, r3, r2
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	440b      	add	r3, r1
 8004352:	334c      	adds	r3, #76	@ 0x4c
 8004354:	781b      	ldrb	r3, [r3, #0]
}
 8004356:	4618      	mov	r0, r3
 8004358:	370c      	adds	r7, #12
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr

08004362 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8004362:	b480      	push	{r7}
 8004364:	b083      	sub	sp, #12
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
 800436a:	460b      	mov	r3, r1
 800436c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800436e:	78fa      	ldrb	r2, [r7, #3]
 8004370:	6879      	ldr	r1, [r7, #4]
 8004372:	4613      	mov	r3, r2
 8004374:	011b      	lsls	r3, r3, #4
 8004376:	1a9b      	subs	r3, r3, r2
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	440b      	add	r3, r1
 800437c:	3338      	adds	r3, #56	@ 0x38
 800437e:	681b      	ldr	r3, [r3, #0]
}
 8004380:	4618      	mov	r0, r3
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4618      	mov	r0, r3
 800439a:	f004 fde8 	bl	8008f6e <USB_GetCurrentFrame>
 800439e:	4603      	mov	r3, r0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3708      	adds	r7, #8
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4618      	mov	r0, r3
 80043b6:	f004 fdc3 	bl	8008f40 <USB_GetHostSpeed>
 80043ba:	4603      	mov	r3, r0
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3708      	adds	r7, #8
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	460b      	mov	r3, r1
 80043ce:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80043d0:	78fa      	ldrb	r2, [r7, #3]
 80043d2:	6879      	ldr	r1, [r7, #4]
 80043d4:	4613      	mov	r3, r2
 80043d6:	011b      	lsls	r3, r3, #4
 80043d8:	1a9b      	subs	r3, r3, r2
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	440b      	add	r3, r1
 80043de:	331a      	adds	r3, #26
 80043e0:	2200      	movs	r2, #0
 80043e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80043e4:	78fa      	ldrb	r2, [r7, #3]
 80043e6:	6879      	ldr	r1, [r7, #4]
 80043e8:	4613      	mov	r3, r2
 80043ea:	011b      	lsls	r3, r3, #4
 80043ec:	1a9b      	subs	r3, r3, r2
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	440b      	add	r3, r1
 80043f2:	331b      	adds	r3, #27
 80043f4:	2200      	movs	r2, #0
 80043f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80043f8:	78fa      	ldrb	r2, [r7, #3]
 80043fa:	6879      	ldr	r1, [r7, #4]
 80043fc:	4613      	mov	r3, r2
 80043fe:	011b      	lsls	r3, r3, #4
 8004400:	1a9b      	subs	r3, r3, r2
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	440b      	add	r3, r1
 8004406:	3325      	adds	r3, #37	@ 0x25
 8004408:	2200      	movs	r2, #0
 800440a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 800440c:	78fa      	ldrb	r2, [r7, #3]
 800440e:	6879      	ldr	r1, [r7, #4]
 8004410:	4613      	mov	r3, r2
 8004412:	011b      	lsls	r3, r3, #4
 8004414:	1a9b      	subs	r3, r3, r2
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	440b      	add	r3, r1
 800441a:	3324      	adds	r3, #36	@ 0x24
 800441c:	2200      	movs	r2, #0
 800441e:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	370c      	adds	r7, #12
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr

0800442e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800442e:	b580      	push	{r7, lr}
 8004430:	b086      	sub	sp, #24
 8004432:	af00      	add	r7, sp, #0
 8004434:	6078      	str	r0, [r7, #4]
 8004436:	460b      	mov	r3, r1
 8004438:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	78fa      	ldrb	r2, [r7, #3]
 800444a:	4611      	mov	r1, r2
 800444c:	4618      	mov	r0, r3
 800444e:	f004 fbac 	bl	8008baa <USB_ReadChInterrupts>
 8004452:	4603      	mov	r3, r0
 8004454:	f003 0304 	and.w	r3, r3, #4
 8004458:	2b04      	cmp	r3, #4
 800445a:	d11a      	bne.n	8004492 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800445c:	78fb      	ldrb	r3, [r7, #3]
 800445e:	015a      	lsls	r2, r3, #5
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	4413      	add	r3, r2
 8004464:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004468:	461a      	mov	r2, r3
 800446a:	2304      	movs	r3, #4
 800446c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800446e:	78fa      	ldrb	r2, [r7, #3]
 8004470:	6879      	ldr	r1, [r7, #4]
 8004472:	4613      	mov	r3, r2
 8004474:	011b      	lsls	r3, r3, #4
 8004476:	1a9b      	subs	r3, r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	440b      	add	r3, r1
 800447c:	334d      	adds	r3, #77	@ 0x4d
 800447e:	2207      	movs	r2, #7
 8004480:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	78fa      	ldrb	r2, [r7, #3]
 8004488:	4611      	mov	r1, r2
 800448a:	4618      	mov	r0, r3
 800448c:	f005 f937 	bl	80096fe <USB_HC_Halt>
 8004490:	e09e      	b.n	80045d0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	78fa      	ldrb	r2, [r7, #3]
 8004498:	4611      	mov	r1, r2
 800449a:	4618      	mov	r0, r3
 800449c:	f004 fb85 	bl	8008baa <USB_ReadChInterrupts>
 80044a0:	4603      	mov	r3, r0
 80044a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044aa:	d11b      	bne.n	80044e4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80044ac:	78fb      	ldrb	r3, [r7, #3]
 80044ae:	015a      	lsls	r2, r3, #5
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	4413      	add	r3, r2
 80044b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044b8:	461a      	mov	r2, r3
 80044ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80044be:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80044c0:	78fa      	ldrb	r2, [r7, #3]
 80044c2:	6879      	ldr	r1, [r7, #4]
 80044c4:	4613      	mov	r3, r2
 80044c6:	011b      	lsls	r3, r3, #4
 80044c8:	1a9b      	subs	r3, r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	440b      	add	r3, r1
 80044ce:	334d      	adds	r3, #77	@ 0x4d
 80044d0:	2208      	movs	r2, #8
 80044d2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	78fa      	ldrb	r2, [r7, #3]
 80044da:	4611      	mov	r1, r2
 80044dc:	4618      	mov	r0, r3
 80044de:	f005 f90e 	bl	80096fe <USB_HC_Halt>
 80044e2:	e075      	b.n	80045d0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	78fa      	ldrb	r2, [r7, #3]
 80044ea:	4611      	mov	r1, r2
 80044ec:	4618      	mov	r0, r3
 80044ee:	f004 fb5c 	bl	8008baa <USB_ReadChInterrupts>
 80044f2:	4603      	mov	r3, r0
 80044f4:	f003 0308 	and.w	r3, r3, #8
 80044f8:	2b08      	cmp	r3, #8
 80044fa:	d11a      	bne.n	8004532 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80044fc:	78fb      	ldrb	r3, [r7, #3]
 80044fe:	015a      	lsls	r2, r3, #5
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	4413      	add	r3, r2
 8004504:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004508:	461a      	mov	r2, r3
 800450a:	2308      	movs	r3, #8
 800450c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800450e:	78fa      	ldrb	r2, [r7, #3]
 8004510:	6879      	ldr	r1, [r7, #4]
 8004512:	4613      	mov	r3, r2
 8004514:	011b      	lsls	r3, r3, #4
 8004516:	1a9b      	subs	r3, r3, r2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	440b      	add	r3, r1
 800451c:	334d      	adds	r3, #77	@ 0x4d
 800451e:	2206      	movs	r2, #6
 8004520:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	78fa      	ldrb	r2, [r7, #3]
 8004528:	4611      	mov	r1, r2
 800452a:	4618      	mov	r0, r3
 800452c:	f005 f8e7 	bl	80096fe <USB_HC_Halt>
 8004530:	e04e      	b.n	80045d0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	78fa      	ldrb	r2, [r7, #3]
 8004538:	4611      	mov	r1, r2
 800453a:	4618      	mov	r0, r3
 800453c:	f004 fb35 	bl	8008baa <USB_ReadChInterrupts>
 8004540:	4603      	mov	r3, r0
 8004542:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004546:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800454a:	d11b      	bne.n	8004584 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800454c:	78fb      	ldrb	r3, [r7, #3]
 800454e:	015a      	lsls	r2, r3, #5
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	4413      	add	r3, r2
 8004554:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004558:	461a      	mov	r2, r3
 800455a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800455e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004560:	78fa      	ldrb	r2, [r7, #3]
 8004562:	6879      	ldr	r1, [r7, #4]
 8004564:	4613      	mov	r3, r2
 8004566:	011b      	lsls	r3, r3, #4
 8004568:	1a9b      	subs	r3, r3, r2
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	440b      	add	r3, r1
 800456e:	334d      	adds	r3, #77	@ 0x4d
 8004570:	2209      	movs	r2, #9
 8004572:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	78fa      	ldrb	r2, [r7, #3]
 800457a:	4611      	mov	r1, r2
 800457c:	4618      	mov	r0, r3
 800457e:	f005 f8be 	bl	80096fe <USB_HC_Halt>
 8004582:	e025      	b.n	80045d0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	78fa      	ldrb	r2, [r7, #3]
 800458a:	4611      	mov	r1, r2
 800458c:	4618      	mov	r0, r3
 800458e:	f004 fb0c 	bl	8008baa <USB_ReadChInterrupts>
 8004592:	4603      	mov	r3, r0
 8004594:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004598:	2b80      	cmp	r3, #128	@ 0x80
 800459a:	d119      	bne.n	80045d0 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800459c:	78fb      	ldrb	r3, [r7, #3]
 800459e:	015a      	lsls	r2, r3, #5
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	4413      	add	r3, r2
 80045a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045a8:	461a      	mov	r2, r3
 80045aa:	2380      	movs	r3, #128	@ 0x80
 80045ac:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80045ae:	78fa      	ldrb	r2, [r7, #3]
 80045b0:	6879      	ldr	r1, [r7, #4]
 80045b2:	4613      	mov	r3, r2
 80045b4:	011b      	lsls	r3, r3, #4
 80045b6:	1a9b      	subs	r3, r3, r2
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	440b      	add	r3, r1
 80045bc:	334d      	adds	r3, #77	@ 0x4d
 80045be:	2207      	movs	r2, #7
 80045c0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	78fa      	ldrb	r2, [r7, #3]
 80045c8:	4611      	mov	r1, r2
 80045ca:	4618      	mov	r0, r3
 80045cc:	f005 f897 	bl	80096fe <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	78fa      	ldrb	r2, [r7, #3]
 80045d6:	4611      	mov	r1, r2
 80045d8:	4618      	mov	r0, r3
 80045da:	f004 fae6 	bl	8008baa <USB_ReadChInterrupts>
 80045de:	4603      	mov	r3, r0
 80045e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045e8:	d112      	bne.n	8004610 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	78fa      	ldrb	r2, [r7, #3]
 80045f0:	4611      	mov	r1, r2
 80045f2:	4618      	mov	r0, r3
 80045f4:	f005 f883 	bl	80096fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80045f8:	78fb      	ldrb	r3, [r7, #3]
 80045fa:	015a      	lsls	r2, r3, #5
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	4413      	add	r3, r2
 8004600:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004604:	461a      	mov	r2, r3
 8004606:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800460a:	6093      	str	r3, [r2, #8]
 800460c:	f000 bd75 	b.w	80050fa <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	78fa      	ldrb	r2, [r7, #3]
 8004616:	4611      	mov	r1, r2
 8004618:	4618      	mov	r0, r3
 800461a:	f004 fac6 	bl	8008baa <USB_ReadChInterrupts>
 800461e:	4603      	mov	r3, r0
 8004620:	f003 0301 	and.w	r3, r3, #1
 8004624:	2b01      	cmp	r3, #1
 8004626:	f040 8128 	bne.w	800487a <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800462a:	78fb      	ldrb	r3, [r7, #3]
 800462c:	015a      	lsls	r2, r3, #5
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	4413      	add	r3, r2
 8004632:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004636:	461a      	mov	r2, r3
 8004638:	2320      	movs	r3, #32
 800463a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 800463c:	78fa      	ldrb	r2, [r7, #3]
 800463e:	6879      	ldr	r1, [r7, #4]
 8004640:	4613      	mov	r3, r2
 8004642:	011b      	lsls	r3, r3, #4
 8004644:	1a9b      	subs	r3, r3, r2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	440b      	add	r3, r1
 800464a:	331b      	adds	r3, #27
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d119      	bne.n	8004686 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004652:	78fa      	ldrb	r2, [r7, #3]
 8004654:	6879      	ldr	r1, [r7, #4]
 8004656:	4613      	mov	r3, r2
 8004658:	011b      	lsls	r3, r3, #4
 800465a:	1a9b      	subs	r3, r3, r2
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	440b      	add	r3, r1
 8004660:	331b      	adds	r3, #27
 8004662:	2200      	movs	r2, #0
 8004664:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004666:	78fb      	ldrb	r3, [r7, #3]
 8004668:	015a      	lsls	r2, r3, #5
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	4413      	add	r3, r2
 800466e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	78fa      	ldrb	r2, [r7, #3]
 8004676:	0151      	lsls	r1, r2, #5
 8004678:	693a      	ldr	r2, [r7, #16]
 800467a:	440a      	add	r2, r1
 800467c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004680:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004684:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	799b      	ldrb	r3, [r3, #6]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d01b      	beq.n	80046c6 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800468e:	78fa      	ldrb	r2, [r7, #3]
 8004690:	6879      	ldr	r1, [r7, #4]
 8004692:	4613      	mov	r3, r2
 8004694:	011b      	lsls	r3, r3, #4
 8004696:	1a9b      	subs	r3, r3, r2
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	440b      	add	r3, r1
 800469c:	3330      	adds	r3, #48	@ 0x30
 800469e:	6819      	ldr	r1, [r3, #0]
 80046a0:	78fb      	ldrb	r3, [r7, #3]
 80046a2:	015a      	lsls	r2, r3, #5
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	4413      	add	r3, r2
 80046a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046b2:	78fa      	ldrb	r2, [r7, #3]
 80046b4:	1ac9      	subs	r1, r1, r3
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	4613      	mov	r3, r2
 80046ba:	011b      	lsls	r3, r3, #4
 80046bc:	1a9b      	subs	r3, r3, r2
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	4403      	add	r3, r0
 80046c2:	3338      	adds	r3, #56	@ 0x38
 80046c4:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80046c6:	78fa      	ldrb	r2, [r7, #3]
 80046c8:	6879      	ldr	r1, [r7, #4]
 80046ca:	4613      	mov	r3, r2
 80046cc:	011b      	lsls	r3, r3, #4
 80046ce:	1a9b      	subs	r3, r3, r2
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	440b      	add	r3, r1
 80046d4:	334d      	adds	r3, #77	@ 0x4d
 80046d6:	2201      	movs	r2, #1
 80046d8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80046da:	78fa      	ldrb	r2, [r7, #3]
 80046dc:	6879      	ldr	r1, [r7, #4]
 80046de:	4613      	mov	r3, r2
 80046e0:	011b      	lsls	r3, r3, #4
 80046e2:	1a9b      	subs	r3, r3, r2
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	440b      	add	r3, r1
 80046e8:	3344      	adds	r3, #68	@ 0x44
 80046ea:	2200      	movs	r2, #0
 80046ec:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80046ee:	78fb      	ldrb	r3, [r7, #3]
 80046f0:	015a      	lsls	r2, r3, #5
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	4413      	add	r3, r2
 80046f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046fa:	461a      	mov	r2, r3
 80046fc:	2301      	movs	r3, #1
 80046fe:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004700:	78fa      	ldrb	r2, [r7, #3]
 8004702:	6879      	ldr	r1, [r7, #4]
 8004704:	4613      	mov	r3, r2
 8004706:	011b      	lsls	r3, r3, #4
 8004708:	1a9b      	subs	r3, r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	440b      	add	r3, r1
 800470e:	3326      	adds	r3, #38	@ 0x26
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00a      	beq.n	800472c <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004716:	78fa      	ldrb	r2, [r7, #3]
 8004718:	6879      	ldr	r1, [r7, #4]
 800471a:	4613      	mov	r3, r2
 800471c:	011b      	lsls	r3, r3, #4
 800471e:	1a9b      	subs	r3, r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	440b      	add	r3, r1
 8004724:	3326      	adds	r3, #38	@ 0x26
 8004726:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004728:	2b02      	cmp	r3, #2
 800472a:	d110      	bne.n	800474e <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	78fa      	ldrb	r2, [r7, #3]
 8004732:	4611      	mov	r1, r2
 8004734:	4618      	mov	r0, r3
 8004736:	f004 ffe2 	bl	80096fe <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800473a:	78fb      	ldrb	r3, [r7, #3]
 800473c:	015a      	lsls	r2, r3, #5
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	4413      	add	r3, r2
 8004742:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004746:	461a      	mov	r2, r3
 8004748:	2310      	movs	r3, #16
 800474a:	6093      	str	r3, [r2, #8]
 800474c:	e03d      	b.n	80047ca <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800474e:	78fa      	ldrb	r2, [r7, #3]
 8004750:	6879      	ldr	r1, [r7, #4]
 8004752:	4613      	mov	r3, r2
 8004754:	011b      	lsls	r3, r3, #4
 8004756:	1a9b      	subs	r3, r3, r2
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	440b      	add	r3, r1
 800475c:	3326      	adds	r3, #38	@ 0x26
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	2b03      	cmp	r3, #3
 8004762:	d00a      	beq.n	800477a <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8004764:	78fa      	ldrb	r2, [r7, #3]
 8004766:	6879      	ldr	r1, [r7, #4]
 8004768:	4613      	mov	r3, r2
 800476a:	011b      	lsls	r3, r3, #4
 800476c:	1a9b      	subs	r3, r3, r2
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	440b      	add	r3, r1
 8004772:	3326      	adds	r3, #38	@ 0x26
 8004774:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004776:	2b01      	cmp	r3, #1
 8004778:	d127      	bne.n	80047ca <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800477a:	78fb      	ldrb	r3, [r7, #3]
 800477c:	015a      	lsls	r2, r3, #5
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	4413      	add	r3, r2
 8004782:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	78fa      	ldrb	r2, [r7, #3]
 800478a:	0151      	lsls	r1, r2, #5
 800478c:	693a      	ldr	r2, [r7, #16]
 800478e:	440a      	add	r2, r1
 8004790:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004794:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004798:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800479a:	78fa      	ldrb	r2, [r7, #3]
 800479c:	6879      	ldr	r1, [r7, #4]
 800479e:	4613      	mov	r3, r2
 80047a0:	011b      	lsls	r3, r3, #4
 80047a2:	1a9b      	subs	r3, r3, r2
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	440b      	add	r3, r1
 80047a8:	334c      	adds	r3, #76	@ 0x4c
 80047aa:	2201      	movs	r2, #1
 80047ac:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80047ae:	78fa      	ldrb	r2, [r7, #3]
 80047b0:	6879      	ldr	r1, [r7, #4]
 80047b2:	4613      	mov	r3, r2
 80047b4:	011b      	lsls	r3, r3, #4
 80047b6:	1a9b      	subs	r3, r3, r2
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	440b      	add	r3, r1
 80047bc:	334c      	adds	r3, #76	@ 0x4c
 80047be:	781a      	ldrb	r2, [r3, #0]
 80047c0:	78fb      	ldrb	r3, [r7, #3]
 80047c2:	4619      	mov	r1, r3
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f007 faf9 	bl	800bdbc <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	799b      	ldrb	r3, [r3, #6]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d13b      	bne.n	800484a <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80047d2:	78fa      	ldrb	r2, [r7, #3]
 80047d4:	6879      	ldr	r1, [r7, #4]
 80047d6:	4613      	mov	r3, r2
 80047d8:	011b      	lsls	r3, r3, #4
 80047da:	1a9b      	subs	r3, r3, r2
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	440b      	add	r3, r1
 80047e0:	3338      	adds	r3, #56	@ 0x38
 80047e2:	6819      	ldr	r1, [r3, #0]
 80047e4:	78fa      	ldrb	r2, [r7, #3]
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	4613      	mov	r3, r2
 80047ea:	011b      	lsls	r3, r3, #4
 80047ec:	1a9b      	subs	r3, r3, r2
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	4403      	add	r3, r0
 80047f2:	3328      	adds	r3, #40	@ 0x28
 80047f4:	881b      	ldrh	r3, [r3, #0]
 80047f6:	440b      	add	r3, r1
 80047f8:	1e59      	subs	r1, r3, #1
 80047fa:	78fa      	ldrb	r2, [r7, #3]
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	4613      	mov	r3, r2
 8004800:	011b      	lsls	r3, r3, #4
 8004802:	1a9b      	subs	r3, r3, r2
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	4403      	add	r3, r0
 8004808:	3328      	adds	r3, #40	@ 0x28
 800480a:	881b      	ldrh	r3, [r3, #0]
 800480c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004810:	f003 0301 	and.w	r3, r3, #1
 8004814:	2b00      	cmp	r3, #0
 8004816:	f000 8470 	beq.w	80050fa <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800481a:	78fa      	ldrb	r2, [r7, #3]
 800481c:	6879      	ldr	r1, [r7, #4]
 800481e:	4613      	mov	r3, r2
 8004820:	011b      	lsls	r3, r3, #4
 8004822:	1a9b      	subs	r3, r3, r2
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	440b      	add	r3, r1
 8004828:	333c      	adds	r3, #60	@ 0x3c
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	78fa      	ldrb	r2, [r7, #3]
 800482e:	f083 0301 	eor.w	r3, r3, #1
 8004832:	b2d8      	uxtb	r0, r3
 8004834:	6879      	ldr	r1, [r7, #4]
 8004836:	4613      	mov	r3, r2
 8004838:	011b      	lsls	r3, r3, #4
 800483a:	1a9b      	subs	r3, r3, r2
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	440b      	add	r3, r1
 8004840:	333c      	adds	r3, #60	@ 0x3c
 8004842:	4602      	mov	r2, r0
 8004844:	701a      	strb	r2, [r3, #0]
 8004846:	f000 bc58 	b.w	80050fa <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800484a:	78fa      	ldrb	r2, [r7, #3]
 800484c:	6879      	ldr	r1, [r7, #4]
 800484e:	4613      	mov	r3, r2
 8004850:	011b      	lsls	r3, r3, #4
 8004852:	1a9b      	subs	r3, r3, r2
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	440b      	add	r3, r1
 8004858:	333c      	adds	r3, #60	@ 0x3c
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	78fa      	ldrb	r2, [r7, #3]
 800485e:	f083 0301 	eor.w	r3, r3, #1
 8004862:	b2d8      	uxtb	r0, r3
 8004864:	6879      	ldr	r1, [r7, #4]
 8004866:	4613      	mov	r3, r2
 8004868:	011b      	lsls	r3, r3, #4
 800486a:	1a9b      	subs	r3, r3, r2
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	440b      	add	r3, r1
 8004870:	333c      	adds	r3, #60	@ 0x3c
 8004872:	4602      	mov	r2, r0
 8004874:	701a      	strb	r2, [r3, #0]
 8004876:	f000 bc40 	b.w	80050fa <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	78fa      	ldrb	r2, [r7, #3]
 8004880:	4611      	mov	r1, r2
 8004882:	4618      	mov	r0, r3
 8004884:	f004 f991 	bl	8008baa <USB_ReadChInterrupts>
 8004888:	4603      	mov	r3, r0
 800488a:	f003 0320 	and.w	r3, r3, #32
 800488e:	2b20      	cmp	r3, #32
 8004890:	d131      	bne.n	80048f6 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004892:	78fb      	ldrb	r3, [r7, #3]
 8004894:	015a      	lsls	r2, r3, #5
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	4413      	add	r3, r2
 800489a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800489e:	461a      	mov	r2, r3
 80048a0:	2320      	movs	r3, #32
 80048a2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80048a4:	78fa      	ldrb	r2, [r7, #3]
 80048a6:	6879      	ldr	r1, [r7, #4]
 80048a8:	4613      	mov	r3, r2
 80048aa:	011b      	lsls	r3, r3, #4
 80048ac:	1a9b      	subs	r3, r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	440b      	add	r3, r1
 80048b2:	331a      	adds	r3, #26
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	f040 841f 	bne.w	80050fa <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80048bc:	78fa      	ldrb	r2, [r7, #3]
 80048be:	6879      	ldr	r1, [r7, #4]
 80048c0:	4613      	mov	r3, r2
 80048c2:	011b      	lsls	r3, r3, #4
 80048c4:	1a9b      	subs	r3, r3, r2
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	440b      	add	r3, r1
 80048ca:	331b      	adds	r3, #27
 80048cc:	2201      	movs	r2, #1
 80048ce:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80048d0:	78fa      	ldrb	r2, [r7, #3]
 80048d2:	6879      	ldr	r1, [r7, #4]
 80048d4:	4613      	mov	r3, r2
 80048d6:	011b      	lsls	r3, r3, #4
 80048d8:	1a9b      	subs	r3, r3, r2
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	440b      	add	r3, r1
 80048de:	334d      	adds	r3, #77	@ 0x4d
 80048e0:	2203      	movs	r2, #3
 80048e2:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	78fa      	ldrb	r2, [r7, #3]
 80048ea:	4611      	mov	r1, r2
 80048ec:	4618      	mov	r0, r3
 80048ee:	f004 ff06 	bl	80096fe <USB_HC_Halt>
 80048f2:	f000 bc02 	b.w	80050fa <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	78fa      	ldrb	r2, [r7, #3]
 80048fc:	4611      	mov	r1, r2
 80048fe:	4618      	mov	r0, r3
 8004900:	f004 f953 	bl	8008baa <USB_ReadChInterrupts>
 8004904:	4603      	mov	r3, r0
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	2b02      	cmp	r3, #2
 800490c:	f040 8305 	bne.w	8004f1a <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004910:	78fb      	ldrb	r3, [r7, #3]
 8004912:	015a      	lsls	r2, r3, #5
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	4413      	add	r3, r2
 8004918:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800491c:	461a      	mov	r2, r3
 800491e:	2302      	movs	r3, #2
 8004920:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004922:	78fa      	ldrb	r2, [r7, #3]
 8004924:	6879      	ldr	r1, [r7, #4]
 8004926:	4613      	mov	r3, r2
 8004928:	011b      	lsls	r3, r3, #4
 800492a:	1a9b      	subs	r3, r3, r2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	440b      	add	r3, r1
 8004930:	334d      	adds	r3, #77	@ 0x4d
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	2b01      	cmp	r3, #1
 8004936:	d114      	bne.n	8004962 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004938:	78fa      	ldrb	r2, [r7, #3]
 800493a:	6879      	ldr	r1, [r7, #4]
 800493c:	4613      	mov	r3, r2
 800493e:	011b      	lsls	r3, r3, #4
 8004940:	1a9b      	subs	r3, r3, r2
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	440b      	add	r3, r1
 8004946:	334d      	adds	r3, #77	@ 0x4d
 8004948:	2202      	movs	r2, #2
 800494a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800494c:	78fa      	ldrb	r2, [r7, #3]
 800494e:	6879      	ldr	r1, [r7, #4]
 8004950:	4613      	mov	r3, r2
 8004952:	011b      	lsls	r3, r3, #4
 8004954:	1a9b      	subs	r3, r3, r2
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	440b      	add	r3, r1
 800495a:	334c      	adds	r3, #76	@ 0x4c
 800495c:	2201      	movs	r2, #1
 800495e:	701a      	strb	r2, [r3, #0]
 8004960:	e2cc      	b.n	8004efc <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004962:	78fa      	ldrb	r2, [r7, #3]
 8004964:	6879      	ldr	r1, [r7, #4]
 8004966:	4613      	mov	r3, r2
 8004968:	011b      	lsls	r3, r3, #4
 800496a:	1a9b      	subs	r3, r3, r2
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	440b      	add	r3, r1
 8004970:	334d      	adds	r3, #77	@ 0x4d
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	2b06      	cmp	r3, #6
 8004976:	d114      	bne.n	80049a2 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004978:	78fa      	ldrb	r2, [r7, #3]
 800497a:	6879      	ldr	r1, [r7, #4]
 800497c:	4613      	mov	r3, r2
 800497e:	011b      	lsls	r3, r3, #4
 8004980:	1a9b      	subs	r3, r3, r2
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	440b      	add	r3, r1
 8004986:	334d      	adds	r3, #77	@ 0x4d
 8004988:	2202      	movs	r2, #2
 800498a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800498c:	78fa      	ldrb	r2, [r7, #3]
 800498e:	6879      	ldr	r1, [r7, #4]
 8004990:	4613      	mov	r3, r2
 8004992:	011b      	lsls	r3, r3, #4
 8004994:	1a9b      	subs	r3, r3, r2
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	440b      	add	r3, r1
 800499a:	334c      	adds	r3, #76	@ 0x4c
 800499c:	2205      	movs	r2, #5
 800499e:	701a      	strb	r2, [r3, #0]
 80049a0:	e2ac      	b.n	8004efc <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80049a2:	78fa      	ldrb	r2, [r7, #3]
 80049a4:	6879      	ldr	r1, [r7, #4]
 80049a6:	4613      	mov	r3, r2
 80049a8:	011b      	lsls	r3, r3, #4
 80049aa:	1a9b      	subs	r3, r3, r2
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	440b      	add	r3, r1
 80049b0:	334d      	adds	r3, #77	@ 0x4d
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	2b07      	cmp	r3, #7
 80049b6:	d00b      	beq.n	80049d0 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80049b8:	78fa      	ldrb	r2, [r7, #3]
 80049ba:	6879      	ldr	r1, [r7, #4]
 80049bc:	4613      	mov	r3, r2
 80049be:	011b      	lsls	r3, r3, #4
 80049c0:	1a9b      	subs	r3, r3, r2
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	440b      	add	r3, r1
 80049c6:	334d      	adds	r3, #77	@ 0x4d
 80049c8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80049ca:	2b09      	cmp	r3, #9
 80049cc:	f040 80a6 	bne.w	8004b1c <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80049d0:	78fa      	ldrb	r2, [r7, #3]
 80049d2:	6879      	ldr	r1, [r7, #4]
 80049d4:	4613      	mov	r3, r2
 80049d6:	011b      	lsls	r3, r3, #4
 80049d8:	1a9b      	subs	r3, r3, r2
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	440b      	add	r3, r1
 80049de:	334d      	adds	r3, #77	@ 0x4d
 80049e0:	2202      	movs	r2, #2
 80049e2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80049e4:	78fa      	ldrb	r2, [r7, #3]
 80049e6:	6879      	ldr	r1, [r7, #4]
 80049e8:	4613      	mov	r3, r2
 80049ea:	011b      	lsls	r3, r3, #4
 80049ec:	1a9b      	subs	r3, r3, r2
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	440b      	add	r3, r1
 80049f2:	3344      	adds	r3, #68	@ 0x44
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	1c59      	adds	r1, r3, #1
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	4613      	mov	r3, r2
 80049fc:	011b      	lsls	r3, r3, #4
 80049fe:	1a9b      	subs	r3, r3, r2
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	4403      	add	r3, r0
 8004a04:	3344      	adds	r3, #68	@ 0x44
 8004a06:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004a08:	78fa      	ldrb	r2, [r7, #3]
 8004a0a:	6879      	ldr	r1, [r7, #4]
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	011b      	lsls	r3, r3, #4
 8004a10:	1a9b      	subs	r3, r3, r2
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	440b      	add	r3, r1
 8004a16:	3344      	adds	r3, #68	@ 0x44
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d943      	bls.n	8004aa6 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004a1e:	78fa      	ldrb	r2, [r7, #3]
 8004a20:	6879      	ldr	r1, [r7, #4]
 8004a22:	4613      	mov	r3, r2
 8004a24:	011b      	lsls	r3, r3, #4
 8004a26:	1a9b      	subs	r3, r3, r2
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	440b      	add	r3, r1
 8004a2c:	3344      	adds	r3, #68	@ 0x44
 8004a2e:	2200      	movs	r2, #0
 8004a30:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8004a32:	78fa      	ldrb	r2, [r7, #3]
 8004a34:	6879      	ldr	r1, [r7, #4]
 8004a36:	4613      	mov	r3, r2
 8004a38:	011b      	lsls	r3, r3, #4
 8004a3a:	1a9b      	subs	r3, r3, r2
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	440b      	add	r3, r1
 8004a40:	331a      	adds	r3, #26
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d123      	bne.n	8004a90 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8004a48:	78fa      	ldrb	r2, [r7, #3]
 8004a4a:	6879      	ldr	r1, [r7, #4]
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	011b      	lsls	r3, r3, #4
 8004a50:	1a9b      	subs	r3, r3, r2
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	440b      	add	r3, r1
 8004a56:	331b      	adds	r3, #27
 8004a58:	2200      	movs	r2, #0
 8004a5a:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8004a5c:	78fa      	ldrb	r2, [r7, #3]
 8004a5e:	6879      	ldr	r1, [r7, #4]
 8004a60:	4613      	mov	r3, r2
 8004a62:	011b      	lsls	r3, r3, #4
 8004a64:	1a9b      	subs	r3, r3, r2
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	440b      	add	r3, r1
 8004a6a:	331c      	adds	r3, #28
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004a70:	78fb      	ldrb	r3, [r7, #3]
 8004a72:	015a      	lsls	r2, r3, #5
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	4413      	add	r3, r2
 8004a78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	78fa      	ldrb	r2, [r7, #3]
 8004a80:	0151      	lsls	r1, r2, #5
 8004a82:	693a      	ldr	r2, [r7, #16]
 8004a84:	440a      	add	r2, r1
 8004a86:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004a8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a8e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004a90:	78fa      	ldrb	r2, [r7, #3]
 8004a92:	6879      	ldr	r1, [r7, #4]
 8004a94:	4613      	mov	r3, r2
 8004a96:	011b      	lsls	r3, r3, #4
 8004a98:	1a9b      	subs	r3, r3, r2
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	440b      	add	r3, r1
 8004a9e:	334c      	adds	r3, #76	@ 0x4c
 8004aa0:	2204      	movs	r2, #4
 8004aa2:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004aa4:	e229      	b.n	8004efa <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004aa6:	78fa      	ldrb	r2, [r7, #3]
 8004aa8:	6879      	ldr	r1, [r7, #4]
 8004aaa:	4613      	mov	r3, r2
 8004aac:	011b      	lsls	r3, r3, #4
 8004aae:	1a9b      	subs	r3, r3, r2
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	440b      	add	r3, r1
 8004ab4:	334c      	adds	r3, #76	@ 0x4c
 8004ab6:	2202      	movs	r2, #2
 8004ab8:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004aba:	78fa      	ldrb	r2, [r7, #3]
 8004abc:	6879      	ldr	r1, [r7, #4]
 8004abe:	4613      	mov	r3, r2
 8004ac0:	011b      	lsls	r3, r3, #4
 8004ac2:	1a9b      	subs	r3, r3, r2
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	440b      	add	r3, r1
 8004ac8:	3326      	adds	r3, #38	@ 0x26
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00b      	beq.n	8004ae8 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004ad0:	78fa      	ldrb	r2, [r7, #3]
 8004ad2:	6879      	ldr	r1, [r7, #4]
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	011b      	lsls	r3, r3, #4
 8004ad8:	1a9b      	subs	r3, r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	440b      	add	r3, r1
 8004ade:	3326      	adds	r3, #38	@ 0x26
 8004ae0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	f040 8209 	bne.w	8004efa <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004ae8:	78fb      	ldrb	r3, [r7, #3]
 8004aea:	015a      	lsls	r2, r3, #5
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	4413      	add	r3, r2
 8004af0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004afe:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004b06:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004b08:	78fb      	ldrb	r3, [r7, #3]
 8004b0a:	015a      	lsls	r2, r3, #5
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	4413      	add	r3, r2
 8004b10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b14:	461a      	mov	r2, r3
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004b1a:	e1ee      	b.n	8004efa <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004b1c:	78fa      	ldrb	r2, [r7, #3]
 8004b1e:	6879      	ldr	r1, [r7, #4]
 8004b20:	4613      	mov	r3, r2
 8004b22:	011b      	lsls	r3, r3, #4
 8004b24:	1a9b      	subs	r3, r3, r2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	440b      	add	r3, r1
 8004b2a:	334d      	adds	r3, #77	@ 0x4d
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	2b05      	cmp	r3, #5
 8004b30:	f040 80c8 	bne.w	8004cc4 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004b34:	78fa      	ldrb	r2, [r7, #3]
 8004b36:	6879      	ldr	r1, [r7, #4]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	011b      	lsls	r3, r3, #4
 8004b3c:	1a9b      	subs	r3, r3, r2
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	440b      	add	r3, r1
 8004b42:	334d      	adds	r3, #77	@ 0x4d
 8004b44:	2202      	movs	r2, #2
 8004b46:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004b48:	78fa      	ldrb	r2, [r7, #3]
 8004b4a:	6879      	ldr	r1, [r7, #4]
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	011b      	lsls	r3, r3, #4
 8004b50:	1a9b      	subs	r3, r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	440b      	add	r3, r1
 8004b56:	331b      	adds	r3, #27
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	f040 81ce 	bne.w	8004efc <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004b60:	78fa      	ldrb	r2, [r7, #3]
 8004b62:	6879      	ldr	r1, [r7, #4]
 8004b64:	4613      	mov	r3, r2
 8004b66:	011b      	lsls	r3, r3, #4
 8004b68:	1a9b      	subs	r3, r3, r2
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	440b      	add	r3, r1
 8004b6e:	3326      	adds	r3, #38	@ 0x26
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	2b03      	cmp	r3, #3
 8004b74:	d16b      	bne.n	8004c4e <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8004b76:	78fa      	ldrb	r2, [r7, #3]
 8004b78:	6879      	ldr	r1, [r7, #4]
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	011b      	lsls	r3, r3, #4
 8004b7e:	1a9b      	subs	r3, r3, r2
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	440b      	add	r3, r1
 8004b84:	3348      	adds	r3, #72	@ 0x48
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	1c59      	adds	r1, r3, #1
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	011b      	lsls	r3, r3, #4
 8004b90:	1a9b      	subs	r3, r3, r2
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	4403      	add	r3, r0
 8004b96:	3348      	adds	r3, #72	@ 0x48
 8004b98:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8004b9a:	78fa      	ldrb	r2, [r7, #3]
 8004b9c:	6879      	ldr	r1, [r7, #4]
 8004b9e:	4613      	mov	r3, r2
 8004ba0:	011b      	lsls	r3, r3, #4
 8004ba2:	1a9b      	subs	r3, r3, r2
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	440b      	add	r3, r1
 8004ba8:	3348      	adds	r3, #72	@ 0x48
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d943      	bls.n	8004c38 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8004bb0:	78fa      	ldrb	r2, [r7, #3]
 8004bb2:	6879      	ldr	r1, [r7, #4]
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	011b      	lsls	r3, r3, #4
 8004bb8:	1a9b      	subs	r3, r3, r2
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	440b      	add	r3, r1
 8004bbe:	3348      	adds	r3, #72	@ 0x48
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8004bc4:	78fa      	ldrb	r2, [r7, #3]
 8004bc6:	6879      	ldr	r1, [r7, #4]
 8004bc8:	4613      	mov	r3, r2
 8004bca:	011b      	lsls	r3, r3, #4
 8004bcc:	1a9b      	subs	r3, r3, r2
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	440b      	add	r3, r1
 8004bd2:	331b      	adds	r3, #27
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8004bd8:	78fa      	ldrb	r2, [r7, #3]
 8004bda:	6879      	ldr	r1, [r7, #4]
 8004bdc:	4613      	mov	r3, r2
 8004bde:	011b      	lsls	r3, r3, #4
 8004be0:	1a9b      	subs	r3, r3, r2
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	440b      	add	r3, r1
 8004be6:	3344      	adds	r3, #68	@ 0x44
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d809      	bhi.n	8004c02 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8004bee:	78fa      	ldrb	r2, [r7, #3]
 8004bf0:	6879      	ldr	r1, [r7, #4]
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	011b      	lsls	r3, r3, #4
 8004bf6:	1a9b      	subs	r3, r3, r2
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	440b      	add	r3, r1
 8004bfc:	331c      	adds	r3, #28
 8004bfe:	2201      	movs	r2, #1
 8004c00:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004c02:	78fb      	ldrb	r3, [r7, #3]
 8004c04:	015a      	lsls	r2, r3, #5
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	4413      	add	r3, r2
 8004c0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	78fa      	ldrb	r2, [r7, #3]
 8004c12:	0151      	lsls	r1, r2, #5
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	440a      	add	r2, r1
 8004c18:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004c1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c20:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8004c22:	78fa      	ldrb	r2, [r7, #3]
 8004c24:	6879      	ldr	r1, [r7, #4]
 8004c26:	4613      	mov	r3, r2
 8004c28:	011b      	lsls	r3, r3, #4
 8004c2a:	1a9b      	subs	r3, r3, r2
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	440b      	add	r3, r1
 8004c30:	334c      	adds	r3, #76	@ 0x4c
 8004c32:	2204      	movs	r2, #4
 8004c34:	701a      	strb	r2, [r3, #0]
 8004c36:	e014      	b.n	8004c62 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004c38:	78fa      	ldrb	r2, [r7, #3]
 8004c3a:	6879      	ldr	r1, [r7, #4]
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	011b      	lsls	r3, r3, #4
 8004c40:	1a9b      	subs	r3, r3, r2
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	440b      	add	r3, r1
 8004c46:	334c      	adds	r3, #76	@ 0x4c
 8004c48:	2202      	movs	r2, #2
 8004c4a:	701a      	strb	r2, [r3, #0]
 8004c4c:	e009      	b.n	8004c62 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004c4e:	78fa      	ldrb	r2, [r7, #3]
 8004c50:	6879      	ldr	r1, [r7, #4]
 8004c52:	4613      	mov	r3, r2
 8004c54:	011b      	lsls	r3, r3, #4
 8004c56:	1a9b      	subs	r3, r3, r2
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	440b      	add	r3, r1
 8004c5c:	334c      	adds	r3, #76	@ 0x4c
 8004c5e:	2202      	movs	r2, #2
 8004c60:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004c62:	78fa      	ldrb	r2, [r7, #3]
 8004c64:	6879      	ldr	r1, [r7, #4]
 8004c66:	4613      	mov	r3, r2
 8004c68:	011b      	lsls	r3, r3, #4
 8004c6a:	1a9b      	subs	r3, r3, r2
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	440b      	add	r3, r1
 8004c70:	3326      	adds	r3, #38	@ 0x26
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d00b      	beq.n	8004c90 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004c78:	78fa      	ldrb	r2, [r7, #3]
 8004c7a:	6879      	ldr	r1, [r7, #4]
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	011b      	lsls	r3, r3, #4
 8004c80:	1a9b      	subs	r3, r3, r2
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	440b      	add	r3, r1
 8004c86:	3326      	adds	r3, #38	@ 0x26
 8004c88:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	f040 8136 	bne.w	8004efc <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004c90:	78fb      	ldrb	r3, [r7, #3]
 8004c92:	015a      	lsls	r2, r3, #5
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	4413      	add	r3, r2
 8004c98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004ca6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004cae:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004cb0:	78fb      	ldrb	r3, [r7, #3]
 8004cb2:	015a      	lsls	r2, r3, #5
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6013      	str	r3, [r2, #0]
 8004cc2:	e11b      	b.n	8004efc <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004cc4:	78fa      	ldrb	r2, [r7, #3]
 8004cc6:	6879      	ldr	r1, [r7, #4]
 8004cc8:	4613      	mov	r3, r2
 8004cca:	011b      	lsls	r3, r3, #4
 8004ccc:	1a9b      	subs	r3, r3, r2
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	440b      	add	r3, r1
 8004cd2:	334d      	adds	r3, #77	@ 0x4d
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	2b03      	cmp	r3, #3
 8004cd8:	f040 8081 	bne.w	8004dde <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004cdc:	78fa      	ldrb	r2, [r7, #3]
 8004cde:	6879      	ldr	r1, [r7, #4]
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	011b      	lsls	r3, r3, #4
 8004ce4:	1a9b      	subs	r3, r3, r2
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	440b      	add	r3, r1
 8004cea:	334d      	adds	r3, #77	@ 0x4d
 8004cec:	2202      	movs	r2, #2
 8004cee:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004cf0:	78fa      	ldrb	r2, [r7, #3]
 8004cf2:	6879      	ldr	r1, [r7, #4]
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	011b      	lsls	r3, r3, #4
 8004cf8:	1a9b      	subs	r3, r3, r2
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	440b      	add	r3, r1
 8004cfe:	331b      	adds	r3, #27
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	f040 80fa 	bne.w	8004efc <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004d08:	78fa      	ldrb	r2, [r7, #3]
 8004d0a:	6879      	ldr	r1, [r7, #4]
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	011b      	lsls	r3, r3, #4
 8004d10:	1a9b      	subs	r3, r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	440b      	add	r3, r1
 8004d16:	334c      	adds	r3, #76	@ 0x4c
 8004d18:	2202      	movs	r2, #2
 8004d1a:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8004d1c:	78fb      	ldrb	r3, [r7, #3]
 8004d1e:	015a      	lsls	r2, r3, #5
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	4413      	add	r3, r2
 8004d24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	78fa      	ldrb	r2, [r7, #3]
 8004d2c:	0151      	lsls	r1, r2, #5
 8004d2e:	693a      	ldr	r2, [r7, #16]
 8004d30:	440a      	add	r2, r1
 8004d32:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004d36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d3a:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8004d3c:	78fb      	ldrb	r3, [r7, #3]
 8004d3e:	015a      	lsls	r2, r3, #5
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	4413      	add	r3, r2
 8004d44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	78fa      	ldrb	r2, [r7, #3]
 8004d4c:	0151      	lsls	r1, r2, #5
 8004d4e:	693a      	ldr	r2, [r7, #16]
 8004d50:	440a      	add	r2, r1
 8004d52:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004d56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d5a:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8004d5c:	78fb      	ldrb	r3, [r7, #3]
 8004d5e:	015a      	lsls	r2, r3, #5
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	4413      	add	r3, r2
 8004d64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	78fa      	ldrb	r2, [r7, #3]
 8004d6c:	0151      	lsls	r1, r2, #5
 8004d6e:	693a      	ldr	r2, [r7, #16]
 8004d70:	440a      	add	r2, r1
 8004d72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004d76:	f023 0320 	bic.w	r3, r3, #32
 8004d7a:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004d7c:	78fa      	ldrb	r2, [r7, #3]
 8004d7e:	6879      	ldr	r1, [r7, #4]
 8004d80:	4613      	mov	r3, r2
 8004d82:	011b      	lsls	r3, r3, #4
 8004d84:	1a9b      	subs	r3, r3, r2
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	440b      	add	r3, r1
 8004d8a:	3326      	adds	r3, #38	@ 0x26
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00b      	beq.n	8004daa <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004d92:	78fa      	ldrb	r2, [r7, #3]
 8004d94:	6879      	ldr	r1, [r7, #4]
 8004d96:	4613      	mov	r3, r2
 8004d98:	011b      	lsls	r3, r3, #4
 8004d9a:	1a9b      	subs	r3, r3, r2
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	440b      	add	r3, r1
 8004da0:	3326      	adds	r3, #38	@ 0x26
 8004da2:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	f040 80a9 	bne.w	8004efc <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004daa:	78fb      	ldrb	r3, [r7, #3]
 8004dac:	015a      	lsls	r2, r3, #5
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	4413      	add	r3, r2
 8004db2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004dc0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004dc8:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004dca:	78fb      	ldrb	r3, [r7, #3]
 8004dcc:	015a      	lsls	r2, r3, #5
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6013      	str	r3, [r2, #0]
 8004ddc:	e08e      	b.n	8004efc <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004dde:	78fa      	ldrb	r2, [r7, #3]
 8004de0:	6879      	ldr	r1, [r7, #4]
 8004de2:	4613      	mov	r3, r2
 8004de4:	011b      	lsls	r3, r3, #4
 8004de6:	1a9b      	subs	r3, r3, r2
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	440b      	add	r3, r1
 8004dec:	334d      	adds	r3, #77	@ 0x4d
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	2b04      	cmp	r3, #4
 8004df2:	d143      	bne.n	8004e7c <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004df4:	78fa      	ldrb	r2, [r7, #3]
 8004df6:	6879      	ldr	r1, [r7, #4]
 8004df8:	4613      	mov	r3, r2
 8004dfa:	011b      	lsls	r3, r3, #4
 8004dfc:	1a9b      	subs	r3, r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	440b      	add	r3, r1
 8004e02:	334d      	adds	r3, #77	@ 0x4d
 8004e04:	2202      	movs	r2, #2
 8004e06:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004e08:	78fa      	ldrb	r2, [r7, #3]
 8004e0a:	6879      	ldr	r1, [r7, #4]
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	011b      	lsls	r3, r3, #4
 8004e10:	1a9b      	subs	r3, r3, r2
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	440b      	add	r3, r1
 8004e16:	334c      	adds	r3, #76	@ 0x4c
 8004e18:	2202      	movs	r2, #2
 8004e1a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004e1c:	78fa      	ldrb	r2, [r7, #3]
 8004e1e:	6879      	ldr	r1, [r7, #4]
 8004e20:	4613      	mov	r3, r2
 8004e22:	011b      	lsls	r3, r3, #4
 8004e24:	1a9b      	subs	r3, r3, r2
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	440b      	add	r3, r1
 8004e2a:	3326      	adds	r3, #38	@ 0x26
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00a      	beq.n	8004e48 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004e32:	78fa      	ldrb	r2, [r7, #3]
 8004e34:	6879      	ldr	r1, [r7, #4]
 8004e36:	4613      	mov	r3, r2
 8004e38:	011b      	lsls	r3, r3, #4
 8004e3a:	1a9b      	subs	r3, r3, r2
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	440b      	add	r3, r1
 8004e40:	3326      	adds	r3, #38	@ 0x26
 8004e42:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d159      	bne.n	8004efc <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004e48:	78fb      	ldrb	r3, [r7, #3]
 8004e4a:	015a      	lsls	r2, r3, #5
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	4413      	add	r3, r2
 8004e50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004e5e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004e66:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004e68:	78fb      	ldrb	r3, [r7, #3]
 8004e6a:	015a      	lsls	r2, r3, #5
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	4413      	add	r3, r2
 8004e70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e74:	461a      	mov	r2, r3
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6013      	str	r3, [r2, #0]
 8004e7a:	e03f      	b.n	8004efc <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8004e7c:	78fa      	ldrb	r2, [r7, #3]
 8004e7e:	6879      	ldr	r1, [r7, #4]
 8004e80:	4613      	mov	r3, r2
 8004e82:	011b      	lsls	r3, r3, #4
 8004e84:	1a9b      	subs	r3, r3, r2
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	440b      	add	r3, r1
 8004e8a:	334d      	adds	r3, #77	@ 0x4d
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	2b08      	cmp	r3, #8
 8004e90:	d126      	bne.n	8004ee0 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004e92:	78fa      	ldrb	r2, [r7, #3]
 8004e94:	6879      	ldr	r1, [r7, #4]
 8004e96:	4613      	mov	r3, r2
 8004e98:	011b      	lsls	r3, r3, #4
 8004e9a:	1a9b      	subs	r3, r3, r2
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	440b      	add	r3, r1
 8004ea0:	334d      	adds	r3, #77	@ 0x4d
 8004ea2:	2202      	movs	r2, #2
 8004ea4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004ea6:	78fa      	ldrb	r2, [r7, #3]
 8004ea8:	6879      	ldr	r1, [r7, #4]
 8004eaa:	4613      	mov	r3, r2
 8004eac:	011b      	lsls	r3, r3, #4
 8004eae:	1a9b      	subs	r3, r3, r2
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	440b      	add	r3, r1
 8004eb4:	3344      	adds	r3, #68	@ 0x44
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	1c59      	adds	r1, r3, #1
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	011b      	lsls	r3, r3, #4
 8004ec0:	1a9b      	subs	r3, r3, r2
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	4403      	add	r3, r0
 8004ec6:	3344      	adds	r3, #68	@ 0x44
 8004ec8:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8004eca:	78fa      	ldrb	r2, [r7, #3]
 8004ecc:	6879      	ldr	r1, [r7, #4]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	011b      	lsls	r3, r3, #4
 8004ed2:	1a9b      	subs	r3, r3, r2
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	440b      	add	r3, r1
 8004ed8:	334c      	adds	r3, #76	@ 0x4c
 8004eda:	2204      	movs	r2, #4
 8004edc:	701a      	strb	r2, [r3, #0]
 8004ede:	e00d      	b.n	8004efc <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8004ee0:	78fa      	ldrb	r2, [r7, #3]
 8004ee2:	6879      	ldr	r1, [r7, #4]
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	011b      	lsls	r3, r3, #4
 8004ee8:	1a9b      	subs	r3, r3, r2
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	440b      	add	r3, r1
 8004eee:	334d      	adds	r3, #77	@ 0x4d
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	f000 8100 	beq.w	80050f8 <HCD_HC_IN_IRQHandler+0xcca>
 8004ef8:	e000      	b.n	8004efc <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004efa:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004efc:	78fa      	ldrb	r2, [r7, #3]
 8004efe:	6879      	ldr	r1, [r7, #4]
 8004f00:	4613      	mov	r3, r2
 8004f02:	011b      	lsls	r3, r3, #4
 8004f04:	1a9b      	subs	r3, r3, r2
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	440b      	add	r3, r1
 8004f0a:	334c      	adds	r3, #76	@ 0x4c
 8004f0c:	781a      	ldrb	r2, [r3, #0]
 8004f0e:	78fb      	ldrb	r3, [r7, #3]
 8004f10:	4619      	mov	r1, r3
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f006 ff52 	bl	800bdbc <HAL_HCD_HC_NotifyURBChange_Callback>
 8004f18:	e0ef      	b.n	80050fa <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	78fa      	ldrb	r2, [r7, #3]
 8004f20:	4611      	mov	r1, r2
 8004f22:	4618      	mov	r0, r3
 8004f24:	f003 fe41 	bl	8008baa <USB_ReadChInterrupts>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f2e:	2b40      	cmp	r3, #64	@ 0x40
 8004f30:	d12f      	bne.n	8004f92 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004f32:	78fb      	ldrb	r3, [r7, #3]
 8004f34:	015a      	lsls	r2, r3, #5
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	4413      	add	r3, r2
 8004f3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f3e:	461a      	mov	r2, r3
 8004f40:	2340      	movs	r3, #64	@ 0x40
 8004f42:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004f44:	78fa      	ldrb	r2, [r7, #3]
 8004f46:	6879      	ldr	r1, [r7, #4]
 8004f48:	4613      	mov	r3, r2
 8004f4a:	011b      	lsls	r3, r3, #4
 8004f4c:	1a9b      	subs	r3, r3, r2
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	440b      	add	r3, r1
 8004f52:	334d      	adds	r3, #77	@ 0x4d
 8004f54:	2205      	movs	r2, #5
 8004f56:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004f58:	78fa      	ldrb	r2, [r7, #3]
 8004f5a:	6879      	ldr	r1, [r7, #4]
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	011b      	lsls	r3, r3, #4
 8004f60:	1a9b      	subs	r3, r3, r2
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	440b      	add	r3, r1
 8004f66:	331a      	adds	r3, #26
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d109      	bne.n	8004f82 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004f6e:	78fa      	ldrb	r2, [r7, #3]
 8004f70:	6879      	ldr	r1, [r7, #4]
 8004f72:	4613      	mov	r3, r2
 8004f74:	011b      	lsls	r3, r3, #4
 8004f76:	1a9b      	subs	r3, r3, r2
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	440b      	add	r3, r1
 8004f7c:	3344      	adds	r3, #68	@ 0x44
 8004f7e:	2200      	movs	r2, #0
 8004f80:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	78fa      	ldrb	r2, [r7, #3]
 8004f88:	4611      	mov	r1, r2
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f004 fbb7 	bl	80096fe <USB_HC_Halt>
 8004f90:	e0b3      	b.n	80050fa <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	78fa      	ldrb	r2, [r7, #3]
 8004f98:	4611      	mov	r1, r2
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f003 fe05 	bl	8008baa <USB_ReadChInterrupts>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	f003 0310 	and.w	r3, r3, #16
 8004fa6:	2b10      	cmp	r3, #16
 8004fa8:	f040 80a7 	bne.w	80050fa <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004fac:	78fa      	ldrb	r2, [r7, #3]
 8004fae:	6879      	ldr	r1, [r7, #4]
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	011b      	lsls	r3, r3, #4
 8004fb4:	1a9b      	subs	r3, r3, r2
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	440b      	add	r3, r1
 8004fba:	3326      	adds	r3, #38	@ 0x26
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	2b03      	cmp	r3, #3
 8004fc0:	d11b      	bne.n	8004ffa <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004fc2:	78fa      	ldrb	r2, [r7, #3]
 8004fc4:	6879      	ldr	r1, [r7, #4]
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	011b      	lsls	r3, r3, #4
 8004fca:	1a9b      	subs	r3, r3, r2
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	440b      	add	r3, r1
 8004fd0:	3344      	adds	r3, #68	@ 0x44
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8004fd6:	78fa      	ldrb	r2, [r7, #3]
 8004fd8:	6879      	ldr	r1, [r7, #4]
 8004fda:	4613      	mov	r3, r2
 8004fdc:	011b      	lsls	r3, r3, #4
 8004fde:	1a9b      	subs	r3, r3, r2
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	440b      	add	r3, r1
 8004fe4:	334d      	adds	r3, #77	@ 0x4d
 8004fe6:	2204      	movs	r2, #4
 8004fe8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	78fa      	ldrb	r2, [r7, #3]
 8004ff0:	4611      	mov	r1, r2
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f004 fb83 	bl	80096fe <USB_HC_Halt>
 8004ff8:	e03f      	b.n	800507a <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004ffa:	78fa      	ldrb	r2, [r7, #3]
 8004ffc:	6879      	ldr	r1, [r7, #4]
 8004ffe:	4613      	mov	r3, r2
 8005000:	011b      	lsls	r3, r3, #4
 8005002:	1a9b      	subs	r3, r3, r2
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	440b      	add	r3, r1
 8005008:	3326      	adds	r3, #38	@ 0x26
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d00a      	beq.n	8005026 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005010:	78fa      	ldrb	r2, [r7, #3]
 8005012:	6879      	ldr	r1, [r7, #4]
 8005014:	4613      	mov	r3, r2
 8005016:	011b      	lsls	r3, r3, #4
 8005018:	1a9b      	subs	r3, r3, r2
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	440b      	add	r3, r1
 800501e:	3326      	adds	r3, #38	@ 0x26
 8005020:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005022:	2b02      	cmp	r3, #2
 8005024:	d129      	bne.n	800507a <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005026:	78fa      	ldrb	r2, [r7, #3]
 8005028:	6879      	ldr	r1, [r7, #4]
 800502a:	4613      	mov	r3, r2
 800502c:	011b      	lsls	r3, r3, #4
 800502e:	1a9b      	subs	r3, r3, r2
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	440b      	add	r3, r1
 8005034:	3344      	adds	r3, #68	@ 0x44
 8005036:	2200      	movs	r2, #0
 8005038:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	799b      	ldrb	r3, [r3, #6]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00a      	beq.n	8005058 <HCD_HC_IN_IRQHandler+0xc2a>
 8005042:	78fa      	ldrb	r2, [r7, #3]
 8005044:	6879      	ldr	r1, [r7, #4]
 8005046:	4613      	mov	r3, r2
 8005048:	011b      	lsls	r3, r3, #4
 800504a:	1a9b      	subs	r3, r3, r2
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	440b      	add	r3, r1
 8005050:	331b      	adds	r3, #27
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	2b01      	cmp	r3, #1
 8005056:	d110      	bne.n	800507a <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8005058:	78fa      	ldrb	r2, [r7, #3]
 800505a:	6879      	ldr	r1, [r7, #4]
 800505c:	4613      	mov	r3, r2
 800505e:	011b      	lsls	r3, r3, #4
 8005060:	1a9b      	subs	r3, r3, r2
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	440b      	add	r3, r1
 8005066:	334d      	adds	r3, #77	@ 0x4d
 8005068:	2204      	movs	r2, #4
 800506a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	78fa      	ldrb	r2, [r7, #3]
 8005072:	4611      	mov	r1, r2
 8005074:	4618      	mov	r0, r3
 8005076:	f004 fb42 	bl	80096fe <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800507a:	78fa      	ldrb	r2, [r7, #3]
 800507c:	6879      	ldr	r1, [r7, #4]
 800507e:	4613      	mov	r3, r2
 8005080:	011b      	lsls	r3, r3, #4
 8005082:	1a9b      	subs	r3, r3, r2
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	440b      	add	r3, r1
 8005088:	331b      	adds	r3, #27
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	2b01      	cmp	r3, #1
 800508e:	d129      	bne.n	80050e4 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005090:	78fa      	ldrb	r2, [r7, #3]
 8005092:	6879      	ldr	r1, [r7, #4]
 8005094:	4613      	mov	r3, r2
 8005096:	011b      	lsls	r3, r3, #4
 8005098:	1a9b      	subs	r3, r3, r2
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	440b      	add	r3, r1
 800509e:	331b      	adds	r3, #27
 80050a0:	2200      	movs	r2, #0
 80050a2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80050a4:	78fb      	ldrb	r3, [r7, #3]
 80050a6:	015a      	lsls	r2, r3, #5
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	4413      	add	r3, r2
 80050ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	78fa      	ldrb	r2, [r7, #3]
 80050b4:	0151      	lsls	r1, r2, #5
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	440a      	add	r2, r1
 80050ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80050be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050c2:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80050c4:	78fb      	ldrb	r3, [r7, #3]
 80050c6:	015a      	lsls	r2, r3, #5
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	4413      	add	r3, r2
 80050cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	78fa      	ldrb	r2, [r7, #3]
 80050d4:	0151      	lsls	r1, r2, #5
 80050d6:	693a      	ldr	r2, [r7, #16]
 80050d8:	440a      	add	r2, r1
 80050da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80050de:	f043 0320 	orr.w	r3, r3, #32
 80050e2:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80050e4:	78fb      	ldrb	r3, [r7, #3]
 80050e6:	015a      	lsls	r2, r3, #5
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	4413      	add	r3, r2
 80050ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050f0:	461a      	mov	r2, r3
 80050f2:	2310      	movs	r3, #16
 80050f4:	6093      	str	r3, [r2, #8]
 80050f6:	e000      	b.n	80050fa <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80050f8:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80050fa:	3718      	adds	r7, #24
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b086      	sub	sp, #24
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	460b      	mov	r3, r1
 800510a:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	78fa      	ldrb	r2, [r7, #3]
 800511c:	4611      	mov	r1, r2
 800511e:	4618      	mov	r0, r3
 8005120:	f003 fd43 	bl	8008baa <USB_ReadChInterrupts>
 8005124:	4603      	mov	r3, r0
 8005126:	f003 0304 	and.w	r3, r3, #4
 800512a:	2b04      	cmp	r3, #4
 800512c:	d11b      	bne.n	8005166 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800512e:	78fb      	ldrb	r3, [r7, #3]
 8005130:	015a      	lsls	r2, r3, #5
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	4413      	add	r3, r2
 8005136:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800513a:	461a      	mov	r2, r3
 800513c:	2304      	movs	r3, #4
 800513e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8005140:	78fa      	ldrb	r2, [r7, #3]
 8005142:	6879      	ldr	r1, [r7, #4]
 8005144:	4613      	mov	r3, r2
 8005146:	011b      	lsls	r3, r3, #4
 8005148:	1a9b      	subs	r3, r3, r2
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	440b      	add	r3, r1
 800514e:	334d      	adds	r3, #77	@ 0x4d
 8005150:	2207      	movs	r2, #7
 8005152:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	78fa      	ldrb	r2, [r7, #3]
 800515a:	4611      	mov	r1, r2
 800515c:	4618      	mov	r0, r3
 800515e:	f004 face 	bl	80096fe <USB_HC_Halt>
 8005162:	f000 bc89 	b.w	8005a78 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	78fa      	ldrb	r2, [r7, #3]
 800516c:	4611      	mov	r1, r2
 800516e:	4618      	mov	r0, r3
 8005170:	f003 fd1b 	bl	8008baa <USB_ReadChInterrupts>
 8005174:	4603      	mov	r3, r0
 8005176:	f003 0320 	and.w	r3, r3, #32
 800517a:	2b20      	cmp	r3, #32
 800517c:	f040 8082 	bne.w	8005284 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005180:	78fb      	ldrb	r3, [r7, #3]
 8005182:	015a      	lsls	r2, r3, #5
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	4413      	add	r3, r2
 8005188:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800518c:	461a      	mov	r2, r3
 800518e:	2320      	movs	r3, #32
 8005190:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8005192:	78fa      	ldrb	r2, [r7, #3]
 8005194:	6879      	ldr	r1, [r7, #4]
 8005196:	4613      	mov	r3, r2
 8005198:	011b      	lsls	r3, r3, #4
 800519a:	1a9b      	subs	r3, r3, r2
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	440b      	add	r3, r1
 80051a0:	3319      	adds	r3, #25
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d124      	bne.n	80051f2 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80051a8:	78fa      	ldrb	r2, [r7, #3]
 80051aa:	6879      	ldr	r1, [r7, #4]
 80051ac:	4613      	mov	r3, r2
 80051ae:	011b      	lsls	r3, r3, #4
 80051b0:	1a9b      	subs	r3, r3, r2
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	440b      	add	r3, r1
 80051b6:	3319      	adds	r3, #25
 80051b8:	2200      	movs	r2, #0
 80051ba:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80051bc:	78fa      	ldrb	r2, [r7, #3]
 80051be:	6879      	ldr	r1, [r7, #4]
 80051c0:	4613      	mov	r3, r2
 80051c2:	011b      	lsls	r3, r3, #4
 80051c4:	1a9b      	subs	r3, r3, r2
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	440b      	add	r3, r1
 80051ca:	334c      	adds	r3, #76	@ 0x4c
 80051cc:	2202      	movs	r2, #2
 80051ce:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80051d0:	78fa      	ldrb	r2, [r7, #3]
 80051d2:	6879      	ldr	r1, [r7, #4]
 80051d4:	4613      	mov	r3, r2
 80051d6:	011b      	lsls	r3, r3, #4
 80051d8:	1a9b      	subs	r3, r3, r2
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	440b      	add	r3, r1
 80051de:	334d      	adds	r3, #77	@ 0x4d
 80051e0:	2203      	movs	r2, #3
 80051e2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	78fa      	ldrb	r2, [r7, #3]
 80051ea:	4611      	mov	r1, r2
 80051ec:	4618      	mov	r0, r3
 80051ee:	f004 fa86 	bl	80096fe <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80051f2:	78fa      	ldrb	r2, [r7, #3]
 80051f4:	6879      	ldr	r1, [r7, #4]
 80051f6:	4613      	mov	r3, r2
 80051f8:	011b      	lsls	r3, r3, #4
 80051fa:	1a9b      	subs	r3, r3, r2
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	440b      	add	r3, r1
 8005200:	331a      	adds	r3, #26
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	2b01      	cmp	r3, #1
 8005206:	f040 8437 	bne.w	8005a78 <HCD_HC_OUT_IRQHandler+0x978>
 800520a:	78fa      	ldrb	r2, [r7, #3]
 800520c:	6879      	ldr	r1, [r7, #4]
 800520e:	4613      	mov	r3, r2
 8005210:	011b      	lsls	r3, r3, #4
 8005212:	1a9b      	subs	r3, r3, r2
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	440b      	add	r3, r1
 8005218:	331b      	adds	r3, #27
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	2b00      	cmp	r3, #0
 800521e:	f040 842b 	bne.w	8005a78 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8005222:	78fa      	ldrb	r2, [r7, #3]
 8005224:	6879      	ldr	r1, [r7, #4]
 8005226:	4613      	mov	r3, r2
 8005228:	011b      	lsls	r3, r3, #4
 800522a:	1a9b      	subs	r3, r3, r2
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	440b      	add	r3, r1
 8005230:	3326      	adds	r3, #38	@ 0x26
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	2b01      	cmp	r3, #1
 8005236:	d009      	beq.n	800524c <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8005238:	78fa      	ldrb	r2, [r7, #3]
 800523a:	6879      	ldr	r1, [r7, #4]
 800523c:	4613      	mov	r3, r2
 800523e:	011b      	lsls	r3, r3, #4
 8005240:	1a9b      	subs	r3, r3, r2
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	440b      	add	r3, r1
 8005246:	331b      	adds	r3, #27
 8005248:	2201      	movs	r2, #1
 800524a:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 800524c:	78fa      	ldrb	r2, [r7, #3]
 800524e:	6879      	ldr	r1, [r7, #4]
 8005250:	4613      	mov	r3, r2
 8005252:	011b      	lsls	r3, r3, #4
 8005254:	1a9b      	subs	r3, r3, r2
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	440b      	add	r3, r1
 800525a:	334d      	adds	r3, #77	@ 0x4d
 800525c:	2203      	movs	r2, #3
 800525e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	78fa      	ldrb	r2, [r7, #3]
 8005266:	4611      	mov	r1, r2
 8005268:	4618      	mov	r0, r3
 800526a:	f004 fa48 	bl	80096fe <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800526e:	78fa      	ldrb	r2, [r7, #3]
 8005270:	6879      	ldr	r1, [r7, #4]
 8005272:	4613      	mov	r3, r2
 8005274:	011b      	lsls	r3, r3, #4
 8005276:	1a9b      	subs	r3, r3, r2
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	440b      	add	r3, r1
 800527c:	3344      	adds	r3, #68	@ 0x44
 800527e:	2200      	movs	r2, #0
 8005280:	601a      	str	r2, [r3, #0]
 8005282:	e3f9      	b.n	8005a78 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	78fa      	ldrb	r2, [r7, #3]
 800528a:	4611      	mov	r1, r2
 800528c:	4618      	mov	r0, r3
 800528e:	f003 fc8c 	bl	8008baa <USB_ReadChInterrupts>
 8005292:	4603      	mov	r3, r0
 8005294:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005298:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800529c:	d111      	bne.n	80052c2 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800529e:	78fb      	ldrb	r3, [r7, #3]
 80052a0:	015a      	lsls	r2, r3, #5
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	4413      	add	r3, r2
 80052a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052aa:	461a      	mov	r2, r3
 80052ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80052b0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	78fa      	ldrb	r2, [r7, #3]
 80052b8:	4611      	mov	r1, r2
 80052ba:	4618      	mov	r0, r3
 80052bc:	f004 fa1f 	bl	80096fe <USB_HC_Halt>
 80052c0:	e3da      	b.n	8005a78 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	78fa      	ldrb	r2, [r7, #3]
 80052c8:	4611      	mov	r1, r2
 80052ca:	4618      	mov	r0, r3
 80052cc:	f003 fc6d 	bl	8008baa <USB_ReadChInterrupts>
 80052d0:	4603      	mov	r3, r0
 80052d2:	f003 0301 	and.w	r3, r3, #1
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d168      	bne.n	80053ac <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80052da:	78fa      	ldrb	r2, [r7, #3]
 80052dc:	6879      	ldr	r1, [r7, #4]
 80052de:	4613      	mov	r3, r2
 80052e0:	011b      	lsls	r3, r3, #4
 80052e2:	1a9b      	subs	r3, r3, r2
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	440b      	add	r3, r1
 80052e8:	3344      	adds	r3, #68	@ 0x44
 80052ea:	2200      	movs	r2, #0
 80052ec:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	78fa      	ldrb	r2, [r7, #3]
 80052f4:	4611      	mov	r1, r2
 80052f6:	4618      	mov	r0, r3
 80052f8:	f003 fc57 	bl	8008baa <USB_ReadChInterrupts>
 80052fc:	4603      	mov	r3, r0
 80052fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005302:	2b40      	cmp	r3, #64	@ 0x40
 8005304:	d112      	bne.n	800532c <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8005306:	78fa      	ldrb	r2, [r7, #3]
 8005308:	6879      	ldr	r1, [r7, #4]
 800530a:	4613      	mov	r3, r2
 800530c:	011b      	lsls	r3, r3, #4
 800530e:	1a9b      	subs	r3, r3, r2
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	440b      	add	r3, r1
 8005314:	3319      	adds	r3, #25
 8005316:	2201      	movs	r2, #1
 8005318:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800531a:	78fb      	ldrb	r3, [r7, #3]
 800531c:	015a      	lsls	r2, r3, #5
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	4413      	add	r3, r2
 8005322:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005326:	461a      	mov	r2, r3
 8005328:	2340      	movs	r3, #64	@ 0x40
 800532a:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 800532c:	78fa      	ldrb	r2, [r7, #3]
 800532e:	6879      	ldr	r1, [r7, #4]
 8005330:	4613      	mov	r3, r2
 8005332:	011b      	lsls	r3, r3, #4
 8005334:	1a9b      	subs	r3, r3, r2
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	440b      	add	r3, r1
 800533a:	331b      	adds	r3, #27
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d019      	beq.n	8005376 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005342:	78fa      	ldrb	r2, [r7, #3]
 8005344:	6879      	ldr	r1, [r7, #4]
 8005346:	4613      	mov	r3, r2
 8005348:	011b      	lsls	r3, r3, #4
 800534a:	1a9b      	subs	r3, r3, r2
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	440b      	add	r3, r1
 8005350:	331b      	adds	r3, #27
 8005352:	2200      	movs	r2, #0
 8005354:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005356:	78fb      	ldrb	r3, [r7, #3]
 8005358:	015a      	lsls	r2, r3, #5
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	4413      	add	r3, r2
 800535e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	78fa      	ldrb	r2, [r7, #3]
 8005366:	0151      	lsls	r1, r2, #5
 8005368:	693a      	ldr	r2, [r7, #16]
 800536a:	440a      	add	r2, r1
 800536c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005370:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005374:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8005376:	78fb      	ldrb	r3, [r7, #3]
 8005378:	015a      	lsls	r2, r3, #5
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	4413      	add	r3, r2
 800537e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005382:	461a      	mov	r2, r3
 8005384:	2301      	movs	r3, #1
 8005386:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8005388:	78fa      	ldrb	r2, [r7, #3]
 800538a:	6879      	ldr	r1, [r7, #4]
 800538c:	4613      	mov	r3, r2
 800538e:	011b      	lsls	r3, r3, #4
 8005390:	1a9b      	subs	r3, r3, r2
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	440b      	add	r3, r1
 8005396:	334d      	adds	r3, #77	@ 0x4d
 8005398:	2201      	movs	r2, #1
 800539a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	78fa      	ldrb	r2, [r7, #3]
 80053a2:	4611      	mov	r1, r2
 80053a4:	4618      	mov	r0, r3
 80053a6:	f004 f9aa 	bl	80096fe <USB_HC_Halt>
 80053aa:	e365      	b.n	8005a78 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	78fa      	ldrb	r2, [r7, #3]
 80053b2:	4611      	mov	r1, r2
 80053b4:	4618      	mov	r0, r3
 80053b6:	f003 fbf8 	bl	8008baa <USB_ReadChInterrupts>
 80053ba:	4603      	mov	r3, r0
 80053bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053c0:	2b40      	cmp	r3, #64	@ 0x40
 80053c2:	d139      	bne.n	8005438 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80053c4:	78fa      	ldrb	r2, [r7, #3]
 80053c6:	6879      	ldr	r1, [r7, #4]
 80053c8:	4613      	mov	r3, r2
 80053ca:	011b      	lsls	r3, r3, #4
 80053cc:	1a9b      	subs	r3, r3, r2
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	440b      	add	r3, r1
 80053d2:	334d      	adds	r3, #77	@ 0x4d
 80053d4:	2205      	movs	r2, #5
 80053d6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80053d8:	78fa      	ldrb	r2, [r7, #3]
 80053da:	6879      	ldr	r1, [r7, #4]
 80053dc:	4613      	mov	r3, r2
 80053de:	011b      	lsls	r3, r3, #4
 80053e0:	1a9b      	subs	r3, r3, r2
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	440b      	add	r3, r1
 80053e6:	331a      	adds	r3, #26
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d109      	bne.n	8005402 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80053ee:	78fa      	ldrb	r2, [r7, #3]
 80053f0:	6879      	ldr	r1, [r7, #4]
 80053f2:	4613      	mov	r3, r2
 80053f4:	011b      	lsls	r3, r3, #4
 80053f6:	1a9b      	subs	r3, r3, r2
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	440b      	add	r3, r1
 80053fc:	3319      	adds	r3, #25
 80053fe:	2201      	movs	r2, #1
 8005400:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8005402:	78fa      	ldrb	r2, [r7, #3]
 8005404:	6879      	ldr	r1, [r7, #4]
 8005406:	4613      	mov	r3, r2
 8005408:	011b      	lsls	r3, r3, #4
 800540a:	1a9b      	subs	r3, r3, r2
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	440b      	add	r3, r1
 8005410:	3344      	adds	r3, #68	@ 0x44
 8005412:	2200      	movs	r2, #0
 8005414:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	78fa      	ldrb	r2, [r7, #3]
 800541c:	4611      	mov	r1, r2
 800541e:	4618      	mov	r0, r3
 8005420:	f004 f96d 	bl	80096fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005424:	78fb      	ldrb	r3, [r7, #3]
 8005426:	015a      	lsls	r2, r3, #5
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	4413      	add	r3, r2
 800542c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005430:	461a      	mov	r2, r3
 8005432:	2340      	movs	r3, #64	@ 0x40
 8005434:	6093      	str	r3, [r2, #8]
 8005436:	e31f      	b.n	8005a78 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	78fa      	ldrb	r2, [r7, #3]
 800543e:	4611      	mov	r1, r2
 8005440:	4618      	mov	r0, r3
 8005442:	f003 fbb2 	bl	8008baa <USB_ReadChInterrupts>
 8005446:	4603      	mov	r3, r0
 8005448:	f003 0308 	and.w	r3, r3, #8
 800544c:	2b08      	cmp	r3, #8
 800544e:	d11a      	bne.n	8005486 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8005450:	78fb      	ldrb	r3, [r7, #3]
 8005452:	015a      	lsls	r2, r3, #5
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	4413      	add	r3, r2
 8005458:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800545c:	461a      	mov	r2, r3
 800545e:	2308      	movs	r3, #8
 8005460:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8005462:	78fa      	ldrb	r2, [r7, #3]
 8005464:	6879      	ldr	r1, [r7, #4]
 8005466:	4613      	mov	r3, r2
 8005468:	011b      	lsls	r3, r3, #4
 800546a:	1a9b      	subs	r3, r3, r2
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	440b      	add	r3, r1
 8005470:	334d      	adds	r3, #77	@ 0x4d
 8005472:	2206      	movs	r2, #6
 8005474:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	78fa      	ldrb	r2, [r7, #3]
 800547c:	4611      	mov	r1, r2
 800547e:	4618      	mov	r0, r3
 8005480:	f004 f93d 	bl	80096fe <USB_HC_Halt>
 8005484:	e2f8      	b.n	8005a78 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	78fa      	ldrb	r2, [r7, #3]
 800548c:	4611      	mov	r1, r2
 800548e:	4618      	mov	r0, r3
 8005490:	f003 fb8b 	bl	8008baa <USB_ReadChInterrupts>
 8005494:	4603      	mov	r3, r0
 8005496:	f003 0310 	and.w	r3, r3, #16
 800549a:	2b10      	cmp	r3, #16
 800549c:	d144      	bne.n	8005528 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800549e:	78fa      	ldrb	r2, [r7, #3]
 80054a0:	6879      	ldr	r1, [r7, #4]
 80054a2:	4613      	mov	r3, r2
 80054a4:	011b      	lsls	r3, r3, #4
 80054a6:	1a9b      	subs	r3, r3, r2
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	440b      	add	r3, r1
 80054ac:	3344      	adds	r3, #68	@ 0x44
 80054ae:	2200      	movs	r2, #0
 80054b0:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80054b2:	78fa      	ldrb	r2, [r7, #3]
 80054b4:	6879      	ldr	r1, [r7, #4]
 80054b6:	4613      	mov	r3, r2
 80054b8:	011b      	lsls	r3, r3, #4
 80054ba:	1a9b      	subs	r3, r3, r2
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	440b      	add	r3, r1
 80054c0:	334d      	adds	r3, #77	@ 0x4d
 80054c2:	2204      	movs	r2, #4
 80054c4:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80054c6:	78fa      	ldrb	r2, [r7, #3]
 80054c8:	6879      	ldr	r1, [r7, #4]
 80054ca:	4613      	mov	r3, r2
 80054cc:	011b      	lsls	r3, r3, #4
 80054ce:	1a9b      	subs	r3, r3, r2
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	440b      	add	r3, r1
 80054d4:	3319      	adds	r3, #25
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d114      	bne.n	8005506 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80054dc:	78fa      	ldrb	r2, [r7, #3]
 80054de:	6879      	ldr	r1, [r7, #4]
 80054e0:	4613      	mov	r3, r2
 80054e2:	011b      	lsls	r3, r3, #4
 80054e4:	1a9b      	subs	r3, r3, r2
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	440b      	add	r3, r1
 80054ea:	3318      	adds	r3, #24
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d109      	bne.n	8005506 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80054f2:	78fa      	ldrb	r2, [r7, #3]
 80054f4:	6879      	ldr	r1, [r7, #4]
 80054f6:	4613      	mov	r3, r2
 80054f8:	011b      	lsls	r3, r3, #4
 80054fa:	1a9b      	subs	r3, r3, r2
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	440b      	add	r3, r1
 8005500:	3319      	adds	r3, #25
 8005502:	2201      	movs	r2, #1
 8005504:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	78fa      	ldrb	r2, [r7, #3]
 800550c:	4611      	mov	r1, r2
 800550e:	4618      	mov	r0, r3
 8005510:	f004 f8f5 	bl	80096fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005514:	78fb      	ldrb	r3, [r7, #3]
 8005516:	015a      	lsls	r2, r3, #5
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	4413      	add	r3, r2
 800551c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005520:	461a      	mov	r2, r3
 8005522:	2310      	movs	r3, #16
 8005524:	6093      	str	r3, [r2, #8]
 8005526:	e2a7      	b.n	8005a78 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	78fa      	ldrb	r2, [r7, #3]
 800552e:	4611      	mov	r1, r2
 8005530:	4618      	mov	r0, r3
 8005532:	f003 fb3a 	bl	8008baa <USB_ReadChInterrupts>
 8005536:	4603      	mov	r3, r0
 8005538:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800553c:	2b80      	cmp	r3, #128	@ 0x80
 800553e:	f040 8083 	bne.w	8005648 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	799b      	ldrb	r3, [r3, #6]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d111      	bne.n	800556e <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800554a:	78fa      	ldrb	r2, [r7, #3]
 800554c:	6879      	ldr	r1, [r7, #4]
 800554e:	4613      	mov	r3, r2
 8005550:	011b      	lsls	r3, r3, #4
 8005552:	1a9b      	subs	r3, r3, r2
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	440b      	add	r3, r1
 8005558:	334d      	adds	r3, #77	@ 0x4d
 800555a:	2207      	movs	r2, #7
 800555c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	78fa      	ldrb	r2, [r7, #3]
 8005564:	4611      	mov	r1, r2
 8005566:	4618      	mov	r0, r3
 8005568:	f004 f8c9 	bl	80096fe <USB_HC_Halt>
 800556c:	e062      	b.n	8005634 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800556e:	78fa      	ldrb	r2, [r7, #3]
 8005570:	6879      	ldr	r1, [r7, #4]
 8005572:	4613      	mov	r3, r2
 8005574:	011b      	lsls	r3, r3, #4
 8005576:	1a9b      	subs	r3, r3, r2
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	440b      	add	r3, r1
 800557c:	3344      	adds	r3, #68	@ 0x44
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	1c59      	adds	r1, r3, #1
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	4613      	mov	r3, r2
 8005586:	011b      	lsls	r3, r3, #4
 8005588:	1a9b      	subs	r3, r3, r2
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	4403      	add	r3, r0
 800558e:	3344      	adds	r3, #68	@ 0x44
 8005590:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005592:	78fa      	ldrb	r2, [r7, #3]
 8005594:	6879      	ldr	r1, [r7, #4]
 8005596:	4613      	mov	r3, r2
 8005598:	011b      	lsls	r3, r3, #4
 800559a:	1a9b      	subs	r3, r3, r2
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	440b      	add	r3, r1
 80055a0:	3344      	adds	r3, #68	@ 0x44
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2b02      	cmp	r3, #2
 80055a6:	d922      	bls.n	80055ee <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80055a8:	78fa      	ldrb	r2, [r7, #3]
 80055aa:	6879      	ldr	r1, [r7, #4]
 80055ac:	4613      	mov	r3, r2
 80055ae:	011b      	lsls	r3, r3, #4
 80055b0:	1a9b      	subs	r3, r3, r2
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	440b      	add	r3, r1
 80055b6:	3344      	adds	r3, #68	@ 0x44
 80055b8:	2200      	movs	r2, #0
 80055ba:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80055bc:	78fa      	ldrb	r2, [r7, #3]
 80055be:	6879      	ldr	r1, [r7, #4]
 80055c0:	4613      	mov	r3, r2
 80055c2:	011b      	lsls	r3, r3, #4
 80055c4:	1a9b      	subs	r3, r3, r2
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	440b      	add	r3, r1
 80055ca:	334c      	adds	r3, #76	@ 0x4c
 80055cc:	2204      	movs	r2, #4
 80055ce:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80055d0:	78fa      	ldrb	r2, [r7, #3]
 80055d2:	6879      	ldr	r1, [r7, #4]
 80055d4:	4613      	mov	r3, r2
 80055d6:	011b      	lsls	r3, r3, #4
 80055d8:	1a9b      	subs	r3, r3, r2
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	440b      	add	r3, r1
 80055de:	334c      	adds	r3, #76	@ 0x4c
 80055e0:	781a      	ldrb	r2, [r3, #0]
 80055e2:	78fb      	ldrb	r3, [r7, #3]
 80055e4:	4619      	mov	r1, r3
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f006 fbe8 	bl	800bdbc <HAL_HCD_HC_NotifyURBChange_Callback>
 80055ec:	e022      	b.n	8005634 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80055ee:	78fa      	ldrb	r2, [r7, #3]
 80055f0:	6879      	ldr	r1, [r7, #4]
 80055f2:	4613      	mov	r3, r2
 80055f4:	011b      	lsls	r3, r3, #4
 80055f6:	1a9b      	subs	r3, r3, r2
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	440b      	add	r3, r1
 80055fc:	334c      	adds	r3, #76	@ 0x4c
 80055fe:	2202      	movs	r2, #2
 8005600:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005602:	78fb      	ldrb	r3, [r7, #3]
 8005604:	015a      	lsls	r2, r3, #5
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	4413      	add	r3, r2
 800560a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005618:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005620:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005622:	78fb      	ldrb	r3, [r7, #3]
 8005624:	015a      	lsls	r2, r3, #5
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	4413      	add	r3, r2
 800562a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800562e:	461a      	mov	r2, r3
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8005634:	78fb      	ldrb	r3, [r7, #3]
 8005636:	015a      	lsls	r2, r3, #5
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	4413      	add	r3, r2
 800563c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005640:	461a      	mov	r2, r3
 8005642:	2380      	movs	r3, #128	@ 0x80
 8005644:	6093      	str	r3, [r2, #8]
 8005646:	e217      	b.n	8005a78 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	78fa      	ldrb	r2, [r7, #3]
 800564e:	4611      	mov	r1, r2
 8005650:	4618      	mov	r0, r3
 8005652:	f003 faaa 	bl	8008baa <USB_ReadChInterrupts>
 8005656:	4603      	mov	r3, r0
 8005658:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800565c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005660:	d11b      	bne.n	800569a <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8005662:	78fa      	ldrb	r2, [r7, #3]
 8005664:	6879      	ldr	r1, [r7, #4]
 8005666:	4613      	mov	r3, r2
 8005668:	011b      	lsls	r3, r3, #4
 800566a:	1a9b      	subs	r3, r3, r2
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	440b      	add	r3, r1
 8005670:	334d      	adds	r3, #77	@ 0x4d
 8005672:	2209      	movs	r2, #9
 8005674:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	78fa      	ldrb	r2, [r7, #3]
 800567c:	4611      	mov	r1, r2
 800567e:	4618      	mov	r0, r3
 8005680:	f004 f83d 	bl	80096fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8005684:	78fb      	ldrb	r3, [r7, #3]
 8005686:	015a      	lsls	r2, r3, #5
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	4413      	add	r3, r2
 800568c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005690:	461a      	mov	r2, r3
 8005692:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005696:	6093      	str	r3, [r2, #8]
 8005698:	e1ee      	b.n	8005a78 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	78fa      	ldrb	r2, [r7, #3]
 80056a0:	4611      	mov	r1, r2
 80056a2:	4618      	mov	r0, r3
 80056a4:	f003 fa81 	bl	8008baa <USB_ReadChInterrupts>
 80056a8:	4603      	mov	r3, r0
 80056aa:	f003 0302 	and.w	r3, r3, #2
 80056ae:	2b02      	cmp	r3, #2
 80056b0:	f040 81df 	bne.w	8005a72 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80056b4:	78fb      	ldrb	r3, [r7, #3]
 80056b6:	015a      	lsls	r2, r3, #5
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	4413      	add	r3, r2
 80056bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056c0:	461a      	mov	r2, r3
 80056c2:	2302      	movs	r3, #2
 80056c4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80056c6:	78fa      	ldrb	r2, [r7, #3]
 80056c8:	6879      	ldr	r1, [r7, #4]
 80056ca:	4613      	mov	r3, r2
 80056cc:	011b      	lsls	r3, r3, #4
 80056ce:	1a9b      	subs	r3, r3, r2
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	440b      	add	r3, r1
 80056d4:	334d      	adds	r3, #77	@ 0x4d
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	2b01      	cmp	r3, #1
 80056da:	f040 8093 	bne.w	8005804 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80056de:	78fa      	ldrb	r2, [r7, #3]
 80056e0:	6879      	ldr	r1, [r7, #4]
 80056e2:	4613      	mov	r3, r2
 80056e4:	011b      	lsls	r3, r3, #4
 80056e6:	1a9b      	subs	r3, r3, r2
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	440b      	add	r3, r1
 80056ec:	334d      	adds	r3, #77	@ 0x4d
 80056ee:	2202      	movs	r2, #2
 80056f0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80056f2:	78fa      	ldrb	r2, [r7, #3]
 80056f4:	6879      	ldr	r1, [r7, #4]
 80056f6:	4613      	mov	r3, r2
 80056f8:	011b      	lsls	r3, r3, #4
 80056fa:	1a9b      	subs	r3, r3, r2
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	440b      	add	r3, r1
 8005700:	334c      	adds	r3, #76	@ 0x4c
 8005702:	2201      	movs	r2, #1
 8005704:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005706:	78fa      	ldrb	r2, [r7, #3]
 8005708:	6879      	ldr	r1, [r7, #4]
 800570a:	4613      	mov	r3, r2
 800570c:	011b      	lsls	r3, r3, #4
 800570e:	1a9b      	subs	r3, r3, r2
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	440b      	add	r3, r1
 8005714:	3326      	adds	r3, #38	@ 0x26
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	2b02      	cmp	r3, #2
 800571a:	d00b      	beq.n	8005734 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 800571c:	78fa      	ldrb	r2, [r7, #3]
 800571e:	6879      	ldr	r1, [r7, #4]
 8005720:	4613      	mov	r3, r2
 8005722:	011b      	lsls	r3, r3, #4
 8005724:	1a9b      	subs	r3, r3, r2
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	440b      	add	r3, r1
 800572a:	3326      	adds	r3, #38	@ 0x26
 800572c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800572e:	2b03      	cmp	r3, #3
 8005730:	f040 8190 	bne.w	8005a54 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	799b      	ldrb	r3, [r3, #6]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d115      	bne.n	8005768 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800573c:	78fa      	ldrb	r2, [r7, #3]
 800573e:	6879      	ldr	r1, [r7, #4]
 8005740:	4613      	mov	r3, r2
 8005742:	011b      	lsls	r3, r3, #4
 8005744:	1a9b      	subs	r3, r3, r2
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	440b      	add	r3, r1
 800574a:	333d      	adds	r3, #61	@ 0x3d
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	78fa      	ldrb	r2, [r7, #3]
 8005750:	f083 0301 	eor.w	r3, r3, #1
 8005754:	b2d8      	uxtb	r0, r3
 8005756:	6879      	ldr	r1, [r7, #4]
 8005758:	4613      	mov	r3, r2
 800575a:	011b      	lsls	r3, r3, #4
 800575c:	1a9b      	subs	r3, r3, r2
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	440b      	add	r3, r1
 8005762:	333d      	adds	r3, #61	@ 0x3d
 8005764:	4602      	mov	r2, r0
 8005766:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	799b      	ldrb	r3, [r3, #6]
 800576c:	2b01      	cmp	r3, #1
 800576e:	f040 8171 	bne.w	8005a54 <HCD_HC_OUT_IRQHandler+0x954>
 8005772:	78fa      	ldrb	r2, [r7, #3]
 8005774:	6879      	ldr	r1, [r7, #4]
 8005776:	4613      	mov	r3, r2
 8005778:	011b      	lsls	r3, r3, #4
 800577a:	1a9b      	subs	r3, r3, r2
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	440b      	add	r3, r1
 8005780:	3334      	adds	r3, #52	@ 0x34
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	f000 8165 	beq.w	8005a54 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800578a:	78fa      	ldrb	r2, [r7, #3]
 800578c:	6879      	ldr	r1, [r7, #4]
 800578e:	4613      	mov	r3, r2
 8005790:	011b      	lsls	r3, r3, #4
 8005792:	1a9b      	subs	r3, r3, r2
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	440b      	add	r3, r1
 8005798:	3334      	adds	r3, #52	@ 0x34
 800579a:	6819      	ldr	r1, [r3, #0]
 800579c:	78fa      	ldrb	r2, [r7, #3]
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	4613      	mov	r3, r2
 80057a2:	011b      	lsls	r3, r3, #4
 80057a4:	1a9b      	subs	r3, r3, r2
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	4403      	add	r3, r0
 80057aa:	3328      	adds	r3, #40	@ 0x28
 80057ac:	881b      	ldrh	r3, [r3, #0]
 80057ae:	440b      	add	r3, r1
 80057b0:	1e59      	subs	r1, r3, #1
 80057b2:	78fa      	ldrb	r2, [r7, #3]
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	4613      	mov	r3, r2
 80057b8:	011b      	lsls	r3, r3, #4
 80057ba:	1a9b      	subs	r3, r3, r2
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	4403      	add	r3, r0
 80057c0:	3328      	adds	r3, #40	@ 0x28
 80057c2:	881b      	ldrh	r3, [r3, #0]
 80057c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80057c8:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	f003 0301 	and.w	r3, r3, #1
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	f000 813f 	beq.w	8005a54 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80057d6:	78fa      	ldrb	r2, [r7, #3]
 80057d8:	6879      	ldr	r1, [r7, #4]
 80057da:	4613      	mov	r3, r2
 80057dc:	011b      	lsls	r3, r3, #4
 80057de:	1a9b      	subs	r3, r3, r2
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	440b      	add	r3, r1
 80057e4:	333d      	adds	r3, #61	@ 0x3d
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	78fa      	ldrb	r2, [r7, #3]
 80057ea:	f083 0301 	eor.w	r3, r3, #1
 80057ee:	b2d8      	uxtb	r0, r3
 80057f0:	6879      	ldr	r1, [r7, #4]
 80057f2:	4613      	mov	r3, r2
 80057f4:	011b      	lsls	r3, r3, #4
 80057f6:	1a9b      	subs	r3, r3, r2
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	440b      	add	r3, r1
 80057fc:	333d      	adds	r3, #61	@ 0x3d
 80057fe:	4602      	mov	r2, r0
 8005800:	701a      	strb	r2, [r3, #0]
 8005802:	e127      	b.n	8005a54 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8005804:	78fa      	ldrb	r2, [r7, #3]
 8005806:	6879      	ldr	r1, [r7, #4]
 8005808:	4613      	mov	r3, r2
 800580a:	011b      	lsls	r3, r3, #4
 800580c:	1a9b      	subs	r3, r3, r2
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	440b      	add	r3, r1
 8005812:	334d      	adds	r3, #77	@ 0x4d
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	2b03      	cmp	r3, #3
 8005818:	d120      	bne.n	800585c <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800581a:	78fa      	ldrb	r2, [r7, #3]
 800581c:	6879      	ldr	r1, [r7, #4]
 800581e:	4613      	mov	r3, r2
 8005820:	011b      	lsls	r3, r3, #4
 8005822:	1a9b      	subs	r3, r3, r2
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	440b      	add	r3, r1
 8005828:	334d      	adds	r3, #77	@ 0x4d
 800582a:	2202      	movs	r2, #2
 800582c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800582e:	78fa      	ldrb	r2, [r7, #3]
 8005830:	6879      	ldr	r1, [r7, #4]
 8005832:	4613      	mov	r3, r2
 8005834:	011b      	lsls	r3, r3, #4
 8005836:	1a9b      	subs	r3, r3, r2
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	440b      	add	r3, r1
 800583c:	331b      	adds	r3, #27
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	2b01      	cmp	r3, #1
 8005842:	f040 8107 	bne.w	8005a54 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005846:	78fa      	ldrb	r2, [r7, #3]
 8005848:	6879      	ldr	r1, [r7, #4]
 800584a:	4613      	mov	r3, r2
 800584c:	011b      	lsls	r3, r3, #4
 800584e:	1a9b      	subs	r3, r3, r2
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	440b      	add	r3, r1
 8005854:	334c      	adds	r3, #76	@ 0x4c
 8005856:	2202      	movs	r2, #2
 8005858:	701a      	strb	r2, [r3, #0]
 800585a:	e0fb      	b.n	8005a54 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800585c:	78fa      	ldrb	r2, [r7, #3]
 800585e:	6879      	ldr	r1, [r7, #4]
 8005860:	4613      	mov	r3, r2
 8005862:	011b      	lsls	r3, r3, #4
 8005864:	1a9b      	subs	r3, r3, r2
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	440b      	add	r3, r1
 800586a:	334d      	adds	r3, #77	@ 0x4d
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	2b04      	cmp	r3, #4
 8005870:	d13a      	bne.n	80058e8 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005872:	78fa      	ldrb	r2, [r7, #3]
 8005874:	6879      	ldr	r1, [r7, #4]
 8005876:	4613      	mov	r3, r2
 8005878:	011b      	lsls	r3, r3, #4
 800587a:	1a9b      	subs	r3, r3, r2
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	440b      	add	r3, r1
 8005880:	334d      	adds	r3, #77	@ 0x4d
 8005882:	2202      	movs	r2, #2
 8005884:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005886:	78fa      	ldrb	r2, [r7, #3]
 8005888:	6879      	ldr	r1, [r7, #4]
 800588a:	4613      	mov	r3, r2
 800588c:	011b      	lsls	r3, r3, #4
 800588e:	1a9b      	subs	r3, r3, r2
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	440b      	add	r3, r1
 8005894:	334c      	adds	r3, #76	@ 0x4c
 8005896:	2202      	movs	r2, #2
 8005898:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800589a:	78fa      	ldrb	r2, [r7, #3]
 800589c:	6879      	ldr	r1, [r7, #4]
 800589e:	4613      	mov	r3, r2
 80058a0:	011b      	lsls	r3, r3, #4
 80058a2:	1a9b      	subs	r3, r3, r2
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	440b      	add	r3, r1
 80058a8:	331b      	adds	r3, #27
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	f040 80d1 	bne.w	8005a54 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80058b2:	78fa      	ldrb	r2, [r7, #3]
 80058b4:	6879      	ldr	r1, [r7, #4]
 80058b6:	4613      	mov	r3, r2
 80058b8:	011b      	lsls	r3, r3, #4
 80058ba:	1a9b      	subs	r3, r3, r2
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	440b      	add	r3, r1
 80058c0:	331b      	adds	r3, #27
 80058c2:	2200      	movs	r2, #0
 80058c4:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80058c6:	78fb      	ldrb	r3, [r7, #3]
 80058c8:	015a      	lsls	r2, r3, #5
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	4413      	add	r3, r2
 80058ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	78fa      	ldrb	r2, [r7, #3]
 80058d6:	0151      	lsls	r1, r2, #5
 80058d8:	693a      	ldr	r2, [r7, #16]
 80058da:	440a      	add	r2, r1
 80058dc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80058e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058e4:	6053      	str	r3, [r2, #4]
 80058e6:	e0b5      	b.n	8005a54 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80058e8:	78fa      	ldrb	r2, [r7, #3]
 80058ea:	6879      	ldr	r1, [r7, #4]
 80058ec:	4613      	mov	r3, r2
 80058ee:	011b      	lsls	r3, r3, #4
 80058f0:	1a9b      	subs	r3, r3, r2
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	440b      	add	r3, r1
 80058f6:	334d      	adds	r3, #77	@ 0x4d
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	2b05      	cmp	r3, #5
 80058fc:	d114      	bne.n	8005928 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80058fe:	78fa      	ldrb	r2, [r7, #3]
 8005900:	6879      	ldr	r1, [r7, #4]
 8005902:	4613      	mov	r3, r2
 8005904:	011b      	lsls	r3, r3, #4
 8005906:	1a9b      	subs	r3, r3, r2
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	440b      	add	r3, r1
 800590c:	334d      	adds	r3, #77	@ 0x4d
 800590e:	2202      	movs	r2, #2
 8005910:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8005912:	78fa      	ldrb	r2, [r7, #3]
 8005914:	6879      	ldr	r1, [r7, #4]
 8005916:	4613      	mov	r3, r2
 8005918:	011b      	lsls	r3, r3, #4
 800591a:	1a9b      	subs	r3, r3, r2
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	440b      	add	r3, r1
 8005920:	334c      	adds	r3, #76	@ 0x4c
 8005922:	2202      	movs	r2, #2
 8005924:	701a      	strb	r2, [r3, #0]
 8005926:	e095      	b.n	8005a54 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8005928:	78fa      	ldrb	r2, [r7, #3]
 800592a:	6879      	ldr	r1, [r7, #4]
 800592c:	4613      	mov	r3, r2
 800592e:	011b      	lsls	r3, r3, #4
 8005930:	1a9b      	subs	r3, r3, r2
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	440b      	add	r3, r1
 8005936:	334d      	adds	r3, #77	@ 0x4d
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	2b06      	cmp	r3, #6
 800593c:	d114      	bne.n	8005968 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800593e:	78fa      	ldrb	r2, [r7, #3]
 8005940:	6879      	ldr	r1, [r7, #4]
 8005942:	4613      	mov	r3, r2
 8005944:	011b      	lsls	r3, r3, #4
 8005946:	1a9b      	subs	r3, r3, r2
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	440b      	add	r3, r1
 800594c:	334d      	adds	r3, #77	@ 0x4d
 800594e:	2202      	movs	r2, #2
 8005950:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8005952:	78fa      	ldrb	r2, [r7, #3]
 8005954:	6879      	ldr	r1, [r7, #4]
 8005956:	4613      	mov	r3, r2
 8005958:	011b      	lsls	r3, r3, #4
 800595a:	1a9b      	subs	r3, r3, r2
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	440b      	add	r3, r1
 8005960:	334c      	adds	r3, #76	@ 0x4c
 8005962:	2205      	movs	r2, #5
 8005964:	701a      	strb	r2, [r3, #0]
 8005966:	e075      	b.n	8005a54 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005968:	78fa      	ldrb	r2, [r7, #3]
 800596a:	6879      	ldr	r1, [r7, #4]
 800596c:	4613      	mov	r3, r2
 800596e:	011b      	lsls	r3, r3, #4
 8005970:	1a9b      	subs	r3, r3, r2
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	440b      	add	r3, r1
 8005976:	334d      	adds	r3, #77	@ 0x4d
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	2b07      	cmp	r3, #7
 800597c:	d00a      	beq.n	8005994 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800597e:	78fa      	ldrb	r2, [r7, #3]
 8005980:	6879      	ldr	r1, [r7, #4]
 8005982:	4613      	mov	r3, r2
 8005984:	011b      	lsls	r3, r3, #4
 8005986:	1a9b      	subs	r3, r3, r2
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	440b      	add	r3, r1
 800598c:	334d      	adds	r3, #77	@ 0x4d
 800598e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005990:	2b09      	cmp	r3, #9
 8005992:	d170      	bne.n	8005a76 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005994:	78fa      	ldrb	r2, [r7, #3]
 8005996:	6879      	ldr	r1, [r7, #4]
 8005998:	4613      	mov	r3, r2
 800599a:	011b      	lsls	r3, r3, #4
 800599c:	1a9b      	subs	r3, r3, r2
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	440b      	add	r3, r1
 80059a2:	334d      	adds	r3, #77	@ 0x4d
 80059a4:	2202      	movs	r2, #2
 80059a6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80059a8:	78fa      	ldrb	r2, [r7, #3]
 80059aa:	6879      	ldr	r1, [r7, #4]
 80059ac:	4613      	mov	r3, r2
 80059ae:	011b      	lsls	r3, r3, #4
 80059b0:	1a9b      	subs	r3, r3, r2
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	440b      	add	r3, r1
 80059b6:	3344      	adds	r3, #68	@ 0x44
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	1c59      	adds	r1, r3, #1
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	4613      	mov	r3, r2
 80059c0:	011b      	lsls	r3, r3, #4
 80059c2:	1a9b      	subs	r3, r3, r2
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	4403      	add	r3, r0
 80059c8:	3344      	adds	r3, #68	@ 0x44
 80059ca:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80059cc:	78fa      	ldrb	r2, [r7, #3]
 80059ce:	6879      	ldr	r1, [r7, #4]
 80059d0:	4613      	mov	r3, r2
 80059d2:	011b      	lsls	r3, r3, #4
 80059d4:	1a9b      	subs	r3, r3, r2
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	440b      	add	r3, r1
 80059da:	3344      	adds	r3, #68	@ 0x44
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d914      	bls.n	8005a0c <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80059e2:	78fa      	ldrb	r2, [r7, #3]
 80059e4:	6879      	ldr	r1, [r7, #4]
 80059e6:	4613      	mov	r3, r2
 80059e8:	011b      	lsls	r3, r3, #4
 80059ea:	1a9b      	subs	r3, r3, r2
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	440b      	add	r3, r1
 80059f0:	3344      	adds	r3, #68	@ 0x44
 80059f2:	2200      	movs	r2, #0
 80059f4:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80059f6:	78fa      	ldrb	r2, [r7, #3]
 80059f8:	6879      	ldr	r1, [r7, #4]
 80059fa:	4613      	mov	r3, r2
 80059fc:	011b      	lsls	r3, r3, #4
 80059fe:	1a9b      	subs	r3, r3, r2
 8005a00:	009b      	lsls	r3, r3, #2
 8005a02:	440b      	add	r3, r1
 8005a04:	334c      	adds	r3, #76	@ 0x4c
 8005a06:	2204      	movs	r2, #4
 8005a08:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005a0a:	e022      	b.n	8005a52 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005a0c:	78fa      	ldrb	r2, [r7, #3]
 8005a0e:	6879      	ldr	r1, [r7, #4]
 8005a10:	4613      	mov	r3, r2
 8005a12:	011b      	lsls	r3, r3, #4
 8005a14:	1a9b      	subs	r3, r3, r2
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	440b      	add	r3, r1
 8005a1a:	334c      	adds	r3, #76	@ 0x4c
 8005a1c:	2202      	movs	r2, #2
 8005a1e:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005a20:	78fb      	ldrb	r3, [r7, #3]
 8005a22:	015a      	lsls	r2, r3, #5
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	4413      	add	r3, r2
 8005a28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005a36:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005a3e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005a40:	78fb      	ldrb	r3, [r7, #3]
 8005a42:	015a      	lsls	r2, r3, #5
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	4413      	add	r3, r2
 8005a48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005a52:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005a54:	78fa      	ldrb	r2, [r7, #3]
 8005a56:	6879      	ldr	r1, [r7, #4]
 8005a58:	4613      	mov	r3, r2
 8005a5a:	011b      	lsls	r3, r3, #4
 8005a5c:	1a9b      	subs	r3, r3, r2
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	440b      	add	r3, r1
 8005a62:	334c      	adds	r3, #76	@ 0x4c
 8005a64:	781a      	ldrb	r2, [r3, #0]
 8005a66:	78fb      	ldrb	r3, [r7, #3]
 8005a68:	4619      	mov	r1, r3
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f006 f9a6 	bl	800bdbc <HAL_HCD_HC_NotifyURBChange_Callback>
 8005a70:	e002      	b.n	8005a78 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8005a72:	bf00      	nop
 8005a74:	e000      	b.n	8005a78 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8005a76:	bf00      	nop
  }
}
 8005a78:	3718      	adds	r7, #24
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}

08005a7e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005a7e:	b580      	push	{r7, lr}
 8005a80:	b08a      	sub	sp, #40	@ 0x28
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a8e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	6a1b      	ldr	r3, [r3, #32]
 8005a96:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	f003 030f 	and.w	r3, r3, #15
 8005a9e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	0c5b      	lsrs	r3, r3, #17
 8005aa4:	f003 030f 	and.w	r3, r3, #15
 8005aa8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	091b      	lsrs	r3, r3, #4
 8005aae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ab2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d004      	beq.n	8005ac4 <HCD_RXQLVL_IRQHandler+0x46>
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	2b05      	cmp	r3, #5
 8005abe:	f000 80b6 	beq.w	8005c2e <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005ac2:	e0b7      	b.n	8005c34 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	f000 80b3 	beq.w	8005c32 <HCD_RXQLVL_IRQHandler+0x1b4>
 8005acc:	6879      	ldr	r1, [r7, #4]
 8005ace:	69ba      	ldr	r2, [r7, #24]
 8005ad0:	4613      	mov	r3, r2
 8005ad2:	011b      	lsls	r3, r3, #4
 8005ad4:	1a9b      	subs	r3, r3, r2
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	440b      	add	r3, r1
 8005ada:	332c      	adds	r3, #44	@ 0x2c
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	f000 80a7 	beq.w	8005c32 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8005ae4:	6879      	ldr	r1, [r7, #4]
 8005ae6:	69ba      	ldr	r2, [r7, #24]
 8005ae8:	4613      	mov	r3, r2
 8005aea:	011b      	lsls	r3, r3, #4
 8005aec:	1a9b      	subs	r3, r3, r2
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	440b      	add	r3, r1
 8005af2:	3338      	adds	r3, #56	@ 0x38
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	18d1      	adds	r1, r2, r3
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	69ba      	ldr	r2, [r7, #24]
 8005afe:	4613      	mov	r3, r2
 8005b00:	011b      	lsls	r3, r3, #4
 8005b02:	1a9b      	subs	r3, r3, r2
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	4403      	add	r3, r0
 8005b08:	3334      	adds	r3, #52	@ 0x34
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4299      	cmp	r1, r3
 8005b0e:	f200 8083 	bhi.w	8005c18 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6818      	ldr	r0, [r3, #0]
 8005b16:	6879      	ldr	r1, [r7, #4]
 8005b18:	69ba      	ldr	r2, [r7, #24]
 8005b1a:	4613      	mov	r3, r2
 8005b1c:	011b      	lsls	r3, r3, #4
 8005b1e:	1a9b      	subs	r3, r3, r2
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	440b      	add	r3, r1
 8005b24:	332c      	adds	r3, #44	@ 0x2c
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	693a      	ldr	r2, [r7, #16]
 8005b2a:	b292      	uxth	r2, r2
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	f002 ffd1 	bl	8008ad4 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8005b32:	6879      	ldr	r1, [r7, #4]
 8005b34:	69ba      	ldr	r2, [r7, #24]
 8005b36:	4613      	mov	r3, r2
 8005b38:	011b      	lsls	r3, r3, #4
 8005b3a:	1a9b      	subs	r3, r3, r2
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	440b      	add	r3, r1
 8005b40:	332c      	adds	r3, #44	@ 0x2c
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	18d1      	adds	r1, r2, r3
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	69ba      	ldr	r2, [r7, #24]
 8005b4c:	4613      	mov	r3, r2
 8005b4e:	011b      	lsls	r3, r3, #4
 8005b50:	1a9b      	subs	r3, r3, r2
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	4403      	add	r3, r0
 8005b56:	332c      	adds	r3, #44	@ 0x2c
 8005b58:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8005b5a:	6879      	ldr	r1, [r7, #4]
 8005b5c:	69ba      	ldr	r2, [r7, #24]
 8005b5e:	4613      	mov	r3, r2
 8005b60:	011b      	lsls	r3, r3, #4
 8005b62:	1a9b      	subs	r3, r3, r2
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	440b      	add	r3, r1
 8005b68:	3338      	adds	r3, #56	@ 0x38
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	18d1      	adds	r1, r2, r3
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	69ba      	ldr	r2, [r7, #24]
 8005b74:	4613      	mov	r3, r2
 8005b76:	011b      	lsls	r3, r3, #4
 8005b78:	1a9b      	subs	r3, r3, r2
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	4403      	add	r3, r0
 8005b7e:	3338      	adds	r3, #56	@ 0x38
 8005b80:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	015a      	lsls	r2, r3, #5
 8005b86:	6a3b      	ldr	r3, [r7, #32]
 8005b88:	4413      	add	r3, r2
 8005b8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b8e:	691b      	ldr	r3, [r3, #16]
 8005b90:	0cdb      	lsrs	r3, r3, #19
 8005b92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b96:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005b98:	6879      	ldr	r1, [r7, #4]
 8005b9a:	69ba      	ldr	r2, [r7, #24]
 8005b9c:	4613      	mov	r3, r2
 8005b9e:	011b      	lsls	r3, r3, #4
 8005ba0:	1a9b      	subs	r3, r3, r2
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	440b      	add	r3, r1
 8005ba6:	3328      	adds	r3, #40	@ 0x28
 8005ba8:	881b      	ldrh	r3, [r3, #0]
 8005baa:	461a      	mov	r2, r3
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d13f      	bne.n	8005c32 <HCD_RXQLVL_IRQHandler+0x1b4>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d03c      	beq.n	8005c32 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	015a      	lsls	r2, r3, #5
 8005bbc:	6a3b      	ldr	r3, [r7, #32]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005bce:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005bd6:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	015a      	lsls	r2, r3, #5
 8005bdc:	6a3b      	ldr	r3, [r7, #32]
 8005bde:	4413      	add	r3, r2
 8005be0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005be4:	461a      	mov	r2, r3
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8005bea:	6879      	ldr	r1, [r7, #4]
 8005bec:	69ba      	ldr	r2, [r7, #24]
 8005bee:	4613      	mov	r3, r2
 8005bf0:	011b      	lsls	r3, r3, #4
 8005bf2:	1a9b      	subs	r3, r3, r2
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	440b      	add	r3, r1
 8005bf8:	333c      	adds	r3, #60	@ 0x3c
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	f083 0301 	eor.w	r3, r3, #1
 8005c00:	b2d8      	uxtb	r0, r3
 8005c02:	6879      	ldr	r1, [r7, #4]
 8005c04:	69ba      	ldr	r2, [r7, #24]
 8005c06:	4613      	mov	r3, r2
 8005c08:	011b      	lsls	r3, r3, #4
 8005c0a:	1a9b      	subs	r3, r3, r2
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	440b      	add	r3, r1
 8005c10:	333c      	adds	r3, #60	@ 0x3c
 8005c12:	4602      	mov	r2, r0
 8005c14:	701a      	strb	r2, [r3, #0]
      break;
 8005c16:	e00c      	b.n	8005c32 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8005c18:	6879      	ldr	r1, [r7, #4]
 8005c1a:	69ba      	ldr	r2, [r7, #24]
 8005c1c:	4613      	mov	r3, r2
 8005c1e:	011b      	lsls	r3, r3, #4
 8005c20:	1a9b      	subs	r3, r3, r2
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	440b      	add	r3, r1
 8005c26:	334c      	adds	r3, #76	@ 0x4c
 8005c28:	2204      	movs	r2, #4
 8005c2a:	701a      	strb	r2, [r3, #0]
      break;
 8005c2c:	e001      	b.n	8005c32 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8005c2e:	bf00      	nop
 8005c30:	e000      	b.n	8005c34 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8005c32:	bf00      	nop
  }
}
 8005c34:	bf00      	nop
 8005c36:	3728      	adds	r7, #40	@ 0x28
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b086      	sub	sp, #24
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005c68:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f003 0302 	and.w	r3, r3, #2
 8005c70:	2b02      	cmp	r3, #2
 8005c72:	d10b      	bne.n	8005c8c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f003 0301 	and.w	r3, r3, #1
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d102      	bne.n	8005c84 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f006 f880 	bl	800bd84 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	f043 0302 	orr.w	r3, r3, #2
 8005c8a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f003 0308 	and.w	r3, r3, #8
 8005c92:	2b08      	cmp	r3, #8
 8005c94:	d132      	bne.n	8005cfc <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	f043 0308 	orr.w	r3, r3, #8
 8005c9c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f003 0304 	and.w	r3, r3, #4
 8005ca4:	2b04      	cmp	r3, #4
 8005ca6:	d126      	bne.n	8005cf6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	7a5b      	ldrb	r3, [r3, #9]
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	d113      	bne.n	8005cd8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8005cb6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005cba:	d106      	bne.n	8005cca <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	2102      	movs	r1, #2
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f003 f89c 	bl	8008e00 <USB_InitFSLSPClkSel>
 8005cc8:	e011      	b.n	8005cee <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	2101      	movs	r1, #1
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f003 f895 	bl	8008e00 <USB_InitFSLSPClkSel>
 8005cd6:	e00a      	b.n	8005cee <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	79db      	ldrb	r3, [r3, #7]
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d106      	bne.n	8005cee <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8005cec:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f006 f872 	bl	800bdd8 <HAL_HCD_PortEnabled_Callback>
 8005cf4:	e002      	b.n	8005cfc <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f006 f87c 	bl	800bdf4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f003 0320 	and.w	r3, r3, #32
 8005d02:	2b20      	cmp	r3, #32
 8005d04:	d103      	bne.n	8005d0e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	f043 0320 	orr.w	r3, r3, #32
 8005d0c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005d14:	461a      	mov	r2, r3
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	6013      	str	r3, [r2, #0]
}
 8005d1a:	bf00      	nop
 8005d1c:	3718      	adds	r7, #24
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
	...

08005d24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d101      	bne.n	8005d36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e12b      	b.n	8005f8e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d106      	bne.n	8005d50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f7fc f886 	bl	8001e5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2224      	movs	r2, #36	@ 0x24
 8005d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f022 0201 	bic.w	r2, r2, #1
 8005d66:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005d76:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005d86:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005d88:	f000 fd80 	bl	800688c <HAL_RCC_GetPCLK1Freq>
 8005d8c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	4a81      	ldr	r2, [pc, #516]	@ (8005f98 <HAL_I2C_Init+0x274>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d807      	bhi.n	8005da8 <HAL_I2C_Init+0x84>
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	4a80      	ldr	r2, [pc, #512]	@ (8005f9c <HAL_I2C_Init+0x278>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	bf94      	ite	ls
 8005da0:	2301      	movls	r3, #1
 8005da2:	2300      	movhi	r3, #0
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	e006      	b.n	8005db6 <HAL_I2C_Init+0x92>
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	4a7d      	ldr	r2, [pc, #500]	@ (8005fa0 <HAL_I2C_Init+0x27c>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	bf94      	ite	ls
 8005db0:	2301      	movls	r3, #1
 8005db2:	2300      	movhi	r3, #0
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d001      	beq.n	8005dbe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e0e7      	b.n	8005f8e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	4a78      	ldr	r2, [pc, #480]	@ (8005fa4 <HAL_I2C_Init+0x280>)
 8005dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8005dc6:	0c9b      	lsrs	r3, r3, #18
 8005dc8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	68ba      	ldr	r2, [r7, #8]
 8005dda:	430a      	orrs	r2, r1
 8005ddc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	6a1b      	ldr	r3, [r3, #32]
 8005de4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	4a6a      	ldr	r2, [pc, #424]	@ (8005f98 <HAL_I2C_Init+0x274>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d802      	bhi.n	8005df8 <HAL_I2C_Init+0xd4>
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	3301      	adds	r3, #1
 8005df6:	e009      	b.n	8005e0c <HAL_I2C_Init+0xe8>
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005dfe:	fb02 f303 	mul.w	r3, r2, r3
 8005e02:	4a69      	ldr	r2, [pc, #420]	@ (8005fa8 <HAL_I2C_Init+0x284>)
 8005e04:	fba2 2303 	umull	r2, r3, r2, r3
 8005e08:	099b      	lsrs	r3, r3, #6
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	6812      	ldr	r2, [r2, #0]
 8005e10:	430b      	orrs	r3, r1
 8005e12:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	69db      	ldr	r3, [r3, #28]
 8005e1a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005e1e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	495c      	ldr	r1, [pc, #368]	@ (8005f98 <HAL_I2C_Init+0x274>)
 8005e28:	428b      	cmp	r3, r1
 8005e2a:	d819      	bhi.n	8005e60 <HAL_I2C_Init+0x13c>
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	1e59      	subs	r1, r3, #1
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	005b      	lsls	r3, r3, #1
 8005e36:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e3a:	1c59      	adds	r1, r3, #1
 8005e3c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005e40:	400b      	ands	r3, r1
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d00a      	beq.n	8005e5c <HAL_I2C_Init+0x138>
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	1e59      	subs	r1, r3, #1
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	005b      	lsls	r3, r3, #1
 8005e50:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e54:	3301      	adds	r3, #1
 8005e56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e5a:	e051      	b.n	8005f00 <HAL_I2C_Init+0x1dc>
 8005e5c:	2304      	movs	r3, #4
 8005e5e:	e04f      	b.n	8005f00 <HAL_I2C_Init+0x1dc>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d111      	bne.n	8005e8c <HAL_I2C_Init+0x168>
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	1e58      	subs	r0, r3, #1
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6859      	ldr	r1, [r3, #4]
 8005e70:	460b      	mov	r3, r1
 8005e72:	005b      	lsls	r3, r3, #1
 8005e74:	440b      	add	r3, r1
 8005e76:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e7a:	3301      	adds	r3, #1
 8005e7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	bf0c      	ite	eq
 8005e84:	2301      	moveq	r3, #1
 8005e86:	2300      	movne	r3, #0
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	e012      	b.n	8005eb2 <HAL_I2C_Init+0x18e>
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	1e58      	subs	r0, r3, #1
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6859      	ldr	r1, [r3, #4]
 8005e94:	460b      	mov	r3, r1
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	440b      	add	r3, r1
 8005e9a:	0099      	lsls	r1, r3, #2
 8005e9c:	440b      	add	r3, r1
 8005e9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	bf0c      	ite	eq
 8005eac:	2301      	moveq	r3, #1
 8005eae:	2300      	movne	r3, #0
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d001      	beq.n	8005eba <HAL_I2C_Init+0x196>
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e022      	b.n	8005f00 <HAL_I2C_Init+0x1dc>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d10e      	bne.n	8005ee0 <HAL_I2C_Init+0x1bc>
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	1e58      	subs	r0, r3, #1
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6859      	ldr	r1, [r3, #4]
 8005eca:	460b      	mov	r3, r1
 8005ecc:	005b      	lsls	r3, r3, #1
 8005ece:	440b      	add	r3, r1
 8005ed0:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ed4:	3301      	adds	r3, #1
 8005ed6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005eda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ede:	e00f      	b.n	8005f00 <HAL_I2C_Init+0x1dc>
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	1e58      	subs	r0, r3, #1
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6859      	ldr	r1, [r3, #4]
 8005ee8:	460b      	mov	r3, r1
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	440b      	add	r3, r1
 8005eee:	0099      	lsls	r1, r3, #2
 8005ef0:	440b      	add	r3, r1
 8005ef2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005efc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005f00:	6879      	ldr	r1, [r7, #4]
 8005f02:	6809      	ldr	r1, [r1, #0]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	69da      	ldr	r2, [r3, #28]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6a1b      	ldr	r3, [r3, #32]
 8005f1a:	431a      	orrs	r2, r3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	430a      	orrs	r2, r1
 8005f22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005f2e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	6911      	ldr	r1, [r2, #16]
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	68d2      	ldr	r2, [r2, #12]
 8005f3a:	4311      	orrs	r1, r2
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	6812      	ldr	r2, [r2, #0]
 8005f40:	430b      	orrs	r3, r1
 8005f42:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	695a      	ldr	r2, [r3, #20]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	699b      	ldr	r3, [r3, #24]
 8005f56:	431a      	orrs	r2, r3
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	430a      	orrs	r2, r1
 8005f5e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f042 0201 	orr.w	r2, r2, #1
 8005f6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2220      	movs	r2, #32
 8005f7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005f8c:	2300      	movs	r3, #0
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3710      	adds	r7, #16
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	bf00      	nop
 8005f98:	000186a0 	.word	0x000186a0
 8005f9c:	001e847f 	.word	0x001e847f
 8005fa0:	003d08ff 	.word	0x003d08ff
 8005fa4:	431bde83 	.word	0x431bde83
 8005fa8:	10624dd3 	.word	0x10624dd3

08005fac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b086      	sub	sp, #24
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d101      	bne.n	8005fbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e267      	b.n	800648e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 0301 	and.w	r3, r3, #1
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d075      	beq.n	80060b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005fca:	4b88      	ldr	r3, [pc, #544]	@ (80061ec <HAL_RCC_OscConfig+0x240>)
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	f003 030c 	and.w	r3, r3, #12
 8005fd2:	2b04      	cmp	r3, #4
 8005fd4:	d00c      	beq.n	8005ff0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005fd6:	4b85      	ldr	r3, [pc, #532]	@ (80061ec <HAL_RCC_OscConfig+0x240>)
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005fde:	2b08      	cmp	r3, #8
 8005fe0:	d112      	bne.n	8006008 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005fe2:	4b82      	ldr	r3, [pc, #520]	@ (80061ec <HAL_RCC_OscConfig+0x240>)
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005fea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005fee:	d10b      	bne.n	8006008 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ff0:	4b7e      	ldr	r3, [pc, #504]	@ (80061ec <HAL_RCC_OscConfig+0x240>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d05b      	beq.n	80060b4 <HAL_RCC_OscConfig+0x108>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d157      	bne.n	80060b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	e242      	b.n	800648e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006010:	d106      	bne.n	8006020 <HAL_RCC_OscConfig+0x74>
 8006012:	4b76      	ldr	r3, [pc, #472]	@ (80061ec <HAL_RCC_OscConfig+0x240>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a75      	ldr	r2, [pc, #468]	@ (80061ec <HAL_RCC_OscConfig+0x240>)
 8006018:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800601c:	6013      	str	r3, [r2, #0]
 800601e:	e01d      	b.n	800605c <HAL_RCC_OscConfig+0xb0>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006028:	d10c      	bne.n	8006044 <HAL_RCC_OscConfig+0x98>
 800602a:	4b70      	ldr	r3, [pc, #448]	@ (80061ec <HAL_RCC_OscConfig+0x240>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a6f      	ldr	r2, [pc, #444]	@ (80061ec <HAL_RCC_OscConfig+0x240>)
 8006030:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006034:	6013      	str	r3, [r2, #0]
 8006036:	4b6d      	ldr	r3, [pc, #436]	@ (80061ec <HAL_RCC_OscConfig+0x240>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a6c      	ldr	r2, [pc, #432]	@ (80061ec <HAL_RCC_OscConfig+0x240>)
 800603c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006040:	6013      	str	r3, [r2, #0]
 8006042:	e00b      	b.n	800605c <HAL_RCC_OscConfig+0xb0>
 8006044:	4b69      	ldr	r3, [pc, #420]	@ (80061ec <HAL_RCC_OscConfig+0x240>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a68      	ldr	r2, [pc, #416]	@ (80061ec <HAL_RCC_OscConfig+0x240>)
 800604a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800604e:	6013      	str	r3, [r2, #0]
 8006050:	4b66      	ldr	r3, [pc, #408]	@ (80061ec <HAL_RCC_OscConfig+0x240>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a65      	ldr	r2, [pc, #404]	@ (80061ec <HAL_RCC_OscConfig+0x240>)
 8006056:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800605a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d013      	beq.n	800608c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006064:	f7fc f9cc 	bl	8002400 <HAL_GetTick>
 8006068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800606a:	e008      	b.n	800607e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800606c:	f7fc f9c8 	bl	8002400 <HAL_GetTick>
 8006070:	4602      	mov	r2, r0
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	1ad3      	subs	r3, r2, r3
 8006076:	2b64      	cmp	r3, #100	@ 0x64
 8006078:	d901      	bls.n	800607e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800607a:	2303      	movs	r3, #3
 800607c:	e207      	b.n	800648e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800607e:	4b5b      	ldr	r3, [pc, #364]	@ (80061ec <HAL_RCC_OscConfig+0x240>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006086:	2b00      	cmp	r3, #0
 8006088:	d0f0      	beq.n	800606c <HAL_RCC_OscConfig+0xc0>
 800608a:	e014      	b.n	80060b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800608c:	f7fc f9b8 	bl	8002400 <HAL_GetTick>
 8006090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006092:	e008      	b.n	80060a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006094:	f7fc f9b4 	bl	8002400 <HAL_GetTick>
 8006098:	4602      	mov	r2, r0
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	1ad3      	subs	r3, r2, r3
 800609e:	2b64      	cmp	r3, #100	@ 0x64
 80060a0:	d901      	bls.n	80060a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80060a2:	2303      	movs	r3, #3
 80060a4:	e1f3      	b.n	800648e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060a6:	4b51      	ldr	r3, [pc, #324]	@ (80061ec <HAL_RCC_OscConfig+0x240>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d1f0      	bne.n	8006094 <HAL_RCC_OscConfig+0xe8>
 80060b2:	e000      	b.n	80060b6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f003 0302 	and.w	r3, r3, #2
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d063      	beq.n	800618a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80060c2:	4b4a      	ldr	r3, [pc, #296]	@ (80061ec <HAL_RCC_OscConfig+0x240>)
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	f003 030c 	and.w	r3, r3, #12
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d00b      	beq.n	80060e6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80060ce:	4b47      	ldr	r3, [pc, #284]	@ (80061ec <HAL_RCC_OscConfig+0x240>)
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80060d6:	2b08      	cmp	r3, #8
 80060d8:	d11c      	bne.n	8006114 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80060da:	4b44      	ldr	r3, [pc, #272]	@ (80061ec <HAL_RCC_OscConfig+0x240>)
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d116      	bne.n	8006114 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060e6:	4b41      	ldr	r3, [pc, #260]	@ (80061ec <HAL_RCC_OscConfig+0x240>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f003 0302 	and.w	r3, r3, #2
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d005      	beq.n	80060fe <HAL_RCC_OscConfig+0x152>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d001      	beq.n	80060fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	e1c7      	b.n	800648e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060fe:	4b3b      	ldr	r3, [pc, #236]	@ (80061ec <HAL_RCC_OscConfig+0x240>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	691b      	ldr	r3, [r3, #16]
 800610a:	00db      	lsls	r3, r3, #3
 800610c:	4937      	ldr	r1, [pc, #220]	@ (80061ec <HAL_RCC_OscConfig+0x240>)
 800610e:	4313      	orrs	r3, r2
 8006110:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006112:	e03a      	b.n	800618a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d020      	beq.n	800615e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800611c:	4b34      	ldr	r3, [pc, #208]	@ (80061f0 <HAL_RCC_OscConfig+0x244>)
 800611e:	2201      	movs	r2, #1
 8006120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006122:	f7fc f96d 	bl	8002400 <HAL_GetTick>
 8006126:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006128:	e008      	b.n	800613c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800612a:	f7fc f969 	bl	8002400 <HAL_GetTick>
 800612e:	4602      	mov	r2, r0
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	2b02      	cmp	r3, #2
 8006136:	d901      	bls.n	800613c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006138:	2303      	movs	r3, #3
 800613a:	e1a8      	b.n	800648e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800613c:	4b2b      	ldr	r3, [pc, #172]	@ (80061ec <HAL_RCC_OscConfig+0x240>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 0302 	and.w	r3, r3, #2
 8006144:	2b00      	cmp	r3, #0
 8006146:	d0f0      	beq.n	800612a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006148:	4b28      	ldr	r3, [pc, #160]	@ (80061ec <HAL_RCC_OscConfig+0x240>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	691b      	ldr	r3, [r3, #16]
 8006154:	00db      	lsls	r3, r3, #3
 8006156:	4925      	ldr	r1, [pc, #148]	@ (80061ec <HAL_RCC_OscConfig+0x240>)
 8006158:	4313      	orrs	r3, r2
 800615a:	600b      	str	r3, [r1, #0]
 800615c:	e015      	b.n	800618a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800615e:	4b24      	ldr	r3, [pc, #144]	@ (80061f0 <HAL_RCC_OscConfig+0x244>)
 8006160:	2200      	movs	r2, #0
 8006162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006164:	f7fc f94c 	bl	8002400 <HAL_GetTick>
 8006168:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800616a:	e008      	b.n	800617e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800616c:	f7fc f948 	bl	8002400 <HAL_GetTick>
 8006170:	4602      	mov	r2, r0
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	2b02      	cmp	r3, #2
 8006178:	d901      	bls.n	800617e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800617a:	2303      	movs	r3, #3
 800617c:	e187      	b.n	800648e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800617e:	4b1b      	ldr	r3, [pc, #108]	@ (80061ec <HAL_RCC_OscConfig+0x240>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 0302 	and.w	r3, r3, #2
 8006186:	2b00      	cmp	r3, #0
 8006188:	d1f0      	bne.n	800616c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f003 0308 	and.w	r3, r3, #8
 8006192:	2b00      	cmp	r3, #0
 8006194:	d036      	beq.n	8006204 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	695b      	ldr	r3, [r3, #20]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d016      	beq.n	80061cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800619e:	4b15      	ldr	r3, [pc, #84]	@ (80061f4 <HAL_RCC_OscConfig+0x248>)
 80061a0:	2201      	movs	r2, #1
 80061a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061a4:	f7fc f92c 	bl	8002400 <HAL_GetTick>
 80061a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061aa:	e008      	b.n	80061be <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061ac:	f7fc f928 	bl	8002400 <HAL_GetTick>
 80061b0:	4602      	mov	r2, r0
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	d901      	bls.n	80061be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80061ba:	2303      	movs	r3, #3
 80061bc:	e167      	b.n	800648e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061be:	4b0b      	ldr	r3, [pc, #44]	@ (80061ec <HAL_RCC_OscConfig+0x240>)
 80061c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061c2:	f003 0302 	and.w	r3, r3, #2
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d0f0      	beq.n	80061ac <HAL_RCC_OscConfig+0x200>
 80061ca:	e01b      	b.n	8006204 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061cc:	4b09      	ldr	r3, [pc, #36]	@ (80061f4 <HAL_RCC_OscConfig+0x248>)
 80061ce:	2200      	movs	r2, #0
 80061d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061d2:	f7fc f915 	bl	8002400 <HAL_GetTick>
 80061d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061d8:	e00e      	b.n	80061f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061da:	f7fc f911 	bl	8002400 <HAL_GetTick>
 80061de:	4602      	mov	r2, r0
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	2b02      	cmp	r3, #2
 80061e6:	d907      	bls.n	80061f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80061e8:	2303      	movs	r3, #3
 80061ea:	e150      	b.n	800648e <HAL_RCC_OscConfig+0x4e2>
 80061ec:	40023800 	.word	0x40023800
 80061f0:	42470000 	.word	0x42470000
 80061f4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061f8:	4b88      	ldr	r3, [pc, #544]	@ (800641c <HAL_RCC_OscConfig+0x470>)
 80061fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061fc:	f003 0302 	and.w	r3, r3, #2
 8006200:	2b00      	cmp	r3, #0
 8006202:	d1ea      	bne.n	80061da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f003 0304 	and.w	r3, r3, #4
 800620c:	2b00      	cmp	r3, #0
 800620e:	f000 8097 	beq.w	8006340 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006212:	2300      	movs	r3, #0
 8006214:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006216:	4b81      	ldr	r3, [pc, #516]	@ (800641c <HAL_RCC_OscConfig+0x470>)
 8006218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800621a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800621e:	2b00      	cmp	r3, #0
 8006220:	d10f      	bne.n	8006242 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006222:	2300      	movs	r3, #0
 8006224:	60bb      	str	r3, [r7, #8]
 8006226:	4b7d      	ldr	r3, [pc, #500]	@ (800641c <HAL_RCC_OscConfig+0x470>)
 8006228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800622a:	4a7c      	ldr	r2, [pc, #496]	@ (800641c <HAL_RCC_OscConfig+0x470>)
 800622c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006230:	6413      	str	r3, [r2, #64]	@ 0x40
 8006232:	4b7a      	ldr	r3, [pc, #488]	@ (800641c <HAL_RCC_OscConfig+0x470>)
 8006234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006236:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800623a:	60bb      	str	r3, [r7, #8]
 800623c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800623e:	2301      	movs	r3, #1
 8006240:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006242:	4b77      	ldr	r3, [pc, #476]	@ (8006420 <HAL_RCC_OscConfig+0x474>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800624a:	2b00      	cmp	r3, #0
 800624c:	d118      	bne.n	8006280 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800624e:	4b74      	ldr	r3, [pc, #464]	@ (8006420 <HAL_RCC_OscConfig+0x474>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a73      	ldr	r2, [pc, #460]	@ (8006420 <HAL_RCC_OscConfig+0x474>)
 8006254:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006258:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800625a:	f7fc f8d1 	bl	8002400 <HAL_GetTick>
 800625e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006260:	e008      	b.n	8006274 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006262:	f7fc f8cd 	bl	8002400 <HAL_GetTick>
 8006266:	4602      	mov	r2, r0
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	1ad3      	subs	r3, r2, r3
 800626c:	2b02      	cmp	r3, #2
 800626e:	d901      	bls.n	8006274 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006270:	2303      	movs	r3, #3
 8006272:	e10c      	b.n	800648e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006274:	4b6a      	ldr	r3, [pc, #424]	@ (8006420 <HAL_RCC_OscConfig+0x474>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800627c:	2b00      	cmp	r3, #0
 800627e:	d0f0      	beq.n	8006262 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	2b01      	cmp	r3, #1
 8006286:	d106      	bne.n	8006296 <HAL_RCC_OscConfig+0x2ea>
 8006288:	4b64      	ldr	r3, [pc, #400]	@ (800641c <HAL_RCC_OscConfig+0x470>)
 800628a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800628c:	4a63      	ldr	r2, [pc, #396]	@ (800641c <HAL_RCC_OscConfig+0x470>)
 800628e:	f043 0301 	orr.w	r3, r3, #1
 8006292:	6713      	str	r3, [r2, #112]	@ 0x70
 8006294:	e01c      	b.n	80062d0 <HAL_RCC_OscConfig+0x324>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	2b05      	cmp	r3, #5
 800629c:	d10c      	bne.n	80062b8 <HAL_RCC_OscConfig+0x30c>
 800629e:	4b5f      	ldr	r3, [pc, #380]	@ (800641c <HAL_RCC_OscConfig+0x470>)
 80062a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062a2:	4a5e      	ldr	r2, [pc, #376]	@ (800641c <HAL_RCC_OscConfig+0x470>)
 80062a4:	f043 0304 	orr.w	r3, r3, #4
 80062a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80062aa:	4b5c      	ldr	r3, [pc, #368]	@ (800641c <HAL_RCC_OscConfig+0x470>)
 80062ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062ae:	4a5b      	ldr	r2, [pc, #364]	@ (800641c <HAL_RCC_OscConfig+0x470>)
 80062b0:	f043 0301 	orr.w	r3, r3, #1
 80062b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80062b6:	e00b      	b.n	80062d0 <HAL_RCC_OscConfig+0x324>
 80062b8:	4b58      	ldr	r3, [pc, #352]	@ (800641c <HAL_RCC_OscConfig+0x470>)
 80062ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062bc:	4a57      	ldr	r2, [pc, #348]	@ (800641c <HAL_RCC_OscConfig+0x470>)
 80062be:	f023 0301 	bic.w	r3, r3, #1
 80062c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80062c4:	4b55      	ldr	r3, [pc, #340]	@ (800641c <HAL_RCC_OscConfig+0x470>)
 80062c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062c8:	4a54      	ldr	r2, [pc, #336]	@ (800641c <HAL_RCC_OscConfig+0x470>)
 80062ca:	f023 0304 	bic.w	r3, r3, #4
 80062ce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d015      	beq.n	8006304 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062d8:	f7fc f892 	bl	8002400 <HAL_GetTick>
 80062dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062de:	e00a      	b.n	80062f6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062e0:	f7fc f88e 	bl	8002400 <HAL_GetTick>
 80062e4:	4602      	mov	r2, r0
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	1ad3      	subs	r3, r2, r3
 80062ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d901      	bls.n	80062f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80062f2:	2303      	movs	r3, #3
 80062f4:	e0cb      	b.n	800648e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062f6:	4b49      	ldr	r3, [pc, #292]	@ (800641c <HAL_RCC_OscConfig+0x470>)
 80062f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062fa:	f003 0302 	and.w	r3, r3, #2
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d0ee      	beq.n	80062e0 <HAL_RCC_OscConfig+0x334>
 8006302:	e014      	b.n	800632e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006304:	f7fc f87c 	bl	8002400 <HAL_GetTick>
 8006308:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800630a:	e00a      	b.n	8006322 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800630c:	f7fc f878 	bl	8002400 <HAL_GetTick>
 8006310:	4602      	mov	r2, r0
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	1ad3      	subs	r3, r2, r3
 8006316:	f241 3288 	movw	r2, #5000	@ 0x1388
 800631a:	4293      	cmp	r3, r2
 800631c:	d901      	bls.n	8006322 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800631e:	2303      	movs	r3, #3
 8006320:	e0b5      	b.n	800648e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006322:	4b3e      	ldr	r3, [pc, #248]	@ (800641c <HAL_RCC_OscConfig+0x470>)
 8006324:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006326:	f003 0302 	and.w	r3, r3, #2
 800632a:	2b00      	cmp	r3, #0
 800632c:	d1ee      	bne.n	800630c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800632e:	7dfb      	ldrb	r3, [r7, #23]
 8006330:	2b01      	cmp	r3, #1
 8006332:	d105      	bne.n	8006340 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006334:	4b39      	ldr	r3, [pc, #228]	@ (800641c <HAL_RCC_OscConfig+0x470>)
 8006336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006338:	4a38      	ldr	r2, [pc, #224]	@ (800641c <HAL_RCC_OscConfig+0x470>)
 800633a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800633e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	699b      	ldr	r3, [r3, #24]
 8006344:	2b00      	cmp	r3, #0
 8006346:	f000 80a1 	beq.w	800648c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800634a:	4b34      	ldr	r3, [pc, #208]	@ (800641c <HAL_RCC_OscConfig+0x470>)
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	f003 030c 	and.w	r3, r3, #12
 8006352:	2b08      	cmp	r3, #8
 8006354:	d05c      	beq.n	8006410 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	699b      	ldr	r3, [r3, #24]
 800635a:	2b02      	cmp	r3, #2
 800635c:	d141      	bne.n	80063e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800635e:	4b31      	ldr	r3, [pc, #196]	@ (8006424 <HAL_RCC_OscConfig+0x478>)
 8006360:	2200      	movs	r2, #0
 8006362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006364:	f7fc f84c 	bl	8002400 <HAL_GetTick>
 8006368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800636a:	e008      	b.n	800637e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800636c:	f7fc f848 	bl	8002400 <HAL_GetTick>
 8006370:	4602      	mov	r2, r0
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	1ad3      	subs	r3, r2, r3
 8006376:	2b02      	cmp	r3, #2
 8006378:	d901      	bls.n	800637e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800637a:	2303      	movs	r3, #3
 800637c:	e087      	b.n	800648e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800637e:	4b27      	ldr	r3, [pc, #156]	@ (800641c <HAL_RCC_OscConfig+0x470>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006386:	2b00      	cmp	r3, #0
 8006388:	d1f0      	bne.n	800636c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	69da      	ldr	r2, [r3, #28]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6a1b      	ldr	r3, [r3, #32]
 8006392:	431a      	orrs	r2, r3
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006398:	019b      	lsls	r3, r3, #6
 800639a:	431a      	orrs	r2, r3
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063a0:	085b      	lsrs	r3, r3, #1
 80063a2:	3b01      	subs	r3, #1
 80063a4:	041b      	lsls	r3, r3, #16
 80063a6:	431a      	orrs	r2, r3
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ac:	061b      	lsls	r3, r3, #24
 80063ae:	491b      	ldr	r1, [pc, #108]	@ (800641c <HAL_RCC_OscConfig+0x470>)
 80063b0:	4313      	orrs	r3, r2
 80063b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063b4:	4b1b      	ldr	r3, [pc, #108]	@ (8006424 <HAL_RCC_OscConfig+0x478>)
 80063b6:	2201      	movs	r2, #1
 80063b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063ba:	f7fc f821 	bl	8002400 <HAL_GetTick>
 80063be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063c0:	e008      	b.n	80063d4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063c2:	f7fc f81d 	bl	8002400 <HAL_GetTick>
 80063c6:	4602      	mov	r2, r0
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	2b02      	cmp	r3, #2
 80063ce:	d901      	bls.n	80063d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80063d0:	2303      	movs	r3, #3
 80063d2:	e05c      	b.n	800648e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063d4:	4b11      	ldr	r3, [pc, #68]	@ (800641c <HAL_RCC_OscConfig+0x470>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d0f0      	beq.n	80063c2 <HAL_RCC_OscConfig+0x416>
 80063e0:	e054      	b.n	800648c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063e2:	4b10      	ldr	r3, [pc, #64]	@ (8006424 <HAL_RCC_OscConfig+0x478>)
 80063e4:	2200      	movs	r2, #0
 80063e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063e8:	f7fc f80a 	bl	8002400 <HAL_GetTick>
 80063ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063ee:	e008      	b.n	8006402 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063f0:	f7fc f806 	bl	8002400 <HAL_GetTick>
 80063f4:	4602      	mov	r2, r0
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	d901      	bls.n	8006402 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80063fe:	2303      	movs	r3, #3
 8006400:	e045      	b.n	800648e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006402:	4b06      	ldr	r3, [pc, #24]	@ (800641c <HAL_RCC_OscConfig+0x470>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800640a:	2b00      	cmp	r3, #0
 800640c:	d1f0      	bne.n	80063f0 <HAL_RCC_OscConfig+0x444>
 800640e:	e03d      	b.n	800648c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	699b      	ldr	r3, [r3, #24]
 8006414:	2b01      	cmp	r3, #1
 8006416:	d107      	bne.n	8006428 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006418:	2301      	movs	r3, #1
 800641a:	e038      	b.n	800648e <HAL_RCC_OscConfig+0x4e2>
 800641c:	40023800 	.word	0x40023800
 8006420:	40007000 	.word	0x40007000
 8006424:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006428:	4b1b      	ldr	r3, [pc, #108]	@ (8006498 <HAL_RCC_OscConfig+0x4ec>)
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	699b      	ldr	r3, [r3, #24]
 8006432:	2b01      	cmp	r3, #1
 8006434:	d028      	beq.n	8006488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006440:	429a      	cmp	r2, r3
 8006442:	d121      	bne.n	8006488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800644e:	429a      	cmp	r2, r3
 8006450:	d11a      	bne.n	8006488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006452:	68fa      	ldr	r2, [r7, #12]
 8006454:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006458:	4013      	ands	r3, r2
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800645e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006460:	4293      	cmp	r3, r2
 8006462:	d111      	bne.n	8006488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800646e:	085b      	lsrs	r3, r3, #1
 8006470:	3b01      	subs	r3, #1
 8006472:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006474:	429a      	cmp	r2, r3
 8006476:	d107      	bne.n	8006488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006482:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006484:	429a      	cmp	r2, r3
 8006486:	d001      	beq.n	800648c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	e000      	b.n	800648e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800648c:	2300      	movs	r3, #0
}
 800648e:	4618      	mov	r0, r3
 8006490:	3718      	adds	r7, #24
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	40023800 	.word	0x40023800

0800649c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d101      	bne.n	80064b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	e0cc      	b.n	800664a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80064b0:	4b68      	ldr	r3, [pc, #416]	@ (8006654 <HAL_RCC_ClockConfig+0x1b8>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f003 0307 	and.w	r3, r3, #7
 80064b8:	683a      	ldr	r2, [r7, #0]
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d90c      	bls.n	80064d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064be:	4b65      	ldr	r3, [pc, #404]	@ (8006654 <HAL_RCC_ClockConfig+0x1b8>)
 80064c0:	683a      	ldr	r2, [r7, #0]
 80064c2:	b2d2      	uxtb	r2, r2
 80064c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064c6:	4b63      	ldr	r3, [pc, #396]	@ (8006654 <HAL_RCC_ClockConfig+0x1b8>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f003 0307 	and.w	r3, r3, #7
 80064ce:	683a      	ldr	r2, [r7, #0]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d001      	beq.n	80064d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	e0b8      	b.n	800664a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f003 0302 	and.w	r3, r3, #2
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d020      	beq.n	8006526 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 0304 	and.w	r3, r3, #4
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d005      	beq.n	80064fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80064f0:	4b59      	ldr	r3, [pc, #356]	@ (8006658 <HAL_RCC_ClockConfig+0x1bc>)
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	4a58      	ldr	r2, [pc, #352]	@ (8006658 <HAL_RCC_ClockConfig+0x1bc>)
 80064f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80064fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f003 0308 	and.w	r3, r3, #8
 8006504:	2b00      	cmp	r3, #0
 8006506:	d005      	beq.n	8006514 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006508:	4b53      	ldr	r3, [pc, #332]	@ (8006658 <HAL_RCC_ClockConfig+0x1bc>)
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	4a52      	ldr	r2, [pc, #328]	@ (8006658 <HAL_RCC_ClockConfig+0x1bc>)
 800650e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006512:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006514:	4b50      	ldr	r3, [pc, #320]	@ (8006658 <HAL_RCC_ClockConfig+0x1bc>)
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	494d      	ldr	r1, [pc, #308]	@ (8006658 <HAL_RCC_ClockConfig+0x1bc>)
 8006522:	4313      	orrs	r3, r2
 8006524:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f003 0301 	and.w	r3, r3, #1
 800652e:	2b00      	cmp	r3, #0
 8006530:	d044      	beq.n	80065bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	2b01      	cmp	r3, #1
 8006538:	d107      	bne.n	800654a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800653a:	4b47      	ldr	r3, [pc, #284]	@ (8006658 <HAL_RCC_ClockConfig+0x1bc>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006542:	2b00      	cmp	r3, #0
 8006544:	d119      	bne.n	800657a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	e07f      	b.n	800664a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	2b02      	cmp	r3, #2
 8006550:	d003      	beq.n	800655a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006556:	2b03      	cmp	r3, #3
 8006558:	d107      	bne.n	800656a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800655a:	4b3f      	ldr	r3, [pc, #252]	@ (8006658 <HAL_RCC_ClockConfig+0x1bc>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006562:	2b00      	cmp	r3, #0
 8006564:	d109      	bne.n	800657a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	e06f      	b.n	800664a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800656a:	4b3b      	ldr	r3, [pc, #236]	@ (8006658 <HAL_RCC_ClockConfig+0x1bc>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f003 0302 	and.w	r3, r3, #2
 8006572:	2b00      	cmp	r3, #0
 8006574:	d101      	bne.n	800657a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e067      	b.n	800664a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800657a:	4b37      	ldr	r3, [pc, #220]	@ (8006658 <HAL_RCC_ClockConfig+0x1bc>)
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	f023 0203 	bic.w	r2, r3, #3
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	4934      	ldr	r1, [pc, #208]	@ (8006658 <HAL_RCC_ClockConfig+0x1bc>)
 8006588:	4313      	orrs	r3, r2
 800658a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800658c:	f7fb ff38 	bl	8002400 <HAL_GetTick>
 8006590:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006592:	e00a      	b.n	80065aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006594:	f7fb ff34 	bl	8002400 <HAL_GetTick>
 8006598:	4602      	mov	r2, r0
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	1ad3      	subs	r3, r2, r3
 800659e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d901      	bls.n	80065aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80065a6:	2303      	movs	r3, #3
 80065a8:	e04f      	b.n	800664a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065aa:	4b2b      	ldr	r3, [pc, #172]	@ (8006658 <HAL_RCC_ClockConfig+0x1bc>)
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	f003 020c 	and.w	r2, r3, #12
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d1eb      	bne.n	8006594 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80065bc:	4b25      	ldr	r3, [pc, #148]	@ (8006654 <HAL_RCC_ClockConfig+0x1b8>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 0307 	and.w	r3, r3, #7
 80065c4:	683a      	ldr	r2, [r7, #0]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d20c      	bcs.n	80065e4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065ca:	4b22      	ldr	r3, [pc, #136]	@ (8006654 <HAL_RCC_ClockConfig+0x1b8>)
 80065cc:	683a      	ldr	r2, [r7, #0]
 80065ce:	b2d2      	uxtb	r2, r2
 80065d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065d2:	4b20      	ldr	r3, [pc, #128]	@ (8006654 <HAL_RCC_ClockConfig+0x1b8>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 0307 	and.w	r3, r3, #7
 80065da:	683a      	ldr	r2, [r7, #0]
 80065dc:	429a      	cmp	r2, r3
 80065de:	d001      	beq.n	80065e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80065e0:	2301      	movs	r3, #1
 80065e2:	e032      	b.n	800664a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f003 0304 	and.w	r3, r3, #4
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d008      	beq.n	8006602 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065f0:	4b19      	ldr	r3, [pc, #100]	@ (8006658 <HAL_RCC_ClockConfig+0x1bc>)
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	4916      	ldr	r1, [pc, #88]	@ (8006658 <HAL_RCC_ClockConfig+0x1bc>)
 80065fe:	4313      	orrs	r3, r2
 8006600:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f003 0308 	and.w	r3, r3, #8
 800660a:	2b00      	cmp	r3, #0
 800660c:	d009      	beq.n	8006622 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800660e:	4b12      	ldr	r3, [pc, #72]	@ (8006658 <HAL_RCC_ClockConfig+0x1bc>)
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	00db      	lsls	r3, r3, #3
 800661c:	490e      	ldr	r1, [pc, #56]	@ (8006658 <HAL_RCC_ClockConfig+0x1bc>)
 800661e:	4313      	orrs	r3, r2
 8006620:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006622:	f000 f821 	bl	8006668 <HAL_RCC_GetSysClockFreq>
 8006626:	4602      	mov	r2, r0
 8006628:	4b0b      	ldr	r3, [pc, #44]	@ (8006658 <HAL_RCC_ClockConfig+0x1bc>)
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	091b      	lsrs	r3, r3, #4
 800662e:	f003 030f 	and.w	r3, r3, #15
 8006632:	490a      	ldr	r1, [pc, #40]	@ (800665c <HAL_RCC_ClockConfig+0x1c0>)
 8006634:	5ccb      	ldrb	r3, [r1, r3]
 8006636:	fa22 f303 	lsr.w	r3, r2, r3
 800663a:	4a09      	ldr	r2, [pc, #36]	@ (8006660 <HAL_RCC_ClockConfig+0x1c4>)
 800663c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800663e:	4b09      	ldr	r3, [pc, #36]	@ (8006664 <HAL_RCC_ClockConfig+0x1c8>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4618      	mov	r0, r3
 8006644:	f7fb fe98 	bl	8002378 <HAL_InitTick>

  return HAL_OK;
 8006648:	2300      	movs	r3, #0
}
 800664a:	4618      	mov	r0, r3
 800664c:	3710      	adds	r7, #16
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop
 8006654:	40023c00 	.word	0x40023c00
 8006658:	40023800 	.word	0x40023800
 800665c:	0800cba4 	.word	0x0800cba4
 8006660:	2000001c 	.word	0x2000001c
 8006664:	20000020 	.word	0x20000020

08006668 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006668:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800666c:	b094      	sub	sp, #80	@ 0x50
 800666e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006670:	2300      	movs	r3, #0
 8006672:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006674:	2300      	movs	r3, #0
 8006676:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006678:	2300      	movs	r3, #0
 800667a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800667c:	2300      	movs	r3, #0
 800667e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006680:	4b79      	ldr	r3, [pc, #484]	@ (8006868 <HAL_RCC_GetSysClockFreq+0x200>)
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	f003 030c 	and.w	r3, r3, #12
 8006688:	2b08      	cmp	r3, #8
 800668a:	d00d      	beq.n	80066a8 <HAL_RCC_GetSysClockFreq+0x40>
 800668c:	2b08      	cmp	r3, #8
 800668e:	f200 80e1 	bhi.w	8006854 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006692:	2b00      	cmp	r3, #0
 8006694:	d002      	beq.n	800669c <HAL_RCC_GetSysClockFreq+0x34>
 8006696:	2b04      	cmp	r3, #4
 8006698:	d003      	beq.n	80066a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800669a:	e0db      	b.n	8006854 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800669c:	4b73      	ldr	r3, [pc, #460]	@ (800686c <HAL_RCC_GetSysClockFreq+0x204>)
 800669e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80066a0:	e0db      	b.n	800685a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80066a2:	4b73      	ldr	r3, [pc, #460]	@ (8006870 <HAL_RCC_GetSysClockFreq+0x208>)
 80066a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80066a6:	e0d8      	b.n	800685a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80066a8:	4b6f      	ldr	r3, [pc, #444]	@ (8006868 <HAL_RCC_GetSysClockFreq+0x200>)
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80066b0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80066b2:	4b6d      	ldr	r3, [pc, #436]	@ (8006868 <HAL_RCC_GetSysClockFreq+0x200>)
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d063      	beq.n	8006786 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066be:	4b6a      	ldr	r3, [pc, #424]	@ (8006868 <HAL_RCC_GetSysClockFreq+0x200>)
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	099b      	lsrs	r3, r3, #6
 80066c4:	2200      	movs	r2, #0
 80066c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80066c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80066ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80066d2:	2300      	movs	r3, #0
 80066d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80066d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80066da:	4622      	mov	r2, r4
 80066dc:	462b      	mov	r3, r5
 80066de:	f04f 0000 	mov.w	r0, #0
 80066e2:	f04f 0100 	mov.w	r1, #0
 80066e6:	0159      	lsls	r1, r3, #5
 80066e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80066ec:	0150      	lsls	r0, r2, #5
 80066ee:	4602      	mov	r2, r0
 80066f0:	460b      	mov	r3, r1
 80066f2:	4621      	mov	r1, r4
 80066f4:	1a51      	subs	r1, r2, r1
 80066f6:	6139      	str	r1, [r7, #16]
 80066f8:	4629      	mov	r1, r5
 80066fa:	eb63 0301 	sbc.w	r3, r3, r1
 80066fe:	617b      	str	r3, [r7, #20]
 8006700:	f04f 0200 	mov.w	r2, #0
 8006704:	f04f 0300 	mov.w	r3, #0
 8006708:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800670c:	4659      	mov	r1, fp
 800670e:	018b      	lsls	r3, r1, #6
 8006710:	4651      	mov	r1, sl
 8006712:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006716:	4651      	mov	r1, sl
 8006718:	018a      	lsls	r2, r1, #6
 800671a:	4651      	mov	r1, sl
 800671c:	ebb2 0801 	subs.w	r8, r2, r1
 8006720:	4659      	mov	r1, fp
 8006722:	eb63 0901 	sbc.w	r9, r3, r1
 8006726:	f04f 0200 	mov.w	r2, #0
 800672a:	f04f 0300 	mov.w	r3, #0
 800672e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006732:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006736:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800673a:	4690      	mov	r8, r2
 800673c:	4699      	mov	r9, r3
 800673e:	4623      	mov	r3, r4
 8006740:	eb18 0303 	adds.w	r3, r8, r3
 8006744:	60bb      	str	r3, [r7, #8]
 8006746:	462b      	mov	r3, r5
 8006748:	eb49 0303 	adc.w	r3, r9, r3
 800674c:	60fb      	str	r3, [r7, #12]
 800674e:	f04f 0200 	mov.w	r2, #0
 8006752:	f04f 0300 	mov.w	r3, #0
 8006756:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800675a:	4629      	mov	r1, r5
 800675c:	024b      	lsls	r3, r1, #9
 800675e:	4621      	mov	r1, r4
 8006760:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006764:	4621      	mov	r1, r4
 8006766:	024a      	lsls	r2, r1, #9
 8006768:	4610      	mov	r0, r2
 800676a:	4619      	mov	r1, r3
 800676c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800676e:	2200      	movs	r2, #0
 8006770:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006772:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006774:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006778:	f7f9 fd82 	bl	8000280 <__aeabi_uldivmod>
 800677c:	4602      	mov	r2, r0
 800677e:	460b      	mov	r3, r1
 8006780:	4613      	mov	r3, r2
 8006782:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006784:	e058      	b.n	8006838 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006786:	4b38      	ldr	r3, [pc, #224]	@ (8006868 <HAL_RCC_GetSysClockFreq+0x200>)
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	099b      	lsrs	r3, r3, #6
 800678c:	2200      	movs	r2, #0
 800678e:	4618      	mov	r0, r3
 8006790:	4611      	mov	r1, r2
 8006792:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006796:	623b      	str	r3, [r7, #32]
 8006798:	2300      	movs	r3, #0
 800679a:	627b      	str	r3, [r7, #36]	@ 0x24
 800679c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80067a0:	4642      	mov	r2, r8
 80067a2:	464b      	mov	r3, r9
 80067a4:	f04f 0000 	mov.w	r0, #0
 80067a8:	f04f 0100 	mov.w	r1, #0
 80067ac:	0159      	lsls	r1, r3, #5
 80067ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80067b2:	0150      	lsls	r0, r2, #5
 80067b4:	4602      	mov	r2, r0
 80067b6:	460b      	mov	r3, r1
 80067b8:	4641      	mov	r1, r8
 80067ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80067be:	4649      	mov	r1, r9
 80067c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80067c4:	f04f 0200 	mov.w	r2, #0
 80067c8:	f04f 0300 	mov.w	r3, #0
 80067cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80067d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80067d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80067d8:	ebb2 040a 	subs.w	r4, r2, sl
 80067dc:	eb63 050b 	sbc.w	r5, r3, fp
 80067e0:	f04f 0200 	mov.w	r2, #0
 80067e4:	f04f 0300 	mov.w	r3, #0
 80067e8:	00eb      	lsls	r3, r5, #3
 80067ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80067ee:	00e2      	lsls	r2, r4, #3
 80067f0:	4614      	mov	r4, r2
 80067f2:	461d      	mov	r5, r3
 80067f4:	4643      	mov	r3, r8
 80067f6:	18e3      	adds	r3, r4, r3
 80067f8:	603b      	str	r3, [r7, #0]
 80067fa:	464b      	mov	r3, r9
 80067fc:	eb45 0303 	adc.w	r3, r5, r3
 8006800:	607b      	str	r3, [r7, #4]
 8006802:	f04f 0200 	mov.w	r2, #0
 8006806:	f04f 0300 	mov.w	r3, #0
 800680a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800680e:	4629      	mov	r1, r5
 8006810:	028b      	lsls	r3, r1, #10
 8006812:	4621      	mov	r1, r4
 8006814:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006818:	4621      	mov	r1, r4
 800681a:	028a      	lsls	r2, r1, #10
 800681c:	4610      	mov	r0, r2
 800681e:	4619      	mov	r1, r3
 8006820:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006822:	2200      	movs	r2, #0
 8006824:	61bb      	str	r3, [r7, #24]
 8006826:	61fa      	str	r2, [r7, #28]
 8006828:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800682c:	f7f9 fd28 	bl	8000280 <__aeabi_uldivmod>
 8006830:	4602      	mov	r2, r0
 8006832:	460b      	mov	r3, r1
 8006834:	4613      	mov	r3, r2
 8006836:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006838:	4b0b      	ldr	r3, [pc, #44]	@ (8006868 <HAL_RCC_GetSysClockFreq+0x200>)
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	0c1b      	lsrs	r3, r3, #16
 800683e:	f003 0303 	and.w	r3, r3, #3
 8006842:	3301      	adds	r3, #1
 8006844:	005b      	lsls	r3, r3, #1
 8006846:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006848:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800684a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800684c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006850:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006852:	e002      	b.n	800685a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006854:	4b05      	ldr	r3, [pc, #20]	@ (800686c <HAL_RCC_GetSysClockFreq+0x204>)
 8006856:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006858:	bf00      	nop
    }
  }
  return sysclockfreq;
 800685a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800685c:	4618      	mov	r0, r3
 800685e:	3750      	adds	r7, #80	@ 0x50
 8006860:	46bd      	mov	sp, r7
 8006862:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006866:	bf00      	nop
 8006868:	40023800 	.word	0x40023800
 800686c:	00f42400 	.word	0x00f42400
 8006870:	007a1200 	.word	0x007a1200

08006874 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006874:	b480      	push	{r7}
 8006876:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006878:	4b03      	ldr	r3, [pc, #12]	@ (8006888 <HAL_RCC_GetHCLKFreq+0x14>)
 800687a:	681b      	ldr	r3, [r3, #0]
}
 800687c:	4618      	mov	r0, r3
 800687e:	46bd      	mov	sp, r7
 8006880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006884:	4770      	bx	lr
 8006886:	bf00      	nop
 8006888:	2000001c 	.word	0x2000001c

0800688c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006890:	f7ff fff0 	bl	8006874 <HAL_RCC_GetHCLKFreq>
 8006894:	4602      	mov	r2, r0
 8006896:	4b05      	ldr	r3, [pc, #20]	@ (80068ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	0a9b      	lsrs	r3, r3, #10
 800689c:	f003 0307 	and.w	r3, r3, #7
 80068a0:	4903      	ldr	r1, [pc, #12]	@ (80068b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80068a2:	5ccb      	ldrb	r3, [r1, r3]
 80068a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	bd80      	pop	{r7, pc}
 80068ac:	40023800 	.word	0x40023800
 80068b0:	0800cbb4 	.word	0x0800cbb4

080068b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80068b8:	f7ff ffdc 	bl	8006874 <HAL_RCC_GetHCLKFreq>
 80068bc:	4602      	mov	r2, r0
 80068be:	4b05      	ldr	r3, [pc, #20]	@ (80068d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	0b5b      	lsrs	r3, r3, #13
 80068c4:	f003 0307 	and.w	r3, r3, #7
 80068c8:	4903      	ldr	r1, [pc, #12]	@ (80068d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80068ca:	5ccb      	ldrb	r3, [r1, r3]
 80068cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	bd80      	pop	{r7, pc}
 80068d4:	40023800 	.word	0x40023800
 80068d8:	0800cbb4 	.word	0x0800cbb4

080068dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b082      	sub	sp, #8
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d101      	bne.n	80068ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	e07b      	b.n	80069e6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d108      	bne.n	8006908 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80068fe:	d009      	beq.n	8006914 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	61da      	str	r2, [r3, #28]
 8006906:	e005      	b.n	8006914 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2200      	movs	r2, #0
 8006912:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006920:	b2db      	uxtb	r3, r3
 8006922:	2b00      	cmp	r3, #0
 8006924:	d106      	bne.n	8006934 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f7fb fadc 	bl	8001eec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2202      	movs	r2, #2
 8006938:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800694a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800695c:	431a      	orrs	r2, r3
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	68db      	ldr	r3, [r3, #12]
 8006962:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006966:	431a      	orrs	r2, r3
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	691b      	ldr	r3, [r3, #16]
 800696c:	f003 0302 	and.w	r3, r3, #2
 8006970:	431a      	orrs	r2, r3
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	695b      	ldr	r3, [r3, #20]
 8006976:	f003 0301 	and.w	r3, r3, #1
 800697a:	431a      	orrs	r2, r3
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	699b      	ldr	r3, [r3, #24]
 8006980:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006984:	431a      	orrs	r2, r3
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	69db      	ldr	r3, [r3, #28]
 800698a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800698e:	431a      	orrs	r2, r3
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6a1b      	ldr	r3, [r3, #32]
 8006994:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006998:	ea42 0103 	orr.w	r1, r2, r3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069a0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	430a      	orrs	r2, r1
 80069aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	699b      	ldr	r3, [r3, #24]
 80069b0:	0c1b      	lsrs	r3, r3, #16
 80069b2:	f003 0104 	and.w	r1, r3, #4
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ba:	f003 0210 	and.w	r2, r3, #16
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	430a      	orrs	r2, r1
 80069c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	69da      	ldr	r2, [r3, #28]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80069d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80069e4:	2300      	movs	r3, #0
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3708      	adds	r7, #8
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}

080069ee <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80069ee:	b580      	push	{r7, lr}
 80069f0:	b082      	sub	sp, #8
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d101      	bne.n	8006a00 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	e041      	b.n	8006a84 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d106      	bne.n	8006a1a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f7fb fab1 	bl	8001f7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2202      	movs	r2, #2
 8006a1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	3304      	adds	r3, #4
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	4610      	mov	r0, r2
 8006a2e:	f000 fad9 	bl	8006fe4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2201      	movs	r2, #1
 8006a36:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2201      	movs	r2, #1
 8006a46:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2201      	movs	r2, #1
 8006a56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2201      	movs	r2, #1
 8006a66:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2201      	movs	r2, #1
 8006a76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006a82:	2300      	movs	r3, #0
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3708      	adds	r7, #8
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b082      	sub	sp, #8
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d101      	bne.n	8006a9e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e041      	b.n	8006b22 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d106      	bne.n	8006ab8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 f839 	bl	8006b2a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2202      	movs	r2, #2
 8006abc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	3304      	adds	r3, #4
 8006ac8:	4619      	mov	r1, r3
 8006aca:	4610      	mov	r0, r2
 8006acc:	f000 fa8a 	bl	8006fe4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006b20:	2300      	movs	r3, #0
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3708      	adds	r7, #8
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}

08006b2a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006b2a:	b480      	push	{r7}
 8006b2c:	b083      	sub	sp, #12
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006b32:	bf00      	nop
 8006b34:	370c      	adds	r7, #12
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr
	...

08006b40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b084      	sub	sp, #16
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d109      	bne.n	8006b64 <HAL_TIM_PWM_Start+0x24>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	bf14      	ite	ne
 8006b5c:	2301      	movne	r3, #1
 8006b5e:	2300      	moveq	r3, #0
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	e022      	b.n	8006baa <HAL_TIM_PWM_Start+0x6a>
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	2b04      	cmp	r3, #4
 8006b68:	d109      	bne.n	8006b7e <HAL_TIM_PWM_Start+0x3e>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	bf14      	ite	ne
 8006b76:	2301      	movne	r3, #1
 8006b78:	2300      	moveq	r3, #0
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	e015      	b.n	8006baa <HAL_TIM_PWM_Start+0x6a>
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	2b08      	cmp	r3, #8
 8006b82:	d109      	bne.n	8006b98 <HAL_TIM_PWM_Start+0x58>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006b8a:	b2db      	uxtb	r3, r3
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	bf14      	ite	ne
 8006b90:	2301      	movne	r3, #1
 8006b92:	2300      	moveq	r3, #0
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	e008      	b.n	8006baa <HAL_TIM_PWM_Start+0x6a>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b9e:	b2db      	uxtb	r3, r3
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	bf14      	ite	ne
 8006ba4:	2301      	movne	r3, #1
 8006ba6:	2300      	moveq	r3, #0
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d001      	beq.n	8006bb2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e07c      	b.n	8006cac <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d104      	bne.n	8006bc2 <HAL_TIM_PWM_Start+0x82>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2202      	movs	r2, #2
 8006bbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006bc0:	e013      	b.n	8006bea <HAL_TIM_PWM_Start+0xaa>
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	2b04      	cmp	r3, #4
 8006bc6:	d104      	bne.n	8006bd2 <HAL_TIM_PWM_Start+0x92>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2202      	movs	r2, #2
 8006bcc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006bd0:	e00b      	b.n	8006bea <HAL_TIM_PWM_Start+0xaa>
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	2b08      	cmp	r3, #8
 8006bd6:	d104      	bne.n	8006be2 <HAL_TIM_PWM_Start+0xa2>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2202      	movs	r2, #2
 8006bdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006be0:	e003      	b.n	8006bea <HAL_TIM_PWM_Start+0xaa>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2202      	movs	r2, #2
 8006be6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	6839      	ldr	r1, [r7, #0]
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f000 fce6 	bl	80075c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a2d      	ldr	r2, [pc, #180]	@ (8006cb4 <HAL_TIM_PWM_Start+0x174>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d004      	beq.n	8006c0c <HAL_TIM_PWM_Start+0xcc>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a2c      	ldr	r2, [pc, #176]	@ (8006cb8 <HAL_TIM_PWM_Start+0x178>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d101      	bne.n	8006c10 <HAL_TIM_PWM_Start+0xd0>
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	e000      	b.n	8006c12 <HAL_TIM_PWM_Start+0xd2>
 8006c10:	2300      	movs	r3, #0
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d007      	beq.n	8006c26 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006c24:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a22      	ldr	r2, [pc, #136]	@ (8006cb4 <HAL_TIM_PWM_Start+0x174>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d022      	beq.n	8006c76 <HAL_TIM_PWM_Start+0x136>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c38:	d01d      	beq.n	8006c76 <HAL_TIM_PWM_Start+0x136>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a1f      	ldr	r2, [pc, #124]	@ (8006cbc <HAL_TIM_PWM_Start+0x17c>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d018      	beq.n	8006c76 <HAL_TIM_PWM_Start+0x136>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a1d      	ldr	r2, [pc, #116]	@ (8006cc0 <HAL_TIM_PWM_Start+0x180>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d013      	beq.n	8006c76 <HAL_TIM_PWM_Start+0x136>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a1c      	ldr	r2, [pc, #112]	@ (8006cc4 <HAL_TIM_PWM_Start+0x184>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d00e      	beq.n	8006c76 <HAL_TIM_PWM_Start+0x136>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a16      	ldr	r2, [pc, #88]	@ (8006cb8 <HAL_TIM_PWM_Start+0x178>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d009      	beq.n	8006c76 <HAL_TIM_PWM_Start+0x136>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a18      	ldr	r2, [pc, #96]	@ (8006cc8 <HAL_TIM_PWM_Start+0x188>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d004      	beq.n	8006c76 <HAL_TIM_PWM_Start+0x136>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a16      	ldr	r2, [pc, #88]	@ (8006ccc <HAL_TIM_PWM_Start+0x18c>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d111      	bne.n	8006c9a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	f003 0307 	and.w	r3, r3, #7
 8006c80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2b06      	cmp	r3, #6
 8006c86:	d010      	beq.n	8006caa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f042 0201 	orr.w	r2, r2, #1
 8006c96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c98:	e007      	b.n	8006caa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f042 0201 	orr.w	r2, r2, #1
 8006ca8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006caa:	2300      	movs	r3, #0
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3710      	adds	r7, #16
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}
 8006cb4:	40010000 	.word	0x40010000
 8006cb8:	40010400 	.word	0x40010400
 8006cbc:	40000400 	.word	0x40000400
 8006cc0:	40000800 	.word	0x40000800
 8006cc4:	40000c00 	.word	0x40000c00
 8006cc8:	40014000 	.word	0x40014000
 8006ccc:	40001800 	.word	0x40001800

08006cd0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b086      	sub	sp, #24
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	60b9      	str	r1, [r7, #8]
 8006cda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d101      	bne.n	8006cee <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006cea:	2302      	movs	r3, #2
 8006cec:	e0ae      	b.n	8006e4c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2b0c      	cmp	r3, #12
 8006cfa:	f200 809f 	bhi.w	8006e3c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006cfe:	a201      	add	r2, pc, #4	@ (adr r2, 8006d04 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d04:	08006d39 	.word	0x08006d39
 8006d08:	08006e3d 	.word	0x08006e3d
 8006d0c:	08006e3d 	.word	0x08006e3d
 8006d10:	08006e3d 	.word	0x08006e3d
 8006d14:	08006d79 	.word	0x08006d79
 8006d18:	08006e3d 	.word	0x08006e3d
 8006d1c:	08006e3d 	.word	0x08006e3d
 8006d20:	08006e3d 	.word	0x08006e3d
 8006d24:	08006dbb 	.word	0x08006dbb
 8006d28:	08006e3d 	.word	0x08006e3d
 8006d2c:	08006e3d 	.word	0x08006e3d
 8006d30:	08006e3d 	.word	0x08006e3d
 8006d34:	08006dfb 	.word	0x08006dfb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	68b9      	ldr	r1, [r7, #8]
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f000 f9f6 	bl	8007130 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	699a      	ldr	r2, [r3, #24]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f042 0208 	orr.w	r2, r2, #8
 8006d52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	699a      	ldr	r2, [r3, #24]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f022 0204 	bic.w	r2, r2, #4
 8006d62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	6999      	ldr	r1, [r3, #24]
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	691a      	ldr	r2, [r3, #16]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	430a      	orrs	r2, r1
 8006d74:	619a      	str	r2, [r3, #24]
      break;
 8006d76:	e064      	b.n	8006e42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	68b9      	ldr	r1, [r7, #8]
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f000 fa46 	bl	8007210 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	699a      	ldr	r2, [r3, #24]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006d92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	699a      	ldr	r2, [r3, #24]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006da2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	6999      	ldr	r1, [r3, #24]
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	691b      	ldr	r3, [r3, #16]
 8006dae:	021a      	lsls	r2, r3, #8
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	430a      	orrs	r2, r1
 8006db6:	619a      	str	r2, [r3, #24]
      break;
 8006db8:	e043      	b.n	8006e42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	68b9      	ldr	r1, [r7, #8]
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f000 fa9b 	bl	80072fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	69da      	ldr	r2, [r3, #28]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f042 0208 	orr.w	r2, r2, #8
 8006dd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	69da      	ldr	r2, [r3, #28]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f022 0204 	bic.w	r2, r2, #4
 8006de4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	69d9      	ldr	r1, [r3, #28]
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	691a      	ldr	r2, [r3, #16]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	430a      	orrs	r2, r1
 8006df6:	61da      	str	r2, [r3, #28]
      break;
 8006df8:	e023      	b.n	8006e42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	68b9      	ldr	r1, [r7, #8]
 8006e00:	4618      	mov	r0, r3
 8006e02:	f000 faef 	bl	80073e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	69da      	ldr	r2, [r3, #28]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006e14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	69da      	ldr	r2, [r3, #28]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	69d9      	ldr	r1, [r3, #28]
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	691b      	ldr	r3, [r3, #16]
 8006e30:	021a      	lsls	r2, r3, #8
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	430a      	orrs	r2, r1
 8006e38:	61da      	str	r2, [r3, #28]
      break;
 8006e3a:	e002      	b.n	8006e42 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	75fb      	strb	r3, [r7, #23]
      break;
 8006e40:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006e4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3718      	adds	r7, #24
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d101      	bne.n	8006e70 <HAL_TIM_ConfigClockSource+0x1c>
 8006e6c:	2302      	movs	r3, #2
 8006e6e:	e0b4      	b.n	8006fda <HAL_TIM_ConfigClockSource+0x186>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2202      	movs	r2, #2
 8006e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006e8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006e96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	68ba      	ldr	r2, [r7, #8]
 8006e9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ea8:	d03e      	beq.n	8006f28 <HAL_TIM_ConfigClockSource+0xd4>
 8006eaa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006eae:	f200 8087 	bhi.w	8006fc0 <HAL_TIM_ConfigClockSource+0x16c>
 8006eb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006eb6:	f000 8086 	beq.w	8006fc6 <HAL_TIM_ConfigClockSource+0x172>
 8006eba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ebe:	d87f      	bhi.n	8006fc0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ec0:	2b70      	cmp	r3, #112	@ 0x70
 8006ec2:	d01a      	beq.n	8006efa <HAL_TIM_ConfigClockSource+0xa6>
 8006ec4:	2b70      	cmp	r3, #112	@ 0x70
 8006ec6:	d87b      	bhi.n	8006fc0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ec8:	2b60      	cmp	r3, #96	@ 0x60
 8006eca:	d050      	beq.n	8006f6e <HAL_TIM_ConfigClockSource+0x11a>
 8006ecc:	2b60      	cmp	r3, #96	@ 0x60
 8006ece:	d877      	bhi.n	8006fc0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ed0:	2b50      	cmp	r3, #80	@ 0x50
 8006ed2:	d03c      	beq.n	8006f4e <HAL_TIM_ConfigClockSource+0xfa>
 8006ed4:	2b50      	cmp	r3, #80	@ 0x50
 8006ed6:	d873      	bhi.n	8006fc0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ed8:	2b40      	cmp	r3, #64	@ 0x40
 8006eda:	d058      	beq.n	8006f8e <HAL_TIM_ConfigClockSource+0x13a>
 8006edc:	2b40      	cmp	r3, #64	@ 0x40
 8006ede:	d86f      	bhi.n	8006fc0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ee0:	2b30      	cmp	r3, #48	@ 0x30
 8006ee2:	d064      	beq.n	8006fae <HAL_TIM_ConfigClockSource+0x15a>
 8006ee4:	2b30      	cmp	r3, #48	@ 0x30
 8006ee6:	d86b      	bhi.n	8006fc0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ee8:	2b20      	cmp	r3, #32
 8006eea:	d060      	beq.n	8006fae <HAL_TIM_ConfigClockSource+0x15a>
 8006eec:	2b20      	cmp	r3, #32
 8006eee:	d867      	bhi.n	8006fc0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d05c      	beq.n	8006fae <HAL_TIM_ConfigClockSource+0x15a>
 8006ef4:	2b10      	cmp	r3, #16
 8006ef6:	d05a      	beq.n	8006fae <HAL_TIM_ConfigClockSource+0x15a>
 8006ef8:	e062      	b.n	8006fc0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006f0a:	f000 fb3b 	bl	8007584 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006f1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	68ba      	ldr	r2, [r7, #8]
 8006f24:	609a      	str	r2, [r3, #8]
      break;
 8006f26:	e04f      	b.n	8006fc8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006f38:	f000 fb24 	bl	8007584 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	689a      	ldr	r2, [r3, #8]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006f4a:	609a      	str	r2, [r3, #8]
      break;
 8006f4c:	e03c      	b.n	8006fc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	f000 fa98 	bl	8007490 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	2150      	movs	r1, #80	@ 0x50
 8006f66:	4618      	mov	r0, r3
 8006f68:	f000 faf1 	bl	800754e <TIM_ITRx_SetConfig>
      break;
 8006f6c:	e02c      	b.n	8006fc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	f000 fab7 	bl	80074ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	2160      	movs	r1, #96	@ 0x60
 8006f86:	4618      	mov	r0, r3
 8006f88:	f000 fae1 	bl	800754e <TIM_ITRx_SetConfig>
      break;
 8006f8c:	e01c      	b.n	8006fc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	f000 fa78 	bl	8007490 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	2140      	movs	r1, #64	@ 0x40
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f000 fad1 	bl	800754e <TIM_ITRx_SetConfig>
      break;
 8006fac:	e00c      	b.n	8006fc8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	4610      	mov	r0, r2
 8006fba:	f000 fac8 	bl	800754e <TIM_ITRx_SetConfig>
      break;
 8006fbe:	e003      	b.n	8006fc8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	73fb      	strb	r3, [r7, #15]
      break;
 8006fc4:	e000      	b.n	8006fc8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006fc6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3710      	adds	r7, #16
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
	...

08006fe4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b085      	sub	sp, #20
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	4a43      	ldr	r2, [pc, #268]	@ (8007104 <TIM_Base_SetConfig+0x120>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d013      	beq.n	8007024 <TIM_Base_SetConfig+0x40>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007002:	d00f      	beq.n	8007024 <TIM_Base_SetConfig+0x40>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	4a40      	ldr	r2, [pc, #256]	@ (8007108 <TIM_Base_SetConfig+0x124>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d00b      	beq.n	8007024 <TIM_Base_SetConfig+0x40>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	4a3f      	ldr	r2, [pc, #252]	@ (800710c <TIM_Base_SetConfig+0x128>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d007      	beq.n	8007024 <TIM_Base_SetConfig+0x40>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	4a3e      	ldr	r2, [pc, #248]	@ (8007110 <TIM_Base_SetConfig+0x12c>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d003      	beq.n	8007024 <TIM_Base_SetConfig+0x40>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	4a3d      	ldr	r2, [pc, #244]	@ (8007114 <TIM_Base_SetConfig+0x130>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d108      	bne.n	8007036 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800702a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	68fa      	ldr	r2, [r7, #12]
 8007032:	4313      	orrs	r3, r2
 8007034:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	4a32      	ldr	r2, [pc, #200]	@ (8007104 <TIM_Base_SetConfig+0x120>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d02b      	beq.n	8007096 <TIM_Base_SetConfig+0xb2>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007044:	d027      	beq.n	8007096 <TIM_Base_SetConfig+0xb2>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	4a2f      	ldr	r2, [pc, #188]	@ (8007108 <TIM_Base_SetConfig+0x124>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d023      	beq.n	8007096 <TIM_Base_SetConfig+0xb2>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	4a2e      	ldr	r2, [pc, #184]	@ (800710c <TIM_Base_SetConfig+0x128>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d01f      	beq.n	8007096 <TIM_Base_SetConfig+0xb2>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4a2d      	ldr	r2, [pc, #180]	@ (8007110 <TIM_Base_SetConfig+0x12c>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d01b      	beq.n	8007096 <TIM_Base_SetConfig+0xb2>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4a2c      	ldr	r2, [pc, #176]	@ (8007114 <TIM_Base_SetConfig+0x130>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d017      	beq.n	8007096 <TIM_Base_SetConfig+0xb2>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	4a2b      	ldr	r2, [pc, #172]	@ (8007118 <TIM_Base_SetConfig+0x134>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d013      	beq.n	8007096 <TIM_Base_SetConfig+0xb2>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	4a2a      	ldr	r2, [pc, #168]	@ (800711c <TIM_Base_SetConfig+0x138>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d00f      	beq.n	8007096 <TIM_Base_SetConfig+0xb2>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	4a29      	ldr	r2, [pc, #164]	@ (8007120 <TIM_Base_SetConfig+0x13c>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d00b      	beq.n	8007096 <TIM_Base_SetConfig+0xb2>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4a28      	ldr	r2, [pc, #160]	@ (8007124 <TIM_Base_SetConfig+0x140>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d007      	beq.n	8007096 <TIM_Base_SetConfig+0xb2>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	4a27      	ldr	r2, [pc, #156]	@ (8007128 <TIM_Base_SetConfig+0x144>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d003      	beq.n	8007096 <TIM_Base_SetConfig+0xb2>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4a26      	ldr	r2, [pc, #152]	@ (800712c <TIM_Base_SetConfig+0x148>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d108      	bne.n	80070a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800709c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	68db      	ldr	r3, [r3, #12]
 80070a2:	68fa      	ldr	r2, [r7, #12]
 80070a4:	4313      	orrs	r3, r2
 80070a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	695b      	ldr	r3, [r3, #20]
 80070b2:	4313      	orrs	r3, r2
 80070b4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	689a      	ldr	r2, [r3, #8]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	4a0e      	ldr	r2, [pc, #56]	@ (8007104 <TIM_Base_SetConfig+0x120>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d003      	beq.n	80070d6 <TIM_Base_SetConfig+0xf2>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	4a10      	ldr	r2, [pc, #64]	@ (8007114 <TIM_Base_SetConfig+0x130>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d103      	bne.n	80070de <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	691a      	ldr	r2, [r3, #16]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f043 0204 	orr.w	r2, r3, #4
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2201      	movs	r2, #1
 80070ee:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	68fa      	ldr	r2, [r7, #12]
 80070f4:	601a      	str	r2, [r3, #0]
}
 80070f6:	bf00      	nop
 80070f8:	3714      	adds	r7, #20
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr
 8007102:	bf00      	nop
 8007104:	40010000 	.word	0x40010000
 8007108:	40000400 	.word	0x40000400
 800710c:	40000800 	.word	0x40000800
 8007110:	40000c00 	.word	0x40000c00
 8007114:	40010400 	.word	0x40010400
 8007118:	40014000 	.word	0x40014000
 800711c:	40014400 	.word	0x40014400
 8007120:	40014800 	.word	0x40014800
 8007124:	40001800 	.word	0x40001800
 8007128:	40001c00 	.word	0x40001c00
 800712c:	40002000 	.word	0x40002000

08007130 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007130:	b480      	push	{r7}
 8007132:	b087      	sub	sp, #28
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6a1b      	ldr	r3, [r3, #32]
 800713e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6a1b      	ldr	r3, [r3, #32]
 8007144:	f023 0201 	bic.w	r2, r3, #1
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	699b      	ldr	r3, [r3, #24]
 8007156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800715e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f023 0303 	bic.w	r3, r3, #3
 8007166:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	68fa      	ldr	r2, [r7, #12]
 800716e:	4313      	orrs	r3, r2
 8007170:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	f023 0302 	bic.w	r3, r3, #2
 8007178:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	697a      	ldr	r2, [r7, #20]
 8007180:	4313      	orrs	r3, r2
 8007182:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	4a20      	ldr	r2, [pc, #128]	@ (8007208 <TIM_OC1_SetConfig+0xd8>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d003      	beq.n	8007194 <TIM_OC1_SetConfig+0x64>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	4a1f      	ldr	r2, [pc, #124]	@ (800720c <TIM_OC1_SetConfig+0xdc>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d10c      	bne.n	80071ae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	f023 0308 	bic.w	r3, r3, #8
 800719a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	68db      	ldr	r3, [r3, #12]
 80071a0:	697a      	ldr	r2, [r7, #20]
 80071a2:	4313      	orrs	r3, r2
 80071a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	f023 0304 	bic.w	r3, r3, #4
 80071ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	4a15      	ldr	r2, [pc, #84]	@ (8007208 <TIM_OC1_SetConfig+0xd8>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d003      	beq.n	80071be <TIM_OC1_SetConfig+0x8e>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	4a14      	ldr	r2, [pc, #80]	@ (800720c <TIM_OC1_SetConfig+0xdc>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d111      	bne.n	80071e2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80071c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80071cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	695b      	ldr	r3, [r3, #20]
 80071d2:	693a      	ldr	r2, [r7, #16]
 80071d4:	4313      	orrs	r3, r2
 80071d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	699b      	ldr	r3, [r3, #24]
 80071dc:	693a      	ldr	r2, [r7, #16]
 80071de:	4313      	orrs	r3, r2
 80071e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	693a      	ldr	r2, [r7, #16]
 80071e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	685a      	ldr	r2, [r3, #4]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	697a      	ldr	r2, [r7, #20]
 80071fa:	621a      	str	r2, [r3, #32]
}
 80071fc:	bf00      	nop
 80071fe:	371c      	adds	r7, #28
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr
 8007208:	40010000 	.word	0x40010000
 800720c:	40010400 	.word	0x40010400

08007210 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007210:	b480      	push	{r7}
 8007212:	b087      	sub	sp, #28
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6a1b      	ldr	r3, [r3, #32]
 800721e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6a1b      	ldr	r3, [r3, #32]
 8007224:	f023 0210 	bic.w	r2, r3, #16
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	699b      	ldr	r3, [r3, #24]
 8007236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800723e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007246:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	021b      	lsls	r3, r3, #8
 800724e:	68fa      	ldr	r2, [r7, #12]
 8007250:	4313      	orrs	r3, r2
 8007252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	f023 0320 	bic.w	r3, r3, #32
 800725a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	011b      	lsls	r3, r3, #4
 8007262:	697a      	ldr	r2, [r7, #20]
 8007264:	4313      	orrs	r3, r2
 8007266:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	4a22      	ldr	r2, [pc, #136]	@ (80072f4 <TIM_OC2_SetConfig+0xe4>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d003      	beq.n	8007278 <TIM_OC2_SetConfig+0x68>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	4a21      	ldr	r2, [pc, #132]	@ (80072f8 <TIM_OC2_SetConfig+0xe8>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d10d      	bne.n	8007294 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800727e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	68db      	ldr	r3, [r3, #12]
 8007284:	011b      	lsls	r3, r3, #4
 8007286:	697a      	ldr	r2, [r7, #20]
 8007288:	4313      	orrs	r3, r2
 800728a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007292:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	4a17      	ldr	r2, [pc, #92]	@ (80072f4 <TIM_OC2_SetConfig+0xe4>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d003      	beq.n	80072a4 <TIM_OC2_SetConfig+0x94>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	4a16      	ldr	r2, [pc, #88]	@ (80072f8 <TIM_OC2_SetConfig+0xe8>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d113      	bne.n	80072cc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80072aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80072b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	695b      	ldr	r3, [r3, #20]
 80072b8:	009b      	lsls	r3, r3, #2
 80072ba:	693a      	ldr	r2, [r7, #16]
 80072bc:	4313      	orrs	r3, r2
 80072be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	699b      	ldr	r3, [r3, #24]
 80072c4:	009b      	lsls	r3, r3, #2
 80072c6:	693a      	ldr	r2, [r7, #16]
 80072c8:	4313      	orrs	r3, r2
 80072ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	693a      	ldr	r2, [r7, #16]
 80072d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	68fa      	ldr	r2, [r7, #12]
 80072d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	685a      	ldr	r2, [r3, #4]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	697a      	ldr	r2, [r7, #20]
 80072e4:	621a      	str	r2, [r3, #32]
}
 80072e6:	bf00      	nop
 80072e8:	371c      	adds	r7, #28
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr
 80072f2:	bf00      	nop
 80072f4:	40010000 	.word	0x40010000
 80072f8:	40010400 	.word	0x40010400

080072fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b087      	sub	sp, #28
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6a1b      	ldr	r3, [r3, #32]
 800730a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6a1b      	ldr	r3, [r3, #32]
 8007310:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	69db      	ldr	r3, [r3, #28]
 8007322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800732a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f023 0303 	bic.w	r3, r3, #3
 8007332:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	68fa      	ldr	r2, [r7, #12]
 800733a:	4313      	orrs	r3, r2
 800733c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007344:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	689b      	ldr	r3, [r3, #8]
 800734a:	021b      	lsls	r3, r3, #8
 800734c:	697a      	ldr	r2, [r7, #20]
 800734e:	4313      	orrs	r3, r2
 8007350:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	4a21      	ldr	r2, [pc, #132]	@ (80073dc <TIM_OC3_SetConfig+0xe0>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d003      	beq.n	8007362 <TIM_OC3_SetConfig+0x66>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	4a20      	ldr	r2, [pc, #128]	@ (80073e0 <TIM_OC3_SetConfig+0xe4>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d10d      	bne.n	800737e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007368:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	68db      	ldr	r3, [r3, #12]
 800736e:	021b      	lsls	r3, r3, #8
 8007370:	697a      	ldr	r2, [r7, #20]
 8007372:	4313      	orrs	r3, r2
 8007374:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800737c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	4a16      	ldr	r2, [pc, #88]	@ (80073dc <TIM_OC3_SetConfig+0xe0>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d003      	beq.n	800738e <TIM_OC3_SetConfig+0x92>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	4a15      	ldr	r2, [pc, #84]	@ (80073e0 <TIM_OC3_SetConfig+0xe4>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d113      	bne.n	80073b6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007394:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800739c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	695b      	ldr	r3, [r3, #20]
 80073a2:	011b      	lsls	r3, r3, #4
 80073a4:	693a      	ldr	r2, [r7, #16]
 80073a6:	4313      	orrs	r3, r2
 80073a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	699b      	ldr	r3, [r3, #24]
 80073ae:	011b      	lsls	r3, r3, #4
 80073b0:	693a      	ldr	r2, [r7, #16]
 80073b2:	4313      	orrs	r3, r2
 80073b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	693a      	ldr	r2, [r7, #16]
 80073ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	68fa      	ldr	r2, [r7, #12]
 80073c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	685a      	ldr	r2, [r3, #4]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	697a      	ldr	r2, [r7, #20]
 80073ce:	621a      	str	r2, [r3, #32]
}
 80073d0:	bf00      	nop
 80073d2:	371c      	adds	r7, #28
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr
 80073dc:	40010000 	.word	0x40010000
 80073e0:	40010400 	.word	0x40010400

080073e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b087      	sub	sp, #28
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6a1b      	ldr	r3, [r3, #32]
 80073f2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6a1b      	ldr	r3, [r3, #32]
 80073f8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	69db      	ldr	r3, [r3, #28]
 800740a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007412:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800741a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	021b      	lsls	r3, r3, #8
 8007422:	68fa      	ldr	r2, [r7, #12]
 8007424:	4313      	orrs	r3, r2
 8007426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800742e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	031b      	lsls	r3, r3, #12
 8007436:	693a      	ldr	r2, [r7, #16]
 8007438:	4313      	orrs	r3, r2
 800743a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	4a12      	ldr	r2, [pc, #72]	@ (8007488 <TIM_OC4_SetConfig+0xa4>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d003      	beq.n	800744c <TIM_OC4_SetConfig+0x68>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	4a11      	ldr	r2, [pc, #68]	@ (800748c <TIM_OC4_SetConfig+0xa8>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d109      	bne.n	8007460 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007452:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	695b      	ldr	r3, [r3, #20]
 8007458:	019b      	lsls	r3, r3, #6
 800745a:	697a      	ldr	r2, [r7, #20]
 800745c:	4313      	orrs	r3, r2
 800745e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	697a      	ldr	r2, [r7, #20]
 8007464:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	68fa      	ldr	r2, [r7, #12]
 800746a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	685a      	ldr	r2, [r3, #4]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	693a      	ldr	r2, [r7, #16]
 8007478:	621a      	str	r2, [r3, #32]
}
 800747a:	bf00      	nop
 800747c:	371c      	adds	r7, #28
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr
 8007486:	bf00      	nop
 8007488:	40010000 	.word	0x40010000
 800748c:	40010400 	.word	0x40010400

08007490 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007490:	b480      	push	{r7}
 8007492:	b087      	sub	sp, #28
 8007494:	af00      	add	r7, sp, #0
 8007496:	60f8      	str	r0, [r7, #12]
 8007498:	60b9      	str	r1, [r7, #8]
 800749a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	6a1b      	ldr	r3, [r3, #32]
 80074a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	6a1b      	ldr	r3, [r3, #32]
 80074a6:	f023 0201 	bic.w	r2, r3, #1
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	699b      	ldr	r3, [r3, #24]
 80074b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80074ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	011b      	lsls	r3, r3, #4
 80074c0:	693a      	ldr	r2, [r7, #16]
 80074c2:	4313      	orrs	r3, r2
 80074c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	f023 030a 	bic.w	r3, r3, #10
 80074cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80074ce:	697a      	ldr	r2, [r7, #20]
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	4313      	orrs	r3, r2
 80074d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	693a      	ldr	r2, [r7, #16]
 80074da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	697a      	ldr	r2, [r7, #20]
 80074e0:	621a      	str	r2, [r3, #32]
}
 80074e2:	bf00      	nop
 80074e4:	371c      	adds	r7, #28
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr

080074ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074ee:	b480      	push	{r7}
 80074f0:	b087      	sub	sp, #28
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	60f8      	str	r0, [r7, #12]
 80074f6:	60b9      	str	r1, [r7, #8]
 80074f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	6a1b      	ldr	r3, [r3, #32]
 80074fe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	6a1b      	ldr	r3, [r3, #32]
 8007504:	f023 0210 	bic.w	r2, r3, #16
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	699b      	ldr	r3, [r3, #24]
 8007510:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007518:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	031b      	lsls	r3, r3, #12
 800751e:	693a      	ldr	r2, [r7, #16]
 8007520:	4313      	orrs	r3, r2
 8007522:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800752a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	011b      	lsls	r3, r3, #4
 8007530:	697a      	ldr	r2, [r7, #20]
 8007532:	4313      	orrs	r3, r2
 8007534:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	693a      	ldr	r2, [r7, #16]
 800753a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	697a      	ldr	r2, [r7, #20]
 8007540:	621a      	str	r2, [r3, #32]
}
 8007542:	bf00      	nop
 8007544:	371c      	adds	r7, #28
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr

0800754e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800754e:	b480      	push	{r7}
 8007550:	b085      	sub	sp, #20
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
 8007556:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007564:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007566:	683a      	ldr	r2, [r7, #0]
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	4313      	orrs	r3, r2
 800756c:	f043 0307 	orr.w	r3, r3, #7
 8007570:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	68fa      	ldr	r2, [r7, #12]
 8007576:	609a      	str	r2, [r3, #8]
}
 8007578:	bf00      	nop
 800757a:	3714      	adds	r7, #20
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr

08007584 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007584:	b480      	push	{r7}
 8007586:	b087      	sub	sp, #28
 8007588:	af00      	add	r7, sp, #0
 800758a:	60f8      	str	r0, [r7, #12]
 800758c:	60b9      	str	r1, [r7, #8]
 800758e:	607a      	str	r2, [r7, #4]
 8007590:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800759e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	021a      	lsls	r2, r3, #8
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	431a      	orrs	r2, r3
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	4313      	orrs	r3, r2
 80075ac:	697a      	ldr	r2, [r7, #20]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	697a      	ldr	r2, [r7, #20]
 80075b6:	609a      	str	r2, [r3, #8]
}
 80075b8:	bf00      	nop
 80075ba:	371c      	adds	r7, #28
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b087      	sub	sp, #28
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	f003 031f 	and.w	r3, r3, #31
 80075d6:	2201      	movs	r2, #1
 80075d8:	fa02 f303 	lsl.w	r3, r2, r3
 80075dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	6a1a      	ldr	r2, [r3, #32]
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	43db      	mvns	r3, r3
 80075e6:	401a      	ands	r2, r3
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6a1a      	ldr	r2, [r3, #32]
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	f003 031f 	and.w	r3, r3, #31
 80075f6:	6879      	ldr	r1, [r7, #4]
 80075f8:	fa01 f303 	lsl.w	r3, r1, r3
 80075fc:	431a      	orrs	r2, r3
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	621a      	str	r2, [r3, #32]
}
 8007602:	bf00      	nop
 8007604:	371c      	adds	r7, #28
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr
	...

08007610 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007610:	b480      	push	{r7}
 8007612:	b085      	sub	sp, #20
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007620:	2b01      	cmp	r3, #1
 8007622:	d101      	bne.n	8007628 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007624:	2302      	movs	r3, #2
 8007626:	e05a      	b.n	80076de <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2201      	movs	r2, #1
 800762c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2202      	movs	r2, #2
 8007634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	689b      	ldr	r3, [r3, #8]
 8007646:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800764e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	68fa      	ldr	r2, [r7, #12]
 8007656:	4313      	orrs	r3, r2
 8007658:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	68fa      	ldr	r2, [r7, #12]
 8007660:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a21      	ldr	r2, [pc, #132]	@ (80076ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d022      	beq.n	80076b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007674:	d01d      	beq.n	80076b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a1d      	ldr	r2, [pc, #116]	@ (80076f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d018      	beq.n	80076b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a1b      	ldr	r2, [pc, #108]	@ (80076f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d013      	beq.n	80076b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a1a      	ldr	r2, [pc, #104]	@ (80076f8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d00e      	beq.n	80076b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a18      	ldr	r2, [pc, #96]	@ (80076fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d009      	beq.n	80076b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a17      	ldr	r2, [pc, #92]	@ (8007700 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d004      	beq.n	80076b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a15      	ldr	r2, [pc, #84]	@ (8007704 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d10c      	bne.n	80076cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80076b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	68ba      	ldr	r2, [r7, #8]
 80076c0:	4313      	orrs	r3, r2
 80076c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	68ba      	ldr	r2, [r7, #8]
 80076ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2200      	movs	r2, #0
 80076d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80076dc:	2300      	movs	r3, #0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3714      	adds	r7, #20
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr
 80076ea:	bf00      	nop
 80076ec:	40010000 	.word	0x40010000
 80076f0:	40000400 	.word	0x40000400
 80076f4:	40000800 	.word	0x40000800
 80076f8:	40000c00 	.word	0x40000c00
 80076fc:	40010400 	.word	0x40010400
 8007700:	40014000 	.word	0x40014000
 8007704:	40001800 	.word	0x40001800

08007708 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b082      	sub	sp, #8
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d101      	bne.n	800771a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007716:	2301      	movs	r3, #1
 8007718:	e042      	b.n	80077a0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007720:	b2db      	uxtb	r3, r3
 8007722:	2b00      	cmp	r3, #0
 8007724:	d106      	bne.n	8007734 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f7fa fc80 	bl	8002034 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2224      	movs	r2, #36	@ 0x24
 8007738:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	68da      	ldr	r2, [r3, #12]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800774a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 fddd 	bl	800830c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	691a      	ldr	r2, [r3, #16]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007760:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	695a      	ldr	r2, [r3, #20]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007770:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	68da      	ldr	r2, [r3, #12]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007780:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2200      	movs	r2, #0
 8007786:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2220      	movs	r2, #32
 800778c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2220      	movs	r2, #32
 8007794:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800779e:	2300      	movs	r3, #0
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3708      	adds	r7, #8
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b08a      	sub	sp, #40	@ 0x28
 80077ac:	af02      	add	r7, sp, #8
 80077ae:	60f8      	str	r0, [r7, #12]
 80077b0:	60b9      	str	r1, [r7, #8]
 80077b2:	603b      	str	r3, [r7, #0]
 80077b4:	4613      	mov	r3, r2
 80077b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80077b8:	2300      	movs	r3, #0
 80077ba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	2b20      	cmp	r3, #32
 80077c6:	d175      	bne.n	80078b4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d002      	beq.n	80077d4 <HAL_UART_Transmit+0x2c>
 80077ce:	88fb      	ldrh	r3, [r7, #6]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d101      	bne.n	80077d8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80077d4:	2301      	movs	r3, #1
 80077d6:	e06e      	b.n	80078b6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2200      	movs	r2, #0
 80077dc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2221      	movs	r2, #33	@ 0x21
 80077e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80077e6:	f7fa fe0b 	bl	8002400 <HAL_GetTick>
 80077ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	88fa      	ldrh	r2, [r7, #6]
 80077f0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	88fa      	ldrh	r2, [r7, #6]
 80077f6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007800:	d108      	bne.n	8007814 <HAL_UART_Transmit+0x6c>
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	691b      	ldr	r3, [r3, #16]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d104      	bne.n	8007814 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800780a:	2300      	movs	r3, #0
 800780c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	61bb      	str	r3, [r7, #24]
 8007812:	e003      	b.n	800781c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007818:	2300      	movs	r3, #0
 800781a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800781c:	e02e      	b.n	800787c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	9300      	str	r3, [sp, #0]
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	2200      	movs	r2, #0
 8007826:	2180      	movs	r1, #128	@ 0x80
 8007828:	68f8      	ldr	r0, [r7, #12]
 800782a:	f000 fb41 	bl	8007eb0 <UART_WaitOnFlagUntilTimeout>
 800782e:	4603      	mov	r3, r0
 8007830:	2b00      	cmp	r3, #0
 8007832:	d005      	beq.n	8007840 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2220      	movs	r2, #32
 8007838:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800783c:	2303      	movs	r3, #3
 800783e:	e03a      	b.n	80078b6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007840:	69fb      	ldr	r3, [r7, #28]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d10b      	bne.n	800785e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007846:	69bb      	ldr	r3, [r7, #24]
 8007848:	881b      	ldrh	r3, [r3, #0]
 800784a:	461a      	mov	r2, r3
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007854:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007856:	69bb      	ldr	r3, [r7, #24]
 8007858:	3302      	adds	r3, #2
 800785a:	61bb      	str	r3, [r7, #24]
 800785c:	e007      	b.n	800786e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800785e:	69fb      	ldr	r3, [r7, #28]
 8007860:	781a      	ldrb	r2, [r3, #0]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007868:	69fb      	ldr	r3, [r7, #28]
 800786a:	3301      	adds	r3, #1
 800786c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007872:	b29b      	uxth	r3, r3
 8007874:	3b01      	subs	r3, #1
 8007876:	b29a      	uxth	r2, r3
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007880:	b29b      	uxth	r3, r3
 8007882:	2b00      	cmp	r3, #0
 8007884:	d1cb      	bne.n	800781e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	9300      	str	r3, [sp, #0]
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	2200      	movs	r2, #0
 800788e:	2140      	movs	r1, #64	@ 0x40
 8007890:	68f8      	ldr	r0, [r7, #12]
 8007892:	f000 fb0d 	bl	8007eb0 <UART_WaitOnFlagUntilTimeout>
 8007896:	4603      	mov	r3, r0
 8007898:	2b00      	cmp	r3, #0
 800789a:	d005      	beq.n	80078a8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2220      	movs	r2, #32
 80078a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80078a4:	2303      	movs	r3, #3
 80078a6:	e006      	b.n	80078b6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2220      	movs	r2, #32
 80078ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80078b0:	2300      	movs	r3, #0
 80078b2:	e000      	b.n	80078b6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80078b4:	2302      	movs	r3, #2
  }
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3720      	adds	r7, #32
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}

080078be <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80078be:	b580      	push	{r7, lr}
 80078c0:	b084      	sub	sp, #16
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	60f8      	str	r0, [r7, #12]
 80078c6:	60b9      	str	r1, [r7, #8]
 80078c8:	4613      	mov	r3, r2
 80078ca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	2b20      	cmp	r3, #32
 80078d6:	d112      	bne.n	80078fe <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d002      	beq.n	80078e4 <HAL_UART_Receive_IT+0x26>
 80078de:	88fb      	ldrh	r3, [r7, #6]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d101      	bne.n	80078e8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80078e4:	2301      	movs	r3, #1
 80078e6:	e00b      	b.n	8007900 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2200      	movs	r2, #0
 80078ec:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80078ee:	88fb      	ldrh	r3, [r7, #6]
 80078f0:	461a      	mov	r2, r3
 80078f2:	68b9      	ldr	r1, [r7, #8]
 80078f4:	68f8      	ldr	r0, [r7, #12]
 80078f6:	f000 fb34 	bl	8007f62 <UART_Start_Receive_IT>
 80078fa:	4603      	mov	r3, r0
 80078fc:	e000      	b.n	8007900 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80078fe:	2302      	movs	r3, #2
  }
}
 8007900:	4618      	mov	r0, r3
 8007902:	3710      	adds	r7, #16
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b0ba      	sub	sp, #232	@ 0xe8
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	68db      	ldr	r3, [r3, #12]
 8007920:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	695b      	ldr	r3, [r3, #20]
 800792a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800792e:	2300      	movs	r3, #0
 8007930:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007934:	2300      	movs	r3, #0
 8007936:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800793a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800793e:	f003 030f 	and.w	r3, r3, #15
 8007942:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007946:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800794a:	2b00      	cmp	r3, #0
 800794c:	d10f      	bne.n	800796e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800794e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007952:	f003 0320 	and.w	r3, r3, #32
 8007956:	2b00      	cmp	r3, #0
 8007958:	d009      	beq.n	800796e <HAL_UART_IRQHandler+0x66>
 800795a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800795e:	f003 0320 	and.w	r3, r3, #32
 8007962:	2b00      	cmp	r3, #0
 8007964:	d003      	beq.n	800796e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f000 fc11 	bl	800818e <UART_Receive_IT>
      return;
 800796c:	e273      	b.n	8007e56 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800796e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007972:	2b00      	cmp	r3, #0
 8007974:	f000 80de 	beq.w	8007b34 <HAL_UART_IRQHandler+0x22c>
 8007978:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800797c:	f003 0301 	and.w	r3, r3, #1
 8007980:	2b00      	cmp	r3, #0
 8007982:	d106      	bne.n	8007992 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007984:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007988:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800798c:	2b00      	cmp	r3, #0
 800798e:	f000 80d1 	beq.w	8007b34 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007996:	f003 0301 	and.w	r3, r3, #1
 800799a:	2b00      	cmp	r3, #0
 800799c:	d00b      	beq.n	80079b6 <HAL_UART_IRQHandler+0xae>
 800799e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d005      	beq.n	80079b6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079ae:	f043 0201 	orr.w	r2, r3, #1
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80079b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079ba:	f003 0304 	and.w	r3, r3, #4
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d00b      	beq.n	80079da <HAL_UART_IRQHandler+0xd2>
 80079c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80079c6:	f003 0301 	and.w	r3, r3, #1
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d005      	beq.n	80079da <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079d2:	f043 0202 	orr.w	r2, r3, #2
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80079da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079de:	f003 0302 	and.w	r3, r3, #2
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d00b      	beq.n	80079fe <HAL_UART_IRQHandler+0xf6>
 80079e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80079ea:	f003 0301 	and.w	r3, r3, #1
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d005      	beq.n	80079fe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079f6:	f043 0204 	orr.w	r2, r3, #4
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80079fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a02:	f003 0308 	and.w	r3, r3, #8
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d011      	beq.n	8007a2e <HAL_UART_IRQHandler+0x126>
 8007a0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a0e:	f003 0320 	and.w	r3, r3, #32
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d105      	bne.n	8007a22 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007a16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a1a:	f003 0301 	and.w	r3, r3, #1
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d005      	beq.n	8007a2e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a26:	f043 0208 	orr.w	r2, r3, #8
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	f000 820a 	beq.w	8007e4c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007a38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a3c:	f003 0320 	and.w	r3, r3, #32
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d008      	beq.n	8007a56 <HAL_UART_IRQHandler+0x14e>
 8007a44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a48:	f003 0320 	and.w	r3, r3, #32
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d002      	beq.n	8007a56 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f000 fb9c 	bl	800818e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	695b      	ldr	r3, [r3, #20]
 8007a5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a60:	2b40      	cmp	r3, #64	@ 0x40
 8007a62:	bf0c      	ite	eq
 8007a64:	2301      	moveq	r3, #1
 8007a66:	2300      	movne	r3, #0
 8007a68:	b2db      	uxtb	r3, r3
 8007a6a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a72:	f003 0308 	and.w	r3, r3, #8
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d103      	bne.n	8007a82 <HAL_UART_IRQHandler+0x17a>
 8007a7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d04f      	beq.n	8007b22 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 faa7 	bl	8007fd6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	695b      	ldr	r3, [r3, #20]
 8007a8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a92:	2b40      	cmp	r3, #64	@ 0x40
 8007a94:	d141      	bne.n	8007b1a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	3314      	adds	r3, #20
 8007a9c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007aa4:	e853 3f00 	ldrex	r3, [r3]
 8007aa8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007aac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007ab0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ab4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	3314      	adds	r3, #20
 8007abe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007ac2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007ac6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007ace:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007ad2:	e841 2300 	strex	r3, r2, [r1]
 8007ad6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007ada:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d1d9      	bne.n	8007a96 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d013      	beq.n	8007b12 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007aee:	4a8a      	ldr	r2, [pc, #552]	@ (8007d18 <HAL_UART_IRQHandler+0x410>)
 8007af0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007af6:	4618      	mov	r0, r3
 8007af8:	f7fb fb6e 	bl	80031d8 <HAL_DMA_Abort_IT>
 8007afc:	4603      	mov	r3, r0
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d016      	beq.n	8007b30 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007b0c:	4610      	mov	r0, r2
 8007b0e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b10:	e00e      	b.n	8007b30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 f9b6 	bl	8007e84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b18:	e00a      	b.n	8007b30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 f9b2 	bl	8007e84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b20:	e006      	b.n	8007b30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 f9ae 	bl	8007e84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007b2e:	e18d      	b.n	8007e4c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b30:	bf00      	nop
    return;
 8007b32:	e18b      	b.n	8007e4c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	f040 8167 	bne.w	8007e0c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007b3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b42:	f003 0310 	and.w	r3, r3, #16
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	f000 8160 	beq.w	8007e0c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8007b4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b50:	f003 0310 	and.w	r3, r3, #16
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	f000 8159 	beq.w	8007e0c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	60bb      	str	r3, [r7, #8]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	60bb      	str	r3, [r7, #8]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	60bb      	str	r3, [r7, #8]
 8007b6e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	695b      	ldr	r3, [r3, #20]
 8007b76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b7a:	2b40      	cmp	r3, #64	@ 0x40
 8007b7c:	f040 80ce 	bne.w	8007d1c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007b8c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	f000 80a9 	beq.w	8007ce8 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007b9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	f080 80a2 	bcs.w	8007ce8 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007baa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bb0:	69db      	ldr	r3, [r3, #28]
 8007bb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007bb6:	f000 8088 	beq.w	8007cca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	330c      	adds	r3, #12
 8007bc0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007bc8:	e853 3f00 	ldrex	r3, [r3]
 8007bcc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007bd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007bd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007bd8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	330c      	adds	r3, #12
 8007be2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007be6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007bea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bee:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007bf2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007bf6:	e841 2300 	strex	r3, r2, [r1]
 8007bfa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007bfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d1d9      	bne.n	8007bba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	3314      	adds	r3, #20
 8007c0c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007c10:	e853 3f00 	ldrex	r3, [r3]
 8007c14:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007c16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007c18:	f023 0301 	bic.w	r3, r3, #1
 8007c1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	3314      	adds	r3, #20
 8007c26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007c2a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007c2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c30:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007c32:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007c36:	e841 2300 	strex	r3, r2, [r1]
 8007c3a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007c3c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d1e1      	bne.n	8007c06 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	3314      	adds	r3, #20
 8007c48:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007c4c:	e853 3f00 	ldrex	r3, [r3]
 8007c50:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007c52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	3314      	adds	r3, #20
 8007c62:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007c66:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007c68:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c6a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007c6c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007c6e:	e841 2300 	strex	r3, r2, [r1]
 8007c72:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007c74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d1e3      	bne.n	8007c42 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2220      	movs	r2, #32
 8007c7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	330c      	adds	r3, #12
 8007c8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c92:	e853 3f00 	ldrex	r3, [r3]
 8007c96:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007c98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c9a:	f023 0310 	bic.w	r3, r3, #16
 8007c9e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	330c      	adds	r3, #12
 8007ca8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007cac:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007cae:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007cb2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007cb4:	e841 2300 	strex	r3, r2, [r1]
 8007cb8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007cba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d1e3      	bne.n	8007c88 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	f7fb fa17 	bl	80030f8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2202      	movs	r2, #2
 8007cce:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	1ad3      	subs	r3, r2, r3
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	4619      	mov	r1, r3
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 f8d9 	bl	8007e98 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007ce6:	e0b3      	b.n	8007e50 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007cec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	f040 80ad 	bne.w	8007e50 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cfa:	69db      	ldr	r3, [r3, #28]
 8007cfc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d00:	f040 80a6 	bne.w	8007e50 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2202      	movs	r2, #2
 8007d08:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007d0e:	4619      	mov	r1, r3
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f000 f8c1 	bl	8007e98 <HAL_UARTEx_RxEventCallback>
      return;
 8007d16:	e09b      	b.n	8007e50 <HAL_UART_IRQHandler+0x548>
 8007d18:	0800809d 	.word	0x0800809d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	1ad3      	subs	r3, r2, r3
 8007d28:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007d30:	b29b      	uxth	r3, r3
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	f000 808e 	beq.w	8007e54 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8007d38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	f000 8089 	beq.w	8007e54 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	330c      	adds	r3, #12
 8007d48:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d4c:	e853 3f00 	ldrex	r3, [r3]
 8007d50:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007d52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d58:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	330c      	adds	r3, #12
 8007d62:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007d66:	647a      	str	r2, [r7, #68]	@ 0x44
 8007d68:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d6a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007d6c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d6e:	e841 2300 	strex	r3, r2, [r1]
 8007d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007d74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d1e3      	bne.n	8007d42 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	3314      	adds	r3, #20
 8007d80:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d84:	e853 3f00 	ldrex	r3, [r3]
 8007d88:	623b      	str	r3, [r7, #32]
   return(result);
 8007d8a:	6a3b      	ldr	r3, [r7, #32]
 8007d8c:	f023 0301 	bic.w	r3, r3, #1
 8007d90:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	3314      	adds	r3, #20
 8007d9a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007d9e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007da4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007da6:	e841 2300 	strex	r3, r2, [r1]
 8007daa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d1e3      	bne.n	8007d7a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2220      	movs	r2, #32
 8007db6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	330c      	adds	r3, #12
 8007dc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	e853 3f00 	ldrex	r3, [r3]
 8007dce:	60fb      	str	r3, [r7, #12]
   return(result);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f023 0310 	bic.w	r3, r3, #16
 8007dd6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	330c      	adds	r3, #12
 8007de0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007de4:	61fa      	str	r2, [r7, #28]
 8007de6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de8:	69b9      	ldr	r1, [r7, #24]
 8007dea:	69fa      	ldr	r2, [r7, #28]
 8007dec:	e841 2300 	strex	r3, r2, [r1]
 8007df0:	617b      	str	r3, [r7, #20]
   return(result);
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d1e3      	bne.n	8007dc0 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2202      	movs	r2, #2
 8007dfc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007dfe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007e02:	4619      	mov	r1, r3
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 f847 	bl	8007e98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007e0a:	e023      	b.n	8007e54 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007e0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d009      	beq.n	8007e2c <HAL_UART_IRQHandler+0x524>
 8007e18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d003      	beq.n	8007e2c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 f94a 	bl	80080be <UART_Transmit_IT>
    return;
 8007e2a:	e014      	b.n	8007e56 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007e2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d00e      	beq.n	8007e56 <HAL_UART_IRQHandler+0x54e>
 8007e38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d008      	beq.n	8007e56 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 f98a 	bl	800815e <UART_EndTransmit_IT>
    return;
 8007e4a:	e004      	b.n	8007e56 <HAL_UART_IRQHandler+0x54e>
    return;
 8007e4c:	bf00      	nop
 8007e4e:	e002      	b.n	8007e56 <HAL_UART_IRQHandler+0x54e>
      return;
 8007e50:	bf00      	nop
 8007e52:	e000      	b.n	8007e56 <HAL_UART_IRQHandler+0x54e>
      return;
 8007e54:	bf00      	nop
  }
}
 8007e56:	37e8      	adds	r7, #232	@ 0xe8
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}

08007e5c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b083      	sub	sp, #12
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007e64:	bf00      	nop
 8007e66:	370c      	adds	r7, #12
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr

08007e70 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b083      	sub	sp, #12
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007e78:	bf00      	nop
 8007e7a:	370c      	adds	r7, #12
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr

08007e84 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007e8c:	bf00      	nop
 8007e8e:	370c      	adds	r7, #12
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	460b      	mov	r3, r1
 8007ea2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007ea4:	bf00      	nop
 8007ea6:	370c      	adds	r7, #12
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr

08007eb0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b086      	sub	sp, #24
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	60f8      	str	r0, [r7, #12]
 8007eb8:	60b9      	str	r1, [r7, #8]
 8007eba:	603b      	str	r3, [r7, #0]
 8007ebc:	4613      	mov	r3, r2
 8007ebe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ec0:	e03b      	b.n	8007f3a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ec2:	6a3b      	ldr	r3, [r7, #32]
 8007ec4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007ec8:	d037      	beq.n	8007f3a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007eca:	f7fa fa99 	bl	8002400 <HAL_GetTick>
 8007ece:	4602      	mov	r2, r0
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	1ad3      	subs	r3, r2, r3
 8007ed4:	6a3a      	ldr	r2, [r7, #32]
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d302      	bcc.n	8007ee0 <UART_WaitOnFlagUntilTimeout+0x30>
 8007eda:	6a3b      	ldr	r3, [r7, #32]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d101      	bne.n	8007ee4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007ee0:	2303      	movs	r3, #3
 8007ee2:	e03a      	b.n	8007f5a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	68db      	ldr	r3, [r3, #12]
 8007eea:	f003 0304 	and.w	r3, r3, #4
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d023      	beq.n	8007f3a <UART_WaitOnFlagUntilTimeout+0x8a>
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	2b80      	cmp	r3, #128	@ 0x80
 8007ef6:	d020      	beq.n	8007f3a <UART_WaitOnFlagUntilTimeout+0x8a>
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	2b40      	cmp	r3, #64	@ 0x40
 8007efc:	d01d      	beq.n	8007f3a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f003 0308 	and.w	r3, r3, #8
 8007f08:	2b08      	cmp	r3, #8
 8007f0a:	d116      	bne.n	8007f3a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	617b      	str	r3, [r7, #20]
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	617b      	str	r3, [r7, #20]
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	617b      	str	r3, [r7, #20]
 8007f20:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f22:	68f8      	ldr	r0, [r7, #12]
 8007f24:	f000 f857 	bl	8007fd6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2208      	movs	r2, #8
 8007f2c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2200      	movs	r2, #0
 8007f32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007f36:	2301      	movs	r3, #1
 8007f38:	e00f      	b.n	8007f5a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	681a      	ldr	r2, [r3, #0]
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	4013      	ands	r3, r2
 8007f44:	68ba      	ldr	r2, [r7, #8]
 8007f46:	429a      	cmp	r2, r3
 8007f48:	bf0c      	ite	eq
 8007f4a:	2301      	moveq	r3, #1
 8007f4c:	2300      	movne	r3, #0
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	461a      	mov	r2, r3
 8007f52:	79fb      	ldrb	r3, [r7, #7]
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d0b4      	beq.n	8007ec2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f58:	2300      	movs	r3, #0
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3718      	adds	r7, #24
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}

08007f62 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f62:	b480      	push	{r7}
 8007f64:	b085      	sub	sp, #20
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	60f8      	str	r0, [r7, #12]
 8007f6a:	60b9      	str	r1, [r7, #8]
 8007f6c:	4613      	mov	r3, r2
 8007f6e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	68ba      	ldr	r2, [r7, #8]
 8007f74:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	88fa      	ldrh	r2, [r7, #6]
 8007f7a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	88fa      	ldrh	r2, [r7, #6]
 8007f80:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2200      	movs	r2, #0
 8007f86:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2222      	movs	r2, #34	@ 0x22
 8007f8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	691b      	ldr	r3, [r3, #16]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d007      	beq.n	8007fa8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	68da      	ldr	r2, [r3, #12]
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007fa6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	695a      	ldr	r2, [r3, #20]
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f042 0201 	orr.w	r2, r2, #1
 8007fb6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	68da      	ldr	r2, [r3, #12]
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f042 0220 	orr.w	r2, r2, #32
 8007fc6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007fc8:	2300      	movs	r3, #0
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3714      	adds	r7, #20
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd4:	4770      	bx	lr

08007fd6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007fd6:	b480      	push	{r7}
 8007fd8:	b095      	sub	sp, #84	@ 0x54
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	330c      	adds	r3, #12
 8007fe4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fe6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fe8:	e853 3f00 	ldrex	r3, [r3]
 8007fec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ff0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ff4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	330c      	adds	r3, #12
 8007ffc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007ffe:	643a      	str	r2, [r7, #64]	@ 0x40
 8008000:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008002:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008004:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008006:	e841 2300 	strex	r3, r2, [r1]
 800800a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800800c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800800e:	2b00      	cmp	r3, #0
 8008010:	d1e5      	bne.n	8007fde <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	3314      	adds	r3, #20
 8008018:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800801a:	6a3b      	ldr	r3, [r7, #32]
 800801c:	e853 3f00 	ldrex	r3, [r3]
 8008020:	61fb      	str	r3, [r7, #28]
   return(result);
 8008022:	69fb      	ldr	r3, [r7, #28]
 8008024:	f023 0301 	bic.w	r3, r3, #1
 8008028:	64bb      	str	r3, [r7, #72]	@ 0x48
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	3314      	adds	r3, #20
 8008030:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008032:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008034:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008036:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008038:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800803a:	e841 2300 	strex	r3, r2, [r1]
 800803e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008042:	2b00      	cmp	r3, #0
 8008044:	d1e5      	bne.n	8008012 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800804a:	2b01      	cmp	r3, #1
 800804c:	d119      	bne.n	8008082 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	330c      	adds	r3, #12
 8008054:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	e853 3f00 	ldrex	r3, [r3]
 800805c:	60bb      	str	r3, [r7, #8]
   return(result);
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	f023 0310 	bic.w	r3, r3, #16
 8008064:	647b      	str	r3, [r7, #68]	@ 0x44
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	330c      	adds	r3, #12
 800806c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800806e:	61ba      	str	r2, [r7, #24]
 8008070:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008072:	6979      	ldr	r1, [r7, #20]
 8008074:	69ba      	ldr	r2, [r7, #24]
 8008076:	e841 2300 	strex	r3, r2, [r1]
 800807a:	613b      	str	r3, [r7, #16]
   return(result);
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d1e5      	bne.n	800804e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2220      	movs	r2, #32
 8008086:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2200      	movs	r2, #0
 800808e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008090:	bf00      	nop
 8008092:	3754      	adds	r7, #84	@ 0x54
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr

0800809c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b084      	sub	sp, #16
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2200      	movs	r2, #0
 80080ae:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80080b0:	68f8      	ldr	r0, [r7, #12]
 80080b2:	f7ff fee7 	bl	8007e84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080b6:	bf00      	nop
 80080b8:	3710      	adds	r7, #16
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}

080080be <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80080be:	b480      	push	{r7}
 80080c0:	b085      	sub	sp, #20
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80080cc:	b2db      	uxtb	r3, r3
 80080ce:	2b21      	cmp	r3, #33	@ 0x21
 80080d0:	d13e      	bne.n	8008150 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080da:	d114      	bne.n	8008106 <UART_Transmit_IT+0x48>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	691b      	ldr	r3, [r3, #16]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d110      	bne.n	8008106 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6a1b      	ldr	r3, [r3, #32]
 80080e8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	881b      	ldrh	r3, [r3, #0]
 80080ee:	461a      	mov	r2, r3
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80080f8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6a1b      	ldr	r3, [r3, #32]
 80080fe:	1c9a      	adds	r2, r3, #2
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	621a      	str	r2, [r3, #32]
 8008104:	e008      	b.n	8008118 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6a1b      	ldr	r3, [r3, #32]
 800810a:	1c59      	adds	r1, r3, #1
 800810c:	687a      	ldr	r2, [r7, #4]
 800810e:	6211      	str	r1, [r2, #32]
 8008110:	781a      	ldrb	r2, [r3, #0]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800811c:	b29b      	uxth	r3, r3
 800811e:	3b01      	subs	r3, #1
 8008120:	b29b      	uxth	r3, r3
 8008122:	687a      	ldr	r2, [r7, #4]
 8008124:	4619      	mov	r1, r3
 8008126:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008128:	2b00      	cmp	r3, #0
 800812a:	d10f      	bne.n	800814c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	68da      	ldr	r2, [r3, #12]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800813a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	68da      	ldr	r2, [r3, #12]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800814a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800814c:	2300      	movs	r3, #0
 800814e:	e000      	b.n	8008152 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008150:	2302      	movs	r3, #2
  }
}
 8008152:	4618      	mov	r0, r3
 8008154:	3714      	adds	r7, #20
 8008156:	46bd      	mov	sp, r7
 8008158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815c:	4770      	bx	lr

0800815e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800815e:	b580      	push	{r7, lr}
 8008160:	b082      	sub	sp, #8
 8008162:	af00      	add	r7, sp, #0
 8008164:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	68da      	ldr	r2, [r3, #12]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008174:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2220      	movs	r2, #32
 800817a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f7ff fe6c 	bl	8007e5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008184:	2300      	movs	r3, #0
}
 8008186:	4618      	mov	r0, r3
 8008188:	3708      	adds	r7, #8
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}

0800818e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800818e:	b580      	push	{r7, lr}
 8008190:	b08c      	sub	sp, #48	@ 0x30
 8008192:	af00      	add	r7, sp, #0
 8008194:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8008196:	2300      	movs	r3, #0
 8008198:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800819a:	2300      	movs	r3, #0
 800819c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80081a4:	b2db      	uxtb	r3, r3
 80081a6:	2b22      	cmp	r3, #34	@ 0x22
 80081a8:	f040 80aa 	bne.w	8008300 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	689b      	ldr	r3, [r3, #8]
 80081b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081b4:	d115      	bne.n	80081e2 <UART_Receive_IT+0x54>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	691b      	ldr	r3, [r3, #16]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d111      	bne.n	80081e2 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081c2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081d0:	b29a      	uxth	r2, r3
 80081d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081da:	1c9a      	adds	r2, r3, #2
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	629a      	str	r2, [r3, #40]	@ 0x28
 80081e0:	e024      	b.n	800822c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	689b      	ldr	r3, [r3, #8]
 80081ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081f0:	d007      	beq.n	8008202 <UART_Receive_IT+0x74>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	689b      	ldr	r3, [r3, #8]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d10a      	bne.n	8008210 <UART_Receive_IT+0x82>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	691b      	ldr	r3, [r3, #16]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d106      	bne.n	8008210 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	b2da      	uxtb	r2, r3
 800820a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800820c:	701a      	strb	r2, [r3, #0]
 800820e:	e008      	b.n	8008222 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	b2db      	uxtb	r3, r3
 8008218:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800821c:	b2da      	uxtb	r2, r3
 800821e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008220:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008226:	1c5a      	adds	r2, r3, #1
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008230:	b29b      	uxth	r3, r3
 8008232:	3b01      	subs	r3, #1
 8008234:	b29b      	uxth	r3, r3
 8008236:	687a      	ldr	r2, [r7, #4]
 8008238:	4619      	mov	r1, r3
 800823a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800823c:	2b00      	cmp	r3, #0
 800823e:	d15d      	bne.n	80082fc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	68da      	ldr	r2, [r3, #12]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f022 0220 	bic.w	r2, r2, #32
 800824e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	68da      	ldr	r2, [r3, #12]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800825e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	695a      	ldr	r2, [r3, #20]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f022 0201 	bic.w	r2, r2, #1
 800826e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2220      	movs	r2, #32
 8008274:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2200      	movs	r2, #0
 800827c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008282:	2b01      	cmp	r3, #1
 8008284:	d135      	bne.n	80082f2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2200      	movs	r2, #0
 800828a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	330c      	adds	r3, #12
 8008292:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	e853 3f00 	ldrex	r3, [r3]
 800829a:	613b      	str	r3, [r7, #16]
   return(result);
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	f023 0310 	bic.w	r3, r3, #16
 80082a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	330c      	adds	r3, #12
 80082aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082ac:	623a      	str	r2, [r7, #32]
 80082ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b0:	69f9      	ldr	r1, [r7, #28]
 80082b2:	6a3a      	ldr	r2, [r7, #32]
 80082b4:	e841 2300 	strex	r3, r2, [r1]
 80082b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80082ba:	69bb      	ldr	r3, [r7, #24]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d1e5      	bne.n	800828c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f003 0310 	and.w	r3, r3, #16
 80082ca:	2b10      	cmp	r3, #16
 80082cc:	d10a      	bne.n	80082e4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80082ce:	2300      	movs	r3, #0
 80082d0:	60fb      	str	r3, [r7, #12]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	60fb      	str	r3, [r7, #12]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	60fb      	str	r3, [r7, #12]
 80082e2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80082e8:	4619      	mov	r1, r3
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f7ff fdd4 	bl	8007e98 <HAL_UARTEx_RxEventCallback>
 80082f0:	e002      	b.n	80082f8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f7ff fdbc 	bl	8007e70 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80082f8:	2300      	movs	r3, #0
 80082fa:	e002      	b.n	8008302 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80082fc:	2300      	movs	r3, #0
 80082fe:	e000      	b.n	8008302 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008300:	2302      	movs	r3, #2
  }
}
 8008302:	4618      	mov	r0, r3
 8008304:	3730      	adds	r7, #48	@ 0x30
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}
	...

0800830c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800830c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008310:	b0c0      	sub	sp, #256	@ 0x100
 8008312:	af00      	add	r7, sp, #0
 8008314:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	691b      	ldr	r3, [r3, #16]
 8008320:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008328:	68d9      	ldr	r1, [r3, #12]
 800832a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800832e:	681a      	ldr	r2, [r3, #0]
 8008330:	ea40 0301 	orr.w	r3, r0, r1
 8008334:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800833a:	689a      	ldr	r2, [r3, #8]
 800833c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008340:	691b      	ldr	r3, [r3, #16]
 8008342:	431a      	orrs	r2, r3
 8008344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008348:	695b      	ldr	r3, [r3, #20]
 800834a:	431a      	orrs	r2, r3
 800834c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008350:	69db      	ldr	r3, [r3, #28]
 8008352:	4313      	orrs	r3, r2
 8008354:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	68db      	ldr	r3, [r3, #12]
 8008360:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008364:	f021 010c 	bic.w	r1, r1, #12
 8008368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800836c:	681a      	ldr	r2, [r3, #0]
 800836e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008372:	430b      	orrs	r3, r1
 8008374:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	695b      	ldr	r3, [r3, #20]
 800837e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008386:	6999      	ldr	r1, [r3, #24]
 8008388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800838c:	681a      	ldr	r2, [r3, #0]
 800838e:	ea40 0301 	orr.w	r3, r0, r1
 8008392:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008398:	681a      	ldr	r2, [r3, #0]
 800839a:	4b8f      	ldr	r3, [pc, #572]	@ (80085d8 <UART_SetConfig+0x2cc>)
 800839c:	429a      	cmp	r2, r3
 800839e:	d005      	beq.n	80083ac <UART_SetConfig+0xa0>
 80083a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083a4:	681a      	ldr	r2, [r3, #0]
 80083a6:	4b8d      	ldr	r3, [pc, #564]	@ (80085dc <UART_SetConfig+0x2d0>)
 80083a8:	429a      	cmp	r2, r3
 80083aa:	d104      	bne.n	80083b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80083ac:	f7fe fa82 	bl	80068b4 <HAL_RCC_GetPCLK2Freq>
 80083b0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80083b4:	e003      	b.n	80083be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80083b6:	f7fe fa69 	bl	800688c <HAL_RCC_GetPCLK1Freq>
 80083ba:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80083be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083c2:	69db      	ldr	r3, [r3, #28]
 80083c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80083c8:	f040 810c 	bne.w	80085e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80083cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80083d0:	2200      	movs	r2, #0
 80083d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80083d6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80083da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80083de:	4622      	mov	r2, r4
 80083e0:	462b      	mov	r3, r5
 80083e2:	1891      	adds	r1, r2, r2
 80083e4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80083e6:	415b      	adcs	r3, r3
 80083e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80083ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80083ee:	4621      	mov	r1, r4
 80083f0:	eb12 0801 	adds.w	r8, r2, r1
 80083f4:	4629      	mov	r1, r5
 80083f6:	eb43 0901 	adc.w	r9, r3, r1
 80083fa:	f04f 0200 	mov.w	r2, #0
 80083fe:	f04f 0300 	mov.w	r3, #0
 8008402:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008406:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800840a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800840e:	4690      	mov	r8, r2
 8008410:	4699      	mov	r9, r3
 8008412:	4623      	mov	r3, r4
 8008414:	eb18 0303 	adds.w	r3, r8, r3
 8008418:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800841c:	462b      	mov	r3, r5
 800841e:	eb49 0303 	adc.w	r3, r9, r3
 8008422:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	2200      	movs	r2, #0
 800842e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008432:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008436:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800843a:	460b      	mov	r3, r1
 800843c:	18db      	adds	r3, r3, r3
 800843e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008440:	4613      	mov	r3, r2
 8008442:	eb42 0303 	adc.w	r3, r2, r3
 8008446:	657b      	str	r3, [r7, #84]	@ 0x54
 8008448:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800844c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008450:	f7f7 ff16 	bl	8000280 <__aeabi_uldivmod>
 8008454:	4602      	mov	r2, r0
 8008456:	460b      	mov	r3, r1
 8008458:	4b61      	ldr	r3, [pc, #388]	@ (80085e0 <UART_SetConfig+0x2d4>)
 800845a:	fba3 2302 	umull	r2, r3, r3, r2
 800845e:	095b      	lsrs	r3, r3, #5
 8008460:	011c      	lsls	r4, r3, #4
 8008462:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008466:	2200      	movs	r2, #0
 8008468:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800846c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008470:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008474:	4642      	mov	r2, r8
 8008476:	464b      	mov	r3, r9
 8008478:	1891      	adds	r1, r2, r2
 800847a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800847c:	415b      	adcs	r3, r3
 800847e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008480:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008484:	4641      	mov	r1, r8
 8008486:	eb12 0a01 	adds.w	sl, r2, r1
 800848a:	4649      	mov	r1, r9
 800848c:	eb43 0b01 	adc.w	fp, r3, r1
 8008490:	f04f 0200 	mov.w	r2, #0
 8008494:	f04f 0300 	mov.w	r3, #0
 8008498:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800849c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80084a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80084a4:	4692      	mov	sl, r2
 80084a6:	469b      	mov	fp, r3
 80084a8:	4643      	mov	r3, r8
 80084aa:	eb1a 0303 	adds.w	r3, sl, r3
 80084ae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80084b2:	464b      	mov	r3, r9
 80084b4:	eb4b 0303 	adc.w	r3, fp, r3
 80084b8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80084bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	2200      	movs	r2, #0
 80084c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80084c8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80084cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80084d0:	460b      	mov	r3, r1
 80084d2:	18db      	adds	r3, r3, r3
 80084d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80084d6:	4613      	mov	r3, r2
 80084d8:	eb42 0303 	adc.w	r3, r2, r3
 80084dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80084de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80084e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80084e6:	f7f7 fecb 	bl	8000280 <__aeabi_uldivmod>
 80084ea:	4602      	mov	r2, r0
 80084ec:	460b      	mov	r3, r1
 80084ee:	4611      	mov	r1, r2
 80084f0:	4b3b      	ldr	r3, [pc, #236]	@ (80085e0 <UART_SetConfig+0x2d4>)
 80084f2:	fba3 2301 	umull	r2, r3, r3, r1
 80084f6:	095b      	lsrs	r3, r3, #5
 80084f8:	2264      	movs	r2, #100	@ 0x64
 80084fa:	fb02 f303 	mul.w	r3, r2, r3
 80084fe:	1acb      	subs	r3, r1, r3
 8008500:	00db      	lsls	r3, r3, #3
 8008502:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008506:	4b36      	ldr	r3, [pc, #216]	@ (80085e0 <UART_SetConfig+0x2d4>)
 8008508:	fba3 2302 	umull	r2, r3, r3, r2
 800850c:	095b      	lsrs	r3, r3, #5
 800850e:	005b      	lsls	r3, r3, #1
 8008510:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008514:	441c      	add	r4, r3
 8008516:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800851a:	2200      	movs	r2, #0
 800851c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008520:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008524:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008528:	4642      	mov	r2, r8
 800852a:	464b      	mov	r3, r9
 800852c:	1891      	adds	r1, r2, r2
 800852e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008530:	415b      	adcs	r3, r3
 8008532:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008534:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008538:	4641      	mov	r1, r8
 800853a:	1851      	adds	r1, r2, r1
 800853c:	6339      	str	r1, [r7, #48]	@ 0x30
 800853e:	4649      	mov	r1, r9
 8008540:	414b      	adcs	r3, r1
 8008542:	637b      	str	r3, [r7, #52]	@ 0x34
 8008544:	f04f 0200 	mov.w	r2, #0
 8008548:	f04f 0300 	mov.w	r3, #0
 800854c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008550:	4659      	mov	r1, fp
 8008552:	00cb      	lsls	r3, r1, #3
 8008554:	4651      	mov	r1, sl
 8008556:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800855a:	4651      	mov	r1, sl
 800855c:	00ca      	lsls	r2, r1, #3
 800855e:	4610      	mov	r0, r2
 8008560:	4619      	mov	r1, r3
 8008562:	4603      	mov	r3, r0
 8008564:	4642      	mov	r2, r8
 8008566:	189b      	adds	r3, r3, r2
 8008568:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800856c:	464b      	mov	r3, r9
 800856e:	460a      	mov	r2, r1
 8008570:	eb42 0303 	adc.w	r3, r2, r3
 8008574:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	2200      	movs	r2, #0
 8008580:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008584:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008588:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800858c:	460b      	mov	r3, r1
 800858e:	18db      	adds	r3, r3, r3
 8008590:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008592:	4613      	mov	r3, r2
 8008594:	eb42 0303 	adc.w	r3, r2, r3
 8008598:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800859a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800859e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80085a2:	f7f7 fe6d 	bl	8000280 <__aeabi_uldivmod>
 80085a6:	4602      	mov	r2, r0
 80085a8:	460b      	mov	r3, r1
 80085aa:	4b0d      	ldr	r3, [pc, #52]	@ (80085e0 <UART_SetConfig+0x2d4>)
 80085ac:	fba3 1302 	umull	r1, r3, r3, r2
 80085b0:	095b      	lsrs	r3, r3, #5
 80085b2:	2164      	movs	r1, #100	@ 0x64
 80085b4:	fb01 f303 	mul.w	r3, r1, r3
 80085b8:	1ad3      	subs	r3, r2, r3
 80085ba:	00db      	lsls	r3, r3, #3
 80085bc:	3332      	adds	r3, #50	@ 0x32
 80085be:	4a08      	ldr	r2, [pc, #32]	@ (80085e0 <UART_SetConfig+0x2d4>)
 80085c0:	fba2 2303 	umull	r2, r3, r2, r3
 80085c4:	095b      	lsrs	r3, r3, #5
 80085c6:	f003 0207 	and.w	r2, r3, #7
 80085ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4422      	add	r2, r4
 80085d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80085d4:	e106      	b.n	80087e4 <UART_SetConfig+0x4d8>
 80085d6:	bf00      	nop
 80085d8:	40011000 	.word	0x40011000
 80085dc:	40011400 	.word	0x40011400
 80085e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80085e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80085e8:	2200      	movs	r2, #0
 80085ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80085ee:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80085f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80085f6:	4642      	mov	r2, r8
 80085f8:	464b      	mov	r3, r9
 80085fa:	1891      	adds	r1, r2, r2
 80085fc:	6239      	str	r1, [r7, #32]
 80085fe:	415b      	adcs	r3, r3
 8008600:	627b      	str	r3, [r7, #36]	@ 0x24
 8008602:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008606:	4641      	mov	r1, r8
 8008608:	1854      	adds	r4, r2, r1
 800860a:	4649      	mov	r1, r9
 800860c:	eb43 0501 	adc.w	r5, r3, r1
 8008610:	f04f 0200 	mov.w	r2, #0
 8008614:	f04f 0300 	mov.w	r3, #0
 8008618:	00eb      	lsls	r3, r5, #3
 800861a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800861e:	00e2      	lsls	r2, r4, #3
 8008620:	4614      	mov	r4, r2
 8008622:	461d      	mov	r5, r3
 8008624:	4643      	mov	r3, r8
 8008626:	18e3      	adds	r3, r4, r3
 8008628:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800862c:	464b      	mov	r3, r9
 800862e:	eb45 0303 	adc.w	r3, r5, r3
 8008632:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	2200      	movs	r2, #0
 800863e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008642:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008646:	f04f 0200 	mov.w	r2, #0
 800864a:	f04f 0300 	mov.w	r3, #0
 800864e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008652:	4629      	mov	r1, r5
 8008654:	008b      	lsls	r3, r1, #2
 8008656:	4621      	mov	r1, r4
 8008658:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800865c:	4621      	mov	r1, r4
 800865e:	008a      	lsls	r2, r1, #2
 8008660:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008664:	f7f7 fe0c 	bl	8000280 <__aeabi_uldivmod>
 8008668:	4602      	mov	r2, r0
 800866a:	460b      	mov	r3, r1
 800866c:	4b60      	ldr	r3, [pc, #384]	@ (80087f0 <UART_SetConfig+0x4e4>)
 800866e:	fba3 2302 	umull	r2, r3, r3, r2
 8008672:	095b      	lsrs	r3, r3, #5
 8008674:	011c      	lsls	r4, r3, #4
 8008676:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800867a:	2200      	movs	r2, #0
 800867c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008680:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008684:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008688:	4642      	mov	r2, r8
 800868a:	464b      	mov	r3, r9
 800868c:	1891      	adds	r1, r2, r2
 800868e:	61b9      	str	r1, [r7, #24]
 8008690:	415b      	adcs	r3, r3
 8008692:	61fb      	str	r3, [r7, #28]
 8008694:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008698:	4641      	mov	r1, r8
 800869a:	1851      	adds	r1, r2, r1
 800869c:	6139      	str	r1, [r7, #16]
 800869e:	4649      	mov	r1, r9
 80086a0:	414b      	adcs	r3, r1
 80086a2:	617b      	str	r3, [r7, #20]
 80086a4:	f04f 0200 	mov.w	r2, #0
 80086a8:	f04f 0300 	mov.w	r3, #0
 80086ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80086b0:	4659      	mov	r1, fp
 80086b2:	00cb      	lsls	r3, r1, #3
 80086b4:	4651      	mov	r1, sl
 80086b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80086ba:	4651      	mov	r1, sl
 80086bc:	00ca      	lsls	r2, r1, #3
 80086be:	4610      	mov	r0, r2
 80086c0:	4619      	mov	r1, r3
 80086c2:	4603      	mov	r3, r0
 80086c4:	4642      	mov	r2, r8
 80086c6:	189b      	adds	r3, r3, r2
 80086c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80086cc:	464b      	mov	r3, r9
 80086ce:	460a      	mov	r2, r1
 80086d0:	eb42 0303 	adc.w	r3, r2, r3
 80086d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80086d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	2200      	movs	r2, #0
 80086e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80086e2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80086e4:	f04f 0200 	mov.w	r2, #0
 80086e8:	f04f 0300 	mov.w	r3, #0
 80086ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80086f0:	4649      	mov	r1, r9
 80086f2:	008b      	lsls	r3, r1, #2
 80086f4:	4641      	mov	r1, r8
 80086f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80086fa:	4641      	mov	r1, r8
 80086fc:	008a      	lsls	r2, r1, #2
 80086fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008702:	f7f7 fdbd 	bl	8000280 <__aeabi_uldivmod>
 8008706:	4602      	mov	r2, r0
 8008708:	460b      	mov	r3, r1
 800870a:	4611      	mov	r1, r2
 800870c:	4b38      	ldr	r3, [pc, #224]	@ (80087f0 <UART_SetConfig+0x4e4>)
 800870e:	fba3 2301 	umull	r2, r3, r3, r1
 8008712:	095b      	lsrs	r3, r3, #5
 8008714:	2264      	movs	r2, #100	@ 0x64
 8008716:	fb02 f303 	mul.w	r3, r2, r3
 800871a:	1acb      	subs	r3, r1, r3
 800871c:	011b      	lsls	r3, r3, #4
 800871e:	3332      	adds	r3, #50	@ 0x32
 8008720:	4a33      	ldr	r2, [pc, #204]	@ (80087f0 <UART_SetConfig+0x4e4>)
 8008722:	fba2 2303 	umull	r2, r3, r2, r3
 8008726:	095b      	lsrs	r3, r3, #5
 8008728:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800872c:	441c      	add	r4, r3
 800872e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008732:	2200      	movs	r2, #0
 8008734:	673b      	str	r3, [r7, #112]	@ 0x70
 8008736:	677a      	str	r2, [r7, #116]	@ 0x74
 8008738:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800873c:	4642      	mov	r2, r8
 800873e:	464b      	mov	r3, r9
 8008740:	1891      	adds	r1, r2, r2
 8008742:	60b9      	str	r1, [r7, #8]
 8008744:	415b      	adcs	r3, r3
 8008746:	60fb      	str	r3, [r7, #12]
 8008748:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800874c:	4641      	mov	r1, r8
 800874e:	1851      	adds	r1, r2, r1
 8008750:	6039      	str	r1, [r7, #0]
 8008752:	4649      	mov	r1, r9
 8008754:	414b      	adcs	r3, r1
 8008756:	607b      	str	r3, [r7, #4]
 8008758:	f04f 0200 	mov.w	r2, #0
 800875c:	f04f 0300 	mov.w	r3, #0
 8008760:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008764:	4659      	mov	r1, fp
 8008766:	00cb      	lsls	r3, r1, #3
 8008768:	4651      	mov	r1, sl
 800876a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800876e:	4651      	mov	r1, sl
 8008770:	00ca      	lsls	r2, r1, #3
 8008772:	4610      	mov	r0, r2
 8008774:	4619      	mov	r1, r3
 8008776:	4603      	mov	r3, r0
 8008778:	4642      	mov	r2, r8
 800877a:	189b      	adds	r3, r3, r2
 800877c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800877e:	464b      	mov	r3, r9
 8008780:	460a      	mov	r2, r1
 8008782:	eb42 0303 	adc.w	r3, r2, r3
 8008786:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	2200      	movs	r2, #0
 8008790:	663b      	str	r3, [r7, #96]	@ 0x60
 8008792:	667a      	str	r2, [r7, #100]	@ 0x64
 8008794:	f04f 0200 	mov.w	r2, #0
 8008798:	f04f 0300 	mov.w	r3, #0
 800879c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80087a0:	4649      	mov	r1, r9
 80087a2:	008b      	lsls	r3, r1, #2
 80087a4:	4641      	mov	r1, r8
 80087a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80087aa:	4641      	mov	r1, r8
 80087ac:	008a      	lsls	r2, r1, #2
 80087ae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80087b2:	f7f7 fd65 	bl	8000280 <__aeabi_uldivmod>
 80087b6:	4602      	mov	r2, r0
 80087b8:	460b      	mov	r3, r1
 80087ba:	4b0d      	ldr	r3, [pc, #52]	@ (80087f0 <UART_SetConfig+0x4e4>)
 80087bc:	fba3 1302 	umull	r1, r3, r3, r2
 80087c0:	095b      	lsrs	r3, r3, #5
 80087c2:	2164      	movs	r1, #100	@ 0x64
 80087c4:	fb01 f303 	mul.w	r3, r1, r3
 80087c8:	1ad3      	subs	r3, r2, r3
 80087ca:	011b      	lsls	r3, r3, #4
 80087cc:	3332      	adds	r3, #50	@ 0x32
 80087ce:	4a08      	ldr	r2, [pc, #32]	@ (80087f0 <UART_SetConfig+0x4e4>)
 80087d0:	fba2 2303 	umull	r2, r3, r2, r3
 80087d4:	095b      	lsrs	r3, r3, #5
 80087d6:	f003 020f 	and.w	r2, r3, #15
 80087da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4422      	add	r2, r4
 80087e2:	609a      	str	r2, [r3, #8]
}
 80087e4:	bf00      	nop
 80087e6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80087ea:	46bd      	mov	sp, r7
 80087ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80087f0:	51eb851f 	.word	0x51eb851f

080087f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80087f4:	b084      	sub	sp, #16
 80087f6:	b580      	push	{r7, lr}
 80087f8:	b084      	sub	sp, #16
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	6078      	str	r0, [r7, #4]
 80087fe:	f107 001c 	add.w	r0, r7, #28
 8008802:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008806:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800880a:	2b01      	cmp	r3, #1
 800880c:	d123      	bne.n	8008856 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008812:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	68db      	ldr	r3, [r3, #12]
 800881e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8008822:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008826:	687a      	ldr	r2, [r7, #4]
 8008828:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008836:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800883a:	2b01      	cmp	r3, #1
 800883c:	d105      	bne.n	800884a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	68db      	ldr	r3, [r3, #12]
 8008842:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f000 f9dc 	bl	8008c08 <USB_CoreReset>
 8008850:	4603      	mov	r3, r0
 8008852:	73fb      	strb	r3, [r7, #15]
 8008854:	e01b      	b.n	800888e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	68db      	ldr	r3, [r3, #12]
 800885a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 f9d0 	bl	8008c08 <USB_CoreReset>
 8008868:	4603      	mov	r3, r0
 800886a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800886c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008870:	2b00      	cmp	r3, #0
 8008872:	d106      	bne.n	8008882 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008878:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	639a      	str	r2, [r3, #56]	@ 0x38
 8008880:	e005      	b.n	800888e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008886:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800888e:	7fbb      	ldrb	r3, [r7, #30]
 8008890:	2b01      	cmp	r3, #1
 8008892:	d10b      	bne.n	80088ac <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	689b      	ldr	r3, [r3, #8]
 8008898:	f043 0206 	orr.w	r2, r3, #6
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	689b      	ldr	r3, [r3, #8]
 80088a4:	f043 0220 	orr.w	r2, r3, #32
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80088ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3710      	adds	r7, #16
 80088b2:	46bd      	mov	sp, r7
 80088b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80088b8:	b004      	add	sp, #16
 80088ba:	4770      	bx	lr

080088bc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80088bc:	b480      	push	{r7}
 80088be:	b083      	sub	sp, #12
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	689b      	ldr	r3, [r3, #8]
 80088c8:	f043 0201 	orr.w	r2, r3, #1
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80088d0:	2300      	movs	r3, #0
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	370c      	adds	r7, #12
 80088d6:	46bd      	mov	sp, r7
 80088d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088dc:	4770      	bx	lr

080088de <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80088de:	b480      	push	{r7}
 80088e0:	b083      	sub	sp, #12
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	689b      	ldr	r3, [r3, #8]
 80088ea:	f023 0201 	bic.w	r2, r3, #1
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80088f2:	2300      	movs	r3, #0
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	370c      	adds	r7, #12
 80088f8:	46bd      	mov	sp, r7
 80088fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fe:	4770      	bx	lr

08008900 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b084      	sub	sp, #16
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	460b      	mov	r3, r1
 800890a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800890c:	2300      	movs	r3, #0
 800890e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	68db      	ldr	r3, [r3, #12]
 8008914:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800891c:	78fb      	ldrb	r3, [r7, #3]
 800891e:	2b01      	cmp	r3, #1
 8008920:	d115      	bne.n	800894e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	68db      	ldr	r3, [r3, #12]
 8008926:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800892e:	200a      	movs	r0, #10
 8008930:	f7f9 fd72 	bl	8002418 <HAL_Delay>
      ms += 10U;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	330a      	adds	r3, #10
 8008938:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f000 f956 	bl	8008bec <USB_GetMode>
 8008940:	4603      	mov	r3, r0
 8008942:	2b01      	cmp	r3, #1
 8008944:	d01e      	beq.n	8008984 <USB_SetCurrentMode+0x84>
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2bc7      	cmp	r3, #199	@ 0xc7
 800894a:	d9f0      	bls.n	800892e <USB_SetCurrentMode+0x2e>
 800894c:	e01a      	b.n	8008984 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800894e:	78fb      	ldrb	r3, [r7, #3]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d115      	bne.n	8008980 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	68db      	ldr	r3, [r3, #12]
 8008958:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008960:	200a      	movs	r0, #10
 8008962:	f7f9 fd59 	bl	8002418 <HAL_Delay>
      ms += 10U;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	330a      	adds	r3, #10
 800896a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f000 f93d 	bl	8008bec <USB_GetMode>
 8008972:	4603      	mov	r3, r0
 8008974:	2b00      	cmp	r3, #0
 8008976:	d005      	beq.n	8008984 <USB_SetCurrentMode+0x84>
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2bc7      	cmp	r3, #199	@ 0xc7
 800897c:	d9f0      	bls.n	8008960 <USB_SetCurrentMode+0x60>
 800897e:	e001      	b.n	8008984 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008980:	2301      	movs	r3, #1
 8008982:	e005      	b.n	8008990 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2bc8      	cmp	r3, #200	@ 0xc8
 8008988:	d101      	bne.n	800898e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800898a:	2301      	movs	r3, #1
 800898c:	e000      	b.n	8008990 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800898e:	2300      	movs	r3, #0
}
 8008990:	4618      	mov	r0, r3
 8008992:	3710      	adds	r7, #16
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008998:	b480      	push	{r7}
 800899a:	b085      	sub	sp, #20
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80089a2:	2300      	movs	r3, #0
 80089a4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	3301      	adds	r3, #1
 80089aa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80089b2:	d901      	bls.n	80089b8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80089b4:	2303      	movs	r3, #3
 80089b6:	e01b      	b.n	80089f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	691b      	ldr	r3, [r3, #16]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	daf2      	bge.n	80089a6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80089c0:	2300      	movs	r3, #0
 80089c2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	019b      	lsls	r3, r3, #6
 80089c8:	f043 0220 	orr.w	r2, r3, #32
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	3301      	adds	r3, #1
 80089d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80089dc:	d901      	bls.n	80089e2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80089de:	2303      	movs	r3, #3
 80089e0:	e006      	b.n	80089f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	691b      	ldr	r3, [r3, #16]
 80089e6:	f003 0320 	and.w	r3, r3, #32
 80089ea:	2b20      	cmp	r3, #32
 80089ec:	d0f0      	beq.n	80089d0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80089ee:	2300      	movs	r3, #0
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3714      	adds	r7, #20
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr

080089fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b085      	sub	sp, #20
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008a04:	2300      	movs	r3, #0
 8008a06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	3301      	adds	r3, #1
 8008a0c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008a14:	d901      	bls.n	8008a1a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008a16:	2303      	movs	r3, #3
 8008a18:	e018      	b.n	8008a4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	691b      	ldr	r3, [r3, #16]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	daf2      	bge.n	8008a08 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008a22:	2300      	movs	r3, #0
 8008a24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2210      	movs	r2, #16
 8008a2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	3301      	adds	r3, #1
 8008a30:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008a38:	d901      	bls.n	8008a3e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008a3a:	2303      	movs	r3, #3
 8008a3c:	e006      	b.n	8008a4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	691b      	ldr	r3, [r3, #16]
 8008a42:	f003 0310 	and.w	r3, r3, #16
 8008a46:	2b10      	cmp	r3, #16
 8008a48:	d0f0      	beq.n	8008a2c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008a4a:	2300      	movs	r3, #0
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3714      	adds	r7, #20
 8008a50:	46bd      	mov	sp, r7
 8008a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a56:	4770      	bx	lr

08008a58 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b089      	sub	sp, #36	@ 0x24
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	60f8      	str	r0, [r7, #12]
 8008a60:	60b9      	str	r1, [r7, #8]
 8008a62:	4611      	mov	r1, r2
 8008a64:	461a      	mov	r2, r3
 8008a66:	460b      	mov	r3, r1
 8008a68:	71fb      	strb	r3, [r7, #7]
 8008a6a:	4613      	mov	r3, r2
 8008a6c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008a76:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d123      	bne.n	8008ac6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008a7e:	88bb      	ldrh	r3, [r7, #4]
 8008a80:	3303      	adds	r3, #3
 8008a82:	089b      	lsrs	r3, r3, #2
 8008a84:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008a86:	2300      	movs	r3, #0
 8008a88:	61bb      	str	r3, [r7, #24]
 8008a8a:	e018      	b.n	8008abe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008a8c:	79fb      	ldrb	r3, [r7, #7]
 8008a8e:	031a      	lsls	r2, r3, #12
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	4413      	add	r3, r2
 8008a94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008a98:	461a      	mov	r2, r3
 8008a9a:	69fb      	ldr	r3, [r7, #28]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008aa0:	69fb      	ldr	r3, [r7, #28]
 8008aa2:	3301      	adds	r3, #1
 8008aa4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008aa6:	69fb      	ldr	r3, [r7, #28]
 8008aa8:	3301      	adds	r3, #1
 8008aaa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008aac:	69fb      	ldr	r3, [r7, #28]
 8008aae:	3301      	adds	r3, #1
 8008ab0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008ab2:	69fb      	ldr	r3, [r7, #28]
 8008ab4:	3301      	adds	r3, #1
 8008ab6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008ab8:	69bb      	ldr	r3, [r7, #24]
 8008aba:	3301      	adds	r3, #1
 8008abc:	61bb      	str	r3, [r7, #24]
 8008abe:	69ba      	ldr	r2, [r7, #24]
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	d3e2      	bcc.n	8008a8c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008ac6:	2300      	movs	r3, #0
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3724      	adds	r7, #36	@ 0x24
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr

08008ad4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b08b      	sub	sp, #44	@ 0x2c
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	60f8      	str	r0, [r7, #12]
 8008adc:	60b9      	str	r1, [r7, #8]
 8008ade:	4613      	mov	r3, r2
 8008ae0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008aea:	88fb      	ldrh	r3, [r7, #6]
 8008aec:	089b      	lsrs	r3, r3, #2
 8008aee:	b29b      	uxth	r3, r3
 8008af0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008af2:	88fb      	ldrh	r3, [r7, #6]
 8008af4:	f003 0303 	and.w	r3, r3, #3
 8008af8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008afa:	2300      	movs	r3, #0
 8008afc:	623b      	str	r3, [r7, #32]
 8008afe:	e014      	b.n	8008b2a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008b00:	69bb      	ldr	r3, [r7, #24]
 8008b02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b06:	681a      	ldr	r2, [r3, #0]
 8008b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b0a:	601a      	str	r2, [r3, #0]
    pDest++;
 8008b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b0e:	3301      	adds	r3, #1
 8008b10:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b14:	3301      	adds	r3, #1
 8008b16:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b1a:	3301      	adds	r3, #1
 8008b1c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b20:	3301      	adds	r3, #1
 8008b22:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008b24:	6a3b      	ldr	r3, [r7, #32]
 8008b26:	3301      	adds	r3, #1
 8008b28:	623b      	str	r3, [r7, #32]
 8008b2a:	6a3a      	ldr	r2, [r7, #32]
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	d3e6      	bcc.n	8008b00 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008b32:	8bfb      	ldrh	r3, [r7, #30]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d01e      	beq.n	8008b76 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008b3c:	69bb      	ldr	r3, [r7, #24]
 8008b3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b42:	461a      	mov	r2, r3
 8008b44:	f107 0310 	add.w	r3, r7, #16
 8008b48:	6812      	ldr	r2, [r2, #0]
 8008b4a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008b4c:	693a      	ldr	r2, [r7, #16]
 8008b4e:	6a3b      	ldr	r3, [r7, #32]
 8008b50:	b2db      	uxtb	r3, r3
 8008b52:	00db      	lsls	r3, r3, #3
 8008b54:	fa22 f303 	lsr.w	r3, r2, r3
 8008b58:	b2da      	uxtb	r2, r3
 8008b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b5c:	701a      	strb	r2, [r3, #0]
      i++;
 8008b5e:	6a3b      	ldr	r3, [r7, #32]
 8008b60:	3301      	adds	r3, #1
 8008b62:	623b      	str	r3, [r7, #32]
      pDest++;
 8008b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b66:	3301      	adds	r3, #1
 8008b68:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008b6a:	8bfb      	ldrh	r3, [r7, #30]
 8008b6c:	3b01      	subs	r3, #1
 8008b6e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008b70:	8bfb      	ldrh	r3, [r7, #30]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d1ea      	bne.n	8008b4c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	372c      	adds	r7, #44	@ 0x2c
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr

08008b84 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b085      	sub	sp, #20
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	695b      	ldr	r3, [r3, #20]
 8008b90:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	699b      	ldr	r3, [r3, #24]
 8008b96:	68fa      	ldr	r2, [r7, #12]
 8008b98:	4013      	ands	r3, r2
 8008b9a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3714      	adds	r7, #20
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba8:	4770      	bx	lr

08008baa <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8008baa:	b480      	push	{r7}
 8008bac:	b085      	sub	sp, #20
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
 8008bb2:	460b      	mov	r3, r1
 8008bb4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8008bba:	78fb      	ldrb	r3, [r7, #3]
 8008bbc:	015a      	lsls	r2, r3, #5
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	4413      	add	r3, r2
 8008bc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bc6:	689b      	ldr	r3, [r3, #8]
 8008bc8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8008bca:	78fb      	ldrb	r3, [r7, #3]
 8008bcc:	015a      	lsls	r2, r3, #5
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	4413      	add	r3, r2
 8008bd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bd6:	68db      	ldr	r3, [r3, #12]
 8008bd8:	68ba      	ldr	r2, [r7, #8]
 8008bda:	4013      	ands	r3, r2
 8008bdc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008bde:	68bb      	ldr	r3, [r7, #8]
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	3714      	adds	r7, #20
 8008be4:	46bd      	mov	sp, r7
 8008be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bea:	4770      	bx	lr

08008bec <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b083      	sub	sp, #12
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	695b      	ldr	r3, [r3, #20]
 8008bf8:	f003 0301 	and.w	r3, r3, #1
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	370c      	adds	r7, #12
 8008c00:	46bd      	mov	sp, r7
 8008c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c06:	4770      	bx	lr

08008c08 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b085      	sub	sp, #20
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008c10:	2300      	movs	r3, #0
 8008c12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	3301      	adds	r3, #1
 8008c18:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008c20:	d901      	bls.n	8008c26 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008c22:	2303      	movs	r3, #3
 8008c24:	e022      	b.n	8008c6c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	691b      	ldr	r3, [r3, #16]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	daf2      	bge.n	8008c14 <USB_CoreReset+0xc>

  count = 10U;
 8008c2e:	230a      	movs	r3, #10
 8008c30:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8008c32:	e002      	b.n	8008c3a <USB_CoreReset+0x32>
  {
    count--;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	3b01      	subs	r3, #1
 8008c38:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d1f9      	bne.n	8008c34 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	691b      	ldr	r3, [r3, #16]
 8008c44:	f043 0201 	orr.w	r2, r3, #1
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	3301      	adds	r3, #1
 8008c50:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008c58:	d901      	bls.n	8008c5e <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8008c5a:	2303      	movs	r3, #3
 8008c5c:	e006      	b.n	8008c6c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	691b      	ldr	r3, [r3, #16]
 8008c62:	f003 0301 	and.w	r3, r3, #1
 8008c66:	2b01      	cmp	r3, #1
 8008c68:	d0f0      	beq.n	8008c4c <USB_CoreReset+0x44>

  return HAL_OK;
 8008c6a:	2300      	movs	r3, #0
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	3714      	adds	r7, #20
 8008c70:	46bd      	mov	sp, r7
 8008c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c76:	4770      	bx	lr

08008c78 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008c78:	b084      	sub	sp, #16
 8008c7a:	b580      	push	{r7, lr}
 8008c7c:	b086      	sub	sp, #24
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	6078      	str	r0, [r7, #4]
 8008c82:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008c86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008c98:	461a      	mov	r2, r3
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ca2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cae:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cba:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	68db      	ldr	r3, [r3, #12]
 8008cc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d119      	bne.n	8008d02 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008cce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008cd2:	2b01      	cmp	r3, #1
 8008cd4:	d10a      	bne.n	8008cec <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	68fa      	ldr	r2, [r7, #12]
 8008ce0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008ce4:	f043 0304 	orr.w	r3, r3, #4
 8008ce8:	6013      	str	r3, [r2, #0]
 8008cea:	e014      	b.n	8008d16 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	68fa      	ldr	r2, [r7, #12]
 8008cf6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008cfa:	f023 0304 	bic.w	r3, r3, #4
 8008cfe:	6013      	str	r3, [r2, #0]
 8008d00:	e009      	b.n	8008d16 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	68fa      	ldr	r2, [r7, #12]
 8008d0c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008d10:	f023 0304 	bic.w	r3, r3, #4
 8008d14:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008d16:	2110      	movs	r1, #16
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f7ff fe3d 	bl	8008998 <USB_FlushTxFifo>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d001      	beq.n	8008d28 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8008d24:	2301      	movs	r3, #1
 8008d26:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f7ff fe67 	bl	80089fc <USB_FlushRxFifo>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d001      	beq.n	8008d38 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8008d34:	2301      	movs	r3, #1
 8008d36:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008d38:	2300      	movs	r3, #0
 8008d3a:	613b      	str	r3, [r7, #16]
 8008d3c:	e015      	b.n	8008d6a <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	015a      	lsls	r2, r3, #5
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	4413      	add	r3, r2
 8008d46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008d50:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008d52:	693b      	ldr	r3, [r7, #16]
 8008d54:	015a      	lsls	r2, r3, #5
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	4413      	add	r3, r2
 8008d5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d5e:	461a      	mov	r2, r3
 8008d60:	2300      	movs	r3, #0
 8008d62:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	3301      	adds	r3, #1
 8008d68:	613b      	str	r3, [r7, #16]
 8008d6a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008d6e:	461a      	mov	r2, r3
 8008d70:	693b      	ldr	r3, [r7, #16]
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d3e3      	bcc.n	8008d3e <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008d82:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	4a18      	ldr	r2, [pc, #96]	@ (8008de8 <USB_HostInit+0x170>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d10b      	bne.n	8008da4 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008d92:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	4a15      	ldr	r2, [pc, #84]	@ (8008dec <USB_HostInit+0x174>)
 8008d98:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	4a14      	ldr	r2, [pc, #80]	@ (8008df0 <USB_HostInit+0x178>)
 8008d9e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8008da2:	e009      	b.n	8008db8 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2280      	movs	r2, #128	@ 0x80
 8008da8:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	4a11      	ldr	r2, [pc, #68]	@ (8008df4 <USB_HostInit+0x17c>)
 8008dae:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	4a11      	ldr	r2, [pc, #68]	@ (8008df8 <USB_HostInit+0x180>)
 8008db4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008db8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d105      	bne.n	8008dcc <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	699b      	ldr	r3, [r3, #24]
 8008dc4:	f043 0210 	orr.w	r2, r3, #16
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	699a      	ldr	r2, [r3, #24]
 8008dd0:	4b0a      	ldr	r3, [pc, #40]	@ (8008dfc <USB_HostInit+0x184>)
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	687a      	ldr	r2, [r7, #4]
 8008dd6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8008dd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3718      	adds	r7, #24
 8008dde:	46bd      	mov	sp, r7
 8008de0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008de4:	b004      	add	sp, #16
 8008de6:	4770      	bx	lr
 8008de8:	40040000 	.word	0x40040000
 8008dec:	01000200 	.word	0x01000200
 8008df0:	00e00300 	.word	0x00e00300
 8008df4:	00600080 	.word	0x00600080
 8008df8:	004000e0 	.word	0x004000e0
 8008dfc:	a3200008 	.word	0xa3200008

08008e00 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b085      	sub	sp, #20
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
 8008e08:	460b      	mov	r3, r1
 8008e0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	68fa      	ldr	r2, [r7, #12]
 8008e1a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008e1e:	f023 0303 	bic.w	r3, r3, #3
 8008e22:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008e2a:	681a      	ldr	r2, [r3, #0]
 8008e2c:	78fb      	ldrb	r3, [r7, #3]
 8008e2e:	f003 0303 	and.w	r3, r3, #3
 8008e32:	68f9      	ldr	r1, [r7, #12]
 8008e34:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008e38:	4313      	orrs	r3, r2
 8008e3a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008e3c:	78fb      	ldrb	r3, [r7, #3]
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	d107      	bne.n	8008e52 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008e48:	461a      	mov	r2, r3
 8008e4a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008e4e:	6053      	str	r3, [r2, #4]
 8008e50:	e00c      	b.n	8008e6c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8008e52:	78fb      	ldrb	r3, [r7, #3]
 8008e54:	2b02      	cmp	r3, #2
 8008e56:	d107      	bne.n	8008e68 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008e5e:	461a      	mov	r2, r3
 8008e60:	f241 7370 	movw	r3, #6000	@ 0x1770
 8008e64:	6053      	str	r3, [r2, #4]
 8008e66:	e001      	b.n	8008e6c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	e000      	b.n	8008e6e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8008e6c:	2300      	movs	r3, #0
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3714      	adds	r7, #20
 8008e72:	46bd      	mov	sp, r7
 8008e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e78:	4770      	bx	lr

08008e7a <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8008e7a:	b580      	push	{r7, lr}
 8008e7c:	b084      	sub	sp, #16
 8008e7e:	af00      	add	r7, sp, #0
 8008e80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008e86:	2300      	movs	r3, #0
 8008e88:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8008e9a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	68fa      	ldr	r2, [r7, #12]
 8008ea0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008ea4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008ea8:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008eaa:	2064      	movs	r0, #100	@ 0x64
 8008eac:	f7f9 fab4 	bl	8002418 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	68fa      	ldr	r2, [r7, #12]
 8008eb4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008eb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ebc:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008ebe:	200a      	movs	r0, #10
 8008ec0:	f7f9 faaa 	bl	8002418 <HAL_Delay>

  return HAL_OK;
 8008ec4:	2300      	movs	r3, #0
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3710      	adds	r7, #16
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}

08008ece <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008ece:	b480      	push	{r7}
 8008ed0:	b085      	sub	sp, #20
 8008ed2:	af00      	add	r7, sp, #0
 8008ed4:	6078      	str	r0, [r7, #4]
 8008ed6:	460b      	mov	r3, r1
 8008ed8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8008ef2:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d109      	bne.n	8008f12 <USB_DriveVbus+0x44>
 8008efe:	78fb      	ldrb	r3, [r7, #3]
 8008f00:	2b01      	cmp	r3, #1
 8008f02:	d106      	bne.n	8008f12 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	68fa      	ldr	r2, [r7, #12]
 8008f08:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008f0c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008f10:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008f18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f1c:	d109      	bne.n	8008f32 <USB_DriveVbus+0x64>
 8008f1e:	78fb      	ldrb	r3, [r7, #3]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d106      	bne.n	8008f32 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	68fa      	ldr	r2, [r7, #12]
 8008f28:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008f2c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008f30:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008f32:	2300      	movs	r3, #0
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	3714      	adds	r7, #20
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr

08008f40 <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b085      	sub	sp, #20
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	0c5b      	lsrs	r3, r3, #17
 8008f5e:	f003 0303 	and.w	r3, r3, #3
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3714      	adds	r7, #20
 8008f66:	46bd      	mov	sp, r7
 8008f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6c:	4770      	bx	lr

08008f6e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8008f6e:	b480      	push	{r7}
 8008f70:	b085      	sub	sp, #20
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008f80:	689b      	ldr	r3, [r3, #8]
 8008f82:	b29b      	uxth	r3, r3
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3714      	adds	r7, #20
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8e:	4770      	bx	lr

08008f90 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b088      	sub	sp, #32
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
 8008f98:	4608      	mov	r0, r1
 8008f9a:	4611      	mov	r1, r2
 8008f9c:	461a      	mov	r2, r3
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	70fb      	strb	r3, [r7, #3]
 8008fa2:	460b      	mov	r3, r1
 8008fa4:	70bb      	strb	r3, [r7, #2]
 8008fa6:	4613      	mov	r3, r2
 8008fa8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008faa:	2300      	movs	r3, #0
 8008fac:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8008fb2:	78fb      	ldrb	r3, [r7, #3]
 8008fb4:	015a      	lsls	r2, r3, #5
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	4413      	add	r3, r2
 8008fba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008fbe:	461a      	mov	r2, r3
 8008fc0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008fc4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008fc6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008fca:	2b03      	cmp	r3, #3
 8008fcc:	d87c      	bhi.n	80090c8 <USB_HC_Init+0x138>
 8008fce:	a201      	add	r2, pc, #4	@ (adr r2, 8008fd4 <USB_HC_Init+0x44>)
 8008fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fd4:	08008fe5 	.word	0x08008fe5
 8008fd8:	0800908b 	.word	0x0800908b
 8008fdc:	08008fe5 	.word	0x08008fe5
 8008fe0:	0800904d 	.word	0x0800904d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008fe4:	78fb      	ldrb	r3, [r7, #3]
 8008fe6:	015a      	lsls	r2, r3, #5
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	4413      	add	r3, r2
 8008fec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ff0:	461a      	mov	r2, r3
 8008ff2:	f240 439d 	movw	r3, #1181	@ 0x49d
 8008ff6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008ff8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	da10      	bge.n	8009022 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009000:	78fb      	ldrb	r3, [r7, #3]
 8009002:	015a      	lsls	r2, r3, #5
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	4413      	add	r3, r2
 8009008:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800900c:	68db      	ldr	r3, [r3, #12]
 800900e:	78fa      	ldrb	r2, [r7, #3]
 8009010:	0151      	lsls	r1, r2, #5
 8009012:	693a      	ldr	r2, [r7, #16]
 8009014:	440a      	add	r2, r1
 8009016:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800901a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800901e:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8009020:	e055      	b.n	80090ce <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	4a6f      	ldr	r2, [pc, #444]	@ (80091e4 <USB_HC_Init+0x254>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d151      	bne.n	80090ce <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800902a:	78fb      	ldrb	r3, [r7, #3]
 800902c:	015a      	lsls	r2, r3, #5
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	4413      	add	r3, r2
 8009032:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009036:	68db      	ldr	r3, [r3, #12]
 8009038:	78fa      	ldrb	r2, [r7, #3]
 800903a:	0151      	lsls	r1, r2, #5
 800903c:	693a      	ldr	r2, [r7, #16]
 800903e:	440a      	add	r2, r1
 8009040:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009044:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009048:	60d3      	str	r3, [r2, #12]
      break;
 800904a:	e040      	b.n	80090ce <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800904c:	78fb      	ldrb	r3, [r7, #3]
 800904e:	015a      	lsls	r2, r3, #5
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	4413      	add	r3, r2
 8009054:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009058:	461a      	mov	r2, r3
 800905a:	f240 639d 	movw	r3, #1693	@ 0x69d
 800905e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009060:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009064:	2b00      	cmp	r3, #0
 8009066:	da34      	bge.n	80090d2 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009068:	78fb      	ldrb	r3, [r7, #3]
 800906a:	015a      	lsls	r2, r3, #5
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	4413      	add	r3, r2
 8009070:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009074:	68db      	ldr	r3, [r3, #12]
 8009076:	78fa      	ldrb	r2, [r7, #3]
 8009078:	0151      	lsls	r1, r2, #5
 800907a:	693a      	ldr	r2, [r7, #16]
 800907c:	440a      	add	r2, r1
 800907e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009082:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009086:	60d3      	str	r3, [r2, #12]
      }

      break;
 8009088:	e023      	b.n	80090d2 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800908a:	78fb      	ldrb	r3, [r7, #3]
 800908c:	015a      	lsls	r2, r3, #5
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	4413      	add	r3, r2
 8009092:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009096:	461a      	mov	r2, r3
 8009098:	f240 2325 	movw	r3, #549	@ 0x225
 800909c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800909e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	da17      	bge.n	80090d6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80090a6:	78fb      	ldrb	r3, [r7, #3]
 80090a8:	015a      	lsls	r2, r3, #5
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	4413      	add	r3, r2
 80090ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090b2:	68db      	ldr	r3, [r3, #12]
 80090b4:	78fa      	ldrb	r2, [r7, #3]
 80090b6:	0151      	lsls	r1, r2, #5
 80090b8:	693a      	ldr	r2, [r7, #16]
 80090ba:	440a      	add	r2, r1
 80090bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80090c0:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80090c4:	60d3      	str	r3, [r2, #12]
      }
      break;
 80090c6:	e006      	b.n	80090d6 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 80090c8:	2301      	movs	r3, #1
 80090ca:	77fb      	strb	r3, [r7, #31]
      break;
 80090cc:	e004      	b.n	80090d8 <USB_HC_Init+0x148>
      break;
 80090ce:	bf00      	nop
 80090d0:	e002      	b.n	80090d8 <USB_HC_Init+0x148>
      break;
 80090d2:	bf00      	nop
 80090d4:	e000      	b.n	80090d8 <USB_HC_Init+0x148>
      break;
 80090d6:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80090d8:	78fb      	ldrb	r3, [r7, #3]
 80090da:	015a      	lsls	r2, r3, #5
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	4413      	add	r3, r2
 80090e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090e4:	461a      	mov	r2, r3
 80090e6:	2300      	movs	r3, #0
 80090e8:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80090ea:	78fb      	ldrb	r3, [r7, #3]
 80090ec:	015a      	lsls	r2, r3, #5
 80090ee:	693b      	ldr	r3, [r7, #16]
 80090f0:	4413      	add	r3, r2
 80090f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090f6:	68db      	ldr	r3, [r3, #12]
 80090f8:	78fa      	ldrb	r2, [r7, #3]
 80090fa:	0151      	lsls	r1, r2, #5
 80090fc:	693a      	ldr	r2, [r7, #16]
 80090fe:	440a      	add	r2, r1
 8009100:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009104:	f043 0302 	orr.w	r3, r3, #2
 8009108:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009110:	699a      	ldr	r2, [r3, #24]
 8009112:	78fb      	ldrb	r3, [r7, #3]
 8009114:	f003 030f 	and.w	r3, r3, #15
 8009118:	2101      	movs	r1, #1
 800911a:	fa01 f303 	lsl.w	r3, r1, r3
 800911e:	6939      	ldr	r1, [r7, #16]
 8009120:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8009124:	4313      	orrs	r3, r2
 8009126:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	699b      	ldr	r3, [r3, #24]
 800912c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8009134:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009138:	2b00      	cmp	r3, #0
 800913a:	da03      	bge.n	8009144 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800913c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009140:	61bb      	str	r3, [r7, #24]
 8009142:	e001      	b.n	8009148 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8009144:	2300      	movs	r3, #0
 8009146:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f7ff fef9 	bl	8008f40 <USB_GetHostSpeed>
 800914e:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8009150:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009154:	2b02      	cmp	r3, #2
 8009156:	d106      	bne.n	8009166 <USB_HC_Init+0x1d6>
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	2b02      	cmp	r3, #2
 800915c:	d003      	beq.n	8009166 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800915e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8009162:	617b      	str	r3, [r7, #20]
 8009164:	e001      	b.n	800916a <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8009166:	2300      	movs	r3, #0
 8009168:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800916a:	787b      	ldrb	r3, [r7, #1]
 800916c:	059b      	lsls	r3, r3, #22
 800916e:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009172:	78bb      	ldrb	r3, [r7, #2]
 8009174:	02db      	lsls	r3, r3, #11
 8009176:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800917a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800917c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009180:	049b      	lsls	r3, r3, #18
 8009182:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009186:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8009188:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800918a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800918e:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8009190:	69bb      	ldr	r3, [r7, #24]
 8009192:	431a      	orrs	r2, r3
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009198:	78fa      	ldrb	r2, [r7, #3]
 800919a:	0151      	lsls	r1, r2, #5
 800919c:	693a      	ldr	r2, [r7, #16]
 800919e:	440a      	add	r2, r1
 80091a0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80091a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80091a8:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80091aa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80091ae:	2b03      	cmp	r3, #3
 80091b0:	d003      	beq.n	80091ba <USB_HC_Init+0x22a>
 80091b2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80091b6:	2b01      	cmp	r3, #1
 80091b8:	d10f      	bne.n	80091da <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80091ba:	78fb      	ldrb	r3, [r7, #3]
 80091bc:	015a      	lsls	r2, r3, #5
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	4413      	add	r3, r2
 80091c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	78fa      	ldrb	r2, [r7, #3]
 80091ca:	0151      	lsls	r1, r2, #5
 80091cc:	693a      	ldr	r2, [r7, #16]
 80091ce:	440a      	add	r2, r1
 80091d0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80091d4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80091d8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80091da:	7ffb      	ldrb	r3, [r7, #31]
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3720      	adds	r7, #32
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}
 80091e4:	40040000 	.word	0x40040000

080091e8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b08c      	sub	sp, #48	@ 0x30
 80091ec:	af02      	add	r7, sp, #8
 80091ee:	60f8      	str	r0, [r7, #12]
 80091f0:	60b9      	str	r1, [r7, #8]
 80091f2:	4613      	mov	r3, r2
 80091f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	785b      	ldrb	r3, [r3, #1]
 80091fe:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8009200:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009204:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	4a5d      	ldr	r2, [pc, #372]	@ (8009380 <USB_HC_StartXfer+0x198>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d12f      	bne.n	800926e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800920e:	79fb      	ldrb	r3, [r7, #7]
 8009210:	2b01      	cmp	r3, #1
 8009212:	d11c      	bne.n	800924e <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	7c9b      	ldrb	r3, [r3, #18]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d003      	beq.n	8009224 <USB_HC_StartXfer+0x3c>
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	7c9b      	ldrb	r3, [r3, #18]
 8009220:	2b02      	cmp	r3, #2
 8009222:	d124      	bne.n	800926e <USB_HC_StartXfer+0x86>
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	799b      	ldrb	r3, [r3, #6]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d120      	bne.n	800926e <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800922c:	69fb      	ldr	r3, [r7, #28]
 800922e:	015a      	lsls	r2, r3, #5
 8009230:	6a3b      	ldr	r3, [r7, #32]
 8009232:	4413      	add	r3, r2
 8009234:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009238:	68db      	ldr	r3, [r3, #12]
 800923a:	69fa      	ldr	r2, [r7, #28]
 800923c:	0151      	lsls	r1, r2, #5
 800923e:	6a3a      	ldr	r2, [r7, #32]
 8009240:	440a      	add	r2, r1
 8009242:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009246:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800924a:	60d3      	str	r3, [r2, #12]
 800924c:	e00f      	b.n	800926e <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	791b      	ldrb	r3, [r3, #4]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d10b      	bne.n	800926e <USB_HC_StartXfer+0x86>
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	795b      	ldrb	r3, [r3, #5]
 800925a:	2b01      	cmp	r3, #1
 800925c:	d107      	bne.n	800926e <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	785b      	ldrb	r3, [r3, #1]
 8009262:	4619      	mov	r1, r3
 8009264:	68f8      	ldr	r0, [r7, #12]
 8009266:	f000 fb6b 	bl	8009940 <USB_DoPing>
        return HAL_OK;
 800926a:	2300      	movs	r3, #0
 800926c:	e232      	b.n	80096d4 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	799b      	ldrb	r3, [r3, #6]
 8009272:	2b01      	cmp	r3, #1
 8009274:	d158      	bne.n	8009328 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8009276:	2301      	movs	r3, #1
 8009278:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	78db      	ldrb	r3, [r3, #3]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d007      	beq.n	8009292 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009282:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009284:	68ba      	ldr	r2, [r7, #8]
 8009286:	8a92      	ldrh	r2, [r2, #20]
 8009288:	fb03 f202 	mul.w	r2, r3, r2
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	61da      	str	r2, [r3, #28]
 8009290:	e07c      	b.n	800938c <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	7c9b      	ldrb	r3, [r3, #18]
 8009296:	2b01      	cmp	r3, #1
 8009298:	d130      	bne.n	80092fc <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	6a1b      	ldr	r3, [r3, #32]
 800929e:	2bbc      	cmp	r3, #188	@ 0xbc
 80092a0:	d918      	bls.n	80092d4 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	8a9b      	ldrh	r3, [r3, #20]
 80092a6:	461a      	mov	r2, r3
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	69da      	ldr	r2, [r3, #28]
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	68db      	ldr	r3, [r3, #12]
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	d003      	beq.n	80092c4 <USB_HC_StartXfer+0xdc>
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	68db      	ldr	r3, [r3, #12]
 80092c0:	2b02      	cmp	r3, #2
 80092c2:	d103      	bne.n	80092cc <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	2202      	movs	r2, #2
 80092c8:	60da      	str	r2, [r3, #12]
 80092ca:	e05f      	b.n	800938c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	2201      	movs	r2, #1
 80092d0:	60da      	str	r2, [r3, #12]
 80092d2:	e05b      	b.n	800938c <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	6a1a      	ldr	r2, [r3, #32]
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	68db      	ldr	r3, [r3, #12]
 80092e0:	2b01      	cmp	r3, #1
 80092e2:	d007      	beq.n	80092f4 <USB_HC_StartXfer+0x10c>
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	68db      	ldr	r3, [r3, #12]
 80092e8:	2b02      	cmp	r3, #2
 80092ea:	d003      	beq.n	80092f4 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	2204      	movs	r2, #4
 80092f0:	60da      	str	r2, [r3, #12]
 80092f2:	e04b      	b.n	800938c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	2203      	movs	r2, #3
 80092f8:	60da      	str	r2, [r3, #12]
 80092fa:	e047      	b.n	800938c <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80092fc:	79fb      	ldrb	r3, [r7, #7]
 80092fe:	2b01      	cmp	r3, #1
 8009300:	d10d      	bne.n	800931e <USB_HC_StartXfer+0x136>
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	6a1b      	ldr	r3, [r3, #32]
 8009306:	68ba      	ldr	r2, [r7, #8]
 8009308:	8a92      	ldrh	r2, [r2, #20]
 800930a:	4293      	cmp	r3, r2
 800930c:	d907      	bls.n	800931e <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800930e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009310:	68ba      	ldr	r2, [r7, #8]
 8009312:	8a92      	ldrh	r2, [r2, #20]
 8009314:	fb03 f202 	mul.w	r2, r3, r2
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	61da      	str	r2, [r3, #28]
 800931c:	e036      	b.n	800938c <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	6a1a      	ldr	r2, [r3, #32]
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	61da      	str	r2, [r3, #28]
 8009326:	e031      	b.n	800938c <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	6a1b      	ldr	r3, [r3, #32]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d018      	beq.n	8009362 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	6a1b      	ldr	r3, [r3, #32]
 8009334:	68ba      	ldr	r2, [r7, #8]
 8009336:	8a92      	ldrh	r2, [r2, #20]
 8009338:	4413      	add	r3, r2
 800933a:	3b01      	subs	r3, #1
 800933c:	68ba      	ldr	r2, [r7, #8]
 800933e:	8a92      	ldrh	r2, [r2, #20]
 8009340:	fbb3 f3f2 	udiv	r3, r3, r2
 8009344:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8009346:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8009348:	8b7b      	ldrh	r3, [r7, #26]
 800934a:	429a      	cmp	r2, r3
 800934c:	d90b      	bls.n	8009366 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800934e:	8b7b      	ldrh	r3, [r7, #26]
 8009350:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009352:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009354:	68ba      	ldr	r2, [r7, #8]
 8009356:	8a92      	ldrh	r2, [r2, #20]
 8009358:	fb03 f202 	mul.w	r2, r3, r2
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	61da      	str	r2, [r3, #28]
 8009360:	e001      	b.n	8009366 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8009362:	2301      	movs	r3, #1
 8009364:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	78db      	ldrb	r3, [r3, #3]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d00a      	beq.n	8009384 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800936e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009370:	68ba      	ldr	r2, [r7, #8]
 8009372:	8a92      	ldrh	r2, [r2, #20]
 8009374:	fb03 f202 	mul.w	r2, r3, r2
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	61da      	str	r2, [r3, #28]
 800937c:	e006      	b.n	800938c <USB_HC_StartXfer+0x1a4>
 800937e:	bf00      	nop
 8009380:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	6a1a      	ldr	r2, [r3, #32]
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	69db      	ldr	r3, [r3, #28]
 8009390:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009394:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009396:	04d9      	lsls	r1, r3, #19
 8009398:	4ba3      	ldr	r3, [pc, #652]	@ (8009628 <USB_HC_StartXfer+0x440>)
 800939a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800939c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	7d9b      	ldrb	r3, [r3, #22]
 80093a2:	075b      	lsls	r3, r3, #29
 80093a4:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80093a8:	69f9      	ldr	r1, [r7, #28]
 80093aa:	0148      	lsls	r0, r1, #5
 80093ac:	6a39      	ldr	r1, [r7, #32]
 80093ae:	4401      	add	r1, r0
 80093b0:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80093b4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80093b6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80093b8:	79fb      	ldrb	r3, [r7, #7]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d009      	beq.n	80093d2 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	6999      	ldr	r1, [r3, #24]
 80093c2:	69fb      	ldr	r3, [r7, #28]
 80093c4:	015a      	lsls	r2, r3, #5
 80093c6:	6a3b      	ldr	r3, [r7, #32]
 80093c8:	4413      	add	r3, r2
 80093ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80093ce:	460a      	mov	r2, r1
 80093d0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80093d2:	6a3b      	ldr	r3, [r7, #32]
 80093d4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80093d8:	689b      	ldr	r3, [r3, #8]
 80093da:	f003 0301 	and.w	r3, r3, #1
 80093de:	2b00      	cmp	r3, #0
 80093e0:	bf0c      	ite	eq
 80093e2:	2301      	moveq	r3, #1
 80093e4:	2300      	movne	r3, #0
 80093e6:	b2db      	uxtb	r3, r3
 80093e8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80093ea:	69fb      	ldr	r3, [r7, #28]
 80093ec:	015a      	lsls	r2, r3, #5
 80093ee:	6a3b      	ldr	r3, [r7, #32]
 80093f0:	4413      	add	r3, r2
 80093f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	69fa      	ldr	r2, [r7, #28]
 80093fa:	0151      	lsls	r1, r2, #5
 80093fc:	6a3a      	ldr	r2, [r7, #32]
 80093fe:	440a      	add	r2, r1
 8009400:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009404:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009408:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800940a:	69fb      	ldr	r3, [r7, #28]
 800940c:	015a      	lsls	r2, r3, #5
 800940e:	6a3b      	ldr	r3, [r7, #32]
 8009410:	4413      	add	r3, r2
 8009412:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009416:	681a      	ldr	r2, [r3, #0]
 8009418:	7e7b      	ldrb	r3, [r7, #25]
 800941a:	075b      	lsls	r3, r3, #29
 800941c:	69f9      	ldr	r1, [r7, #28]
 800941e:	0148      	lsls	r0, r1, #5
 8009420:	6a39      	ldr	r1, [r7, #32]
 8009422:	4401      	add	r1, r0
 8009424:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8009428:	4313      	orrs	r3, r2
 800942a:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	799b      	ldrb	r3, [r3, #6]
 8009430:	2b01      	cmp	r3, #1
 8009432:	f040 80c3 	bne.w	80095bc <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	7c5b      	ldrb	r3, [r3, #17]
 800943a:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800943c:	68ba      	ldr	r2, [r7, #8]
 800943e:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8009440:	4313      	orrs	r3, r2
 8009442:	69fa      	ldr	r2, [r7, #28]
 8009444:	0151      	lsls	r1, r2, #5
 8009446:	6a3a      	ldr	r2, [r7, #32]
 8009448:	440a      	add	r2, r1
 800944a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800944e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8009452:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8009454:	69fb      	ldr	r3, [r7, #28]
 8009456:	015a      	lsls	r2, r3, #5
 8009458:	6a3b      	ldr	r3, [r7, #32]
 800945a:	4413      	add	r3, r2
 800945c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009460:	68db      	ldr	r3, [r3, #12]
 8009462:	69fa      	ldr	r2, [r7, #28]
 8009464:	0151      	lsls	r1, r2, #5
 8009466:	6a3a      	ldr	r2, [r7, #32]
 8009468:	440a      	add	r2, r1
 800946a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800946e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009472:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	79db      	ldrb	r3, [r3, #7]
 8009478:	2b01      	cmp	r3, #1
 800947a:	d123      	bne.n	80094c4 <USB_HC_StartXfer+0x2dc>
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	78db      	ldrb	r3, [r3, #3]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d11f      	bne.n	80094c4 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8009484:	69fb      	ldr	r3, [r7, #28]
 8009486:	015a      	lsls	r2, r3, #5
 8009488:	6a3b      	ldr	r3, [r7, #32]
 800948a:	4413      	add	r3, r2
 800948c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009490:	685b      	ldr	r3, [r3, #4]
 8009492:	69fa      	ldr	r2, [r7, #28]
 8009494:	0151      	lsls	r1, r2, #5
 8009496:	6a3a      	ldr	r2, [r7, #32]
 8009498:	440a      	add	r2, r1
 800949a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800949e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80094a2:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80094a4:	69fb      	ldr	r3, [r7, #28]
 80094a6:	015a      	lsls	r2, r3, #5
 80094a8:	6a3b      	ldr	r3, [r7, #32]
 80094aa:	4413      	add	r3, r2
 80094ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80094b0:	68db      	ldr	r3, [r3, #12]
 80094b2:	69fa      	ldr	r2, [r7, #28]
 80094b4:	0151      	lsls	r1, r2, #5
 80094b6:	6a3a      	ldr	r2, [r7, #32]
 80094b8:	440a      	add	r2, r1
 80094ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80094be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80094c2:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	7c9b      	ldrb	r3, [r3, #18]
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d003      	beq.n	80094d4 <USB_HC_StartXfer+0x2ec>
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	7c9b      	ldrb	r3, [r3, #18]
 80094d0:	2b03      	cmp	r3, #3
 80094d2:	d117      	bne.n	8009504 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80094d8:	2b01      	cmp	r3, #1
 80094da:	d113      	bne.n	8009504 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	78db      	ldrb	r3, [r3, #3]
 80094e0:	2b01      	cmp	r3, #1
 80094e2:	d10f      	bne.n	8009504 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80094e4:	69fb      	ldr	r3, [r7, #28]
 80094e6:	015a      	lsls	r2, r3, #5
 80094e8:	6a3b      	ldr	r3, [r7, #32]
 80094ea:	4413      	add	r3, r2
 80094ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80094f0:	685b      	ldr	r3, [r3, #4]
 80094f2:	69fa      	ldr	r2, [r7, #28]
 80094f4:	0151      	lsls	r1, r2, #5
 80094f6:	6a3a      	ldr	r2, [r7, #32]
 80094f8:	440a      	add	r2, r1
 80094fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80094fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009502:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	7c9b      	ldrb	r3, [r3, #18]
 8009508:	2b01      	cmp	r3, #1
 800950a:	d162      	bne.n	80095d2 <USB_HC_StartXfer+0x3ea>
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	78db      	ldrb	r3, [r3, #3]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d15e      	bne.n	80095d2 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	68db      	ldr	r3, [r3, #12]
 8009518:	3b01      	subs	r3, #1
 800951a:	2b03      	cmp	r3, #3
 800951c:	d858      	bhi.n	80095d0 <USB_HC_StartXfer+0x3e8>
 800951e:	a201      	add	r2, pc, #4	@ (adr r2, 8009524 <USB_HC_StartXfer+0x33c>)
 8009520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009524:	08009535 	.word	0x08009535
 8009528:	08009557 	.word	0x08009557
 800952c:	08009579 	.word	0x08009579
 8009530:	0800959b 	.word	0x0800959b
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8009534:	69fb      	ldr	r3, [r7, #28]
 8009536:	015a      	lsls	r2, r3, #5
 8009538:	6a3b      	ldr	r3, [r7, #32]
 800953a:	4413      	add	r3, r2
 800953c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009540:	685b      	ldr	r3, [r3, #4]
 8009542:	69fa      	ldr	r2, [r7, #28]
 8009544:	0151      	lsls	r1, r2, #5
 8009546:	6a3a      	ldr	r2, [r7, #32]
 8009548:	440a      	add	r2, r1
 800954a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800954e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009552:	6053      	str	r3, [r2, #4]
          break;
 8009554:	e03d      	b.n	80095d2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8009556:	69fb      	ldr	r3, [r7, #28]
 8009558:	015a      	lsls	r2, r3, #5
 800955a:	6a3b      	ldr	r3, [r7, #32]
 800955c:	4413      	add	r3, r2
 800955e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	69fa      	ldr	r2, [r7, #28]
 8009566:	0151      	lsls	r1, r2, #5
 8009568:	6a3a      	ldr	r2, [r7, #32]
 800956a:	440a      	add	r2, r1
 800956c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009570:	f043 030e 	orr.w	r3, r3, #14
 8009574:	6053      	str	r3, [r2, #4]
          break;
 8009576:	e02c      	b.n	80095d2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8009578:	69fb      	ldr	r3, [r7, #28]
 800957a:	015a      	lsls	r2, r3, #5
 800957c:	6a3b      	ldr	r3, [r7, #32]
 800957e:	4413      	add	r3, r2
 8009580:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009584:	685b      	ldr	r3, [r3, #4]
 8009586:	69fa      	ldr	r2, [r7, #28]
 8009588:	0151      	lsls	r1, r2, #5
 800958a:	6a3a      	ldr	r2, [r7, #32]
 800958c:	440a      	add	r2, r1
 800958e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009592:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009596:	6053      	str	r3, [r2, #4]
          break;
 8009598:	e01b      	b.n	80095d2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800959a:	69fb      	ldr	r3, [r7, #28]
 800959c:	015a      	lsls	r2, r3, #5
 800959e:	6a3b      	ldr	r3, [r7, #32]
 80095a0:	4413      	add	r3, r2
 80095a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80095a6:	685b      	ldr	r3, [r3, #4]
 80095a8:	69fa      	ldr	r2, [r7, #28]
 80095aa:	0151      	lsls	r1, r2, #5
 80095ac:	6a3a      	ldr	r2, [r7, #32]
 80095ae:	440a      	add	r2, r1
 80095b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80095b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80095b8:	6053      	str	r3, [r2, #4]
          break;
 80095ba:	e00a      	b.n	80095d2 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80095bc:	69fb      	ldr	r3, [r7, #28]
 80095be:	015a      	lsls	r2, r3, #5
 80095c0:	6a3b      	ldr	r3, [r7, #32]
 80095c2:	4413      	add	r3, r2
 80095c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80095c8:	461a      	mov	r2, r3
 80095ca:	2300      	movs	r3, #0
 80095cc:	6053      	str	r3, [r2, #4]
 80095ce:	e000      	b.n	80095d2 <USB_HC_StartXfer+0x3ea>
          break;
 80095d0:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80095d2:	69fb      	ldr	r3, [r7, #28]
 80095d4:	015a      	lsls	r2, r3, #5
 80095d6:	6a3b      	ldr	r3, [r7, #32]
 80095d8:	4413      	add	r3, r2
 80095da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80095e8:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	78db      	ldrb	r3, [r3, #3]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d004      	beq.n	80095fc <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80095f8:	613b      	str	r3, [r7, #16]
 80095fa:	e003      	b.n	8009604 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009602:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800960a:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800960c:	69fb      	ldr	r3, [r7, #28]
 800960e:	015a      	lsls	r2, r3, #5
 8009610:	6a3b      	ldr	r3, [r7, #32]
 8009612:	4413      	add	r3, r2
 8009614:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009618:	461a      	mov	r2, r3
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800961e:	79fb      	ldrb	r3, [r7, #7]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d003      	beq.n	800962c <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8009624:	2300      	movs	r3, #0
 8009626:	e055      	b.n	80096d4 <USB_HC_StartXfer+0x4ec>
 8009628:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	78db      	ldrb	r3, [r3, #3]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d14e      	bne.n	80096d2 <USB_HC_StartXfer+0x4ea>
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	6a1b      	ldr	r3, [r3, #32]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d04a      	beq.n	80096d2 <USB_HC_StartXfer+0x4ea>
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	79db      	ldrb	r3, [r3, #7]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d146      	bne.n	80096d2 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	7c9b      	ldrb	r3, [r3, #18]
 8009648:	2b03      	cmp	r3, #3
 800964a:	d831      	bhi.n	80096b0 <USB_HC_StartXfer+0x4c8>
 800964c:	a201      	add	r2, pc, #4	@ (adr r2, 8009654 <USB_HC_StartXfer+0x46c>)
 800964e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009652:	bf00      	nop
 8009654:	08009665 	.word	0x08009665
 8009658:	08009689 	.word	0x08009689
 800965c:	08009665 	.word	0x08009665
 8009660:	08009689 	.word	0x08009689
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	6a1b      	ldr	r3, [r3, #32]
 8009668:	3303      	adds	r3, #3
 800966a:	089b      	lsrs	r3, r3, #2
 800966c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800966e:	8afa      	ldrh	r2, [r7, #22]
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009674:	b29b      	uxth	r3, r3
 8009676:	429a      	cmp	r2, r3
 8009678:	d91c      	bls.n	80096b4 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	699b      	ldr	r3, [r3, #24]
 800967e:	f043 0220 	orr.w	r2, r3, #32
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	619a      	str	r2, [r3, #24]
        }
        break;
 8009686:	e015      	b.n	80096b4 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	6a1b      	ldr	r3, [r3, #32]
 800968c:	3303      	adds	r3, #3
 800968e:	089b      	lsrs	r3, r3, #2
 8009690:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8009692:	8afa      	ldrh	r2, [r7, #22]
 8009694:	6a3b      	ldr	r3, [r7, #32]
 8009696:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800969a:	691b      	ldr	r3, [r3, #16]
 800969c:	b29b      	uxth	r3, r3
 800969e:	429a      	cmp	r2, r3
 80096a0:	d90a      	bls.n	80096b8 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	699b      	ldr	r3, [r3, #24]
 80096a6:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	619a      	str	r2, [r3, #24]
        }
        break;
 80096ae:	e003      	b.n	80096b8 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 80096b0:	bf00      	nop
 80096b2:	e002      	b.n	80096ba <USB_HC_StartXfer+0x4d2>
        break;
 80096b4:	bf00      	nop
 80096b6:	e000      	b.n	80096ba <USB_HC_StartXfer+0x4d2>
        break;
 80096b8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	6999      	ldr	r1, [r3, #24]
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	785a      	ldrb	r2, [r3, #1]
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	6a1b      	ldr	r3, [r3, #32]
 80096c6:	b29b      	uxth	r3, r3
 80096c8:	2000      	movs	r0, #0
 80096ca:	9000      	str	r0, [sp, #0]
 80096cc:	68f8      	ldr	r0, [r7, #12]
 80096ce:	f7ff f9c3 	bl	8008a58 <USB_WritePacket>
  }

  return HAL_OK;
 80096d2:	2300      	movs	r3, #0
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	3728      	adds	r7, #40	@ 0x28
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}

080096dc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80096dc:	b480      	push	{r7}
 80096de:	b085      	sub	sp, #20
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80096ee:	695b      	ldr	r3, [r3, #20]
 80096f0:	b29b      	uxth	r3, r3
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3714      	adds	r7, #20
 80096f6:	46bd      	mov	sp, r7
 80096f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fc:	4770      	bx	lr

080096fe <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80096fe:	b480      	push	{r7}
 8009700:	b089      	sub	sp, #36	@ 0x24
 8009702:	af00      	add	r7, sp, #0
 8009704:	6078      	str	r0, [r7, #4]
 8009706:	460b      	mov	r3, r1
 8009708:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800970e:	78fb      	ldrb	r3, [r7, #3]
 8009710:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8009712:	2300      	movs	r3, #0
 8009714:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009716:	69bb      	ldr	r3, [r7, #24]
 8009718:	015a      	lsls	r2, r3, #5
 800971a:	69fb      	ldr	r3, [r7, #28]
 800971c:	4413      	add	r3, r2
 800971e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	0c9b      	lsrs	r3, r3, #18
 8009726:	f003 0303 	and.w	r3, r3, #3
 800972a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800972c:	69bb      	ldr	r3, [r7, #24]
 800972e:	015a      	lsls	r2, r3, #5
 8009730:	69fb      	ldr	r3, [r7, #28]
 8009732:	4413      	add	r3, r2
 8009734:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	0fdb      	lsrs	r3, r3, #31
 800973c:	f003 0301 	and.w	r3, r3, #1
 8009740:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8009742:	69bb      	ldr	r3, [r7, #24]
 8009744:	015a      	lsls	r2, r3, #5
 8009746:	69fb      	ldr	r3, [r7, #28]
 8009748:	4413      	add	r3, r2
 800974a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	0fdb      	lsrs	r3, r3, #31
 8009752:	f003 0301 	and.w	r3, r3, #1
 8009756:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	689b      	ldr	r3, [r3, #8]
 800975c:	f003 0320 	and.w	r3, r3, #32
 8009760:	2b20      	cmp	r3, #32
 8009762:	d10d      	bne.n	8009780 <USB_HC_Halt+0x82>
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d10a      	bne.n	8009780 <USB_HC_Halt+0x82>
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d005      	beq.n	800977c <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	2b01      	cmp	r3, #1
 8009774:	d002      	beq.n	800977c <USB_HC_Halt+0x7e>
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	2b03      	cmp	r3, #3
 800977a:	d101      	bne.n	8009780 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800977c:	2300      	movs	r3, #0
 800977e:	e0d8      	b.n	8009932 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009780:	697b      	ldr	r3, [r7, #20]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d002      	beq.n	800978c <USB_HC_Halt+0x8e>
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	2b02      	cmp	r3, #2
 800978a:	d173      	bne.n	8009874 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800978c:	69bb      	ldr	r3, [r7, #24]
 800978e:	015a      	lsls	r2, r3, #5
 8009790:	69fb      	ldr	r3, [r7, #28]
 8009792:	4413      	add	r3, r2
 8009794:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	69ba      	ldr	r2, [r7, #24]
 800979c:	0151      	lsls	r1, r2, #5
 800979e:	69fa      	ldr	r2, [r7, #28]
 80097a0:	440a      	add	r2, r1
 80097a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80097a6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80097aa:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	689b      	ldr	r3, [r3, #8]
 80097b0:	f003 0320 	and.w	r3, r3, #32
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d14a      	bne.n	800984e <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097bc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d133      	bne.n	800982c <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80097c4:	69bb      	ldr	r3, [r7, #24]
 80097c6:	015a      	lsls	r2, r3, #5
 80097c8:	69fb      	ldr	r3, [r7, #28]
 80097ca:	4413      	add	r3, r2
 80097cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	69ba      	ldr	r2, [r7, #24]
 80097d4:	0151      	lsls	r1, r2, #5
 80097d6:	69fa      	ldr	r2, [r7, #28]
 80097d8:	440a      	add	r2, r1
 80097da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80097de:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80097e2:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80097e4:	69bb      	ldr	r3, [r7, #24]
 80097e6:	015a      	lsls	r2, r3, #5
 80097e8:	69fb      	ldr	r3, [r7, #28]
 80097ea:	4413      	add	r3, r2
 80097ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	69ba      	ldr	r2, [r7, #24]
 80097f4:	0151      	lsls	r1, r2, #5
 80097f6:	69fa      	ldr	r2, [r7, #28]
 80097f8:	440a      	add	r2, r1
 80097fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80097fe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009802:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	3301      	adds	r3, #1
 8009808:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009810:	d82e      	bhi.n	8009870 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009812:	69bb      	ldr	r3, [r7, #24]
 8009814:	015a      	lsls	r2, r3, #5
 8009816:	69fb      	ldr	r3, [r7, #28]
 8009818:	4413      	add	r3, r2
 800981a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009824:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009828:	d0ec      	beq.n	8009804 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800982a:	e081      	b.n	8009930 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800982c:	69bb      	ldr	r3, [r7, #24]
 800982e:	015a      	lsls	r2, r3, #5
 8009830:	69fb      	ldr	r3, [r7, #28]
 8009832:	4413      	add	r3, r2
 8009834:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	69ba      	ldr	r2, [r7, #24]
 800983c:	0151      	lsls	r1, r2, #5
 800983e:	69fa      	ldr	r2, [r7, #28]
 8009840:	440a      	add	r2, r1
 8009842:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009846:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800984a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800984c:	e070      	b.n	8009930 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800984e:	69bb      	ldr	r3, [r7, #24]
 8009850:	015a      	lsls	r2, r3, #5
 8009852:	69fb      	ldr	r3, [r7, #28]
 8009854:	4413      	add	r3, r2
 8009856:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	69ba      	ldr	r2, [r7, #24]
 800985e:	0151      	lsls	r1, r2, #5
 8009860:	69fa      	ldr	r2, [r7, #28]
 8009862:	440a      	add	r2, r1
 8009864:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009868:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800986c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800986e:	e05f      	b.n	8009930 <USB_HC_Halt+0x232>
            break;
 8009870:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009872:	e05d      	b.n	8009930 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009874:	69bb      	ldr	r3, [r7, #24]
 8009876:	015a      	lsls	r2, r3, #5
 8009878:	69fb      	ldr	r3, [r7, #28]
 800987a:	4413      	add	r3, r2
 800987c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	69ba      	ldr	r2, [r7, #24]
 8009884:	0151      	lsls	r1, r2, #5
 8009886:	69fa      	ldr	r2, [r7, #28]
 8009888:	440a      	add	r2, r1
 800988a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800988e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009892:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009894:	69fb      	ldr	r3, [r7, #28]
 8009896:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800989a:	691b      	ldr	r3, [r3, #16]
 800989c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d133      	bne.n	800990c <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80098a4:	69bb      	ldr	r3, [r7, #24]
 80098a6:	015a      	lsls	r2, r3, #5
 80098a8:	69fb      	ldr	r3, [r7, #28]
 80098aa:	4413      	add	r3, r2
 80098ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	69ba      	ldr	r2, [r7, #24]
 80098b4:	0151      	lsls	r1, r2, #5
 80098b6:	69fa      	ldr	r2, [r7, #28]
 80098b8:	440a      	add	r2, r1
 80098ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80098be:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80098c2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80098c4:	69bb      	ldr	r3, [r7, #24]
 80098c6:	015a      	lsls	r2, r3, #5
 80098c8:	69fb      	ldr	r3, [r7, #28]
 80098ca:	4413      	add	r3, r2
 80098cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	69ba      	ldr	r2, [r7, #24]
 80098d4:	0151      	lsls	r1, r2, #5
 80098d6:	69fa      	ldr	r2, [r7, #28]
 80098d8:	440a      	add	r2, r1
 80098da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80098de:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80098e2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	3301      	adds	r3, #1
 80098e8:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80098f0:	d81d      	bhi.n	800992e <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80098f2:	69bb      	ldr	r3, [r7, #24]
 80098f4:	015a      	lsls	r2, r3, #5
 80098f6:	69fb      	ldr	r3, [r7, #28]
 80098f8:	4413      	add	r3, r2
 80098fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009904:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009908:	d0ec      	beq.n	80098e4 <USB_HC_Halt+0x1e6>
 800990a:	e011      	b.n	8009930 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800990c:	69bb      	ldr	r3, [r7, #24]
 800990e:	015a      	lsls	r2, r3, #5
 8009910:	69fb      	ldr	r3, [r7, #28]
 8009912:	4413      	add	r3, r2
 8009914:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	69ba      	ldr	r2, [r7, #24]
 800991c:	0151      	lsls	r1, r2, #5
 800991e:	69fa      	ldr	r2, [r7, #28]
 8009920:	440a      	add	r2, r1
 8009922:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009926:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800992a:	6013      	str	r3, [r2, #0]
 800992c:	e000      	b.n	8009930 <USB_HC_Halt+0x232>
          break;
 800992e:	bf00      	nop
    }
  }

  return HAL_OK;
 8009930:	2300      	movs	r3, #0
}
 8009932:	4618      	mov	r0, r3
 8009934:	3724      	adds	r7, #36	@ 0x24
 8009936:	46bd      	mov	sp, r7
 8009938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993c:	4770      	bx	lr
	...

08009940 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009940:	b480      	push	{r7}
 8009942:	b087      	sub	sp, #28
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
 8009948:	460b      	mov	r3, r1
 800994a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009950:	78fb      	ldrb	r3, [r7, #3]
 8009952:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8009954:	2301      	movs	r3, #1
 8009956:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	04da      	lsls	r2, r3, #19
 800995c:	4b15      	ldr	r3, [pc, #84]	@ (80099b4 <USB_DoPing+0x74>)
 800995e:	4013      	ands	r3, r2
 8009960:	693a      	ldr	r2, [r7, #16]
 8009962:	0151      	lsls	r1, r2, #5
 8009964:	697a      	ldr	r2, [r7, #20]
 8009966:	440a      	add	r2, r1
 8009968:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800996c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009970:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8009972:	693b      	ldr	r3, [r7, #16]
 8009974:	015a      	lsls	r2, r3, #5
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	4413      	add	r3, r2
 800997a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009988:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009990:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	015a      	lsls	r2, r3, #5
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	4413      	add	r3, r2
 800999a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800999e:	461a      	mov	r2, r3
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80099a4:	2300      	movs	r3, #0
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	371c      	adds	r7, #28
 80099aa:	46bd      	mov	sp, r7
 80099ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b0:	4770      	bx	lr
 80099b2:	bf00      	nop
 80099b4:	1ff80000 	.word	0x1ff80000

080099b8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b088      	sub	sp, #32
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80099c0:	2300      	movs	r3, #0
 80099c2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80099c8:	2300      	movs	r3, #0
 80099ca:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f7fe ff86 	bl	80088de <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80099d2:	2110      	movs	r1, #16
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f7fe ffdf 	bl	8008998 <USB_FlushTxFifo>
 80099da:	4603      	mov	r3, r0
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d001      	beq.n	80099e4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80099e0:	2301      	movs	r3, #1
 80099e2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f7ff f809 	bl	80089fc <USB_FlushRxFifo>
 80099ea:	4603      	mov	r3, r0
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d001      	beq.n	80099f4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80099f0:	2301      	movs	r3, #1
 80099f2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80099f4:	2300      	movs	r3, #0
 80099f6:	61bb      	str	r3, [r7, #24]
 80099f8:	e01f      	b.n	8009a3a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80099fa:	69bb      	ldr	r3, [r7, #24]
 80099fc:	015a      	lsls	r2, r3, #5
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	4413      	add	r3, r2
 8009a02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009a10:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009a18:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009a20:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009a22:	69bb      	ldr	r3, [r7, #24]
 8009a24:	015a      	lsls	r2, r3, #5
 8009a26:	697b      	ldr	r3, [r7, #20]
 8009a28:	4413      	add	r3, r2
 8009a2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a2e:	461a      	mov	r2, r3
 8009a30:	693b      	ldr	r3, [r7, #16]
 8009a32:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009a34:	69bb      	ldr	r3, [r7, #24]
 8009a36:	3301      	adds	r3, #1
 8009a38:	61bb      	str	r3, [r7, #24]
 8009a3a:	69bb      	ldr	r3, [r7, #24]
 8009a3c:	2b0f      	cmp	r3, #15
 8009a3e:	d9dc      	bls.n	80099fa <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009a40:	2300      	movs	r3, #0
 8009a42:	61bb      	str	r3, [r7, #24]
 8009a44:	e034      	b.n	8009ab0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8009a46:	69bb      	ldr	r3, [r7, #24]
 8009a48:	015a      	lsls	r2, r3, #5
 8009a4a:	697b      	ldr	r3, [r7, #20]
 8009a4c:	4413      	add	r3, r2
 8009a4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8009a56:	693b      	ldr	r3, [r7, #16]
 8009a58:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009a5c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009a64:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009a6c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009a6e:	69bb      	ldr	r3, [r7, #24]
 8009a70:	015a      	lsls	r2, r3, #5
 8009a72:	697b      	ldr	r3, [r7, #20]
 8009a74:	4413      	add	r3, r2
 8009a76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a7a:	461a      	mov	r2, r3
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	3301      	adds	r3, #1
 8009a84:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009a8c:	d80c      	bhi.n	8009aa8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009a8e:	69bb      	ldr	r3, [r7, #24]
 8009a90:	015a      	lsls	r2, r3, #5
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	4413      	add	r3, r2
 8009a96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009aa0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009aa4:	d0ec      	beq.n	8009a80 <USB_StopHost+0xc8>
 8009aa6:	e000      	b.n	8009aaa <USB_StopHost+0xf2>
        break;
 8009aa8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009aaa:	69bb      	ldr	r3, [r7, #24]
 8009aac:	3301      	adds	r3, #1
 8009aae:	61bb      	str	r3, [r7, #24]
 8009ab0:	69bb      	ldr	r3, [r7, #24]
 8009ab2:	2b0f      	cmp	r3, #15
 8009ab4:	d9c7      	bls.n	8009a46 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009abc:	461a      	mov	r2, r3
 8009abe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009ac2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009aca:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f7fe fef5 	bl	80088bc <USB_EnableGlobalInt>

  return ret;
 8009ad2:	7ffb      	ldrb	r3, [r7, #31]
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3720      	adds	r7, #32
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}

08009adc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009adc:	b590      	push	{r4, r7, lr}
 8009ade:	b089      	sub	sp, #36	@ 0x24
 8009ae0:	af04      	add	r7, sp, #16
 8009ae2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	2202      	movs	r2, #2
 8009ae8:	2102      	movs	r1, #2
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f000 fc83 	bl	800a3f6 <USBH_FindInterface>
 8009af0:	4603      	mov	r3, r0
 8009af2:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009af4:	7bfb      	ldrb	r3, [r7, #15]
 8009af6:	2bff      	cmp	r3, #255	@ 0xff
 8009af8:	d002      	beq.n	8009b00 <USBH_CDC_InterfaceInit+0x24>
 8009afa:	7bfb      	ldrb	r3, [r7, #15]
 8009afc:	2b01      	cmp	r3, #1
 8009afe:	d901      	bls.n	8009b04 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009b00:	2302      	movs	r3, #2
 8009b02:	e13d      	b.n	8009d80 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8009b04:	7bfb      	ldrb	r3, [r7, #15]
 8009b06:	4619      	mov	r1, r3
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f000 fc58 	bl	800a3be <USBH_SelectInterface>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009b12:	7bbb      	ldrb	r3, [r7, #14]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d001      	beq.n	8009b1c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8009b18:	2302      	movs	r3, #2
 8009b1a:	e131      	b.n	8009d80 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8009b22:	2050      	movs	r0, #80	@ 0x50
 8009b24:	f002 fb6a 	bl	800c1fc <malloc>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009b32:	69db      	ldr	r3, [r3, #28]
 8009b34:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d101      	bne.n	8009b40 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8009b3c:	2302      	movs	r3, #2
 8009b3e:	e11f      	b.n	8009d80 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8009b40:	2250      	movs	r2, #80	@ 0x50
 8009b42:	2100      	movs	r1, #0
 8009b44:	68b8      	ldr	r0, [r7, #8]
 8009b46:	f002 fc39 	bl	800c3bc <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009b4a:	7bfb      	ldrb	r3, [r7, #15]
 8009b4c:	687a      	ldr	r2, [r7, #4]
 8009b4e:	211a      	movs	r1, #26
 8009b50:	fb01 f303 	mul.w	r3, r1, r3
 8009b54:	4413      	add	r3, r2
 8009b56:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009b5a:	781b      	ldrb	r3, [r3, #0]
 8009b5c:	b25b      	sxtb	r3, r3
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	da15      	bge.n	8009b8e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009b62:	7bfb      	ldrb	r3, [r7, #15]
 8009b64:	687a      	ldr	r2, [r7, #4]
 8009b66:	211a      	movs	r1, #26
 8009b68:	fb01 f303 	mul.w	r3, r1, r3
 8009b6c:	4413      	add	r3, r2
 8009b6e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009b72:	781a      	ldrb	r2, [r3, #0]
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009b78:	7bfb      	ldrb	r3, [r7, #15]
 8009b7a:	687a      	ldr	r2, [r7, #4]
 8009b7c:	211a      	movs	r1, #26
 8009b7e:	fb01 f303 	mul.w	r3, r1, r3
 8009b82:	4413      	add	r3, r2
 8009b84:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009b88:	881a      	ldrh	r2, [r3, #0]
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	785b      	ldrb	r3, [r3, #1]
 8009b92:	4619      	mov	r1, r3
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f001 ffc4 	bl	800bb22 <USBH_AllocPipe>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	461a      	mov	r2, r3
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	7819      	ldrb	r1, [r3, #0]
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	7858      	ldrb	r0, [r3, #1]
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009bb6:	68ba      	ldr	r2, [r7, #8]
 8009bb8:	8952      	ldrh	r2, [r2, #10]
 8009bba:	9202      	str	r2, [sp, #8]
 8009bbc:	2203      	movs	r2, #3
 8009bbe:	9201      	str	r2, [sp, #4]
 8009bc0:	9300      	str	r3, [sp, #0]
 8009bc2:	4623      	mov	r3, r4
 8009bc4:	4602      	mov	r2, r0
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f001 ff7c 	bl	800bac4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	781b      	ldrb	r3, [r3, #0]
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f002 fa8b 	bl	800c0f0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8009bda:	2300      	movs	r3, #0
 8009bdc:	2200      	movs	r2, #0
 8009bde:	210a      	movs	r1, #10
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	f000 fc08 	bl	800a3f6 <USBH_FindInterface>
 8009be6:	4603      	mov	r3, r0
 8009be8:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009bea:	7bfb      	ldrb	r3, [r7, #15]
 8009bec:	2bff      	cmp	r3, #255	@ 0xff
 8009bee:	d002      	beq.n	8009bf6 <USBH_CDC_InterfaceInit+0x11a>
 8009bf0:	7bfb      	ldrb	r3, [r7, #15]
 8009bf2:	2b01      	cmp	r3, #1
 8009bf4:	d901      	bls.n	8009bfa <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009bf6:	2302      	movs	r3, #2
 8009bf8:	e0c2      	b.n	8009d80 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009bfa:	7bfb      	ldrb	r3, [r7, #15]
 8009bfc:	687a      	ldr	r2, [r7, #4]
 8009bfe:	211a      	movs	r1, #26
 8009c00:	fb01 f303 	mul.w	r3, r1, r3
 8009c04:	4413      	add	r3, r2
 8009c06:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009c0a:	781b      	ldrb	r3, [r3, #0]
 8009c0c:	b25b      	sxtb	r3, r3
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	da16      	bge.n	8009c40 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009c12:	7bfb      	ldrb	r3, [r7, #15]
 8009c14:	687a      	ldr	r2, [r7, #4]
 8009c16:	211a      	movs	r1, #26
 8009c18:	fb01 f303 	mul.w	r3, r1, r3
 8009c1c:	4413      	add	r3, r2
 8009c1e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009c22:	781a      	ldrb	r2, [r3, #0]
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009c28:	7bfb      	ldrb	r3, [r7, #15]
 8009c2a:	687a      	ldr	r2, [r7, #4]
 8009c2c:	211a      	movs	r1, #26
 8009c2e:	fb01 f303 	mul.w	r3, r1, r3
 8009c32:	4413      	add	r3, r2
 8009c34:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009c38:	881a      	ldrh	r2, [r3, #0]
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	835a      	strh	r2, [r3, #26]
 8009c3e:	e015      	b.n	8009c6c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009c40:	7bfb      	ldrb	r3, [r7, #15]
 8009c42:	687a      	ldr	r2, [r7, #4]
 8009c44:	211a      	movs	r1, #26
 8009c46:	fb01 f303 	mul.w	r3, r1, r3
 8009c4a:	4413      	add	r3, r2
 8009c4c:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009c50:	781a      	ldrb	r2, [r3, #0]
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009c56:	7bfb      	ldrb	r3, [r7, #15]
 8009c58:	687a      	ldr	r2, [r7, #4]
 8009c5a:	211a      	movs	r1, #26
 8009c5c:	fb01 f303 	mul.w	r3, r1, r3
 8009c60:	4413      	add	r3, r2
 8009c62:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009c66:	881a      	ldrh	r2, [r3, #0]
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8009c6c:	7bfb      	ldrb	r3, [r7, #15]
 8009c6e:	687a      	ldr	r2, [r7, #4]
 8009c70:	211a      	movs	r1, #26
 8009c72:	fb01 f303 	mul.w	r3, r1, r3
 8009c76:	4413      	add	r3, r2
 8009c78:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009c7c:	781b      	ldrb	r3, [r3, #0]
 8009c7e:	b25b      	sxtb	r3, r3
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	da16      	bge.n	8009cb2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009c84:	7bfb      	ldrb	r3, [r7, #15]
 8009c86:	687a      	ldr	r2, [r7, #4]
 8009c88:	211a      	movs	r1, #26
 8009c8a:	fb01 f303 	mul.w	r3, r1, r3
 8009c8e:	4413      	add	r3, r2
 8009c90:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009c94:	781a      	ldrb	r2, [r3, #0]
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009c9a:	7bfb      	ldrb	r3, [r7, #15]
 8009c9c:	687a      	ldr	r2, [r7, #4]
 8009c9e:	211a      	movs	r1, #26
 8009ca0:	fb01 f303 	mul.w	r3, r1, r3
 8009ca4:	4413      	add	r3, r2
 8009ca6:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8009caa:	881a      	ldrh	r2, [r3, #0]
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	835a      	strh	r2, [r3, #26]
 8009cb0:	e015      	b.n	8009cde <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009cb2:	7bfb      	ldrb	r3, [r7, #15]
 8009cb4:	687a      	ldr	r2, [r7, #4]
 8009cb6:	211a      	movs	r1, #26
 8009cb8:	fb01 f303 	mul.w	r3, r1, r3
 8009cbc:	4413      	add	r3, r2
 8009cbe:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009cc2:	781a      	ldrb	r2, [r3, #0]
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009cc8:	7bfb      	ldrb	r3, [r7, #15]
 8009cca:	687a      	ldr	r2, [r7, #4]
 8009ccc:	211a      	movs	r1, #26
 8009cce:	fb01 f303 	mul.w	r3, r1, r3
 8009cd2:	4413      	add	r3, r2
 8009cd4:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8009cd8:	881a      	ldrh	r2, [r3, #0]
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	7b9b      	ldrb	r3, [r3, #14]
 8009ce2:	4619      	mov	r1, r3
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f001 ff1c 	bl	800bb22 <USBH_AllocPipe>
 8009cea:	4603      	mov	r3, r0
 8009cec:	461a      	mov	r2, r3
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	7bdb      	ldrb	r3, [r3, #15]
 8009cf6:	4619      	mov	r1, r3
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f001 ff12 	bl	800bb22 <USBH_AllocPipe>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	461a      	mov	r2, r3
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	7b59      	ldrb	r1, [r3, #13]
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	7b98      	ldrb	r0, [r3, #14]
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009d1a:	68ba      	ldr	r2, [r7, #8]
 8009d1c:	8b12      	ldrh	r2, [r2, #24]
 8009d1e:	9202      	str	r2, [sp, #8]
 8009d20:	2202      	movs	r2, #2
 8009d22:	9201      	str	r2, [sp, #4]
 8009d24:	9300      	str	r3, [sp, #0]
 8009d26:	4623      	mov	r3, r4
 8009d28:	4602      	mov	r2, r0
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f001 feca 	bl	800bac4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	7b19      	ldrb	r1, [r3, #12]
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	7bd8      	ldrb	r0, [r3, #15]
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009d44:	68ba      	ldr	r2, [r7, #8]
 8009d46:	8b52      	ldrh	r2, [r2, #26]
 8009d48:	9202      	str	r2, [sp, #8]
 8009d4a:	2202      	movs	r2, #2
 8009d4c:	9201      	str	r2, [sp, #4]
 8009d4e:	9300      	str	r3, [sp, #0]
 8009d50:	4623      	mov	r3, r4
 8009d52:	4602      	mov	r2, r0
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f001 feb5 	bl	800bac4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	7b5b      	ldrb	r3, [r3, #13]
 8009d66:	2200      	movs	r2, #0
 8009d68:	4619      	mov	r1, r3
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f002 f9c0 	bl	800c0f0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	7b1b      	ldrb	r3, [r3, #12]
 8009d74:	2200      	movs	r2, #0
 8009d76:	4619      	mov	r1, r3
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f002 f9b9 	bl	800c0f0 <USBH_LL_SetToggle>

  return USBH_OK;
 8009d7e:	2300      	movs	r3, #0
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	3714      	adds	r7, #20
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd90      	pop	{r4, r7, pc}

08009d88 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b084      	sub	sp, #16
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009d96:	69db      	ldr	r3, [r3, #28]
 8009d98:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	781b      	ldrb	r3, [r3, #0]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d00e      	beq.n	8009dc0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	781b      	ldrb	r3, [r3, #0]
 8009da6:	4619      	mov	r1, r3
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f001 feaa 	bl	800bb02 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	781b      	ldrb	r3, [r3, #0]
 8009db2:	4619      	mov	r1, r3
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f001 fed5 	bl	800bb64 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	7b1b      	ldrb	r3, [r3, #12]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d00e      	beq.n	8009de6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	7b1b      	ldrb	r3, [r3, #12]
 8009dcc:	4619      	mov	r1, r3
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f001 fe97 	bl	800bb02 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	7b1b      	ldrb	r3, [r3, #12]
 8009dd8:	4619      	mov	r1, r3
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f001 fec2 	bl	800bb64 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	2200      	movs	r2, #0
 8009de4:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	7b5b      	ldrb	r3, [r3, #13]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d00e      	beq.n	8009e0c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	7b5b      	ldrb	r3, [r3, #13]
 8009df2:	4619      	mov	r1, r3
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f001 fe84 	bl	800bb02 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	7b5b      	ldrb	r3, [r3, #13]
 8009dfe:	4619      	mov	r1, r3
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f001 feaf 	bl	800bb64 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009e12:	69db      	ldr	r3, [r3, #28]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d00b      	beq.n	8009e30 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009e1e:	69db      	ldr	r3, [r3, #28]
 8009e20:	4618      	mov	r0, r3
 8009e22:	f002 f9f3 	bl	800c20c <free>
    phost->pActiveClass->pData = 0U;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009e30:	2300      	movs	r3, #0
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	3710      	adds	r7, #16
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}

08009e3a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009e3a:	b580      	push	{r7, lr}
 8009e3c:	b084      	sub	sp, #16
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009e48:	69db      	ldr	r3, [r3, #28]
 8009e4a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	3340      	adds	r3, #64	@ 0x40
 8009e50:	4619      	mov	r1, r3
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f000 f8b1 	bl	8009fba <GetLineCoding>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8009e5c:	7afb      	ldrb	r3, [r7, #11]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d105      	bne.n	8009e6e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009e68:	2102      	movs	r1, #2
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8009e6e:	7afb      	ldrb	r3, [r7, #11]
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3710      	adds	r7, #16
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}

08009e78 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b084      	sub	sp, #16
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009e80:	2301      	movs	r3, #1
 8009e82:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009e84:	2300      	movs	r3, #0
 8009e86:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009e8e:	69db      	ldr	r3, [r3, #28]
 8009e90:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8009e98:	2b04      	cmp	r3, #4
 8009e9a:	d877      	bhi.n	8009f8c <USBH_CDC_Process+0x114>
 8009e9c:	a201      	add	r2, pc, #4	@ (adr r2, 8009ea4 <USBH_CDC_Process+0x2c>)
 8009e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ea2:	bf00      	nop
 8009ea4:	08009eb9 	.word	0x08009eb9
 8009ea8:	08009ebf 	.word	0x08009ebf
 8009eac:	08009eef 	.word	0x08009eef
 8009eb0:	08009f63 	.word	0x08009f63
 8009eb4:	08009f71 	.word	0x08009f71
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009eb8:	2300      	movs	r3, #0
 8009eba:	73fb      	strb	r3, [r7, #15]
      break;
 8009ebc:	e06d      	b.n	8009f9a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009ec2:	4619      	mov	r1, r3
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f000 f897 	bl	8009ff8 <SetLineCoding>
 8009eca:	4603      	mov	r3, r0
 8009ecc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009ece:	7bbb      	ldrb	r3, [r7, #14]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d104      	bne.n	8009ede <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	2202      	movs	r2, #2
 8009ed8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009edc:	e058      	b.n	8009f90 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8009ede:	7bbb      	ldrb	r3, [r7, #14]
 8009ee0:	2b01      	cmp	r3, #1
 8009ee2:	d055      	beq.n	8009f90 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	2204      	movs	r2, #4
 8009ee8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8009eec:	e050      	b.n	8009f90 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	3340      	adds	r3, #64	@ 0x40
 8009ef2:	4619      	mov	r1, r3
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f000 f860 	bl	8009fba <GetLineCoding>
 8009efa:	4603      	mov	r3, r0
 8009efc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009efe:	7bbb      	ldrb	r3, [r7, #14]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d126      	bne.n	8009f52 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	2200      	movs	r2, #0
 8009f08:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009f16:	791b      	ldrb	r3, [r3, #4]
 8009f18:	429a      	cmp	r2, r3
 8009f1a:	d13b      	bne.n	8009f94 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8009f22:	68bb      	ldr	r3, [r7, #8]
 8009f24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009f26:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009f28:	429a      	cmp	r2, r3
 8009f2a:	d133      	bne.n	8009f94 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009f36:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009f38:	429a      	cmp	r2, r3
 8009f3a:	d12b      	bne.n	8009f94 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009f44:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009f46:	429a      	cmp	r2, r3
 8009f48:	d124      	bne.n	8009f94 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f000 f958 	bl	800a200 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009f50:	e020      	b.n	8009f94 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8009f52:	7bbb      	ldrb	r3, [r7, #14]
 8009f54:	2b01      	cmp	r3, #1
 8009f56:	d01d      	beq.n	8009f94 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	2204      	movs	r2, #4
 8009f5c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8009f60:	e018      	b.n	8009f94 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	f000 f867 	bl	800a036 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f000 f8da 	bl	800a122 <CDC_ProcessReception>
      break;
 8009f6e:	e014      	b.n	8009f9a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8009f70:	2100      	movs	r1, #0
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f001 f81e 	bl	800afb4 <USBH_ClrFeature>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009f7c:	7bbb      	ldrb	r3, [r7, #14]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d10a      	bne.n	8009f98 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	2200      	movs	r2, #0
 8009f86:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8009f8a:	e005      	b.n	8009f98 <USBH_CDC_Process+0x120>

    default:
      break;
 8009f8c:	bf00      	nop
 8009f8e:	e004      	b.n	8009f9a <USBH_CDC_Process+0x122>
      break;
 8009f90:	bf00      	nop
 8009f92:	e002      	b.n	8009f9a <USBH_CDC_Process+0x122>
      break;
 8009f94:	bf00      	nop
 8009f96:	e000      	b.n	8009f9a <USBH_CDC_Process+0x122>
      break;
 8009f98:	bf00      	nop

  }

  return status;
 8009f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3710      	adds	r7, #16
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}

08009fa4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b083      	sub	sp, #12
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009fac:	2300      	movs	r3, #0
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	370c      	adds	r7, #12
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb8:	4770      	bx	lr

08009fba <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8009fba:	b580      	push	{r7, lr}
 8009fbc:	b082      	sub	sp, #8
 8009fbe:	af00      	add	r7, sp, #0
 8009fc0:	6078      	str	r0, [r7, #4]
 8009fc2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	22a1      	movs	r2, #161	@ 0xa1
 8009fc8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2221      	movs	r2, #33	@ 0x21
 8009fce:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2207      	movs	r2, #7
 8009fe0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	2207      	movs	r2, #7
 8009fe6:	4619      	mov	r1, r3
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	f001 fb17 	bl	800b61c <USBH_CtlReq>
 8009fee:	4603      	mov	r3, r0
}
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	3708      	adds	r7, #8
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bd80      	pop	{r7, pc}

08009ff8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b082      	sub	sp, #8
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
 800a000:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2221      	movs	r2, #33	@ 0x21
 800a006:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2220      	movs	r2, #32
 800a00c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2200      	movs	r2, #0
 800a012:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2200      	movs	r2, #0
 800a018:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2207      	movs	r2, #7
 800a01e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	2207      	movs	r2, #7
 800a024:	4619      	mov	r1, r3
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f001 faf8 	bl	800b61c <USBH_CtlReq>
 800a02c:	4603      	mov	r3, r0
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3708      	adds	r7, #8
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}

0800a036 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800a036:	b580      	push	{r7, lr}
 800a038:	b086      	sub	sp, #24
 800a03a:	af02      	add	r7, sp, #8
 800a03c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a044:	69db      	ldr	r3, [r3, #28]
 800a046:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a048:	2300      	movs	r3, #0
 800a04a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800a052:	2b01      	cmp	r3, #1
 800a054:	d002      	beq.n	800a05c <CDC_ProcessTransmission+0x26>
 800a056:	2b02      	cmp	r3, #2
 800a058:	d023      	beq.n	800a0a2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800a05a:	e05e      	b.n	800a11a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a060:	68fa      	ldr	r2, [r7, #12]
 800a062:	8b12      	ldrh	r2, [r2, #24]
 800a064:	4293      	cmp	r3, r2
 800a066:	d90b      	bls.n	800a080 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	69d9      	ldr	r1, [r3, #28]
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	8b1a      	ldrh	r2, [r3, #24]
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	7b5b      	ldrb	r3, [r3, #13]
 800a074:	2001      	movs	r0, #1
 800a076:	9000      	str	r0, [sp, #0]
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f001 fce0 	bl	800ba3e <USBH_BulkSendData>
 800a07e:	e00b      	b.n	800a098 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800a088:	b29a      	uxth	r2, r3
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	7b5b      	ldrb	r3, [r3, #13]
 800a08e:	2001      	movs	r0, #1
 800a090:	9000      	str	r0, [sp, #0]
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f001 fcd3 	bl	800ba3e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	2202      	movs	r2, #2
 800a09c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800a0a0:	e03b      	b.n	800a11a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	7b5b      	ldrb	r3, [r3, #13]
 800a0a6:	4619      	mov	r1, r3
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f001 fff7 	bl	800c09c <USBH_LL_GetURBState>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800a0b2:	7afb      	ldrb	r3, [r7, #11]
 800a0b4:	2b01      	cmp	r3, #1
 800a0b6:	d128      	bne.n	800a10a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0bc:	68fa      	ldr	r2, [r7, #12]
 800a0be:	8b12      	ldrh	r2, [r2, #24]
 800a0c0:	4293      	cmp	r3, r2
 800a0c2:	d90e      	bls.n	800a0e2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0c8:	68fa      	ldr	r2, [r7, #12]
 800a0ca:	8b12      	ldrh	r2, [r2, #24]
 800a0cc:	1a9a      	subs	r2, r3, r2
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	69db      	ldr	r3, [r3, #28]
 800a0d6:	68fa      	ldr	r2, [r7, #12]
 800a0d8:	8b12      	ldrh	r2, [r2, #24]
 800a0da:	441a      	add	r2, r3
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	61da      	str	r2, [r3, #28]
 800a0e0:	e002      	b.n	800a0e8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d004      	beq.n	800a0fa <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	2201      	movs	r2, #1
 800a0f4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800a0f8:	e00e      	b.n	800a118 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f000 f868 	bl	800a1d8 <USBH_CDC_TransmitCallback>
      break;
 800a108:	e006      	b.n	800a118 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800a10a:	7afb      	ldrb	r3, [r7, #11]
 800a10c:	2b02      	cmp	r3, #2
 800a10e:	d103      	bne.n	800a118 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2201      	movs	r2, #1
 800a114:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800a118:	bf00      	nop
  }
}
 800a11a:	bf00      	nop
 800a11c:	3710      	adds	r7, #16
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}

0800a122 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800a122:	b580      	push	{r7, lr}
 800a124:	b086      	sub	sp, #24
 800a126:	af00      	add	r7, sp, #0
 800a128:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a130:	69db      	ldr	r3, [r3, #28]
 800a132:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a134:	2300      	movs	r3, #0
 800a136:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800a138:	697b      	ldr	r3, [r7, #20]
 800a13a:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800a13e:	2b03      	cmp	r3, #3
 800a140:	d002      	beq.n	800a148 <CDC_ProcessReception+0x26>
 800a142:	2b04      	cmp	r3, #4
 800a144:	d00e      	beq.n	800a164 <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 800a146:	e043      	b.n	800a1d0 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800a148:	697b      	ldr	r3, [r7, #20]
 800a14a:	6a19      	ldr	r1, [r3, #32]
 800a14c:	697b      	ldr	r3, [r7, #20]
 800a14e:	8b5a      	ldrh	r2, [r3, #26]
 800a150:	697b      	ldr	r3, [r7, #20]
 800a152:	7b1b      	ldrb	r3, [r3, #12]
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f001 fc97 	bl	800ba88 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	2204      	movs	r2, #4
 800a15e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800a162:	e035      	b.n	800a1d0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800a164:	697b      	ldr	r3, [r7, #20]
 800a166:	7b1b      	ldrb	r3, [r3, #12]
 800a168:	4619      	mov	r1, r3
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f001 ff96 	bl	800c09c <USBH_LL_GetURBState>
 800a170:	4603      	mov	r3, r0
 800a172:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800a174:	7cfb      	ldrb	r3, [r7, #19]
 800a176:	2b01      	cmp	r3, #1
 800a178:	d129      	bne.n	800a1ce <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	7b1b      	ldrb	r3, [r3, #12]
 800a17e:	4619      	mov	r1, r3
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f001 fef9 	bl	800bf78 <USBH_LL_GetLastXferSize>
 800a186:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a18c:	68fa      	ldr	r2, [r7, #12]
 800a18e:	429a      	cmp	r2, r3
 800a190:	d016      	beq.n	800a1c0 <CDC_ProcessReception+0x9e>
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	8b5b      	ldrh	r3, [r3, #26]
 800a196:	461a      	mov	r2, r3
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	4293      	cmp	r3, r2
 800a19c:	d110      	bne.n	800a1c0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800a19e:	697b      	ldr	r3, [r7, #20]
 800a1a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	1ad2      	subs	r2, r2, r3
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800a1aa:	697b      	ldr	r3, [r7, #20]
 800a1ac:	6a1a      	ldr	r2, [r3, #32]
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	441a      	add	r2, r3
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800a1b6:	697b      	ldr	r3, [r7, #20]
 800a1b8:	2203      	movs	r2, #3
 800a1ba:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800a1be:	e006      	b.n	800a1ce <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800a1c0:	697b      	ldr	r3, [r7, #20]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f000 f80f 	bl	800a1ec <USBH_CDC_ReceiveCallback>
      break;
 800a1ce:	bf00      	nop
  }
}
 800a1d0:	bf00      	nop
 800a1d2:	3718      	adds	r7, #24
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}

0800a1d8 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800a1d8:	b480      	push	{r7}
 800a1da:	b083      	sub	sp, #12
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a1e0:	bf00      	nop
 800a1e2:	370c      	adds	r7, #12
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ea:	4770      	bx	lr

0800a1ec <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800a1ec:	b480      	push	{r7}
 800a1ee:	b083      	sub	sp, #12
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a1f4:	bf00      	nop
 800a1f6:	370c      	adds	r7, #12
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fe:	4770      	bx	lr

0800a200 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800a200:	b480      	push	{r7}
 800a202:	b083      	sub	sp, #12
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a208:	bf00      	nop
 800a20a:	370c      	adds	r7, #12
 800a20c:	46bd      	mov	sp, r7
 800a20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a212:	4770      	bx	lr

0800a214 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b084      	sub	sp, #16
 800a218:	af00      	add	r7, sp, #0
 800a21a:	60f8      	str	r0, [r7, #12]
 800a21c:	60b9      	str	r1, [r7, #8]
 800a21e:	4613      	mov	r3, r2
 800a220:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d101      	bne.n	800a22c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a228:	2302      	movs	r3, #2
 800a22a:	e029      	b.n	800a280 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	79fa      	ldrb	r2, [r7, #7]
 800a230:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	2200      	movs	r2, #0
 800a238:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	2200      	movs	r2, #0
 800a240:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800a244:	68f8      	ldr	r0, [r7, #12]
 800a246:	f000 f81f 	bl	800a288 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	2200      	movs	r2, #0
 800a24e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	2200      	movs	r2, #0
 800a256:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	2200      	movs	r2, #0
 800a25e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	2200      	movs	r2, #0
 800a266:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d003      	beq.n	800a278 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	68ba      	ldr	r2, [r7, #8]
 800a274:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800a278:	68f8      	ldr	r0, [r7, #12]
 800a27a:	f001 fdc9 	bl	800be10 <USBH_LL_Init>

  return USBH_OK;
 800a27e:	2300      	movs	r3, #0
}
 800a280:	4618      	mov	r0, r3
 800a282:	3710      	adds	r7, #16
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}

0800a288 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b084      	sub	sp, #16
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a290:	2300      	movs	r3, #0
 800a292:	60fb      	str	r3, [r7, #12]
 800a294:	e009      	b.n	800a2aa <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 800a296:	687a      	ldr	r2, [r7, #4]
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	33e0      	adds	r3, #224	@ 0xe0
 800a29c:	009b      	lsls	r3, r3, #2
 800a29e:	4413      	add	r3, r2
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	3301      	adds	r3, #1
 800a2a8:	60fb      	str	r3, [r7, #12]
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	2b0f      	cmp	r3, #15
 800a2ae:	d9f2      	bls.n	800a296 <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	60fb      	str	r3, [r7, #12]
 800a2b4:	e009      	b.n	800a2ca <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 800a2b6:	687a      	ldr	r2, [r7, #4]
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	4413      	add	r3, r2
 800a2bc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	3301      	adds	r3, #1
 800a2c8:	60fb      	str	r3, [r7, #12]
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a2d0:	d3f1      	bcc.n	800a2b6 <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2200      	movs	r2, #0
 800a2dc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2201      	movs	r2, #1
 800a2e2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2240      	movs	r2, #64	@ 0x40
 800a2f6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2200      	movs	r2, #0
 800a302:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2201      	movs	r2, #1
 800a30a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2200      	movs	r2, #0
 800a312:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2200      	movs	r2, #0
 800a31a:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	331c      	adds	r3, #28
 800a322:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a326:	2100      	movs	r1, #0
 800a328:	4618      	mov	r0, r3
 800a32a:	f002 f847 	bl	800c3bc <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a334:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a338:	2100      	movs	r1, #0
 800a33a:	4618      	mov	r0, r3
 800a33c:	f002 f83e 	bl	800c3bc <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800a346:	2212      	movs	r2, #18
 800a348:	2100      	movs	r1, #0
 800a34a:	4618      	mov	r0, r3
 800a34c:	f002 f836 	bl	800c3bc <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a356:	223e      	movs	r2, #62	@ 0x3e
 800a358:	2100      	movs	r1, #0
 800a35a:	4618      	mov	r0, r3
 800a35c:	f002 f82e 	bl	800c3bc <memset>

  return USBH_OK;
 800a360:	2300      	movs	r3, #0
}
 800a362:	4618      	mov	r0, r3
 800a364:	3710      	adds	r7, #16
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}

0800a36a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a36a:	b480      	push	{r7}
 800a36c:	b085      	sub	sp, #20
 800a36e:	af00      	add	r7, sp, #0
 800a370:	6078      	str	r0, [r7, #4]
 800a372:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a374:	2300      	movs	r3, #0
 800a376:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d016      	beq.n	800a3ac <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800a384:	2b00      	cmp	r3, #0
 800a386:	d10e      	bne.n	800a3a6 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800a38e:	1c59      	adds	r1, r3, #1
 800a390:	687a      	ldr	r2, [r7, #4]
 800a392:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800a396:	687a      	ldr	r2, [r7, #4]
 800a398:	33de      	adds	r3, #222	@ 0xde
 800a39a:	6839      	ldr	r1, [r7, #0]
 800a39c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	73fb      	strb	r3, [r7, #15]
 800a3a4:	e004      	b.n	800a3b0 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a3a6:	2302      	movs	r3, #2
 800a3a8:	73fb      	strb	r3, [r7, #15]
 800a3aa:	e001      	b.n	800a3b0 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a3ac:	2302      	movs	r3, #2
 800a3ae:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a3b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	3714      	adds	r7, #20
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3bc:	4770      	bx	lr

0800a3be <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a3be:	b480      	push	{r7}
 800a3c0:	b085      	sub	sp, #20
 800a3c2:	af00      	add	r7, sp, #0
 800a3c4:	6078      	str	r0, [r7, #4]
 800a3c6:	460b      	mov	r3, r1
 800a3c8:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800a3d4:	78fa      	ldrb	r2, [r7, #3]
 800a3d6:	429a      	cmp	r2, r3
 800a3d8:	d204      	bcs.n	800a3e4 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	78fa      	ldrb	r2, [r7, #3]
 800a3de:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800a3e2:	e001      	b.n	800a3e8 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a3e4:	2302      	movs	r3, #2
 800a3e6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a3e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3714      	adds	r7, #20
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f4:	4770      	bx	lr

0800a3f6 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a3f6:	b480      	push	{r7}
 800a3f8:	b087      	sub	sp, #28
 800a3fa:	af00      	add	r7, sp, #0
 800a3fc:	6078      	str	r0, [r7, #4]
 800a3fe:	4608      	mov	r0, r1
 800a400:	4611      	mov	r1, r2
 800a402:	461a      	mov	r2, r3
 800a404:	4603      	mov	r3, r0
 800a406:	70fb      	strb	r3, [r7, #3]
 800a408:	460b      	mov	r3, r1
 800a40a:	70bb      	strb	r3, [r7, #2]
 800a40c:	4613      	mov	r3, r2
 800a40e:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a410:	2300      	movs	r3, #0
 800a412:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a414:	2300      	movs	r3, #0
 800a416:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a41e:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a420:	e025      	b.n	800a46e <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a422:	7dfb      	ldrb	r3, [r7, #23]
 800a424:	221a      	movs	r2, #26
 800a426:	fb02 f303 	mul.w	r3, r2, r3
 800a42a:	3308      	adds	r3, #8
 800a42c:	68fa      	ldr	r2, [r7, #12]
 800a42e:	4413      	add	r3, r2
 800a430:	3302      	adds	r3, #2
 800a432:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a434:	693b      	ldr	r3, [r7, #16]
 800a436:	795b      	ldrb	r3, [r3, #5]
 800a438:	78fa      	ldrb	r2, [r7, #3]
 800a43a:	429a      	cmp	r2, r3
 800a43c:	d002      	beq.n	800a444 <USBH_FindInterface+0x4e>
 800a43e:	78fb      	ldrb	r3, [r7, #3]
 800a440:	2bff      	cmp	r3, #255	@ 0xff
 800a442:	d111      	bne.n	800a468 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a448:	78ba      	ldrb	r2, [r7, #2]
 800a44a:	429a      	cmp	r2, r3
 800a44c:	d002      	beq.n	800a454 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a44e:	78bb      	ldrb	r3, [r7, #2]
 800a450:	2bff      	cmp	r3, #255	@ 0xff
 800a452:	d109      	bne.n	800a468 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a454:	693b      	ldr	r3, [r7, #16]
 800a456:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a458:	787a      	ldrb	r2, [r7, #1]
 800a45a:	429a      	cmp	r2, r3
 800a45c:	d002      	beq.n	800a464 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a45e:	787b      	ldrb	r3, [r7, #1]
 800a460:	2bff      	cmp	r3, #255	@ 0xff
 800a462:	d101      	bne.n	800a468 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a464:	7dfb      	ldrb	r3, [r7, #23]
 800a466:	e006      	b.n	800a476 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a468:	7dfb      	ldrb	r3, [r7, #23]
 800a46a:	3301      	adds	r3, #1
 800a46c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a46e:	7dfb      	ldrb	r3, [r7, #23]
 800a470:	2b01      	cmp	r3, #1
 800a472:	d9d6      	bls.n	800a422 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a474:	23ff      	movs	r3, #255	@ 0xff
}
 800a476:	4618      	mov	r0, r3
 800a478:	371c      	adds	r7, #28
 800a47a:	46bd      	mov	sp, r7
 800a47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a480:	4770      	bx	lr

0800a482 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800a482:	b580      	push	{r7, lr}
 800a484:	b082      	sub	sp, #8
 800a486:	af00      	add	r7, sp, #0
 800a488:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f001 fcfc 	bl	800be88 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800a490:	2101      	movs	r1, #1
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	f001 fe15 	bl	800c0c2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a498:	2300      	movs	r3, #0
}
 800a49a:	4618      	mov	r0, r3
 800a49c:	3708      	adds	r7, #8
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd80      	pop	{r7, pc}
	...

0800a4a4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b088      	sub	sp, #32
 800a4a8:	af04      	add	r7, sp, #16
 800a4aa:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a4ac:	2302      	movs	r3, #2
 800a4ae:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800a4ba:	b2db      	uxtb	r3, r3
 800a4bc:	2b01      	cmp	r3, #1
 800a4be:	d102      	bne.n	800a4c6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2203      	movs	r2, #3
 800a4c4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	781b      	ldrb	r3, [r3, #0]
 800a4ca:	b2db      	uxtb	r3, r3
 800a4cc:	2b0b      	cmp	r3, #11
 800a4ce:	f200 81bc 	bhi.w	800a84a <USBH_Process+0x3a6>
 800a4d2:	a201      	add	r2, pc, #4	@ (adr r2, 800a4d8 <USBH_Process+0x34>)
 800a4d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4d8:	0800a509 	.word	0x0800a509
 800a4dc:	0800a53b 	.word	0x0800a53b
 800a4e0:	0800a5a5 	.word	0x0800a5a5
 800a4e4:	0800a7e5 	.word	0x0800a7e5
 800a4e8:	0800a84b 	.word	0x0800a84b
 800a4ec:	0800a645 	.word	0x0800a645
 800a4f0:	0800a78b 	.word	0x0800a78b
 800a4f4:	0800a67b 	.word	0x0800a67b
 800a4f8:	0800a69b 	.word	0x0800a69b
 800a4fc:	0800a6b9 	.word	0x0800a6b9
 800a500:	0800a6fd 	.word	0x0800a6fd
 800a504:	0800a7cd 	.word	0x0800a7cd
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800a50e:	b2db      	uxtb	r3, r3
 800a510:	2b00      	cmp	r3, #0
 800a512:	f000 819c 	beq.w	800a84e <USBH_Process+0x3aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2201      	movs	r2, #1
 800a51a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a51c:	20c8      	movs	r0, #200	@ 0xc8
 800a51e:	f001 fe1a 	bl	800c156 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f001 fd0d 	bl	800bf42 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2200      	movs	r2, #0
 800a52c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2200      	movs	r2, #0
 800a534:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800a538:	e189      	b.n	800a84e <USBH_Process+0x3aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800a540:	b2db      	uxtb	r3, r3
 800a542:	2b01      	cmp	r3, #1
 800a544:	d107      	bne.n	800a556 <USBH_Process+0xb2>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2200      	movs	r2, #0
 800a54a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2202      	movs	r2, #2
 800a552:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a554:	e18a      	b.n	800a86c <USBH_Process+0x3c8>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800a55c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a560:	d914      	bls.n	800a58c <USBH_Process+0xe8>
          phost->device.RstCnt++;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800a568:	3301      	adds	r3, #1
 800a56a:	b2da      	uxtb	r2, r3
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800a578:	2b03      	cmp	r3, #3
 800a57a:	d903      	bls.n	800a584 <USBH_Process+0xe0>
            phost->gState = HOST_ABORT_STATE;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	220d      	movs	r2, #13
 800a580:	701a      	strb	r2, [r3, #0]
      break;
 800a582:	e173      	b.n	800a86c <USBH_Process+0x3c8>
            phost->gState = HOST_IDLE;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2200      	movs	r2, #0
 800a588:	701a      	strb	r2, [r3, #0]
      break;
 800a58a:	e16f      	b.n	800a86c <USBH_Process+0x3c8>
          phost->Timeout += 10U;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800a592:	f103 020a 	add.w	r2, r3, #10
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800a59c:	200a      	movs	r0, #10
 800a59e:	f001 fdda 	bl	800c156 <USBH_Delay>
      break;
 800a5a2:	e163      	b.n	800a86c <USBH_Process+0x3c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d005      	beq.n	800a5ba <USBH_Process+0x116>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a5b4:	2104      	movs	r1, #4
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a5ba:	2064      	movs	r0, #100	@ 0x64
 800a5bc:	f001 fdcb 	bl	800c156 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f001 fc97 	bl	800bef4 <USBH_LL_GetSpeed>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	461a      	mov	r2, r3
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2205      	movs	r2, #5
 800a5d4:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a5d6:	2100      	movs	r1, #0
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f001 faa2 	bl	800bb22 <USBH_AllocPipe>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	461a      	mov	r2, r3
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a5e6:	2180      	movs	r1, #128	@ 0x80
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	f001 fa9a 	bl	800bb22 <USBH_AllocPipe>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	461a      	mov	r2, r3
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	7919      	ldrb	r1, [r3, #4]
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a606:	687a      	ldr	r2, [r7, #4]
 800a608:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a60a:	9202      	str	r2, [sp, #8]
 800a60c:	2200      	movs	r2, #0
 800a60e:	9201      	str	r2, [sp, #4]
 800a610:	9300      	str	r3, [sp, #0]
 800a612:	4603      	mov	r3, r0
 800a614:	2280      	movs	r2, #128	@ 0x80
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	f001 fa54 	bl	800bac4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	7959      	ldrb	r1, [r3, #5]
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a62c:	687a      	ldr	r2, [r7, #4]
 800a62e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a630:	9202      	str	r2, [sp, #8]
 800a632:	2200      	movs	r2, #0
 800a634:	9201      	str	r2, [sp, #4]
 800a636:	9300      	str	r3, [sp, #0]
 800a638:	4603      	mov	r3, r0
 800a63a:	2200      	movs	r2, #0
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	f001 fa41 	bl	800bac4 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a642:	e113      	b.n	800a86c <USBH_Process+0x3c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f000 f917 	bl	800a878 <USBH_HandleEnum>
 800a64a:	4603      	mov	r3, r0
 800a64c:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a64e:	7bbb      	ldrb	r3, [r7, #14]
 800a650:	b2db      	uxtb	r3, r3
 800a652:	2b00      	cmp	r3, #0
 800a654:	f040 80fd 	bne.w	800a852 <USBH_Process+0x3ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2200      	movs	r2, #0
 800a65c:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800a666:	2b01      	cmp	r3, #1
 800a668:	d103      	bne.n	800a672 <USBH_Process+0x1ce>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2208      	movs	r2, #8
 800a66e:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800a670:	e0ef      	b.n	800a852 <USBH_Process+0x3ae>
          phost->gState = HOST_INPUT;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2207      	movs	r2, #7
 800a676:	701a      	strb	r2, [r3, #0]
      break;
 800a678:	e0eb      	b.n	800a852 <USBH_Process+0x3ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a680:	2b00      	cmp	r3, #0
 800a682:	f000 80e8 	beq.w	800a856 <USBH_Process+0x3b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a68c:	2101      	movs	r1, #1
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2208      	movs	r2, #8
 800a696:	701a      	strb	r2, [r3, #0]
#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 800a698:	e0dd      	b.n	800a856 <USBH_Process+0x3b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800a6a0:	4619      	mov	r1, r3
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f000 fc3f 	bl	800af26 <USBH_SetCfg>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	f040 80d5 	bne.w	800a85a <USBH_Process+0x3b6>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2209      	movs	r2, #9
 800a6b4:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a6b6:	e0d0      	b.n	800a85a <USBH_Process+0x3b6>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800a6be:	f003 0320 	and.w	r3, r3, #32
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d016      	beq.n	800a6f4 <USBH_Process+0x250>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800a6c6:	2101      	movs	r1, #1
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	f000 fc4f 	bl	800af6c <USBH_SetFeature>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a6d2:	7bbb      	ldrb	r3, [r7, #14]
 800a6d4:	b2db      	uxtb	r3, r3
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d103      	bne.n	800a6e2 <USBH_Process+0x23e>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	220a      	movs	r2, #10
 800a6de:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a6e0:	e0bd      	b.n	800a85e <USBH_Process+0x3ba>
        else if (status == USBH_NOT_SUPPORTED)
 800a6e2:	7bbb      	ldrb	r3, [r7, #14]
 800a6e4:	b2db      	uxtb	r3, r3
 800a6e6:	2b03      	cmp	r3, #3
 800a6e8:	f040 80b9 	bne.w	800a85e <USBH_Process+0x3ba>
          phost->gState = HOST_CHECK_CLASS;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	220a      	movs	r2, #10
 800a6f0:	701a      	strb	r2, [r3, #0]
      break;
 800a6f2:	e0b4      	b.n	800a85e <USBH_Process+0x3ba>
        phost->gState = HOST_CHECK_CLASS;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	220a      	movs	r2, #10
 800a6f8:	701a      	strb	r2, [r3, #0]
      break;
 800a6fa:	e0b0      	b.n	800a85e <USBH_Process+0x3ba>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800a702:	2b00      	cmp	r3, #0
 800a704:	f000 80ad 	beq.w	800a862 <USBH_Process+0x3be>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2200      	movs	r2, #0
 800a70c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a710:	2300      	movs	r3, #0
 800a712:	73fb      	strb	r3, [r7, #15]
 800a714:	e016      	b.n	800a744 <USBH_Process+0x2a0>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a716:	7bfa      	ldrb	r2, [r7, #15]
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	32de      	adds	r2, #222	@ 0xde
 800a71c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a720:	791a      	ldrb	r2, [r3, #4]
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800a728:	429a      	cmp	r2, r3
 800a72a:	d108      	bne.n	800a73e <USBH_Process+0x29a>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a72c:	7bfa      	ldrb	r2, [r7, #15]
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	32de      	adds	r2, #222	@ 0xde
 800a732:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800a73c:	e005      	b.n	800a74a <USBH_Process+0x2a6>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a73e:	7bfb      	ldrb	r3, [r7, #15]
 800a740:	3301      	adds	r3, #1
 800a742:	73fb      	strb	r3, [r7, #15]
 800a744:	7bfb      	ldrb	r3, [r7, #15]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d0e5      	beq.n	800a716 <USBH_Process+0x272>
          }
        }

        if (phost->pActiveClass != NULL)
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a750:	2b00      	cmp	r3, #0
 800a752:	d016      	beq.n	800a782 <USBH_Process+0x2de>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a75a:	689b      	ldr	r3, [r3, #8]
 800a75c:	6878      	ldr	r0, [r7, #4]
 800a75e:	4798      	blx	r3
 800a760:	4603      	mov	r3, r0
 800a762:	2b00      	cmp	r3, #0
 800a764:	d109      	bne.n	800a77a <USBH_Process+0x2d6>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2206      	movs	r2, #6
 800a76a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a772:	2103      	movs	r1, #3
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	4798      	blx	r3
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a778:	e073      	b.n	800a862 <USBH_Process+0x3be>
            phost->gState = HOST_ABORT_STATE;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	220d      	movs	r2, #13
 800a77e:	701a      	strb	r2, [r3, #0]
      break;
 800a780:	e06f      	b.n	800a862 <USBH_Process+0x3be>
          phost->gState = HOST_ABORT_STATE;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	220d      	movs	r2, #13
 800a786:	701a      	strb	r2, [r3, #0]
      break;
 800a788:	e06b      	b.n	800a862 <USBH_Process+0x3be>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a790:	2b00      	cmp	r3, #0
 800a792:	d017      	beq.n	800a7c4 <USBH_Process+0x320>
      {
        status = phost->pActiveClass->Requests(phost);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a79a:	691b      	ldr	r3, [r3, #16]
 800a79c:	6878      	ldr	r0, [r7, #4]
 800a79e:	4798      	blx	r3
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a7a4:	7bbb      	ldrb	r3, [r7, #14]
 800a7a6:	b2db      	uxtb	r3, r3
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d103      	bne.n	800a7b4 <USBH_Process+0x310>
        {
          phost->gState = HOST_CLASS;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	220b      	movs	r2, #11
 800a7b0:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a7b2:	e058      	b.n	800a866 <USBH_Process+0x3c2>
        else if (status == USBH_FAIL)
 800a7b4:	7bbb      	ldrb	r3, [r7, #14]
 800a7b6:	b2db      	uxtb	r3, r3
 800a7b8:	2b02      	cmp	r3, #2
 800a7ba:	d154      	bne.n	800a866 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	220d      	movs	r2, #13
 800a7c0:	701a      	strb	r2, [r3, #0]
      break;
 800a7c2:	e050      	b.n	800a866 <USBH_Process+0x3c2>
        phost->gState = HOST_ABORT_STATE;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	220d      	movs	r2, #13
 800a7c8:	701a      	strb	r2, [r3, #0]
      break;
 800a7ca:	e04c      	b.n	800a866 <USBH_Process+0x3c2>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d049      	beq.n	800a86a <USBH_Process+0x3c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a7dc:	695b      	ldr	r3, [r3, #20]
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	4798      	blx	r3
      }
      break;
 800a7e2:	e042      	b.n	800a86a <USBH_Process+0x3c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f7ff fd4b 	bl	800a288 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d009      	beq.n	800a810 <USBH_Process+0x36c>
      {
        phost->pActiveClass->DeInit(phost);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a802:	68db      	ldr	r3, [r3, #12]
 800a804:	6878      	ldr	r0, [r7, #4]
 800a806:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2200      	movs	r2, #0
 800a80c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a816:	2b00      	cmp	r3, #0
 800a818:	d005      	beq.n	800a826 <USBH_Process+0x382>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a820:	2105      	movs	r1, #5
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800a82c:	b2db      	uxtb	r3, r3
 800a82e:	2b01      	cmp	r3, #1
 800a830:	d107      	bne.n	800a842 <USBH_Process+0x39e>
      {
        phost->device.is_ReEnumerated = 0U;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2200      	movs	r2, #0
 800a836:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f7ff fe21 	bl	800a482 <USBH_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a840:	e014      	b.n	800a86c <USBH_Process+0x3c8>
        (void)USBH_LL_Start(phost);
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f001 fb20 	bl	800be88 <USBH_LL_Start>
      break;
 800a848:	e010      	b.n	800a86c <USBH_Process+0x3c8>

    case HOST_ABORT_STATE:
    default :
      break;
 800a84a:	bf00      	nop
 800a84c:	e00e      	b.n	800a86c <USBH_Process+0x3c8>
      break;
 800a84e:	bf00      	nop
 800a850:	e00c      	b.n	800a86c <USBH_Process+0x3c8>
      break;
 800a852:	bf00      	nop
 800a854:	e00a      	b.n	800a86c <USBH_Process+0x3c8>
    break;
 800a856:	bf00      	nop
 800a858:	e008      	b.n	800a86c <USBH_Process+0x3c8>
      break;
 800a85a:	bf00      	nop
 800a85c:	e006      	b.n	800a86c <USBH_Process+0x3c8>
      break;
 800a85e:	bf00      	nop
 800a860:	e004      	b.n	800a86c <USBH_Process+0x3c8>
      break;
 800a862:	bf00      	nop
 800a864:	e002      	b.n	800a86c <USBH_Process+0x3c8>
      break;
 800a866:	bf00      	nop
 800a868:	e000      	b.n	800a86c <USBH_Process+0x3c8>
      break;
 800a86a:	bf00      	nop
  }
  return USBH_OK;
 800a86c:	2300      	movs	r3, #0
}
 800a86e:	4618      	mov	r0, r3
 800a870:	3710      	adds	r7, #16
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}
 800a876:	bf00      	nop

0800a878 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b088      	sub	sp, #32
 800a87c:	af04      	add	r7, sp, #16
 800a87e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a880:	2301      	movs	r3, #1
 800a882:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a884:	2301      	movs	r3, #1
 800a886:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	785b      	ldrb	r3, [r3, #1]
 800a88c:	2b07      	cmp	r3, #7
 800a88e:	f200 81bd 	bhi.w	800ac0c <USBH_HandleEnum+0x394>
 800a892:	a201      	add	r2, pc, #4	@ (adr r2, 800a898 <USBH_HandleEnum+0x20>)
 800a894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a898:	0800a8b9 	.word	0x0800a8b9
 800a89c:	0800a973 	.word	0x0800a973
 800a8a0:	0800a9dd 	.word	0x0800a9dd
 800a8a4:	0800aa67 	.word	0x0800aa67
 800a8a8:	0800aad1 	.word	0x0800aad1
 800a8ac:	0800ab41 	.word	0x0800ab41
 800a8b0:	0800ab87 	.word	0x0800ab87
 800a8b4:	0800abcd 	.word	0x0800abcd
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a8b8:	2108      	movs	r1, #8
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f000 fa50 	bl	800ad60 <USBH_Get_DevDesc>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a8c4:	7bbb      	ldrb	r3, [r7, #14]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d12e      	bne.n	800a928 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	7919      	ldrb	r1, [r3, #4]
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a8ea:	687a      	ldr	r2, [r7, #4]
 800a8ec:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a8ee:	9202      	str	r2, [sp, #8]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	9201      	str	r2, [sp, #4]
 800a8f4:	9300      	str	r3, [sp, #0]
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	2280      	movs	r2, #128	@ 0x80
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	f001 f8e2 	bl	800bac4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	7959      	ldrb	r1, [r3, #5]
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a910:	687a      	ldr	r2, [r7, #4]
 800a912:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a914:	9202      	str	r2, [sp, #8]
 800a916:	2200      	movs	r2, #0
 800a918:	9201      	str	r2, [sp, #4]
 800a91a:	9300      	str	r3, [sp, #0]
 800a91c:	4603      	mov	r3, r0
 800a91e:	2200      	movs	r2, #0
 800a920:	6878      	ldr	r0, [r7, #4]
 800a922:	f001 f8cf 	bl	800bac4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a926:	e173      	b.n	800ac10 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a928:	7bbb      	ldrb	r3, [r7, #14]
 800a92a:	2b03      	cmp	r3, #3
 800a92c:	f040 8170 	bne.w	800ac10 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a936:	3301      	adds	r3, #1
 800a938:	b2da      	uxtb	r2, r3
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a946:	2b03      	cmp	r3, #3
 800a948:	d903      	bls.n	800a952 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	220d      	movs	r2, #13
 800a94e:	701a      	strb	r2, [r3, #0]
      break;
 800a950:	e15e      	b.n	800ac10 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	795b      	ldrb	r3, [r3, #5]
 800a956:	4619      	mov	r1, r3
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f001 f903 	bl	800bb64 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	791b      	ldrb	r3, [r3, #4]
 800a962:	4619      	mov	r1, r3
 800a964:	6878      	ldr	r0, [r7, #4]
 800a966:	f001 f8fd 	bl	800bb64 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2200      	movs	r2, #0
 800a96e:	701a      	strb	r2, [r3, #0]
      break;
 800a970:	e14e      	b.n	800ac10 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a972:	2112      	movs	r1, #18
 800a974:	6878      	ldr	r0, [r7, #4]
 800a976:	f000 f9f3 	bl	800ad60 <USBH_Get_DevDesc>
 800a97a:	4603      	mov	r3, r0
 800a97c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a97e:	7bbb      	ldrb	r3, [r7, #14]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d103      	bne.n	800a98c <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2202      	movs	r2, #2
 800a988:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a98a:	e143      	b.n	800ac14 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a98c:	7bbb      	ldrb	r3, [r7, #14]
 800a98e:	2b03      	cmp	r3, #3
 800a990:	f040 8140 	bne.w	800ac14 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a99a:	3301      	adds	r3, #1
 800a99c:	b2da      	uxtb	r2, r3
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a9aa:	2b03      	cmp	r3, #3
 800a9ac:	d903      	bls.n	800a9b6 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	220d      	movs	r2, #13
 800a9b2:	701a      	strb	r2, [r3, #0]
      break;
 800a9b4:	e12e      	b.n	800ac14 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	795b      	ldrb	r3, [r3, #5]
 800a9ba:	4619      	mov	r1, r3
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f001 f8d1 	bl	800bb64 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	791b      	ldrb	r3, [r3, #4]
 800a9c6:	4619      	mov	r1, r3
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f001 f8cb 	bl	800bb64 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	701a      	strb	r2, [r3, #0]
      break;
 800a9da:	e11b      	b.n	800ac14 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a9dc:	2101      	movs	r1, #1
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f000 fa7d 	bl	800aede <USBH_SetAddress>
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a9e8:	7bbb      	ldrb	r3, [r7, #14]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d130      	bne.n	800aa50 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800a9ee:	2002      	movs	r0, #2
 800a9f0:	f001 fbb1 	bl	800c156 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2201      	movs	r2, #1
 800a9f8:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2203      	movs	r2, #3
 800aa00:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	7919      	ldrb	r1, [r3, #4]
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800aa12:	687a      	ldr	r2, [r7, #4]
 800aa14:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800aa16:	9202      	str	r2, [sp, #8]
 800aa18:	2200      	movs	r2, #0
 800aa1a:	9201      	str	r2, [sp, #4]
 800aa1c:	9300      	str	r3, [sp, #0]
 800aa1e:	4603      	mov	r3, r0
 800aa20:	2280      	movs	r2, #128	@ 0x80
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f001 f84e 	bl	800bac4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	7959      	ldrb	r1, [r3, #5]
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800aa38:	687a      	ldr	r2, [r7, #4]
 800aa3a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800aa3c:	9202      	str	r2, [sp, #8]
 800aa3e:	2200      	movs	r2, #0
 800aa40:	9201      	str	r2, [sp, #4]
 800aa42:	9300      	str	r3, [sp, #0]
 800aa44:	4603      	mov	r3, r0
 800aa46:	2200      	movs	r2, #0
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f001 f83b 	bl	800bac4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800aa4e:	e0e3      	b.n	800ac18 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aa50:	7bbb      	ldrb	r3, [r7, #14]
 800aa52:	2b03      	cmp	r3, #3
 800aa54:	f040 80e0 	bne.w	800ac18 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	220d      	movs	r2, #13
 800aa5c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2200      	movs	r2, #0
 800aa62:	705a      	strb	r2, [r3, #1]
      break;
 800aa64:	e0d8      	b.n	800ac18 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800aa66:	2109      	movs	r1, #9
 800aa68:	6878      	ldr	r0, [r7, #4]
 800aa6a:	f000 f9a5 	bl	800adb8 <USBH_Get_CfgDesc>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aa72:	7bbb      	ldrb	r3, [r7, #14]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d103      	bne.n	800aa80 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2204      	movs	r2, #4
 800aa7c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800aa7e:	e0cd      	b.n	800ac1c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aa80:	7bbb      	ldrb	r3, [r7, #14]
 800aa82:	2b03      	cmp	r3, #3
 800aa84:	f040 80ca 	bne.w	800ac1c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800aa8e:	3301      	adds	r3, #1
 800aa90:	b2da      	uxtb	r2, r3
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800aa9e:	2b03      	cmp	r3, #3
 800aaa0:	d903      	bls.n	800aaaa <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	220d      	movs	r2, #13
 800aaa6:	701a      	strb	r2, [r3, #0]
      break;
 800aaa8:	e0b8      	b.n	800ac1c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	795b      	ldrb	r3, [r3, #5]
 800aaae:	4619      	mov	r1, r3
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	f001 f857 	bl	800bb64 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	791b      	ldrb	r3, [r3, #4]
 800aaba:	4619      	mov	r1, r3
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	f001 f851 	bl	800bb64 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2200      	movs	r2, #0
 800aac6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2200      	movs	r2, #0
 800aacc:	701a      	strb	r2, [r3, #0]
      break;
 800aace:	e0a5      	b.n	800ac1c <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800aad6:	4619      	mov	r1, r3
 800aad8:	6878      	ldr	r0, [r7, #4]
 800aada:	f000 f96d 	bl	800adb8 <USBH_Get_CfgDesc>
 800aade:	4603      	mov	r3, r0
 800aae0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aae2:	7bbb      	ldrb	r3, [r7, #14]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d103      	bne.n	800aaf0 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2205      	movs	r2, #5
 800aaec:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800aaee:	e097      	b.n	800ac20 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aaf0:	7bbb      	ldrb	r3, [r7, #14]
 800aaf2:	2b03      	cmp	r3, #3
 800aaf4:	f040 8094 	bne.w	800ac20 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800aafe:	3301      	adds	r3, #1
 800ab00:	b2da      	uxtb	r2, r3
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800ab0e:	2b03      	cmp	r3, #3
 800ab10:	d903      	bls.n	800ab1a <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	220d      	movs	r2, #13
 800ab16:	701a      	strb	r2, [r3, #0]
      break;
 800ab18:	e082      	b.n	800ac20 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	795b      	ldrb	r3, [r3, #5]
 800ab1e:	4619      	mov	r1, r3
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f001 f81f 	bl	800bb64 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	791b      	ldrb	r3, [r3, #4]
 800ab2a:	4619      	mov	r1, r3
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f001 f819 	bl	800bb64 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2200      	movs	r2, #0
 800ab36:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	701a      	strb	r2, [r3, #0]
      break;
 800ab3e:	e06f      	b.n	800ac20 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d019      	beq.n	800ab7e <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ab56:	23ff      	movs	r3, #255	@ 0xff
 800ab58:	6878      	ldr	r0, [r7, #4]
 800ab5a:	f000 f957 	bl	800ae0c <USBH_Get_StringDesc>
 800ab5e:	4603      	mov	r3, r0
 800ab60:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ab62:	7bbb      	ldrb	r3, [r7, #14]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d103      	bne.n	800ab70 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2206      	movs	r2, #6
 800ab6c:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800ab6e:	e059      	b.n	800ac24 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ab70:	7bbb      	ldrb	r3, [r7, #14]
 800ab72:	2b03      	cmp	r3, #3
 800ab74:	d156      	bne.n	800ac24 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2206      	movs	r2, #6
 800ab7a:	705a      	strb	r2, [r3, #1]
      break;
 800ab7c:	e052      	b.n	800ac24 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	2206      	movs	r2, #6
 800ab82:	705a      	strb	r2, [r3, #1]
      break;
 800ab84:	e04e      	b.n	800ac24 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d019      	beq.n	800abc4 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ab9c:	23ff      	movs	r3, #255	@ 0xff
 800ab9e:	6878      	ldr	r0, [r7, #4]
 800aba0:	f000 f934 	bl	800ae0c <USBH_Get_StringDesc>
 800aba4:	4603      	mov	r3, r0
 800aba6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800aba8:	7bbb      	ldrb	r3, [r7, #14]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d103      	bne.n	800abb6 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2207      	movs	r2, #7
 800abb2:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800abb4:	e038      	b.n	800ac28 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800abb6:	7bbb      	ldrb	r3, [r7, #14]
 800abb8:	2b03      	cmp	r3, #3
 800abba:	d135      	bne.n	800ac28 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2207      	movs	r2, #7
 800abc0:	705a      	strb	r2, [r3, #1]
      break;
 800abc2:	e031      	b.n	800ac28 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2207      	movs	r2, #7
 800abc8:	705a      	strb	r2, [r3, #1]
      break;
 800abca:	e02d      	b.n	800ac28 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d017      	beq.n	800ac06 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800abe2:	23ff      	movs	r3, #255	@ 0xff
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	f000 f911 	bl	800ae0c <USBH_Get_StringDesc>
 800abea:	4603      	mov	r3, r0
 800abec:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800abee:	7bbb      	ldrb	r3, [r7, #14]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d102      	bne.n	800abfa <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800abf4:	2300      	movs	r3, #0
 800abf6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800abf8:	e018      	b.n	800ac2c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800abfa:	7bbb      	ldrb	r3, [r7, #14]
 800abfc:	2b03      	cmp	r3, #3
 800abfe:	d115      	bne.n	800ac2c <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800ac00:	2300      	movs	r3, #0
 800ac02:	73fb      	strb	r3, [r7, #15]
      break;
 800ac04:	e012      	b.n	800ac2c <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800ac06:	2300      	movs	r3, #0
 800ac08:	73fb      	strb	r3, [r7, #15]
      break;
 800ac0a:	e00f      	b.n	800ac2c <USBH_HandleEnum+0x3b4>

    default:
      break;
 800ac0c:	bf00      	nop
 800ac0e:	e00e      	b.n	800ac2e <USBH_HandleEnum+0x3b6>
      break;
 800ac10:	bf00      	nop
 800ac12:	e00c      	b.n	800ac2e <USBH_HandleEnum+0x3b6>
      break;
 800ac14:	bf00      	nop
 800ac16:	e00a      	b.n	800ac2e <USBH_HandleEnum+0x3b6>
      break;
 800ac18:	bf00      	nop
 800ac1a:	e008      	b.n	800ac2e <USBH_HandleEnum+0x3b6>
      break;
 800ac1c:	bf00      	nop
 800ac1e:	e006      	b.n	800ac2e <USBH_HandleEnum+0x3b6>
      break;
 800ac20:	bf00      	nop
 800ac22:	e004      	b.n	800ac2e <USBH_HandleEnum+0x3b6>
      break;
 800ac24:	bf00      	nop
 800ac26:	e002      	b.n	800ac2e <USBH_HandleEnum+0x3b6>
      break;
 800ac28:	bf00      	nop
 800ac2a:	e000      	b.n	800ac2e <USBH_HandleEnum+0x3b6>
      break;
 800ac2c:	bf00      	nop
  }
  return Status;
 800ac2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac30:	4618      	mov	r0, r3
 800ac32:	3710      	adds	r7, #16
 800ac34:	46bd      	mov	sp, r7
 800ac36:	bd80      	pop	{r7, pc}

0800ac38 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800ac38:	b480      	push	{r7}
 800ac3a:	b083      	sub	sp, #12
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
 800ac40:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	683a      	ldr	r2, [r7, #0]
 800ac46:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800ac4a:	bf00      	nop
 800ac4c:	370c      	adds	r7, #12
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac54:	4770      	bx	lr

0800ac56 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800ac56:	b580      	push	{r7, lr}
 800ac58:	b082      	sub	sp, #8
 800ac5a:	af00      	add	r7, sp, #0
 800ac5c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ac64:	1c5a      	adds	r2, r3, #1
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800ac6c:	6878      	ldr	r0, [r7, #4]
 800ac6e:	f000 f804 	bl	800ac7a <USBH_HandleSof>
}
 800ac72:	bf00      	nop
 800ac74:	3708      	adds	r7, #8
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}

0800ac7a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800ac7a:	b580      	push	{r7, lr}
 800ac7c:	b082      	sub	sp, #8
 800ac7e:	af00      	add	r7, sp, #0
 800ac80:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	781b      	ldrb	r3, [r3, #0]
 800ac86:	b2db      	uxtb	r3, r3
 800ac88:	2b0b      	cmp	r3, #11
 800ac8a:	d10a      	bne.n	800aca2 <USBH_HandleSof+0x28>
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d005      	beq.n	800aca2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ac9c:	699b      	ldr	r3, [r3, #24]
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	4798      	blx	r3
  }
}
 800aca2:	bf00      	nop
 800aca4:	3708      	adds	r7, #8
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}

0800acaa <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800acaa:	b480      	push	{r7}
 800acac:	b083      	sub	sp, #12
 800acae:	af00      	add	r7, sp, #0
 800acb0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2201      	movs	r2, #1
 800acb6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
 800acba:	bf00      	nop
}
 800acbc:	370c      	adds	r7, #12
 800acbe:	46bd      	mov	sp, r7
 800acc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc4:	4770      	bx	lr

0800acc6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800acc6:	b480      	push	{r7}
 800acc8:	b083      	sub	sp, #12
 800acca:	af00      	add	r7, sp, #0
 800accc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2200      	movs	r2, #0
 800acd2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2201      	movs	r2, #1
 800acda:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 800acde:	bf00      	nop
}
 800ace0:	370c      	adds	r7, #12
 800ace2:	46bd      	mov	sp, r7
 800ace4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace8:	4770      	bx	lr

0800acea <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800acea:	b480      	push	{r7}
 800acec:	b083      	sub	sp, #12
 800acee:	af00      	add	r7, sp, #0
 800acf0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2201      	movs	r2, #1
 800acf6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	2200      	movs	r2, #0
 800acfe:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2200      	movs	r2, #0
 800ad06:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800ad0a:	2300      	movs	r3, #0
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	370c      	adds	r7, #12
 800ad10:	46bd      	mov	sp, r7
 800ad12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad16:	4770      	bx	lr

0800ad18 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b082      	sub	sp, #8
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2201      	movs	r2, #1
 800ad24:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2200      	movs	r2, #0
 800ad34:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	f001 f8c0 	bl	800bebe <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	791b      	ldrb	r3, [r3, #4]
 800ad42:	4619      	mov	r1, r3
 800ad44:	6878      	ldr	r0, [r7, #4]
 800ad46:	f000 ff0d 	bl	800bb64 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	795b      	ldrb	r3, [r3, #5]
 800ad4e:	4619      	mov	r1, r3
 800ad50:	6878      	ldr	r0, [r7, #4]
 800ad52:	f000 ff07 	bl	800bb64 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800ad56:	2300      	movs	r3, #0
}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	3708      	adds	r7, #8
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}

0800ad60 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b086      	sub	sp, #24
 800ad64:	af02      	add	r7, sp, #8
 800ad66:	6078      	str	r0, [r7, #4]
 800ad68:	460b      	mov	r3, r1
 800ad6a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800ad6c:	887b      	ldrh	r3, [r7, #2]
 800ad6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad72:	d901      	bls.n	800ad78 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800ad74:	2303      	movs	r3, #3
 800ad76:	e01b      	b.n	800adb0 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800ad7e:	887b      	ldrh	r3, [r7, #2]
 800ad80:	9300      	str	r3, [sp, #0]
 800ad82:	4613      	mov	r3, r2
 800ad84:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ad88:	2100      	movs	r1, #0
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f000 f872 	bl	800ae74 <USBH_GetDescriptor>
 800ad90:	4603      	mov	r3, r0
 800ad92:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800ad94:	7bfb      	ldrb	r3, [r7, #15]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d109      	bne.n	800adae <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800ada0:	887a      	ldrh	r2, [r7, #2]
 800ada2:	4619      	mov	r1, r3
 800ada4:	6878      	ldr	r0, [r7, #4]
 800ada6:	f000 f929 	bl	800affc <USBH_ParseDevDesc>
 800adaa:	4603      	mov	r3, r0
 800adac:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800adae:	7bfb      	ldrb	r3, [r7, #15]
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	3710      	adds	r7, #16
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd80      	pop	{r7, pc}

0800adb8 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b086      	sub	sp, #24
 800adbc:	af02      	add	r7, sp, #8
 800adbe:	6078      	str	r0, [r7, #4]
 800adc0:	460b      	mov	r3, r1
 800adc2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	331c      	adds	r3, #28
 800adc8:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800adca:	887b      	ldrh	r3, [r7, #2]
 800adcc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800add0:	d901      	bls.n	800add6 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800add2:	2303      	movs	r3, #3
 800add4:	e016      	b.n	800ae04 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800add6:	887b      	ldrh	r3, [r7, #2]
 800add8:	9300      	str	r3, [sp, #0]
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ade0:	2100      	movs	r1, #0
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	f000 f846 	bl	800ae74 <USBH_GetDescriptor>
 800ade8:	4603      	mov	r3, r0
 800adea:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800adec:	7bfb      	ldrb	r3, [r7, #15]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d107      	bne.n	800ae02 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800adf2:	887b      	ldrh	r3, [r7, #2]
 800adf4:	461a      	mov	r2, r3
 800adf6:	68b9      	ldr	r1, [r7, #8]
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f000 f9af 	bl	800b15c <USBH_ParseCfgDesc>
 800adfe:	4603      	mov	r3, r0
 800ae00:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ae02:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae04:	4618      	mov	r0, r3
 800ae06:	3710      	adds	r7, #16
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	bd80      	pop	{r7, pc}

0800ae0c <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b088      	sub	sp, #32
 800ae10:	af02      	add	r7, sp, #8
 800ae12:	60f8      	str	r0, [r7, #12]
 800ae14:	607a      	str	r2, [r7, #4]
 800ae16:	461a      	mov	r2, r3
 800ae18:	460b      	mov	r3, r1
 800ae1a:	72fb      	strb	r3, [r7, #11]
 800ae1c:	4613      	mov	r3, r2
 800ae1e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800ae20:	893b      	ldrh	r3, [r7, #8]
 800ae22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae26:	d802      	bhi.n	800ae2e <USBH_Get_StringDesc+0x22>
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d101      	bne.n	800ae32 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800ae2e:	2303      	movs	r3, #3
 800ae30:	e01c      	b.n	800ae6c <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800ae32:	7afb      	ldrb	r3, [r7, #11]
 800ae34:	b29b      	uxth	r3, r3
 800ae36:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800ae3a:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800ae42:	893b      	ldrh	r3, [r7, #8]
 800ae44:	9300      	str	r3, [sp, #0]
 800ae46:	460b      	mov	r3, r1
 800ae48:	2100      	movs	r1, #0
 800ae4a:	68f8      	ldr	r0, [r7, #12]
 800ae4c:	f000 f812 	bl	800ae74 <USBH_GetDescriptor>
 800ae50:	4603      	mov	r3, r0
 800ae52:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800ae54:	7dfb      	ldrb	r3, [r7, #23]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d107      	bne.n	800ae6a <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800ae60:	893a      	ldrh	r2, [r7, #8]
 800ae62:	6879      	ldr	r1, [r7, #4]
 800ae64:	4618      	mov	r0, r3
 800ae66:	f000 fb8c 	bl	800b582 <USBH_ParseStringDesc>
  }

  return status;
 800ae6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	3718      	adds	r7, #24
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}

0800ae74 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b084      	sub	sp, #16
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	60f8      	str	r0, [r7, #12]
 800ae7c:	607b      	str	r3, [r7, #4]
 800ae7e:	460b      	mov	r3, r1
 800ae80:	72fb      	strb	r3, [r7, #11]
 800ae82:	4613      	mov	r3, r2
 800ae84:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	789b      	ldrb	r3, [r3, #2]
 800ae8a:	2b01      	cmp	r3, #1
 800ae8c:	d11c      	bne.n	800aec8 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800ae8e:	7afb      	ldrb	r3, [r7, #11]
 800ae90:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ae94:	b2da      	uxtb	r2, r3
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	2206      	movs	r2, #6
 800ae9e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	893a      	ldrh	r2, [r7, #8]
 800aea4:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800aea6:	893b      	ldrh	r3, [r7, #8]
 800aea8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800aeac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aeb0:	d104      	bne.n	800aebc <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	f240 4209 	movw	r2, #1033	@ 0x409
 800aeb8:	829a      	strh	r2, [r3, #20]
 800aeba:	e002      	b.n	800aec2 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	2200      	movs	r2, #0
 800aec0:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	8b3a      	ldrh	r2, [r7, #24]
 800aec6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800aec8:	8b3b      	ldrh	r3, [r7, #24]
 800aeca:	461a      	mov	r2, r3
 800aecc:	6879      	ldr	r1, [r7, #4]
 800aece:	68f8      	ldr	r0, [r7, #12]
 800aed0:	f000 fba4 	bl	800b61c <USBH_CtlReq>
 800aed4:	4603      	mov	r3, r0
}
 800aed6:	4618      	mov	r0, r3
 800aed8:	3710      	adds	r7, #16
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}

0800aede <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800aede:	b580      	push	{r7, lr}
 800aee0:	b082      	sub	sp, #8
 800aee2:	af00      	add	r7, sp, #0
 800aee4:	6078      	str	r0, [r7, #4]
 800aee6:	460b      	mov	r3, r1
 800aee8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	789b      	ldrb	r3, [r3, #2]
 800aeee:	2b01      	cmp	r3, #1
 800aef0:	d10f      	bne.n	800af12 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2200      	movs	r2, #0
 800aef6:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2205      	movs	r2, #5
 800aefc:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800aefe:	78fb      	ldrb	r3, [r7, #3]
 800af00:	b29a      	uxth	r2, r3
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2200      	movs	r2, #0
 800af0a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2200      	movs	r2, #0
 800af10:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800af12:	2200      	movs	r2, #0
 800af14:	2100      	movs	r1, #0
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f000 fb80 	bl	800b61c <USBH_CtlReq>
 800af1c:	4603      	mov	r3, r0
}
 800af1e:	4618      	mov	r0, r3
 800af20:	3708      	adds	r7, #8
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}

0800af26 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800af26:	b580      	push	{r7, lr}
 800af28:	b082      	sub	sp, #8
 800af2a:	af00      	add	r7, sp, #0
 800af2c:	6078      	str	r0, [r7, #4]
 800af2e:	460b      	mov	r3, r1
 800af30:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	789b      	ldrb	r3, [r3, #2]
 800af36:	2b01      	cmp	r3, #1
 800af38:	d10e      	bne.n	800af58 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	2200      	movs	r2, #0
 800af3e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2209      	movs	r2, #9
 800af44:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	887a      	ldrh	r2, [r7, #2]
 800af4a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2200      	movs	r2, #0
 800af50:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2200      	movs	r2, #0
 800af56:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800af58:	2200      	movs	r2, #0
 800af5a:	2100      	movs	r1, #0
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	f000 fb5d 	bl	800b61c <USBH_CtlReq>
 800af62:	4603      	mov	r3, r0
}
 800af64:	4618      	mov	r0, r3
 800af66:	3708      	adds	r7, #8
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}

0800af6c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b082      	sub	sp, #8
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
 800af74:	460b      	mov	r3, r1
 800af76:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	789b      	ldrb	r3, [r3, #2]
 800af7c:	2b01      	cmp	r3, #1
 800af7e:	d10f      	bne.n	800afa0 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2200      	movs	r2, #0
 800af84:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2203      	movs	r2, #3
 800af8a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800af8c:	78fb      	ldrb	r3, [r7, #3]
 800af8e:	b29a      	uxth	r2, r3
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2200      	movs	r2, #0
 800af98:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	2200      	movs	r2, #0
 800af9e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800afa0:	2200      	movs	r2, #0
 800afa2:	2100      	movs	r1, #0
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f000 fb39 	bl	800b61c <USBH_CtlReq>
 800afaa:	4603      	mov	r3, r0
}
 800afac:	4618      	mov	r0, r3
 800afae:	3708      	adds	r7, #8
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}

0800afb4 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b082      	sub	sp, #8
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
 800afbc:	460b      	mov	r3, r1
 800afbe:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	789b      	ldrb	r3, [r3, #2]
 800afc4:	2b01      	cmp	r3, #1
 800afc6:	d10f      	bne.n	800afe8 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2202      	movs	r2, #2
 800afcc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	2201      	movs	r2, #1
 800afd2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2200      	movs	r2, #0
 800afd8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800afda:	78fb      	ldrb	r3, [r7, #3]
 800afdc:	b29a      	uxth	r2, r3
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2200      	movs	r2, #0
 800afe6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800afe8:	2200      	movs	r2, #0
 800afea:	2100      	movs	r1, #0
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f000 fb15 	bl	800b61c <USBH_CtlReq>
 800aff2:	4603      	mov	r3, r0
}
 800aff4:	4618      	mov	r0, r3
 800aff6:	3708      	adds	r7, #8
 800aff8:	46bd      	mov	sp, r7
 800affa:	bd80      	pop	{r7, pc}

0800affc <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800affc:	b480      	push	{r7}
 800affe:	b087      	sub	sp, #28
 800b000:	af00      	add	r7, sp, #0
 800b002:	60f8      	str	r0, [r7, #12]
 800b004:	60b9      	str	r1, [r7, #8]
 800b006:	4613      	mov	r3, r2
 800b008:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800b010:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800b012:	2300      	movs	r3, #0
 800b014:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d101      	bne.n	800b020 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800b01c:	2302      	movs	r3, #2
 800b01e:	e094      	b.n	800b14a <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	781a      	ldrb	r2, [r3, #0]
 800b024:	693b      	ldr	r3, [r7, #16]
 800b026:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	785a      	ldrb	r2, [r3, #1]
 800b02c:	693b      	ldr	r3, [r7, #16]
 800b02e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	3302      	adds	r3, #2
 800b034:	781b      	ldrb	r3, [r3, #0]
 800b036:	461a      	mov	r2, r3
 800b038:	68bb      	ldr	r3, [r7, #8]
 800b03a:	3303      	adds	r3, #3
 800b03c:	781b      	ldrb	r3, [r3, #0]
 800b03e:	021b      	lsls	r3, r3, #8
 800b040:	b29b      	uxth	r3, r3
 800b042:	4313      	orrs	r3, r2
 800b044:	b29a      	uxth	r2, r3
 800b046:	693b      	ldr	r3, [r7, #16]
 800b048:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800b04a:	68bb      	ldr	r3, [r7, #8]
 800b04c:	791a      	ldrb	r2, [r3, #4]
 800b04e:	693b      	ldr	r3, [r7, #16]
 800b050:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	795a      	ldrb	r2, [r3, #5]
 800b056:	693b      	ldr	r3, [r7, #16]
 800b058:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	799a      	ldrb	r2, [r3, #6]
 800b05e:	693b      	ldr	r3, [r7, #16]
 800b060:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	79da      	ldrb	r2, [r3, #7]
 800b066:	693b      	ldr	r3, [r7, #16]
 800b068:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b070:	2b00      	cmp	r3, #0
 800b072:	d004      	beq.n	800b07e <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800b07a:	2b01      	cmp	r3, #1
 800b07c:	d11b      	bne.n	800b0b6 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800b07e:	693b      	ldr	r3, [r7, #16]
 800b080:	79db      	ldrb	r3, [r3, #7]
 800b082:	2b20      	cmp	r3, #32
 800b084:	dc0f      	bgt.n	800b0a6 <USBH_ParseDevDesc+0xaa>
 800b086:	2b08      	cmp	r3, #8
 800b088:	db0f      	blt.n	800b0aa <USBH_ParseDevDesc+0xae>
 800b08a:	3b08      	subs	r3, #8
 800b08c:	4a32      	ldr	r2, [pc, #200]	@ (800b158 <USBH_ParseDevDesc+0x15c>)
 800b08e:	fa22 f303 	lsr.w	r3, r2, r3
 800b092:	f003 0301 	and.w	r3, r3, #1
 800b096:	2b00      	cmp	r3, #0
 800b098:	bf14      	ite	ne
 800b09a:	2301      	movne	r3, #1
 800b09c:	2300      	moveq	r3, #0
 800b09e:	b2db      	uxtb	r3, r3
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d106      	bne.n	800b0b2 <USBH_ParseDevDesc+0xb6>
 800b0a4:	e001      	b.n	800b0aa <USBH_ParseDevDesc+0xae>
 800b0a6:	2b40      	cmp	r3, #64	@ 0x40
 800b0a8:	d003      	beq.n	800b0b2 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800b0aa:	693b      	ldr	r3, [r7, #16]
 800b0ac:	2208      	movs	r2, #8
 800b0ae:	71da      	strb	r2, [r3, #7]
        break;
 800b0b0:	e000      	b.n	800b0b4 <USBH_ParseDevDesc+0xb8>
        break;
 800b0b2:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800b0b4:	e00e      	b.n	800b0d4 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b0bc:	2b02      	cmp	r3, #2
 800b0be:	d107      	bne.n	800b0d0 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800b0c0:	693b      	ldr	r3, [r7, #16]
 800b0c2:	79db      	ldrb	r3, [r3, #7]
 800b0c4:	2b08      	cmp	r3, #8
 800b0c6:	d005      	beq.n	800b0d4 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800b0c8:	693b      	ldr	r3, [r7, #16]
 800b0ca:	2208      	movs	r2, #8
 800b0cc:	71da      	strb	r2, [r3, #7]
 800b0ce:	e001      	b.n	800b0d4 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800b0d0:	2303      	movs	r3, #3
 800b0d2:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800b0d4:	88fb      	ldrh	r3, [r7, #6]
 800b0d6:	2b08      	cmp	r3, #8
 800b0d8:	d936      	bls.n	800b148 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800b0da:	68bb      	ldr	r3, [r7, #8]
 800b0dc:	3308      	adds	r3, #8
 800b0de:	781b      	ldrb	r3, [r3, #0]
 800b0e0:	461a      	mov	r2, r3
 800b0e2:	68bb      	ldr	r3, [r7, #8]
 800b0e4:	3309      	adds	r3, #9
 800b0e6:	781b      	ldrb	r3, [r3, #0]
 800b0e8:	021b      	lsls	r3, r3, #8
 800b0ea:	b29b      	uxth	r3, r3
 800b0ec:	4313      	orrs	r3, r2
 800b0ee:	b29a      	uxth	r2, r3
 800b0f0:	693b      	ldr	r3, [r7, #16]
 800b0f2:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	330a      	adds	r3, #10
 800b0f8:	781b      	ldrb	r3, [r3, #0]
 800b0fa:	461a      	mov	r2, r3
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	330b      	adds	r3, #11
 800b100:	781b      	ldrb	r3, [r3, #0]
 800b102:	021b      	lsls	r3, r3, #8
 800b104:	b29b      	uxth	r3, r3
 800b106:	4313      	orrs	r3, r2
 800b108:	b29a      	uxth	r2, r3
 800b10a:	693b      	ldr	r3, [r7, #16]
 800b10c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800b10e:	68bb      	ldr	r3, [r7, #8]
 800b110:	330c      	adds	r3, #12
 800b112:	781b      	ldrb	r3, [r3, #0]
 800b114:	461a      	mov	r2, r3
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	330d      	adds	r3, #13
 800b11a:	781b      	ldrb	r3, [r3, #0]
 800b11c:	021b      	lsls	r3, r3, #8
 800b11e:	b29b      	uxth	r3, r3
 800b120:	4313      	orrs	r3, r2
 800b122:	b29a      	uxth	r2, r3
 800b124:	693b      	ldr	r3, [r7, #16]
 800b126:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	7b9a      	ldrb	r2, [r3, #14]
 800b12c:	693b      	ldr	r3, [r7, #16]
 800b12e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	7bda      	ldrb	r2, [r3, #15]
 800b134:	693b      	ldr	r3, [r7, #16]
 800b136:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	7c1a      	ldrb	r2, [r3, #16]
 800b13c:	693b      	ldr	r3, [r7, #16]
 800b13e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	7c5a      	ldrb	r2, [r3, #17]
 800b144:	693b      	ldr	r3, [r7, #16]
 800b146:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800b148:	7dfb      	ldrb	r3, [r7, #23]
}
 800b14a:	4618      	mov	r0, r3
 800b14c:	371c      	adds	r7, #28
 800b14e:	46bd      	mov	sp, r7
 800b150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b154:	4770      	bx	lr
 800b156:	bf00      	nop
 800b158:	01000101 	.word	0x01000101

0800b15c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b08c      	sub	sp, #48	@ 0x30
 800b160:	af00      	add	r7, sp, #0
 800b162:	60f8      	str	r0, [r7, #12]
 800b164:	60b9      	str	r1, [r7, #8]
 800b166:	4613      	mov	r3, r2
 800b168:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800b170:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800b172:	2300      	movs	r3, #0
 800b174:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b178:	2300      	movs	r3, #0
 800b17a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800b17e:	2300      	movs	r3, #0
 800b180:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d101      	bne.n	800b18e <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800b18a:	2302      	movs	r3, #2
 800b18c:	e0de      	b.n	800b34c <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b18e:	68bb      	ldr	r3, [r7, #8]
 800b190:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800b192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b194:	781b      	ldrb	r3, [r3, #0]
 800b196:	2b09      	cmp	r3, #9
 800b198:	d002      	beq.n	800b1a0 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800b19a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b19c:	2209      	movs	r2, #9
 800b19e:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	781a      	ldrb	r2, [r3, #0]
 800b1a4:	6a3b      	ldr	r3, [r7, #32]
 800b1a6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	785a      	ldrb	r2, [r3, #1]
 800b1ac:	6a3b      	ldr	r3, [r7, #32]
 800b1ae:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	3302      	adds	r3, #2
 800b1b4:	781b      	ldrb	r3, [r3, #0]
 800b1b6:	461a      	mov	r2, r3
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	3303      	adds	r3, #3
 800b1bc:	781b      	ldrb	r3, [r3, #0]
 800b1be:	021b      	lsls	r3, r3, #8
 800b1c0:	b29b      	uxth	r3, r3
 800b1c2:	4313      	orrs	r3, r2
 800b1c4:	b29b      	uxth	r3, r3
 800b1c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b1ca:	bf28      	it	cs
 800b1cc:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800b1d0:	b29a      	uxth	r2, r3
 800b1d2:	6a3b      	ldr	r3, [r7, #32]
 800b1d4:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	791a      	ldrb	r2, [r3, #4]
 800b1da:	6a3b      	ldr	r3, [r7, #32]
 800b1dc:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	795a      	ldrb	r2, [r3, #5]
 800b1e2:	6a3b      	ldr	r3, [r7, #32]
 800b1e4:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	799a      	ldrb	r2, [r3, #6]
 800b1ea:	6a3b      	ldr	r3, [r7, #32]
 800b1ec:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	79da      	ldrb	r2, [r3, #7]
 800b1f2:	6a3b      	ldr	r3, [r7, #32]
 800b1f4:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800b1f6:	68bb      	ldr	r3, [r7, #8]
 800b1f8:	7a1a      	ldrb	r2, [r3, #8]
 800b1fa:	6a3b      	ldr	r3, [r7, #32]
 800b1fc:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b1fe:	88fb      	ldrh	r3, [r7, #6]
 800b200:	2b09      	cmp	r3, #9
 800b202:	f240 80a1 	bls.w	800b348 <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 800b206:	2309      	movs	r3, #9
 800b208:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b20a:	2300      	movs	r3, #0
 800b20c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b20e:	e085      	b.n	800b31c <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b210:	f107 0316 	add.w	r3, r7, #22
 800b214:	4619      	mov	r1, r3
 800b216:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b218:	f000 f9e6 	bl	800b5e8 <USBH_GetNextDesc>
 800b21c:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800b21e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b220:	785b      	ldrb	r3, [r3, #1]
 800b222:	2b04      	cmp	r3, #4
 800b224:	d17a      	bne.n	800b31c <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800b226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b228:	781b      	ldrb	r3, [r3, #0]
 800b22a:	2b09      	cmp	r3, #9
 800b22c:	d002      	beq.n	800b234 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800b22e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b230:	2209      	movs	r2, #9
 800b232:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800b234:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b238:	221a      	movs	r2, #26
 800b23a:	fb02 f303 	mul.w	r3, r2, r3
 800b23e:	3308      	adds	r3, #8
 800b240:	6a3a      	ldr	r2, [r7, #32]
 800b242:	4413      	add	r3, r2
 800b244:	3302      	adds	r3, #2
 800b246:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b248:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b24a:	69f8      	ldr	r0, [r7, #28]
 800b24c:	f000 f882 	bl	800b354 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b250:	2300      	movs	r3, #0
 800b252:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800b256:	2300      	movs	r3, #0
 800b258:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b25a:	e043      	b.n	800b2e4 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b25c:	f107 0316 	add.w	r3, r7, #22
 800b260:	4619      	mov	r1, r3
 800b262:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b264:	f000 f9c0 	bl	800b5e8 <USBH_GetNextDesc>
 800b268:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b26a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b26c:	785b      	ldrb	r3, [r3, #1]
 800b26e:	2b05      	cmp	r3, #5
 800b270:	d138      	bne.n	800b2e4 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800b272:	69fb      	ldr	r3, [r7, #28]
 800b274:	795b      	ldrb	r3, [r3, #5]
 800b276:	2b01      	cmp	r3, #1
 800b278:	d113      	bne.n	800b2a2 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800b27a:	69fb      	ldr	r3, [r7, #28]
 800b27c:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800b27e:	2b02      	cmp	r3, #2
 800b280:	d003      	beq.n	800b28a <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800b282:	69fb      	ldr	r3, [r7, #28]
 800b284:	799b      	ldrb	r3, [r3, #6]
 800b286:	2b03      	cmp	r3, #3
 800b288:	d10b      	bne.n	800b2a2 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b28a:	69fb      	ldr	r3, [r7, #28]
 800b28c:	79db      	ldrb	r3, [r3, #7]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d10b      	bne.n	800b2aa <USBH_ParseCfgDesc+0x14e>
 800b292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b294:	781b      	ldrb	r3, [r3, #0]
 800b296:	2b09      	cmp	r3, #9
 800b298:	d007      	beq.n	800b2aa <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800b29a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b29c:	2209      	movs	r2, #9
 800b29e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b2a0:	e003      	b.n	800b2aa <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800b2a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2a4:	2207      	movs	r2, #7
 800b2a6:	701a      	strb	r2, [r3, #0]
 800b2a8:	e000      	b.n	800b2ac <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b2aa:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b2ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b2b0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b2b4:	3201      	adds	r2, #1
 800b2b6:	00d2      	lsls	r2, r2, #3
 800b2b8:	211a      	movs	r1, #26
 800b2ba:	fb01 f303 	mul.w	r3, r1, r3
 800b2be:	4413      	add	r3, r2
 800b2c0:	3308      	adds	r3, #8
 800b2c2:	6a3a      	ldr	r2, [r7, #32]
 800b2c4:	4413      	add	r3, r2
 800b2c6:	3304      	adds	r3, #4
 800b2c8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800b2ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b2cc:	69b9      	ldr	r1, [r7, #24]
 800b2ce:	68f8      	ldr	r0, [r7, #12]
 800b2d0:	f000 f86f 	bl	800b3b2 <USBH_ParseEPDesc>
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800b2da:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b2de:	3301      	adds	r3, #1
 800b2e0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b2e4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b2e8:	2b01      	cmp	r3, #1
 800b2ea:	d80a      	bhi.n	800b302 <USBH_ParseCfgDesc+0x1a6>
 800b2ec:	69fb      	ldr	r3, [r7, #28]
 800b2ee:	791b      	ldrb	r3, [r3, #4]
 800b2f0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b2f4:	429a      	cmp	r2, r3
 800b2f6:	d204      	bcs.n	800b302 <USBH_ParseCfgDesc+0x1a6>
 800b2f8:	6a3b      	ldr	r3, [r7, #32]
 800b2fa:	885a      	ldrh	r2, [r3, #2]
 800b2fc:	8afb      	ldrh	r3, [r7, #22]
 800b2fe:	429a      	cmp	r2, r3
 800b300:	d8ac      	bhi.n	800b25c <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800b302:	69fb      	ldr	r3, [r7, #28]
 800b304:	791b      	ldrb	r3, [r3, #4]
 800b306:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b30a:	429a      	cmp	r2, r3
 800b30c:	d201      	bcs.n	800b312 <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 800b30e:	2303      	movs	r3, #3
 800b310:	e01c      	b.n	800b34c <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 800b312:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b316:	3301      	adds	r3, #1
 800b318:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b31c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b320:	2b01      	cmp	r3, #1
 800b322:	d805      	bhi.n	800b330 <USBH_ParseCfgDesc+0x1d4>
 800b324:	6a3b      	ldr	r3, [r7, #32]
 800b326:	885a      	ldrh	r2, [r3, #2]
 800b328:	8afb      	ldrh	r3, [r7, #22]
 800b32a:	429a      	cmp	r2, r3
 800b32c:	f63f af70 	bhi.w	800b210 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800b330:	6a3b      	ldr	r3, [r7, #32]
 800b332:	791b      	ldrb	r3, [r3, #4]
 800b334:	2b02      	cmp	r3, #2
 800b336:	bf28      	it	cs
 800b338:	2302      	movcs	r3, #2
 800b33a:	b2db      	uxtb	r3, r3
 800b33c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b340:	429a      	cmp	r2, r3
 800b342:	d201      	bcs.n	800b348 <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 800b344:	2303      	movs	r3, #3
 800b346:	e001      	b.n	800b34c <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 800b348:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	3730      	adds	r7, #48	@ 0x30
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}

0800b354 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800b354:	b480      	push	{r7}
 800b356:	b083      	sub	sp, #12
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
 800b35c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800b35e:	683b      	ldr	r3, [r7, #0]
 800b360:	781a      	ldrb	r2, [r3, #0]
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	785a      	ldrb	r2, [r3, #1]
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	789a      	ldrb	r2, [r3, #2]
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	78da      	ldrb	r2, [r3, #3]
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	791a      	ldrb	r2, [r3, #4]
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	795a      	ldrb	r2, [r3, #5]
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	799a      	ldrb	r2, [r3, #6]
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	79da      	ldrb	r2, [r3, #7]
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	7a1a      	ldrb	r2, [r3, #8]
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	721a      	strb	r2, [r3, #8]
}
 800b3a6:	bf00      	nop
 800b3a8:	370c      	adds	r7, #12
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b0:	4770      	bx	lr

0800b3b2 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800b3b2:	b480      	push	{r7}
 800b3b4:	b087      	sub	sp, #28
 800b3b6:	af00      	add	r7, sp, #0
 800b3b8:	60f8      	str	r0, [r7, #12]
 800b3ba:	60b9      	str	r1, [r7, #8]
 800b3bc:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800b3be:	2300      	movs	r3, #0
 800b3c0:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	781a      	ldrb	r2, [r3, #0]
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	785a      	ldrb	r2, [r3, #1]
 800b3ce:	68bb      	ldr	r3, [r7, #8]
 800b3d0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	789a      	ldrb	r2, [r3, #2]
 800b3d6:	68bb      	ldr	r3, [r7, #8]
 800b3d8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	78da      	ldrb	r2, [r3, #3]
 800b3de:	68bb      	ldr	r3, [r7, #8]
 800b3e0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	3304      	adds	r3, #4
 800b3e6:	781b      	ldrb	r3, [r3, #0]
 800b3e8:	461a      	mov	r2, r3
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	3305      	adds	r3, #5
 800b3ee:	781b      	ldrb	r3, [r3, #0]
 800b3f0:	021b      	lsls	r3, r3, #8
 800b3f2:	b29b      	uxth	r3, r3
 800b3f4:	4313      	orrs	r3, r2
 800b3f6:	b29a      	uxth	r2, r3
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	799a      	ldrb	r2, [r3, #6]
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	889b      	ldrh	r3, [r3, #4]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d009      	beq.n	800b420 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800b40c:	68bb      	ldr	r3, [r7, #8]
 800b40e:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800b410:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b414:	d804      	bhi.n	800b420 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800b416:	68bb      	ldr	r3, [r7, #8]
 800b418:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800b41a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b41e:	d901      	bls.n	800b424 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800b420:	2303      	movs	r3, #3
 800b422:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d136      	bne.n	800b49c <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800b42e:	68bb      	ldr	r3, [r7, #8]
 800b430:	78db      	ldrb	r3, [r3, #3]
 800b432:	f003 0303 	and.w	r3, r3, #3
 800b436:	2b02      	cmp	r3, #2
 800b438:	d108      	bne.n	800b44c <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800b43a:	68bb      	ldr	r3, [r7, #8]
 800b43c:	889b      	ldrh	r3, [r3, #4]
 800b43e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b442:	f240 8097 	bls.w	800b574 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b446:	2303      	movs	r3, #3
 800b448:	75fb      	strb	r3, [r7, #23]
 800b44a:	e093      	b.n	800b574 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800b44c:	68bb      	ldr	r3, [r7, #8]
 800b44e:	78db      	ldrb	r3, [r3, #3]
 800b450:	f003 0303 	and.w	r3, r3, #3
 800b454:	2b00      	cmp	r3, #0
 800b456:	d107      	bne.n	800b468 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	889b      	ldrh	r3, [r3, #4]
 800b45c:	2b40      	cmp	r3, #64	@ 0x40
 800b45e:	f240 8089 	bls.w	800b574 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b462:	2303      	movs	r3, #3
 800b464:	75fb      	strb	r3, [r7, #23]
 800b466:	e085      	b.n	800b574 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	78db      	ldrb	r3, [r3, #3]
 800b46c:	f003 0303 	and.w	r3, r3, #3
 800b470:	2b01      	cmp	r3, #1
 800b472:	d005      	beq.n	800b480 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	78db      	ldrb	r3, [r3, #3]
 800b478:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b47c:	2b03      	cmp	r3, #3
 800b47e:	d10a      	bne.n	800b496 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b480:	68bb      	ldr	r3, [r7, #8]
 800b482:	799b      	ldrb	r3, [r3, #6]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d003      	beq.n	800b490 <USBH_ParseEPDesc+0xde>
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	799b      	ldrb	r3, [r3, #6]
 800b48c:	2b10      	cmp	r3, #16
 800b48e:	d970      	bls.n	800b572 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800b490:	2303      	movs	r3, #3
 800b492:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b494:	e06d      	b.n	800b572 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800b496:	2303      	movs	r3, #3
 800b498:	75fb      	strb	r3, [r7, #23]
 800b49a:	e06b      	b.n	800b574 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b4a2:	2b01      	cmp	r3, #1
 800b4a4:	d13c      	bne.n	800b520 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800b4a6:	68bb      	ldr	r3, [r7, #8]
 800b4a8:	78db      	ldrb	r3, [r3, #3]
 800b4aa:	f003 0303 	and.w	r3, r3, #3
 800b4ae:	2b02      	cmp	r3, #2
 800b4b0:	d005      	beq.n	800b4be <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800b4b2:	68bb      	ldr	r3, [r7, #8]
 800b4b4:	78db      	ldrb	r3, [r3, #3]
 800b4b6:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d106      	bne.n	800b4cc <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800b4be:	68bb      	ldr	r3, [r7, #8]
 800b4c0:	889b      	ldrh	r3, [r3, #4]
 800b4c2:	2b40      	cmp	r3, #64	@ 0x40
 800b4c4:	d956      	bls.n	800b574 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b4c6:	2303      	movs	r3, #3
 800b4c8:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800b4ca:	e053      	b.n	800b574 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800b4cc:	68bb      	ldr	r3, [r7, #8]
 800b4ce:	78db      	ldrb	r3, [r3, #3]
 800b4d0:	f003 0303 	and.w	r3, r3, #3
 800b4d4:	2b01      	cmp	r3, #1
 800b4d6:	d10e      	bne.n	800b4f6 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	799b      	ldrb	r3, [r3, #6]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d007      	beq.n	800b4f0 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800b4e4:	2b10      	cmp	r3, #16
 800b4e6:	d803      	bhi.n	800b4f0 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800b4ec:	2b40      	cmp	r3, #64	@ 0x40
 800b4ee:	d941      	bls.n	800b574 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b4f0:	2303      	movs	r3, #3
 800b4f2:	75fb      	strb	r3, [r7, #23]
 800b4f4:	e03e      	b.n	800b574 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800b4f6:	68bb      	ldr	r3, [r7, #8]
 800b4f8:	78db      	ldrb	r3, [r3, #3]
 800b4fa:	f003 0303 	and.w	r3, r3, #3
 800b4fe:	2b03      	cmp	r3, #3
 800b500:	d10b      	bne.n	800b51a <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	799b      	ldrb	r3, [r3, #6]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d004      	beq.n	800b514 <USBH_ParseEPDesc+0x162>
 800b50a:	68bb      	ldr	r3, [r7, #8]
 800b50c:	889b      	ldrh	r3, [r3, #4]
 800b50e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b512:	d32f      	bcc.n	800b574 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b514:	2303      	movs	r3, #3
 800b516:	75fb      	strb	r3, [r7, #23]
 800b518:	e02c      	b.n	800b574 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800b51a:	2303      	movs	r3, #3
 800b51c:	75fb      	strb	r3, [r7, #23]
 800b51e:	e029      	b.n	800b574 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b526:	2b02      	cmp	r3, #2
 800b528:	d120      	bne.n	800b56c <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800b52a:	68bb      	ldr	r3, [r7, #8]
 800b52c:	78db      	ldrb	r3, [r3, #3]
 800b52e:	f003 0303 	and.w	r3, r3, #3
 800b532:	2b00      	cmp	r3, #0
 800b534:	d106      	bne.n	800b544 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800b536:	68bb      	ldr	r3, [r7, #8]
 800b538:	889b      	ldrh	r3, [r3, #4]
 800b53a:	2b08      	cmp	r3, #8
 800b53c:	d01a      	beq.n	800b574 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b53e:	2303      	movs	r3, #3
 800b540:	75fb      	strb	r3, [r7, #23]
 800b542:	e017      	b.n	800b574 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800b544:	68bb      	ldr	r3, [r7, #8]
 800b546:	78db      	ldrb	r3, [r3, #3]
 800b548:	f003 0303 	and.w	r3, r3, #3
 800b54c:	2b03      	cmp	r3, #3
 800b54e:	d10a      	bne.n	800b566 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	799b      	ldrb	r3, [r3, #6]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d003      	beq.n	800b560 <USBH_ParseEPDesc+0x1ae>
 800b558:	68bb      	ldr	r3, [r7, #8]
 800b55a:	889b      	ldrh	r3, [r3, #4]
 800b55c:	2b08      	cmp	r3, #8
 800b55e:	d909      	bls.n	800b574 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b560:	2303      	movs	r3, #3
 800b562:	75fb      	strb	r3, [r7, #23]
 800b564:	e006      	b.n	800b574 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800b566:	2303      	movs	r3, #3
 800b568:	75fb      	strb	r3, [r7, #23]
 800b56a:	e003      	b.n	800b574 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800b56c:	2303      	movs	r3, #3
 800b56e:	75fb      	strb	r3, [r7, #23]
 800b570:	e000      	b.n	800b574 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b572:	bf00      	nop
  }

  return status;
 800b574:	7dfb      	ldrb	r3, [r7, #23]
}
 800b576:	4618      	mov	r0, r3
 800b578:	371c      	adds	r7, #28
 800b57a:	46bd      	mov	sp, r7
 800b57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b580:	4770      	bx	lr

0800b582 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b582:	b480      	push	{r7}
 800b584:	b087      	sub	sp, #28
 800b586:	af00      	add	r7, sp, #0
 800b588:	60f8      	str	r0, [r7, #12]
 800b58a:	60b9      	str	r1, [r7, #8]
 800b58c:	4613      	mov	r3, r2
 800b58e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	3301      	adds	r3, #1
 800b594:	781b      	ldrb	r3, [r3, #0]
 800b596:	2b03      	cmp	r3, #3
 800b598:	d120      	bne.n	800b5dc <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	781b      	ldrb	r3, [r3, #0]
 800b59e:	1e9a      	subs	r2, r3, #2
 800b5a0:	88fb      	ldrh	r3, [r7, #6]
 800b5a2:	4293      	cmp	r3, r2
 800b5a4:	bf28      	it	cs
 800b5a6:	4613      	movcs	r3, r2
 800b5a8:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	3302      	adds	r3, #2
 800b5ae:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	82fb      	strh	r3, [r7, #22]
 800b5b4:	e00b      	b.n	800b5ce <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b5b6:	8afb      	ldrh	r3, [r7, #22]
 800b5b8:	68fa      	ldr	r2, [r7, #12]
 800b5ba:	4413      	add	r3, r2
 800b5bc:	781a      	ldrb	r2, [r3, #0]
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b5c2:	68bb      	ldr	r3, [r7, #8]
 800b5c4:	3301      	adds	r3, #1
 800b5c6:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b5c8:	8afb      	ldrh	r3, [r7, #22]
 800b5ca:	3302      	adds	r3, #2
 800b5cc:	82fb      	strh	r3, [r7, #22]
 800b5ce:	8afa      	ldrh	r2, [r7, #22]
 800b5d0:	8abb      	ldrh	r3, [r7, #20]
 800b5d2:	429a      	cmp	r2, r3
 800b5d4:	d3ef      	bcc.n	800b5b6 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	2200      	movs	r2, #0
 800b5da:	701a      	strb	r2, [r3, #0]
  }
}
 800b5dc:	bf00      	nop
 800b5de:	371c      	adds	r7, #28
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e6:	4770      	bx	lr

0800b5e8 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	b085      	sub	sp, #20
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
 800b5f0:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	881b      	ldrh	r3, [r3, #0]
 800b5f6:	687a      	ldr	r2, [r7, #4]
 800b5f8:	7812      	ldrb	r2, [r2, #0]
 800b5fa:	4413      	add	r3, r2
 800b5fc:	b29a      	uxth	r2, r3
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	781b      	ldrb	r3, [r3, #0]
 800b606:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	4413      	add	r3, r2
 800b60c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b60e:	68fb      	ldr	r3, [r7, #12]
}
 800b610:	4618      	mov	r0, r3
 800b612:	3714      	adds	r7, #20
 800b614:	46bd      	mov	sp, r7
 800b616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61a:	4770      	bx	lr

0800b61c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b086      	sub	sp, #24
 800b620:	af00      	add	r7, sp, #0
 800b622:	60f8      	str	r0, [r7, #12]
 800b624:	60b9      	str	r1, [r7, #8]
 800b626:	4613      	mov	r3, r2
 800b628:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b62a:	2301      	movs	r3, #1
 800b62c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	789b      	ldrb	r3, [r3, #2]
 800b632:	2b01      	cmp	r3, #1
 800b634:	d002      	beq.n	800b63c <USBH_CtlReq+0x20>
 800b636:	2b02      	cmp	r3, #2
 800b638:	d00f      	beq.n	800b65a <USBH_CtlReq+0x3e>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 800b63a:	e027      	b.n	800b68c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	68ba      	ldr	r2, [r7, #8]
 800b640:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	88fa      	ldrh	r2, [r7, #6]
 800b646:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	2201      	movs	r2, #1
 800b64c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	2202      	movs	r2, #2
 800b652:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b654:	2301      	movs	r3, #1
 800b656:	75fb      	strb	r3, [r7, #23]
      break;
 800b658:	e018      	b.n	800b68c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800b65a:	68f8      	ldr	r0, [r7, #12]
 800b65c:	f000 f81c 	bl	800b698 <USBH_HandleControl>
 800b660:	4603      	mov	r3, r0
 800b662:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b664:	7dfb      	ldrb	r3, [r7, #23]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d002      	beq.n	800b670 <USBH_CtlReq+0x54>
 800b66a:	7dfb      	ldrb	r3, [r7, #23]
 800b66c:	2b03      	cmp	r3, #3
 800b66e:	d106      	bne.n	800b67e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	2201      	movs	r2, #1
 800b674:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	2200      	movs	r2, #0
 800b67a:	761a      	strb	r2, [r3, #24]
      break;
 800b67c:	e005      	b.n	800b68a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800b67e:	7dfb      	ldrb	r3, [r7, #23]
 800b680:	2b02      	cmp	r3, #2
 800b682:	d102      	bne.n	800b68a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	2201      	movs	r2, #1
 800b688:	709a      	strb	r2, [r3, #2]
      break;
 800b68a:	bf00      	nop
  }
  return status;
 800b68c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b68e:	4618      	mov	r0, r3
 800b690:	3718      	adds	r7, #24
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}
	...

0800b698 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b086      	sub	sp, #24
 800b69c:	af02      	add	r7, sp, #8
 800b69e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b6a0:	2301      	movs	r3, #1
 800b6a2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	7e1b      	ldrb	r3, [r3, #24]
 800b6ac:	3b01      	subs	r3, #1
 800b6ae:	2b0a      	cmp	r3, #10
 800b6b0:	f200 8157 	bhi.w	800b962 <USBH_HandleControl+0x2ca>
 800b6b4:	a201      	add	r2, pc, #4	@ (adr r2, 800b6bc <USBH_HandleControl+0x24>)
 800b6b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6ba:	bf00      	nop
 800b6bc:	0800b6e9 	.word	0x0800b6e9
 800b6c0:	0800b703 	.word	0x0800b703
 800b6c4:	0800b76d 	.word	0x0800b76d
 800b6c8:	0800b793 	.word	0x0800b793
 800b6cc:	0800b7cd 	.word	0x0800b7cd
 800b6d0:	0800b7f7 	.word	0x0800b7f7
 800b6d4:	0800b849 	.word	0x0800b849
 800b6d8:	0800b86b 	.word	0x0800b86b
 800b6dc:	0800b8a7 	.word	0x0800b8a7
 800b6e0:	0800b8cd 	.word	0x0800b8cd
 800b6e4:	0800b90b 	.word	0x0800b90b
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	f103 0110 	add.w	r1, r3, #16
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	795b      	ldrb	r3, [r3, #5]
 800b6f2:	461a      	mov	r2, r3
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	f000 f945 	bl	800b984 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2202      	movs	r2, #2
 800b6fe:	761a      	strb	r2, [r3, #24]
      break;
 800b700:	e13a      	b.n	800b978 <USBH_HandleControl+0x2e0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	795b      	ldrb	r3, [r3, #5]
 800b706:	4619      	mov	r1, r3
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	f000 fcc7 	bl	800c09c <USBH_LL_GetURBState>
 800b70e:	4603      	mov	r3, r0
 800b710:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b712:	7bbb      	ldrb	r3, [r7, #14]
 800b714:	2b01      	cmp	r3, #1
 800b716:	d11e      	bne.n	800b756 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	7c1b      	ldrb	r3, [r3, #16]
 800b71c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b720:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	8adb      	ldrh	r3, [r3, #22]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d00a      	beq.n	800b740 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b72a:	7b7b      	ldrb	r3, [r7, #13]
 800b72c:	2b80      	cmp	r3, #128	@ 0x80
 800b72e:	d103      	bne.n	800b738 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2203      	movs	r2, #3
 800b734:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800b736:	e116      	b.n	800b966 <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_DATA_OUT;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2205      	movs	r2, #5
 800b73c:	761a      	strb	r2, [r3, #24]
      break;
 800b73e:	e112      	b.n	800b966 <USBH_HandleControl+0x2ce>
          if (direction == USB_D2H)
 800b740:	7b7b      	ldrb	r3, [r7, #13]
 800b742:	2b80      	cmp	r3, #128	@ 0x80
 800b744:	d103      	bne.n	800b74e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2209      	movs	r2, #9
 800b74a:	761a      	strb	r2, [r3, #24]
      break;
 800b74c:	e10b      	b.n	800b966 <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_STATUS_IN;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2207      	movs	r2, #7
 800b752:	761a      	strb	r2, [r3, #24]
      break;
 800b754:	e107      	b.n	800b966 <USBH_HandleControl+0x2ce>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b756:	7bbb      	ldrb	r3, [r7, #14]
 800b758:	2b04      	cmp	r3, #4
 800b75a:	d003      	beq.n	800b764 <USBH_HandleControl+0xcc>
 800b75c:	7bbb      	ldrb	r3, [r7, #14]
 800b75e:	2b02      	cmp	r3, #2
 800b760:	f040 8101 	bne.w	800b966 <USBH_HandleControl+0x2ce>
          phost->Control.state = CTRL_ERROR;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	220b      	movs	r2, #11
 800b768:	761a      	strb	r2, [r3, #24]
      break;
 800b76a:	e0fc      	b.n	800b966 <USBH_HandleControl+0x2ce>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b772:	b29a      	uxth	r2, r3
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	6899      	ldr	r1, [r3, #8]
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	899a      	ldrh	r2, [r3, #12]
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	791b      	ldrb	r3, [r3, #4]
 800b784:	6878      	ldr	r0, [r7, #4]
 800b786:	f000 f93c 	bl	800ba02 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	2204      	movs	r2, #4
 800b78e:	761a      	strb	r2, [r3, #24]
      break;
 800b790:	e0f2      	b.n	800b978 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	791b      	ldrb	r3, [r3, #4]
 800b796:	4619      	mov	r1, r3
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f000 fc7f 	bl	800c09c <USBH_LL_GetURBState>
 800b79e:	4603      	mov	r3, r0
 800b7a0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b7a2:	7bbb      	ldrb	r3, [r7, #14]
 800b7a4:	2b01      	cmp	r3, #1
 800b7a6:	d103      	bne.n	800b7b0 <USBH_HandleControl+0x118>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2209      	movs	r2, #9
 800b7ac:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800b7ae:	e0dc      	b.n	800b96a <USBH_HandleControl+0x2d2>
      else if (URB_Status == USBH_URB_STALL)
 800b7b0:	7bbb      	ldrb	r3, [r7, #14]
 800b7b2:	2b05      	cmp	r3, #5
 800b7b4:	d102      	bne.n	800b7bc <USBH_HandleControl+0x124>
        status = USBH_NOT_SUPPORTED;
 800b7b6:	2303      	movs	r3, #3
 800b7b8:	73fb      	strb	r3, [r7, #15]
      break;
 800b7ba:	e0d6      	b.n	800b96a <USBH_HandleControl+0x2d2>
        if (URB_Status == USBH_URB_ERROR)
 800b7bc:	7bbb      	ldrb	r3, [r7, #14]
 800b7be:	2b04      	cmp	r3, #4
 800b7c0:	f040 80d3 	bne.w	800b96a <USBH_HandleControl+0x2d2>
          phost->Control.state = CTRL_ERROR;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	220b      	movs	r2, #11
 800b7c8:	761a      	strb	r2, [r3, #24]
      break;
 800b7ca:	e0ce      	b.n	800b96a <USBH_HandleControl+0x2d2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	6899      	ldr	r1, [r3, #8]
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	899a      	ldrh	r2, [r3, #12]
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	795b      	ldrb	r3, [r3, #5]
 800b7d8:	2001      	movs	r0, #1
 800b7da:	9000      	str	r0, [sp, #0]
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f000 f8eb 	bl	800b9b8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b7e8:	b29a      	uxth	r2, r3
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	2206      	movs	r2, #6
 800b7f2:	761a      	strb	r2, [r3, #24]
      break;
 800b7f4:	e0c0      	b.n	800b978 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	795b      	ldrb	r3, [r3, #5]
 800b7fa:	4619      	mov	r1, r3
 800b7fc:	6878      	ldr	r0, [r7, #4]
 800b7fe:	f000 fc4d 	bl	800c09c <USBH_LL_GetURBState>
 800b802:	4603      	mov	r3, r0
 800b804:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b806:	7bbb      	ldrb	r3, [r7, #14]
 800b808:	2b01      	cmp	r3, #1
 800b80a:	d103      	bne.n	800b814 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2207      	movs	r2, #7
 800b810:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800b812:	e0ac      	b.n	800b96e <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_STALL)
 800b814:	7bbb      	ldrb	r3, [r7, #14]
 800b816:	2b05      	cmp	r3, #5
 800b818:	d105      	bne.n	800b826 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	220c      	movs	r2, #12
 800b81e:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b820:	2303      	movs	r3, #3
 800b822:	73fb      	strb	r3, [r7, #15]
      break;
 800b824:	e0a3      	b.n	800b96e <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b826:	7bbb      	ldrb	r3, [r7, #14]
 800b828:	2b02      	cmp	r3, #2
 800b82a:	d103      	bne.n	800b834 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2205      	movs	r2, #5
 800b830:	761a      	strb	r2, [r3, #24]
      break;
 800b832:	e09c      	b.n	800b96e <USBH_HandleControl+0x2d6>
        if (URB_Status == USBH_URB_ERROR)
 800b834:	7bbb      	ldrb	r3, [r7, #14]
 800b836:	2b04      	cmp	r3, #4
 800b838:	f040 8099 	bne.w	800b96e <USBH_HandleControl+0x2d6>
          phost->Control.state = CTRL_ERROR;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	220b      	movs	r2, #11
 800b840:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b842:	2302      	movs	r3, #2
 800b844:	73fb      	strb	r3, [r7, #15]
      break;
 800b846:	e092      	b.n	800b96e <USBH_HandleControl+0x2d6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	791b      	ldrb	r3, [r3, #4]
 800b84c:	2200      	movs	r2, #0
 800b84e:	2100      	movs	r1, #0
 800b850:	6878      	ldr	r0, [r7, #4]
 800b852:	f000 f8d6 	bl	800ba02 <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b85c:	b29a      	uxth	r2, r3
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2208      	movs	r2, #8
 800b866:	761a      	strb	r2, [r3, #24]

      break;
 800b868:	e086      	b.n	800b978 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	791b      	ldrb	r3, [r3, #4]
 800b86e:	4619      	mov	r1, r3
 800b870:	6878      	ldr	r0, [r7, #4]
 800b872:	f000 fc13 	bl	800c09c <USBH_LL_GetURBState>
 800b876:	4603      	mov	r3, r0
 800b878:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b87a:	7bbb      	ldrb	r3, [r7, #14]
 800b87c:	2b01      	cmp	r3, #1
 800b87e:	d105      	bne.n	800b88c <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	220d      	movs	r2, #13
 800b884:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b886:	2300      	movs	r3, #0
 800b888:	73fb      	strb	r3, [r7, #15]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800b88a:	e072      	b.n	800b972 <USBH_HandleControl+0x2da>
      else if (URB_Status == USBH_URB_ERROR)
 800b88c:	7bbb      	ldrb	r3, [r7, #14]
 800b88e:	2b04      	cmp	r3, #4
 800b890:	d103      	bne.n	800b89a <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	220b      	movs	r2, #11
 800b896:	761a      	strb	r2, [r3, #24]
      break;
 800b898:	e06b      	b.n	800b972 <USBH_HandleControl+0x2da>
        if (URB_Status == USBH_URB_STALL)
 800b89a:	7bbb      	ldrb	r3, [r7, #14]
 800b89c:	2b05      	cmp	r3, #5
 800b89e:	d168      	bne.n	800b972 <USBH_HandleControl+0x2da>
          status = USBH_NOT_SUPPORTED;
 800b8a0:	2303      	movs	r3, #3
 800b8a2:	73fb      	strb	r3, [r7, #15]
      break;
 800b8a4:	e065      	b.n	800b972 <USBH_HandleControl+0x2da>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	795b      	ldrb	r3, [r3, #5]
 800b8aa:	2201      	movs	r2, #1
 800b8ac:	9200      	str	r2, [sp, #0]
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	2100      	movs	r1, #0
 800b8b2:	6878      	ldr	r0, [r7, #4]
 800b8b4:	f000 f880 	bl	800b9b8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b8be:	b29a      	uxth	r2, r3
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	220a      	movs	r2, #10
 800b8c8:	761a      	strb	r2, [r3, #24]
      break;
 800b8ca:	e055      	b.n	800b978 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	795b      	ldrb	r3, [r3, #5]
 800b8d0:	4619      	mov	r1, r3
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	f000 fbe2 	bl	800c09c <USBH_LL_GetURBState>
 800b8d8:	4603      	mov	r3, r0
 800b8da:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b8dc:	7bbb      	ldrb	r3, [r7, #14]
 800b8de:	2b01      	cmp	r3, #1
 800b8e0:	d105      	bne.n	800b8ee <USBH_HandleControl+0x256>
      {
        status = USBH_OK;
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	220d      	movs	r2, #13
 800b8ea:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800b8ec:	e043      	b.n	800b976 <USBH_HandleControl+0x2de>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b8ee:	7bbb      	ldrb	r3, [r7, #14]
 800b8f0:	2b02      	cmp	r3, #2
 800b8f2:	d103      	bne.n	800b8fc <USBH_HandleControl+0x264>
        phost->Control.state = CTRL_STATUS_OUT;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2209      	movs	r2, #9
 800b8f8:	761a      	strb	r2, [r3, #24]
      break;
 800b8fa:	e03c      	b.n	800b976 <USBH_HandleControl+0x2de>
        if (URB_Status == USBH_URB_ERROR)
 800b8fc:	7bbb      	ldrb	r3, [r7, #14]
 800b8fe:	2b04      	cmp	r3, #4
 800b900:	d139      	bne.n	800b976 <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	220b      	movs	r2, #11
 800b906:	761a      	strb	r2, [r3, #24]
      break;
 800b908:	e035      	b.n	800b976 <USBH_HandleControl+0x2de>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	7e5b      	ldrb	r3, [r3, #25]
 800b90e:	3301      	adds	r3, #1
 800b910:	b2da      	uxtb	r2, r3
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	765a      	strb	r2, [r3, #25]
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	7e5b      	ldrb	r3, [r3, #25]
 800b91a:	2b02      	cmp	r3, #2
 800b91c:	d806      	bhi.n	800b92c <USBH_HandleControl+0x294>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2201      	movs	r2, #1
 800b922:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2201      	movs	r2, #1
 800b928:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b92a:	e025      	b.n	800b978 <USBH_HandleControl+0x2e0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b932:	2106      	movs	r1, #6
 800b934:	6878      	ldr	r0, [r7, #4]
 800b936:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2200      	movs	r2, #0
 800b93c:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	795b      	ldrb	r3, [r3, #5]
 800b942:	4619      	mov	r1, r3
 800b944:	6878      	ldr	r0, [r7, #4]
 800b946:	f000 f90d 	bl	800bb64 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	791b      	ldrb	r3, [r3, #4]
 800b94e:	4619      	mov	r1, r3
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f000 f907 	bl	800bb64 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2200      	movs	r2, #0
 800b95a:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b95c:	2302      	movs	r3, #2
 800b95e:	73fb      	strb	r3, [r7, #15]
      break;
 800b960:	e00a      	b.n	800b978 <USBH_HandleControl+0x2e0>

    default:
      break;
 800b962:	bf00      	nop
 800b964:	e008      	b.n	800b978 <USBH_HandleControl+0x2e0>
      break;
 800b966:	bf00      	nop
 800b968:	e006      	b.n	800b978 <USBH_HandleControl+0x2e0>
      break;
 800b96a:	bf00      	nop
 800b96c:	e004      	b.n	800b978 <USBH_HandleControl+0x2e0>
      break;
 800b96e:	bf00      	nop
 800b970:	e002      	b.n	800b978 <USBH_HandleControl+0x2e0>
      break;
 800b972:	bf00      	nop
 800b974:	e000      	b.n	800b978 <USBH_HandleControl+0x2e0>
      break;
 800b976:	bf00      	nop
  }

  return status;
 800b978:	7bfb      	ldrb	r3, [r7, #15]
}
 800b97a:	4618      	mov	r0, r3
 800b97c:	3710      	adds	r7, #16
 800b97e:	46bd      	mov	sp, r7
 800b980:	bd80      	pop	{r7, pc}
 800b982:	bf00      	nop

0800b984 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b088      	sub	sp, #32
 800b988:	af04      	add	r7, sp, #16
 800b98a:	60f8      	str	r0, [r7, #12]
 800b98c:	60b9      	str	r1, [r7, #8]
 800b98e:	4613      	mov	r3, r2
 800b990:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b992:	79f9      	ldrb	r1, [r7, #7]
 800b994:	2300      	movs	r3, #0
 800b996:	9303      	str	r3, [sp, #12]
 800b998:	2308      	movs	r3, #8
 800b99a:	9302      	str	r3, [sp, #8]
 800b99c:	68bb      	ldr	r3, [r7, #8]
 800b99e:	9301      	str	r3, [sp, #4]
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	9300      	str	r3, [sp, #0]
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	68f8      	ldr	r0, [r7, #12]
 800b9aa:	f000 fb46 	bl	800c03a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800b9ae:	2300      	movs	r3, #0
}
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	3710      	adds	r7, #16
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	bd80      	pop	{r7, pc}

0800b9b8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b088      	sub	sp, #32
 800b9bc:	af04      	add	r7, sp, #16
 800b9be:	60f8      	str	r0, [r7, #12]
 800b9c0:	60b9      	str	r1, [r7, #8]
 800b9c2:	4611      	mov	r1, r2
 800b9c4:	461a      	mov	r2, r3
 800b9c6:	460b      	mov	r3, r1
 800b9c8:	80fb      	strh	r3, [r7, #6]
 800b9ca:	4613      	mov	r3, r2
 800b9cc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d001      	beq.n	800b9dc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b9d8:	2300      	movs	r3, #0
 800b9da:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b9dc:	7979      	ldrb	r1, [r7, #5]
 800b9de:	7e3b      	ldrb	r3, [r7, #24]
 800b9e0:	9303      	str	r3, [sp, #12]
 800b9e2:	88fb      	ldrh	r3, [r7, #6]
 800b9e4:	9302      	str	r3, [sp, #8]
 800b9e6:	68bb      	ldr	r3, [r7, #8]
 800b9e8:	9301      	str	r3, [sp, #4]
 800b9ea:	2301      	movs	r3, #1
 800b9ec:	9300      	str	r3, [sp, #0]
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	68f8      	ldr	r0, [r7, #12]
 800b9f4:	f000 fb21 	bl	800c03a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b9f8:	2300      	movs	r3, #0
}
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	3710      	adds	r7, #16
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	bd80      	pop	{r7, pc}

0800ba02 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800ba02:	b580      	push	{r7, lr}
 800ba04:	b088      	sub	sp, #32
 800ba06:	af04      	add	r7, sp, #16
 800ba08:	60f8      	str	r0, [r7, #12]
 800ba0a:	60b9      	str	r1, [r7, #8]
 800ba0c:	4611      	mov	r1, r2
 800ba0e:	461a      	mov	r2, r3
 800ba10:	460b      	mov	r3, r1
 800ba12:	80fb      	strh	r3, [r7, #6]
 800ba14:	4613      	mov	r3, r2
 800ba16:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ba18:	7979      	ldrb	r1, [r7, #5]
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	9303      	str	r3, [sp, #12]
 800ba1e:	88fb      	ldrh	r3, [r7, #6]
 800ba20:	9302      	str	r3, [sp, #8]
 800ba22:	68bb      	ldr	r3, [r7, #8]
 800ba24:	9301      	str	r3, [sp, #4]
 800ba26:	2301      	movs	r3, #1
 800ba28:	9300      	str	r3, [sp, #0]
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	2201      	movs	r2, #1
 800ba2e:	68f8      	ldr	r0, [r7, #12]
 800ba30:	f000 fb03 	bl	800c03a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800ba34:	2300      	movs	r3, #0

}
 800ba36:	4618      	mov	r0, r3
 800ba38:	3710      	adds	r7, #16
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	bd80      	pop	{r7, pc}

0800ba3e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800ba3e:	b580      	push	{r7, lr}
 800ba40:	b088      	sub	sp, #32
 800ba42:	af04      	add	r7, sp, #16
 800ba44:	60f8      	str	r0, [r7, #12]
 800ba46:	60b9      	str	r1, [r7, #8]
 800ba48:	4611      	mov	r1, r2
 800ba4a:	461a      	mov	r2, r3
 800ba4c:	460b      	mov	r3, r1
 800ba4e:	80fb      	strh	r3, [r7, #6]
 800ba50:	4613      	mov	r3, r2
 800ba52:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d001      	beq.n	800ba62 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800ba5e:	2300      	movs	r3, #0
 800ba60:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ba62:	7979      	ldrb	r1, [r7, #5]
 800ba64:	7e3b      	ldrb	r3, [r7, #24]
 800ba66:	9303      	str	r3, [sp, #12]
 800ba68:	88fb      	ldrh	r3, [r7, #6]
 800ba6a:	9302      	str	r3, [sp, #8]
 800ba6c:	68bb      	ldr	r3, [r7, #8]
 800ba6e:	9301      	str	r3, [sp, #4]
 800ba70:	2301      	movs	r3, #1
 800ba72:	9300      	str	r3, [sp, #0]
 800ba74:	2302      	movs	r3, #2
 800ba76:	2200      	movs	r2, #0
 800ba78:	68f8      	ldr	r0, [r7, #12]
 800ba7a:	f000 fade 	bl	800c03a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800ba7e:	2300      	movs	r3, #0
}
 800ba80:	4618      	mov	r0, r3
 800ba82:	3710      	adds	r7, #16
 800ba84:	46bd      	mov	sp, r7
 800ba86:	bd80      	pop	{r7, pc}

0800ba88 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b088      	sub	sp, #32
 800ba8c:	af04      	add	r7, sp, #16
 800ba8e:	60f8      	str	r0, [r7, #12]
 800ba90:	60b9      	str	r1, [r7, #8]
 800ba92:	4611      	mov	r1, r2
 800ba94:	461a      	mov	r2, r3
 800ba96:	460b      	mov	r3, r1
 800ba98:	80fb      	strh	r3, [r7, #6]
 800ba9a:	4613      	mov	r3, r2
 800ba9c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ba9e:	7979      	ldrb	r1, [r7, #5]
 800baa0:	2300      	movs	r3, #0
 800baa2:	9303      	str	r3, [sp, #12]
 800baa4:	88fb      	ldrh	r3, [r7, #6]
 800baa6:	9302      	str	r3, [sp, #8]
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	9301      	str	r3, [sp, #4]
 800baac:	2301      	movs	r3, #1
 800baae:	9300      	str	r3, [sp, #0]
 800bab0:	2302      	movs	r3, #2
 800bab2:	2201      	movs	r2, #1
 800bab4:	68f8      	ldr	r0, [r7, #12]
 800bab6:	f000 fac0 	bl	800c03a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800baba:	2300      	movs	r3, #0
}
 800babc:	4618      	mov	r0, r3
 800babe:	3710      	adds	r7, #16
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bd80      	pop	{r7, pc}

0800bac4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b086      	sub	sp, #24
 800bac8:	af04      	add	r7, sp, #16
 800baca:	6078      	str	r0, [r7, #4]
 800bacc:	4608      	mov	r0, r1
 800bace:	4611      	mov	r1, r2
 800bad0:	461a      	mov	r2, r3
 800bad2:	4603      	mov	r3, r0
 800bad4:	70fb      	strb	r3, [r7, #3]
 800bad6:	460b      	mov	r3, r1
 800bad8:	70bb      	strb	r3, [r7, #2]
 800bada:	4613      	mov	r3, r2
 800badc:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800bade:	7878      	ldrb	r0, [r7, #1]
 800bae0:	78ba      	ldrb	r2, [r7, #2]
 800bae2:	78f9      	ldrb	r1, [r7, #3]
 800bae4:	8b3b      	ldrh	r3, [r7, #24]
 800bae6:	9302      	str	r3, [sp, #8]
 800bae8:	7d3b      	ldrb	r3, [r7, #20]
 800baea:	9301      	str	r3, [sp, #4]
 800baec:	7c3b      	ldrb	r3, [r7, #16]
 800baee:	9300      	str	r3, [sp, #0]
 800baf0:	4603      	mov	r3, r0
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f000 fa53 	bl	800bf9e <USBH_LL_OpenPipe>

  return USBH_OK;
 800baf8:	2300      	movs	r3, #0
}
 800bafa:	4618      	mov	r0, r3
 800bafc:	3708      	adds	r7, #8
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bd80      	pop	{r7, pc}

0800bb02 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800bb02:	b580      	push	{r7, lr}
 800bb04:	b082      	sub	sp, #8
 800bb06:	af00      	add	r7, sp, #0
 800bb08:	6078      	str	r0, [r7, #4]
 800bb0a:	460b      	mov	r3, r1
 800bb0c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800bb0e:	78fb      	ldrb	r3, [r7, #3]
 800bb10:	4619      	mov	r1, r3
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f000 fa72 	bl	800bffc <USBH_LL_ClosePipe>

  return USBH_OK;
 800bb18:	2300      	movs	r3, #0
}
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	3708      	adds	r7, #8
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	bd80      	pop	{r7, pc}

0800bb22 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800bb22:	b580      	push	{r7, lr}
 800bb24:	b084      	sub	sp, #16
 800bb26:	af00      	add	r7, sp, #0
 800bb28:	6078      	str	r0, [r7, #4]
 800bb2a:	460b      	mov	r3, r1
 800bb2c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800bb2e:	6878      	ldr	r0, [r7, #4]
 800bb30:	f000 f836 	bl	800bba0 <USBH_GetFreePipe>
 800bb34:	4603      	mov	r3, r0
 800bb36:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800bb38:	89fb      	ldrh	r3, [r7, #14]
 800bb3a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bb3e:	4293      	cmp	r3, r2
 800bb40:	d00a      	beq.n	800bb58 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800bb42:	78fa      	ldrb	r2, [r7, #3]
 800bb44:	89fb      	ldrh	r3, [r7, #14]
 800bb46:	f003 030f 	and.w	r3, r3, #15
 800bb4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800bb4e:	6879      	ldr	r1, [r7, #4]
 800bb50:	33e0      	adds	r3, #224	@ 0xe0
 800bb52:	009b      	lsls	r3, r3, #2
 800bb54:	440b      	add	r3, r1
 800bb56:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800bb58:	89fb      	ldrh	r3, [r7, #14]
 800bb5a:	b2db      	uxtb	r3, r3
}
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	3710      	adds	r7, #16
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}

0800bb64 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800bb64:	b480      	push	{r7}
 800bb66:	b083      	sub	sp, #12
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
 800bb6c:	460b      	mov	r3, r1
 800bb6e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800bb70:	78fb      	ldrb	r3, [r7, #3]
 800bb72:	2b0f      	cmp	r3, #15
 800bb74:	d80d      	bhi.n	800bb92 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800bb76:	78fb      	ldrb	r3, [r7, #3]
 800bb78:	687a      	ldr	r2, [r7, #4]
 800bb7a:	33e0      	adds	r3, #224	@ 0xe0
 800bb7c:	009b      	lsls	r3, r3, #2
 800bb7e:	4413      	add	r3, r2
 800bb80:	685a      	ldr	r2, [r3, #4]
 800bb82:	78fb      	ldrb	r3, [r7, #3]
 800bb84:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800bb88:	6879      	ldr	r1, [r7, #4]
 800bb8a:	33e0      	adds	r3, #224	@ 0xe0
 800bb8c:	009b      	lsls	r3, r3, #2
 800bb8e:	440b      	add	r3, r1
 800bb90:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800bb92:	2300      	movs	r3, #0
}
 800bb94:	4618      	mov	r0, r3
 800bb96:	370c      	adds	r7, #12
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9e:	4770      	bx	lr

0800bba0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800bba0:	b480      	push	{r7}
 800bba2:	b085      	sub	sp, #20
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800bba8:	2300      	movs	r3, #0
 800bbaa:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800bbac:	2300      	movs	r3, #0
 800bbae:	73fb      	strb	r3, [r7, #15]
 800bbb0:	e00f      	b.n	800bbd2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800bbb2:	7bfb      	ldrb	r3, [r7, #15]
 800bbb4:	687a      	ldr	r2, [r7, #4]
 800bbb6:	33e0      	adds	r3, #224	@ 0xe0
 800bbb8:	009b      	lsls	r3, r3, #2
 800bbba:	4413      	add	r3, r2
 800bbbc:	685b      	ldr	r3, [r3, #4]
 800bbbe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d102      	bne.n	800bbcc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800bbc6:	7bfb      	ldrb	r3, [r7, #15]
 800bbc8:	b29b      	uxth	r3, r3
 800bbca:	e007      	b.n	800bbdc <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800bbcc:	7bfb      	ldrb	r3, [r7, #15]
 800bbce:	3301      	adds	r3, #1
 800bbd0:	73fb      	strb	r3, [r7, #15]
 800bbd2:	7bfb      	ldrb	r3, [r7, #15]
 800bbd4:	2b0f      	cmp	r3, #15
 800bbd6:	d9ec      	bls.n	800bbb2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800bbd8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800bbdc:	4618      	mov	r0, r3
 800bbde:	3714      	adds	r7, #20
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe6:	4770      	bx	lr

0800bbe8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800bbec:	2201      	movs	r2, #1
 800bbee:	490e      	ldr	r1, [pc, #56]	@ (800bc28 <MX_USB_HOST_Init+0x40>)
 800bbf0:	480e      	ldr	r0, [pc, #56]	@ (800bc2c <MX_USB_HOST_Init+0x44>)
 800bbf2:	f7fe fb0f 	bl	800a214 <USBH_Init>
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d001      	beq.n	800bc00 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800bbfc:	f7f5 ff88 	bl	8001b10 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800bc00:	490b      	ldr	r1, [pc, #44]	@ (800bc30 <MX_USB_HOST_Init+0x48>)
 800bc02:	480a      	ldr	r0, [pc, #40]	@ (800bc2c <MX_USB_HOST_Init+0x44>)
 800bc04:	f7fe fbb1 	bl	800a36a <USBH_RegisterClass>
 800bc08:	4603      	mov	r3, r0
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d001      	beq.n	800bc12 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800bc0e:	f7f5 ff7f 	bl	8001b10 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800bc12:	4806      	ldr	r0, [pc, #24]	@ (800bc2c <MX_USB_HOST_Init+0x44>)
 800bc14:	f7fe fc35 	bl	800a482 <USBH_Start>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d001      	beq.n	800bc22 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800bc1e:	f7f5 ff77 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800bc22:	bf00      	nop
 800bc24:	bd80      	pop	{r7, pc}
 800bc26:	bf00      	nop
 800bc28:	0800bc49 	.word	0x0800bc49
 800bc2c:	200004f0 	.word	0x200004f0
 800bc30:	20000028 	.word	0x20000028

0800bc34 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800bc38:	4802      	ldr	r0, [pc, #8]	@ (800bc44 <MX_USB_HOST_Process+0x10>)
 800bc3a:	f7fe fc33 	bl	800a4a4 <USBH_Process>
}
 800bc3e:	bf00      	nop
 800bc40:	bd80      	pop	{r7, pc}
 800bc42:	bf00      	nop
 800bc44:	200004f0 	.word	0x200004f0

0800bc48 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800bc48:	b480      	push	{r7}
 800bc4a:	b083      	sub	sp, #12
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
 800bc50:	460b      	mov	r3, r1
 800bc52:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800bc54:	78fb      	ldrb	r3, [r7, #3]
 800bc56:	3b01      	subs	r3, #1
 800bc58:	2b04      	cmp	r3, #4
 800bc5a:	d819      	bhi.n	800bc90 <USBH_UserProcess+0x48>
 800bc5c:	a201      	add	r2, pc, #4	@ (adr r2, 800bc64 <USBH_UserProcess+0x1c>)
 800bc5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc62:	bf00      	nop
 800bc64:	0800bc91 	.word	0x0800bc91
 800bc68:	0800bc81 	.word	0x0800bc81
 800bc6c:	0800bc91 	.word	0x0800bc91
 800bc70:	0800bc89 	.word	0x0800bc89
 800bc74:	0800bc79 	.word	0x0800bc79
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800bc78:	4b09      	ldr	r3, [pc, #36]	@ (800bca0 <USBH_UserProcess+0x58>)
 800bc7a:	2203      	movs	r2, #3
 800bc7c:	701a      	strb	r2, [r3, #0]
  break;
 800bc7e:	e008      	b.n	800bc92 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800bc80:	4b07      	ldr	r3, [pc, #28]	@ (800bca0 <USBH_UserProcess+0x58>)
 800bc82:	2202      	movs	r2, #2
 800bc84:	701a      	strb	r2, [r3, #0]
  break;
 800bc86:	e004      	b.n	800bc92 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800bc88:	4b05      	ldr	r3, [pc, #20]	@ (800bca0 <USBH_UserProcess+0x58>)
 800bc8a:	2201      	movs	r2, #1
 800bc8c:	701a      	strb	r2, [r3, #0]
  break;
 800bc8e:	e000      	b.n	800bc92 <USBH_UserProcess+0x4a>

  default:
  break;
 800bc90:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800bc92:	bf00      	nop
 800bc94:	370c      	adds	r7, #12
 800bc96:	46bd      	mov	sp, r7
 800bc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9c:	4770      	bx	lr
 800bc9e:	bf00      	nop
 800bca0:	200008c8 	.word	0x200008c8

0800bca4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b08a      	sub	sp, #40	@ 0x28
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bcac:	f107 0314 	add.w	r3, r7, #20
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	601a      	str	r2, [r3, #0]
 800bcb4:	605a      	str	r2, [r3, #4]
 800bcb6:	609a      	str	r2, [r3, #8]
 800bcb8:	60da      	str	r2, [r3, #12]
 800bcba:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bcc4:	d147      	bne.n	800bd56 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	613b      	str	r3, [r7, #16]
 800bcca:	4b25      	ldr	r3, [pc, #148]	@ (800bd60 <HAL_HCD_MspInit+0xbc>)
 800bccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bcce:	4a24      	ldr	r2, [pc, #144]	@ (800bd60 <HAL_HCD_MspInit+0xbc>)
 800bcd0:	f043 0301 	orr.w	r3, r3, #1
 800bcd4:	6313      	str	r3, [r2, #48]	@ 0x30
 800bcd6:	4b22      	ldr	r3, [pc, #136]	@ (800bd60 <HAL_HCD_MspInit+0xbc>)
 800bcd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bcda:	f003 0301 	and.w	r3, r3, #1
 800bcde:	613b      	str	r3, [r7, #16]
 800bce0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800bce2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bce6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bce8:	2300      	movs	r3, #0
 800bcea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bcec:	2300      	movs	r3, #0
 800bcee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800bcf0:	f107 0314 	add.w	r3, r7, #20
 800bcf4:	4619      	mov	r1, r3
 800bcf6:	481b      	ldr	r0, [pc, #108]	@ (800bd64 <HAL_HCD_MspInit+0xc0>)
 800bcf8:	f7f7 fcfa 	bl	80036f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800bcfc:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800bd00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd02:	2302      	movs	r3, #2
 800bd04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd06:	2300      	movs	r3, #0
 800bd08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bd0e:	230a      	movs	r3, #10
 800bd10:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bd12:	f107 0314 	add.w	r3, r7, #20
 800bd16:	4619      	mov	r1, r3
 800bd18:	4812      	ldr	r0, [pc, #72]	@ (800bd64 <HAL_HCD_MspInit+0xc0>)
 800bd1a:	f7f7 fce9 	bl	80036f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bd1e:	4b10      	ldr	r3, [pc, #64]	@ (800bd60 <HAL_HCD_MspInit+0xbc>)
 800bd20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd22:	4a0f      	ldr	r2, [pc, #60]	@ (800bd60 <HAL_HCD_MspInit+0xbc>)
 800bd24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd28:	6353      	str	r3, [r2, #52]	@ 0x34
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	60fb      	str	r3, [r7, #12]
 800bd2e:	4b0c      	ldr	r3, [pc, #48]	@ (800bd60 <HAL_HCD_MspInit+0xbc>)
 800bd30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd32:	4a0b      	ldr	r2, [pc, #44]	@ (800bd60 <HAL_HCD_MspInit+0xbc>)
 800bd34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800bd38:	6453      	str	r3, [r2, #68]	@ 0x44
 800bd3a:	4b09      	ldr	r3, [pc, #36]	@ (800bd60 <HAL_HCD_MspInit+0xbc>)
 800bd3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bd42:	60fb      	str	r3, [r7, #12]
 800bd44:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bd46:	2200      	movs	r2, #0
 800bd48:	2100      	movs	r1, #0
 800bd4a:	2043      	movs	r0, #67	@ 0x43
 800bd4c:	f7f7 f889 	bl	8002e62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bd50:	2043      	movs	r0, #67	@ 0x43
 800bd52:	f7f7 f8a2 	bl	8002e9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bd56:	bf00      	nop
 800bd58:	3728      	adds	r7, #40	@ 0x28
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	bd80      	pop	{r7, pc}
 800bd5e:	bf00      	nop
 800bd60:	40023800 	.word	0x40023800
 800bd64:	40020000 	.word	0x40020000

0800bd68 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b082      	sub	sp, #8
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bd76:	4618      	mov	r0, r3
 800bd78:	f7fe ff6d 	bl	800ac56 <USBH_LL_IncTimer>
}
 800bd7c:	bf00      	nop
 800bd7e:	3708      	adds	r7, #8
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bd80      	pop	{r7, pc}

0800bd84 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b082      	sub	sp, #8
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bd92:	4618      	mov	r0, r3
 800bd94:	f7fe ffa9 	bl	800acea <USBH_LL_Connect>
}
 800bd98:	bf00      	nop
 800bd9a:	3708      	adds	r7, #8
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	bd80      	pop	{r7, pc}

0800bda0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b082      	sub	sp, #8
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bdae:	4618      	mov	r0, r3
 800bdb0:	f7fe ffb2 	bl	800ad18 <USBH_LL_Disconnect>
}
 800bdb4:	bf00      	nop
 800bdb6:	3708      	adds	r7, #8
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	bd80      	pop	{r7, pc}

0800bdbc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800bdbc:	b480      	push	{r7}
 800bdbe:	b083      	sub	sp, #12
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
 800bdc4:	460b      	mov	r3, r1
 800bdc6:	70fb      	strb	r3, [r7, #3]
 800bdc8:	4613      	mov	r3, r2
 800bdca:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800bdcc:	bf00      	nop
 800bdce:	370c      	adds	r7, #12
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd6:	4770      	bx	lr

0800bdd8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b082      	sub	sp, #8
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bde6:	4618      	mov	r0, r3
 800bde8:	f7fe ff5f 	bl	800acaa <USBH_LL_PortEnabled>
}
 800bdec:	bf00      	nop
 800bdee:	3708      	adds	r7, #8
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	bd80      	pop	{r7, pc}

0800bdf4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b082      	sub	sp, #8
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800be02:	4618      	mov	r0, r3
 800be04:	f7fe ff5f 	bl	800acc6 <USBH_LL_PortDisabled>
}
 800be08:	bf00      	nop
 800be0a:	3708      	adds	r7, #8
 800be0c:	46bd      	mov	sp, r7
 800be0e:	bd80      	pop	{r7, pc}

0800be10 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b082      	sub	sp, #8
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800be1e:	2b01      	cmp	r3, #1
 800be20:	d12a      	bne.n	800be78 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800be22:	4a18      	ldr	r2, [pc, #96]	@ (800be84 <USBH_LL_Init+0x74>)
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	4a15      	ldr	r2, [pc, #84]	@ (800be84 <USBH_LL_Init+0x74>)
 800be2e:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800be32:	4b14      	ldr	r3, [pc, #80]	@ (800be84 <USBH_LL_Init+0x74>)
 800be34:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800be38:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800be3a:	4b12      	ldr	r3, [pc, #72]	@ (800be84 <USBH_LL_Init+0x74>)
 800be3c:	2208      	movs	r2, #8
 800be3e:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800be40:	4b10      	ldr	r3, [pc, #64]	@ (800be84 <USBH_LL_Init+0x74>)
 800be42:	2201      	movs	r2, #1
 800be44:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800be46:	4b0f      	ldr	r3, [pc, #60]	@ (800be84 <USBH_LL_Init+0x74>)
 800be48:	2200      	movs	r2, #0
 800be4a:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800be4c:	4b0d      	ldr	r3, [pc, #52]	@ (800be84 <USBH_LL_Init+0x74>)
 800be4e:	2202      	movs	r2, #2
 800be50:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800be52:	4b0c      	ldr	r3, [pc, #48]	@ (800be84 <USBH_LL_Init+0x74>)
 800be54:	2200      	movs	r2, #0
 800be56:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800be58:	480a      	ldr	r0, [pc, #40]	@ (800be84 <USBH_LL_Init+0x74>)
 800be5a:	f7f7 fe2f 	bl	8003abc <HAL_HCD_Init>
 800be5e:	4603      	mov	r3, r0
 800be60:	2b00      	cmp	r3, #0
 800be62:	d001      	beq.n	800be68 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800be64:	f7f5 fe54 	bl	8001b10 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800be68:	4806      	ldr	r0, [pc, #24]	@ (800be84 <USBH_LL_Init+0x74>)
 800be6a:	f7f8 fa8f 	bl	800438c <HAL_HCD_GetCurrentFrame>
 800be6e:	4603      	mov	r3, r0
 800be70:	4619      	mov	r1, r3
 800be72:	6878      	ldr	r0, [r7, #4]
 800be74:	f7fe fee0 	bl	800ac38 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800be78:	2300      	movs	r3, #0
}
 800be7a:	4618      	mov	r0, r3
 800be7c:	3708      	adds	r7, #8
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd80      	pop	{r7, pc}
 800be82:	bf00      	nop
 800be84:	200008cc 	.word	0x200008cc

0800be88 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b084      	sub	sp, #16
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be90:	2300      	movs	r3, #0
 800be92:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800be94:	2300      	movs	r3, #0
 800be96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800be9e:	4618      	mov	r0, r3
 800bea0:	f7f8 f9fc 	bl	800429c <HAL_HCD_Start>
 800bea4:	4603      	mov	r3, r0
 800bea6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bea8:	7bfb      	ldrb	r3, [r7, #15]
 800beaa:	4618      	mov	r0, r3
 800beac:	f000 f95e 	bl	800c16c <USBH_Get_USB_Status>
 800beb0:	4603      	mov	r3, r0
 800beb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800beb4:	7bbb      	ldrb	r3, [r7, #14]
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	3710      	adds	r7, #16
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}

0800bebe <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800bebe:	b580      	push	{r7, lr}
 800bec0:	b084      	sub	sp, #16
 800bec2:	af00      	add	r7, sp, #0
 800bec4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bec6:	2300      	movs	r3, #0
 800bec8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800beca:	2300      	movs	r3, #0
 800becc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bed4:	4618      	mov	r0, r3
 800bed6:	f7f8 fa04 	bl	80042e2 <HAL_HCD_Stop>
 800beda:	4603      	mov	r3, r0
 800bedc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bede:	7bfb      	ldrb	r3, [r7, #15]
 800bee0:	4618      	mov	r0, r3
 800bee2:	f000 f943 	bl	800c16c <USBH_Get_USB_Status>
 800bee6:	4603      	mov	r3, r0
 800bee8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800beea:	7bbb      	ldrb	r3, [r7, #14]
}
 800beec:	4618      	mov	r0, r3
 800beee:	3710      	adds	r7, #16
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd80      	pop	{r7, pc}

0800bef4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b084      	sub	sp, #16
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800befc:	2301      	movs	r3, #1
 800befe:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bf06:	4618      	mov	r0, r3
 800bf08:	f7f8 fa4e 	bl	80043a8 <HAL_HCD_GetCurrentSpeed>
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	2b02      	cmp	r3, #2
 800bf10:	d00c      	beq.n	800bf2c <USBH_LL_GetSpeed+0x38>
 800bf12:	2b02      	cmp	r3, #2
 800bf14:	d80d      	bhi.n	800bf32 <USBH_LL_GetSpeed+0x3e>
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d002      	beq.n	800bf20 <USBH_LL_GetSpeed+0x2c>
 800bf1a:	2b01      	cmp	r3, #1
 800bf1c:	d003      	beq.n	800bf26 <USBH_LL_GetSpeed+0x32>
 800bf1e:	e008      	b.n	800bf32 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800bf20:	2300      	movs	r3, #0
 800bf22:	73fb      	strb	r3, [r7, #15]
    break;
 800bf24:	e008      	b.n	800bf38 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800bf26:	2301      	movs	r3, #1
 800bf28:	73fb      	strb	r3, [r7, #15]
    break;
 800bf2a:	e005      	b.n	800bf38 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800bf2c:	2302      	movs	r3, #2
 800bf2e:	73fb      	strb	r3, [r7, #15]
    break;
 800bf30:	e002      	b.n	800bf38 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800bf32:	2301      	movs	r3, #1
 800bf34:	73fb      	strb	r3, [r7, #15]
    break;
 800bf36:	bf00      	nop
  }
  return  speed;
 800bf38:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	3710      	adds	r7, #16
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bd80      	pop	{r7, pc}

0800bf42 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800bf42:	b580      	push	{r7, lr}
 800bf44:	b084      	sub	sp, #16
 800bf46:	af00      	add	r7, sp, #0
 800bf48:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bf4e:	2300      	movs	r3, #0
 800bf50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bf58:	4618      	mov	r0, r3
 800bf5a:	f7f8 f9df 	bl	800431c <HAL_HCD_ResetPort>
 800bf5e:	4603      	mov	r3, r0
 800bf60:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bf62:	7bfb      	ldrb	r3, [r7, #15]
 800bf64:	4618      	mov	r0, r3
 800bf66:	f000 f901 	bl	800c16c <USBH_Get_USB_Status>
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf6e:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf70:	4618      	mov	r0, r3
 800bf72:	3710      	adds	r7, #16
 800bf74:	46bd      	mov	sp, r7
 800bf76:	bd80      	pop	{r7, pc}

0800bf78 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b082      	sub	sp, #8
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
 800bf80:	460b      	mov	r3, r1
 800bf82:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bf8a:	78fa      	ldrb	r2, [r7, #3]
 800bf8c:	4611      	mov	r1, r2
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f7f8 f9e7 	bl	8004362 <HAL_HCD_HC_GetXferCount>
 800bf94:	4603      	mov	r3, r0
}
 800bf96:	4618      	mov	r0, r3
 800bf98:	3708      	adds	r7, #8
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bd80      	pop	{r7, pc}

0800bf9e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bf9e:	b590      	push	{r4, r7, lr}
 800bfa0:	b089      	sub	sp, #36	@ 0x24
 800bfa2:	af04      	add	r7, sp, #16
 800bfa4:	6078      	str	r0, [r7, #4]
 800bfa6:	4608      	mov	r0, r1
 800bfa8:	4611      	mov	r1, r2
 800bfaa:	461a      	mov	r2, r3
 800bfac:	4603      	mov	r3, r0
 800bfae:	70fb      	strb	r3, [r7, #3]
 800bfb0:	460b      	mov	r3, r1
 800bfb2:	70bb      	strb	r3, [r7, #2]
 800bfb4:	4613      	mov	r3, r2
 800bfb6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfb8:	2300      	movs	r3, #0
 800bfba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800bfc6:	787c      	ldrb	r4, [r7, #1]
 800bfc8:	78ba      	ldrb	r2, [r7, #2]
 800bfca:	78f9      	ldrb	r1, [r7, #3]
 800bfcc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800bfce:	9302      	str	r3, [sp, #8]
 800bfd0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800bfd4:	9301      	str	r3, [sp, #4]
 800bfd6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bfda:	9300      	str	r3, [sp, #0]
 800bfdc:	4623      	mov	r3, r4
 800bfde:	f7f7 fdd4 	bl	8003b8a <HAL_HCD_HC_Init>
 800bfe2:	4603      	mov	r3, r0
 800bfe4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800bfe6:	7bfb      	ldrb	r3, [r7, #15]
 800bfe8:	4618      	mov	r0, r3
 800bfea:	f000 f8bf 	bl	800c16c <USBH_Get_USB_Status>
 800bfee:	4603      	mov	r3, r0
 800bff0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bff2:	7bbb      	ldrb	r3, [r7, #14]
}
 800bff4:	4618      	mov	r0, r3
 800bff6:	3714      	adds	r7, #20
 800bff8:	46bd      	mov	sp, r7
 800bffa:	bd90      	pop	{r4, r7, pc}

0800bffc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b084      	sub	sp, #16
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
 800c004:	460b      	mov	r3, r1
 800c006:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c008:	2300      	movs	r3, #0
 800c00a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c00c:	2300      	movs	r3, #0
 800c00e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c016:	78fa      	ldrb	r2, [r7, #3]
 800c018:	4611      	mov	r1, r2
 800c01a:	4618      	mov	r0, r3
 800c01c:	f7f7 fe6d 	bl	8003cfa <HAL_HCD_HC_Halt>
 800c020:	4603      	mov	r3, r0
 800c022:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c024:	7bfb      	ldrb	r3, [r7, #15]
 800c026:	4618      	mov	r0, r3
 800c028:	f000 f8a0 	bl	800c16c <USBH_Get_USB_Status>
 800c02c:	4603      	mov	r3, r0
 800c02e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c030:	7bbb      	ldrb	r3, [r7, #14]
}
 800c032:	4618      	mov	r0, r3
 800c034:	3710      	adds	r7, #16
 800c036:	46bd      	mov	sp, r7
 800c038:	bd80      	pop	{r7, pc}

0800c03a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800c03a:	b590      	push	{r4, r7, lr}
 800c03c:	b089      	sub	sp, #36	@ 0x24
 800c03e:	af04      	add	r7, sp, #16
 800c040:	6078      	str	r0, [r7, #4]
 800c042:	4608      	mov	r0, r1
 800c044:	4611      	mov	r1, r2
 800c046:	461a      	mov	r2, r3
 800c048:	4603      	mov	r3, r0
 800c04a:	70fb      	strb	r3, [r7, #3]
 800c04c:	460b      	mov	r3, r1
 800c04e:	70bb      	strb	r3, [r7, #2]
 800c050:	4613      	mov	r3, r2
 800c052:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c054:	2300      	movs	r3, #0
 800c056:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c058:	2300      	movs	r3, #0
 800c05a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800c062:	787c      	ldrb	r4, [r7, #1]
 800c064:	78ba      	ldrb	r2, [r7, #2]
 800c066:	78f9      	ldrb	r1, [r7, #3]
 800c068:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800c06c:	9303      	str	r3, [sp, #12]
 800c06e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c070:	9302      	str	r3, [sp, #8]
 800c072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c074:	9301      	str	r3, [sp, #4]
 800c076:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c07a:	9300      	str	r3, [sp, #0]
 800c07c:	4623      	mov	r3, r4
 800c07e:	f7f7 fe5f 	bl	8003d40 <HAL_HCD_HC_SubmitRequest>
 800c082:	4603      	mov	r3, r0
 800c084:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800c086:	7bfb      	ldrb	r3, [r7, #15]
 800c088:	4618      	mov	r0, r3
 800c08a:	f000 f86f 	bl	800c16c <USBH_Get_USB_Status>
 800c08e:	4603      	mov	r3, r0
 800c090:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c092:	7bbb      	ldrb	r3, [r7, #14]
}
 800c094:	4618      	mov	r0, r3
 800c096:	3714      	adds	r7, #20
 800c098:	46bd      	mov	sp, r7
 800c09a:	bd90      	pop	{r4, r7, pc}

0800c09c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b082      	sub	sp, #8
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
 800c0a4:	460b      	mov	r3, r1
 800c0a6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c0ae:	78fa      	ldrb	r2, [r7, #3]
 800c0b0:	4611      	mov	r1, r2
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	f7f8 f940 	bl	8004338 <HAL_HCD_HC_GetURBState>
 800c0b8:	4603      	mov	r3, r0
}
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	3708      	adds	r7, #8
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	bd80      	pop	{r7, pc}

0800c0c2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800c0c2:	b580      	push	{r7, lr}
 800c0c4:	b082      	sub	sp, #8
 800c0c6:	af00      	add	r7, sp, #0
 800c0c8:	6078      	str	r0, [r7, #4]
 800c0ca:	460b      	mov	r3, r1
 800c0cc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800c0d4:	2b01      	cmp	r3, #1
 800c0d6:	d103      	bne.n	800c0e0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800c0d8:	78fb      	ldrb	r3, [r7, #3]
 800c0da:	4618      	mov	r0, r3
 800c0dc:	f000 f872 	bl	800c1c4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800c0e0:	20c8      	movs	r0, #200	@ 0xc8
 800c0e2:	f7f6 f999 	bl	8002418 <HAL_Delay>
  return USBH_OK;
 800c0e6:	2300      	movs	r3, #0
}
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	3708      	adds	r7, #8
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}

0800c0f0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800c0f0:	b480      	push	{r7}
 800c0f2:	b085      	sub	sp, #20
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
 800c0f8:	460b      	mov	r3, r1
 800c0fa:	70fb      	strb	r3, [r7, #3]
 800c0fc:	4613      	mov	r3, r2
 800c0fe:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c106:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800c108:	78fa      	ldrb	r2, [r7, #3]
 800c10a:	68f9      	ldr	r1, [r7, #12]
 800c10c:	4613      	mov	r3, r2
 800c10e:	011b      	lsls	r3, r3, #4
 800c110:	1a9b      	subs	r3, r3, r2
 800c112:	009b      	lsls	r3, r3, #2
 800c114:	440b      	add	r3, r1
 800c116:	3317      	adds	r3, #23
 800c118:	781b      	ldrb	r3, [r3, #0]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d00a      	beq.n	800c134 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800c11e:	78fa      	ldrb	r2, [r7, #3]
 800c120:	68f9      	ldr	r1, [r7, #12]
 800c122:	4613      	mov	r3, r2
 800c124:	011b      	lsls	r3, r3, #4
 800c126:	1a9b      	subs	r3, r3, r2
 800c128:	009b      	lsls	r3, r3, #2
 800c12a:	440b      	add	r3, r1
 800c12c:	333c      	adds	r3, #60	@ 0x3c
 800c12e:	78ba      	ldrb	r2, [r7, #2]
 800c130:	701a      	strb	r2, [r3, #0]
 800c132:	e009      	b.n	800c148 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800c134:	78fa      	ldrb	r2, [r7, #3]
 800c136:	68f9      	ldr	r1, [r7, #12]
 800c138:	4613      	mov	r3, r2
 800c13a:	011b      	lsls	r3, r3, #4
 800c13c:	1a9b      	subs	r3, r3, r2
 800c13e:	009b      	lsls	r3, r3, #2
 800c140:	440b      	add	r3, r1
 800c142:	333d      	adds	r3, #61	@ 0x3d
 800c144:	78ba      	ldrb	r2, [r7, #2]
 800c146:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800c148:	2300      	movs	r3, #0
}
 800c14a:	4618      	mov	r0, r3
 800c14c:	3714      	adds	r7, #20
 800c14e:	46bd      	mov	sp, r7
 800c150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c154:	4770      	bx	lr

0800c156 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800c156:	b580      	push	{r7, lr}
 800c158:	b082      	sub	sp, #8
 800c15a:	af00      	add	r7, sp, #0
 800c15c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	f7f6 f95a 	bl	8002418 <HAL_Delay>
}
 800c164:	bf00      	nop
 800c166:	3708      	adds	r7, #8
 800c168:	46bd      	mov	sp, r7
 800c16a:	bd80      	pop	{r7, pc}

0800c16c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c16c:	b480      	push	{r7}
 800c16e:	b085      	sub	sp, #20
 800c170:	af00      	add	r7, sp, #0
 800c172:	4603      	mov	r3, r0
 800c174:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c176:	2300      	movs	r3, #0
 800c178:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c17a:	79fb      	ldrb	r3, [r7, #7]
 800c17c:	2b03      	cmp	r3, #3
 800c17e:	d817      	bhi.n	800c1b0 <USBH_Get_USB_Status+0x44>
 800c180:	a201      	add	r2, pc, #4	@ (adr r2, 800c188 <USBH_Get_USB_Status+0x1c>)
 800c182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c186:	bf00      	nop
 800c188:	0800c199 	.word	0x0800c199
 800c18c:	0800c19f 	.word	0x0800c19f
 800c190:	0800c1a5 	.word	0x0800c1a5
 800c194:	0800c1ab 	.word	0x0800c1ab
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c198:	2300      	movs	r3, #0
 800c19a:	73fb      	strb	r3, [r7, #15]
    break;
 800c19c:	e00b      	b.n	800c1b6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c19e:	2302      	movs	r3, #2
 800c1a0:	73fb      	strb	r3, [r7, #15]
    break;
 800c1a2:	e008      	b.n	800c1b6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c1a4:	2301      	movs	r3, #1
 800c1a6:	73fb      	strb	r3, [r7, #15]
    break;
 800c1a8:	e005      	b.n	800c1b6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c1aa:	2302      	movs	r3, #2
 800c1ac:	73fb      	strb	r3, [r7, #15]
    break;
 800c1ae:	e002      	b.n	800c1b6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c1b0:	2302      	movs	r3, #2
 800c1b2:	73fb      	strb	r3, [r7, #15]
    break;
 800c1b4:	bf00      	nop
  }
  return usb_status;
 800c1b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	3714      	adds	r7, #20
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c2:	4770      	bx	lr

0800c1c4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b084      	sub	sp, #16
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800c1ce:	79fb      	ldrb	r3, [r7, #7]
 800c1d0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800c1d2:	79fb      	ldrb	r3, [r7, #7]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d102      	bne.n	800c1de <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800c1d8:	2300      	movs	r3, #0
 800c1da:	73fb      	strb	r3, [r7, #15]
 800c1dc:	e001      	b.n	800c1e2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800c1de:	2301      	movs	r3, #1
 800c1e0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800c1e2:	7bfb      	ldrb	r3, [r7, #15]
 800c1e4:	461a      	mov	r2, r3
 800c1e6:	2101      	movs	r1, #1
 800c1e8:	4803      	ldr	r0, [pc, #12]	@ (800c1f8 <MX_DriverVbusFS+0x34>)
 800c1ea:	f7f7 fc35 	bl	8003a58 <HAL_GPIO_WritePin>
}
 800c1ee:	bf00      	nop
 800c1f0:	3710      	adds	r7, #16
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	bd80      	pop	{r7, pc}
 800c1f6:	bf00      	nop
 800c1f8:	40020800 	.word	0x40020800

0800c1fc <malloc>:
 800c1fc:	4b02      	ldr	r3, [pc, #8]	@ (800c208 <malloc+0xc>)
 800c1fe:	4601      	mov	r1, r0
 800c200:	6818      	ldr	r0, [r3, #0]
 800c202:	f000 b82d 	b.w	800c260 <_malloc_r>
 800c206:	bf00      	nop
 800c208:	20000048 	.word	0x20000048

0800c20c <free>:
 800c20c:	4b02      	ldr	r3, [pc, #8]	@ (800c218 <free+0xc>)
 800c20e:	4601      	mov	r1, r0
 800c210:	6818      	ldr	r0, [r3, #0]
 800c212:	f000 b917 	b.w	800c444 <_free_r>
 800c216:	bf00      	nop
 800c218:	20000048 	.word	0x20000048

0800c21c <sbrk_aligned>:
 800c21c:	b570      	push	{r4, r5, r6, lr}
 800c21e:	4e0f      	ldr	r6, [pc, #60]	@ (800c25c <sbrk_aligned+0x40>)
 800c220:	460c      	mov	r4, r1
 800c222:	6831      	ldr	r1, [r6, #0]
 800c224:	4605      	mov	r5, r0
 800c226:	b911      	cbnz	r1, 800c22e <sbrk_aligned+0x12>
 800c228:	f000 f8d0 	bl	800c3cc <_sbrk_r>
 800c22c:	6030      	str	r0, [r6, #0]
 800c22e:	4621      	mov	r1, r4
 800c230:	4628      	mov	r0, r5
 800c232:	f000 f8cb 	bl	800c3cc <_sbrk_r>
 800c236:	1c43      	adds	r3, r0, #1
 800c238:	d103      	bne.n	800c242 <sbrk_aligned+0x26>
 800c23a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c23e:	4620      	mov	r0, r4
 800c240:	bd70      	pop	{r4, r5, r6, pc}
 800c242:	1cc4      	adds	r4, r0, #3
 800c244:	f024 0403 	bic.w	r4, r4, #3
 800c248:	42a0      	cmp	r0, r4
 800c24a:	d0f8      	beq.n	800c23e <sbrk_aligned+0x22>
 800c24c:	1a21      	subs	r1, r4, r0
 800c24e:	4628      	mov	r0, r5
 800c250:	f000 f8bc 	bl	800c3cc <_sbrk_r>
 800c254:	3001      	adds	r0, #1
 800c256:	d1f2      	bne.n	800c23e <sbrk_aligned+0x22>
 800c258:	e7ef      	b.n	800c23a <sbrk_aligned+0x1e>
 800c25a:	bf00      	nop
 800c25c:	20000cac 	.word	0x20000cac

0800c260 <_malloc_r>:
 800c260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c264:	1ccd      	adds	r5, r1, #3
 800c266:	f025 0503 	bic.w	r5, r5, #3
 800c26a:	3508      	adds	r5, #8
 800c26c:	2d0c      	cmp	r5, #12
 800c26e:	bf38      	it	cc
 800c270:	250c      	movcc	r5, #12
 800c272:	2d00      	cmp	r5, #0
 800c274:	4606      	mov	r6, r0
 800c276:	db01      	blt.n	800c27c <_malloc_r+0x1c>
 800c278:	42a9      	cmp	r1, r5
 800c27a:	d904      	bls.n	800c286 <_malloc_r+0x26>
 800c27c:	230c      	movs	r3, #12
 800c27e:	6033      	str	r3, [r6, #0]
 800c280:	2000      	movs	r0, #0
 800c282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c286:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c35c <_malloc_r+0xfc>
 800c28a:	f000 f869 	bl	800c360 <__malloc_lock>
 800c28e:	f8d8 3000 	ldr.w	r3, [r8]
 800c292:	461c      	mov	r4, r3
 800c294:	bb44      	cbnz	r4, 800c2e8 <_malloc_r+0x88>
 800c296:	4629      	mov	r1, r5
 800c298:	4630      	mov	r0, r6
 800c29a:	f7ff ffbf 	bl	800c21c <sbrk_aligned>
 800c29e:	1c43      	adds	r3, r0, #1
 800c2a0:	4604      	mov	r4, r0
 800c2a2:	d158      	bne.n	800c356 <_malloc_r+0xf6>
 800c2a4:	f8d8 4000 	ldr.w	r4, [r8]
 800c2a8:	4627      	mov	r7, r4
 800c2aa:	2f00      	cmp	r7, #0
 800c2ac:	d143      	bne.n	800c336 <_malloc_r+0xd6>
 800c2ae:	2c00      	cmp	r4, #0
 800c2b0:	d04b      	beq.n	800c34a <_malloc_r+0xea>
 800c2b2:	6823      	ldr	r3, [r4, #0]
 800c2b4:	4639      	mov	r1, r7
 800c2b6:	4630      	mov	r0, r6
 800c2b8:	eb04 0903 	add.w	r9, r4, r3
 800c2bc:	f000 f886 	bl	800c3cc <_sbrk_r>
 800c2c0:	4581      	cmp	r9, r0
 800c2c2:	d142      	bne.n	800c34a <_malloc_r+0xea>
 800c2c4:	6821      	ldr	r1, [r4, #0]
 800c2c6:	1a6d      	subs	r5, r5, r1
 800c2c8:	4629      	mov	r1, r5
 800c2ca:	4630      	mov	r0, r6
 800c2cc:	f7ff ffa6 	bl	800c21c <sbrk_aligned>
 800c2d0:	3001      	adds	r0, #1
 800c2d2:	d03a      	beq.n	800c34a <_malloc_r+0xea>
 800c2d4:	6823      	ldr	r3, [r4, #0]
 800c2d6:	442b      	add	r3, r5
 800c2d8:	6023      	str	r3, [r4, #0]
 800c2da:	f8d8 3000 	ldr.w	r3, [r8]
 800c2de:	685a      	ldr	r2, [r3, #4]
 800c2e0:	bb62      	cbnz	r2, 800c33c <_malloc_r+0xdc>
 800c2e2:	f8c8 7000 	str.w	r7, [r8]
 800c2e6:	e00f      	b.n	800c308 <_malloc_r+0xa8>
 800c2e8:	6822      	ldr	r2, [r4, #0]
 800c2ea:	1b52      	subs	r2, r2, r5
 800c2ec:	d420      	bmi.n	800c330 <_malloc_r+0xd0>
 800c2ee:	2a0b      	cmp	r2, #11
 800c2f0:	d917      	bls.n	800c322 <_malloc_r+0xc2>
 800c2f2:	1961      	adds	r1, r4, r5
 800c2f4:	42a3      	cmp	r3, r4
 800c2f6:	6025      	str	r5, [r4, #0]
 800c2f8:	bf18      	it	ne
 800c2fa:	6059      	strne	r1, [r3, #4]
 800c2fc:	6863      	ldr	r3, [r4, #4]
 800c2fe:	bf08      	it	eq
 800c300:	f8c8 1000 	streq.w	r1, [r8]
 800c304:	5162      	str	r2, [r4, r5]
 800c306:	604b      	str	r3, [r1, #4]
 800c308:	4630      	mov	r0, r6
 800c30a:	f000 f82f 	bl	800c36c <__malloc_unlock>
 800c30e:	f104 000b 	add.w	r0, r4, #11
 800c312:	1d23      	adds	r3, r4, #4
 800c314:	f020 0007 	bic.w	r0, r0, #7
 800c318:	1ac2      	subs	r2, r0, r3
 800c31a:	bf1c      	itt	ne
 800c31c:	1a1b      	subne	r3, r3, r0
 800c31e:	50a3      	strne	r3, [r4, r2]
 800c320:	e7af      	b.n	800c282 <_malloc_r+0x22>
 800c322:	6862      	ldr	r2, [r4, #4]
 800c324:	42a3      	cmp	r3, r4
 800c326:	bf0c      	ite	eq
 800c328:	f8c8 2000 	streq.w	r2, [r8]
 800c32c:	605a      	strne	r2, [r3, #4]
 800c32e:	e7eb      	b.n	800c308 <_malloc_r+0xa8>
 800c330:	4623      	mov	r3, r4
 800c332:	6864      	ldr	r4, [r4, #4]
 800c334:	e7ae      	b.n	800c294 <_malloc_r+0x34>
 800c336:	463c      	mov	r4, r7
 800c338:	687f      	ldr	r7, [r7, #4]
 800c33a:	e7b6      	b.n	800c2aa <_malloc_r+0x4a>
 800c33c:	461a      	mov	r2, r3
 800c33e:	685b      	ldr	r3, [r3, #4]
 800c340:	42a3      	cmp	r3, r4
 800c342:	d1fb      	bne.n	800c33c <_malloc_r+0xdc>
 800c344:	2300      	movs	r3, #0
 800c346:	6053      	str	r3, [r2, #4]
 800c348:	e7de      	b.n	800c308 <_malloc_r+0xa8>
 800c34a:	230c      	movs	r3, #12
 800c34c:	6033      	str	r3, [r6, #0]
 800c34e:	4630      	mov	r0, r6
 800c350:	f000 f80c 	bl	800c36c <__malloc_unlock>
 800c354:	e794      	b.n	800c280 <_malloc_r+0x20>
 800c356:	6005      	str	r5, [r0, #0]
 800c358:	e7d6      	b.n	800c308 <_malloc_r+0xa8>
 800c35a:	bf00      	nop
 800c35c:	20000cb0 	.word	0x20000cb0

0800c360 <__malloc_lock>:
 800c360:	4801      	ldr	r0, [pc, #4]	@ (800c368 <__malloc_lock+0x8>)
 800c362:	f000 b86d 	b.w	800c440 <__retarget_lock_acquire_recursive>
 800c366:	bf00      	nop
 800c368:	20000dec 	.word	0x20000dec

0800c36c <__malloc_unlock>:
 800c36c:	4801      	ldr	r0, [pc, #4]	@ (800c374 <__malloc_unlock+0x8>)
 800c36e:	f000 b868 	b.w	800c442 <__retarget_lock_release_recursive>
 800c372:	bf00      	nop
 800c374:	20000dec 	.word	0x20000dec

0800c378 <siprintf>:
 800c378:	b40e      	push	{r1, r2, r3}
 800c37a:	b510      	push	{r4, lr}
 800c37c:	b09d      	sub	sp, #116	@ 0x74
 800c37e:	ab1f      	add	r3, sp, #124	@ 0x7c
 800c380:	9002      	str	r0, [sp, #8]
 800c382:	9006      	str	r0, [sp, #24]
 800c384:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c388:	480a      	ldr	r0, [pc, #40]	@ (800c3b4 <siprintf+0x3c>)
 800c38a:	9107      	str	r1, [sp, #28]
 800c38c:	9104      	str	r1, [sp, #16]
 800c38e:	490a      	ldr	r1, [pc, #40]	@ (800c3b8 <siprintf+0x40>)
 800c390:	f853 2b04 	ldr.w	r2, [r3], #4
 800c394:	9105      	str	r1, [sp, #20]
 800c396:	2400      	movs	r4, #0
 800c398:	a902      	add	r1, sp, #8
 800c39a:	6800      	ldr	r0, [r0, #0]
 800c39c:	9301      	str	r3, [sp, #4]
 800c39e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800c3a0:	f000 f8f6 	bl	800c590 <_svfiprintf_r>
 800c3a4:	9b02      	ldr	r3, [sp, #8]
 800c3a6:	701c      	strb	r4, [r3, #0]
 800c3a8:	b01d      	add	sp, #116	@ 0x74
 800c3aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c3ae:	b003      	add	sp, #12
 800c3b0:	4770      	bx	lr
 800c3b2:	bf00      	nop
 800c3b4:	20000048 	.word	0x20000048
 800c3b8:	ffff0208 	.word	0xffff0208

0800c3bc <memset>:
 800c3bc:	4402      	add	r2, r0
 800c3be:	4603      	mov	r3, r0
 800c3c0:	4293      	cmp	r3, r2
 800c3c2:	d100      	bne.n	800c3c6 <memset+0xa>
 800c3c4:	4770      	bx	lr
 800c3c6:	f803 1b01 	strb.w	r1, [r3], #1
 800c3ca:	e7f9      	b.n	800c3c0 <memset+0x4>

0800c3cc <_sbrk_r>:
 800c3cc:	b538      	push	{r3, r4, r5, lr}
 800c3ce:	4d06      	ldr	r5, [pc, #24]	@ (800c3e8 <_sbrk_r+0x1c>)
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	4604      	mov	r4, r0
 800c3d4:	4608      	mov	r0, r1
 800c3d6:	602b      	str	r3, [r5, #0]
 800c3d8:	f7f5 fef0 	bl	80021bc <_sbrk>
 800c3dc:	1c43      	adds	r3, r0, #1
 800c3de:	d102      	bne.n	800c3e6 <_sbrk_r+0x1a>
 800c3e0:	682b      	ldr	r3, [r5, #0]
 800c3e2:	b103      	cbz	r3, 800c3e6 <_sbrk_r+0x1a>
 800c3e4:	6023      	str	r3, [r4, #0]
 800c3e6:	bd38      	pop	{r3, r4, r5, pc}
 800c3e8:	20000df0 	.word	0x20000df0

0800c3ec <__errno>:
 800c3ec:	4b01      	ldr	r3, [pc, #4]	@ (800c3f4 <__errno+0x8>)
 800c3ee:	6818      	ldr	r0, [r3, #0]
 800c3f0:	4770      	bx	lr
 800c3f2:	bf00      	nop
 800c3f4:	20000048 	.word	0x20000048

0800c3f8 <__libc_init_array>:
 800c3f8:	b570      	push	{r4, r5, r6, lr}
 800c3fa:	4d0d      	ldr	r5, [pc, #52]	@ (800c430 <__libc_init_array+0x38>)
 800c3fc:	4c0d      	ldr	r4, [pc, #52]	@ (800c434 <__libc_init_array+0x3c>)
 800c3fe:	1b64      	subs	r4, r4, r5
 800c400:	10a4      	asrs	r4, r4, #2
 800c402:	2600      	movs	r6, #0
 800c404:	42a6      	cmp	r6, r4
 800c406:	d109      	bne.n	800c41c <__libc_init_array+0x24>
 800c408:	4d0b      	ldr	r5, [pc, #44]	@ (800c438 <__libc_init_array+0x40>)
 800c40a:	4c0c      	ldr	r4, [pc, #48]	@ (800c43c <__libc_init_array+0x44>)
 800c40c:	f000 fba6 	bl	800cb5c <_init>
 800c410:	1b64      	subs	r4, r4, r5
 800c412:	10a4      	asrs	r4, r4, #2
 800c414:	2600      	movs	r6, #0
 800c416:	42a6      	cmp	r6, r4
 800c418:	d105      	bne.n	800c426 <__libc_init_array+0x2e>
 800c41a:	bd70      	pop	{r4, r5, r6, pc}
 800c41c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c420:	4798      	blx	r3
 800c422:	3601      	adds	r6, #1
 800c424:	e7ee      	b.n	800c404 <__libc_init_array+0xc>
 800c426:	f855 3b04 	ldr.w	r3, [r5], #4
 800c42a:	4798      	blx	r3
 800c42c:	3601      	adds	r6, #1
 800c42e:	e7f2      	b.n	800c416 <__libc_init_array+0x1e>
 800c430:	0800cc00 	.word	0x0800cc00
 800c434:	0800cc00 	.word	0x0800cc00
 800c438:	0800cc00 	.word	0x0800cc00
 800c43c:	0800cc04 	.word	0x0800cc04

0800c440 <__retarget_lock_acquire_recursive>:
 800c440:	4770      	bx	lr

0800c442 <__retarget_lock_release_recursive>:
 800c442:	4770      	bx	lr

0800c444 <_free_r>:
 800c444:	b538      	push	{r3, r4, r5, lr}
 800c446:	4605      	mov	r5, r0
 800c448:	2900      	cmp	r1, #0
 800c44a:	d041      	beq.n	800c4d0 <_free_r+0x8c>
 800c44c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c450:	1f0c      	subs	r4, r1, #4
 800c452:	2b00      	cmp	r3, #0
 800c454:	bfb8      	it	lt
 800c456:	18e4      	addlt	r4, r4, r3
 800c458:	f7ff ff82 	bl	800c360 <__malloc_lock>
 800c45c:	4a1d      	ldr	r2, [pc, #116]	@ (800c4d4 <_free_r+0x90>)
 800c45e:	6813      	ldr	r3, [r2, #0]
 800c460:	b933      	cbnz	r3, 800c470 <_free_r+0x2c>
 800c462:	6063      	str	r3, [r4, #4]
 800c464:	6014      	str	r4, [r2, #0]
 800c466:	4628      	mov	r0, r5
 800c468:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c46c:	f7ff bf7e 	b.w	800c36c <__malloc_unlock>
 800c470:	42a3      	cmp	r3, r4
 800c472:	d908      	bls.n	800c486 <_free_r+0x42>
 800c474:	6820      	ldr	r0, [r4, #0]
 800c476:	1821      	adds	r1, r4, r0
 800c478:	428b      	cmp	r3, r1
 800c47a:	bf01      	itttt	eq
 800c47c:	6819      	ldreq	r1, [r3, #0]
 800c47e:	685b      	ldreq	r3, [r3, #4]
 800c480:	1809      	addeq	r1, r1, r0
 800c482:	6021      	streq	r1, [r4, #0]
 800c484:	e7ed      	b.n	800c462 <_free_r+0x1e>
 800c486:	461a      	mov	r2, r3
 800c488:	685b      	ldr	r3, [r3, #4]
 800c48a:	b10b      	cbz	r3, 800c490 <_free_r+0x4c>
 800c48c:	42a3      	cmp	r3, r4
 800c48e:	d9fa      	bls.n	800c486 <_free_r+0x42>
 800c490:	6811      	ldr	r1, [r2, #0]
 800c492:	1850      	adds	r0, r2, r1
 800c494:	42a0      	cmp	r0, r4
 800c496:	d10b      	bne.n	800c4b0 <_free_r+0x6c>
 800c498:	6820      	ldr	r0, [r4, #0]
 800c49a:	4401      	add	r1, r0
 800c49c:	1850      	adds	r0, r2, r1
 800c49e:	4283      	cmp	r3, r0
 800c4a0:	6011      	str	r1, [r2, #0]
 800c4a2:	d1e0      	bne.n	800c466 <_free_r+0x22>
 800c4a4:	6818      	ldr	r0, [r3, #0]
 800c4a6:	685b      	ldr	r3, [r3, #4]
 800c4a8:	6053      	str	r3, [r2, #4]
 800c4aa:	4408      	add	r0, r1
 800c4ac:	6010      	str	r0, [r2, #0]
 800c4ae:	e7da      	b.n	800c466 <_free_r+0x22>
 800c4b0:	d902      	bls.n	800c4b8 <_free_r+0x74>
 800c4b2:	230c      	movs	r3, #12
 800c4b4:	602b      	str	r3, [r5, #0]
 800c4b6:	e7d6      	b.n	800c466 <_free_r+0x22>
 800c4b8:	6820      	ldr	r0, [r4, #0]
 800c4ba:	1821      	adds	r1, r4, r0
 800c4bc:	428b      	cmp	r3, r1
 800c4be:	bf04      	itt	eq
 800c4c0:	6819      	ldreq	r1, [r3, #0]
 800c4c2:	685b      	ldreq	r3, [r3, #4]
 800c4c4:	6063      	str	r3, [r4, #4]
 800c4c6:	bf04      	itt	eq
 800c4c8:	1809      	addeq	r1, r1, r0
 800c4ca:	6021      	streq	r1, [r4, #0]
 800c4cc:	6054      	str	r4, [r2, #4]
 800c4ce:	e7ca      	b.n	800c466 <_free_r+0x22>
 800c4d0:	bd38      	pop	{r3, r4, r5, pc}
 800c4d2:	bf00      	nop
 800c4d4:	20000cb0 	.word	0x20000cb0

0800c4d8 <__ssputs_r>:
 800c4d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4dc:	688e      	ldr	r6, [r1, #8]
 800c4de:	461f      	mov	r7, r3
 800c4e0:	42be      	cmp	r6, r7
 800c4e2:	680b      	ldr	r3, [r1, #0]
 800c4e4:	4682      	mov	sl, r0
 800c4e6:	460c      	mov	r4, r1
 800c4e8:	4690      	mov	r8, r2
 800c4ea:	d82d      	bhi.n	800c548 <__ssputs_r+0x70>
 800c4ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c4f0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c4f4:	d026      	beq.n	800c544 <__ssputs_r+0x6c>
 800c4f6:	6965      	ldr	r5, [r4, #20]
 800c4f8:	6909      	ldr	r1, [r1, #16]
 800c4fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c4fe:	eba3 0901 	sub.w	r9, r3, r1
 800c502:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c506:	1c7b      	adds	r3, r7, #1
 800c508:	444b      	add	r3, r9
 800c50a:	106d      	asrs	r5, r5, #1
 800c50c:	429d      	cmp	r5, r3
 800c50e:	bf38      	it	cc
 800c510:	461d      	movcc	r5, r3
 800c512:	0553      	lsls	r3, r2, #21
 800c514:	d527      	bpl.n	800c566 <__ssputs_r+0x8e>
 800c516:	4629      	mov	r1, r5
 800c518:	f7ff fea2 	bl	800c260 <_malloc_r>
 800c51c:	4606      	mov	r6, r0
 800c51e:	b360      	cbz	r0, 800c57a <__ssputs_r+0xa2>
 800c520:	6921      	ldr	r1, [r4, #16]
 800c522:	464a      	mov	r2, r9
 800c524:	f000 fb04 	bl	800cb30 <memcpy>
 800c528:	89a3      	ldrh	r3, [r4, #12]
 800c52a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c52e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c532:	81a3      	strh	r3, [r4, #12]
 800c534:	6126      	str	r6, [r4, #16]
 800c536:	6165      	str	r5, [r4, #20]
 800c538:	444e      	add	r6, r9
 800c53a:	eba5 0509 	sub.w	r5, r5, r9
 800c53e:	6026      	str	r6, [r4, #0]
 800c540:	60a5      	str	r5, [r4, #8]
 800c542:	463e      	mov	r6, r7
 800c544:	42be      	cmp	r6, r7
 800c546:	d900      	bls.n	800c54a <__ssputs_r+0x72>
 800c548:	463e      	mov	r6, r7
 800c54a:	6820      	ldr	r0, [r4, #0]
 800c54c:	4632      	mov	r2, r6
 800c54e:	4641      	mov	r1, r8
 800c550:	f000 fad4 	bl	800cafc <memmove>
 800c554:	68a3      	ldr	r3, [r4, #8]
 800c556:	1b9b      	subs	r3, r3, r6
 800c558:	60a3      	str	r3, [r4, #8]
 800c55a:	6823      	ldr	r3, [r4, #0]
 800c55c:	4433      	add	r3, r6
 800c55e:	6023      	str	r3, [r4, #0]
 800c560:	2000      	movs	r0, #0
 800c562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c566:	462a      	mov	r2, r5
 800c568:	f000 fa9a 	bl	800caa0 <_realloc_r>
 800c56c:	4606      	mov	r6, r0
 800c56e:	2800      	cmp	r0, #0
 800c570:	d1e0      	bne.n	800c534 <__ssputs_r+0x5c>
 800c572:	6921      	ldr	r1, [r4, #16]
 800c574:	4650      	mov	r0, sl
 800c576:	f7ff ff65 	bl	800c444 <_free_r>
 800c57a:	230c      	movs	r3, #12
 800c57c:	f8ca 3000 	str.w	r3, [sl]
 800c580:	89a3      	ldrh	r3, [r4, #12]
 800c582:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c586:	81a3      	strh	r3, [r4, #12]
 800c588:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c58c:	e7e9      	b.n	800c562 <__ssputs_r+0x8a>
	...

0800c590 <_svfiprintf_r>:
 800c590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c594:	4698      	mov	r8, r3
 800c596:	898b      	ldrh	r3, [r1, #12]
 800c598:	061b      	lsls	r3, r3, #24
 800c59a:	b09d      	sub	sp, #116	@ 0x74
 800c59c:	4607      	mov	r7, r0
 800c59e:	460d      	mov	r5, r1
 800c5a0:	4614      	mov	r4, r2
 800c5a2:	d510      	bpl.n	800c5c6 <_svfiprintf_r+0x36>
 800c5a4:	690b      	ldr	r3, [r1, #16]
 800c5a6:	b973      	cbnz	r3, 800c5c6 <_svfiprintf_r+0x36>
 800c5a8:	2140      	movs	r1, #64	@ 0x40
 800c5aa:	f7ff fe59 	bl	800c260 <_malloc_r>
 800c5ae:	6028      	str	r0, [r5, #0]
 800c5b0:	6128      	str	r0, [r5, #16]
 800c5b2:	b930      	cbnz	r0, 800c5c2 <_svfiprintf_r+0x32>
 800c5b4:	230c      	movs	r3, #12
 800c5b6:	603b      	str	r3, [r7, #0]
 800c5b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c5bc:	b01d      	add	sp, #116	@ 0x74
 800c5be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5c2:	2340      	movs	r3, #64	@ 0x40
 800c5c4:	616b      	str	r3, [r5, #20]
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	9309      	str	r3, [sp, #36]	@ 0x24
 800c5ca:	2320      	movs	r3, #32
 800c5cc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c5d0:	f8cd 800c 	str.w	r8, [sp, #12]
 800c5d4:	2330      	movs	r3, #48	@ 0x30
 800c5d6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c774 <_svfiprintf_r+0x1e4>
 800c5da:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c5de:	f04f 0901 	mov.w	r9, #1
 800c5e2:	4623      	mov	r3, r4
 800c5e4:	469a      	mov	sl, r3
 800c5e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c5ea:	b10a      	cbz	r2, 800c5f0 <_svfiprintf_r+0x60>
 800c5ec:	2a25      	cmp	r2, #37	@ 0x25
 800c5ee:	d1f9      	bne.n	800c5e4 <_svfiprintf_r+0x54>
 800c5f0:	ebba 0b04 	subs.w	fp, sl, r4
 800c5f4:	d00b      	beq.n	800c60e <_svfiprintf_r+0x7e>
 800c5f6:	465b      	mov	r3, fp
 800c5f8:	4622      	mov	r2, r4
 800c5fa:	4629      	mov	r1, r5
 800c5fc:	4638      	mov	r0, r7
 800c5fe:	f7ff ff6b 	bl	800c4d8 <__ssputs_r>
 800c602:	3001      	adds	r0, #1
 800c604:	f000 80a7 	beq.w	800c756 <_svfiprintf_r+0x1c6>
 800c608:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c60a:	445a      	add	r2, fp
 800c60c:	9209      	str	r2, [sp, #36]	@ 0x24
 800c60e:	f89a 3000 	ldrb.w	r3, [sl]
 800c612:	2b00      	cmp	r3, #0
 800c614:	f000 809f 	beq.w	800c756 <_svfiprintf_r+0x1c6>
 800c618:	2300      	movs	r3, #0
 800c61a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c61e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c622:	f10a 0a01 	add.w	sl, sl, #1
 800c626:	9304      	str	r3, [sp, #16]
 800c628:	9307      	str	r3, [sp, #28]
 800c62a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c62e:	931a      	str	r3, [sp, #104]	@ 0x68
 800c630:	4654      	mov	r4, sl
 800c632:	2205      	movs	r2, #5
 800c634:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c638:	484e      	ldr	r0, [pc, #312]	@ (800c774 <_svfiprintf_r+0x1e4>)
 800c63a:	f7f3 fdd1 	bl	80001e0 <memchr>
 800c63e:	9a04      	ldr	r2, [sp, #16]
 800c640:	b9d8      	cbnz	r0, 800c67a <_svfiprintf_r+0xea>
 800c642:	06d0      	lsls	r0, r2, #27
 800c644:	bf44      	itt	mi
 800c646:	2320      	movmi	r3, #32
 800c648:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c64c:	0711      	lsls	r1, r2, #28
 800c64e:	bf44      	itt	mi
 800c650:	232b      	movmi	r3, #43	@ 0x2b
 800c652:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c656:	f89a 3000 	ldrb.w	r3, [sl]
 800c65a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c65c:	d015      	beq.n	800c68a <_svfiprintf_r+0xfa>
 800c65e:	9a07      	ldr	r2, [sp, #28]
 800c660:	4654      	mov	r4, sl
 800c662:	2000      	movs	r0, #0
 800c664:	f04f 0c0a 	mov.w	ip, #10
 800c668:	4621      	mov	r1, r4
 800c66a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c66e:	3b30      	subs	r3, #48	@ 0x30
 800c670:	2b09      	cmp	r3, #9
 800c672:	d94b      	bls.n	800c70c <_svfiprintf_r+0x17c>
 800c674:	b1b0      	cbz	r0, 800c6a4 <_svfiprintf_r+0x114>
 800c676:	9207      	str	r2, [sp, #28]
 800c678:	e014      	b.n	800c6a4 <_svfiprintf_r+0x114>
 800c67a:	eba0 0308 	sub.w	r3, r0, r8
 800c67e:	fa09 f303 	lsl.w	r3, r9, r3
 800c682:	4313      	orrs	r3, r2
 800c684:	9304      	str	r3, [sp, #16]
 800c686:	46a2      	mov	sl, r4
 800c688:	e7d2      	b.n	800c630 <_svfiprintf_r+0xa0>
 800c68a:	9b03      	ldr	r3, [sp, #12]
 800c68c:	1d19      	adds	r1, r3, #4
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	9103      	str	r1, [sp, #12]
 800c692:	2b00      	cmp	r3, #0
 800c694:	bfbb      	ittet	lt
 800c696:	425b      	neglt	r3, r3
 800c698:	f042 0202 	orrlt.w	r2, r2, #2
 800c69c:	9307      	strge	r3, [sp, #28]
 800c69e:	9307      	strlt	r3, [sp, #28]
 800c6a0:	bfb8      	it	lt
 800c6a2:	9204      	strlt	r2, [sp, #16]
 800c6a4:	7823      	ldrb	r3, [r4, #0]
 800c6a6:	2b2e      	cmp	r3, #46	@ 0x2e
 800c6a8:	d10a      	bne.n	800c6c0 <_svfiprintf_r+0x130>
 800c6aa:	7863      	ldrb	r3, [r4, #1]
 800c6ac:	2b2a      	cmp	r3, #42	@ 0x2a
 800c6ae:	d132      	bne.n	800c716 <_svfiprintf_r+0x186>
 800c6b0:	9b03      	ldr	r3, [sp, #12]
 800c6b2:	1d1a      	adds	r2, r3, #4
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	9203      	str	r2, [sp, #12]
 800c6b8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c6bc:	3402      	adds	r4, #2
 800c6be:	9305      	str	r3, [sp, #20]
 800c6c0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c784 <_svfiprintf_r+0x1f4>
 800c6c4:	7821      	ldrb	r1, [r4, #0]
 800c6c6:	2203      	movs	r2, #3
 800c6c8:	4650      	mov	r0, sl
 800c6ca:	f7f3 fd89 	bl	80001e0 <memchr>
 800c6ce:	b138      	cbz	r0, 800c6e0 <_svfiprintf_r+0x150>
 800c6d0:	9b04      	ldr	r3, [sp, #16]
 800c6d2:	eba0 000a 	sub.w	r0, r0, sl
 800c6d6:	2240      	movs	r2, #64	@ 0x40
 800c6d8:	4082      	lsls	r2, r0
 800c6da:	4313      	orrs	r3, r2
 800c6dc:	3401      	adds	r4, #1
 800c6de:	9304      	str	r3, [sp, #16]
 800c6e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6e4:	4824      	ldr	r0, [pc, #144]	@ (800c778 <_svfiprintf_r+0x1e8>)
 800c6e6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c6ea:	2206      	movs	r2, #6
 800c6ec:	f7f3 fd78 	bl	80001e0 <memchr>
 800c6f0:	2800      	cmp	r0, #0
 800c6f2:	d036      	beq.n	800c762 <_svfiprintf_r+0x1d2>
 800c6f4:	4b21      	ldr	r3, [pc, #132]	@ (800c77c <_svfiprintf_r+0x1ec>)
 800c6f6:	bb1b      	cbnz	r3, 800c740 <_svfiprintf_r+0x1b0>
 800c6f8:	9b03      	ldr	r3, [sp, #12]
 800c6fa:	3307      	adds	r3, #7
 800c6fc:	f023 0307 	bic.w	r3, r3, #7
 800c700:	3308      	adds	r3, #8
 800c702:	9303      	str	r3, [sp, #12]
 800c704:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c706:	4433      	add	r3, r6
 800c708:	9309      	str	r3, [sp, #36]	@ 0x24
 800c70a:	e76a      	b.n	800c5e2 <_svfiprintf_r+0x52>
 800c70c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c710:	460c      	mov	r4, r1
 800c712:	2001      	movs	r0, #1
 800c714:	e7a8      	b.n	800c668 <_svfiprintf_r+0xd8>
 800c716:	2300      	movs	r3, #0
 800c718:	3401      	adds	r4, #1
 800c71a:	9305      	str	r3, [sp, #20]
 800c71c:	4619      	mov	r1, r3
 800c71e:	f04f 0c0a 	mov.w	ip, #10
 800c722:	4620      	mov	r0, r4
 800c724:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c728:	3a30      	subs	r2, #48	@ 0x30
 800c72a:	2a09      	cmp	r2, #9
 800c72c:	d903      	bls.n	800c736 <_svfiprintf_r+0x1a6>
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d0c6      	beq.n	800c6c0 <_svfiprintf_r+0x130>
 800c732:	9105      	str	r1, [sp, #20]
 800c734:	e7c4      	b.n	800c6c0 <_svfiprintf_r+0x130>
 800c736:	fb0c 2101 	mla	r1, ip, r1, r2
 800c73a:	4604      	mov	r4, r0
 800c73c:	2301      	movs	r3, #1
 800c73e:	e7f0      	b.n	800c722 <_svfiprintf_r+0x192>
 800c740:	ab03      	add	r3, sp, #12
 800c742:	9300      	str	r3, [sp, #0]
 800c744:	462a      	mov	r2, r5
 800c746:	4b0e      	ldr	r3, [pc, #56]	@ (800c780 <_svfiprintf_r+0x1f0>)
 800c748:	a904      	add	r1, sp, #16
 800c74a:	4638      	mov	r0, r7
 800c74c:	f3af 8000 	nop.w
 800c750:	1c42      	adds	r2, r0, #1
 800c752:	4606      	mov	r6, r0
 800c754:	d1d6      	bne.n	800c704 <_svfiprintf_r+0x174>
 800c756:	89ab      	ldrh	r3, [r5, #12]
 800c758:	065b      	lsls	r3, r3, #25
 800c75a:	f53f af2d 	bmi.w	800c5b8 <_svfiprintf_r+0x28>
 800c75e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c760:	e72c      	b.n	800c5bc <_svfiprintf_r+0x2c>
 800c762:	ab03      	add	r3, sp, #12
 800c764:	9300      	str	r3, [sp, #0]
 800c766:	462a      	mov	r2, r5
 800c768:	4b05      	ldr	r3, [pc, #20]	@ (800c780 <_svfiprintf_r+0x1f0>)
 800c76a:	a904      	add	r1, sp, #16
 800c76c:	4638      	mov	r0, r7
 800c76e:	f000 f879 	bl	800c864 <_printf_i>
 800c772:	e7ed      	b.n	800c750 <_svfiprintf_r+0x1c0>
 800c774:	0800cbc4 	.word	0x0800cbc4
 800c778:	0800cbce 	.word	0x0800cbce
 800c77c:	00000000 	.word	0x00000000
 800c780:	0800c4d9 	.word	0x0800c4d9
 800c784:	0800cbca 	.word	0x0800cbca

0800c788 <_printf_common>:
 800c788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c78c:	4616      	mov	r6, r2
 800c78e:	4698      	mov	r8, r3
 800c790:	688a      	ldr	r2, [r1, #8]
 800c792:	690b      	ldr	r3, [r1, #16]
 800c794:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c798:	4293      	cmp	r3, r2
 800c79a:	bfb8      	it	lt
 800c79c:	4613      	movlt	r3, r2
 800c79e:	6033      	str	r3, [r6, #0]
 800c7a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c7a4:	4607      	mov	r7, r0
 800c7a6:	460c      	mov	r4, r1
 800c7a8:	b10a      	cbz	r2, 800c7ae <_printf_common+0x26>
 800c7aa:	3301      	adds	r3, #1
 800c7ac:	6033      	str	r3, [r6, #0]
 800c7ae:	6823      	ldr	r3, [r4, #0]
 800c7b0:	0699      	lsls	r1, r3, #26
 800c7b2:	bf42      	ittt	mi
 800c7b4:	6833      	ldrmi	r3, [r6, #0]
 800c7b6:	3302      	addmi	r3, #2
 800c7b8:	6033      	strmi	r3, [r6, #0]
 800c7ba:	6825      	ldr	r5, [r4, #0]
 800c7bc:	f015 0506 	ands.w	r5, r5, #6
 800c7c0:	d106      	bne.n	800c7d0 <_printf_common+0x48>
 800c7c2:	f104 0a19 	add.w	sl, r4, #25
 800c7c6:	68e3      	ldr	r3, [r4, #12]
 800c7c8:	6832      	ldr	r2, [r6, #0]
 800c7ca:	1a9b      	subs	r3, r3, r2
 800c7cc:	42ab      	cmp	r3, r5
 800c7ce:	dc26      	bgt.n	800c81e <_printf_common+0x96>
 800c7d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c7d4:	6822      	ldr	r2, [r4, #0]
 800c7d6:	3b00      	subs	r3, #0
 800c7d8:	bf18      	it	ne
 800c7da:	2301      	movne	r3, #1
 800c7dc:	0692      	lsls	r2, r2, #26
 800c7de:	d42b      	bmi.n	800c838 <_printf_common+0xb0>
 800c7e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c7e4:	4641      	mov	r1, r8
 800c7e6:	4638      	mov	r0, r7
 800c7e8:	47c8      	blx	r9
 800c7ea:	3001      	adds	r0, #1
 800c7ec:	d01e      	beq.n	800c82c <_printf_common+0xa4>
 800c7ee:	6823      	ldr	r3, [r4, #0]
 800c7f0:	6922      	ldr	r2, [r4, #16]
 800c7f2:	f003 0306 	and.w	r3, r3, #6
 800c7f6:	2b04      	cmp	r3, #4
 800c7f8:	bf02      	ittt	eq
 800c7fa:	68e5      	ldreq	r5, [r4, #12]
 800c7fc:	6833      	ldreq	r3, [r6, #0]
 800c7fe:	1aed      	subeq	r5, r5, r3
 800c800:	68a3      	ldr	r3, [r4, #8]
 800c802:	bf0c      	ite	eq
 800c804:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c808:	2500      	movne	r5, #0
 800c80a:	4293      	cmp	r3, r2
 800c80c:	bfc4      	itt	gt
 800c80e:	1a9b      	subgt	r3, r3, r2
 800c810:	18ed      	addgt	r5, r5, r3
 800c812:	2600      	movs	r6, #0
 800c814:	341a      	adds	r4, #26
 800c816:	42b5      	cmp	r5, r6
 800c818:	d11a      	bne.n	800c850 <_printf_common+0xc8>
 800c81a:	2000      	movs	r0, #0
 800c81c:	e008      	b.n	800c830 <_printf_common+0xa8>
 800c81e:	2301      	movs	r3, #1
 800c820:	4652      	mov	r2, sl
 800c822:	4641      	mov	r1, r8
 800c824:	4638      	mov	r0, r7
 800c826:	47c8      	blx	r9
 800c828:	3001      	adds	r0, #1
 800c82a:	d103      	bne.n	800c834 <_printf_common+0xac>
 800c82c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c834:	3501      	adds	r5, #1
 800c836:	e7c6      	b.n	800c7c6 <_printf_common+0x3e>
 800c838:	18e1      	adds	r1, r4, r3
 800c83a:	1c5a      	adds	r2, r3, #1
 800c83c:	2030      	movs	r0, #48	@ 0x30
 800c83e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c842:	4422      	add	r2, r4
 800c844:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c848:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c84c:	3302      	adds	r3, #2
 800c84e:	e7c7      	b.n	800c7e0 <_printf_common+0x58>
 800c850:	2301      	movs	r3, #1
 800c852:	4622      	mov	r2, r4
 800c854:	4641      	mov	r1, r8
 800c856:	4638      	mov	r0, r7
 800c858:	47c8      	blx	r9
 800c85a:	3001      	adds	r0, #1
 800c85c:	d0e6      	beq.n	800c82c <_printf_common+0xa4>
 800c85e:	3601      	adds	r6, #1
 800c860:	e7d9      	b.n	800c816 <_printf_common+0x8e>
	...

0800c864 <_printf_i>:
 800c864:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c868:	7e0f      	ldrb	r7, [r1, #24]
 800c86a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c86c:	2f78      	cmp	r7, #120	@ 0x78
 800c86e:	4691      	mov	r9, r2
 800c870:	4680      	mov	r8, r0
 800c872:	460c      	mov	r4, r1
 800c874:	469a      	mov	sl, r3
 800c876:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c87a:	d807      	bhi.n	800c88c <_printf_i+0x28>
 800c87c:	2f62      	cmp	r7, #98	@ 0x62
 800c87e:	d80a      	bhi.n	800c896 <_printf_i+0x32>
 800c880:	2f00      	cmp	r7, #0
 800c882:	f000 80d1 	beq.w	800ca28 <_printf_i+0x1c4>
 800c886:	2f58      	cmp	r7, #88	@ 0x58
 800c888:	f000 80b8 	beq.w	800c9fc <_printf_i+0x198>
 800c88c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c890:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c894:	e03a      	b.n	800c90c <_printf_i+0xa8>
 800c896:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c89a:	2b15      	cmp	r3, #21
 800c89c:	d8f6      	bhi.n	800c88c <_printf_i+0x28>
 800c89e:	a101      	add	r1, pc, #4	@ (adr r1, 800c8a4 <_printf_i+0x40>)
 800c8a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c8a4:	0800c8fd 	.word	0x0800c8fd
 800c8a8:	0800c911 	.word	0x0800c911
 800c8ac:	0800c88d 	.word	0x0800c88d
 800c8b0:	0800c88d 	.word	0x0800c88d
 800c8b4:	0800c88d 	.word	0x0800c88d
 800c8b8:	0800c88d 	.word	0x0800c88d
 800c8bc:	0800c911 	.word	0x0800c911
 800c8c0:	0800c88d 	.word	0x0800c88d
 800c8c4:	0800c88d 	.word	0x0800c88d
 800c8c8:	0800c88d 	.word	0x0800c88d
 800c8cc:	0800c88d 	.word	0x0800c88d
 800c8d0:	0800ca0f 	.word	0x0800ca0f
 800c8d4:	0800c93b 	.word	0x0800c93b
 800c8d8:	0800c9c9 	.word	0x0800c9c9
 800c8dc:	0800c88d 	.word	0x0800c88d
 800c8e0:	0800c88d 	.word	0x0800c88d
 800c8e4:	0800ca31 	.word	0x0800ca31
 800c8e8:	0800c88d 	.word	0x0800c88d
 800c8ec:	0800c93b 	.word	0x0800c93b
 800c8f0:	0800c88d 	.word	0x0800c88d
 800c8f4:	0800c88d 	.word	0x0800c88d
 800c8f8:	0800c9d1 	.word	0x0800c9d1
 800c8fc:	6833      	ldr	r3, [r6, #0]
 800c8fe:	1d1a      	adds	r2, r3, #4
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	6032      	str	r2, [r6, #0]
 800c904:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c908:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c90c:	2301      	movs	r3, #1
 800c90e:	e09c      	b.n	800ca4a <_printf_i+0x1e6>
 800c910:	6833      	ldr	r3, [r6, #0]
 800c912:	6820      	ldr	r0, [r4, #0]
 800c914:	1d19      	adds	r1, r3, #4
 800c916:	6031      	str	r1, [r6, #0]
 800c918:	0606      	lsls	r6, r0, #24
 800c91a:	d501      	bpl.n	800c920 <_printf_i+0xbc>
 800c91c:	681d      	ldr	r5, [r3, #0]
 800c91e:	e003      	b.n	800c928 <_printf_i+0xc4>
 800c920:	0645      	lsls	r5, r0, #25
 800c922:	d5fb      	bpl.n	800c91c <_printf_i+0xb8>
 800c924:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c928:	2d00      	cmp	r5, #0
 800c92a:	da03      	bge.n	800c934 <_printf_i+0xd0>
 800c92c:	232d      	movs	r3, #45	@ 0x2d
 800c92e:	426d      	negs	r5, r5
 800c930:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c934:	4858      	ldr	r0, [pc, #352]	@ (800ca98 <_printf_i+0x234>)
 800c936:	230a      	movs	r3, #10
 800c938:	e011      	b.n	800c95e <_printf_i+0xfa>
 800c93a:	6821      	ldr	r1, [r4, #0]
 800c93c:	6833      	ldr	r3, [r6, #0]
 800c93e:	0608      	lsls	r0, r1, #24
 800c940:	f853 5b04 	ldr.w	r5, [r3], #4
 800c944:	d402      	bmi.n	800c94c <_printf_i+0xe8>
 800c946:	0649      	lsls	r1, r1, #25
 800c948:	bf48      	it	mi
 800c94a:	b2ad      	uxthmi	r5, r5
 800c94c:	2f6f      	cmp	r7, #111	@ 0x6f
 800c94e:	4852      	ldr	r0, [pc, #328]	@ (800ca98 <_printf_i+0x234>)
 800c950:	6033      	str	r3, [r6, #0]
 800c952:	bf14      	ite	ne
 800c954:	230a      	movne	r3, #10
 800c956:	2308      	moveq	r3, #8
 800c958:	2100      	movs	r1, #0
 800c95a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c95e:	6866      	ldr	r6, [r4, #4]
 800c960:	60a6      	str	r6, [r4, #8]
 800c962:	2e00      	cmp	r6, #0
 800c964:	db05      	blt.n	800c972 <_printf_i+0x10e>
 800c966:	6821      	ldr	r1, [r4, #0]
 800c968:	432e      	orrs	r6, r5
 800c96a:	f021 0104 	bic.w	r1, r1, #4
 800c96e:	6021      	str	r1, [r4, #0]
 800c970:	d04b      	beq.n	800ca0a <_printf_i+0x1a6>
 800c972:	4616      	mov	r6, r2
 800c974:	fbb5 f1f3 	udiv	r1, r5, r3
 800c978:	fb03 5711 	mls	r7, r3, r1, r5
 800c97c:	5dc7      	ldrb	r7, [r0, r7]
 800c97e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c982:	462f      	mov	r7, r5
 800c984:	42bb      	cmp	r3, r7
 800c986:	460d      	mov	r5, r1
 800c988:	d9f4      	bls.n	800c974 <_printf_i+0x110>
 800c98a:	2b08      	cmp	r3, #8
 800c98c:	d10b      	bne.n	800c9a6 <_printf_i+0x142>
 800c98e:	6823      	ldr	r3, [r4, #0]
 800c990:	07df      	lsls	r7, r3, #31
 800c992:	d508      	bpl.n	800c9a6 <_printf_i+0x142>
 800c994:	6923      	ldr	r3, [r4, #16]
 800c996:	6861      	ldr	r1, [r4, #4]
 800c998:	4299      	cmp	r1, r3
 800c99a:	bfde      	ittt	le
 800c99c:	2330      	movle	r3, #48	@ 0x30
 800c99e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c9a2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800c9a6:	1b92      	subs	r2, r2, r6
 800c9a8:	6122      	str	r2, [r4, #16]
 800c9aa:	f8cd a000 	str.w	sl, [sp]
 800c9ae:	464b      	mov	r3, r9
 800c9b0:	aa03      	add	r2, sp, #12
 800c9b2:	4621      	mov	r1, r4
 800c9b4:	4640      	mov	r0, r8
 800c9b6:	f7ff fee7 	bl	800c788 <_printf_common>
 800c9ba:	3001      	adds	r0, #1
 800c9bc:	d14a      	bne.n	800ca54 <_printf_i+0x1f0>
 800c9be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c9c2:	b004      	add	sp, #16
 800c9c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9c8:	6823      	ldr	r3, [r4, #0]
 800c9ca:	f043 0320 	orr.w	r3, r3, #32
 800c9ce:	6023      	str	r3, [r4, #0]
 800c9d0:	4832      	ldr	r0, [pc, #200]	@ (800ca9c <_printf_i+0x238>)
 800c9d2:	2778      	movs	r7, #120	@ 0x78
 800c9d4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c9d8:	6823      	ldr	r3, [r4, #0]
 800c9da:	6831      	ldr	r1, [r6, #0]
 800c9dc:	061f      	lsls	r7, r3, #24
 800c9de:	f851 5b04 	ldr.w	r5, [r1], #4
 800c9e2:	d402      	bmi.n	800c9ea <_printf_i+0x186>
 800c9e4:	065f      	lsls	r7, r3, #25
 800c9e6:	bf48      	it	mi
 800c9e8:	b2ad      	uxthmi	r5, r5
 800c9ea:	6031      	str	r1, [r6, #0]
 800c9ec:	07d9      	lsls	r1, r3, #31
 800c9ee:	bf44      	itt	mi
 800c9f0:	f043 0320 	orrmi.w	r3, r3, #32
 800c9f4:	6023      	strmi	r3, [r4, #0]
 800c9f6:	b11d      	cbz	r5, 800ca00 <_printf_i+0x19c>
 800c9f8:	2310      	movs	r3, #16
 800c9fa:	e7ad      	b.n	800c958 <_printf_i+0xf4>
 800c9fc:	4826      	ldr	r0, [pc, #152]	@ (800ca98 <_printf_i+0x234>)
 800c9fe:	e7e9      	b.n	800c9d4 <_printf_i+0x170>
 800ca00:	6823      	ldr	r3, [r4, #0]
 800ca02:	f023 0320 	bic.w	r3, r3, #32
 800ca06:	6023      	str	r3, [r4, #0]
 800ca08:	e7f6      	b.n	800c9f8 <_printf_i+0x194>
 800ca0a:	4616      	mov	r6, r2
 800ca0c:	e7bd      	b.n	800c98a <_printf_i+0x126>
 800ca0e:	6833      	ldr	r3, [r6, #0]
 800ca10:	6825      	ldr	r5, [r4, #0]
 800ca12:	6961      	ldr	r1, [r4, #20]
 800ca14:	1d18      	adds	r0, r3, #4
 800ca16:	6030      	str	r0, [r6, #0]
 800ca18:	062e      	lsls	r6, r5, #24
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	d501      	bpl.n	800ca22 <_printf_i+0x1be>
 800ca1e:	6019      	str	r1, [r3, #0]
 800ca20:	e002      	b.n	800ca28 <_printf_i+0x1c4>
 800ca22:	0668      	lsls	r0, r5, #25
 800ca24:	d5fb      	bpl.n	800ca1e <_printf_i+0x1ba>
 800ca26:	8019      	strh	r1, [r3, #0]
 800ca28:	2300      	movs	r3, #0
 800ca2a:	6123      	str	r3, [r4, #16]
 800ca2c:	4616      	mov	r6, r2
 800ca2e:	e7bc      	b.n	800c9aa <_printf_i+0x146>
 800ca30:	6833      	ldr	r3, [r6, #0]
 800ca32:	1d1a      	adds	r2, r3, #4
 800ca34:	6032      	str	r2, [r6, #0]
 800ca36:	681e      	ldr	r6, [r3, #0]
 800ca38:	6862      	ldr	r2, [r4, #4]
 800ca3a:	2100      	movs	r1, #0
 800ca3c:	4630      	mov	r0, r6
 800ca3e:	f7f3 fbcf 	bl	80001e0 <memchr>
 800ca42:	b108      	cbz	r0, 800ca48 <_printf_i+0x1e4>
 800ca44:	1b80      	subs	r0, r0, r6
 800ca46:	6060      	str	r0, [r4, #4]
 800ca48:	6863      	ldr	r3, [r4, #4]
 800ca4a:	6123      	str	r3, [r4, #16]
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ca52:	e7aa      	b.n	800c9aa <_printf_i+0x146>
 800ca54:	6923      	ldr	r3, [r4, #16]
 800ca56:	4632      	mov	r2, r6
 800ca58:	4649      	mov	r1, r9
 800ca5a:	4640      	mov	r0, r8
 800ca5c:	47d0      	blx	sl
 800ca5e:	3001      	adds	r0, #1
 800ca60:	d0ad      	beq.n	800c9be <_printf_i+0x15a>
 800ca62:	6823      	ldr	r3, [r4, #0]
 800ca64:	079b      	lsls	r3, r3, #30
 800ca66:	d413      	bmi.n	800ca90 <_printf_i+0x22c>
 800ca68:	68e0      	ldr	r0, [r4, #12]
 800ca6a:	9b03      	ldr	r3, [sp, #12]
 800ca6c:	4298      	cmp	r0, r3
 800ca6e:	bfb8      	it	lt
 800ca70:	4618      	movlt	r0, r3
 800ca72:	e7a6      	b.n	800c9c2 <_printf_i+0x15e>
 800ca74:	2301      	movs	r3, #1
 800ca76:	4632      	mov	r2, r6
 800ca78:	4649      	mov	r1, r9
 800ca7a:	4640      	mov	r0, r8
 800ca7c:	47d0      	blx	sl
 800ca7e:	3001      	adds	r0, #1
 800ca80:	d09d      	beq.n	800c9be <_printf_i+0x15a>
 800ca82:	3501      	adds	r5, #1
 800ca84:	68e3      	ldr	r3, [r4, #12]
 800ca86:	9903      	ldr	r1, [sp, #12]
 800ca88:	1a5b      	subs	r3, r3, r1
 800ca8a:	42ab      	cmp	r3, r5
 800ca8c:	dcf2      	bgt.n	800ca74 <_printf_i+0x210>
 800ca8e:	e7eb      	b.n	800ca68 <_printf_i+0x204>
 800ca90:	2500      	movs	r5, #0
 800ca92:	f104 0619 	add.w	r6, r4, #25
 800ca96:	e7f5      	b.n	800ca84 <_printf_i+0x220>
 800ca98:	0800cbd5 	.word	0x0800cbd5
 800ca9c:	0800cbe6 	.word	0x0800cbe6

0800caa0 <_realloc_r>:
 800caa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800caa4:	4607      	mov	r7, r0
 800caa6:	4614      	mov	r4, r2
 800caa8:	460d      	mov	r5, r1
 800caaa:	b921      	cbnz	r1, 800cab6 <_realloc_r+0x16>
 800caac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cab0:	4611      	mov	r1, r2
 800cab2:	f7ff bbd5 	b.w	800c260 <_malloc_r>
 800cab6:	b92a      	cbnz	r2, 800cac4 <_realloc_r+0x24>
 800cab8:	f7ff fcc4 	bl	800c444 <_free_r>
 800cabc:	4625      	mov	r5, r4
 800cabe:	4628      	mov	r0, r5
 800cac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cac4:	f000 f842 	bl	800cb4c <_malloc_usable_size_r>
 800cac8:	4284      	cmp	r4, r0
 800caca:	4606      	mov	r6, r0
 800cacc:	d802      	bhi.n	800cad4 <_realloc_r+0x34>
 800cace:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cad2:	d8f4      	bhi.n	800cabe <_realloc_r+0x1e>
 800cad4:	4621      	mov	r1, r4
 800cad6:	4638      	mov	r0, r7
 800cad8:	f7ff fbc2 	bl	800c260 <_malloc_r>
 800cadc:	4680      	mov	r8, r0
 800cade:	b908      	cbnz	r0, 800cae4 <_realloc_r+0x44>
 800cae0:	4645      	mov	r5, r8
 800cae2:	e7ec      	b.n	800cabe <_realloc_r+0x1e>
 800cae4:	42b4      	cmp	r4, r6
 800cae6:	4622      	mov	r2, r4
 800cae8:	4629      	mov	r1, r5
 800caea:	bf28      	it	cs
 800caec:	4632      	movcs	r2, r6
 800caee:	f000 f81f 	bl	800cb30 <memcpy>
 800caf2:	4629      	mov	r1, r5
 800caf4:	4638      	mov	r0, r7
 800caf6:	f7ff fca5 	bl	800c444 <_free_r>
 800cafa:	e7f1      	b.n	800cae0 <_realloc_r+0x40>

0800cafc <memmove>:
 800cafc:	4288      	cmp	r0, r1
 800cafe:	b510      	push	{r4, lr}
 800cb00:	eb01 0402 	add.w	r4, r1, r2
 800cb04:	d902      	bls.n	800cb0c <memmove+0x10>
 800cb06:	4284      	cmp	r4, r0
 800cb08:	4623      	mov	r3, r4
 800cb0a:	d807      	bhi.n	800cb1c <memmove+0x20>
 800cb0c:	1e43      	subs	r3, r0, #1
 800cb0e:	42a1      	cmp	r1, r4
 800cb10:	d008      	beq.n	800cb24 <memmove+0x28>
 800cb12:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cb16:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cb1a:	e7f8      	b.n	800cb0e <memmove+0x12>
 800cb1c:	4402      	add	r2, r0
 800cb1e:	4601      	mov	r1, r0
 800cb20:	428a      	cmp	r2, r1
 800cb22:	d100      	bne.n	800cb26 <memmove+0x2a>
 800cb24:	bd10      	pop	{r4, pc}
 800cb26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cb2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cb2e:	e7f7      	b.n	800cb20 <memmove+0x24>

0800cb30 <memcpy>:
 800cb30:	440a      	add	r2, r1
 800cb32:	4291      	cmp	r1, r2
 800cb34:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800cb38:	d100      	bne.n	800cb3c <memcpy+0xc>
 800cb3a:	4770      	bx	lr
 800cb3c:	b510      	push	{r4, lr}
 800cb3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb42:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cb46:	4291      	cmp	r1, r2
 800cb48:	d1f9      	bne.n	800cb3e <memcpy+0xe>
 800cb4a:	bd10      	pop	{r4, pc}

0800cb4c <_malloc_usable_size_r>:
 800cb4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb50:	1f18      	subs	r0, r3, #4
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	bfbc      	itt	lt
 800cb56:	580b      	ldrlt	r3, [r1, r0]
 800cb58:	18c0      	addlt	r0, r0, r3
 800cb5a:	4770      	bx	lr

0800cb5c <_init>:
 800cb5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb5e:	bf00      	nop
 800cb60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb62:	bc08      	pop	{r3}
 800cb64:	469e      	mov	lr, r3
 800cb66:	4770      	bx	lr

0800cb68 <_fini>:
 800cb68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb6a:	bf00      	nop
 800cb6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb6e:	bc08      	pop	{r3}
 800cb70:	469e      	mov	lr, r3
 800cb72:	4770      	bx	lr
