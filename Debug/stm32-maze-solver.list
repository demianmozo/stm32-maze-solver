
stm32-maze-solver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c9dc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  0800cb6c  0800cb6c  0000db6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cbf0  0800cbf0  0000e098  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800cbf0  0800cbf0  0000dbf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cbf8  0800cbf8  0000e098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cbf8  0800cbf8  0000dbf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cbfc  0800cbfc  0000dbfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  0800cc00  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e098  2**0
                  CONTENTS
 10 .bss          00000d5c  20000098  20000098  0000e098  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000df4  20000df4  0000e098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001efb4  00000000  00000000  0000e0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000049a6  00000000  00000000  0002d07c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a18  00000000  00000000  00031a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001441  00000000  00000000  00033440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000273bd  00000000  00000000  00034881  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000225a7  00000000  00000000  0005bc3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e202a  00000000  00000000  0007e1e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0016020f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000736c  00000000  00000000  00160254  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  001675c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cb54 	.word	0x0800cb54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	0800cb54 	.word	0x0800cb54

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <antirebote>:
/**
 * @brief Función genérica de antirebote para cualquier pin GPIO
 * @ingroup ANTIREBOTE
 */
bool antirebote(GPIO_TypeDef *puerto, uint16_t pin)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	460b      	mov	r3, r1
 80005b6:	807b      	strh	r3, [r7, #2]
        ultimas_lecturas[16]; // Para hasta 16 pines distintos uso un array, god
    static uint8_t inicializado[16] = {
        0}; // se inicializan en cero solo la 1era vez que llamas la funcion

    // Calcular el índice del pin a partir de la máscara (posición del bit)
    uint8_t index = 0;
 80005b8:	2300      	movs	r3, #0
 80005ba:	73fb      	strb	r3, [r7, #15]
    uint16_t mask = pin;
 80005bc:	887b      	ldrh	r3, [r7, #2]
 80005be:	81bb      	strh	r3, [r7, #12]
    while (mask > 1)
 80005c0:	e005      	b.n	80005ce <antirebote+0x22>
    {
        mask >>= 1; // Desplazar a la derecha el bit
 80005c2:	89bb      	ldrh	r3, [r7, #12]
 80005c4:	085b      	lsrs	r3, r3, #1
 80005c6:	81bb      	strh	r3, [r7, #12]
        index++;    // Contar cuántos desplazamientos hicimos
 80005c8:	7bfb      	ldrb	r3, [r7, #15]
 80005ca:	3301      	adds	r3, #1
 80005cc:	73fb      	strb	r3, [r7, #15]
    while (mask > 1)
 80005ce:	89bb      	ldrh	r3, [r7, #12]
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	d8f6      	bhi.n	80005c2 <antirebote+0x16>
    }

    GPIO_PinState lectura1, lectura2;
    bool pulsado = false;
 80005d4:	2300      	movs	r3, #0
 80005d6:	72fb      	strb	r3, [r7, #11]

    // Leer el estado actual del pin
    lectura1 =
        HAL_GPIO_ReadPin(puerto, pin); //  xq puerto es el puntero al pueertooo
 80005d8:	887b      	ldrh	r3, [r7, #2]
 80005da:	4619      	mov	r1, r3
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f003 fa1f 	bl	8003a20 <HAL_GPIO_ReadPin>
 80005e2:	4603      	mov	r3, r0
 80005e4:	72bb      	strb	r3, [r7, #10]

    // Si no se había inicializado antes, guardar lectura inicial y salir
    if (!inicializado[index])
 80005e6:	7bfb      	ldrb	r3, [r7, #15]
 80005e8:	4a17      	ldr	r2, [pc, #92]	@ (8000648 <antirebote+0x9c>)
 80005ea:	5cd3      	ldrb	r3, [r2, r3]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d109      	bne.n	8000604 <antirebote+0x58>
    { // se ejecuta solo la primera vez que se llama a
      // la función para ese pin.
        ultimas_lecturas[index] = lectura1;
 80005f0:	7bfb      	ldrb	r3, [r7, #15]
 80005f2:	4916      	ldr	r1, [pc, #88]	@ (800064c <antirebote+0xa0>)
 80005f4:	7aba      	ldrb	r2, [r7, #10]
 80005f6:	54ca      	strb	r2, [r1, r3]
        inicializado[index] = 1;
 80005f8:	7bfb      	ldrb	r3, [r7, #15]
 80005fa:	4a13      	ldr	r2, [pc, #76]	@ (8000648 <antirebote+0x9c>)
 80005fc:	2101      	movs	r1, #1
 80005fe:	54d1      	strb	r1, [r2, r3]
        return false;
 8000600:	2300      	movs	r3, #0
 8000602:	e01d      	b.n	8000640 <antirebote+0x94>
    }

    // Si detectamos un cambio respecto a la última lectura válida
    if (lectura1 != ultimas_lecturas[index])
 8000604:	7bfb      	ldrb	r3, [r7, #15]
 8000606:	4a11      	ldr	r2, [pc, #68]	@ (800064c <antirebote+0xa0>)
 8000608:	5cd3      	ldrb	r3, [r2, r3]
 800060a:	7aba      	ldrb	r2, [r7, #10]
 800060c:	429a      	cmp	r2, r3
 800060e:	d016      	beq.n	800063e <antirebote+0x92>
    {
        HAL_Delay(TREBOTES); // Esperar para filtrar rebotes
 8000610:	2032      	movs	r0, #50	@ 0x32
 8000612:	f001 fefd 	bl	8002410 <HAL_Delay>

        // Leer el pin otra vez para confirmar que la lectura es estable
        lectura2 = HAL_GPIO_ReadPin(puerto, pin);
 8000616:	887b      	ldrh	r3, [r7, #2]
 8000618:	4619      	mov	r1, r3
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f003 fa00 	bl	8003a20 <HAL_GPIO_ReadPin>
 8000620:	4603      	mov	r3, r0
 8000622:	727b      	strb	r3, [r7, #9]

        // Si la segunda lectura coincide con la primera, es válida
        if (lectura1 == lectura2)
 8000624:	7aba      	ldrb	r2, [r7, #10]
 8000626:	7a7b      	ldrb	r3, [r7, #9]
 8000628:	429a      	cmp	r2, r3
 800062a:	d108      	bne.n	800063e <antirebote+0x92>
        {
            ultimas_lecturas[index] = lectura2; // Guardar lectura válida
 800062c:	7bfb      	ldrb	r3, [r7, #15]
 800062e:	4907      	ldr	r1, [pc, #28]	@ (800064c <antirebote+0xa0>)
 8000630:	7a7a      	ldrb	r2, [r7, #9]
 8000632:	54ca      	strb	r2, [r1, r3]

            // Detectar si el botón fue presionado (activo en bajo)
            if (lectura2 == GPIO_PIN_RESET)
 8000634:	7a7b      	ldrb	r3, [r7, #9]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d101      	bne.n	800063e <antirebote+0x92>
            {
                pulsado = true;
 800063a:	2301      	movs	r3, #1
 800063c:	72fb      	strb	r3, [r7, #11]
            }
        }
    }

    return pulsado;
 800063e:	7afb      	ldrb	r3, [r7, #11]
 8000640:	4618      	mov	r0, r3
 8000642:	3710      	adds	r7, #16
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	200000b4 	.word	0x200000b4
 800064c:	200000c4 	.word	0x200000c4

08000650 <HAL_ADC_ConvHalfCpltCallback>:

bool calibrado = false;

// Interrupciones DMA
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
    promediar_sensores(&dma_buffer[0]);
 8000658:	4803      	ldr	r0, [pc, #12]	@ (8000668 <HAL_ADC_ConvHalfCpltCallback+0x18>)
 800065a:	f000 f815 	bl	8000688 <promediar_sensores>
}
 800065e:	bf00      	nop
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000334 	.word	0x20000334

0800066c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
    promediar_sensores(&dma_buffer[BUFFER_MINIMO]);
 8000674:	4803      	ldr	r0, [pc, #12]	@ (8000684 <HAL_ADC_ConvCpltCallback+0x18>)
 8000676:	f000 f807 	bl	8000688 <promediar_sensores>
}
 800067a:	bf00      	nop
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	200003fc 	.word	0x200003fc

08000688 <promediar_sensores>:

// Función promediar se ejecuta constantemente en DMA
void promediar_sensores(uint16_t *buffer)
{
 8000688:	b480      	push	{r7}
 800068a:	b087      	sub	sp, #28
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
    uint32_t izq_sum = 0, der_sum = 0;
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]
 8000694:	2300      	movs	r3, #0
 8000696:	613b      	str	r3, [r7, #16]

    // Canal 8 (derecho), Canal 9 (izquierdo)
    for (int i = 0; i < MUESTRAS; ++i)
 8000698:	2300      	movs	r3, #0
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	e012      	b.n	80006c4 <promediar_sensores+0x3c>
    {
        der_sum += buffer[0]; // Canal 8 (PB0)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	881b      	ldrh	r3, [r3, #0]
 80006a2:	461a      	mov	r2, r3
 80006a4:	693b      	ldr	r3, [r7, #16]
 80006a6:	4413      	add	r3, r2
 80006a8:	613b      	str	r3, [r7, #16]
        izq_sum += buffer[1]; // Canal 9 (PB1)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	3302      	adds	r3, #2
 80006ae:	881b      	ldrh	r3, [r3, #0]
 80006b0:	461a      	mov	r2, r3
 80006b2:	697b      	ldr	r3, [r7, #20]
 80006b4:	4413      	add	r3, r2
 80006b6:	617b      	str	r3, [r7, #20]
        buffer += 2;          // Avanza 2 posiciones
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	3304      	adds	r3, #4
 80006bc:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < MUESTRAS; ++i)
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	3301      	adds	r3, #1
 80006c2:	60fb      	str	r3, [r7, #12]
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	2b13      	cmp	r3, #19
 80006c8:	dde9      	ble.n	800069e <promediar_sensores+0x16>
    }

    sensor_der_avg = der_sum / MUESTRAS;
 80006ca:	693b      	ldr	r3, [r7, #16]
 80006cc:	4a0a      	ldr	r2, [pc, #40]	@ (80006f8 <promediar_sensores+0x70>)
 80006ce:	fba2 2303 	umull	r2, r3, r2, r3
 80006d2:	091b      	lsrs	r3, r3, #4
 80006d4:	b29a      	uxth	r2, r3
 80006d6:	4b09      	ldr	r3, [pc, #36]	@ (80006fc <promediar_sensores+0x74>)
 80006d8:	801a      	strh	r2, [r3, #0]
    sensor_izq_avg = izq_sum / MUESTRAS;
 80006da:	697b      	ldr	r3, [r7, #20]
 80006dc:	4a06      	ldr	r2, [pc, #24]	@ (80006f8 <promediar_sensores+0x70>)
 80006de:	fba2 2303 	umull	r2, r3, r2, r3
 80006e2:	091b      	lsrs	r3, r3, #4
 80006e4:	b29a      	uxth	r2, r3
 80006e6:	4b06      	ldr	r3, [pc, #24]	@ (8000700 <promediar_sensores+0x78>)
 80006e8:	801a      	strh	r2, [r3, #0]
}
 80006ea:	bf00      	nop
 80006ec:	371c      	adds	r7, #28
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	cccccccd 	.word	0xcccccccd
 80006fc:	200000d6 	.word	0x200000d6
 8000700:	200000d4 	.word	0x200000d4

08000704 <auto_calibracion>:

// Auto-calibración
void auto_calibracion(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
    HAL_Delay(1000);
 8000708:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800070c:	f001 fe80 	bl	8002410 <HAL_Delay>

    // Medición 1: CERCA DE PARED DERECHA
    HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET); // Naranja
 8000710:	2201      	movs	r2, #1
 8000712:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000716:	4835      	ldr	r0, [pc, #212]	@ (80007ec <auto_calibracion+0xe8>)
 8000718:	f003 f99a 	bl	8003a50 <HAL_GPIO_WritePin>
    HAL_Delay(3000);                                         // Tiempo para posicionar cerca de pared derecha
 800071c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000720:	f001 fe76 	bl	8002410 <HAL_Delay>

    der_cerca = sensor_der_avg;
 8000724:	4b32      	ldr	r3, [pc, #200]	@ (80007f0 <auto_calibracion+0xec>)
 8000726:	881a      	ldrh	r2, [r3, #0]
 8000728:	4b32      	ldr	r3, [pc, #200]	@ (80007f4 <auto_calibracion+0xf0>)
 800072a:	801a      	strh	r2, [r3, #0]

    // Medición 2: CERCA DE PARED IZQUIERDA
    HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 800072c:	2200      	movs	r2, #0
 800072e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000732:	482e      	ldr	r0, [pc, #184]	@ (80007ec <auto_calibracion+0xe8>)
 8000734:	f003 f98c 	bl	8003a50 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET); // Rojo
 8000738:	2201      	movs	r2, #1
 800073a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800073e:	482b      	ldr	r0, [pc, #172]	@ (80007ec <auto_calibracion+0xe8>)
 8000740:	f003 f986 	bl	8003a50 <HAL_GPIO_WritePin>
    HAL_Delay(3000);                                         // Tiempo para posicionar cerca de pared izquierda
 8000744:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000748:	f001 fe62 	bl	8002410 <HAL_Delay>

    izq_cerca = sensor_izq_avg;
 800074c:	4b2a      	ldr	r3, [pc, #168]	@ (80007f8 <auto_calibracion+0xf4>)
 800074e:	881a      	ldrh	r2, [r3, #0]
 8000750:	4b2a      	ldr	r3, [pc, #168]	@ (80007fc <auto_calibracion+0xf8>)
 8000752:	801a      	strh	r2, [r3, #0]

    // Medición 3: CENTRADO EN PASILLO
    HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 8000754:	2200      	movs	r2, #0
 8000756:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800075a:	4824      	ldr	r0, [pc, #144]	@ (80007ec <auto_calibracion+0xe8>)
 800075c:	f003 f978 	bl	8003a50 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_SET); // Azul
 8000760:	2201      	movs	r2, #1
 8000762:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000766:	4821      	ldr	r0, [pc, #132]	@ (80007ec <auto_calibracion+0xe8>)
 8000768:	f003 f972 	bl	8003a50 <HAL_GPIO_WritePin>
    HAL_Delay(3000);                                         // Tiempo para centrar
 800076c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000770:	f001 fe4e 	bl	8002410 <HAL_Delay>

    izq_lejos = sensor_izq_avg;
 8000774:	4b20      	ldr	r3, [pc, #128]	@ (80007f8 <auto_calibracion+0xf4>)
 8000776:	881a      	ldrh	r2, [r3, #0]
 8000778:	4b21      	ldr	r3, [pc, #132]	@ (8000800 <auto_calibracion+0xfc>)
 800077a:	801a      	strh	r2, [r3, #0]
    der_lejos = sensor_der_avg;
 800077c:	4b1c      	ldr	r3, [pc, #112]	@ (80007f0 <auto_calibracion+0xec>)
 800077e:	881a      	ldrh	r2, [r3, #0]
 8000780:	4b20      	ldr	r3, [pc, #128]	@ (8000804 <auto_calibracion+0x100>)
 8000782:	801a      	strh	r2, [r3, #0]

    // Calcular valores medios
    izq_centrado = (izq_cerca + izq_lejos) / 2;
 8000784:	4b1d      	ldr	r3, [pc, #116]	@ (80007fc <auto_calibracion+0xf8>)
 8000786:	881b      	ldrh	r3, [r3, #0]
 8000788:	461a      	mov	r2, r3
 800078a:	4b1d      	ldr	r3, [pc, #116]	@ (8000800 <auto_calibracion+0xfc>)
 800078c:	881b      	ldrh	r3, [r3, #0]
 800078e:	4413      	add	r3, r2
 8000790:	0fda      	lsrs	r2, r3, #31
 8000792:	4413      	add	r3, r2
 8000794:	105b      	asrs	r3, r3, #1
 8000796:	b29a      	uxth	r2, r3
 8000798:	4b1b      	ldr	r3, [pc, #108]	@ (8000808 <auto_calibracion+0x104>)
 800079a:	801a      	strh	r2, [r3, #0]
    der_centrado = (der_cerca + der_lejos) / 2;
 800079c:	4b15      	ldr	r3, [pc, #84]	@ (80007f4 <auto_calibracion+0xf0>)
 800079e:	881b      	ldrh	r3, [r3, #0]
 80007a0:	461a      	mov	r2, r3
 80007a2:	4b18      	ldr	r3, [pc, #96]	@ (8000804 <auto_calibracion+0x100>)
 80007a4:	881b      	ldrh	r3, [r3, #0]
 80007a6:	4413      	add	r3, r2
 80007a8:	0fda      	lsrs	r2, r3, #31
 80007aa:	4413      	add	r3, r2
 80007ac:	105b      	asrs	r3, r3, #1
 80007ae:	b29a      	uxth	r2, r3
 80007b0:	4b16      	ldr	r3, [pc, #88]	@ (800080c <auto_calibracion+0x108>)
 80007b2:	801a      	strh	r2, [r3, #0]

    // Calibración completa
    HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 80007b4:	2200      	movs	r2, #0
 80007b6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007ba:	480c      	ldr	r0, [pc, #48]	@ (80007ec <auto_calibracion+0xe8>)
 80007bc:	f003 f948 	bl	8003a50 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET); // Verde
 80007c0:	2201      	movs	r2, #1
 80007c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007c6:	4809      	ldr	r0, [pc, #36]	@ (80007ec <auto_calibracion+0xe8>)
 80007c8:	f003 f942 	bl	8003a50 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 80007cc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007d0:	f001 fe1e 	bl	8002410 <HAL_Delay>
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80007d4:	2200      	movs	r2, #0
 80007d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007da:	4804      	ldr	r0, [pc, #16]	@ (80007ec <auto_calibracion+0xe8>)
 80007dc:	f003 f938 	bl	8003a50 <HAL_GPIO_WritePin>

    calibrado = true;
 80007e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000810 <auto_calibracion+0x10c>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	701a      	strb	r2, [r3, #0]
}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40020c00 	.word	0x40020c00
 80007f0:	200000d6 	.word	0x200000d6
 80007f4:	20000006 	.word	0x20000006
 80007f8:	200000d4 	.word	0x200000d4
 80007fc:	20000000 	.word	0x20000000
 8000800:	20000002 	.word	0x20000002
 8000804:	20000008 	.word	0x20000008
 8000808:	20000004 	.word	0x20000004
 800080c:	2000000a 	.word	0x2000000a
 8000810:	200000d8 	.word	0x200000d8

08000814 <controlar_linea_recta>:

// Control de línea recta
void controlar_linea_recta(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
    if (!calibrado)
 800081a:	4b29      	ldr	r3, [pc, #164]	@ (80008c0 <controlar_linea_recta+0xac>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	f083 0301 	eor.w	r3, r3, #1
 8000822:	b2db      	uxtb	r3, r3
 8000824:	2b00      	cmp	r3, #0
 8000826:	d140      	bne.n	80008aa <controlar_linea_recta+0x96>
        return;

    // Verificar flags AL INICIO
    if (flag_linea_detectada || flag_muro_detectado)
 8000828:	4b26      	ldr	r3, [pc, #152]	@ (80008c4 <controlar_linea_recta+0xb0>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	b2db      	uxtb	r3, r3
 800082e:	2b00      	cmp	r3, #0
 8000830:	d13d      	bne.n	80008ae <controlar_linea_recta+0x9a>
 8000832:	4b25      	ldr	r3, [pc, #148]	@ (80008c8 <controlar_linea_recta+0xb4>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	b2db      	uxtb	r3, r3
 8000838:	2b00      	cmp	r3, #0
 800083a:	d138      	bne.n	80008ae <controlar_linea_recta+0x9a>
        return;

    // Determinar posición relativa
    bool muy_cerca_izq = (sensor_izq_avg < izq_cerca + 200);
 800083c:	4b23      	ldr	r3, [pc, #140]	@ (80008cc <controlar_linea_recta+0xb8>)
 800083e:	881b      	ldrh	r3, [r3, #0]
 8000840:	33c7      	adds	r3, #199	@ 0xc7
 8000842:	4a23      	ldr	r2, [pc, #140]	@ (80008d0 <controlar_linea_recta+0xbc>)
 8000844:	8812      	ldrh	r2, [r2, #0]
 8000846:	4293      	cmp	r3, r2
 8000848:	bfac      	ite	ge
 800084a:	2301      	movge	r3, #1
 800084c:	2300      	movlt	r3, #0
 800084e:	71fb      	strb	r3, [r7, #7]
    bool muy_cerca_der = (sensor_der_avg < der_cerca + 200);
 8000850:	4b20      	ldr	r3, [pc, #128]	@ (80008d4 <controlar_linea_recta+0xc0>)
 8000852:	881b      	ldrh	r3, [r3, #0]
 8000854:	33c7      	adds	r3, #199	@ 0xc7
 8000856:	4a20      	ldr	r2, [pc, #128]	@ (80008d8 <controlar_linea_recta+0xc4>)
 8000858:	8812      	ldrh	r2, [r2, #0]
 800085a:	4293      	cmp	r3, r2
 800085c:	bfac      	ite	ge
 800085e:	2301      	movge	r3, #1
 8000860:	2300      	movlt	r3, #0
 8000862:	71bb      	strb	r3, [r7, #6]

    if (muy_cerca_izq)
 8000864:	79fb      	ldrb	r3, [r7, #7]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d00c      	beq.n	8000884 <controlar_linea_recta+0x70>
    {
        // Verificar flags durante ejecución
        if (flag_linea_detectada || flag_muro_detectado)
 800086a:	4b16      	ldr	r3, [pc, #88]	@ (80008c4 <controlar_linea_recta+0xb0>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	b2db      	uxtb	r3, r3
 8000870:	2b00      	cmp	r3, #0
 8000872:	d11e      	bne.n	80008b2 <controlar_linea_recta+0x9e>
 8000874:	4b14      	ldr	r3, [pc, #80]	@ (80008c8 <controlar_linea_recta+0xb4>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	b2db      	uxtb	r3, r3
 800087a:	2b00      	cmp	r3, #0
 800087c:	d119      	bne.n	80008b2 <controlar_linea_recta+0x9e>
        {
            return;
        }
        correccion_derecha(); // Alejarse de pared izquierda
 800087e:	f000 f9d5 	bl	8000c2c <correccion_derecha>
 8000882:	e019      	b.n	80008b8 <controlar_linea_recta+0xa4>
    }
    else if (muy_cerca_der)
 8000884:	79bb      	ldrb	r3, [r7, #6]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d00c      	beq.n	80008a4 <controlar_linea_recta+0x90>
    {
        // Verificar flags durante ejecución
        if (flag_linea_detectada || flag_muro_detectado)
 800088a:	4b0e      	ldr	r3, [pc, #56]	@ (80008c4 <controlar_linea_recta+0xb0>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	b2db      	uxtb	r3, r3
 8000890:	2b00      	cmp	r3, #0
 8000892:	d110      	bne.n	80008b6 <controlar_linea_recta+0xa2>
 8000894:	4b0c      	ldr	r3, [pc, #48]	@ (80008c8 <controlar_linea_recta+0xb4>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	b2db      	uxtb	r3, r3
 800089a:	2b00      	cmp	r3, #0
 800089c:	d10b      	bne.n	80008b6 <controlar_linea_recta+0xa2>
        {
            return;
        }
        correccion_izquierda(); // Alejarse de pared derecha
 800089e:	f000 f997 	bl	8000bd0 <correccion_izquierda>
 80008a2:	e009      	b.n	80008b8 <controlar_linea_recta+0xa4>
    }
    else
    {
        avanza(); // Ir recto si está centrado
 80008a4:	f000 f8c6 	bl	8000a34 <avanza>
 80008a8:	e006      	b.n	80008b8 <controlar_linea_recta+0xa4>
        return;
 80008aa:	bf00      	nop
 80008ac:	e004      	b.n	80008b8 <controlar_linea_recta+0xa4>
        return;
 80008ae:	bf00      	nop
 80008b0:	e002      	b.n	80008b8 <controlar_linea_recta+0xa4>
            return;
 80008b2:	bf00      	nop
 80008b4:	e000      	b.n	80008b8 <controlar_linea_recta+0xa4>
            return;
 80008b6:	bf00      	nop
    }
}
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	200000d8 	.word	0x200000d8
 80008c4:	200004c4 	.word	0x200004c4
 80008c8:	200004c5 	.word	0x200004c5
 80008cc:	20000000 	.word	0x20000000
 80008d0:	200000d4 	.word	0x200000d4
 80008d4:	20000006 	.word	0x20000006
 80008d8:	200000d6 	.word	0x200000d6

080008dc <activar_modo_sprint>:
uint16_t velocidad_actual_der = VELOCIDAD_AVANCE_DER;
uint16_t velocidad_giro_actual_izq = VELOCIDAD_GIRO_IZQ;
uint16_t velocidad_giro_actual_der = VELOCIDAD_GIRO_DER;

void activar_modo_sprint(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
    velocidad_actual_izq = VELOCIDAD_SPRINT_IZQ;
 80008e0:	4b06      	ldr	r3, [pc, #24]	@ (80008fc <activar_modo_sprint+0x20>)
 80008e2:	f44f 7261 	mov.w	r2, #900	@ 0x384
 80008e6:	801a      	strh	r2, [r3, #0]
    velocidad_actual_der = VELOCIDAD_SPRINT_DER;
 80008e8:	4b05      	ldr	r3, [pc, #20]	@ (8000900 <activar_modo_sprint+0x24>)
 80008ea:	f44f 7261 	mov.w	r2, #900	@ 0x384
 80008ee:	801a      	strh	r2, [r3, #0]
}
 80008f0:	bf00      	nop
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	2000000c 	.word	0x2000000c
 8000900:	2000000e 	.word	0x2000000e

08000904 <control_motor_init>:

/**
 * @brief Inicializa el control de motores
 */
void control_motor_init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
    // Iniciar PWM en ambos canales
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // Motor izquierdo (PC8)
 8000908:	2108      	movs	r1, #8
 800090a:	4805      	ldr	r0, [pc, #20]	@ (8000920 <control_motor_init+0x1c>)
 800090c:	f006 f914 	bl	8006b38 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // Motor derecho (PC9)
 8000910:	210c      	movs	r1, #12
 8000912:	4803      	ldr	r0, [pc, #12]	@ (8000920 <control_motor_init+0x1c>)
 8000914:	f006 f910 	bl	8006b38 <HAL_TIM_PWM_Start>

    // comienza yendo para adelante
    avanza();
 8000918:	f000 f88c 	bl	8000a34 <avanza>
}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}
 8000920:	200002a0 	.word	0x200002a0

08000924 <set_motor_izq>:
 * @brief Configura motor izquierdo
 * @param estado: MOTOR_AVANCE, MOTOR_RETROCESO o MOTOR_FRENADO
 * @param pwm: Valor PWM (0-1000)
 */
void set_motor_izq(motor_estado_t estado, uint16_t pwm)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	460a      	mov	r2, r1
 800092e:	71fb      	strb	r3, [r7, #7]
 8000930:	4613      	mov	r3, r2
 8000932:	80bb      	strh	r3, [r7, #4]
    switch (estado)
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d002      	beq.n	8000940 <set_motor_izq+0x1c>
 800093a:	2b01      	cmp	r3, #1
 800093c:	d00d      	beq.n	800095a <set_motor_izq+0x36>
 800093e:	e019      	b.n	8000974 <set_motor_izq+0x50>
    {
    case MOTOR_AVANCE:
        HAL_GPIO_WritePin(MI0_GPIO_Port, MI0_Pin, GPIO_PIN_SET);   // MI0 = 1
 8000940:	2201      	movs	r2, #1
 8000942:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000946:	4817      	ldr	r0, [pc, #92]	@ (80009a4 <set_motor_izq+0x80>)
 8000948:	f003 f882 	bl	8003a50 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MI1_GPIO_Port, MI1_Pin, GPIO_PIN_RESET); // MI1 = 0
 800094c:	2200      	movs	r2, #0
 800094e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000952:	4814      	ldr	r0, [pc, #80]	@ (80009a4 <set_motor_izq+0x80>)
 8000954:	f003 f87c 	bl	8003a50 <HAL_GPIO_WritePin>
        break;
 8000958:	e01b      	b.n	8000992 <set_motor_izq+0x6e>

    case MOTOR_RETROCESO:
        HAL_GPIO_WritePin(MI0_GPIO_Port, MI0_Pin, GPIO_PIN_RESET); // MI0 = 0
 800095a:	2200      	movs	r2, #0
 800095c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000960:	4810      	ldr	r0, [pc, #64]	@ (80009a4 <set_motor_izq+0x80>)
 8000962:	f003 f875 	bl	8003a50 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MI1_GPIO_Port, MI1_Pin, GPIO_PIN_SET);   // MI1 = 1
 8000966:	2201      	movs	r2, #1
 8000968:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800096c:	480d      	ldr	r0, [pc, #52]	@ (80009a4 <set_motor_izq+0x80>)
 800096e:	f003 f86f 	bl	8003a50 <HAL_GPIO_WritePin>
        break;
 8000972:	e00e      	b.n	8000992 <set_motor_izq+0x6e>

    case MOTOR_FRENADO:
    default:
        HAL_GPIO_WritePin(MI0_GPIO_Port, MI0_Pin, GPIO_PIN_RESET); // MI0 = 0
 8000974:	2200      	movs	r2, #0
 8000976:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800097a:	480a      	ldr	r0, [pc, #40]	@ (80009a4 <set_motor_izq+0x80>)
 800097c:	f003 f868 	bl	8003a50 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MI1_GPIO_Port, MI1_Pin, GPIO_PIN_RESET); // MI1 = 0
 8000980:	2200      	movs	r2, #0
 8000982:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000986:	4807      	ldr	r0, [pc, #28]	@ (80009a4 <set_motor_izq+0x80>)
 8000988:	f003 f862 	bl	8003a50 <HAL_GPIO_WritePin>
        pwm = 0;                                                   // Forzar PWM a 0 en frenado
 800098c:	2300      	movs	r3, #0
 800098e:	80bb      	strh	r3, [r7, #4]
        break;
 8000990:	bf00      	nop
    }

    // Establecer PWM, aca le definimos la velocidad
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pwm);
 8000992:	4b05      	ldr	r3, [pc, #20]	@ (80009a8 <set_motor_izq+0x84>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	88ba      	ldrh	r2, [r7, #4]
 8000998:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40020400 	.word	0x40020400
 80009a8:	200002a0 	.word	0x200002a0

080009ac <set_motor_der>:
 * @brief Configura motor derecho
 * @param estado: MOTOR_AVANCE, MOTOR_RETROCESO o MOTOR_FRENADO
 * @param pwm: Valor PWM (0-1000)
 */
void set_motor_der(motor_estado_t estado, uint16_t pwm)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	460a      	mov	r2, r1
 80009b6:	71fb      	strb	r3, [r7, #7]
 80009b8:	4613      	mov	r3, r2
 80009ba:	80bb      	strh	r3, [r7, #4]
    switch (estado)
 80009bc:	79fb      	ldrb	r3, [r7, #7]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d002      	beq.n	80009c8 <set_motor_der+0x1c>
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d00d      	beq.n	80009e2 <set_motor_der+0x36>
 80009c6:	e019      	b.n	80009fc <set_motor_der+0x50>
    {
    case MOTOR_AVANCE:
        HAL_GPIO_WritePin(MD0_GPIO_Port, MD0_Pin, GPIO_PIN_SET);   // MD0 = 1
 80009c8:	2201      	movs	r2, #1
 80009ca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009ce:	4817      	ldr	r0, [pc, #92]	@ (8000a2c <set_motor_der+0x80>)
 80009d0:	f003 f83e 	bl	8003a50 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MD1_GPIO_Port, MD1_Pin, GPIO_PIN_RESET); // MD1 = 0
 80009d4:	2200      	movs	r2, #0
 80009d6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009da:	4814      	ldr	r0, [pc, #80]	@ (8000a2c <set_motor_der+0x80>)
 80009dc:	f003 f838 	bl	8003a50 <HAL_GPIO_WritePin>
        break;
 80009e0:	e01b      	b.n	8000a1a <set_motor_der+0x6e>

    case MOTOR_RETROCESO:
        HAL_GPIO_WritePin(MD0_GPIO_Port, MD0_Pin, GPIO_PIN_RESET); // MD0 = 0
 80009e2:	2200      	movs	r2, #0
 80009e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009e8:	4810      	ldr	r0, [pc, #64]	@ (8000a2c <set_motor_der+0x80>)
 80009ea:	f003 f831 	bl	8003a50 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MD1_GPIO_Port, MD1_Pin, GPIO_PIN_SET);   // MD1 = 1
 80009ee:	2201      	movs	r2, #1
 80009f0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009f4:	480d      	ldr	r0, [pc, #52]	@ (8000a2c <set_motor_der+0x80>)
 80009f6:	f003 f82b 	bl	8003a50 <HAL_GPIO_WritePin>
        break;
 80009fa:	e00e      	b.n	8000a1a <set_motor_der+0x6e>

    case MOTOR_FRENADO:
    default:
        HAL_GPIO_WritePin(MD0_GPIO_Port, MD0_Pin, GPIO_PIN_RESET); // MD0 = 0
 80009fc:	2200      	movs	r2, #0
 80009fe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a02:	480a      	ldr	r0, [pc, #40]	@ (8000a2c <set_motor_der+0x80>)
 8000a04:	f003 f824 	bl	8003a50 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MD1_GPIO_Port, MD1_Pin, GPIO_PIN_RESET); // MD1 = 0
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a0e:	4807      	ldr	r0, [pc, #28]	@ (8000a2c <set_motor_der+0x80>)
 8000a10:	f003 f81e 	bl	8003a50 <HAL_GPIO_WritePin>
        pwm = 0;                                                   // Forzar PWM a 0 en frenado
 8000a14:	2300      	movs	r3, #0
 8000a16:	80bb      	strh	r3, [r7, #4]
        break;
 8000a18:	bf00      	nop
    }

    // Establecer VELOCIDAD
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, pwm);
 8000a1a:	4b05      	ldr	r3, [pc, #20]	@ (8000a30 <set_motor_der+0x84>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	88ba      	ldrh	r2, [r7, #4]
 8000a20:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40020400 	.word	0x40020400
 8000a30:	200002a0 	.word	0x200002a0

08000a34 <avanza>:

/**
 * @brief Avanza con ambos motores al 70% de velocidad
 */
void avanza(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
    set_motor_izq(MOTOR_AVANCE, velocidad_actual_izq);
 8000a38:	4b06      	ldr	r3, [pc, #24]	@ (8000a54 <avanza+0x20>)
 8000a3a:	881b      	ldrh	r3, [r3, #0]
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	2000      	movs	r0, #0
 8000a40:	f7ff ff70 	bl	8000924 <set_motor_izq>
    set_motor_der(MOTOR_AVANCE, velocidad_actual_der);
 8000a44:	4b04      	ldr	r3, [pc, #16]	@ (8000a58 <avanza+0x24>)
 8000a46:	881b      	ldrh	r3, [r3, #0]
 8000a48:	4619      	mov	r1, r3
 8000a4a:	2000      	movs	r0, #0
 8000a4c:	f7ff ffae 	bl	80009ac <set_motor_der>
}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	2000000c 	.word	0x2000000c
 8000a58:	2000000e 	.word	0x2000000e

08000a5c <gira90izq>:
/**
 * @brief Gira 90 grados a la izquierda y luego continúa avanzando
 * Motor izq retrocede, motor der avanza al 100%
 */
brujula gira90izq(brujula sentido)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	71fb      	strb	r3, [r7, #7]
    set_motor_izq(MOTOR_RETROCESO, velocidad_giro_actual_izq);
 8000a66:	4b18      	ldr	r3, [pc, #96]	@ (8000ac8 <gira90izq+0x6c>)
 8000a68:	881b      	ldrh	r3, [r3, #0]
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	2001      	movs	r0, #1
 8000a6e:	f7ff ff59 	bl	8000924 <set_motor_izq>
    set_motor_der(MOTOR_AVANCE, velocidad_giro_actual_der);
 8000a72:	4b16      	ldr	r3, [pc, #88]	@ (8000acc <gira90izq+0x70>)
 8000a74:	881b      	ldrh	r3, [r3, #0]
 8000a76:	4619      	mov	r1, r3
 8000a78:	2000      	movs	r0, #0
 8000a7a:	f7ff ff97 	bl	80009ac <set_motor_der>

    HAL_Delay(TIEMPO_GIRO_90_IZQ);
 8000a7e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a82:	f001 fcc5 	bl	8002410 <HAL_Delay>
    switch (sentido)
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	2b03      	cmp	r3, #3
 8000a8a:	d817      	bhi.n	8000abc <gira90izq+0x60>
 8000a8c:	a201      	add	r2, pc, #4	@ (adr r2, 8000a94 <gira90izq+0x38>)
 8000a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a92:	bf00      	nop
 8000a94:	08000aa5 	.word	0x08000aa5
 8000a98:	08000aab 	.word	0x08000aab
 8000a9c:	08000ab1 	.word	0x08000ab1
 8000aa0:	08000ab7 	.word	0x08000ab7
    {
    case norte:
        sentido = oeste;
 8000aa4:	2303      	movs	r3, #3
 8000aa6:	71fb      	strb	r3, [r7, #7]
        break;
 8000aa8:	e008      	b.n	8000abc <gira90izq+0x60>

    case este:
        sentido = norte;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	71fb      	strb	r3, [r7, #7]
        break;
 8000aae:	e005      	b.n	8000abc <gira90izq+0x60>

    case sur:
        sentido = este;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	71fb      	strb	r3, [r7, #7]
        break;
 8000ab4:	e002      	b.n	8000abc <gira90izq+0x60>

    case oeste:
        sentido = sur;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	71fb      	strb	r3, [r7, #7]
        break;
 8000aba:	bf00      	nop
    // Después del giro, continuar avanzando
    //avanza();

    // termina de girar y verifica que no halla un muro adelante

    return sentido;
 8000abc:	79fb      	ldrb	r3, [r7, #7]
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20000010 	.word	0x20000010
 8000acc:	20000012 	.word	0x20000012

08000ad0 <gira90der>:
/**
 * @brief Gira 90 grados a la derecha y luego continúa avanzando
 * Motor der retrocede, motor izq avanza al 100%
 */
brujula gira90der(brujula sentido)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	71fb      	strb	r3, [r7, #7]
    set_motor_izq(MOTOR_AVANCE, velocidad_giro_actual_izq);
 8000ada:	4b18      	ldr	r3, [pc, #96]	@ (8000b3c <gira90der+0x6c>)
 8000adc:	881b      	ldrh	r3, [r3, #0]
 8000ade:	4619      	mov	r1, r3
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	f7ff ff1f 	bl	8000924 <set_motor_izq>
    set_motor_der(MOTOR_RETROCESO, velocidad_giro_actual_der);
 8000ae6:	4b16      	ldr	r3, [pc, #88]	@ (8000b40 <gira90der+0x70>)
 8000ae8:	881b      	ldrh	r3, [r3, #0]
 8000aea:	4619      	mov	r1, r3
 8000aec:	2001      	movs	r0, #1
 8000aee:	f7ff ff5d 	bl	80009ac <set_motor_der>

    HAL_Delay(TIEMPO_GIRO_90_DER);
 8000af2:	f240 2026 	movw	r0, #550	@ 0x226
 8000af6:	f001 fc8b 	bl	8002410 <HAL_Delay>
    switch (sentido)
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	2b03      	cmp	r3, #3
 8000afe:	d817      	bhi.n	8000b30 <gira90der+0x60>
 8000b00:	a201      	add	r2, pc, #4	@ (adr r2, 8000b08 <gira90der+0x38>)
 8000b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b06:	bf00      	nop
 8000b08:	08000b19 	.word	0x08000b19
 8000b0c:	08000b1f 	.word	0x08000b1f
 8000b10:	08000b25 	.word	0x08000b25
 8000b14:	08000b2b 	.word	0x08000b2b
    {
    case norte:
        sentido = este;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	71fb      	strb	r3, [r7, #7]
        break;
 8000b1c:	e008      	b.n	8000b30 <gira90der+0x60>

    case este:
        sentido = sur;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	71fb      	strb	r3, [r7, #7]
        break;
 8000b22:	e005      	b.n	8000b30 <gira90der+0x60>

    case sur:
        sentido = oeste;
 8000b24:	2303      	movs	r3, #3
 8000b26:	71fb      	strb	r3, [r7, #7]
        break;
 8000b28:	e002      	b.n	8000b30 <gira90der+0x60>

    case oeste:
        sentido = norte;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	71fb      	strb	r3, [r7, #7]
        break;
 8000b2e:	bf00      	nop
    }

    // Después del giro, continuar avanzando
    //avanza();
    
    return sentido;
 8000b30:	79fb      	ldrb	r3, [r7, #7]
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000010 	.word	0x20000010
 8000b40:	20000012 	.word	0x20000012

08000b44 <gira180>:
/**
 * @brief Gira 180 grados y luego continúa avanzando
 * Motor der retrocede, motor izq avanza al 100%
 */
brujula gira180(brujula sentido)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	71fb      	strb	r3, [r7, #7]
    set_motor_izq(MOTOR_AVANCE, velocidad_giro_actual_izq);
 8000b4e:	4b18      	ldr	r3, [pc, #96]	@ (8000bb0 <gira180+0x6c>)
 8000b50:	881b      	ldrh	r3, [r3, #0]
 8000b52:	4619      	mov	r1, r3
 8000b54:	2000      	movs	r0, #0
 8000b56:	f7ff fee5 	bl	8000924 <set_motor_izq>
    set_motor_der(MOTOR_RETROCESO, velocidad_giro_actual_der);
 8000b5a:	4b16      	ldr	r3, [pc, #88]	@ (8000bb4 <gira180+0x70>)
 8000b5c:	881b      	ldrh	r3, [r3, #0]
 8000b5e:	4619      	mov	r1, r3
 8000b60:	2001      	movs	r0, #1
 8000b62:	f7ff ff23 	bl	80009ac <set_motor_der>

    HAL_Delay(TIEMPO_GIRO_180);
 8000b66:	f240 404c 	movw	r0, #1100	@ 0x44c
 8000b6a:	f001 fc51 	bl	8002410 <HAL_Delay>
    switch (sentido)
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	2b03      	cmp	r3, #3
 8000b72:	d817      	bhi.n	8000ba4 <gira180+0x60>
 8000b74:	a201      	add	r2, pc, #4	@ (adr r2, 8000b7c <gira180+0x38>)
 8000b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b7a:	bf00      	nop
 8000b7c:	08000b8d 	.word	0x08000b8d
 8000b80:	08000b93 	.word	0x08000b93
 8000b84:	08000b99 	.word	0x08000b99
 8000b88:	08000b9f 	.word	0x08000b9f
    {
    case norte:
        sentido = sur;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	71fb      	strb	r3, [r7, #7]
        break;
 8000b90:	e008      	b.n	8000ba4 <gira180+0x60>

    case este:
        sentido = oeste;
 8000b92:	2303      	movs	r3, #3
 8000b94:	71fb      	strb	r3, [r7, #7]
        break;
 8000b96:	e005      	b.n	8000ba4 <gira180+0x60>

    case sur:
        sentido = norte;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	71fb      	strb	r3, [r7, #7]
        break;
 8000b9c:	e002      	b.n	8000ba4 <gira180+0x60>

    case oeste:
        sentido = este;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	71fb      	strb	r3, [r7, #7]
        break;
 8000ba2:	bf00      	nop
    }

    // Después del giro, continuar avanzando
    //avanza();
    return sentido;
 8000ba4:	79fb      	ldrb	r3, [r7, #7]
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	20000010 	.word	0x20000010
 8000bb4:	20000012 	.word	0x20000012

08000bb8 <termino>:

/**
 * @brief Detiene ambos motores (cuando ganemos)
 */
void termino(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
    set_motor_izq(MOTOR_FRENADO, 0);
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	2002      	movs	r0, #2
 8000bc0:	f7ff feb0 	bl	8000924 <set_motor_izq>
    set_motor_der(MOTOR_FRENADO, 0);
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	2002      	movs	r0, #2
 8000bc8:	f7ff fef0 	bl	80009ac <set_motor_der>
}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <correccion_izquierda>:

void correccion_izquierda(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0

    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 100); // Motor izq más lento
 8000bd6:	4b12      	ldr	r3, [pc, #72]	@ (8000c20 <correccion_izquierda+0x50>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	2264      	movs	r2, #100	@ 0x64
 8000bdc:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 700); // Motor der normal
 8000bde:	4b10      	ldr	r3, [pc, #64]	@ (8000c20 <correccion_izquierda+0x50>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 8000be6:	641a      	str	r2, [r3, #64]	@ 0x40
     for (int i = 0; i < 7; i++)                       // 10 ciclos de 10 ms = 100 ms de corrección
 8000be8:	2300      	movs	r3, #0
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	e00f      	b.n	8000c0e <correccion_izquierda+0x3e>
    {
        if (flag_linea_detectada || flag_muro_detectado)
 8000bee:	4b0d      	ldr	r3, [pc, #52]	@ (8000c24 <correccion_izquierda+0x54>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d10e      	bne.n	8000c16 <correccion_izquierda+0x46>
 8000bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8000c28 <correccion_izquierda+0x58>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d109      	bne.n	8000c16 <correccion_izquierda+0x46>
            return; // Salir si hay algo urgente

        HAL_Delay(10);
 8000c02:	200a      	movs	r0, #10
 8000c04:	f001 fc04 	bl	8002410 <HAL_Delay>
     for (int i = 0; i < 7; i++)                       // 10 ciclos de 10 ms = 100 ms de corrección
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	607b      	str	r3, [r7, #4]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2b06      	cmp	r3, #6
 8000c12:	ddec      	ble.n	8000bee <correccion_izquierda+0x1e>
 8000c14:	e000      	b.n	8000c18 <correccion_izquierda+0x48>
            return; // Salir si hay algo urgente
 8000c16:	bf00      	nop
    } 
}
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	200002a0 	.word	0x200002a0
 8000c24:	200004c4 	.word	0x200004c4
 8000c28:	200004c5 	.word	0x200004c5

08000c2c <correccion_derecha>:

void correccion_derecha(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 700); // Motor izq normal
 8000c32:	4b12      	ldr	r3, [pc, #72]	@ (8000c7c <correccion_derecha+0x50>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 8000c3a:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 100); // Motor der más lento
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c7c <correccion_derecha+0x50>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2264      	movs	r2, #100	@ 0x64
 8000c42:	641a      	str	r2, [r3, #64]	@ 0x40
     for (int i = 0; i < 7; i++)                       // 10 ciclos de 10 ms = 100 ms de corrección
 8000c44:	2300      	movs	r3, #0
 8000c46:	607b      	str	r3, [r7, #4]
 8000c48:	e00f      	b.n	8000c6a <correccion_derecha+0x3e>
    {
        if (flag_linea_detectada || flag_muro_detectado)
 8000c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c80 <correccion_derecha+0x54>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d10e      	bne.n	8000c72 <correccion_derecha+0x46>
 8000c54:	4b0b      	ldr	r3, [pc, #44]	@ (8000c84 <correccion_derecha+0x58>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d109      	bne.n	8000c72 <correccion_derecha+0x46>
            return; // Salir si hay algo urgente

        HAL_Delay(10);
 8000c5e:	200a      	movs	r0, #10
 8000c60:	f001 fbd6 	bl	8002410 <HAL_Delay>
     for (int i = 0; i < 7; i++)                       // 10 ciclos de 10 ms = 100 ms de corrección
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	3301      	adds	r3, #1
 8000c68:	607b      	str	r3, [r7, #4]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2b06      	cmp	r3, #6
 8000c6e:	ddec      	ble.n	8000c4a <correccion_derecha+0x1e>
 8000c70:	e000      	b.n	8000c74 <correccion_derecha+0x48>
            return; // Salir si hay algo urgente
 8000c72:	bf00      	nop
    } 
}
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	200002a0 	.word	0x200002a0
 8000c80:	200004c4 	.word	0x200004c4
 8000c84:	200004c5 	.word	0x200004c5

08000c88 <laberinto_get_peso>:
    // La meta tiene peso 0
    laberinto[POSICION_META_FILA - 1][POSICION_META_COLUMNA - 1].peso = 0;
}

uint8_t laberinto_get_peso(uint8_t fila, uint8_t columna)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	460a      	mov	r2, r1
 8000c92:	71fb      	strb	r3, [r7, #7]
 8000c94:	4613      	mov	r3, r2
 8000c96:	71bb      	strb	r3, [r7, #6]
    if (!laberinto_posicion_valida(fila, columna))
 8000c98:	79ba      	ldrb	r2, [r7, #6]
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	4611      	mov	r1, r2
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f000 f996 	bl	8000fd0 <laberinto_posicion_valida>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	f083 0301 	eor.w	r3, r3, #1
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <laberinto_get_peso+0x2c>
    {
        return PESO_MAXIMO;
 8000cb0:	23ff      	movs	r3, #255	@ 0xff
 8000cb2:	e00f      	b.n	8000cd4 <laberinto_get_peso+0x4c>
    }

    return laberinto[fila - 1][columna - 1].peso;
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	1e59      	subs	r1, r3, #1
 8000cb8:	79bb      	ldrb	r3, [r7, #6]
 8000cba:	3b01      	subs	r3, #1
 8000cbc:	4807      	ldr	r0, [pc, #28]	@ (8000cdc <laberinto_get_peso+0x54>)
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	00d2      	lsls	r2, r2, #3
 8000cc2:	1ad2      	subs	r2, r2, r3
 8000cc4:	460b      	mov	r3, r1
 8000cc6:	00db      	lsls	r3, r3, #3
 8000cc8:	1a5b      	subs	r3, r3, r1
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	4413      	add	r3, r2
 8000cce:	4403      	add	r3, r0
 8000cd0:	3302      	adds	r3, #2
 8000cd2:	781b      	ldrb	r3, [r3, #0]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	200000dc 	.word	0x200000dc

08000ce0 <laberinto_set_muro>:

void laberinto_set_muro(uint8_t fila, uint8_t columna, brujula direccion)
{
 8000ce0:	b590      	push	{r4, r7, lr}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	71fb      	strb	r3, [r7, #7]
 8000cea:	460b      	mov	r3, r1
 8000cec:	71bb      	strb	r3, [r7, #6]
 8000cee:	4613      	mov	r3, r2
 8000cf0:	717b      	strb	r3, [r7, #5]
    if (!laberinto_posicion_valida(fila, columna))
 8000cf2:	79ba      	ldrb	r2, [r7, #6]
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	4611      	mov	r1, r2
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f000 f969 	bl	8000fd0 <laberinto_posicion_valida>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	f083 0301 	eor.w	r3, r3, #1
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d146      	bne.n	8000d98 <laberinto_set_muro+0xb8>
    {
        return;
    }

    // Marcar muro en casilla actual
    laberinto[fila - 1][columna - 1].muros[direccion] = true;
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	1e59      	subs	r1, r3, #1
 8000d0e:	79bb      	ldrb	r3, [r7, #6]
 8000d10:	3b01      	subs	r3, #1
 8000d12:	7978      	ldrb	r0, [r7, #5]
 8000d14:	4c22      	ldr	r4, [pc, #136]	@ (8000da0 <laberinto_set_muro+0xc0>)
 8000d16:	461a      	mov	r2, r3
 8000d18:	00d2      	lsls	r2, r2, #3
 8000d1a:	1ad2      	subs	r2, r2, r3
 8000d1c:	460b      	mov	r3, r1
 8000d1e:	00db      	lsls	r3, r3, #3
 8000d20:	1a5b      	subs	r3, r3, r1
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	4413      	add	r3, r2
 8000d26:	4423      	add	r3, r4
 8000d28:	4403      	add	r3, r0
 8000d2a:	3303      	adds	r3, #3
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	701a      	strb	r2, [r3, #0]

    // Marcar muro en casilla adyacente (si existe)
    posicion_t pos_adyacente = laberinto_get_posicion_adyacente(
        (posicion_t){fila, columna}, direccion);
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	723b      	strb	r3, [r7, #8]
 8000d34:	79bb      	ldrb	r3, [r7, #6]
 8000d36:	727b      	strb	r3, [r7, #9]
    posicion_t pos_adyacente = laberinto_get_posicion_adyacente(
 8000d38:	797b      	ldrb	r3, [r7, #5]
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	68b8      	ldr	r0, [r7, #8]
 8000d3e:	f000 f90d 	bl	8000f5c <laberinto_get_posicion_adyacente>
 8000d42:	4603      	mov	r3, r0
 8000d44:	81bb      	strh	r3, [r7, #12]

    if (laberinto_posicion_valida(pos_adyacente.fila, pos_adyacente.columna))
 8000d46:	7b3b      	ldrb	r3, [r7, #12]
 8000d48:	7b7a      	ldrb	r2, [r7, #13]
 8000d4a:	4611      	mov	r1, r2
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f000 f93f 	bl	8000fd0 <laberinto_posicion_valida>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d01c      	beq.n	8000d92 <laberinto_set_muro+0xb2>
    {
        // Dirección opuesta
        brujula direccion_opuesta = (direccion + 2) % 4;
 8000d58:	797b      	ldrb	r3, [r7, #5]
 8000d5a:	3302      	adds	r3, #2
 8000d5c:	425a      	negs	r2, r3
 8000d5e:	f003 0303 	and.w	r3, r3, #3
 8000d62:	f002 0203 	and.w	r2, r2, #3
 8000d66:	bf58      	it	pl
 8000d68:	4253      	negpl	r3, r2
 8000d6a:	73fb      	strb	r3, [r7, #15]
        laberinto[pos_adyacente.fila - 1][pos_adyacente.columna - 1].muros[direccion_opuesta] = true;
 8000d6c:	7b3b      	ldrb	r3, [r7, #12]
 8000d6e:	1e59      	subs	r1, r3, #1
 8000d70:	7b7b      	ldrb	r3, [r7, #13]
 8000d72:	3b01      	subs	r3, #1
 8000d74:	7bf8      	ldrb	r0, [r7, #15]
 8000d76:	4c0a      	ldr	r4, [pc, #40]	@ (8000da0 <laberinto_set_muro+0xc0>)
 8000d78:	461a      	mov	r2, r3
 8000d7a:	00d2      	lsls	r2, r2, #3
 8000d7c:	1ad2      	subs	r2, r2, r3
 8000d7e:	460b      	mov	r3, r1
 8000d80:	00db      	lsls	r3, r3, #3
 8000d82:	1a5b      	subs	r3, r3, r1
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	4413      	add	r3, r2
 8000d88:	4423      	add	r3, r4
 8000d8a:	4403      	add	r3, r0
 8000d8c:	3303      	adds	r3, #3
 8000d8e:	2201      	movs	r2, #1
 8000d90:	701a      	strb	r2, [r3, #0]
    }

    // Recalcular pesos después de agregar muro
    laberinto_recalcular_pesos();
 8000d92:	f000 f807 	bl	8000da4 <laberinto_recalcular_pesos>
 8000d96:	e000      	b.n	8000d9a <laberinto_set_muro+0xba>
        return;
 8000d98:	bf00      	nop
}
 8000d9a:	3714      	adds	r7, #20
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd90      	pop	{r4, r7, pc}
 8000da0:	200000dc 	.word	0x200000dc

08000da4 <laberinto_recalcular_pesos>:

void laberinto_recalcular_pesos(void)
{
 8000da4:	b590      	push	{r4, r7, lr}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
    bool cambio_detectado = true;
 8000daa:	2301      	movs	r3, #1
 8000dac:	73fb      	strb	r3, [r7, #15]
    uint8_t iteraciones = 0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	73bb      	strb	r3, [r7, #14]
    const uint8_t MAX_ITERACIONES = 20; // Evitar bucles infinitos Protección contra boludos
 8000db2:	2314      	movs	r3, #20
 8000db4:	727b      	strb	r3, [r7, #9]

    // Algoritmo Flood Fill iterativo
    while (cambio_detectado && iteraciones < MAX_ITERACIONES)
 8000db6:	e092      	b.n	8000ede <laberinto_recalcular_pesos+0x13a>
    {
        cambio_detectado = false;
 8000db8:	2300      	movs	r3, #0
 8000dba:	73fb      	strb	r3, [r7, #15]
        iteraciones++;
 8000dbc:	7bbb      	ldrb	r3, [r7, #14]
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	73bb      	strb	r3, [r7, #14]

        for (uint8_t fila = 1; fila <= TAMAÑO_LABERINTO; fila++) // se propaga desde (1,1) hacia afuera
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	737b      	strb	r3, [r7, #13]
 8000dc6:	e086      	b.n	8000ed6 <laberinto_recalcular_pesos+0x132>
        {
            for (uint8_t columna = 1; columna <= TAMAÑO_LABERINTO; columna++)
 8000dc8:	2301      	movs	r3, #1
 8000dca:	733b      	strb	r3, [r7, #12]
 8000dcc:	e07c      	b.n	8000ec8 <laberinto_recalcular_pesos+0x124>
            {

                // No recalcular la meta
                if (fila == POSICION_META_FILA && columna == POSICION_META_COLUMNA)
 8000dce:	7b7b      	ldrb	r3, [r7, #13]
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d102      	bne.n	8000dda <laberinto_recalcular_pesos+0x36>
 8000dd4:	7b3b      	ldrb	r3, [r7, #12]
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d072      	beq.n	8000ec0 <laberinto_recalcular_pesos+0x11c>
                {
                    continue;
                }

                uint8_t peso_minimo = PESO_MAXIMO;
 8000dda:	23ff      	movs	r3, #255	@ 0xff
 8000ddc:	72fb      	strb	r3, [r7, #11]

                // Verificar todas las direcciones adyacentes
                for (brujula dir = norte; dir <= oeste; dir++)
 8000dde:	2300      	movs	r3, #0
 8000de0:	72bb      	strb	r3, [r7, #10]
 8000de2:	e03a      	b.n	8000e5a <laberinto_recalcular_pesos+0xb6>
                {

                    // Saltar si hay muro en esta dirección
                    if (laberinto[fila - 1][columna - 1].muros[dir])
 8000de4:	7b7b      	ldrb	r3, [r7, #13]
 8000de6:	1e59      	subs	r1, r3, #1
 8000de8:	7b3b      	ldrb	r3, [r7, #12]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	7ab8      	ldrb	r0, [r7, #10]
 8000dee:	4c42      	ldr	r4, [pc, #264]	@ (8000ef8 <laberinto_recalcular_pesos+0x154>)
 8000df0:	461a      	mov	r2, r3
 8000df2:	00d2      	lsls	r2, r2, #3
 8000df4:	1ad2      	subs	r2, r2, r3
 8000df6:	460b      	mov	r3, r1
 8000df8:	00db      	lsls	r3, r3, #3
 8000dfa:	1a5b      	subs	r3, r3, r1
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	4413      	add	r3, r2
 8000e00:	4423      	add	r3, r4
 8000e02:	4403      	add	r3, r0
 8000e04:	3303      	adds	r3, #3
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d122      	bne.n	8000e52 <laberinto_recalcular_pesos+0xae>
                    {
                        continue;
                    }

                    posicion_t pos_adyacente = laberinto_get_posicion_adyacente(
                        (posicion_t){fila, columna}, dir);
 8000e0c:	7b7b      	ldrb	r3, [r7, #13]
 8000e0e:	703b      	strb	r3, [r7, #0]
 8000e10:	7b3b      	ldrb	r3, [r7, #12]
 8000e12:	707b      	strb	r3, [r7, #1]
                    posicion_t pos_adyacente = laberinto_get_posicion_adyacente(
 8000e14:	7abb      	ldrb	r3, [r7, #10]
 8000e16:	4619      	mov	r1, r3
 8000e18:	6838      	ldr	r0, [r7, #0]
 8000e1a:	f000 f89f 	bl	8000f5c <laberinto_get_posicion_adyacente>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	80bb      	strh	r3, [r7, #4]

                    if (laberinto_posicion_valida(pos_adyacente.fila, pos_adyacente.columna))
 8000e22:	793b      	ldrb	r3, [r7, #4]
 8000e24:	797a      	ldrb	r2, [r7, #5]
 8000e26:	4611      	mov	r1, r2
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f000 f8d1 	bl	8000fd0 <laberinto_posicion_valida>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d00f      	beq.n	8000e54 <laberinto_recalcular_pesos+0xb0>
                    {
                        uint8_t peso_adyacente = laberinto_get_peso(
 8000e34:	793b      	ldrb	r3, [r7, #4]
 8000e36:	797a      	ldrb	r2, [r7, #5]
 8000e38:	4611      	mov	r1, r2
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff ff24 	bl	8000c88 <laberinto_get_peso>
 8000e40:	4603      	mov	r3, r0
 8000e42:	71fb      	strb	r3, [r7, #7]
                            pos_adyacente.fila, pos_adyacente.columna);

                        if (peso_adyacente < peso_minimo)
 8000e44:	79fa      	ldrb	r2, [r7, #7]
 8000e46:	7afb      	ldrb	r3, [r7, #11]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d203      	bcs.n	8000e54 <laberinto_recalcular_pesos+0xb0>
                        {
                            peso_minimo = peso_adyacente;
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	72fb      	strb	r3, [r7, #11]
 8000e50:	e000      	b.n	8000e54 <laberinto_recalcular_pesos+0xb0>
                        continue;
 8000e52:	bf00      	nop
                for (brujula dir = norte; dir <= oeste; dir++)
 8000e54:	7abb      	ldrb	r3, [r7, #10]
 8000e56:	3301      	adds	r3, #1
 8000e58:	72bb      	strb	r3, [r7, #10]
 8000e5a:	7abb      	ldrb	r3, [r7, #10]
 8000e5c:	2b03      	cmp	r3, #3
 8000e5e:	d9c1      	bls.n	8000de4 <laberinto_recalcular_pesos+0x40>
                        }
                    }
                }

                // Nuevo peso = menor peso adyacente + 1
                uint8_t nuevo_peso = (peso_minimo == PESO_MAXIMO) ? PESO_MAXIMO : peso_minimo + 1;
 8000e60:	7afb      	ldrb	r3, [r7, #11]
 8000e62:	2bff      	cmp	r3, #255	@ 0xff
 8000e64:	d003      	beq.n	8000e6e <laberinto_recalcular_pesos+0xca>
 8000e66:	7afb      	ldrb	r3, [r7, #11]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	e000      	b.n	8000e70 <laberinto_recalcular_pesos+0xcc>
 8000e6e:	23ff      	movs	r3, #255	@ 0xff
 8000e70:	723b      	strb	r3, [r7, #8]

                // Actualizar si hay cambio
                if (nuevo_peso != laberinto[fila - 1][columna - 1].peso)
 8000e72:	7b7b      	ldrb	r3, [r7, #13]
 8000e74:	1e59      	subs	r1, r3, #1
 8000e76:	7b3b      	ldrb	r3, [r7, #12]
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	481f      	ldr	r0, [pc, #124]	@ (8000ef8 <laberinto_recalcular_pesos+0x154>)
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	00d2      	lsls	r2, r2, #3
 8000e80:	1ad2      	subs	r2, r2, r3
 8000e82:	460b      	mov	r3, r1
 8000e84:	00db      	lsls	r3, r3, #3
 8000e86:	1a5b      	subs	r3, r3, r1
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	4413      	add	r3, r2
 8000e8c:	4403      	add	r3, r0
 8000e8e:	3302      	adds	r3, #2
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	7a3a      	ldrb	r2, [r7, #8]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d014      	beq.n	8000ec2 <laberinto_recalcular_pesos+0x11e>
                {
                    laberinto[fila - 1][columna - 1].peso = nuevo_peso;
 8000e98:	7b7b      	ldrb	r3, [r7, #13]
 8000e9a:	1e59      	subs	r1, r3, #1
 8000e9c:	7b3b      	ldrb	r3, [r7, #12]
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	4815      	ldr	r0, [pc, #84]	@ (8000ef8 <laberinto_recalcular_pesos+0x154>)
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	00d2      	lsls	r2, r2, #3
 8000ea6:	1ad2      	subs	r2, r2, r3
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	00db      	lsls	r3, r3, #3
 8000eac:	1a5b      	subs	r3, r3, r1
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	4413      	add	r3, r2
 8000eb2:	4403      	add	r3, r0
 8000eb4:	3302      	adds	r3, #2
 8000eb6:	7a3a      	ldrb	r2, [r7, #8]
 8000eb8:	701a      	strb	r2, [r3, #0]
                    cambio_detectado = true;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	73fb      	strb	r3, [r7, #15]
 8000ebe:	e000      	b.n	8000ec2 <laberinto_recalcular_pesos+0x11e>
                    continue;
 8000ec0:	bf00      	nop
            for (uint8_t columna = 1; columna <= TAMAÑO_LABERINTO; columna++)
 8000ec2:	7b3b      	ldrb	r3, [r7, #12]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	733b      	strb	r3, [r7, #12]
 8000ec8:	7b3b      	ldrb	r3, [r7, #12]
 8000eca:	2b04      	cmp	r3, #4
 8000ecc:	f67f af7f 	bls.w	8000dce <laberinto_recalcular_pesos+0x2a>
        for (uint8_t fila = 1; fila <= TAMAÑO_LABERINTO; fila++) // se propaga desde (1,1) hacia afuera
 8000ed0:	7b7b      	ldrb	r3, [r7, #13]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	737b      	strb	r3, [r7, #13]
 8000ed6:	7b7b      	ldrb	r3, [r7, #13]
 8000ed8:	2b04      	cmp	r3, #4
 8000eda:	f67f af75 	bls.w	8000dc8 <laberinto_recalcular_pesos+0x24>
    while (cambio_detectado && iteraciones < MAX_ITERACIONES)
 8000ede:	7bfb      	ldrb	r3, [r7, #15]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d004      	beq.n	8000eee <laberinto_recalcular_pesos+0x14a>
 8000ee4:	7bba      	ldrb	r2, [r7, #14]
 8000ee6:	7a7b      	ldrb	r3, [r7, #9]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	f4ff af65 	bcc.w	8000db8 <laberinto_recalcular_pesos+0x14>
                }
            }
        }
    }
}
 8000eee:	bf00      	nop
 8000ef0:	3714      	adds	r7, #20
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd90      	pop	{r4, r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	200000dc 	.word	0x200000dc

08000efc <laberinto_hay_muro>:

bool laberinto_hay_muro(uint8_t fila, uint8_t columna, brujula direccion)
{
 8000efc:	b590      	push	{r4, r7, lr}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	71fb      	strb	r3, [r7, #7]
 8000f06:	460b      	mov	r3, r1
 8000f08:	71bb      	strb	r3, [r7, #6]
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	717b      	strb	r3, [r7, #5]
    if (!laberinto_posicion_valida(fila, columna))
 8000f0e:	79ba      	ldrb	r2, [r7, #6]
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	4611      	mov	r1, r2
 8000f14:	4618      	mov	r0, r3
 8000f16:	f000 f85b 	bl	8000fd0 <laberinto_posicion_valida>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	f083 0301 	eor.w	r3, r3, #1
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <laberinto_hay_muro+0x2e>
    {
        return true; // Considerar bordes como muros
 8000f26:	2301      	movs	r3, #1
 8000f28:	e011      	b.n	8000f4e <laberinto_hay_muro+0x52>
    }

    return laberinto[fila - 1][columna - 1].muros[direccion];
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	1e59      	subs	r1, r3, #1
 8000f2e:	79bb      	ldrb	r3, [r7, #6]
 8000f30:	3b01      	subs	r3, #1
 8000f32:	7978      	ldrb	r0, [r7, #5]
 8000f34:	4c08      	ldr	r4, [pc, #32]	@ (8000f58 <laberinto_hay_muro+0x5c>)
 8000f36:	461a      	mov	r2, r3
 8000f38:	00d2      	lsls	r2, r2, #3
 8000f3a:	1ad2      	subs	r2, r2, r3
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	00db      	lsls	r3, r3, #3
 8000f40:	1a5b      	subs	r3, r3, r1
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	4413      	add	r3, r2
 8000f46:	4423      	add	r3, r4
 8000f48:	4403      	add	r3, r0
 8000f4a:	3303      	adds	r3, #3
 8000f4c:	781b      	ldrb	r3, [r3, #0]
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd90      	pop	{r4, r7, pc}
 8000f56:	bf00      	nop
 8000f58:	200000dc 	.word	0x200000dc

08000f5c <laberinto_get_posicion_adyacente>:

posicion_t laberinto_get_posicion_adyacente(posicion_t pos_actual, brujula direccion)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	80b8      	strh	r0, [r7, #4]
 8000f64:	460b      	mov	r3, r1
 8000f66:	70fb      	strb	r3, [r7, #3]
    posicion_t nueva_pos = pos_actual;
 8000f68:	88bb      	ldrh	r3, [r7, #4]
 8000f6a:	813b      	strh	r3, [r7, #8]

    switch (direccion)
 8000f6c:	78fb      	ldrb	r3, [r7, #3]
 8000f6e:	2b03      	cmp	r3, #3
 8000f70:	d81e      	bhi.n	8000fb0 <laberinto_get_posicion_adyacente+0x54>
 8000f72:	a201      	add	r2, pc, #4	@ (adr r2, 8000f78 <laberinto_get_posicion_adyacente+0x1c>)
 8000f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f78:	08000f89 	.word	0x08000f89
 8000f7c:	08000f93 	.word	0x08000f93
 8000f80:	08000f9d 	.word	0x08000f9d
 8000f84:	08000fa7 	.word	0x08000fa7
    {
    case norte:
        nueva_pos.fila = pos_actual.fila - 1;
 8000f88:	793b      	ldrb	r3, [r7, #4]
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	723b      	strb	r3, [r7, #8]
        break;
 8000f90:	e00e      	b.n	8000fb0 <laberinto_get_posicion_adyacente+0x54>
    case este:
        nueva_pos.columna = pos_actual.columna + 1;
 8000f92:	797b      	ldrb	r3, [r7, #5]
 8000f94:	3301      	adds	r3, #1
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	727b      	strb	r3, [r7, #9]
        break;
 8000f9a:	e009      	b.n	8000fb0 <laberinto_get_posicion_adyacente+0x54>
    case sur:
        nueva_pos.fila = pos_actual.fila + 1;
 8000f9c:	793b      	ldrb	r3, [r7, #4]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	723b      	strb	r3, [r7, #8]
        break;
 8000fa4:	e004      	b.n	8000fb0 <laberinto_get_posicion_adyacente+0x54>
    case oeste:
        nueva_pos.columna = pos_actual.columna - 1;
 8000fa6:	797b      	ldrb	r3, [r7, #5]
 8000fa8:	3b01      	subs	r3, #1
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	727b      	strb	r3, [r7, #9]
        break;
 8000fae:	bf00      	nop
    }

    return nueva_pos;
 8000fb0:	893b      	ldrh	r3, [r7, #8]
 8000fb2:	81bb      	strh	r3, [r7, #12]
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	7b3a      	ldrb	r2, [r7, #12]
 8000fb8:	f362 0307 	bfi	r3, r2, #0, #8
 8000fbc:	7b7a      	ldrb	r2, [r7, #13]
 8000fbe:	f362 230f 	bfi	r3, r2, #8, #8
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3714      	adds	r7, #20
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop

08000fd0 <laberinto_posicion_valida>:

bool laberinto_posicion_valida(uint8_t fila, uint8_t columna)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	460a      	mov	r2, r1
 8000fda:	71fb      	strb	r3, [r7, #7]
 8000fdc:	4613      	mov	r3, r2
 8000fde:	71bb      	strb	r3, [r7, #6]
    return (fila >= 1 && fila <= TAMAÑO_LABERINTO &&
            columna >= 1 && columna <= TAMAÑO_LABERINTO);
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d00a      	beq.n	8000ffc <laberinto_posicion_valida+0x2c>
    return (fila >= 1 && fila <= TAMAÑO_LABERINTO &&
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	2b04      	cmp	r3, #4
 8000fea:	d807      	bhi.n	8000ffc <laberinto_posicion_valida+0x2c>
 8000fec:	79bb      	ldrb	r3, [r7, #6]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d004      	beq.n	8000ffc <laberinto_posicion_valida+0x2c>
            columna >= 1 && columna <= TAMAÑO_LABERINTO);
 8000ff2:	79bb      	ldrb	r3, [r7, #6]
 8000ff4:	2b04      	cmp	r3, #4
 8000ff6:	d801      	bhi.n	8000ffc <laberinto_posicion_valida+0x2c>
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e000      	b.n	8000ffe <laberinto_posicion_valida+0x2e>
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	b2db      	uxtb	r3, r3
 8001004:	4618      	mov	r0, r3
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001014:	f001 f98a 	bl	800232c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001018:	f000 f864 	bl	80010e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800101c:	f000 fa5c 	bl	80014d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001020:	f000 fa3a 	bl	8001498 <MX_DMA_Init>
  MX_I2C1_Init();
 8001024:	f000 f928 	bl	8001278 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001028:	f000 f954 	bl	80012d4 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800102c:	f00a fdd8 	bl	800bbe0 <MX_USB_HOST_Init>
  MX_ADC1_Init();
 8001030:	f000 f8c2 	bl	80011b8 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001034:	f000 f984 	bl	8001340 <MX_TIM3_Init>
  MX_UART5_Init();
 8001038:	f000 fa04 	bl	8001444 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  // Inicializar ADC con DMA primero
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)dma_buffer, BUFFER_TOTAL);
 800103c:	22c8      	movs	r2, #200	@ 0xc8
 800103e:	4923      	ldr	r1, [pc, #140]	@ (80010cc <main+0xbc>)
 8001040:	4823      	ldr	r0, [pc, #140]	@ (80010d0 <main+0xc0>)
 8001042:	f001 fa4d 	bl	80024e0 <HAL_ADC_Start_DMA>

  // Auto-calibración (sin motores activos)
  auto_calibracion();
 8001046:	f7ff fb5d 	bl	8000704 <auto_calibracion>
  // Inicializar el módulo de motores
  control_motor_init();
 800104a:	f7ff fc5b 	bl	8000904 <control_motor_init>
  Inicializar_UART();
 800104e:	f001 f919 	bl	8002284 <Inicializar_UART>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001052:	f00a fdeb 	bl	800bc2c <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    if (!terminado)
 8001056:	4b1f      	ldr	r3, [pc, #124]	@ (80010d4 <main+0xc4>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	f083 0301 	eor.w	r3, r3, #1
 800105e:	b2db      	uxtb	r3, r3
 8001060:	2b00      	cmp	r3, #0
 8001062:	d02d      	beq.n	80010c0 <main+0xb0>
    {
      // PROCESAR FLAGS CON PRIORIDAD: LÍNEA > MURO

      if (flag_linea_detectada)
 8001064:	4b1c      	ldr	r3, [pc, #112]	@ (80010d8 <main+0xc8>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	b2db      	uxtb	r3, r3
 800106a:	2b00      	cmp	r3, #0
 800106c:	d014      	beq.n	8001098 <main+0x88>
      {
        if (antirrebote())
 800106e:	f000 fcbb 	bl	80019e8 <antirrebote>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d00b      	beq.n	8001090 <main+0x80>
        {
          HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET); // Naranja
 8001078:	2201      	movs	r2, #1
 800107a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800107e:	4817      	ldr	r0, [pc, #92]	@ (80010dc <main+0xcc>)
 8001080:	f002 fce6 	bl	8003a50 <HAL_GPIO_WritePin>
          flag_linea_detectada = false;                            // Clear flag PRIMERO
 8001084:	4b14      	ldr	r3, [pc, #80]	@ (80010d8 <main+0xc8>)
 8001086:	2200      	movs	r2, #0
 8001088:	701a      	strb	r2, [r3, #0]
          chequeolinea();
 800108a:	f000 fbad 	bl	80017e8 <chequeolinea>
 800108e:	e019      	b.n	80010c4 <main+0xb4>
        }
        else
          flag_linea_detectada = false;
 8001090:	4b11      	ldr	r3, [pc, #68]	@ (80010d8 <main+0xc8>)
 8001092:	2200      	movs	r2, #0
 8001094:	701a      	strb	r2, [r3, #0]
 8001096:	e015      	b.n	80010c4 <main+0xb4>
      }

      else if (flag_muro_detectado) // else if = prioridad a línea
 8001098:	4b11      	ldr	r3, [pc, #68]	@ (80010e0 <main+0xd0>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d00b      	beq.n	80010ba <main+0xaa>
      {
        HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_SET); // Prende LED al detectar muro
 80010a2:	2201      	movs	r2, #1
 80010a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010a8:	480c      	ldr	r0, [pc, #48]	@ (80010dc <main+0xcc>)
 80010aa:	f002 fcd1 	bl	8003a50 <HAL_GPIO_WritePin>
        flag_muro_detectado = false;                             // Clear flag PRIMERO
 80010ae:	4b0c      	ldr	r3, [pc, #48]	@ (80010e0 <main+0xd0>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	701a      	strb	r2, [r3, #0]
        chequeomuro();
 80010b4:	f000 fc0c 	bl	80018d0 <chequeomuro>
 80010b8:	e004      	b.n	80010c4 <main+0xb4>
      }

      else
      {
        // Solo ejecutar control de línea recta si NO hay interrupciones pendientes
        controlar_linea_recta();
 80010ba:	f7ff fbab 	bl	8000814 <controlar_linea_recta>
 80010be:	e001      	b.n	80010c4 <main+0xb4>
      }
    }
    else
    {
      termino();
 80010c0:	f7ff fd7a 	bl	8000bb8 <termino>
    }
    reset_posicion_pushbutton(); // ⚡ I AM SPEED button */
 80010c4:	f000 fc4a 	bl	800195c <reset_posicion_pushbutton>
    MX_USB_HOST_Process();
 80010c8:	e7c3      	b.n	8001052 <main+0x42>
 80010ca:	bf00      	nop
 80010cc:	20000334 	.word	0x20000334
 80010d0:	2000014c 	.word	0x2000014c
 80010d4:	20000331 	.word	0x20000331
 80010d8:	200004c4 	.word	0x200004c4
 80010dc:	40020c00 	.word	0x40020c00
 80010e0:	200004c5 	.word	0x200004c5

080010e4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b094      	sub	sp, #80	@ 0x50
 80010e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ea:	f107 0320 	add.w	r3, r7, #32
 80010ee:	2230      	movs	r2, #48	@ 0x30
 80010f0:	2100      	movs	r1, #0
 80010f2:	4618      	mov	r0, r3
 80010f4:	f00b f95e 	bl	800c3b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f8:	f107 030c 	add.w	r3, r7, #12
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001108:	2300      	movs	r3, #0
 800110a:	60bb      	str	r3, [r7, #8]
 800110c:	4b28      	ldr	r3, [pc, #160]	@ (80011b0 <SystemClock_Config+0xcc>)
 800110e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001110:	4a27      	ldr	r2, [pc, #156]	@ (80011b0 <SystemClock_Config+0xcc>)
 8001112:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001116:	6413      	str	r3, [r2, #64]	@ 0x40
 8001118:	4b25      	ldr	r3, [pc, #148]	@ (80011b0 <SystemClock_Config+0xcc>)
 800111a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001120:	60bb      	str	r3, [r7, #8]
 8001122:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001124:	2300      	movs	r3, #0
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	4b22      	ldr	r3, [pc, #136]	@ (80011b4 <SystemClock_Config+0xd0>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a21      	ldr	r2, [pc, #132]	@ (80011b4 <SystemClock_Config+0xd0>)
 800112e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001132:	6013      	str	r3, [r2, #0]
 8001134:	4b1f      	ldr	r3, [pc, #124]	@ (80011b4 <SystemClock_Config+0xd0>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800113c:	607b      	str	r3, [r7, #4]
 800113e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001140:	2301      	movs	r3, #1
 8001142:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001144:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001148:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800114a:	2302      	movs	r3, #2
 800114c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800114e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001152:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001154:	2308      	movs	r3, #8
 8001156:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001158:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800115c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800115e:	2302      	movs	r3, #2
 8001160:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001162:	2307      	movs	r3, #7
 8001164:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001166:	f107 0320 	add.w	r3, r7, #32
 800116a:	4618      	mov	r0, r3
 800116c:	f004 ff1a 	bl	8005fa4 <HAL_RCC_OscConfig>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001176:	f000 fcc3 	bl	8001b00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800117a:	230f      	movs	r3, #15
 800117c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800117e:	2302      	movs	r3, #2
 8001180:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001182:	2300      	movs	r3, #0
 8001184:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001186:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800118a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800118c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001190:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001192:	f107 030c 	add.w	r3, r7, #12
 8001196:	2105      	movs	r1, #5
 8001198:	4618      	mov	r0, r3
 800119a:	f005 f97b 	bl	8006494 <HAL_RCC_ClockConfig>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80011a4:	f000 fcac 	bl	8001b00 <Error_Handler>
  }
}
 80011a8:	bf00      	nop
 80011aa:	3750      	adds	r7, #80	@ 0x50
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40023800 	.word	0x40023800
 80011b4:	40007000 	.word	0x40007000

080011b8 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011be:	463b      	mov	r3, r7
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
   */
  hadc1.Instance = ADC1;
 80011ca:	4b28      	ldr	r3, [pc, #160]	@ (800126c <MX_ADC1_Init+0xb4>)
 80011cc:	4a28      	ldr	r2, [pc, #160]	@ (8001270 <MX_ADC1_Init+0xb8>)
 80011ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80011d0:	4b26      	ldr	r3, [pc, #152]	@ (800126c <MX_ADC1_Init+0xb4>)
 80011d2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80011d6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011d8:	4b24      	ldr	r3, [pc, #144]	@ (800126c <MX_ADC1_Init+0xb4>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80011de:	4b23      	ldr	r3, [pc, #140]	@ (800126c <MX_ADC1_Init+0xb4>)
 80011e0:	2201      	movs	r2, #1
 80011e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011e4:	4b21      	ldr	r3, [pc, #132]	@ (800126c <MX_ADC1_Init+0xb4>)
 80011e6:	2201      	movs	r2, #1
 80011e8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011ea:	4b20      	ldr	r3, [pc, #128]	@ (800126c <MX_ADC1_Init+0xb4>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011f2:	4b1e      	ldr	r3, [pc, #120]	@ (800126c <MX_ADC1_Init+0xb4>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011f8:	4b1c      	ldr	r3, [pc, #112]	@ (800126c <MX_ADC1_Init+0xb4>)
 80011fa:	4a1e      	ldr	r2, [pc, #120]	@ (8001274 <MX_ADC1_Init+0xbc>)
 80011fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011fe:	4b1b      	ldr	r3, [pc, #108]	@ (800126c <MX_ADC1_Init+0xb4>)
 8001200:	2200      	movs	r2, #0
 8001202:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001204:	4b19      	ldr	r3, [pc, #100]	@ (800126c <MX_ADC1_Init+0xb4>)
 8001206:	2202      	movs	r2, #2
 8001208:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800120a:	4b18      	ldr	r3, [pc, #96]	@ (800126c <MX_ADC1_Init+0xb4>)
 800120c:	2201      	movs	r2, #1
 800120e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001212:	4b16      	ldr	r3, [pc, #88]	@ (800126c <MX_ADC1_Init+0xb4>)
 8001214:	2200      	movs	r2, #0
 8001216:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001218:	4814      	ldr	r0, [pc, #80]	@ (800126c <MX_ADC1_Init+0xb4>)
 800121a:	f001 f91d 	bl	8002458 <HAL_ADC_Init>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001224:	f000 fc6c 	bl	8001b00 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_8;
 8001228:	2308      	movs	r3, #8
 800122a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800122c:	2301      	movs	r3, #1
 800122e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8001230:	2305      	movs	r3, #5
 8001232:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001234:	463b      	mov	r3, r7
 8001236:	4619      	mov	r1, r3
 8001238:	480c      	ldr	r0, [pc, #48]	@ (800126c <MX_ADC1_Init+0xb4>)
 800123a:	f001 fa6f 	bl	800271c <HAL_ADC_ConfigChannel>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001244:	f000 fc5c 	bl	8001b00 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_9;
 8001248:	2309      	movs	r3, #9
 800124a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800124c:	2302      	movs	r3, #2
 800124e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001250:	463b      	mov	r3, r7
 8001252:	4619      	mov	r1, r3
 8001254:	4805      	ldr	r0, [pc, #20]	@ (800126c <MX_ADC1_Init+0xb4>)
 8001256:	f001 fa61 	bl	800271c <HAL_ADC_ConfigChannel>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001260:	f000 fc4e 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 8001264:	bf00      	nop
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	2000014c 	.word	0x2000014c
 8001270:	40012000 	.word	0x40012000
 8001274:	0f000001 	.word	0x0f000001

08001278 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800127c:	4b12      	ldr	r3, [pc, #72]	@ (80012c8 <MX_I2C1_Init+0x50>)
 800127e:	4a13      	ldr	r2, [pc, #76]	@ (80012cc <MX_I2C1_Init+0x54>)
 8001280:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001282:	4b11      	ldr	r3, [pc, #68]	@ (80012c8 <MX_I2C1_Init+0x50>)
 8001284:	4a12      	ldr	r2, [pc, #72]	@ (80012d0 <MX_I2C1_Init+0x58>)
 8001286:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001288:	4b0f      	ldr	r3, [pc, #60]	@ (80012c8 <MX_I2C1_Init+0x50>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800128e:	4b0e      	ldr	r3, [pc, #56]	@ (80012c8 <MX_I2C1_Init+0x50>)
 8001290:	2200      	movs	r2, #0
 8001292:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001294:	4b0c      	ldr	r3, [pc, #48]	@ (80012c8 <MX_I2C1_Init+0x50>)
 8001296:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800129a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800129c:	4b0a      	ldr	r3, [pc, #40]	@ (80012c8 <MX_I2C1_Init+0x50>)
 800129e:	2200      	movs	r2, #0
 80012a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012a2:	4b09      	ldr	r3, [pc, #36]	@ (80012c8 <MX_I2C1_Init+0x50>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012a8:	4b07      	ldr	r3, [pc, #28]	@ (80012c8 <MX_I2C1_Init+0x50>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012ae:	4b06      	ldr	r3, [pc, #24]	@ (80012c8 <MX_I2C1_Init+0x50>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012b4:	4804      	ldr	r0, [pc, #16]	@ (80012c8 <MX_I2C1_Init+0x50>)
 80012b6:	f004 fd31 	bl	8005d1c <HAL_I2C_Init>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012c0:	f000 fc1e 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 80012c4:	bf00      	nop
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	200001f4 	.word	0x200001f4
 80012cc:	40005400 	.word	0x40005400
 80012d0:	000186a0 	.word	0x000186a0

080012d4 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012d8:	4b17      	ldr	r3, [pc, #92]	@ (8001338 <MX_SPI1_Init+0x64>)
 80012da:	4a18      	ldr	r2, [pc, #96]	@ (800133c <MX_SPI1_Init+0x68>)
 80012dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012de:	4b16      	ldr	r3, [pc, #88]	@ (8001338 <MX_SPI1_Init+0x64>)
 80012e0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80012e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012e6:	4b14      	ldr	r3, [pc, #80]	@ (8001338 <MX_SPI1_Init+0x64>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012ec:	4b12      	ldr	r3, [pc, #72]	@ (8001338 <MX_SPI1_Init+0x64>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012f2:	4b11      	ldr	r3, [pc, #68]	@ (8001338 <MX_SPI1_Init+0x64>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001338 <MX_SPI1_Init+0x64>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001338 <MX_SPI1_Init+0x64>)
 8001300:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001304:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001306:	4b0c      	ldr	r3, [pc, #48]	@ (8001338 <MX_SPI1_Init+0x64>)
 8001308:	2200      	movs	r2, #0
 800130a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800130c:	4b0a      	ldr	r3, [pc, #40]	@ (8001338 <MX_SPI1_Init+0x64>)
 800130e:	2200      	movs	r2, #0
 8001310:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001312:	4b09      	ldr	r3, [pc, #36]	@ (8001338 <MX_SPI1_Init+0x64>)
 8001314:	2200      	movs	r2, #0
 8001316:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001318:	4b07      	ldr	r3, [pc, #28]	@ (8001338 <MX_SPI1_Init+0x64>)
 800131a:	2200      	movs	r2, #0
 800131c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800131e:	4b06      	ldr	r3, [pc, #24]	@ (8001338 <MX_SPI1_Init+0x64>)
 8001320:	220a      	movs	r2, #10
 8001322:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001324:	4804      	ldr	r0, [pc, #16]	@ (8001338 <MX_SPI1_Init+0x64>)
 8001326:	f005 fad5 	bl	80068d4 <HAL_SPI_Init>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001330:	f000 fbe6 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */
}
 8001334:	bf00      	nop
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20000248 	.word	0x20000248
 800133c:	40013000 	.word	0x40013000

08001340 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08e      	sub	sp, #56	@ 0x38
 8001344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001346:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001354:	f107 0320 	add.w	r3, r7, #32
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800135e:	1d3b      	adds	r3, r7, #4
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
 800136c:	615a      	str	r2, [r3, #20]
 800136e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001370:	4b32      	ldr	r3, [pc, #200]	@ (800143c <MX_TIM3_Init+0xfc>)
 8001372:	4a33      	ldr	r2, [pc, #204]	@ (8001440 <MX_TIM3_Init+0x100>)
 8001374:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8001376:	4b31      	ldr	r3, [pc, #196]	@ (800143c <MX_TIM3_Init+0xfc>)
 8001378:	2253      	movs	r2, #83	@ 0x53
 800137a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800137c:	4b2f      	ldr	r3, [pc, #188]	@ (800143c <MX_TIM3_Init+0xfc>)
 800137e:	2200      	movs	r2, #0
 8001380:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001382:	4b2e      	ldr	r3, [pc, #184]	@ (800143c <MX_TIM3_Init+0xfc>)
 8001384:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001388:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800138a:	4b2c      	ldr	r3, [pc, #176]	@ (800143c <MX_TIM3_Init+0xfc>)
 800138c:	2200      	movs	r2, #0
 800138e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001390:	4b2a      	ldr	r3, [pc, #168]	@ (800143c <MX_TIM3_Init+0xfc>)
 8001392:	2200      	movs	r2, #0
 8001394:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001396:	4829      	ldr	r0, [pc, #164]	@ (800143c <MX_TIM3_Init+0xfc>)
 8001398:	f005 fb25 	bl	80069e6 <HAL_TIM_Base_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80013a2:	f000 fbad 	bl	8001b00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013ac:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013b0:	4619      	mov	r1, r3
 80013b2:	4822      	ldr	r0, [pc, #136]	@ (800143c <MX_TIM3_Init+0xfc>)
 80013b4:	f005 fd4a 	bl	8006e4c <HAL_TIM_ConfigClockSource>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80013be:	f000 fb9f 	bl	8001b00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80013c2:	481e      	ldr	r0, [pc, #120]	@ (800143c <MX_TIM3_Init+0xfc>)
 80013c4:	f005 fb5e 	bl	8006a84 <HAL_TIM_PWM_Init>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80013ce:	f000 fb97 	bl	8001b00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013d2:	2300      	movs	r3, #0
 80013d4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013d6:	2300      	movs	r3, #0
 80013d8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013da:	f107 0320 	add.w	r3, r7, #32
 80013de:	4619      	mov	r1, r3
 80013e0:	4816      	ldr	r0, [pc, #88]	@ (800143c <MX_TIM3_Init+0xfc>)
 80013e2:	f006 f911 	bl	8007608 <HAL_TIMEx_MasterConfigSynchronization>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80013ec:	f000 fb88 	bl	8001b00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013f0:	2360      	movs	r3, #96	@ 0x60
 80013f2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013f4:	2300      	movs	r3, #0
 80013f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013f8:	2300      	movs	r3, #0
 80013fa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	2208      	movs	r2, #8
 8001404:	4619      	mov	r1, r3
 8001406:	480d      	ldr	r0, [pc, #52]	@ (800143c <MX_TIM3_Init+0xfc>)
 8001408:	f005 fc5e 	bl	8006cc8 <HAL_TIM_PWM_ConfigChannel>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001412:	f000 fb75 	bl	8001b00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001416:	1d3b      	adds	r3, r7, #4
 8001418:	220c      	movs	r2, #12
 800141a:	4619      	mov	r1, r3
 800141c:	4807      	ldr	r0, [pc, #28]	@ (800143c <MX_TIM3_Init+0xfc>)
 800141e:	f005 fc53 	bl	8006cc8 <HAL_TIM_PWM_ConfigChannel>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001428:	f000 fb6a 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800142c:	4803      	ldr	r0, [pc, #12]	@ (800143c <MX_TIM3_Init+0xfc>)
 800142e:	f000 fdbf 	bl	8001fb0 <HAL_TIM_MspPostInit>
}
 8001432:	bf00      	nop
 8001434:	3738      	adds	r7, #56	@ 0x38
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	200002a0 	.word	0x200002a0
 8001440:	40000400 	.word	0x40000400

08001444 <MX_UART5_Init>:
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001448:	4b11      	ldr	r3, [pc, #68]	@ (8001490 <MX_UART5_Init+0x4c>)
 800144a:	4a12      	ldr	r2, [pc, #72]	@ (8001494 <MX_UART5_Init+0x50>)
 800144c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800144e:	4b10      	ldr	r3, [pc, #64]	@ (8001490 <MX_UART5_Init+0x4c>)
 8001450:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001454:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001456:	4b0e      	ldr	r3, [pc, #56]	@ (8001490 <MX_UART5_Init+0x4c>)
 8001458:	2200      	movs	r2, #0
 800145a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800145c:	4b0c      	ldr	r3, [pc, #48]	@ (8001490 <MX_UART5_Init+0x4c>)
 800145e:	2200      	movs	r2, #0
 8001460:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001462:	4b0b      	ldr	r3, [pc, #44]	@ (8001490 <MX_UART5_Init+0x4c>)
 8001464:	2200      	movs	r2, #0
 8001466:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001468:	4b09      	ldr	r3, [pc, #36]	@ (8001490 <MX_UART5_Init+0x4c>)
 800146a:	220c      	movs	r2, #12
 800146c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800146e:	4b08      	ldr	r3, [pc, #32]	@ (8001490 <MX_UART5_Init+0x4c>)
 8001470:	2200      	movs	r2, #0
 8001472:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001474:	4b06      	ldr	r3, [pc, #24]	@ (8001490 <MX_UART5_Init+0x4c>)
 8001476:	2200      	movs	r2, #0
 8001478:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800147a:	4805      	ldr	r0, [pc, #20]	@ (8001490 <MX_UART5_Init+0x4c>)
 800147c:	f006 f940 	bl	8007700 <HAL_UART_Init>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001486:	f000 fb3b 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */
}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	200002e8 	.word	0x200002e8
 8001494:	40005000 	.word	0x40005000

08001498 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	607b      	str	r3, [r7, #4]
 80014a2:	4b0c      	ldr	r3, [pc, #48]	@ (80014d4 <MX_DMA_Init+0x3c>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a6:	4a0b      	ldr	r2, [pc, #44]	@ (80014d4 <MX_DMA_Init+0x3c>)
 80014a8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80014ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ae:	4b09      	ldr	r3, [pc, #36]	@ (80014d4 <MX_DMA_Init+0x3c>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014b6:	607b      	str	r3, [r7, #4]
 80014b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80014ba:	2200      	movs	r2, #0
 80014bc:	2100      	movs	r1, #0
 80014be:	2038      	movs	r0, #56	@ 0x38
 80014c0:	f001 fccb 	bl	8002e5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80014c4:	2038      	movs	r0, #56	@ 0x38
 80014c6:	f001 fce4 	bl	8002e92 <HAL_NVIC_EnableIRQ>
}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40023800 	.word	0x40023800

080014d8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08c      	sub	sp, #48	@ 0x30
 80014dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014de:	f107 031c 	add.w	r3, r7, #28
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	605a      	str	r2, [r3, #4]
 80014e8:	609a      	str	r2, [r3, #8]
 80014ea:	60da      	str	r2, [r3, #12]
 80014ec:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	61bb      	str	r3, [r7, #24]
 80014f2:	4b9b      	ldr	r3, [pc, #620]	@ (8001760 <MX_GPIO_Init+0x288>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f6:	4a9a      	ldr	r2, [pc, #616]	@ (8001760 <MX_GPIO_Init+0x288>)
 80014f8:	f043 0310 	orr.w	r3, r3, #16
 80014fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014fe:	4b98      	ldr	r3, [pc, #608]	@ (8001760 <MX_GPIO_Init+0x288>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001502:	f003 0310 	and.w	r3, r3, #16
 8001506:	61bb      	str	r3, [r7, #24]
 8001508:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	617b      	str	r3, [r7, #20]
 800150e:	4b94      	ldr	r3, [pc, #592]	@ (8001760 <MX_GPIO_Init+0x288>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001512:	4a93      	ldr	r2, [pc, #588]	@ (8001760 <MX_GPIO_Init+0x288>)
 8001514:	f043 0304 	orr.w	r3, r3, #4
 8001518:	6313      	str	r3, [r2, #48]	@ 0x30
 800151a:	4b91      	ldr	r3, [pc, #580]	@ (8001760 <MX_GPIO_Init+0x288>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151e:	f003 0304 	and.w	r3, r3, #4
 8001522:	617b      	str	r3, [r7, #20]
 8001524:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	613b      	str	r3, [r7, #16]
 800152a:	4b8d      	ldr	r3, [pc, #564]	@ (8001760 <MX_GPIO_Init+0x288>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152e:	4a8c      	ldr	r2, [pc, #560]	@ (8001760 <MX_GPIO_Init+0x288>)
 8001530:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001534:	6313      	str	r3, [r2, #48]	@ 0x30
 8001536:	4b8a      	ldr	r3, [pc, #552]	@ (8001760 <MX_GPIO_Init+0x288>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800153e:	613b      	str	r3, [r7, #16]
 8001540:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	4b86      	ldr	r3, [pc, #536]	@ (8001760 <MX_GPIO_Init+0x288>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154a:	4a85      	ldr	r2, [pc, #532]	@ (8001760 <MX_GPIO_Init+0x288>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	6313      	str	r3, [r2, #48]	@ 0x30
 8001552:	4b83      	ldr	r3, [pc, #524]	@ (8001760 <MX_GPIO_Init+0x288>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	60bb      	str	r3, [r7, #8]
 8001562:	4b7f      	ldr	r3, [pc, #508]	@ (8001760 <MX_GPIO_Init+0x288>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001566:	4a7e      	ldr	r2, [pc, #504]	@ (8001760 <MX_GPIO_Init+0x288>)
 8001568:	f043 0302 	orr.w	r3, r3, #2
 800156c:	6313      	str	r3, [r2, #48]	@ 0x30
 800156e:	4b7c      	ldr	r3, [pc, #496]	@ (8001760 <MX_GPIO_Init+0x288>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	60bb      	str	r3, [r7, #8]
 8001578:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	607b      	str	r3, [r7, #4]
 800157e:	4b78      	ldr	r3, [pc, #480]	@ (8001760 <MX_GPIO_Init+0x288>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001582:	4a77      	ldr	r2, [pc, #476]	@ (8001760 <MX_GPIO_Init+0x288>)
 8001584:	f043 0308 	orr.w	r3, r3, #8
 8001588:	6313      	str	r3, [r2, #48]	@ 0x30
 800158a:	4b75      	ldr	r3, [pc, #468]	@ (8001760 <MX_GPIO_Init+0x288>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158e:	f003 0308 	and.w	r3, r3, #8
 8001592:	607b      	str	r3, [r7, #4]
 8001594:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001596:	2200      	movs	r2, #0
 8001598:	2108      	movs	r1, #8
 800159a:	4872      	ldr	r0, [pc, #456]	@ (8001764 <MX_GPIO_Init+0x28c>)
 800159c:	f002 fa58 	bl	8003a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80015a0:	2201      	movs	r2, #1
 80015a2:	2101      	movs	r1, #1
 80015a4:	4870      	ldr	r0, [pc, #448]	@ (8001768 <MX_GPIO_Init+0x290>)
 80015a6:	f002 fa53 	bl	8003a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MI0_Pin | MI1_Pin | MD0_Pin | MD1_Pin, GPIO_PIN_RESET);
 80015aa:	2200      	movs	r2, #0
 80015ac:	f44f 41f0 	mov.w	r1, #30720	@ 0x7800
 80015b0:	486e      	ldr	r0, [pc, #440]	@ (800176c <MX_GPIO_Init+0x294>)
 80015b2:	f002 fa4d 	bl	8003a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin, GPIO_PIN_RESET);
 80015b6:	2200      	movs	r2, #0
 80015b8:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80015bc:	486c      	ldr	r0, [pc, #432]	@ (8001770 <MX_GPIO_Init+0x298>)
 80015be:	f002 fa47 	bl	8003a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80015c2:	2308      	movs	r3, #8
 80015c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c6:	2301      	movs	r3, #1
 80015c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ce:	2300      	movs	r3, #0
 80015d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80015d2:	f107 031c 	add.w	r3, r7, #28
 80015d6:	4619      	mov	r1, r3
 80015d8:	4862      	ldr	r0, [pc, #392]	@ (8001764 <MX_GPIO_Init+0x28c>)
 80015da:	f002 f885 	bl	80036e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80015de:	2301      	movs	r3, #1
 80015e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e2:	2301      	movs	r3, #1
 80015e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ea:	2300      	movs	r3, #0
 80015ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80015ee:	f107 031c 	add.w	r3, r7, #28
 80015f2:	4619      	mov	r1, r3
 80015f4:	485c      	ldr	r0, [pc, #368]	@ (8001768 <MX_GPIO_Init+0x290>)
 80015f6:	f002 f877 	bl	80036e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80015fa:	2308      	movs	r3, #8
 80015fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fe:	2302      	movs	r3, #2
 8001600:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001606:	2300      	movs	r3, #0
 8001608:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800160a:	2305      	movs	r3, #5
 800160c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800160e:	f107 031c 	add.w	r3, r7, #28
 8001612:	4619      	mov	r1, r3
 8001614:	4854      	ldr	r0, [pc, #336]	@ (8001768 <MX_GPIO_Init+0x290>)
 8001616:	f002 f867 	bl	80036e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : i_am_speed_Pin */
  GPIO_InitStruct.Pin = i_am_speed_Pin;
 800161a:	2301      	movs	r3, #1
 800161c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800161e:	2300      	movs	r3, #0
 8001620:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(i_am_speed_GPIO_Port, &GPIO_InitStruct);
 8001626:	f107 031c 	add.w	r3, r7, #28
 800162a:	4619      	mov	r1, r3
 800162c:	4851      	ldr	r0, [pc, #324]	@ (8001774 <MX_GPIO_Init+0x29c>)
 800162e:	f002 f85b 	bl	80036e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001632:	2310      	movs	r3, #16
 8001634:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001636:	2302      	movs	r3, #2
 8001638:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163e:	2300      	movs	r3, #0
 8001640:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001642:	2306      	movs	r3, #6
 8001644:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001646:	f107 031c 	add.w	r3, r7, #28
 800164a:	4619      	mov	r1, r3
 800164c:	4849      	ldr	r0, [pc, #292]	@ (8001774 <MX_GPIO_Init+0x29c>)
 800164e:	f002 f84b 	bl	80036e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001652:	2304      	movs	r3, #4
 8001654:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001656:	2300      	movs	r3, #0
 8001658:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800165e:	f107 031c 	add.w	r3, r7, #28
 8001662:	4619      	mov	r1, r3
 8001664:	4841      	ldr	r0, [pc, #260]	@ (800176c <MX_GPIO_Init+0x294>)
 8001666:	f002 f83f 	bl	80036e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800166a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800166e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001670:	2302      	movs	r3, #2
 8001672:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001678:	2300      	movs	r3, #0
 800167a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800167c:	2305      	movs	r3, #5
 800167e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001680:	f107 031c 	add.w	r3, r7, #28
 8001684:	4619      	mov	r1, r3
 8001686:	4839      	ldr	r0, [pc, #228]	@ (800176c <MX_GPIO_Init+0x294>)
 8001688:	f002 f82e 	bl	80036e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MI0_Pin MI1_Pin MD0_Pin MD1_Pin */
  GPIO_InitStruct.Pin = MI0_Pin | MI1_Pin | MD0_Pin | MD1_Pin;
 800168c:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 8001690:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001692:	2301      	movs	r3, #1
 8001694:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	2300      	movs	r3, #0
 8001698:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169a:	2300      	movs	r3, #0
 800169c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800169e:	f107 031c 	add.w	r3, r7, #28
 80016a2:	4619      	mov	r1, r3
 80016a4:	4831      	ldr	r0, [pc, #196]	@ (800176c <MX_GPIO_Init+0x294>)
 80016a6:	f002 f81f 	bl	80036e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin;
 80016aa:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80016ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b0:	2301      	movs	r3, #1
 80016b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b8:	2300      	movs	r3, #0
 80016ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016bc:	f107 031c 	add.w	r3, r7, #28
 80016c0:	4619      	mov	r1, r3
 80016c2:	482b      	ldr	r0, [pc, #172]	@ (8001770 <MX_GPIO_Init+0x298>)
 80016c4:	f002 f810 	bl	80036e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : WallSensor_Pin LineSensor_Pin */
  GPIO_InitStruct.Pin = WallSensor_Pin | LineSensor_Pin;
 80016c8:	23c0      	movs	r3, #192	@ 0xc0
 80016ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016cc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80016d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016d6:	f107 031c 	add.w	r3, r7, #28
 80016da:	4619      	mov	r1, r3
 80016dc:	4822      	ldr	r0, [pc, #136]	@ (8001768 <MX_GPIO_Init+0x290>)
 80016de:	f002 f803 	bl	80036e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_SCK_Pin */
  GPIO_InitStruct.Pin = I2S3_SCK_Pin;
 80016e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e8:	2302      	movs	r3, #2
 80016ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f0:	2300      	movs	r3, #0
 80016f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80016f4:	2306      	movs	r3, #6
 80016f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_SCK_GPIO_Port, &GPIO_InitStruct);
 80016f8:	f107 031c 	add.w	r3, r7, #28
 80016fc:	4619      	mov	r1, r3
 80016fe:	481a      	ldr	r0, [pc, #104]	@ (8001768 <MX_GPIO_Init+0x290>)
 8001700:	f001 fff2 	bl	80036e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001704:	2320      	movs	r3, #32
 8001706:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001708:	2300      	movs	r3, #0
 800170a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001710:	f107 031c 	add.w	r3, r7, #28
 8001714:	4619      	mov	r1, r3
 8001716:	4816      	ldr	r0, [pc, #88]	@ (8001770 <MX_GPIO_Init+0x298>)
 8001718:	f001 ffe6 	bl	80036e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800171c:	2302      	movs	r3, #2
 800171e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001720:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001724:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800172a:	f107 031c 	add.w	r3, r7, #28
 800172e:	4619      	mov	r1, r3
 8001730:	480c      	ldr	r0, [pc, #48]	@ (8001764 <MX_GPIO_Init+0x28c>)
 8001732:	f001 ffd9 	bl	80036e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001736:	2200      	movs	r2, #0
 8001738:	2100      	movs	r1, #0
 800173a:	2017      	movs	r0, #23
 800173c:	f001 fb8d 	bl	8002e5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001740:	2017      	movs	r0, #23
 8001742:	f001 fba6 	bl	8002e92 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0); // Prioridad alta para ambos sensores
 8001746:	2200      	movs	r2, #0
 8001748:	2101      	movs	r1, #1
 800174a:	2017      	movs	r0, #23
 800174c:	f001 fb85 	bl	8002e5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001750:	2017      	movs	r0, #23
 8001752:	f001 fb9e 	bl	8002e92 <HAL_NVIC_EnableIRQ>

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001756:	bf00      	nop
 8001758:	3730      	adds	r7, #48	@ 0x30
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40023800 	.word	0x40023800
 8001764:	40021000 	.word	0x40021000
 8001768:	40020800 	.word	0x40020800
 800176c:	40020400 	.word	0x40020400
 8001770:	40020c00 	.word	0x40020c00
 8001774:	40020000 	.word	0x40020000

08001778 <actualizar_posicion>:

/* USER CODE BEGIN 4 */
// FUNCION QUE ACTUALIZA LA POSICION CADA VEZ QUE SE CRUZA UNA LINEA
void actualizar_posicion(uint8_t *fila, uint8_t *columna, brujula sentido)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	4613      	mov	r3, r2
 8001784:	71fb      	strb	r3, [r7, #7]
  switch (sentido)
 8001786:	79fb      	ldrb	r3, [r7, #7]
 8001788:	2b03      	cmp	r3, #3
 800178a:	d827      	bhi.n	80017dc <actualizar_posicion+0x64>
 800178c:	a201      	add	r2, pc, #4	@ (adr r2, 8001794 <actualizar_posicion+0x1c>)
 800178e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001792:	bf00      	nop
 8001794:	080017a5 	.word	0x080017a5
 8001798:	080017b3 	.word	0x080017b3
 800179c:	080017c1 	.word	0x080017c1
 80017a0:	080017cf 	.word	0x080017cf
  {
  case norte:
    (*fila)--;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	3b01      	subs	r3, #1
 80017aa:	b2da      	uxtb	r2, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	701a      	strb	r2, [r3, #0]
    break;
 80017b0:	e014      	b.n	80017dc <actualizar_posicion+0x64>
  case este:
    (*columna)++;
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	3301      	adds	r3, #1
 80017b8:	b2da      	uxtb	r2, r3
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	701a      	strb	r2, [r3, #0]
    break;
 80017be:	e00d      	b.n	80017dc <actualizar_posicion+0x64>
  case sur:
    (*fila)++;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	3301      	adds	r3, #1
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	701a      	strb	r2, [r3, #0]
    break;
 80017cc:	e006      	b.n	80017dc <actualizar_posicion+0x64>
  case oeste:
    (*columna)--;
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	3b01      	subs	r3, #1
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	701a      	strb	r2, [r3, #0]
    break;
 80017da:	bf00      	nop
  }
}
 80017dc:	bf00      	nop
 80017de:	3714      	adds	r7, #20
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <chequeolinea>:

// FUNCION CHEQUEO LINEA
void chequeolinea(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 80017ee:	2017      	movs	r0, #23
 80017f0:	f001 fb5d 	bl	8002eae <HAL_NVIC_DisableIRQ>
  HAL_Delay(TIEMPO_AVANCE_LINEA); // por si es sprint o no
 80017f4:	4b2c      	ldr	r3, [pc, #176]	@ (80018a8 <chequeolinea+0xc0>)
 80017f6:	881b      	ldrh	r3, [r3, #0]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f000 fe09 	bl	8002410 <HAL_Delay>

  // Actualizar posición
  actualizar_posicion(&fila_actual, &columna_actual, sentido_actual);
 80017fe:	4b2b      	ldr	r3, [pc, #172]	@ (80018ac <chequeolinea+0xc4>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	461a      	mov	r2, r3
 8001804:	492a      	ldr	r1, [pc, #168]	@ (80018b0 <chequeolinea+0xc8>)
 8001806:	482b      	ldr	r0, [pc, #172]	@ (80018b4 <chequeolinea+0xcc>)
 8001808:	f7ff ffb6 	bl	8001778 <actualizar_posicion>

  sprintf(mensaje, "%d,%d", fila_actual, columna_actual);
 800180c:	4b29      	ldr	r3, [pc, #164]	@ (80018b4 <chequeolinea+0xcc>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	461a      	mov	r2, r3
 8001812:	4b27      	ldr	r3, [pc, #156]	@ (80018b0 <chequeolinea+0xc8>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	4928      	ldr	r1, [pc, #160]	@ (80018b8 <chequeolinea+0xd0>)
 8001818:	4828      	ldr	r0, [pc, #160]	@ (80018bc <chequeolinea+0xd4>)
 800181a:	f00a fda9 	bl	800c370 <siprintf>
  Transmision();
 800181e:	f000 fd11 	bl	8002244 <Transmision>

  // terminó?
  if (fila_actual == 1 && columna_actual == 1)
 8001822:	4b24      	ldr	r3, [pc, #144]	@ (80018b4 <chequeolinea+0xcc>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d114      	bne.n	8001854 <chequeolinea+0x6c>
 800182a:	4b21      	ldr	r3, [pc, #132]	@ (80018b0 <chequeolinea+0xc8>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d110      	bne.n	8001854 <chequeolinea+0x6c>
  {
    termino();
 8001832:	f7ff f9c1 	bl	8000bb8 <termino>
    terminado = true;
 8001836:	4b22      	ldr	r3, [pc, #136]	@ (80018c0 <chequeolinea+0xd8>)
 8001838:	2201      	movs	r2, #1
 800183a:	701a      	strb	r2, [r3, #0]
    strcpy(mensaje, "Finalizado");
 800183c:	4a1f      	ldr	r2, [pc, #124]	@ (80018bc <chequeolinea+0xd4>)
 800183e:	4b21      	ldr	r3, [pc, #132]	@ (80018c4 <chequeolinea+0xdc>)
 8001840:	cb03      	ldmia	r3!, {r0, r1}
 8001842:	6010      	str	r0, [r2, #0]
 8001844:	6051      	str	r1, [r2, #4]
 8001846:	8819      	ldrh	r1, [r3, #0]
 8001848:	789b      	ldrb	r3, [r3, #2]
 800184a:	8111      	strh	r1, [r2, #8]
 800184c:	7293      	strb	r3, [r2, #10]
    Transmision();
 800184e:	f000 fcf9 	bl	8002244 <Transmision>
    return;
 8001852:	e025      	b.n	80018a0 <chequeolinea+0xb8>
  }

  // Calcular y ejecutar
  brujula sentido_deseado = calcular_mejor_direccion(fila_actual, columna_actual); // funcion definida en navegacion.h
 8001854:	4b17      	ldr	r3, [pc, #92]	@ (80018b4 <chequeolinea+0xcc>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	4a15      	ldr	r2, [pc, #84]	@ (80018b0 <chequeolinea+0xc8>)
 800185a:	7812      	ldrb	r2, [r2, #0]
 800185c:	4611      	mov	r1, r2
 800185e:	4618      	mov	r0, r3
 8001860:	f000 f954 	bl	8001b0c <calcular_mejor_direccion>
 8001864:	4603      	mov	r3, r0
 8001866:	71fb      	strb	r3, [r7, #7]
  sentido_actual = ejecutar_movimiento(sentido_actual, sentido_deseado);           // funcion definida en navegacion.h
 8001868:	4b10      	ldr	r3, [pc, #64]	@ (80018ac <chequeolinea+0xc4>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	79fa      	ldrb	r2, [r7, #7]
 800186e:	4611      	mov	r1, r2
 8001870:	4618      	mov	r0, r3
 8001872:	f000 fa0d 	bl	8001c90 <ejecutar_movimiento>
 8001876:	4603      	mov	r3, r0
 8001878:	461a      	mov	r2, r3
 800187a:	4b0c      	ldr	r3, [pc, #48]	@ (80018ac <chequeolinea+0xc4>)
 800187c:	701a      	strb	r2, [r3, #0]
  avanza();
 800187e:	f7ff f8d9 	bl	8000a34 <avanza>
  __HAL_GPIO_EXTI_CLEAR_IT(LineSensor_Pin);
 8001882:	4b11      	ldr	r3, [pc, #68]	@ (80018c8 <chequeolinea+0xe0>)
 8001884:	2280      	movs	r2, #128	@ 0x80
 8001886:	615a      	str	r2, [r3, #20]
  __HAL_GPIO_EXTI_CLEAR_IT(WallSensor_Pin);
 8001888:	4b0f      	ldr	r3, [pc, #60]	@ (80018c8 <chequeolinea+0xe0>)
 800188a:	2240      	movs	r2, #64	@ 0x40
 800188c:	615a      	str	r2, [r3, #20]
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800188e:	2017      	movs	r0, #23
 8001890:	f001 faff 	bl	8002e92 <HAL_NVIC_EnableIRQ>
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8001894:	2200      	movs	r2, #0
 8001896:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800189a:	480c      	ldr	r0, [pc, #48]	@ (80018cc <chequeolinea+0xe4>)
 800189c:	f002 f8d8 	bl	8003a50 <HAL_GPIO_WritePin>
}
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000016 	.word	0x20000016
 80018ac:	20000330 	.word	0x20000330
 80018b0:	20000015 	.word	0x20000015
 80018b4:	20000014 	.word	0x20000014
 80018b8:	0800cb6c 	.word	0x0800cb6c
 80018bc:	200004cc 	.word	0x200004cc
 80018c0:	20000331 	.word	0x20000331
 80018c4:	0800cb74 	.word	0x0800cb74
 80018c8:	40013c00 	.word	0x40013c00
 80018cc:	40020c00 	.word	0x40020c00

080018d0 <chequeomuro>:

// FUNCION CHEQUEO MURO
void chequeomuro(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 80018d6:	2017      	movs	r0, #23
 80018d8:	f001 fae9 	bl	8002eae <HAL_NVIC_DisableIRQ>

  // 1. Registrar el muro detectado
  laberinto_set_muro(fila_actual, columna_actual, sentido_actual);
 80018dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001948 <chequeomuro+0x78>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	4a1a      	ldr	r2, [pc, #104]	@ (800194c <chequeomuro+0x7c>)
 80018e2:	7811      	ldrb	r1, [r2, #0]
 80018e4:	4a1a      	ldr	r2, [pc, #104]	@ (8001950 <chequeomuro+0x80>)
 80018e6:	7812      	ldrb	r2, [r2, #0]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff f9f9 	bl	8000ce0 <laberinto_set_muro>

  // 2. Recalcular todos los pesos con el nuevo muro
  laberinto_recalcular_pesos();
 80018ee:	f7ff fa59 	bl	8000da4 <laberinto_recalcular_pesos>

  // 3. Calcular nueva mejor dirección
  brujula sentido_deseado = calcular_mejor_direccion(fila_actual, columna_actual);
 80018f2:	4b15      	ldr	r3, [pc, #84]	@ (8001948 <chequeomuro+0x78>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	4a15      	ldr	r2, [pc, #84]	@ (800194c <chequeomuro+0x7c>)
 80018f8:	7812      	ldrb	r2, [r2, #0]
 80018fa:	4611      	mov	r1, r2
 80018fc:	4618      	mov	r0, r3
 80018fe:	f000 f905 	bl	8001b0c <calcular_mejor_direccion>
 8001902:	4603      	mov	r3, r0
 8001904:	71fb      	strb	r3, [r7, #7]

  // 4. Ejecutar movimiento LO QUE HIZO EL COLO YA ACTUALIZA EL SENTIDO ACTUAL SOLO
  sentido_actual = ejecutar_movimiento(sentido_actual, sentido_deseado);
 8001906:	4b12      	ldr	r3, [pc, #72]	@ (8001950 <chequeomuro+0x80>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	79fa      	ldrb	r2, [r7, #7]
 800190c:	4611      	mov	r1, r2
 800190e:	4618      	mov	r0, r3
 8001910:	f000 f9be 	bl	8001c90 <ejecutar_movimiento>
 8001914:	4603      	mov	r3, r0
 8001916:	461a      	mov	r2, r3
 8001918:	4b0d      	ldr	r3, [pc, #52]	@ (8001950 <chequeomuro+0x80>)
 800191a:	701a      	strb	r2, [r3, #0]
  avanza();
 800191c:	f7ff f88a 	bl	8000a34 <avanza>
  __HAL_GPIO_EXTI_CLEAR_IT(LineSensor_Pin);
 8001920:	4b0c      	ldr	r3, [pc, #48]	@ (8001954 <chequeomuro+0x84>)
 8001922:	2280      	movs	r2, #128	@ 0x80
 8001924:	615a      	str	r2, [r3, #20]
  __HAL_GPIO_EXTI_CLEAR_IT(WallSensor_Pin);
 8001926:	4b0b      	ldr	r3, [pc, #44]	@ (8001954 <chequeomuro+0x84>)
 8001928:	2240      	movs	r2, #64	@ 0x40
 800192a:	615a      	str	r2, [r3, #20]
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800192c:	2017      	movs	r0, #23
 800192e:	f001 fab0 	bl	8002e92 <HAL_NVIC_EnableIRQ>
  HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 8001932:	2200      	movs	r2, #0
 8001934:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001938:	4807      	ldr	r0, [pc, #28]	@ (8001958 <chequeomuro+0x88>)
 800193a:	f002 f889 	bl	8003a50 <HAL_GPIO_WritePin>
}
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20000014 	.word	0x20000014
 800194c:	20000015 	.word	0x20000015
 8001950:	20000330 	.word	0x20000330
 8001954:	40013c00 	.word	0x40013c00
 8001958:	40020c00 	.word	0x40020c00

0800195c <reset_posicion_pushbutton>:

// VELOCIDAD
void reset_posicion_pushbutton(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  if (antirebote(i_am_speed_GPIO_Port, i_am_speed_Pin))
 8001960:	2101      	movs	r1, #1
 8001962:	4817      	ldr	r0, [pc, #92]	@ (80019c0 <reset_posicion_pushbutton+0x64>)
 8001964:	f7fe fe22 	bl	80005ac <antirebote>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d025      	beq.n	80019ba <reset_posicion_pushbutton+0x5e>
  {
    HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800196e:	2017      	movs	r0, #23
 8001970:	f001 fa9d 	bl	8002eae <HAL_NVIC_DisableIRQ>

    // Resetear posición
    fila_actual = 4;
 8001974:	4b13      	ldr	r3, [pc, #76]	@ (80019c4 <reset_posicion_pushbutton+0x68>)
 8001976:	2204      	movs	r2, #4
 8001978:	701a      	strb	r2, [r3, #0]
    columna_actual = 4;
 800197a:	4b13      	ldr	r3, [pc, #76]	@ (80019c8 <reset_posicion_pushbutton+0x6c>)
 800197c:	2204      	movs	r2, #4
 800197e:	701a      	strb	r2, [r3, #0]
    sentido_actual = norte;
 8001980:	4b12      	ldr	r3, [pc, #72]	@ (80019cc <reset_posicion_pushbutton+0x70>)
 8001982:	2200      	movs	r2, #0
 8001984:	701a      	strb	r2, [r3, #0]
    terminado = false;
 8001986:	4b12      	ldr	r3, [pc, #72]	@ (80019d0 <reset_posicion_pushbutton+0x74>)
 8001988:	2200      	movs	r2, #0
 800198a:	701a      	strb	r2, [r3, #0]

    // ⚡ I AM SPEED!
    activar_modo_sprint();     // Esta función está en control_motor.c
 800198c:	f7fe ffa6 	bl	80008dc <activar_modo_sprint>
    TIEMPO_AVANCE_LINEA = 400; // Reducir tiempo de avance a 400 ms
 8001990:	4b10      	ldr	r3, [pc, #64]	@ (80019d4 <reset_posicion_pushbutton+0x78>)
 8001992:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001996:	801a      	strh	r2, [r3, #0]

    flag_linea_detectada = false;
 8001998:	4b0f      	ldr	r3, [pc, #60]	@ (80019d8 <reset_posicion_pushbutton+0x7c>)
 800199a:	2200      	movs	r2, #0
 800199c:	701a      	strb	r2, [r3, #0]
    flag_muro_detectado = false;
 800199e:	4b0f      	ldr	r3, [pc, #60]	@ (80019dc <reset_posicion_pushbutton+0x80>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	701a      	strb	r2, [r3, #0]

    // Resetear estados de sensores
    ultimo_estado_linea = true;
 80019a4:	4b0e      	ldr	r3, [pc, #56]	@ (80019e0 <reset_posicion_pushbutton+0x84>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	701a      	strb	r2, [r3, #0]
    ultimo_estado_muro = true;
 80019aa:	4b0e      	ldr	r3, [pc, #56]	@ (80019e4 <reset_posicion_pushbutton+0x88>)
 80019ac:	2201      	movs	r2, #1
 80019ae:	701a      	strb	r2, [r3, #0]

    avanza();
 80019b0:	f7ff f840 	bl	8000a34 <avanza>
    // Reactivar interrupciones
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80019b4:	2017      	movs	r0, #23
 80019b6:	f001 fa6c 	bl	8002e92 <HAL_NVIC_EnableIRQ>
  }
}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40020000 	.word	0x40020000
 80019c4:	20000014 	.word	0x20000014
 80019c8:	20000015 	.word	0x20000015
 80019cc:	20000330 	.word	0x20000330
 80019d0:	20000331 	.word	0x20000331
 80019d4:	20000016 	.word	0x20000016
 80019d8:	200004c4 	.word	0x200004c4
 80019dc:	200004c5 	.word	0x200004c5
 80019e0:	20000018 	.word	0x20000018
 80019e4:	20000019 	.word	0x20000019

080019e8 <antirrebote>:

bool antirrebote(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
  int es_linea = 0;
 80019ee:	2300      	movs	r3, #0
 80019f0:	607b      	str	r3, [r7, #4]

  HAL_Delay(5); // 5ms de delay
 80019f2:	2005      	movs	r0, #5
 80019f4:	f000 fd0c 	bl	8002410 <HAL_Delay>
  if (HAL_GPIO_ReadPin(LineSensor_GPIO_Port, LineSensor_Pin) == GPIO_PIN_SET)
 80019f8:	2180      	movs	r1, #128	@ 0x80
 80019fa:	4823      	ldr	r0, [pc, #140]	@ (8001a88 <antirrebote+0xa0>)
 80019fc:	f002 f810 	bl	8003a20 <HAL_GPIO_ReadPin>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d101      	bne.n	8001a0a <antirrebote+0x22>
    return false;
 8001a06:	2300      	movs	r3, #0
 8001a08:	e03a      	b.n	8001a80 <antirrebote+0x98>
  HAL_Delay(5); // 5ms de delay
 8001a0a:	2005      	movs	r0, #5
 8001a0c:	f000 fd00 	bl	8002410 <HAL_Delay>
  if (HAL_GPIO_ReadPin(LineSensor_GPIO_Port, LineSensor_Pin) == GPIO_PIN_SET)
 8001a10:	2180      	movs	r1, #128	@ 0x80
 8001a12:	481d      	ldr	r0, [pc, #116]	@ (8001a88 <antirrebote+0xa0>)
 8001a14:	f002 f804 	bl	8003a20 <HAL_GPIO_ReadPin>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d101      	bne.n	8001a22 <antirrebote+0x3a>
    return false;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	e02e      	b.n	8001a80 <antirrebote+0x98>
  HAL_Delay(5); // 5ms de delay
 8001a22:	2005      	movs	r0, #5
 8001a24:	f000 fcf4 	bl	8002410 <HAL_Delay>
  if (HAL_GPIO_ReadPin(LineSensor_GPIO_Port, LineSensor_Pin) == GPIO_PIN_SET)
 8001a28:	2180      	movs	r1, #128	@ 0x80
 8001a2a:	4817      	ldr	r0, [pc, #92]	@ (8001a88 <antirrebote+0xa0>)
 8001a2c:	f001 fff8 	bl	8003a20 <HAL_GPIO_ReadPin>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d101      	bne.n	8001a3a <antirrebote+0x52>
    return false;
 8001a36:	2300      	movs	r3, #0
 8001a38:	e022      	b.n	8001a80 <antirrebote+0x98>
  es_linea = 1;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	607b      	str	r3, [r7, #4]

  while (es_linea == 1)
 8001a3e:	e01b      	b.n	8001a78 <antirrebote+0x90>
  {
    while (HAL_GPIO_ReadPin(LineSensor_GPIO_Port, LineSensor_Pin) == GPIO_PIN_RESET)
      avanza();
 8001a40:	f7fe fff8 	bl	8000a34 <avanza>
    while (HAL_GPIO_ReadPin(LineSensor_GPIO_Port, LineSensor_Pin) == GPIO_PIN_RESET)
 8001a44:	2180      	movs	r1, #128	@ 0x80
 8001a46:	4810      	ldr	r0, [pc, #64]	@ (8001a88 <antirrebote+0xa0>)
 8001a48:	f001 ffea 	bl	8003a20 <HAL_GPIO_ReadPin>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d0f6      	beq.n	8001a40 <antirrebote+0x58>
    if (HAL_GPIO_ReadPin(LineSensor_GPIO_Port, LineSensor_Pin) == GPIO_PIN_SET)
 8001a52:	2180      	movs	r1, #128	@ 0x80
 8001a54:	480c      	ldr	r0, [pc, #48]	@ (8001a88 <antirrebote+0xa0>)
 8001a56:	f001 ffe3 	bl	8003a20 <HAL_GPIO_ReadPin>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d102      	bne.n	8001a66 <antirrebote+0x7e>
      HAL_Delay(5); // 5ms de delay
 8001a60:	2005      	movs	r0, #5
 8001a62:	f000 fcd5 	bl	8002410 <HAL_Delay>
    if (HAL_GPIO_ReadPin(LineSensor_GPIO_Port, LineSensor_Pin) == GPIO_PIN_SET)
 8001a66:	2180      	movs	r1, #128	@ 0x80
 8001a68:	4807      	ldr	r0, [pc, #28]	@ (8001a88 <antirrebote+0xa0>)
 8001a6a:	f001 ffd9 	bl	8003a20 <HAL_GPIO_ReadPin>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d101      	bne.n	8001a78 <antirrebote+0x90>
      return true;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e003      	b.n	8001a80 <antirrebote+0x98>
  while (es_linea == 1)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d0e2      	beq.n	8001a44 <antirrebote+0x5c>
  }
  return false; // no deberia pasar nunca, en caso de falla
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40020800 	.word	0x40020800

08001a8c <HAL_GPIO_EXTI_Callback>:

// ATENCION A LA INTERRUPCION
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == LineSensor_Pin)
 8001a96:	88fb      	ldrh	r3, [r7, #6]
 8001a98:	2b80      	cmp	r3, #128	@ 0x80
 8001a9a:	d103      	bne.n	8001aa4 <HAL_GPIO_EXTI_Callback+0x18>
  {
    flag_linea_detectada = true;
 8001a9c:	4b14      	ldr	r3, [pc, #80]	@ (8001af0 <HAL_GPIO_EXTI_Callback+0x64>)
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	701a      	strb	r2, [r3, #0]
    }

    // Actualizar último estado
    ultimo_estado_muro = estado_actual;
  }
}
 8001aa2:	e020      	b.n	8001ae6 <HAL_GPIO_EXTI_Callback+0x5a>
  else if (GPIO_Pin == WallSensor_Pin)
 8001aa4:	88fb      	ldrh	r3, [r7, #6]
 8001aa6:	2b40      	cmp	r3, #64	@ 0x40
 8001aa8:	d11d      	bne.n	8001ae6 <HAL_GPIO_EXTI_Callback+0x5a>
    flag_muro_detectado = true;
 8001aaa:	4b12      	ldr	r3, [pc, #72]	@ (8001af4 <HAL_GPIO_EXTI_Callback+0x68>)
 8001aac:	2201      	movs	r2, #1
 8001aae:	701a      	strb	r2, [r3, #0]
    bool estado_actual = HAL_GPIO_ReadPin(WallSensor_GPIO_Port, WallSensor_Pin);
 8001ab0:	2140      	movs	r1, #64	@ 0x40
 8001ab2:	4811      	ldr	r0, [pc, #68]	@ (8001af8 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001ab4:	f001 ffb4 	bl	8003a20 <HAL_GPIO_ReadPin>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	bf14      	ite	ne
 8001abe:	2301      	movne	r3, #1
 8001ac0:	2300      	moveq	r3, #0
 8001ac2:	73fb      	strb	r3, [r7, #15]
    if (ultimo_estado_muro == true && estado_actual == false)
 8001ac4:	4b0d      	ldr	r3, [pc, #52]	@ (8001afc <HAL_GPIO_EXTI_Callback+0x70>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d008      	beq.n	8001ae0 <HAL_GPIO_EXTI_Callback+0x54>
 8001ace:	7bfb      	ldrb	r3, [r7, #15]
 8001ad0:	f083 0301 	eor.w	r3, r3, #1
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d002      	beq.n	8001ae0 <HAL_GPIO_EXTI_Callback+0x54>
      flag_muro_detectado = true;
 8001ada:	4b06      	ldr	r3, [pc, #24]	@ (8001af4 <HAL_GPIO_EXTI_Callback+0x68>)
 8001adc:	2201      	movs	r2, #1
 8001ade:	701a      	strb	r2, [r3, #0]
    ultimo_estado_muro = estado_actual;
 8001ae0:	4a06      	ldr	r2, [pc, #24]	@ (8001afc <HAL_GPIO_EXTI_Callback+0x70>)
 8001ae2:	7bfb      	ldrb	r3, [r7, #15]
 8001ae4:	7013      	strb	r3, [r2, #0]
}
 8001ae6:	bf00      	nop
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	200004c4 	.word	0x200004c4
 8001af4:	200004c5 	.word	0x200004c5
 8001af8:	40020800 	.word	0x40020800
 8001afc:	20000019 	.word	0x20000019

08001b00 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b04:	b672      	cpsid	i
}
 8001b06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b08:	bf00      	nop
 8001b0a:	e7fd      	b.n	8001b08 <Error_Handler+0x8>

08001b0c <calcular_mejor_direccion>:
 */

#include "navegacion.h"

brujula calcular_mejor_direccion(uint8_t fila_actual, uint8_t columna_actual) // nos devuelve direccion en TIPO BRUJULA gracias colo
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b08c      	sub	sp, #48	@ 0x30
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	460a      	mov	r2, r1
 8001b16:	71fb      	strb	r3, [r7, #7]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	71bb      	strb	r3, [r7, #6]
    uint8_t peso_minimo = PESO_MAXIMO;
 8001b1c:	23ff      	movs	r3, #255	@ 0xff
 8001b1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    brujula mejor_direccion = norte; // Dirección por defecto
 8001b22:	2300      	movs	r3, #0
 8001b24:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    bool direccion_valida_encontrada = false;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

    // Para dar preferencia a oeste y norte que llevan hacia la meta (1,1)
    // Primero oeste, luego norte, luego sur, luego este
    static const brujula orden_eval[] = {oeste, norte, sur, este};

    for (int i = 0; i < 4; i++)
 8001b2e:	2300      	movs	r3, #0
 8001b30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b32:	e04f      	b.n	8001bd4 <calcular_mejor_direccion+0xc8>
    {
        brujula direccion = orden_eval[i];
 8001b34:	4a55      	ldr	r2, [pc, #340]	@ (8001c8c <calcular_mejor_direccion+0x180>)
 8001b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b38:	4413      	add	r3, r2
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

        // 1. ¿Hay muro en esta dirección?
        if (laberinto_hay_muro(fila_actual, columna_actual, direccion))
 8001b40:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8001b44:	79b9      	ldrb	r1, [r7, #6]
 8001b46:	79fb      	ldrb	r3, [r7, #7]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff f9d7 	bl	8000efc <laberinto_hay_muro>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d139      	bne.n	8001bc8 <calcular_mejor_direccion+0xbc>
            continue; // Saltar si hay muro
        }

        // 2. Obtener posición adyacente
        posicion_t pos_adyacente = laberinto_get_posicion_adyacente(
            (posicion_t){fila_actual, columna_actual}, direccion);
 8001b54:	79fb      	ldrb	r3, [r7, #7]
 8001b56:	763b      	strb	r3, [r7, #24]
 8001b58:	79bb      	ldrb	r3, [r7, #6]
 8001b5a:	767b      	strb	r3, [r7, #25]
        posicion_t pos_adyacente = laberinto_get_posicion_adyacente(
 8001b5c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001b60:	4619      	mov	r1, r3
 8001b62:	69b8      	ldr	r0, [r7, #24]
 8001b64:	f7ff f9fa 	bl	8000f5c <laberinto_get_posicion_adyacente>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	83bb      	strh	r3, [r7, #28]

        // 3. ¿Es válida? (no salirse del laberinto)
        if (!laberinto_posicion_valida(pos_adyacente.fila, pos_adyacente.columna))
 8001b6c:	7f3b      	ldrb	r3, [r7, #28]
 8001b6e:	7f7a      	ldrb	r2, [r7, #29]
 8001b70:	4611      	mov	r1, r2
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff fa2c 	bl	8000fd0 <laberinto_posicion_valida>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	f083 0301 	eor.w	r3, r3, #1
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d123      	bne.n	8001bcc <calcular_mejor_direccion+0xc0>
        {
            continue; // Saltar si está fuera del laberinto
        }

        // 4. Obtener peso de la casilla adyacente
        uint8_t peso_adyacente = laberinto_get_peso(pos_adyacente.fila, pos_adyacente.columna);
 8001b84:	7f3b      	ldrb	r3, [r7, #28]
 8001b86:	7f7a      	ldrb	r2, [r7, #29]
 8001b88:	4611      	mov	r1, r2
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff f87c 	bl	8000c88 <laberinto_get_peso>
 8001b90:	4603      	mov	r3, r0
 8001b92:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

        // 5. ¿Es el mejor peso hasta ahora? O primera dirección válida encontrada
        if (!direccion_valida_encontrada || peso_adyacente < peso_minimo)
 8001b96:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001b9a:	f083 0301 	eor.w	r3, r3, #1
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d105      	bne.n	8001bb0 <calcular_mejor_direccion+0xa4>
 8001ba4:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8001ba8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d20e      	bcs.n	8001bce <calcular_mejor_direccion+0xc2>
        {
            peso_minimo = peso_adyacente;
 8001bb0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001bb4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            mejor_direccion = direccion;
 8001bb8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001bbc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            direccion_valida_encontrada = true;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8001bc6:	e002      	b.n	8001bce <calcular_mejor_direccion+0xc2>
            continue; // Saltar si hay muro
 8001bc8:	bf00      	nop
 8001bca:	e000      	b.n	8001bce <calcular_mejor_direccion+0xc2>
            continue; // Saltar si está fuera del laberinto
 8001bcc:	bf00      	nop
    for (int i = 0; i < 4; i++)
 8001bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bd6:	2b03      	cmp	r3, #3
 8001bd8:	ddac      	ble.n	8001b34 <calcular_mejor_direccion+0x28>
        }
    }

    // Verificación final de seguridad: asegurarnos que la dirección elegida es válida
    if (direccion_valida_encontrada)
 8001bda:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d04d      	beq.n	8001c7e <calcular_mejor_direccion+0x172>
    {
        posicion_t pos_siguiente = laberinto_get_posicion_adyacente(
            (posicion_t){fila_actual, columna_actual}, mejor_direccion);
 8001be2:	79fb      	ldrb	r3, [r7, #7]
 8001be4:	743b      	strb	r3, [r7, #16]
 8001be6:	79bb      	ldrb	r3, [r7, #6]
 8001be8:	747b      	strb	r3, [r7, #17]
        posicion_t pos_siguiente = laberinto_get_posicion_adyacente(
 8001bea:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001bee:	4619      	mov	r1, r3
 8001bf0:	6938      	ldr	r0, [r7, #16]
 8001bf2:	f7ff f9b3 	bl	8000f5c <laberinto_get_posicion_adyacente>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	82bb      	strh	r3, [r7, #20]

        // Doble verificación para asegurarnos que no nos salimos del laberinto
        if (!laberinto_posicion_valida(pos_siguiente.fila, pos_siguiente.columna))
 8001bfa:	7d3b      	ldrb	r3, [r7, #20]
 8001bfc:	7d7a      	ldrb	r2, [r7, #21]
 8001bfe:	4611      	mov	r1, r2
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff f9e5 	bl	8000fd0 <laberinto_posicion_valida>
 8001c06:	4603      	mov	r3, r0
 8001c08:	f083 0301 	eor.w	r3, r3, #1
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d035      	beq.n	8001c7e <calcular_mejor_direccion+0x172>
        {
            // Algo salió mal, buscar cualquier dirección válida
            for (int i = 0; i < 4; i++)
 8001c12:	2300      	movs	r3, #0
 8001c14:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c16:	e02f      	b.n	8001c78 <calcular_mejor_direccion+0x16c>
            {
                brujula dir_alternativa = orden_eval[i];
 8001c18:	4a1c      	ldr	r2, [pc, #112]	@ (8001c8c <calcular_mejor_direccion+0x180>)
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c1c:	4413      	add	r3, r2
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                pos_siguiente = laberinto_get_posicion_adyacente(
                    (posicion_t){fila_actual, columna_actual}, dir_alternativa);
 8001c24:	79fb      	ldrb	r3, [r7, #7]
 8001c26:	733b      	strb	r3, [r7, #12]
 8001c28:	79bb      	ldrb	r3, [r7, #6]
 8001c2a:	737b      	strb	r3, [r7, #13]
                pos_siguiente = laberinto_get_posicion_adyacente(
 8001c2c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001c30:	4619      	mov	r1, r3
 8001c32:	68f8      	ldr	r0, [r7, #12]
 8001c34:	f7ff f992 	bl	8000f5c <laberinto_get_posicion_adyacente>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	82bb      	strh	r3, [r7, #20]

                if (laberinto_posicion_valida(pos_siguiente.fila, pos_siguiente.columna) &&
 8001c3c:	7d3b      	ldrb	r3, [r7, #20]
 8001c3e:	7d7a      	ldrb	r2, [r7, #21]
 8001c40:	4611      	mov	r1, r2
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff f9c4 	bl	8000fd0 <laberinto_posicion_valida>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d011      	beq.n	8001c72 <calcular_mejor_direccion+0x166>
                    !laberinto_hay_muro(fila_actual, columna_actual, dir_alternativa))
 8001c4e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001c52:	79b9      	ldrb	r1, [r7, #6]
 8001c54:	79fb      	ldrb	r3, [r7, #7]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff f950 	bl	8000efc <laberinto_hay_muro>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	f083 0301 	eor.w	r3, r3, #1
 8001c62:	b2db      	uxtb	r3, r3
                if (laberinto_posicion_valida(pos_siguiente.fila, pos_siguiente.columna) &&
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d004      	beq.n	8001c72 <calcular_mejor_direccion+0x166>
                {
                    mejor_direccion = dir_alternativa;
 8001c68:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001c6c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8001c70:	e005      	b.n	8001c7e <calcular_mejor_direccion+0x172>
            for (int i = 0; i < 4; i++)
 8001c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c74:	3301      	adds	r3, #1
 8001c76:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c7a:	2b03      	cmp	r3, #3
 8001c7c:	ddcc      	ble.n	8001c18 <calcular_mejor_direccion+0x10c>
                }
            }
        }
    }

    return mejor_direccion;
 8001c7e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3730      	adds	r7, #48	@ 0x30
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	0800cb98 	.word	0x0800cb98

08001c90 <ejecutar_movimiento>:

brujula ejecutar_movimiento(brujula sentido_actual, brujula sentido_deseado)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	460a      	mov	r2, r1
 8001c9a:	71fb      	strb	r3, [r7, #7]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	71bb      	strb	r3, [r7, #6]
    // ¿Ya está orientado correctamente?
    if (sentido_actual == sentido_deseado)
 8001ca0:	79fa      	ldrb	r2, [r7, #7]
 8001ca2:	79bb      	ldrb	r3, [r7, #6]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d101      	bne.n	8001cac <ejecutar_movimiento+0x1c>
    {
        // avanza(); // Solo avanzar
        return sentido_actual;
 8001ca8:	79fb      	ldrb	r3, [r7, #7]
 8001caa:	e02b      	b.n	8001d04 <ejecutar_movimiento+0x74>
    }

    // Calcular diferencia usando aritmética xq es un tipo brujula
    // norte=0, este=1, sur=2, oeste=3
    int diferencia = (sentido_deseado - sentido_actual + 4) % 4;
 8001cac:	79ba      	ldrb	r2, [r7, #6]
 8001cae:	79fb      	ldrb	r3, [r7, #7]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	3304      	adds	r3, #4
 8001cb4:	425a      	negs	r2, r3
 8001cb6:	f003 0303 	and.w	r3, r3, #3
 8001cba:	f002 0203 	and.w	r2, r2, #3
 8001cbe:	bf58      	it	pl
 8001cc0:	4253      	negpl	r3, r2
 8001cc2:	60fb      	str	r3, [r7, #12]

    switch (diferencia)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2b03      	cmp	r3, #3
 8001cc8:	d015      	beq.n	8001cf6 <ejecutar_movimiento+0x66>
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2b03      	cmp	r3, #3
 8001cce:	dc18      	bgt.n	8001d02 <ejecutar_movimiento+0x72>
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d003      	beq.n	8001cde <ejecutar_movimiento+0x4e>
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d006      	beq.n	8001cea <ejecutar_movimiento+0x5a>
 8001cdc:	e011      	b.n	8001d02 <ejecutar_movimiento+0x72>
    {
    case 1: // Girar 90° a la derecha
        return gira90der(sentido_actual);
 8001cde:	79fb      	ldrb	r3, [r7, #7]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7fe fef5 	bl	8000ad0 <gira90der>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	e00c      	b.n	8001d04 <ejecutar_movimiento+0x74>

    case 2: // Girar 180° (media vuelta)
        return gira180(sentido_actual);
 8001cea:	79fb      	ldrb	r3, [r7, #7]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7fe ff29 	bl	8000b44 <gira180>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	e006      	b.n	8001d04 <ejecutar_movimiento+0x74>

    case 3: // Girar 90° a la izquierda
        return gira90izq(sentido_actual);
 8001cf6:	79fb      	ldrb	r3, [r7, #7]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7fe feaf 	bl	8000a5c <gira90izq>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	e000      	b.n	8001d04 <ejecutar_movimiento+0x74>

    default: // No debería pasar (caso 0) pero pola dice que siempre se pone default
        // avanza();
        return sentido_actual;
 8001d02:	79fb      	ldrb	r3, [r7, #7]
    }
 8001d04:	4618      	mov	r0, r3
 8001d06:	3710      	adds	r7, #16
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	607b      	str	r3, [r7, #4]
 8001d16:	4b10      	ldr	r3, [pc, #64]	@ (8001d58 <HAL_MspInit+0x4c>)
 8001d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d1a:	4a0f      	ldr	r2, [pc, #60]	@ (8001d58 <HAL_MspInit+0x4c>)
 8001d1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d20:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d22:	4b0d      	ldr	r3, [pc, #52]	@ (8001d58 <HAL_MspInit+0x4c>)
 8001d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d2a:	607b      	str	r3, [r7, #4]
 8001d2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	603b      	str	r3, [r7, #0]
 8001d32:	4b09      	ldr	r3, [pc, #36]	@ (8001d58 <HAL_MspInit+0x4c>)
 8001d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d36:	4a08      	ldr	r2, [pc, #32]	@ (8001d58 <HAL_MspInit+0x4c>)
 8001d38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d3e:	4b06      	ldr	r3, [pc, #24]	@ (8001d58 <HAL_MspInit+0x4c>)
 8001d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d46:	603b      	str	r3, [r7, #0]
 8001d48:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d4a:	2007      	movs	r0, #7
 8001d4c:	f001 f87a 	bl	8002e44 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d50:	bf00      	nop
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	40023800 	.word	0x40023800

08001d5c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b08a      	sub	sp, #40	@ 0x28
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d64:	f107 0314 	add.w	r3, r7, #20
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	605a      	str	r2, [r3, #4]
 8001d6e:	609a      	str	r2, [r3, #8]
 8001d70:	60da      	str	r2, [r3, #12]
 8001d72:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a2f      	ldr	r2, [pc, #188]	@ (8001e38 <HAL_ADC_MspInit+0xdc>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d157      	bne.n	8001e2e <HAL_ADC_MspInit+0xd2>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	613b      	str	r3, [r7, #16]
 8001d82:	4b2e      	ldr	r3, [pc, #184]	@ (8001e3c <HAL_ADC_MspInit+0xe0>)
 8001d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d86:	4a2d      	ldr	r2, [pc, #180]	@ (8001e3c <HAL_ADC_MspInit+0xe0>)
 8001d88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d8e:	4b2b      	ldr	r3, [pc, #172]	@ (8001e3c <HAL_ADC_MspInit+0xe0>)
 8001d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d96:	613b      	str	r3, [r7, #16]
 8001d98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	4b27      	ldr	r3, [pc, #156]	@ (8001e3c <HAL_ADC_MspInit+0xe0>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da2:	4a26      	ldr	r2, [pc, #152]	@ (8001e3c <HAL_ADC_MspInit+0xe0>)
 8001da4:	f043 0302 	orr.w	r3, r3, #2
 8001da8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001daa:	4b24      	ldr	r3, [pc, #144]	@ (8001e3c <HAL_ADC_MspInit+0xe0>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = RightSensor_Pin|LeftSensor_Pin;
 8001db6:	2303      	movs	r3, #3
 8001db8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc2:	f107 0314 	add.w	r3, r7, #20
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	481d      	ldr	r0, [pc, #116]	@ (8001e40 <HAL_ADC_MspInit+0xe4>)
 8001dca:	f001 fc8d 	bl	80036e8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001dce:	4b1d      	ldr	r3, [pc, #116]	@ (8001e44 <HAL_ADC_MspInit+0xe8>)
 8001dd0:	4a1d      	ldr	r2, [pc, #116]	@ (8001e48 <HAL_ADC_MspInit+0xec>)
 8001dd2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001dd4:	4b1b      	ldr	r3, [pc, #108]	@ (8001e44 <HAL_ADC_MspInit+0xe8>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dda:	4b1a      	ldr	r3, [pc, #104]	@ (8001e44 <HAL_ADC_MspInit+0xe8>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001de0:	4b18      	ldr	r3, [pc, #96]	@ (8001e44 <HAL_ADC_MspInit+0xe8>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001de6:	4b17      	ldr	r3, [pc, #92]	@ (8001e44 <HAL_ADC_MspInit+0xe8>)
 8001de8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001dec:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001dee:	4b15      	ldr	r3, [pc, #84]	@ (8001e44 <HAL_ADC_MspInit+0xe8>)
 8001df0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001df4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001df6:	4b13      	ldr	r3, [pc, #76]	@ (8001e44 <HAL_ADC_MspInit+0xe8>)
 8001df8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001dfc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001dfe:	4b11      	ldr	r3, [pc, #68]	@ (8001e44 <HAL_ADC_MspInit+0xe8>)
 8001e00:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e04:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001e06:	4b0f      	ldr	r3, [pc, #60]	@ (8001e44 <HAL_ADC_MspInit+0xe8>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e0c:	4b0d      	ldr	r3, [pc, #52]	@ (8001e44 <HAL_ADC_MspInit+0xe8>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e12:	480c      	ldr	r0, [pc, #48]	@ (8001e44 <HAL_ADC_MspInit+0xe8>)
 8001e14:	f001 f866 	bl	8002ee4 <HAL_DMA_Init>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001e1e:	f7ff fe6f 	bl	8001b00 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a07      	ldr	r2, [pc, #28]	@ (8001e44 <HAL_ADC_MspInit+0xe8>)
 8001e26:	639a      	str	r2, [r3, #56]	@ 0x38
 8001e28:	4a06      	ldr	r2, [pc, #24]	@ (8001e44 <HAL_ADC_MspInit+0xe8>)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001e2e:	bf00      	nop
 8001e30:	3728      	adds	r7, #40	@ 0x28
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40012000 	.word	0x40012000
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	40020400 	.word	0x40020400
 8001e44:	20000194 	.word	0x20000194
 8001e48:	40026410 	.word	0x40026410

08001e4c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b08a      	sub	sp, #40	@ 0x28
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e54:	f107 0314 	add.w	r3, r7, #20
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	605a      	str	r2, [r3, #4]
 8001e5e:	609a      	str	r2, [r3, #8]
 8001e60:	60da      	str	r2, [r3, #12]
 8001e62:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a19      	ldr	r2, [pc, #100]	@ (8001ed0 <HAL_I2C_MspInit+0x84>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d12c      	bne.n	8001ec8 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	613b      	str	r3, [r7, #16]
 8001e72:	4b18      	ldr	r3, [pc, #96]	@ (8001ed4 <HAL_I2C_MspInit+0x88>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e76:	4a17      	ldr	r2, [pc, #92]	@ (8001ed4 <HAL_I2C_MspInit+0x88>)
 8001e78:	f043 0302 	orr.w	r3, r3, #2
 8001e7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e7e:	4b15      	ldr	r3, [pc, #84]	@ (8001ed4 <HAL_I2C_MspInit+0x88>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	613b      	str	r3, [r7, #16]
 8001e88:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001e8a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001e8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e90:	2312      	movs	r3, #18
 8001e92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e94:	2301      	movs	r3, #1
 8001e96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e9c:	2304      	movs	r3, #4
 8001e9e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ea0:	f107 0314 	add.w	r3, r7, #20
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	480c      	ldr	r0, [pc, #48]	@ (8001ed8 <HAL_I2C_MspInit+0x8c>)
 8001ea8:	f001 fc1e 	bl	80036e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001eac:	2300      	movs	r3, #0
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	4b08      	ldr	r3, [pc, #32]	@ (8001ed4 <HAL_I2C_MspInit+0x88>)
 8001eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb4:	4a07      	ldr	r2, [pc, #28]	@ (8001ed4 <HAL_I2C_MspInit+0x88>)
 8001eb6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001eba:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ebc:	4b05      	ldr	r3, [pc, #20]	@ (8001ed4 <HAL_I2C_MspInit+0x88>)
 8001ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ec4:	60fb      	str	r3, [r7, #12]
 8001ec6:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001ec8:	bf00      	nop
 8001eca:	3728      	adds	r7, #40	@ 0x28
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40005400 	.word	0x40005400
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	40020400 	.word	0x40020400

08001edc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b08a      	sub	sp, #40	@ 0x28
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee4:	f107 0314 	add.w	r3, r7, #20
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	605a      	str	r2, [r3, #4]
 8001eee:	609a      	str	r2, [r3, #8]
 8001ef0:	60da      	str	r2, [r3, #12]
 8001ef2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a19      	ldr	r2, [pc, #100]	@ (8001f60 <HAL_SPI_MspInit+0x84>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d12b      	bne.n	8001f56 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	613b      	str	r3, [r7, #16]
 8001f02:	4b18      	ldr	r3, [pc, #96]	@ (8001f64 <HAL_SPI_MspInit+0x88>)
 8001f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f06:	4a17      	ldr	r2, [pc, #92]	@ (8001f64 <HAL_SPI_MspInit+0x88>)
 8001f08:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f0e:	4b15      	ldr	r3, [pc, #84]	@ (8001f64 <HAL_SPI_MspInit+0x88>)
 8001f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f12:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f16:	613b      	str	r3, [r7, #16]
 8001f18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	60fb      	str	r3, [r7, #12]
 8001f1e:	4b11      	ldr	r3, [pc, #68]	@ (8001f64 <HAL_SPI_MspInit+0x88>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f22:	4a10      	ldr	r2, [pc, #64]	@ (8001f64 <HAL_SPI_MspInit+0x88>)
 8001f24:	f043 0301 	orr.w	r3, r3, #1
 8001f28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f64 <HAL_SPI_MspInit+0x88>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	60fb      	str	r3, [r7, #12]
 8001f34:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001f36:	23e0      	movs	r3, #224	@ 0xe0
 8001f38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f42:	2300      	movs	r3, #0
 8001f44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f46:	2305      	movs	r3, #5
 8001f48:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f4a:	f107 0314 	add.w	r3, r7, #20
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4805      	ldr	r0, [pc, #20]	@ (8001f68 <HAL_SPI_MspInit+0x8c>)
 8001f52:	f001 fbc9 	bl	80036e8 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001f56:	bf00      	nop
 8001f58:	3728      	adds	r7, #40	@ 0x28
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40013000 	.word	0x40013000
 8001f64:	40023800 	.word	0x40023800
 8001f68:	40020000 	.word	0x40020000

08001f6c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a0b      	ldr	r2, [pc, #44]	@ (8001fa8 <HAL_TIM_Base_MspInit+0x3c>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d10d      	bne.n	8001f9a <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	4b0a      	ldr	r3, [pc, #40]	@ (8001fac <HAL_TIM_Base_MspInit+0x40>)
 8001f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f86:	4a09      	ldr	r2, [pc, #36]	@ (8001fac <HAL_TIM_Base_MspInit+0x40>)
 8001f88:	f043 0302 	orr.w	r3, r3, #2
 8001f8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f8e:	4b07      	ldr	r3, [pc, #28]	@ (8001fac <HAL_TIM_Base_MspInit+0x40>)
 8001f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001f9a:	bf00      	nop
 8001f9c:	3714      	adds	r7, #20
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	40000400 	.word	0x40000400
 8001fac:	40023800 	.word	0x40023800

08001fb0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b088      	sub	sp, #32
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb8:	f107 030c 	add.w	r3, r7, #12
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	605a      	str	r2, [r3, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
 8001fc4:	60da      	str	r2, [r3, #12]
 8001fc6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a12      	ldr	r2, [pc, #72]	@ (8002018 <HAL_TIM_MspPostInit+0x68>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d11e      	bne.n	8002010 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	60bb      	str	r3, [r7, #8]
 8001fd6:	4b11      	ldr	r3, [pc, #68]	@ (800201c <HAL_TIM_MspPostInit+0x6c>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fda:	4a10      	ldr	r2, [pc, #64]	@ (800201c <HAL_TIM_MspPostInit+0x6c>)
 8001fdc:	f043 0304 	orr.w	r3, r3, #4
 8001fe0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fe2:	4b0e      	ldr	r3, [pc, #56]	@ (800201c <HAL_TIM_MspPostInit+0x6c>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe6:	f003 0304 	and.w	r3, r3, #4
 8001fea:	60bb      	str	r3, [r7, #8]
 8001fec:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = Vel_I_Pin|Vel_D_Pin;
 8001fee:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001ff2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002000:	2302      	movs	r3, #2
 8002002:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002004:	f107 030c 	add.w	r3, r7, #12
 8002008:	4619      	mov	r1, r3
 800200a:	4805      	ldr	r0, [pc, #20]	@ (8002020 <HAL_TIM_MspPostInit+0x70>)
 800200c:	f001 fb6c 	bl	80036e8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002010:	bf00      	nop
 8002012:	3720      	adds	r7, #32
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40000400 	.word	0x40000400
 800201c:	40023800 	.word	0x40023800
 8002020:	40020800 	.word	0x40020800

08002024 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b08a      	sub	sp, #40	@ 0x28
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800202c:	f107 0314 	add.w	r3, r7, #20
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	605a      	str	r2, [r3, #4]
 8002036:	609a      	str	r2, [r3, #8]
 8002038:	60da      	str	r2, [r3, #12]
 800203a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a2c      	ldr	r2, [pc, #176]	@ (80020f4 <HAL_UART_MspInit+0xd0>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d152      	bne.n	80020ec <HAL_UART_MspInit+0xc8>
  {
    /* USER CODE BEGIN UART5_MspInit 0 */

    /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	613b      	str	r3, [r7, #16]
 800204a:	4b2b      	ldr	r3, [pc, #172]	@ (80020f8 <HAL_UART_MspInit+0xd4>)
 800204c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204e:	4a2a      	ldr	r2, [pc, #168]	@ (80020f8 <HAL_UART_MspInit+0xd4>)
 8002050:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002054:	6413      	str	r3, [r2, #64]	@ 0x40
 8002056:	4b28      	ldr	r3, [pc, #160]	@ (80020f8 <HAL_UART_MspInit+0xd4>)
 8002058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800205e:	613b      	str	r3, [r7, #16]
 8002060:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	4b24      	ldr	r3, [pc, #144]	@ (80020f8 <HAL_UART_MspInit+0xd4>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206a:	4a23      	ldr	r2, [pc, #140]	@ (80020f8 <HAL_UART_MspInit+0xd4>)
 800206c:	f043 0304 	orr.w	r3, r3, #4
 8002070:	6313      	str	r3, [r2, #48]	@ 0x30
 8002072:	4b21      	ldr	r3, [pc, #132]	@ (80020f8 <HAL_UART_MspInit+0xd4>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002076:	f003 0304 	and.w	r3, r3, #4
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800207e:	2300      	movs	r3, #0
 8002080:	60bb      	str	r3, [r7, #8]
 8002082:	4b1d      	ldr	r3, [pc, #116]	@ (80020f8 <HAL_UART_MspInit+0xd4>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002086:	4a1c      	ldr	r2, [pc, #112]	@ (80020f8 <HAL_UART_MspInit+0xd4>)
 8002088:	f043 0308 	orr.w	r3, r3, #8
 800208c:	6313      	str	r3, [r2, #48]	@ 0x30
 800208e:	4b1a      	ldr	r3, [pc, #104]	@ (80020f8 <HAL_UART_MspInit+0xd4>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002092:	f003 0308 	and.w	r3, r3, #8
 8002096:	60bb      	str	r3, [r7, #8]
 8002098:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800209a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800209e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a0:	2302      	movs	r3, #2
 80020a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a8:	2303      	movs	r3, #3
 80020aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80020ac:	2308      	movs	r3, #8
 80020ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020b0:	f107 0314 	add.w	r3, r7, #20
 80020b4:	4619      	mov	r1, r3
 80020b6:	4811      	ldr	r0, [pc, #68]	@ (80020fc <HAL_UART_MspInit+0xd8>)
 80020b8:	f001 fb16 	bl	80036e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80020bc:	2304      	movs	r3, #4
 80020be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c0:	2302      	movs	r3, #2
 80020c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c8:	2303      	movs	r3, #3
 80020ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80020cc:	2308      	movs	r3, #8
 80020ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020d0:	f107 0314 	add.w	r3, r7, #20
 80020d4:	4619      	mov	r1, r3
 80020d6:	480a      	ldr	r0, [pc, #40]	@ (8002100 <HAL_UART_MspInit+0xdc>)
 80020d8:	f001 fb06 	bl	80036e8 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80020dc:	2200      	movs	r2, #0
 80020de:	2100      	movs	r1, #0
 80020e0:	2035      	movs	r0, #53	@ 0x35
 80020e2:	f000 feba 	bl	8002e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80020e6:	2035      	movs	r0, #53	@ 0x35
 80020e8:	f000 fed3 	bl	8002e92 <HAL_NVIC_EnableIRQ>

    /* USER CODE END UART5_MspInit 1 */

  }

}
 80020ec:	bf00      	nop
 80020ee:	3728      	adds	r7, #40	@ 0x28
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	40005000 	.word	0x40005000
 80020f8:	40023800 	.word	0x40023800
 80020fc:	40020800 	.word	0x40020800
 8002100:	40020c00 	.word	0x40020c00

08002104 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002108:	bf00      	nop
 800210a:	e7fd      	b.n	8002108 <NMI_Handler+0x4>

0800210c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002110:	bf00      	nop
 8002112:	e7fd      	b.n	8002110 <HardFault_Handler+0x4>

08002114 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002118:	bf00      	nop
 800211a:	e7fd      	b.n	8002118 <MemManage_Handler+0x4>

0800211c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002120:	bf00      	nop
 8002122:	e7fd      	b.n	8002120 <BusFault_Handler+0x4>

08002124 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002128:	bf00      	nop
 800212a:	e7fd      	b.n	8002128 <UsageFault_Handler+0x4>

0800212c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002130:	bf00      	nop
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800213a:	b480      	push	{r7}
 800213c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800213e:	bf00      	nop
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800214c:	bf00      	nop
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr

08002156 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800215a:	f000 f939 	bl	80023d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}

08002162 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(WallSensor_Pin);
 8002166:	2040      	movs	r0, #64	@ 0x40
 8002168:	f001 fc8c 	bl	8003a84 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LineSensor_Pin);
 800216c:	2080      	movs	r0, #128	@ 0x80
 800216e:	f001 fc89 	bl	8003a84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002172:	bf00      	nop
 8002174:	bd80      	pop	{r7, pc}
	...

08002178 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800217c:	4802      	ldr	r0, [pc, #8]	@ (8002188 <UART5_IRQHandler+0x10>)
 800217e:	f005 fbbf 	bl	8007900 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002182:	bf00      	nop
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	200002e8 	.word	0x200002e8

0800218c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002190:	4802      	ldr	r0, [pc, #8]	@ (800219c <DMA2_Stream0_IRQHandler+0x10>)
 8002192:	f001 f83f 	bl	8003214 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002196:	bf00      	nop
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	20000194 	.word	0x20000194

080021a0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80021a4:	4802      	ldr	r0, [pc, #8]	@ (80021b0 <OTG_FS_IRQHandler+0x10>)
 80021a6:	f001 ff65 	bl	8004074 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80021aa:	bf00      	nop
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	200008cc 	.word	0x200008cc

080021b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b086      	sub	sp, #24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021bc:	4a14      	ldr	r2, [pc, #80]	@ (8002210 <_sbrk+0x5c>)
 80021be:	4b15      	ldr	r3, [pc, #84]	@ (8002214 <_sbrk+0x60>)
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021c8:	4b13      	ldr	r3, [pc, #76]	@ (8002218 <_sbrk+0x64>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d102      	bne.n	80021d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021d0:	4b11      	ldr	r3, [pc, #68]	@ (8002218 <_sbrk+0x64>)
 80021d2:	4a12      	ldr	r2, [pc, #72]	@ (800221c <_sbrk+0x68>)
 80021d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021d6:	4b10      	ldr	r3, [pc, #64]	@ (8002218 <_sbrk+0x64>)
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4413      	add	r3, r2
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d207      	bcs.n	80021f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021e4:	f00a f8fe 	bl	800c3e4 <__errno>
 80021e8:	4603      	mov	r3, r0
 80021ea:	220c      	movs	r2, #12
 80021ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80021f2:	e009      	b.n	8002208 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021f4:	4b08      	ldr	r3, [pc, #32]	@ (8002218 <_sbrk+0x64>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021fa:	4b07      	ldr	r3, [pc, #28]	@ (8002218 <_sbrk+0x64>)
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4413      	add	r3, r2
 8002202:	4a05      	ldr	r2, [pc, #20]	@ (8002218 <_sbrk+0x64>)
 8002204:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002206:	68fb      	ldr	r3, [r7, #12]
}
 8002208:	4618      	mov	r0, r3
 800220a:	3718      	adds	r7, #24
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	20020000 	.word	0x20020000
 8002214:	00000400 	.word	0x00000400
 8002218:	200004c8 	.word	0x200004c8
 800221c:	20000df8 	.word	0x20000df8

08002220 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002224:	4b06      	ldr	r3, [pc, #24]	@ (8002240 <SystemInit+0x20>)
 8002226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800222a:	4a05      	ldr	r2, [pc, #20]	@ (8002240 <SystemInit+0x20>)
 800222c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002230:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002234:	bf00      	nop
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	e000ed00 	.word	0xe000ed00

08002244 <Transmision>:

char mensaje[16];
const uint8_t delay = 50;
uint8_t buffer[16];

void Transmision(void) {
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
    strcat(mensaje, "\r\n");
 8002248:	480b      	ldr	r0, [pc, #44]	@ (8002278 <Transmision+0x34>)
 800224a:	f7fd ffc1 	bl	80001d0 <strlen>
 800224e:	4603      	mov	r3, r0
 8002250:	461a      	mov	r2, r3
 8002252:	4b09      	ldr	r3, [pc, #36]	@ (8002278 <Transmision+0x34>)
 8002254:	4413      	add	r3, r2
 8002256:	4a09      	ldr	r2, [pc, #36]	@ (800227c <Transmision+0x38>)
 8002258:	8811      	ldrh	r1, [r2, #0]
 800225a:	7892      	ldrb	r2, [r2, #2]
 800225c:	8019      	strh	r1, [r3, #0]
 800225e:	709a      	strb	r2, [r3, #2]
    HAL_UART_Transmit(&huart5, (uint8_t*) mensaje, strlen(mensaje), delay);
 8002260:	4805      	ldr	r0, [pc, #20]	@ (8002278 <Transmision+0x34>)
 8002262:	f7fd ffb5 	bl	80001d0 <strlen>
 8002266:	4603      	mov	r3, r0
 8002268:	b29a      	uxth	r2, r3
 800226a:	2332      	movs	r3, #50	@ 0x32
 800226c:	4902      	ldr	r1, [pc, #8]	@ (8002278 <Transmision+0x34>)
 800226e:	4804      	ldr	r0, [pc, #16]	@ (8002280 <Transmision+0x3c>)
 8002270:	f005 fa96 	bl	80077a0 <HAL_UART_Transmit>
}
 8002274:	bf00      	nop
 8002276:	bd80      	pop	{r7, pc}
 8002278:	200004cc 	.word	0x200004cc
 800227c:	0800cb80 	.word	0x0800cb80
 8002280:	200002e8 	.word	0x200002e8

08002284 <Inicializar_UART>:

void Inicializar_UART(void) {
 8002284:	b598      	push	{r3, r4, r7, lr}
 8002286:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart5, buffer, sizeof(buffer));
 8002288:	2210      	movs	r2, #16
 800228a:	490f      	ldr	r1, [pc, #60]	@ (80022c8 <Inicializar_UART+0x44>)
 800228c:	480f      	ldr	r0, [pc, #60]	@ (80022cc <Inicializar_UART+0x48>)
 800228e:	f005 fb12 	bl	80078b6 <HAL_UART_Receive_IT>
    mensaje[0]='\r';
 8002292:	4b0f      	ldr	r3, [pc, #60]	@ (80022d0 <Inicializar_UART+0x4c>)
 8002294:	220d      	movs	r2, #13
 8002296:	701a      	strb	r2, [r3, #0]
    mensaje[1]='\n';
 8002298:	4b0d      	ldr	r3, [pc, #52]	@ (80022d0 <Inicializar_UART+0x4c>)
 800229a:	220a      	movs	r2, #10
 800229c:	705a      	strb	r2, [r3, #1]
    mensaje[2]='\0';
 800229e:	4b0c      	ldr	r3, [pc, #48]	@ (80022d0 <Inicializar_UART+0x4c>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	709a      	strb	r2, [r3, #2]
    Transmision();
 80022a4:	f7ff ffce 	bl	8002244 <Transmision>
    strcpy(mensaje, "UART conectada");
 80022a8:	4a09      	ldr	r2, [pc, #36]	@ (80022d0 <Inicializar_UART+0x4c>)
 80022aa:	4b0a      	ldr	r3, [pc, #40]	@ (80022d4 <Inicializar_UART+0x50>)
 80022ac:	4614      	mov	r4, r2
 80022ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022b0:	c407      	stmia	r4!, {r0, r1, r2}
 80022b2:	8023      	strh	r3, [r4, #0]
 80022b4:	3402      	adds	r4, #2
 80022b6:	0c1b      	lsrs	r3, r3, #16
 80022b8:	7023      	strb	r3, [r4, #0]
    Transmision();
 80022ba:	f7ff ffc3 	bl	8002244 <Transmision>
    mensaje[0]='\0';
 80022be:	4b04      	ldr	r3, [pc, #16]	@ (80022d0 <Inicializar_UART+0x4c>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	701a      	strb	r2, [r3, #0]

}
 80022c4:	bf00      	nop
 80022c6:	bd98      	pop	{r3, r4, r7, pc}
 80022c8:	200004dc 	.word	0x200004dc
 80022cc:	200002e8 	.word	0x200002e8
 80022d0:	200004cc 	.word	0x200004cc
 80022d4:	0800cb84 	.word	0x0800cb84

080022d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80022d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002310 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80022dc:	f7ff ffa0 	bl	8002220 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022e0:	480c      	ldr	r0, [pc, #48]	@ (8002314 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022e2:	490d      	ldr	r1, [pc, #52]	@ (8002318 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022e4:	4a0d      	ldr	r2, [pc, #52]	@ (800231c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022e8:	e002      	b.n	80022f0 <LoopCopyDataInit>

080022ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022ee:	3304      	adds	r3, #4

080022f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022f4:	d3f9      	bcc.n	80022ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002320 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022f8:	4c0a      	ldr	r4, [pc, #40]	@ (8002324 <LoopFillZerobss+0x22>)
  movs r3, #0
 80022fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022fc:	e001      	b.n	8002302 <LoopFillZerobss>

080022fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002300:	3204      	adds	r2, #4

08002302 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002302:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002304:	d3fb      	bcc.n	80022fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002306:	f00a f873 	bl	800c3f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800230a:	f7fe fe81 	bl	8001010 <main>
  bx  lr    
 800230e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002310:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002314:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002318:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 800231c:	0800cc00 	.word	0x0800cc00
  ldr r2, =_sbss
 8002320:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8002324:	20000df4 	.word	0x20000df4

08002328 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002328:	e7fe      	b.n	8002328 <ADC_IRQHandler>
	...

0800232c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002330:	4b0e      	ldr	r3, [pc, #56]	@ (800236c <HAL_Init+0x40>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a0d      	ldr	r2, [pc, #52]	@ (800236c <HAL_Init+0x40>)
 8002336:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800233a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800233c:	4b0b      	ldr	r3, [pc, #44]	@ (800236c <HAL_Init+0x40>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a0a      	ldr	r2, [pc, #40]	@ (800236c <HAL_Init+0x40>)
 8002342:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002346:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002348:	4b08      	ldr	r3, [pc, #32]	@ (800236c <HAL_Init+0x40>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a07      	ldr	r2, [pc, #28]	@ (800236c <HAL_Init+0x40>)
 800234e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002352:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002354:	2003      	movs	r0, #3
 8002356:	f000 fd75 	bl	8002e44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800235a:	2000      	movs	r0, #0
 800235c:	f000 f808 	bl	8002370 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002360:	f7ff fcd4 	bl	8001d0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40023c00 	.word	0x40023c00

08002370 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002378:	4b12      	ldr	r3, [pc, #72]	@ (80023c4 <HAL_InitTick+0x54>)
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	4b12      	ldr	r3, [pc, #72]	@ (80023c8 <HAL_InitTick+0x58>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	4619      	mov	r1, r3
 8002382:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002386:	fbb3 f3f1 	udiv	r3, r3, r1
 800238a:	fbb2 f3f3 	udiv	r3, r2, r3
 800238e:	4618      	mov	r0, r3
 8002390:	f000 fd9b 	bl	8002eca <HAL_SYSTICK_Config>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e00e      	b.n	80023bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2b0f      	cmp	r3, #15
 80023a2:	d80a      	bhi.n	80023ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023a4:	2200      	movs	r2, #0
 80023a6:	6879      	ldr	r1, [r7, #4]
 80023a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80023ac:	f000 fd55 	bl	8002e5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023b0:	4a06      	ldr	r2, [pc, #24]	@ (80023cc <HAL_InitTick+0x5c>)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
 80023b8:	e000      	b.n	80023bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3708      	adds	r7, #8
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	2000001c 	.word	0x2000001c
 80023c8:	20000024 	.word	0x20000024
 80023cc:	20000020 	.word	0x20000020

080023d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023d4:	4b06      	ldr	r3, [pc, #24]	@ (80023f0 <HAL_IncTick+0x20>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	461a      	mov	r2, r3
 80023da:	4b06      	ldr	r3, [pc, #24]	@ (80023f4 <HAL_IncTick+0x24>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4413      	add	r3, r2
 80023e0:	4a04      	ldr	r2, [pc, #16]	@ (80023f4 <HAL_IncTick+0x24>)
 80023e2:	6013      	str	r3, [r2, #0]
}
 80023e4:	bf00      	nop
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	20000024 	.word	0x20000024
 80023f4:	200004ec 	.word	0x200004ec

080023f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  return uwTick;
 80023fc:	4b03      	ldr	r3, [pc, #12]	@ (800240c <HAL_GetTick+0x14>)
 80023fe:	681b      	ldr	r3, [r3, #0]
}
 8002400:	4618      	mov	r0, r3
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	200004ec 	.word	0x200004ec

08002410 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002418:	f7ff ffee 	bl	80023f8 <HAL_GetTick>
 800241c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002428:	d005      	beq.n	8002436 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800242a:	4b0a      	ldr	r3, [pc, #40]	@ (8002454 <HAL_Delay+0x44>)
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	461a      	mov	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	4413      	add	r3, r2
 8002434:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002436:	bf00      	nop
 8002438:	f7ff ffde 	bl	80023f8 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	429a      	cmp	r2, r3
 8002446:	d8f7      	bhi.n	8002438 <HAL_Delay+0x28>
  {
  }
}
 8002448:	bf00      	nop
 800244a:	bf00      	nop
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	20000024 	.word	0x20000024

08002458 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002460:	2300      	movs	r3, #0
 8002462:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e033      	b.n	80024d6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002472:	2b00      	cmp	r3, #0
 8002474:	d109      	bne.n	800248a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f7ff fc70 	bl	8001d5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248e:	f003 0310 	and.w	r3, r3, #16
 8002492:	2b00      	cmp	r3, #0
 8002494:	d118      	bne.n	80024c8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800249a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800249e:	f023 0302 	bic.w	r3, r3, #2
 80024a2:	f043 0202 	orr.w	r2, r3, #2
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 fa58 	bl	8002960 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ba:	f023 0303 	bic.w	r3, r3, #3
 80024be:	f043 0201 	orr.w	r2, r3, #1
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	641a      	str	r2, [r3, #64]	@ 0x40
 80024c6:	e001      	b.n	80024cc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80024d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
	...

080024e0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b088      	sub	sp, #32
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80024ec:	2300      	movs	r3, #0
 80024ee:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024f0:	2300      	movs	r3, #0
 80024f2:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d101      	bne.n	8002502 <HAL_ADC_Start_DMA+0x22>
 80024fe:	2302      	movs	r3, #2
 8002500:	e0eb      	b.n	80026da <HAL_ADC_Start_DMA+0x1fa>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2201      	movs	r2, #1
 8002506:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f003 0301 	and.w	r3, r3, #1
 8002514:	2b01      	cmp	r3, #1
 8002516:	d018      	beq.n	800254a <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	689a      	ldr	r2, [r3, #8]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f042 0201 	orr.w	r2, r2, #1
 8002526:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002528:	4b6e      	ldr	r3, [pc, #440]	@ (80026e4 <HAL_ADC_Start_DMA+0x204>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a6e      	ldr	r2, [pc, #440]	@ (80026e8 <HAL_ADC_Start_DMA+0x208>)
 800252e:	fba2 2303 	umull	r2, r3, r2, r3
 8002532:	0c9a      	lsrs	r2, r3, #18
 8002534:	4613      	mov	r3, r2
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	4413      	add	r3, r2
 800253a:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 800253c:	e002      	b.n	8002544 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	3b01      	subs	r3, #1
 8002542:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1f9      	bne.n	800253e <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002554:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002558:	d107      	bne.n	800256a <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	689a      	ldr	r2, [r3, #8]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002568:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f003 0301 	and.w	r3, r3, #1
 8002574:	2b01      	cmp	r3, #1
 8002576:	f040 80a3 	bne.w	80026c0 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002582:	f023 0301 	bic.w	r3, r3, #1
 8002586:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002598:	2b00      	cmp	r3, #0
 800259a:	d007      	beq.n	80025ac <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80025a4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025b8:	d106      	bne.n	80025c8 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025be:	f023 0206 	bic.w	r2, r3, #6
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	645a      	str	r2, [r3, #68]	@ 0x44
 80025c6:	e002      	b.n	80025ce <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2200      	movs	r2, #0
 80025cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025d6:	4b45      	ldr	r3, [pc, #276]	@ (80026ec <HAL_ADC_Start_DMA+0x20c>)
 80025d8:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025de:	4a44      	ldr	r2, [pc, #272]	@ (80026f0 <HAL_ADC_Start_DMA+0x210>)
 80025e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025e6:	4a43      	ldr	r2, [pc, #268]	@ (80026f4 <HAL_ADC_Start_DMA+0x214>)
 80025e8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025ee:	4a42      	ldr	r2, [pc, #264]	@ (80026f8 <HAL_ADC_Start_DMA+0x218>)
 80025f0:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80025fa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	685a      	ldr	r2, [r3, #4]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800260a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	689a      	ldr	r2, [r3, #8]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800261a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	334c      	adds	r3, #76	@ 0x4c
 8002626:	4619      	mov	r1, r3
 8002628:	68ba      	ldr	r2, [r7, #8]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f000 fd08 	bl	8003040 <HAL_DMA_Start_IT>
 8002630:	4603      	mov	r3, r0
 8002632:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f003 031f 	and.w	r3, r3, #31
 800263c:	2b00      	cmp	r3, #0
 800263e:	d12a      	bne.n	8002696 <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a2d      	ldr	r2, [pc, #180]	@ (80026fc <HAL_ADC_Start_DMA+0x21c>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d015      	beq.n	8002676 <HAL_ADC_Start_DMA+0x196>
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a2c      	ldr	r2, [pc, #176]	@ (8002700 <HAL_ADC_Start_DMA+0x220>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d105      	bne.n	8002660 <HAL_ADC_Start_DMA+0x180>
 8002654:	4b25      	ldr	r3, [pc, #148]	@ (80026ec <HAL_ADC_Start_DMA+0x20c>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f003 031f 	and.w	r3, r3, #31
 800265c:	2b00      	cmp	r3, #0
 800265e:	d00a      	beq.n	8002676 <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a27      	ldr	r2, [pc, #156]	@ (8002704 <HAL_ADC_Start_DMA+0x224>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d136      	bne.n	80026d8 <HAL_ADC_Start_DMA+0x1f8>
 800266a:	4b20      	ldr	r3, [pc, #128]	@ (80026ec <HAL_ADC_Start_DMA+0x20c>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f003 0310 	and.w	r3, r3, #16
 8002672:	2b00      	cmp	r3, #0
 8002674:	d130      	bne.n	80026d8 <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d129      	bne.n	80026d8 <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	689a      	ldr	r2, [r3, #8]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002692:	609a      	str	r2, [r3, #8]
 8002694:	e020      	b.n	80026d8 <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a18      	ldr	r2, [pc, #96]	@ (80026fc <HAL_ADC_Start_DMA+0x21c>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d11b      	bne.n	80026d8 <HAL_ADC_Start_DMA+0x1f8>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d114      	bne.n	80026d8 <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	689a      	ldr	r2, [r3, #8]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80026bc:	609a      	str	r2, [r3, #8]
 80026be:	e00b      	b.n	80026d8 <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c4:	f043 0210 	orr.w	r2, r3, #16
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026d0:	f043 0201 	orr.w	r2, r3, #1
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 80026d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3720      	adds	r7, #32
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	2000001c 	.word	0x2000001c
 80026e8:	431bde83 	.word	0x431bde83
 80026ec:	40012300 	.word	0x40012300
 80026f0:	08002b59 	.word	0x08002b59
 80026f4:	08002c13 	.word	0x08002c13
 80026f8:	08002c2f 	.word	0x08002c2f
 80026fc:	40012000 	.word	0x40012000
 8002700:	40012100 	.word	0x40012100
 8002704:	40012200 	.word	0x40012200

08002708 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002726:	2300      	movs	r3, #0
 8002728:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002730:	2b01      	cmp	r3, #1
 8002732:	d101      	bne.n	8002738 <HAL_ADC_ConfigChannel+0x1c>
 8002734:	2302      	movs	r3, #2
 8002736:	e105      	b.n	8002944 <HAL_ADC_ConfigChannel+0x228>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2b09      	cmp	r3, #9
 8002746:	d925      	bls.n	8002794 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	68d9      	ldr	r1, [r3, #12]
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	b29b      	uxth	r3, r3
 8002754:	461a      	mov	r2, r3
 8002756:	4613      	mov	r3, r2
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	4413      	add	r3, r2
 800275c:	3b1e      	subs	r3, #30
 800275e:	2207      	movs	r2, #7
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	43da      	mvns	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	400a      	ands	r2, r1
 800276c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68d9      	ldr	r1, [r3, #12]
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	b29b      	uxth	r3, r3
 800277e:	4618      	mov	r0, r3
 8002780:	4603      	mov	r3, r0
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	4403      	add	r3, r0
 8002786:	3b1e      	subs	r3, #30
 8002788:	409a      	lsls	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	430a      	orrs	r2, r1
 8002790:	60da      	str	r2, [r3, #12]
 8002792:	e022      	b.n	80027da <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6919      	ldr	r1, [r3, #16]
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	b29b      	uxth	r3, r3
 80027a0:	461a      	mov	r2, r3
 80027a2:	4613      	mov	r3, r2
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	4413      	add	r3, r2
 80027a8:	2207      	movs	r2, #7
 80027aa:	fa02 f303 	lsl.w	r3, r2, r3
 80027ae:	43da      	mvns	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	400a      	ands	r2, r1
 80027b6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	6919      	ldr	r1, [r3, #16]
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	689a      	ldr	r2, [r3, #8]
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	4618      	mov	r0, r3
 80027ca:	4603      	mov	r3, r0
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	4403      	add	r3, r0
 80027d0:	409a      	lsls	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	430a      	orrs	r2, r1
 80027d8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	2b06      	cmp	r3, #6
 80027e0:	d824      	bhi.n	800282c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685a      	ldr	r2, [r3, #4]
 80027ec:	4613      	mov	r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	4413      	add	r3, r2
 80027f2:	3b05      	subs	r3, #5
 80027f4:	221f      	movs	r2, #31
 80027f6:	fa02 f303 	lsl.w	r3, r2, r3
 80027fa:	43da      	mvns	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	400a      	ands	r2, r1
 8002802:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	b29b      	uxth	r3, r3
 8002810:	4618      	mov	r0, r3
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685a      	ldr	r2, [r3, #4]
 8002816:	4613      	mov	r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	4413      	add	r3, r2
 800281c:	3b05      	subs	r3, #5
 800281e:	fa00 f203 	lsl.w	r2, r0, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	430a      	orrs	r2, r1
 8002828:	635a      	str	r2, [r3, #52]	@ 0x34
 800282a:	e04c      	b.n	80028c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	2b0c      	cmp	r3, #12
 8002832:	d824      	bhi.n	800287e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685a      	ldr	r2, [r3, #4]
 800283e:	4613      	mov	r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	4413      	add	r3, r2
 8002844:	3b23      	subs	r3, #35	@ 0x23
 8002846:	221f      	movs	r2, #31
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	43da      	mvns	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	400a      	ands	r2, r1
 8002854:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	b29b      	uxth	r3, r3
 8002862:	4618      	mov	r0, r3
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685a      	ldr	r2, [r3, #4]
 8002868:	4613      	mov	r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	4413      	add	r3, r2
 800286e:	3b23      	subs	r3, #35	@ 0x23
 8002870:	fa00 f203 	lsl.w	r2, r0, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	430a      	orrs	r2, r1
 800287a:	631a      	str	r2, [r3, #48]	@ 0x30
 800287c:	e023      	b.n	80028c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685a      	ldr	r2, [r3, #4]
 8002888:	4613      	mov	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	4413      	add	r3, r2
 800288e:	3b41      	subs	r3, #65	@ 0x41
 8002890:	221f      	movs	r2, #31
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	43da      	mvns	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	400a      	ands	r2, r1
 800289e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	4618      	mov	r0, r3
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	4613      	mov	r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	4413      	add	r3, r2
 80028b8:	3b41      	subs	r3, #65	@ 0x41
 80028ba:	fa00 f203 	lsl.w	r2, r0, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	430a      	orrs	r2, r1
 80028c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028c6:	4b22      	ldr	r3, [pc, #136]	@ (8002950 <HAL_ADC_ConfigChannel+0x234>)
 80028c8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a21      	ldr	r2, [pc, #132]	@ (8002954 <HAL_ADC_ConfigChannel+0x238>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d109      	bne.n	80028e8 <HAL_ADC_ConfigChannel+0x1cc>
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2b12      	cmp	r3, #18
 80028da:	d105      	bne.n	80028e8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a19      	ldr	r2, [pc, #100]	@ (8002954 <HAL_ADC_ConfigChannel+0x238>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d123      	bne.n	800293a <HAL_ADC_ConfigChannel+0x21e>
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2b10      	cmp	r3, #16
 80028f8:	d003      	beq.n	8002902 <HAL_ADC_ConfigChannel+0x1e6>
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2b11      	cmp	r3, #17
 8002900:	d11b      	bne.n	800293a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2b10      	cmp	r3, #16
 8002914:	d111      	bne.n	800293a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002916:	4b10      	ldr	r3, [pc, #64]	@ (8002958 <HAL_ADC_ConfigChannel+0x23c>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a10      	ldr	r2, [pc, #64]	@ (800295c <HAL_ADC_ConfigChannel+0x240>)
 800291c:	fba2 2303 	umull	r2, r3, r2, r3
 8002920:	0c9a      	lsrs	r2, r3, #18
 8002922:	4613      	mov	r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	4413      	add	r3, r2
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800292c:	e002      	b.n	8002934 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	3b01      	subs	r3, #1
 8002932:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1f9      	bne.n	800292e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	3714      	adds	r7, #20
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr
 8002950:	40012300 	.word	0x40012300
 8002954:	40012000 	.word	0x40012000
 8002958:	2000001c 	.word	0x2000001c
 800295c:	431bde83 	.word	0x431bde83

08002960 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002960:	b480      	push	{r7}
 8002962:	b085      	sub	sp, #20
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002968:	4b79      	ldr	r3, [pc, #484]	@ (8002b50 <ADC_Init+0x1f0>)
 800296a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	685a      	ldr	r2, [r3, #4]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	431a      	orrs	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	685a      	ldr	r2, [r3, #4]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002994:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	6859      	ldr	r1, [r3, #4]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	691b      	ldr	r3, [r3, #16]
 80029a0:	021a      	lsls	r2, r3, #8
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	430a      	orrs	r2, r1
 80029a8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	685a      	ldr	r2, [r3, #4]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80029b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	6859      	ldr	r1, [r3, #4]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689a      	ldr	r2, [r3, #8]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	430a      	orrs	r2, r1
 80029ca:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	689a      	ldr	r2, [r3, #8]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6899      	ldr	r1, [r3, #8]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	68da      	ldr	r2, [r3, #12]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	430a      	orrs	r2, r1
 80029ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029f2:	4a58      	ldr	r2, [pc, #352]	@ (8002b54 <ADC_Init+0x1f4>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d022      	beq.n	8002a3e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	689a      	ldr	r2, [r3, #8]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002a06:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6899      	ldr	r1, [r3, #8]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	430a      	orrs	r2, r1
 8002a18:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002a28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	6899      	ldr	r1, [r3, #8]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	609a      	str	r2, [r3, #8]
 8002a3c:	e00f      	b.n	8002a5e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	689a      	ldr	r2, [r3, #8]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002a4c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	689a      	ldr	r2, [r3, #8]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002a5c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	689a      	ldr	r2, [r3, #8]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 0202 	bic.w	r2, r2, #2
 8002a6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	6899      	ldr	r1, [r3, #8]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	7e1b      	ldrb	r3, [r3, #24]
 8002a78:	005a      	lsls	r2, r3, #1
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d01b      	beq.n	8002ac4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	685a      	ldr	r2, [r3, #4]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a9a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	685a      	ldr	r2, [r3, #4]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002aaa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6859      	ldr	r1, [r3, #4]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	035a      	lsls	r2, r3, #13
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	605a      	str	r2, [r3, #4]
 8002ac2:	e007      	b.n	8002ad4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	685a      	ldr	r2, [r3, #4]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ad2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002ae2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	69db      	ldr	r3, [r3, #28]
 8002aee:	3b01      	subs	r3, #1
 8002af0:	051a      	lsls	r2, r3, #20
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	430a      	orrs	r2, r1
 8002af8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	689a      	ldr	r2, [r3, #8]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002b08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	6899      	ldr	r1, [r3, #8]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002b16:	025a      	lsls	r2, r3, #9
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	689a      	ldr	r2, [r3, #8]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6899      	ldr	r1, [r3, #8]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	029a      	lsls	r2, r3, #10
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	430a      	orrs	r2, r1
 8002b42:	609a      	str	r2, [r3, #8]
}
 8002b44:	bf00      	nop
 8002b46:	3714      	adds	r7, #20
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr
 8002b50:	40012300 	.word	0x40012300
 8002b54:	0f000001 	.word	0x0f000001

08002b58 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b64:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d13c      	bne.n	8002bec <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b76:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d12b      	bne.n	8002be4 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d127      	bne.n	8002be4 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b9a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d006      	beq.n	8002bb0 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d119      	bne.n	8002be4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	685a      	ldr	r2, [r3, #4]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f022 0220 	bic.w	r2, r2, #32
 8002bbe:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d105      	bne.n	8002be4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bdc:	f043 0201 	orr.w	r2, r3, #1
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002be4:	68f8      	ldr	r0, [r7, #12]
 8002be6:	f7fd fd41 	bl	800066c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002bea:	e00e      	b.n	8002c0a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf0:	f003 0310 	and.w	r3, r3, #16
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d003      	beq.n	8002c00 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002bf8:	68f8      	ldr	r0, [r7, #12]
 8002bfa:	f7ff fd85 	bl	8002708 <HAL_ADC_ErrorCallback>
}
 8002bfe:	e004      	b.n	8002c0a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	4798      	blx	r3
}
 8002c0a:	bf00      	nop
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b084      	sub	sp, #16
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c1e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002c20:	68f8      	ldr	r0, [r7, #12]
 8002c22:	f7fd fd15 	bl	8000650 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c26:	bf00      	nop
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b084      	sub	sp, #16
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c3a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2240      	movs	r2, #64	@ 0x40
 8002c40:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c46:	f043 0204 	orr.w	r2, r3, #4
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002c4e:	68f8      	ldr	r0, [r7, #12]
 8002c50:	f7ff fd5a 	bl	8002708 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c54:	bf00      	nop
 8002c56:	3710      	adds	r7, #16
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f003 0307 	and.w	r3, r3, #7
 8002c6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c72:	68ba      	ldr	r2, [r7, #8]
 8002c74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c78:	4013      	ands	r3, r2
 8002c7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c8e:	4a04      	ldr	r2, [pc, #16]	@ (8002ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	60d3      	str	r3, [r2, #12]
}
 8002c94:	bf00      	nop
 8002c96:	3714      	adds	r7, #20
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr
 8002ca0:	e000ed00 	.word	0xe000ed00

08002ca4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ca8:	4b04      	ldr	r3, [pc, #16]	@ (8002cbc <__NVIC_GetPriorityGrouping+0x18>)
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	0a1b      	lsrs	r3, r3, #8
 8002cae:	f003 0307 	and.w	r3, r3, #7
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr
 8002cbc:	e000ed00 	.word	0xe000ed00

08002cc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	db0b      	blt.n	8002cea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cd2:	79fb      	ldrb	r3, [r7, #7]
 8002cd4:	f003 021f 	and.w	r2, r3, #31
 8002cd8:	4907      	ldr	r1, [pc, #28]	@ (8002cf8 <__NVIC_EnableIRQ+0x38>)
 8002cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cde:	095b      	lsrs	r3, r3, #5
 8002ce0:	2001      	movs	r0, #1
 8002ce2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002cea:	bf00      	nop
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	e000e100 	.word	0xe000e100

08002cfc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	4603      	mov	r3, r0
 8002d04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	db12      	blt.n	8002d34 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d0e:	79fb      	ldrb	r3, [r7, #7]
 8002d10:	f003 021f 	and.w	r2, r3, #31
 8002d14:	490a      	ldr	r1, [pc, #40]	@ (8002d40 <__NVIC_DisableIRQ+0x44>)
 8002d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1a:	095b      	lsrs	r3, r3, #5
 8002d1c:	2001      	movs	r0, #1
 8002d1e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d22:	3320      	adds	r3, #32
 8002d24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002d28:	f3bf 8f4f 	dsb	sy
}
 8002d2c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002d2e:	f3bf 8f6f 	isb	sy
}
 8002d32:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002d34:	bf00      	nop
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr
 8002d40:	e000e100 	.word	0xe000e100

08002d44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	6039      	str	r1, [r7, #0]
 8002d4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	db0a      	blt.n	8002d6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	b2da      	uxtb	r2, r3
 8002d5c:	490c      	ldr	r1, [pc, #48]	@ (8002d90 <__NVIC_SetPriority+0x4c>)
 8002d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d62:	0112      	lsls	r2, r2, #4
 8002d64:	b2d2      	uxtb	r2, r2
 8002d66:	440b      	add	r3, r1
 8002d68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d6c:	e00a      	b.n	8002d84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	b2da      	uxtb	r2, r3
 8002d72:	4908      	ldr	r1, [pc, #32]	@ (8002d94 <__NVIC_SetPriority+0x50>)
 8002d74:	79fb      	ldrb	r3, [r7, #7]
 8002d76:	f003 030f 	and.w	r3, r3, #15
 8002d7a:	3b04      	subs	r3, #4
 8002d7c:	0112      	lsls	r2, r2, #4
 8002d7e:	b2d2      	uxtb	r2, r2
 8002d80:	440b      	add	r3, r1
 8002d82:	761a      	strb	r2, [r3, #24]
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr
 8002d90:	e000e100 	.word	0xe000e100
 8002d94:	e000ed00 	.word	0xe000ed00

08002d98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b089      	sub	sp, #36	@ 0x24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f003 0307 	and.w	r3, r3, #7
 8002daa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	f1c3 0307 	rsb	r3, r3, #7
 8002db2:	2b04      	cmp	r3, #4
 8002db4:	bf28      	it	cs
 8002db6:	2304      	movcs	r3, #4
 8002db8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	3304      	adds	r3, #4
 8002dbe:	2b06      	cmp	r3, #6
 8002dc0:	d902      	bls.n	8002dc8 <NVIC_EncodePriority+0x30>
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	3b03      	subs	r3, #3
 8002dc6:	e000      	b.n	8002dca <NVIC_EncodePriority+0x32>
 8002dc8:	2300      	movs	r3, #0
 8002dca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dcc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd6:	43da      	mvns	r2, r3
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	401a      	ands	r2, r3
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002de0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dea:	43d9      	mvns	r1, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002df0:	4313      	orrs	r3, r2
         );
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3724      	adds	r7, #36	@ 0x24
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
	...

08002e00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e10:	d301      	bcc.n	8002e16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e12:	2301      	movs	r3, #1
 8002e14:	e00f      	b.n	8002e36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e16:	4a0a      	ldr	r2, [pc, #40]	@ (8002e40 <SysTick_Config+0x40>)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e1e:	210f      	movs	r1, #15
 8002e20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002e24:	f7ff ff8e 	bl	8002d44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e28:	4b05      	ldr	r3, [pc, #20]	@ (8002e40 <SysTick_Config+0x40>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e2e:	4b04      	ldr	r3, [pc, #16]	@ (8002e40 <SysTick_Config+0x40>)
 8002e30:	2207      	movs	r2, #7
 8002e32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	e000e010 	.word	0xe000e010

08002e44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f7ff ff05 	bl	8002c5c <__NVIC_SetPriorityGrouping>
}
 8002e52:	bf00      	nop
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b086      	sub	sp, #24
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	4603      	mov	r3, r0
 8002e62:	60b9      	str	r1, [r7, #8]
 8002e64:	607a      	str	r2, [r7, #4]
 8002e66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e6c:	f7ff ff1a 	bl	8002ca4 <__NVIC_GetPriorityGrouping>
 8002e70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	68b9      	ldr	r1, [r7, #8]
 8002e76:	6978      	ldr	r0, [r7, #20]
 8002e78:	f7ff ff8e 	bl	8002d98 <NVIC_EncodePriority>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e82:	4611      	mov	r1, r2
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7ff ff5d 	bl	8002d44 <__NVIC_SetPriority>
}
 8002e8a:	bf00      	nop
 8002e8c:	3718      	adds	r7, #24
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b082      	sub	sp, #8
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	4603      	mov	r3, r0
 8002e9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7ff ff0d 	bl	8002cc0 <__NVIC_EnableIRQ>
}
 8002ea6:	bf00      	nop
 8002ea8:	3708      	adds	r7, #8
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b082      	sub	sp, #8
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff ff1d 	bl	8002cfc <__NVIC_DisableIRQ>
}
 8002ec2:	bf00      	nop
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b082      	sub	sp, #8
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f7ff ff94 	bl	8002e00 <SysTick_Config>
 8002ed8:	4603      	mov	r3, r0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
	...

08002ee4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002eec:	2300      	movs	r3, #0
 8002eee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ef0:	f7ff fa82 	bl	80023f8 <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d101      	bne.n	8002f00 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e099      	b.n	8003034 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2202      	movs	r2, #2
 8002f04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f022 0201 	bic.w	r2, r2, #1
 8002f1e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f20:	e00f      	b.n	8002f42 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f22:	f7ff fa69 	bl	80023f8 <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	2b05      	cmp	r3, #5
 8002f2e:	d908      	bls.n	8002f42 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2220      	movs	r2, #32
 8002f34:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2203      	movs	r2, #3
 8002f3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e078      	b.n	8003034 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0301 	and.w	r3, r3, #1
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1e8      	bne.n	8002f22 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f58:	697a      	ldr	r2, [r7, #20]
 8002f5a:	4b38      	ldr	r3, [pc, #224]	@ (800303c <HAL_DMA_Init+0x158>)
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685a      	ldr	r2, [r3, #4]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a1b      	ldr	r3, [r3, #32]
 8002f8c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f98:	2b04      	cmp	r3, #4
 8002f9a:	d107      	bne.n	8002fac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	697a      	ldr	r2, [r7, #20]
 8002fb2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	f023 0307 	bic.w	r3, r3, #7
 8002fc2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc8:	697a      	ldr	r2, [r7, #20]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd2:	2b04      	cmp	r3, #4
 8002fd4:	d117      	bne.n	8003006 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fda:	697a      	ldr	r2, [r7, #20]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d00e      	beq.n	8003006 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f000 fb01 	bl	80035f0 <DMA_CheckFifoParam>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d008      	beq.n	8003006 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2240      	movs	r2, #64	@ 0x40
 8002ff8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003002:	2301      	movs	r3, #1
 8003004:	e016      	b.n	8003034 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 fab8 	bl	8003584 <DMA_CalcBaseAndBitshift>
 8003014:	4603      	mov	r3, r0
 8003016:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800301c:	223f      	movs	r2, #63	@ 0x3f
 800301e:	409a      	lsls	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	3718      	adds	r7, #24
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	f010803f 	.word	0xf010803f

08003040 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
 800304c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800304e:	2300      	movs	r3, #0
 8003050:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003056:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800305e:	2b01      	cmp	r3, #1
 8003060:	d101      	bne.n	8003066 <HAL_DMA_Start_IT+0x26>
 8003062:	2302      	movs	r3, #2
 8003064:	e040      	b.n	80030e8 <HAL_DMA_Start_IT+0xa8>
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2201      	movs	r2, #1
 800306a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b01      	cmp	r3, #1
 8003078:	d12f      	bne.n	80030da <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2202      	movs	r2, #2
 800307e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	68b9      	ldr	r1, [r7, #8]
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f000 fa4a 	bl	8003528 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003098:	223f      	movs	r2, #63	@ 0x3f
 800309a:	409a      	lsls	r2, r3
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f042 0216 	orr.w	r2, r2, #22
 80030ae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d007      	beq.n	80030c8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f042 0208 	orr.w	r2, r2, #8
 80030c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f042 0201 	orr.w	r2, r2, #1
 80030d6:	601a      	str	r2, [r3, #0]
 80030d8:	e005      	b.n	80030e6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80030e2:	2302      	movs	r3, #2
 80030e4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80030e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3718      	adds	r7, #24
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030fc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80030fe:	f7ff f97b 	bl	80023f8 <HAL_GetTick>
 8003102:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b02      	cmp	r3, #2
 800310e:	d008      	beq.n	8003122 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2280      	movs	r2, #128	@ 0x80
 8003114:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e052      	b.n	80031c8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f022 0216 	bic.w	r2, r2, #22
 8003130:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	695a      	ldr	r2, [r3, #20]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003140:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003146:	2b00      	cmp	r3, #0
 8003148:	d103      	bne.n	8003152 <HAL_DMA_Abort+0x62>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800314e:	2b00      	cmp	r3, #0
 8003150:	d007      	beq.n	8003162 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f022 0208 	bic.w	r2, r2, #8
 8003160:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f022 0201 	bic.w	r2, r2, #1
 8003170:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003172:	e013      	b.n	800319c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003174:	f7ff f940 	bl	80023f8 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b05      	cmp	r3, #5
 8003180:	d90c      	bls.n	800319c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2220      	movs	r2, #32
 8003186:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2203      	movs	r2, #3
 800318c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e015      	b.n	80031c8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1e4      	bne.n	8003174 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ae:	223f      	movs	r2, #63	@ 0x3f
 80031b0:	409a      	lsls	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2201      	movs	r2, #1
 80031ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3710      	adds	r7, #16
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d004      	beq.n	80031ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2280      	movs	r2, #128	@ 0x80
 80031e8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e00c      	b.n	8003208 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2205      	movs	r2, #5
 80031f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f022 0201 	bic.w	r2, r2, #1
 8003204:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800321c:	2300      	movs	r3, #0
 800321e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003220:	4b8e      	ldr	r3, [pc, #568]	@ (800345c <HAL_DMA_IRQHandler+0x248>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a8e      	ldr	r2, [pc, #568]	@ (8003460 <HAL_DMA_IRQHandler+0x24c>)
 8003226:	fba2 2303 	umull	r2, r3, r2, r3
 800322a:	0a9b      	lsrs	r3, r3, #10
 800322c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003232:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800323e:	2208      	movs	r2, #8
 8003240:	409a      	lsls	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	4013      	ands	r3, r2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d01a      	beq.n	8003280 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0304 	and.w	r3, r3, #4
 8003254:	2b00      	cmp	r3, #0
 8003256:	d013      	beq.n	8003280 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f022 0204 	bic.w	r2, r2, #4
 8003266:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800326c:	2208      	movs	r2, #8
 800326e:	409a      	lsls	r2, r3
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003278:	f043 0201 	orr.w	r2, r3, #1
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003284:	2201      	movs	r2, #1
 8003286:	409a      	lsls	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	4013      	ands	r3, r2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d012      	beq.n	80032b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00b      	beq.n	80032b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032a2:	2201      	movs	r2, #1
 80032a4:	409a      	lsls	r2, r3
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ae:	f043 0202 	orr.w	r2, r3, #2
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032ba:	2204      	movs	r2, #4
 80032bc:	409a      	lsls	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	4013      	ands	r3, r2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d012      	beq.n	80032ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0302 	and.w	r3, r3, #2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00b      	beq.n	80032ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032d8:	2204      	movs	r2, #4
 80032da:	409a      	lsls	r2, r3
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032e4:	f043 0204 	orr.w	r2, r3, #4
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032f0:	2210      	movs	r2, #16
 80032f2:	409a      	lsls	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	4013      	ands	r3, r2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d043      	beq.n	8003384 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0308 	and.w	r3, r3, #8
 8003306:	2b00      	cmp	r3, #0
 8003308:	d03c      	beq.n	8003384 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800330e:	2210      	movs	r2, #16
 8003310:	409a      	lsls	r2, r3
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d018      	beq.n	8003356 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d108      	bne.n	8003344 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003336:	2b00      	cmp	r3, #0
 8003338:	d024      	beq.n	8003384 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	4798      	blx	r3
 8003342:	e01f      	b.n	8003384 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003348:	2b00      	cmp	r3, #0
 800334a:	d01b      	beq.n	8003384 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	4798      	blx	r3
 8003354:	e016      	b.n	8003384 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003360:	2b00      	cmp	r3, #0
 8003362:	d107      	bne.n	8003374 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f022 0208 	bic.w	r2, r2, #8
 8003372:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003378:	2b00      	cmp	r3, #0
 800337a:	d003      	beq.n	8003384 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003388:	2220      	movs	r2, #32
 800338a:	409a      	lsls	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	4013      	ands	r3, r2
 8003390:	2b00      	cmp	r3, #0
 8003392:	f000 808f 	beq.w	80034b4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0310 	and.w	r3, r3, #16
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f000 8087 	beq.w	80034b4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033aa:	2220      	movs	r2, #32
 80033ac:	409a      	lsls	r2, r3
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b05      	cmp	r3, #5
 80033bc:	d136      	bne.n	800342c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f022 0216 	bic.w	r2, r2, #22
 80033cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	695a      	ldr	r2, [r3, #20]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80033dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d103      	bne.n	80033ee <HAL_DMA_IRQHandler+0x1da>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d007      	beq.n	80033fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f022 0208 	bic.w	r2, r2, #8
 80033fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003402:	223f      	movs	r2, #63	@ 0x3f
 8003404:	409a      	lsls	r2, r3
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800341e:	2b00      	cmp	r3, #0
 8003420:	d07e      	beq.n	8003520 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	4798      	blx	r3
        }
        return;
 800342a:	e079      	b.n	8003520 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d01d      	beq.n	8003476 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d10d      	bne.n	8003464 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800344c:	2b00      	cmp	r3, #0
 800344e:	d031      	beq.n	80034b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	4798      	blx	r3
 8003458:	e02c      	b.n	80034b4 <HAL_DMA_IRQHandler+0x2a0>
 800345a:	bf00      	nop
 800345c:	2000001c 	.word	0x2000001c
 8003460:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003468:	2b00      	cmp	r3, #0
 800346a:	d023      	beq.n	80034b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	4798      	blx	r3
 8003474:	e01e      	b.n	80034b4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003480:	2b00      	cmp	r3, #0
 8003482:	d10f      	bne.n	80034a4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f022 0210 	bic.w	r2, r2, #16
 8003492:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d003      	beq.n	80034b4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d032      	beq.n	8003522 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034c0:	f003 0301 	and.w	r3, r3, #1
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d022      	beq.n	800350e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2205      	movs	r2, #5
 80034cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 0201 	bic.w	r2, r2, #1
 80034de:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	3301      	adds	r3, #1
 80034e4:	60bb      	str	r3, [r7, #8]
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d307      	bcc.n	80034fc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1f2      	bne.n	80034e0 <HAL_DMA_IRQHandler+0x2cc>
 80034fa:	e000      	b.n	80034fe <HAL_DMA_IRQHandler+0x2ea>
          break;
 80034fc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003512:	2b00      	cmp	r3, #0
 8003514:	d005      	beq.n	8003522 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	4798      	blx	r3
 800351e:	e000      	b.n	8003522 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003520:	bf00      	nop
    }
  }
}
 8003522:	3718      	adds	r7, #24
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003528:	b480      	push	{r7}
 800352a:	b085      	sub	sp, #20
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]
 8003534:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003544:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	2b40      	cmp	r3, #64	@ 0x40
 8003554:	d108      	bne.n	8003568 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68ba      	ldr	r2, [r7, #8]
 8003564:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003566:	e007      	b.n	8003578 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68ba      	ldr	r2, [r7, #8]
 800356e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	60da      	str	r2, [r3, #12]
}
 8003578:	bf00      	nop
 800357a:	3714      	adds	r7, #20
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003584:	b480      	push	{r7}
 8003586:	b085      	sub	sp, #20
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	b2db      	uxtb	r3, r3
 8003592:	3b10      	subs	r3, #16
 8003594:	4a14      	ldr	r2, [pc, #80]	@ (80035e8 <DMA_CalcBaseAndBitshift+0x64>)
 8003596:	fba2 2303 	umull	r2, r3, r2, r3
 800359a:	091b      	lsrs	r3, r3, #4
 800359c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800359e:	4a13      	ldr	r2, [pc, #76]	@ (80035ec <DMA_CalcBaseAndBitshift+0x68>)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	4413      	add	r3, r2
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	461a      	mov	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2b03      	cmp	r3, #3
 80035b0:	d909      	bls.n	80035c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80035ba:	f023 0303 	bic.w	r3, r3, #3
 80035be:	1d1a      	adds	r2, r3, #4
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	659a      	str	r2, [r3, #88]	@ 0x58
 80035c4:	e007      	b.n	80035d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80035ce:	f023 0303 	bic.w	r3, r3, #3
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3714      	adds	r7, #20
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	aaaaaaab 	.word	0xaaaaaaab
 80035ec:	0800cbb4 	.word	0x0800cbb4

080035f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b085      	sub	sp, #20
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035f8:	2300      	movs	r3, #0
 80035fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003600:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d11f      	bne.n	800364a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	2b03      	cmp	r3, #3
 800360e:	d856      	bhi.n	80036be <DMA_CheckFifoParam+0xce>
 8003610:	a201      	add	r2, pc, #4	@ (adr r2, 8003618 <DMA_CheckFifoParam+0x28>)
 8003612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003616:	bf00      	nop
 8003618:	08003629 	.word	0x08003629
 800361c:	0800363b 	.word	0x0800363b
 8003620:	08003629 	.word	0x08003629
 8003624:	080036bf 	.word	0x080036bf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800362c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d046      	beq.n	80036c2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003638:	e043      	b.n	80036c2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800363e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003642:	d140      	bne.n	80036c6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003648:	e03d      	b.n	80036c6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003652:	d121      	bne.n	8003698 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	2b03      	cmp	r3, #3
 8003658:	d837      	bhi.n	80036ca <DMA_CheckFifoParam+0xda>
 800365a:	a201      	add	r2, pc, #4	@ (adr r2, 8003660 <DMA_CheckFifoParam+0x70>)
 800365c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003660:	08003671 	.word	0x08003671
 8003664:	08003677 	.word	0x08003677
 8003668:	08003671 	.word	0x08003671
 800366c:	08003689 	.word	0x08003689
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	73fb      	strb	r3, [r7, #15]
      break;
 8003674:	e030      	b.n	80036d8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800367a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d025      	beq.n	80036ce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003686:	e022      	b.n	80036ce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800368c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003690:	d11f      	bne.n	80036d2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003696:	e01c      	b.n	80036d2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	2b02      	cmp	r3, #2
 800369c:	d903      	bls.n	80036a6 <DMA_CheckFifoParam+0xb6>
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	2b03      	cmp	r3, #3
 80036a2:	d003      	beq.n	80036ac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80036a4:	e018      	b.n	80036d8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	73fb      	strb	r3, [r7, #15]
      break;
 80036aa:	e015      	b.n	80036d8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00e      	beq.n	80036d6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	73fb      	strb	r3, [r7, #15]
      break;
 80036bc:	e00b      	b.n	80036d6 <DMA_CheckFifoParam+0xe6>
      break;
 80036be:	bf00      	nop
 80036c0:	e00a      	b.n	80036d8 <DMA_CheckFifoParam+0xe8>
      break;
 80036c2:	bf00      	nop
 80036c4:	e008      	b.n	80036d8 <DMA_CheckFifoParam+0xe8>
      break;
 80036c6:	bf00      	nop
 80036c8:	e006      	b.n	80036d8 <DMA_CheckFifoParam+0xe8>
      break;
 80036ca:	bf00      	nop
 80036cc:	e004      	b.n	80036d8 <DMA_CheckFifoParam+0xe8>
      break;
 80036ce:	bf00      	nop
 80036d0:	e002      	b.n	80036d8 <DMA_CheckFifoParam+0xe8>
      break;   
 80036d2:	bf00      	nop
 80036d4:	e000      	b.n	80036d8 <DMA_CheckFifoParam+0xe8>
      break;
 80036d6:	bf00      	nop
    }
  } 
  
  return status; 
 80036d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3714      	adds	r7, #20
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop

080036e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b089      	sub	sp, #36	@ 0x24
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036f2:	2300      	movs	r3, #0
 80036f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036f6:	2300      	movs	r3, #0
 80036f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036fa:	2300      	movs	r3, #0
 80036fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036fe:	2300      	movs	r3, #0
 8003700:	61fb      	str	r3, [r7, #28]
 8003702:	e16b      	b.n	80039dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003704:	2201      	movs	r2, #1
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	fa02 f303 	lsl.w	r3, r2, r3
 800370c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	4013      	ands	r3, r2
 8003716:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003718:	693a      	ldr	r2, [r7, #16]
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	429a      	cmp	r2, r3
 800371e:	f040 815a 	bne.w	80039d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f003 0303 	and.w	r3, r3, #3
 800372a:	2b01      	cmp	r3, #1
 800372c:	d005      	beq.n	800373a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003736:	2b02      	cmp	r3, #2
 8003738:	d130      	bne.n	800379c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	005b      	lsls	r3, r3, #1
 8003744:	2203      	movs	r2, #3
 8003746:	fa02 f303 	lsl.w	r3, r2, r3
 800374a:	43db      	mvns	r3, r3
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	4013      	ands	r3, r2
 8003750:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	68da      	ldr	r2, [r3, #12]
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	fa02 f303 	lsl.w	r3, r2, r3
 800375e:	69ba      	ldr	r2, [r7, #24]
 8003760:	4313      	orrs	r3, r2
 8003762:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	69ba      	ldr	r2, [r7, #24]
 8003768:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003770:	2201      	movs	r2, #1
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	fa02 f303 	lsl.w	r3, r2, r3
 8003778:	43db      	mvns	r3, r3
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	4013      	ands	r3, r2
 800377e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	091b      	lsrs	r3, r3, #4
 8003786:	f003 0201 	and.w	r2, r3, #1
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	fa02 f303 	lsl.w	r3, r2, r3
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	4313      	orrs	r3, r2
 8003794:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f003 0303 	and.w	r3, r3, #3
 80037a4:	2b03      	cmp	r3, #3
 80037a6:	d017      	beq.n	80037d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	005b      	lsls	r3, r3, #1
 80037b2:	2203      	movs	r2, #3
 80037b4:	fa02 f303 	lsl.w	r3, r2, r3
 80037b8:	43db      	mvns	r3, r3
 80037ba:	69ba      	ldr	r2, [r7, #24]
 80037bc:	4013      	ands	r3, r2
 80037be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	689a      	ldr	r2, [r3, #8]
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	005b      	lsls	r3, r3, #1
 80037c8:	fa02 f303 	lsl.w	r3, r2, r3
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	69ba      	ldr	r2, [r7, #24]
 80037d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f003 0303 	and.w	r3, r3, #3
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	d123      	bne.n	800382c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	08da      	lsrs	r2, r3, #3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	3208      	adds	r2, #8
 80037ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	f003 0307 	and.w	r3, r3, #7
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	220f      	movs	r2, #15
 80037fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003800:	43db      	mvns	r3, r3
 8003802:	69ba      	ldr	r2, [r7, #24]
 8003804:	4013      	ands	r3, r2
 8003806:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	691a      	ldr	r2, [r3, #16]
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	f003 0307 	and.w	r3, r3, #7
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	fa02 f303 	lsl.w	r3, r2, r3
 8003818:	69ba      	ldr	r2, [r7, #24]
 800381a:	4313      	orrs	r3, r2
 800381c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	08da      	lsrs	r2, r3, #3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	3208      	adds	r2, #8
 8003826:	69b9      	ldr	r1, [r7, #24]
 8003828:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	005b      	lsls	r3, r3, #1
 8003836:	2203      	movs	r2, #3
 8003838:	fa02 f303 	lsl.w	r3, r2, r3
 800383c:	43db      	mvns	r3, r3
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	4013      	ands	r3, r2
 8003842:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f003 0203 	and.w	r2, r3, #3
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	005b      	lsls	r3, r3, #1
 8003850:	fa02 f303 	lsl.w	r3, r2, r3
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	4313      	orrs	r3, r2
 8003858:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	69ba      	ldr	r2, [r7, #24]
 800385e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003868:	2b00      	cmp	r3, #0
 800386a:	f000 80b4 	beq.w	80039d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800386e:	2300      	movs	r3, #0
 8003870:	60fb      	str	r3, [r7, #12]
 8003872:	4b60      	ldr	r3, [pc, #384]	@ (80039f4 <HAL_GPIO_Init+0x30c>)
 8003874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003876:	4a5f      	ldr	r2, [pc, #380]	@ (80039f4 <HAL_GPIO_Init+0x30c>)
 8003878:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800387c:	6453      	str	r3, [r2, #68]	@ 0x44
 800387e:	4b5d      	ldr	r3, [pc, #372]	@ (80039f4 <HAL_GPIO_Init+0x30c>)
 8003880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003882:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003886:	60fb      	str	r3, [r7, #12]
 8003888:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800388a:	4a5b      	ldr	r2, [pc, #364]	@ (80039f8 <HAL_GPIO_Init+0x310>)
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	089b      	lsrs	r3, r3, #2
 8003890:	3302      	adds	r3, #2
 8003892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003896:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	f003 0303 	and.w	r3, r3, #3
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	220f      	movs	r2, #15
 80038a2:	fa02 f303 	lsl.w	r3, r2, r3
 80038a6:	43db      	mvns	r3, r3
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	4013      	ands	r3, r2
 80038ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a52      	ldr	r2, [pc, #328]	@ (80039fc <HAL_GPIO_Init+0x314>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d02b      	beq.n	800390e <HAL_GPIO_Init+0x226>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a51      	ldr	r2, [pc, #324]	@ (8003a00 <HAL_GPIO_Init+0x318>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d025      	beq.n	800390a <HAL_GPIO_Init+0x222>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a50      	ldr	r2, [pc, #320]	@ (8003a04 <HAL_GPIO_Init+0x31c>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d01f      	beq.n	8003906 <HAL_GPIO_Init+0x21e>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a4f      	ldr	r2, [pc, #316]	@ (8003a08 <HAL_GPIO_Init+0x320>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d019      	beq.n	8003902 <HAL_GPIO_Init+0x21a>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a4e      	ldr	r2, [pc, #312]	@ (8003a0c <HAL_GPIO_Init+0x324>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d013      	beq.n	80038fe <HAL_GPIO_Init+0x216>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a4d      	ldr	r2, [pc, #308]	@ (8003a10 <HAL_GPIO_Init+0x328>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d00d      	beq.n	80038fa <HAL_GPIO_Init+0x212>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a4c      	ldr	r2, [pc, #304]	@ (8003a14 <HAL_GPIO_Init+0x32c>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d007      	beq.n	80038f6 <HAL_GPIO_Init+0x20e>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a4b      	ldr	r2, [pc, #300]	@ (8003a18 <HAL_GPIO_Init+0x330>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d101      	bne.n	80038f2 <HAL_GPIO_Init+0x20a>
 80038ee:	2307      	movs	r3, #7
 80038f0:	e00e      	b.n	8003910 <HAL_GPIO_Init+0x228>
 80038f2:	2308      	movs	r3, #8
 80038f4:	e00c      	b.n	8003910 <HAL_GPIO_Init+0x228>
 80038f6:	2306      	movs	r3, #6
 80038f8:	e00a      	b.n	8003910 <HAL_GPIO_Init+0x228>
 80038fa:	2305      	movs	r3, #5
 80038fc:	e008      	b.n	8003910 <HAL_GPIO_Init+0x228>
 80038fe:	2304      	movs	r3, #4
 8003900:	e006      	b.n	8003910 <HAL_GPIO_Init+0x228>
 8003902:	2303      	movs	r3, #3
 8003904:	e004      	b.n	8003910 <HAL_GPIO_Init+0x228>
 8003906:	2302      	movs	r3, #2
 8003908:	e002      	b.n	8003910 <HAL_GPIO_Init+0x228>
 800390a:	2301      	movs	r3, #1
 800390c:	e000      	b.n	8003910 <HAL_GPIO_Init+0x228>
 800390e:	2300      	movs	r3, #0
 8003910:	69fa      	ldr	r2, [r7, #28]
 8003912:	f002 0203 	and.w	r2, r2, #3
 8003916:	0092      	lsls	r2, r2, #2
 8003918:	4093      	lsls	r3, r2
 800391a:	69ba      	ldr	r2, [r7, #24]
 800391c:	4313      	orrs	r3, r2
 800391e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003920:	4935      	ldr	r1, [pc, #212]	@ (80039f8 <HAL_GPIO_Init+0x310>)
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	089b      	lsrs	r3, r3, #2
 8003926:	3302      	adds	r3, #2
 8003928:	69ba      	ldr	r2, [r7, #24]
 800392a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800392e:	4b3b      	ldr	r3, [pc, #236]	@ (8003a1c <HAL_GPIO_Init+0x334>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	43db      	mvns	r3, r3
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	4013      	ands	r3, r2
 800393c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d003      	beq.n	8003952 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800394a:	69ba      	ldr	r2, [r7, #24]
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	4313      	orrs	r3, r2
 8003950:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003952:	4a32      	ldr	r2, [pc, #200]	@ (8003a1c <HAL_GPIO_Init+0x334>)
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003958:	4b30      	ldr	r3, [pc, #192]	@ (8003a1c <HAL_GPIO_Init+0x334>)
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	43db      	mvns	r3, r3
 8003962:	69ba      	ldr	r2, [r7, #24]
 8003964:	4013      	ands	r3, r2
 8003966:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d003      	beq.n	800397c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	4313      	orrs	r3, r2
 800397a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800397c:	4a27      	ldr	r2, [pc, #156]	@ (8003a1c <HAL_GPIO_Init+0x334>)
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003982:	4b26      	ldr	r3, [pc, #152]	@ (8003a1c <HAL_GPIO_Init+0x334>)
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	43db      	mvns	r3, r3
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	4013      	ands	r3, r2
 8003990:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d003      	beq.n	80039a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800399e:	69ba      	ldr	r2, [r7, #24]
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039a6:	4a1d      	ldr	r2, [pc, #116]	@ (8003a1c <HAL_GPIO_Init+0x334>)
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039ac:	4b1b      	ldr	r3, [pc, #108]	@ (8003a1c <HAL_GPIO_Init+0x334>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	43db      	mvns	r3, r3
 80039b6:	69ba      	ldr	r2, [r7, #24]
 80039b8:	4013      	ands	r3, r2
 80039ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d003      	beq.n	80039d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039d0:	4a12      	ldr	r2, [pc, #72]	@ (8003a1c <HAL_GPIO_Init+0x334>)
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	3301      	adds	r3, #1
 80039da:	61fb      	str	r3, [r7, #28]
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	2b0f      	cmp	r3, #15
 80039e0:	f67f ae90 	bls.w	8003704 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039e4:	bf00      	nop
 80039e6:	bf00      	nop
 80039e8:	3724      	adds	r7, #36	@ 0x24
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	40023800 	.word	0x40023800
 80039f8:	40013800 	.word	0x40013800
 80039fc:	40020000 	.word	0x40020000
 8003a00:	40020400 	.word	0x40020400
 8003a04:	40020800 	.word	0x40020800
 8003a08:	40020c00 	.word	0x40020c00
 8003a0c:	40021000 	.word	0x40021000
 8003a10:	40021400 	.word	0x40021400
 8003a14:	40021800 	.word	0x40021800
 8003a18:	40021c00 	.word	0x40021c00
 8003a1c:	40013c00 	.word	0x40013c00

08003a20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	460b      	mov	r3, r1
 8003a2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	691a      	ldr	r2, [r3, #16]
 8003a30:	887b      	ldrh	r3, [r7, #2]
 8003a32:	4013      	ands	r3, r2
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d002      	beq.n	8003a3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	73fb      	strb	r3, [r7, #15]
 8003a3c:	e001      	b.n	8003a42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3714      	adds	r7, #20
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	460b      	mov	r3, r1
 8003a5a:	807b      	strh	r3, [r7, #2]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a60:	787b      	ldrb	r3, [r7, #1]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d003      	beq.n	8003a6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a66:	887a      	ldrh	r2, [r7, #2]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a6c:	e003      	b.n	8003a76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a6e:	887b      	ldrh	r3, [r7, #2]
 8003a70:	041a      	lsls	r2, r3, #16
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	619a      	str	r2, [r3, #24]
}
 8003a76:	bf00      	nop
 8003a78:	370c      	adds	r7, #12
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
	...

08003a84 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003a8e:	4b08      	ldr	r3, [pc, #32]	@ (8003ab0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a90:	695a      	ldr	r2, [r3, #20]
 8003a92:	88fb      	ldrh	r3, [r7, #6]
 8003a94:	4013      	ands	r3, r2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d006      	beq.n	8003aa8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a9a:	4a05      	ldr	r2, [pc, #20]	@ (8003ab0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a9c:	88fb      	ldrh	r3, [r7, #6]
 8003a9e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003aa0:	88fb      	ldrh	r3, [r7, #6]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7fd fff2 	bl	8001a8c <HAL_GPIO_EXTI_Callback>
  }
}
 8003aa8:	bf00      	nop
 8003aaa:	3708      	adds	r7, #8
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	40013c00 	.word	0x40013c00

08003ab4 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b086      	sub	sp, #24
 8003ab8:	af02      	add	r7, sp, #8
 8003aba:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e059      	b.n	8003b7a <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d106      	bne.n	8003ae6 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f008 f8db 	bl	800bc9c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2203      	movs	r2, #3
 8003aea:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003af4:	d102      	bne.n	8003afc <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4618      	mov	r0, r3
 8003b02:	f004 fee8 	bl	80088d6 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6818      	ldr	r0, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	7c1a      	ldrb	r2, [r3, #16]
 8003b0e:	f88d 2000 	strb.w	r2, [sp]
 8003b12:	3304      	adds	r3, #4
 8003b14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b16:	f004 fe69 	bl	80087ec <USB_CoreInit>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d005      	beq.n	8003b2c <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2202      	movs	r2, #2
 8003b24:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e026      	b.n	8003b7a <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2101      	movs	r1, #1
 8003b32:	4618      	mov	r0, r3
 8003b34:	f004 fee0 	bl	80088f8 <USB_SetCurrentMode>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d005      	beq.n	8003b4a <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2202      	movs	r2, #2
 8003b42:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e017      	b.n	8003b7a <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6818      	ldr	r0, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	7c1a      	ldrb	r2, [r3, #16]
 8003b52:	f88d 2000 	strb.w	r2, [sp]
 8003b56:	3304      	adds	r3, #4
 8003b58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b5a:	f005 f889 	bl	8008c70 <USB_HostInit>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d005      	beq.n	8003b70 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2202      	movs	r2, #2
 8003b68:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e004      	b.n	8003b7a <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8003b82:	b590      	push	{r4, r7, lr}
 8003b84:	b08b      	sub	sp, #44	@ 0x2c
 8003b86:	af04      	add	r7, sp, #16
 8003b88:	6078      	str	r0, [r7, #4]
 8003b8a:	4608      	mov	r0, r1
 8003b8c:	4611      	mov	r1, r2
 8003b8e:	461a      	mov	r2, r3
 8003b90:	4603      	mov	r3, r0
 8003b92:	70fb      	strb	r3, [r7, #3]
 8003b94:	460b      	mov	r3, r1
 8003b96:	70bb      	strb	r3, [r7, #2]
 8003b98:	4613      	mov	r3, r2
 8003b9a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8003b9c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003b9e:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d101      	bne.n	8003bae <HAL_HCD_HC_Init+0x2c>
 8003baa:	2302      	movs	r3, #2
 8003bac:	e09d      	b.n	8003cea <HAL_HCD_HC_Init+0x168>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8003bb6:	78fa      	ldrb	r2, [r7, #3]
 8003bb8:	6879      	ldr	r1, [r7, #4]
 8003bba:	4613      	mov	r3, r2
 8003bbc:	011b      	lsls	r3, r3, #4
 8003bbe:	1a9b      	subs	r3, r3, r2
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	440b      	add	r3, r1
 8003bc4:	3319      	adds	r3, #25
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003bca:	78fa      	ldrb	r2, [r7, #3]
 8003bcc:	6879      	ldr	r1, [r7, #4]
 8003bce:	4613      	mov	r3, r2
 8003bd0:	011b      	lsls	r3, r3, #4
 8003bd2:	1a9b      	subs	r3, r3, r2
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	440b      	add	r3, r1
 8003bd8:	3314      	adds	r3, #20
 8003bda:	787a      	ldrb	r2, [r7, #1]
 8003bdc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003bde:	78fa      	ldrb	r2, [r7, #3]
 8003be0:	6879      	ldr	r1, [r7, #4]
 8003be2:	4613      	mov	r3, r2
 8003be4:	011b      	lsls	r3, r3, #4
 8003be6:	1a9b      	subs	r3, r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	440b      	add	r3, r1
 8003bec:	3315      	adds	r3, #21
 8003bee:	78fa      	ldrb	r2, [r7, #3]
 8003bf0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003bf2:	78fa      	ldrb	r2, [r7, #3]
 8003bf4:	6879      	ldr	r1, [r7, #4]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	011b      	lsls	r3, r3, #4
 8003bfa:	1a9b      	subs	r3, r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	440b      	add	r3, r1
 8003c00:	3326      	adds	r3, #38	@ 0x26
 8003c02:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8003c06:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003c08:	78fa      	ldrb	r2, [r7, #3]
 8003c0a:	78bb      	ldrb	r3, [r7, #2]
 8003c0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c10:	b2d8      	uxtb	r0, r3
 8003c12:	6879      	ldr	r1, [r7, #4]
 8003c14:	4613      	mov	r3, r2
 8003c16:	011b      	lsls	r3, r3, #4
 8003c18:	1a9b      	subs	r3, r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	440b      	add	r3, r1
 8003c1e:	3316      	adds	r3, #22
 8003c20:	4602      	mov	r2, r0
 8003c22:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8003c24:	78fb      	ldrb	r3, [r7, #3]
 8003c26:	4619      	mov	r1, r3
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 fbc7 	bl	80043bc <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8003c2e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	da0a      	bge.n	8003c4c <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003c36:	78fa      	ldrb	r2, [r7, #3]
 8003c38:	6879      	ldr	r1, [r7, #4]
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	011b      	lsls	r3, r3, #4
 8003c3e:	1a9b      	subs	r3, r3, r2
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	440b      	add	r3, r1
 8003c44:	3317      	adds	r3, #23
 8003c46:	2201      	movs	r2, #1
 8003c48:	701a      	strb	r2, [r3, #0]
 8003c4a:	e009      	b.n	8003c60 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003c4c:	78fa      	ldrb	r2, [r7, #3]
 8003c4e:	6879      	ldr	r1, [r7, #4]
 8003c50:	4613      	mov	r3, r2
 8003c52:	011b      	lsls	r3, r3, #4
 8003c54:	1a9b      	subs	r3, r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	440b      	add	r3, r1
 8003c5a:	3317      	adds	r3, #23
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4618      	mov	r0, r3
 8003c66:	f005 f967 	bl	8008f38 <USB_GetHostSpeed>
 8003c6a:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8003c6c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d10b      	bne.n	8003c8c <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8003c74:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d107      	bne.n	8003c8c <HAL_HCD_HC_Init+0x10a>
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d104      	bne.n	8003c8c <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	2bbc      	cmp	r3, #188	@ 0xbc
 8003c86:	d901      	bls.n	8003c8c <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8003c88:	23bc      	movs	r3, #188	@ 0xbc
 8003c8a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8003c8c:	78fa      	ldrb	r2, [r7, #3]
 8003c8e:	6879      	ldr	r1, [r7, #4]
 8003c90:	4613      	mov	r3, r2
 8003c92:	011b      	lsls	r3, r3, #4
 8003c94:	1a9b      	subs	r3, r3, r2
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	440b      	add	r3, r1
 8003c9a:	3318      	adds	r3, #24
 8003c9c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8003ca0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8003ca2:	78fa      	ldrb	r2, [r7, #3]
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	b298      	uxth	r0, r3
 8003ca8:	6879      	ldr	r1, [r7, #4]
 8003caa:	4613      	mov	r3, r2
 8003cac:	011b      	lsls	r3, r3, #4
 8003cae:	1a9b      	subs	r3, r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	440b      	add	r3, r1
 8003cb4:	3328      	adds	r3, #40	@ 0x28
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6818      	ldr	r0, [r3, #0]
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	787c      	ldrb	r4, [r7, #1]
 8003cc4:	78ba      	ldrb	r2, [r7, #2]
 8003cc6:	78f9      	ldrb	r1, [r7, #3]
 8003cc8:	9302      	str	r3, [sp, #8]
 8003cca:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003cce:	9301      	str	r3, [sp, #4]
 8003cd0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003cd4:	9300      	str	r3, [sp, #0]
 8003cd6:	4623      	mov	r3, r4
 8003cd8:	f005 f956 	bl	8008f88 <USB_HC_Init>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8003ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	371c      	adds	r7, #28
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd90      	pop	{r4, r7, pc}

08003cf2 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b084      	sub	sp, #16
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d101      	bne.n	8003d10 <HAL_HCD_HC_Halt+0x1e>
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	e00f      	b.n	8003d30 <HAL_HCD_HC_Halt+0x3e>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	78fa      	ldrb	r2, [r7, #3]
 8003d1e:	4611      	mov	r1, r2
 8003d20:	4618      	mov	r0, r3
 8003d22:	f005 fce8 	bl	80096f6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8003d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3710      	adds	r7, #16
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	4608      	mov	r0, r1
 8003d42:	4611      	mov	r1, r2
 8003d44:	461a      	mov	r2, r3
 8003d46:	4603      	mov	r3, r0
 8003d48:	70fb      	strb	r3, [r7, #3]
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	70bb      	strb	r3, [r7, #2]
 8003d4e:	4613      	mov	r3, r2
 8003d50:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003d52:	78fa      	ldrb	r2, [r7, #3]
 8003d54:	6879      	ldr	r1, [r7, #4]
 8003d56:	4613      	mov	r3, r2
 8003d58:	011b      	lsls	r3, r3, #4
 8003d5a:	1a9b      	subs	r3, r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	440b      	add	r3, r1
 8003d60:	3317      	adds	r3, #23
 8003d62:	78ba      	ldrb	r2, [r7, #2]
 8003d64:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003d66:	78fa      	ldrb	r2, [r7, #3]
 8003d68:	6879      	ldr	r1, [r7, #4]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	011b      	lsls	r3, r3, #4
 8003d6e:	1a9b      	subs	r3, r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	440b      	add	r3, r1
 8003d74:	3326      	adds	r3, #38	@ 0x26
 8003d76:	787a      	ldrb	r2, [r7, #1]
 8003d78:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003d7a:	7c3b      	ldrb	r3, [r7, #16]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d114      	bne.n	8003daa <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003d80:	78fa      	ldrb	r2, [r7, #3]
 8003d82:	6879      	ldr	r1, [r7, #4]
 8003d84:	4613      	mov	r3, r2
 8003d86:	011b      	lsls	r3, r3, #4
 8003d88:	1a9b      	subs	r3, r3, r2
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	440b      	add	r3, r1
 8003d8e:	332a      	adds	r3, #42	@ 0x2a
 8003d90:	2203      	movs	r2, #3
 8003d92:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003d94:	78fa      	ldrb	r2, [r7, #3]
 8003d96:	6879      	ldr	r1, [r7, #4]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	011b      	lsls	r3, r3, #4
 8003d9c:	1a9b      	subs	r3, r3, r2
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	440b      	add	r3, r1
 8003da2:	3319      	adds	r3, #25
 8003da4:	7f3a      	ldrb	r2, [r7, #28]
 8003da6:	701a      	strb	r2, [r3, #0]
 8003da8:	e009      	b.n	8003dbe <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003daa:	78fa      	ldrb	r2, [r7, #3]
 8003dac:	6879      	ldr	r1, [r7, #4]
 8003dae:	4613      	mov	r3, r2
 8003db0:	011b      	lsls	r3, r3, #4
 8003db2:	1a9b      	subs	r3, r3, r2
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	440b      	add	r3, r1
 8003db8:	332a      	adds	r3, #42	@ 0x2a
 8003dba:	2202      	movs	r2, #2
 8003dbc:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003dbe:	787b      	ldrb	r3, [r7, #1]
 8003dc0:	2b03      	cmp	r3, #3
 8003dc2:	f200 8102 	bhi.w	8003fca <HAL_HCD_HC_SubmitRequest+0x292>
 8003dc6:	a201      	add	r2, pc, #4	@ (adr r2, 8003dcc <HAL_HCD_HC_SubmitRequest+0x94>)
 8003dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dcc:	08003ddd 	.word	0x08003ddd
 8003dd0:	08003fb5 	.word	0x08003fb5
 8003dd4:	08003ea1 	.word	0x08003ea1
 8003dd8:	08003f2b 	.word	0x08003f2b
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8003ddc:	7c3b      	ldrb	r3, [r7, #16]
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	f040 80f5 	bne.w	8003fce <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8003de4:	78bb      	ldrb	r3, [r7, #2]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d12d      	bne.n	8003e46 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8003dea:	8b3b      	ldrh	r3, [r7, #24]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d109      	bne.n	8003e04 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8003df0:	78fa      	ldrb	r2, [r7, #3]
 8003df2:	6879      	ldr	r1, [r7, #4]
 8003df4:	4613      	mov	r3, r2
 8003df6:	011b      	lsls	r3, r3, #4
 8003df8:	1a9b      	subs	r3, r3, r2
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	440b      	add	r3, r1
 8003dfe:	333d      	adds	r3, #61	@ 0x3d
 8003e00:	2201      	movs	r2, #1
 8003e02:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8003e04:	78fa      	ldrb	r2, [r7, #3]
 8003e06:	6879      	ldr	r1, [r7, #4]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	011b      	lsls	r3, r3, #4
 8003e0c:	1a9b      	subs	r3, r3, r2
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	440b      	add	r3, r1
 8003e12:	333d      	adds	r3, #61	@ 0x3d
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d10a      	bne.n	8003e30 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003e1a:	78fa      	ldrb	r2, [r7, #3]
 8003e1c:	6879      	ldr	r1, [r7, #4]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	011b      	lsls	r3, r3, #4
 8003e22:	1a9b      	subs	r3, r3, r2
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	440b      	add	r3, r1
 8003e28:	332a      	adds	r3, #42	@ 0x2a
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8003e2e:	e0ce      	b.n	8003fce <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003e30:	78fa      	ldrb	r2, [r7, #3]
 8003e32:	6879      	ldr	r1, [r7, #4]
 8003e34:	4613      	mov	r3, r2
 8003e36:	011b      	lsls	r3, r3, #4
 8003e38:	1a9b      	subs	r3, r3, r2
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	440b      	add	r3, r1
 8003e3e:	332a      	adds	r3, #42	@ 0x2a
 8003e40:	2202      	movs	r2, #2
 8003e42:	701a      	strb	r2, [r3, #0]
      break;
 8003e44:	e0c3      	b.n	8003fce <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8003e46:	78fa      	ldrb	r2, [r7, #3]
 8003e48:	6879      	ldr	r1, [r7, #4]
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	011b      	lsls	r3, r3, #4
 8003e4e:	1a9b      	subs	r3, r3, r2
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	440b      	add	r3, r1
 8003e54:	331a      	adds	r3, #26
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	f040 80b8 	bne.w	8003fce <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8003e5e:	78fa      	ldrb	r2, [r7, #3]
 8003e60:	6879      	ldr	r1, [r7, #4]
 8003e62:	4613      	mov	r3, r2
 8003e64:	011b      	lsls	r3, r3, #4
 8003e66:	1a9b      	subs	r3, r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	440b      	add	r3, r1
 8003e6c:	333c      	adds	r3, #60	@ 0x3c
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d10a      	bne.n	8003e8a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003e74:	78fa      	ldrb	r2, [r7, #3]
 8003e76:	6879      	ldr	r1, [r7, #4]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	011b      	lsls	r3, r3, #4
 8003e7c:	1a9b      	subs	r3, r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	440b      	add	r3, r1
 8003e82:	332a      	adds	r3, #42	@ 0x2a
 8003e84:	2200      	movs	r2, #0
 8003e86:	701a      	strb	r2, [r3, #0]
      break;
 8003e88:	e0a1      	b.n	8003fce <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003e8a:	78fa      	ldrb	r2, [r7, #3]
 8003e8c:	6879      	ldr	r1, [r7, #4]
 8003e8e:	4613      	mov	r3, r2
 8003e90:	011b      	lsls	r3, r3, #4
 8003e92:	1a9b      	subs	r3, r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	440b      	add	r3, r1
 8003e98:	332a      	adds	r3, #42	@ 0x2a
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	701a      	strb	r2, [r3, #0]
      break;
 8003e9e:	e096      	b.n	8003fce <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003ea0:	78bb      	ldrb	r3, [r7, #2]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d120      	bne.n	8003ee8 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003ea6:	78fa      	ldrb	r2, [r7, #3]
 8003ea8:	6879      	ldr	r1, [r7, #4]
 8003eaa:	4613      	mov	r3, r2
 8003eac:	011b      	lsls	r3, r3, #4
 8003eae:	1a9b      	subs	r3, r3, r2
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	440b      	add	r3, r1
 8003eb4:	333d      	adds	r3, #61	@ 0x3d
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d10a      	bne.n	8003ed2 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003ebc:	78fa      	ldrb	r2, [r7, #3]
 8003ebe:	6879      	ldr	r1, [r7, #4]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	011b      	lsls	r3, r3, #4
 8003ec4:	1a9b      	subs	r3, r3, r2
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	440b      	add	r3, r1
 8003eca:	332a      	adds	r3, #42	@ 0x2a
 8003ecc:	2200      	movs	r2, #0
 8003ece:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003ed0:	e07e      	b.n	8003fd0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003ed2:	78fa      	ldrb	r2, [r7, #3]
 8003ed4:	6879      	ldr	r1, [r7, #4]
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	011b      	lsls	r3, r3, #4
 8003eda:	1a9b      	subs	r3, r3, r2
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	440b      	add	r3, r1
 8003ee0:	332a      	adds	r3, #42	@ 0x2a
 8003ee2:	2202      	movs	r2, #2
 8003ee4:	701a      	strb	r2, [r3, #0]
      break;
 8003ee6:	e073      	b.n	8003fd0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003ee8:	78fa      	ldrb	r2, [r7, #3]
 8003eea:	6879      	ldr	r1, [r7, #4]
 8003eec:	4613      	mov	r3, r2
 8003eee:	011b      	lsls	r3, r3, #4
 8003ef0:	1a9b      	subs	r3, r3, r2
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	440b      	add	r3, r1
 8003ef6:	333c      	adds	r3, #60	@ 0x3c
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d10a      	bne.n	8003f14 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003efe:	78fa      	ldrb	r2, [r7, #3]
 8003f00:	6879      	ldr	r1, [r7, #4]
 8003f02:	4613      	mov	r3, r2
 8003f04:	011b      	lsls	r3, r3, #4
 8003f06:	1a9b      	subs	r3, r3, r2
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	440b      	add	r3, r1
 8003f0c:	332a      	adds	r3, #42	@ 0x2a
 8003f0e:	2200      	movs	r2, #0
 8003f10:	701a      	strb	r2, [r3, #0]
      break;
 8003f12:	e05d      	b.n	8003fd0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003f14:	78fa      	ldrb	r2, [r7, #3]
 8003f16:	6879      	ldr	r1, [r7, #4]
 8003f18:	4613      	mov	r3, r2
 8003f1a:	011b      	lsls	r3, r3, #4
 8003f1c:	1a9b      	subs	r3, r3, r2
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	440b      	add	r3, r1
 8003f22:	332a      	adds	r3, #42	@ 0x2a
 8003f24:	2202      	movs	r2, #2
 8003f26:	701a      	strb	r2, [r3, #0]
      break;
 8003f28:	e052      	b.n	8003fd0 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003f2a:	78bb      	ldrb	r3, [r7, #2]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d120      	bne.n	8003f72 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003f30:	78fa      	ldrb	r2, [r7, #3]
 8003f32:	6879      	ldr	r1, [r7, #4]
 8003f34:	4613      	mov	r3, r2
 8003f36:	011b      	lsls	r3, r3, #4
 8003f38:	1a9b      	subs	r3, r3, r2
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	440b      	add	r3, r1
 8003f3e:	333d      	adds	r3, #61	@ 0x3d
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d10a      	bne.n	8003f5c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003f46:	78fa      	ldrb	r2, [r7, #3]
 8003f48:	6879      	ldr	r1, [r7, #4]
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	011b      	lsls	r3, r3, #4
 8003f4e:	1a9b      	subs	r3, r3, r2
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	440b      	add	r3, r1
 8003f54:	332a      	adds	r3, #42	@ 0x2a
 8003f56:	2200      	movs	r2, #0
 8003f58:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003f5a:	e039      	b.n	8003fd0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003f5c:	78fa      	ldrb	r2, [r7, #3]
 8003f5e:	6879      	ldr	r1, [r7, #4]
 8003f60:	4613      	mov	r3, r2
 8003f62:	011b      	lsls	r3, r3, #4
 8003f64:	1a9b      	subs	r3, r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	440b      	add	r3, r1
 8003f6a:	332a      	adds	r3, #42	@ 0x2a
 8003f6c:	2202      	movs	r2, #2
 8003f6e:	701a      	strb	r2, [r3, #0]
      break;
 8003f70:	e02e      	b.n	8003fd0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003f72:	78fa      	ldrb	r2, [r7, #3]
 8003f74:	6879      	ldr	r1, [r7, #4]
 8003f76:	4613      	mov	r3, r2
 8003f78:	011b      	lsls	r3, r3, #4
 8003f7a:	1a9b      	subs	r3, r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	440b      	add	r3, r1
 8003f80:	333c      	adds	r3, #60	@ 0x3c
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d10a      	bne.n	8003f9e <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003f88:	78fa      	ldrb	r2, [r7, #3]
 8003f8a:	6879      	ldr	r1, [r7, #4]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	011b      	lsls	r3, r3, #4
 8003f90:	1a9b      	subs	r3, r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	440b      	add	r3, r1
 8003f96:	332a      	adds	r3, #42	@ 0x2a
 8003f98:	2200      	movs	r2, #0
 8003f9a:	701a      	strb	r2, [r3, #0]
      break;
 8003f9c:	e018      	b.n	8003fd0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003f9e:	78fa      	ldrb	r2, [r7, #3]
 8003fa0:	6879      	ldr	r1, [r7, #4]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	011b      	lsls	r3, r3, #4
 8003fa6:	1a9b      	subs	r3, r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	440b      	add	r3, r1
 8003fac:	332a      	adds	r3, #42	@ 0x2a
 8003fae:	2202      	movs	r2, #2
 8003fb0:	701a      	strb	r2, [r3, #0]
      break;
 8003fb2:	e00d      	b.n	8003fd0 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003fb4:	78fa      	ldrb	r2, [r7, #3]
 8003fb6:	6879      	ldr	r1, [r7, #4]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	011b      	lsls	r3, r3, #4
 8003fbc:	1a9b      	subs	r3, r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	440b      	add	r3, r1
 8003fc2:	332a      	adds	r3, #42	@ 0x2a
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	701a      	strb	r2, [r3, #0]
      break;
 8003fc8:	e002      	b.n	8003fd0 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8003fca:	bf00      	nop
 8003fcc:	e000      	b.n	8003fd0 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8003fce:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003fd0:	78fa      	ldrb	r2, [r7, #3]
 8003fd2:	6879      	ldr	r1, [r7, #4]
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	011b      	lsls	r3, r3, #4
 8003fd8:	1a9b      	subs	r3, r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	440b      	add	r3, r1
 8003fde:	332c      	adds	r3, #44	@ 0x2c
 8003fe0:	697a      	ldr	r2, [r7, #20]
 8003fe2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003fe4:	78fa      	ldrb	r2, [r7, #3]
 8003fe6:	8b39      	ldrh	r1, [r7, #24]
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	4613      	mov	r3, r2
 8003fec:	011b      	lsls	r3, r3, #4
 8003fee:	1a9b      	subs	r3, r3, r2
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	4403      	add	r3, r0
 8003ff4:	3334      	adds	r3, #52	@ 0x34
 8003ff6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003ff8:	78fa      	ldrb	r2, [r7, #3]
 8003ffa:	6879      	ldr	r1, [r7, #4]
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	011b      	lsls	r3, r3, #4
 8004000:	1a9b      	subs	r3, r3, r2
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	440b      	add	r3, r1
 8004006:	334c      	adds	r3, #76	@ 0x4c
 8004008:	2200      	movs	r2, #0
 800400a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800400c:	78fa      	ldrb	r2, [r7, #3]
 800400e:	6879      	ldr	r1, [r7, #4]
 8004010:	4613      	mov	r3, r2
 8004012:	011b      	lsls	r3, r3, #4
 8004014:	1a9b      	subs	r3, r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	440b      	add	r3, r1
 800401a:	3338      	adds	r3, #56	@ 0x38
 800401c:	2200      	movs	r2, #0
 800401e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004020:	78fa      	ldrb	r2, [r7, #3]
 8004022:	6879      	ldr	r1, [r7, #4]
 8004024:	4613      	mov	r3, r2
 8004026:	011b      	lsls	r3, r3, #4
 8004028:	1a9b      	subs	r3, r3, r2
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	440b      	add	r3, r1
 800402e:	3315      	adds	r3, #21
 8004030:	78fa      	ldrb	r2, [r7, #3]
 8004032:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004034:	78fa      	ldrb	r2, [r7, #3]
 8004036:	6879      	ldr	r1, [r7, #4]
 8004038:	4613      	mov	r3, r2
 800403a:	011b      	lsls	r3, r3, #4
 800403c:	1a9b      	subs	r3, r3, r2
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	440b      	add	r3, r1
 8004042:	334d      	adds	r3, #77	@ 0x4d
 8004044:	2200      	movs	r2, #0
 8004046:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6818      	ldr	r0, [r3, #0]
 800404c:	78fa      	ldrb	r2, [r7, #3]
 800404e:	4613      	mov	r3, r2
 8004050:	011b      	lsls	r3, r3, #4
 8004052:	1a9b      	subs	r3, r3, r2
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	3310      	adds	r3, #16
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	4413      	add	r3, r2
 800405c:	1d19      	adds	r1, r3, #4
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	799b      	ldrb	r3, [r3, #6]
 8004062:	461a      	mov	r2, r3
 8004064:	f005 f8bc 	bl	80091e0 <USB_HC_StartXfer>
 8004068:	4603      	mov	r3, r0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3708      	adds	r7, #8
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop

08004074 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b086      	sub	sp, #24
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4618      	mov	r0, r3
 800408c:	f004 fdaa 	bl	8008be4 <USB_GetMode>
 8004090:	4603      	mov	r3, r0
 8004092:	2b01      	cmp	r3, #1
 8004094:	f040 80fb 	bne.w	800428e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4618      	mov	r0, r3
 800409e:	f004 fd6d 	bl	8008b7c <USB_ReadInterrupts>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f000 80f1 	beq.w	800428c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4618      	mov	r0, r3
 80040b0:	f004 fd64 	bl	8008b7c <USB_ReadInterrupts>
 80040b4:	4603      	mov	r3, r0
 80040b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80040be:	d104      	bne.n	80040ca <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80040c8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4618      	mov	r0, r3
 80040d0:	f004 fd54 	bl	8008b7c <USB_ReadInterrupts>
 80040d4:	4603      	mov	r3, r0
 80040d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040de:	d104      	bne.n	80040ea <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80040e8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4618      	mov	r0, r3
 80040f0:	f004 fd44 	bl	8008b7c <USB_ReadInterrupts>
 80040f4:	4603      	mov	r3, r0
 80040f6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80040fa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80040fe:	d104      	bne.n	800410a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004108:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4618      	mov	r0, r3
 8004110:	f004 fd34 	bl	8008b7c <USB_ReadInterrupts>
 8004114:	4603      	mov	r3, r0
 8004116:	f003 0302 	and.w	r3, r3, #2
 800411a:	2b02      	cmp	r3, #2
 800411c:	d103      	bne.n	8004126 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2202      	movs	r2, #2
 8004124:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4618      	mov	r0, r3
 800412c:	f004 fd26 	bl	8008b7c <USB_ReadInterrupts>
 8004130:	4603      	mov	r3, r0
 8004132:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004136:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800413a:	d120      	bne.n	800417e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8004144:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	2b00      	cmp	r3, #0
 8004154:	d113      	bne.n	800417e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8004156:	2110      	movs	r1, #16
 8004158:	6938      	ldr	r0, [r7, #16]
 800415a:	f004 fc19 	bl	8008990 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800415e:	6938      	ldr	r0, [r7, #16]
 8004160:	f004 fc48 	bl	80089f4 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	7a5b      	ldrb	r3, [r3, #9]
 8004168:	2b02      	cmp	r3, #2
 800416a:	d105      	bne.n	8004178 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2101      	movs	r1, #1
 8004172:	4618      	mov	r0, r3
 8004174:	f004 fe40 	bl	8008df8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f007 fe0d 	bl	800bd98 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4618      	mov	r0, r3
 8004184:	f004 fcfa 	bl	8008b7c <USB_ReadInterrupts>
 8004188:	4603      	mov	r3, r0
 800418a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800418e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004192:	d102      	bne.n	800419a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f001 fd4d 	bl	8005c34 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4618      	mov	r0, r3
 80041a0:	f004 fcec 	bl	8008b7c <USB_ReadInterrupts>
 80041a4:	4603      	mov	r3, r0
 80041a6:	f003 0308 	and.w	r3, r3, #8
 80041aa:	2b08      	cmp	r3, #8
 80041ac:	d106      	bne.n	80041bc <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f007 fdd6 	bl	800bd60 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	2208      	movs	r2, #8
 80041ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4618      	mov	r0, r3
 80041c2:	f004 fcdb 	bl	8008b7c <USB_ReadInterrupts>
 80041c6:	4603      	mov	r3, r0
 80041c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80041d0:	d139      	bne.n	8004246 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f005 fa7c 	bl	80096d4 <USB_HC_ReadInterrupt>
 80041dc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80041de:	2300      	movs	r3, #0
 80041e0:	617b      	str	r3, [r7, #20]
 80041e2:	e025      	b.n	8004230 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	f003 030f 	and.w	r3, r3, #15
 80041ea:	68ba      	ldr	r2, [r7, #8]
 80041ec:	fa22 f303 	lsr.w	r3, r2, r3
 80041f0:	f003 0301 	and.w	r3, r3, #1
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d018      	beq.n	800422a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	015a      	lsls	r2, r3, #5
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	4413      	add	r3, r2
 8004200:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800420a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800420e:	d106      	bne.n	800421e <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	b2db      	uxtb	r3, r3
 8004214:	4619      	mov	r1, r3
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 f905 	bl	8004426 <HCD_HC_IN_IRQHandler>
 800421c:	e005      	b.n	800422a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	b2db      	uxtb	r3, r3
 8004222:	4619      	mov	r1, r3
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f000 ff67 	bl	80050f8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	3301      	adds	r3, #1
 800422e:	617b      	str	r3, [r7, #20]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	795b      	ldrb	r3, [r3, #5]
 8004234:	461a      	mov	r2, r3
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	4293      	cmp	r3, r2
 800423a:	d3d3      	bcc.n	80041e4 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004244:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4618      	mov	r0, r3
 800424c:	f004 fc96 	bl	8008b7c <USB_ReadInterrupts>
 8004250:	4603      	mov	r3, r0
 8004252:	f003 0310 	and.w	r3, r3, #16
 8004256:	2b10      	cmp	r3, #16
 8004258:	d101      	bne.n	800425e <HAL_HCD_IRQHandler+0x1ea>
 800425a:	2301      	movs	r3, #1
 800425c:	e000      	b.n	8004260 <HAL_HCD_IRQHandler+0x1ec>
 800425e:	2300      	movs	r3, #0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d014      	beq.n	800428e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	699a      	ldr	r2, [r3, #24]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f022 0210 	bic.w	r2, r2, #16
 8004272:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f001 fbfe 	bl	8005a76 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	699a      	ldr	r2, [r3, #24]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f042 0210 	orr.w	r2, r2, #16
 8004288:	619a      	str	r2, [r3, #24]
 800428a:	e000      	b.n	800428e <HAL_HCD_IRQHandler+0x21a>
      return;
 800428c:	bf00      	nop
    }
  }
}
 800428e:	3718      	adds	r7, #24
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d101      	bne.n	80042aa <HAL_HCD_Start+0x16>
 80042a6:	2302      	movs	r3, #2
 80042a8:	e013      	b.n	80042d2 <HAL_HCD_Start+0x3e>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2201      	movs	r2, #1
 80042ae:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2101      	movs	r1, #1
 80042b8:	4618      	mov	r0, r3
 80042ba:	f004 fe04 	bl	8008ec6 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4618      	mov	r0, r3
 80042c4:	f004 faf6 	bl	80088b4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3708      	adds	r7, #8
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}

080042da <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80042da:	b580      	push	{r7, lr}
 80042dc:	b082      	sub	sp, #8
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d101      	bne.n	80042f0 <HAL_HCD_Stop+0x16>
 80042ec:	2302      	movs	r3, #2
 80042ee:	e00d      	b.n	800430c <HAL_HCD_Stop+0x32>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f005 fb57 	bl	80099b0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	4618      	mov	r0, r3
 800430e:	3708      	adds	r7, #8
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4618      	mov	r0, r3
 8004322:	f004 fda6 	bl	8008e72 <USB_ResetPort>
 8004326:	4603      	mov	r3, r0
}
 8004328:	4618      	mov	r0, r3
 800432a:	3708      	adds	r7, #8
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	460b      	mov	r3, r1
 800433a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800433c:	78fa      	ldrb	r2, [r7, #3]
 800433e:	6879      	ldr	r1, [r7, #4]
 8004340:	4613      	mov	r3, r2
 8004342:	011b      	lsls	r3, r3, #4
 8004344:	1a9b      	subs	r3, r3, r2
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	440b      	add	r3, r1
 800434a:	334c      	adds	r3, #76	@ 0x4c
 800434c:	781b      	ldrb	r3, [r3, #0]
}
 800434e:	4618      	mov	r0, r3
 8004350:	370c      	adds	r7, #12
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr

0800435a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800435a:	b480      	push	{r7}
 800435c:	b083      	sub	sp, #12
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
 8004362:	460b      	mov	r3, r1
 8004364:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004366:	78fa      	ldrb	r2, [r7, #3]
 8004368:	6879      	ldr	r1, [r7, #4]
 800436a:	4613      	mov	r3, r2
 800436c:	011b      	lsls	r3, r3, #4
 800436e:	1a9b      	subs	r3, r3, r2
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	440b      	add	r3, r1
 8004374:	3338      	adds	r3, #56	@ 0x38
 8004376:	681b      	ldr	r3, [r3, #0]
}
 8004378:	4618      	mov	r0, r3
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4618      	mov	r0, r3
 8004392:	f004 fde8 	bl	8008f66 <USB_GetCurrentFrame>
 8004396:	4603      	mov	r3, r0
}
 8004398:	4618      	mov	r0, r3
 800439a:	3708      	adds	r7, #8
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4618      	mov	r0, r3
 80043ae:	f004 fdc3 	bl	8008f38 <USB_GetHostSpeed>
 80043b2:	4603      	mov	r3, r0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3708      	adds	r7, #8
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	460b      	mov	r3, r1
 80043c6:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80043c8:	78fa      	ldrb	r2, [r7, #3]
 80043ca:	6879      	ldr	r1, [r7, #4]
 80043cc:	4613      	mov	r3, r2
 80043ce:	011b      	lsls	r3, r3, #4
 80043d0:	1a9b      	subs	r3, r3, r2
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	440b      	add	r3, r1
 80043d6:	331a      	adds	r3, #26
 80043d8:	2200      	movs	r2, #0
 80043da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80043dc:	78fa      	ldrb	r2, [r7, #3]
 80043de:	6879      	ldr	r1, [r7, #4]
 80043e0:	4613      	mov	r3, r2
 80043e2:	011b      	lsls	r3, r3, #4
 80043e4:	1a9b      	subs	r3, r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	440b      	add	r3, r1
 80043ea:	331b      	adds	r3, #27
 80043ec:	2200      	movs	r2, #0
 80043ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80043f0:	78fa      	ldrb	r2, [r7, #3]
 80043f2:	6879      	ldr	r1, [r7, #4]
 80043f4:	4613      	mov	r3, r2
 80043f6:	011b      	lsls	r3, r3, #4
 80043f8:	1a9b      	subs	r3, r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	440b      	add	r3, r1
 80043fe:	3325      	adds	r3, #37	@ 0x25
 8004400:	2200      	movs	r2, #0
 8004402:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8004404:	78fa      	ldrb	r2, [r7, #3]
 8004406:	6879      	ldr	r1, [r7, #4]
 8004408:	4613      	mov	r3, r2
 800440a:	011b      	lsls	r3, r3, #4
 800440c:	1a9b      	subs	r3, r3, r2
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	440b      	add	r3, r1
 8004412:	3324      	adds	r3, #36	@ 0x24
 8004414:	2200      	movs	r2, #0
 8004416:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	370c      	adds	r7, #12
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr

08004426 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004426:	b580      	push	{r7, lr}
 8004428:	b086      	sub	sp, #24
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
 800442e:	460b      	mov	r3, r1
 8004430:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	78fa      	ldrb	r2, [r7, #3]
 8004442:	4611      	mov	r1, r2
 8004444:	4618      	mov	r0, r3
 8004446:	f004 fbac 	bl	8008ba2 <USB_ReadChInterrupts>
 800444a:	4603      	mov	r3, r0
 800444c:	f003 0304 	and.w	r3, r3, #4
 8004450:	2b04      	cmp	r3, #4
 8004452:	d11a      	bne.n	800448a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004454:	78fb      	ldrb	r3, [r7, #3]
 8004456:	015a      	lsls	r2, r3, #5
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	4413      	add	r3, r2
 800445c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004460:	461a      	mov	r2, r3
 8004462:	2304      	movs	r3, #4
 8004464:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004466:	78fa      	ldrb	r2, [r7, #3]
 8004468:	6879      	ldr	r1, [r7, #4]
 800446a:	4613      	mov	r3, r2
 800446c:	011b      	lsls	r3, r3, #4
 800446e:	1a9b      	subs	r3, r3, r2
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	440b      	add	r3, r1
 8004474:	334d      	adds	r3, #77	@ 0x4d
 8004476:	2207      	movs	r2, #7
 8004478:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	78fa      	ldrb	r2, [r7, #3]
 8004480:	4611      	mov	r1, r2
 8004482:	4618      	mov	r0, r3
 8004484:	f005 f937 	bl	80096f6 <USB_HC_Halt>
 8004488:	e09e      	b.n	80045c8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	78fa      	ldrb	r2, [r7, #3]
 8004490:	4611      	mov	r1, r2
 8004492:	4618      	mov	r0, r3
 8004494:	f004 fb85 	bl	8008ba2 <USB_ReadChInterrupts>
 8004498:	4603      	mov	r3, r0
 800449a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800449e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044a2:	d11b      	bne.n	80044dc <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80044a4:	78fb      	ldrb	r3, [r7, #3]
 80044a6:	015a      	lsls	r2, r3, #5
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	4413      	add	r3, r2
 80044ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044b0:	461a      	mov	r2, r3
 80044b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80044b6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80044b8:	78fa      	ldrb	r2, [r7, #3]
 80044ba:	6879      	ldr	r1, [r7, #4]
 80044bc:	4613      	mov	r3, r2
 80044be:	011b      	lsls	r3, r3, #4
 80044c0:	1a9b      	subs	r3, r3, r2
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	440b      	add	r3, r1
 80044c6:	334d      	adds	r3, #77	@ 0x4d
 80044c8:	2208      	movs	r2, #8
 80044ca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	78fa      	ldrb	r2, [r7, #3]
 80044d2:	4611      	mov	r1, r2
 80044d4:	4618      	mov	r0, r3
 80044d6:	f005 f90e 	bl	80096f6 <USB_HC_Halt>
 80044da:	e075      	b.n	80045c8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	78fa      	ldrb	r2, [r7, #3]
 80044e2:	4611      	mov	r1, r2
 80044e4:	4618      	mov	r0, r3
 80044e6:	f004 fb5c 	bl	8008ba2 <USB_ReadChInterrupts>
 80044ea:	4603      	mov	r3, r0
 80044ec:	f003 0308 	and.w	r3, r3, #8
 80044f0:	2b08      	cmp	r3, #8
 80044f2:	d11a      	bne.n	800452a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80044f4:	78fb      	ldrb	r3, [r7, #3]
 80044f6:	015a      	lsls	r2, r3, #5
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	4413      	add	r3, r2
 80044fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004500:	461a      	mov	r2, r3
 8004502:	2308      	movs	r3, #8
 8004504:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004506:	78fa      	ldrb	r2, [r7, #3]
 8004508:	6879      	ldr	r1, [r7, #4]
 800450a:	4613      	mov	r3, r2
 800450c:	011b      	lsls	r3, r3, #4
 800450e:	1a9b      	subs	r3, r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	440b      	add	r3, r1
 8004514:	334d      	adds	r3, #77	@ 0x4d
 8004516:	2206      	movs	r2, #6
 8004518:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	78fa      	ldrb	r2, [r7, #3]
 8004520:	4611      	mov	r1, r2
 8004522:	4618      	mov	r0, r3
 8004524:	f005 f8e7 	bl	80096f6 <USB_HC_Halt>
 8004528:	e04e      	b.n	80045c8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	78fa      	ldrb	r2, [r7, #3]
 8004530:	4611      	mov	r1, r2
 8004532:	4618      	mov	r0, r3
 8004534:	f004 fb35 	bl	8008ba2 <USB_ReadChInterrupts>
 8004538:	4603      	mov	r3, r0
 800453a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800453e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004542:	d11b      	bne.n	800457c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004544:	78fb      	ldrb	r3, [r7, #3]
 8004546:	015a      	lsls	r2, r3, #5
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	4413      	add	r3, r2
 800454c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004550:	461a      	mov	r2, r3
 8004552:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004556:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004558:	78fa      	ldrb	r2, [r7, #3]
 800455a:	6879      	ldr	r1, [r7, #4]
 800455c:	4613      	mov	r3, r2
 800455e:	011b      	lsls	r3, r3, #4
 8004560:	1a9b      	subs	r3, r3, r2
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	440b      	add	r3, r1
 8004566:	334d      	adds	r3, #77	@ 0x4d
 8004568:	2209      	movs	r2, #9
 800456a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	78fa      	ldrb	r2, [r7, #3]
 8004572:	4611      	mov	r1, r2
 8004574:	4618      	mov	r0, r3
 8004576:	f005 f8be 	bl	80096f6 <USB_HC_Halt>
 800457a:	e025      	b.n	80045c8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	78fa      	ldrb	r2, [r7, #3]
 8004582:	4611      	mov	r1, r2
 8004584:	4618      	mov	r0, r3
 8004586:	f004 fb0c 	bl	8008ba2 <USB_ReadChInterrupts>
 800458a:	4603      	mov	r3, r0
 800458c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004590:	2b80      	cmp	r3, #128	@ 0x80
 8004592:	d119      	bne.n	80045c8 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004594:	78fb      	ldrb	r3, [r7, #3]
 8004596:	015a      	lsls	r2, r3, #5
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	4413      	add	r3, r2
 800459c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045a0:	461a      	mov	r2, r3
 80045a2:	2380      	movs	r3, #128	@ 0x80
 80045a4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80045a6:	78fa      	ldrb	r2, [r7, #3]
 80045a8:	6879      	ldr	r1, [r7, #4]
 80045aa:	4613      	mov	r3, r2
 80045ac:	011b      	lsls	r3, r3, #4
 80045ae:	1a9b      	subs	r3, r3, r2
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	440b      	add	r3, r1
 80045b4:	334d      	adds	r3, #77	@ 0x4d
 80045b6:	2207      	movs	r2, #7
 80045b8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	78fa      	ldrb	r2, [r7, #3]
 80045c0:	4611      	mov	r1, r2
 80045c2:	4618      	mov	r0, r3
 80045c4:	f005 f897 	bl	80096f6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	78fa      	ldrb	r2, [r7, #3]
 80045ce:	4611      	mov	r1, r2
 80045d0:	4618      	mov	r0, r3
 80045d2:	f004 fae6 	bl	8008ba2 <USB_ReadChInterrupts>
 80045d6:	4603      	mov	r3, r0
 80045d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045e0:	d112      	bne.n	8004608 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	78fa      	ldrb	r2, [r7, #3]
 80045e8:	4611      	mov	r1, r2
 80045ea:	4618      	mov	r0, r3
 80045ec:	f005 f883 	bl	80096f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80045f0:	78fb      	ldrb	r3, [r7, #3]
 80045f2:	015a      	lsls	r2, r3, #5
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	4413      	add	r3, r2
 80045f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045fc:	461a      	mov	r2, r3
 80045fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004602:	6093      	str	r3, [r2, #8]
 8004604:	f000 bd75 	b.w	80050f2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	78fa      	ldrb	r2, [r7, #3]
 800460e:	4611      	mov	r1, r2
 8004610:	4618      	mov	r0, r3
 8004612:	f004 fac6 	bl	8008ba2 <USB_ReadChInterrupts>
 8004616:	4603      	mov	r3, r0
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	2b01      	cmp	r3, #1
 800461e:	f040 8128 	bne.w	8004872 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004622:	78fb      	ldrb	r3, [r7, #3]
 8004624:	015a      	lsls	r2, r3, #5
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	4413      	add	r3, r2
 800462a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800462e:	461a      	mov	r2, r3
 8004630:	2320      	movs	r3, #32
 8004632:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004634:	78fa      	ldrb	r2, [r7, #3]
 8004636:	6879      	ldr	r1, [r7, #4]
 8004638:	4613      	mov	r3, r2
 800463a:	011b      	lsls	r3, r3, #4
 800463c:	1a9b      	subs	r3, r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	440b      	add	r3, r1
 8004642:	331b      	adds	r3, #27
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	2b01      	cmp	r3, #1
 8004648:	d119      	bne.n	800467e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800464a:	78fa      	ldrb	r2, [r7, #3]
 800464c:	6879      	ldr	r1, [r7, #4]
 800464e:	4613      	mov	r3, r2
 8004650:	011b      	lsls	r3, r3, #4
 8004652:	1a9b      	subs	r3, r3, r2
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	440b      	add	r3, r1
 8004658:	331b      	adds	r3, #27
 800465a:	2200      	movs	r2, #0
 800465c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800465e:	78fb      	ldrb	r3, [r7, #3]
 8004660:	015a      	lsls	r2, r3, #5
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	4413      	add	r3, r2
 8004666:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	78fa      	ldrb	r2, [r7, #3]
 800466e:	0151      	lsls	r1, r2, #5
 8004670:	693a      	ldr	r2, [r7, #16]
 8004672:	440a      	add	r2, r1
 8004674:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004678:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800467c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	799b      	ldrb	r3, [r3, #6]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d01b      	beq.n	80046be <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004686:	78fa      	ldrb	r2, [r7, #3]
 8004688:	6879      	ldr	r1, [r7, #4]
 800468a:	4613      	mov	r3, r2
 800468c:	011b      	lsls	r3, r3, #4
 800468e:	1a9b      	subs	r3, r3, r2
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	440b      	add	r3, r1
 8004694:	3330      	adds	r3, #48	@ 0x30
 8004696:	6819      	ldr	r1, [r3, #0]
 8004698:	78fb      	ldrb	r3, [r7, #3]
 800469a:	015a      	lsls	r2, r3, #5
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	4413      	add	r3, r2
 80046a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046aa:	78fa      	ldrb	r2, [r7, #3]
 80046ac:	1ac9      	subs	r1, r1, r3
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	4613      	mov	r3, r2
 80046b2:	011b      	lsls	r3, r3, #4
 80046b4:	1a9b      	subs	r3, r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	4403      	add	r3, r0
 80046ba:	3338      	adds	r3, #56	@ 0x38
 80046bc:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80046be:	78fa      	ldrb	r2, [r7, #3]
 80046c0:	6879      	ldr	r1, [r7, #4]
 80046c2:	4613      	mov	r3, r2
 80046c4:	011b      	lsls	r3, r3, #4
 80046c6:	1a9b      	subs	r3, r3, r2
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	440b      	add	r3, r1
 80046cc:	334d      	adds	r3, #77	@ 0x4d
 80046ce:	2201      	movs	r2, #1
 80046d0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80046d2:	78fa      	ldrb	r2, [r7, #3]
 80046d4:	6879      	ldr	r1, [r7, #4]
 80046d6:	4613      	mov	r3, r2
 80046d8:	011b      	lsls	r3, r3, #4
 80046da:	1a9b      	subs	r3, r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	440b      	add	r3, r1
 80046e0:	3344      	adds	r3, #68	@ 0x44
 80046e2:	2200      	movs	r2, #0
 80046e4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80046e6:	78fb      	ldrb	r3, [r7, #3]
 80046e8:	015a      	lsls	r2, r3, #5
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	4413      	add	r3, r2
 80046ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046f2:	461a      	mov	r2, r3
 80046f4:	2301      	movs	r3, #1
 80046f6:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80046f8:	78fa      	ldrb	r2, [r7, #3]
 80046fa:	6879      	ldr	r1, [r7, #4]
 80046fc:	4613      	mov	r3, r2
 80046fe:	011b      	lsls	r3, r3, #4
 8004700:	1a9b      	subs	r3, r3, r2
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	440b      	add	r3, r1
 8004706:	3326      	adds	r3, #38	@ 0x26
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00a      	beq.n	8004724 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800470e:	78fa      	ldrb	r2, [r7, #3]
 8004710:	6879      	ldr	r1, [r7, #4]
 8004712:	4613      	mov	r3, r2
 8004714:	011b      	lsls	r3, r3, #4
 8004716:	1a9b      	subs	r3, r3, r2
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	440b      	add	r3, r1
 800471c:	3326      	adds	r3, #38	@ 0x26
 800471e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004720:	2b02      	cmp	r3, #2
 8004722:	d110      	bne.n	8004746 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	78fa      	ldrb	r2, [r7, #3]
 800472a:	4611      	mov	r1, r2
 800472c:	4618      	mov	r0, r3
 800472e:	f004 ffe2 	bl	80096f6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004732:	78fb      	ldrb	r3, [r7, #3]
 8004734:	015a      	lsls	r2, r3, #5
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	4413      	add	r3, r2
 800473a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800473e:	461a      	mov	r2, r3
 8004740:	2310      	movs	r3, #16
 8004742:	6093      	str	r3, [r2, #8]
 8004744:	e03d      	b.n	80047c2 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004746:	78fa      	ldrb	r2, [r7, #3]
 8004748:	6879      	ldr	r1, [r7, #4]
 800474a:	4613      	mov	r3, r2
 800474c:	011b      	lsls	r3, r3, #4
 800474e:	1a9b      	subs	r3, r3, r2
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	440b      	add	r3, r1
 8004754:	3326      	adds	r3, #38	@ 0x26
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	2b03      	cmp	r3, #3
 800475a:	d00a      	beq.n	8004772 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800475c:	78fa      	ldrb	r2, [r7, #3]
 800475e:	6879      	ldr	r1, [r7, #4]
 8004760:	4613      	mov	r3, r2
 8004762:	011b      	lsls	r3, r3, #4
 8004764:	1a9b      	subs	r3, r3, r2
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	440b      	add	r3, r1
 800476a:	3326      	adds	r3, #38	@ 0x26
 800476c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800476e:	2b01      	cmp	r3, #1
 8004770:	d127      	bne.n	80047c2 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004772:	78fb      	ldrb	r3, [r7, #3]
 8004774:	015a      	lsls	r2, r3, #5
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	4413      	add	r3, r2
 800477a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	78fa      	ldrb	r2, [r7, #3]
 8004782:	0151      	lsls	r1, r2, #5
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	440a      	add	r2, r1
 8004788:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800478c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004790:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004792:	78fa      	ldrb	r2, [r7, #3]
 8004794:	6879      	ldr	r1, [r7, #4]
 8004796:	4613      	mov	r3, r2
 8004798:	011b      	lsls	r3, r3, #4
 800479a:	1a9b      	subs	r3, r3, r2
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	440b      	add	r3, r1
 80047a0:	334c      	adds	r3, #76	@ 0x4c
 80047a2:	2201      	movs	r2, #1
 80047a4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80047a6:	78fa      	ldrb	r2, [r7, #3]
 80047a8:	6879      	ldr	r1, [r7, #4]
 80047aa:	4613      	mov	r3, r2
 80047ac:	011b      	lsls	r3, r3, #4
 80047ae:	1a9b      	subs	r3, r3, r2
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	440b      	add	r3, r1
 80047b4:	334c      	adds	r3, #76	@ 0x4c
 80047b6:	781a      	ldrb	r2, [r3, #0]
 80047b8:	78fb      	ldrb	r3, [r7, #3]
 80047ba:	4619      	mov	r1, r3
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f007 faf9 	bl	800bdb4 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	799b      	ldrb	r3, [r3, #6]
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d13b      	bne.n	8004842 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80047ca:	78fa      	ldrb	r2, [r7, #3]
 80047cc:	6879      	ldr	r1, [r7, #4]
 80047ce:	4613      	mov	r3, r2
 80047d0:	011b      	lsls	r3, r3, #4
 80047d2:	1a9b      	subs	r3, r3, r2
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	440b      	add	r3, r1
 80047d8:	3338      	adds	r3, #56	@ 0x38
 80047da:	6819      	ldr	r1, [r3, #0]
 80047dc:	78fa      	ldrb	r2, [r7, #3]
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	4613      	mov	r3, r2
 80047e2:	011b      	lsls	r3, r3, #4
 80047e4:	1a9b      	subs	r3, r3, r2
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	4403      	add	r3, r0
 80047ea:	3328      	adds	r3, #40	@ 0x28
 80047ec:	881b      	ldrh	r3, [r3, #0]
 80047ee:	440b      	add	r3, r1
 80047f0:	1e59      	subs	r1, r3, #1
 80047f2:	78fa      	ldrb	r2, [r7, #3]
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	4613      	mov	r3, r2
 80047f8:	011b      	lsls	r3, r3, #4
 80047fa:	1a9b      	subs	r3, r3, r2
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	4403      	add	r3, r0
 8004800:	3328      	adds	r3, #40	@ 0x28
 8004802:	881b      	ldrh	r3, [r3, #0]
 8004804:	fbb1 f3f3 	udiv	r3, r1, r3
 8004808:	f003 0301 	and.w	r3, r3, #1
 800480c:	2b00      	cmp	r3, #0
 800480e:	f000 8470 	beq.w	80050f2 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8004812:	78fa      	ldrb	r2, [r7, #3]
 8004814:	6879      	ldr	r1, [r7, #4]
 8004816:	4613      	mov	r3, r2
 8004818:	011b      	lsls	r3, r3, #4
 800481a:	1a9b      	subs	r3, r3, r2
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	440b      	add	r3, r1
 8004820:	333c      	adds	r3, #60	@ 0x3c
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	78fa      	ldrb	r2, [r7, #3]
 8004826:	f083 0301 	eor.w	r3, r3, #1
 800482a:	b2d8      	uxtb	r0, r3
 800482c:	6879      	ldr	r1, [r7, #4]
 800482e:	4613      	mov	r3, r2
 8004830:	011b      	lsls	r3, r3, #4
 8004832:	1a9b      	subs	r3, r3, r2
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	440b      	add	r3, r1
 8004838:	333c      	adds	r3, #60	@ 0x3c
 800483a:	4602      	mov	r2, r0
 800483c:	701a      	strb	r2, [r3, #0]
 800483e:	f000 bc58 	b.w	80050f2 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8004842:	78fa      	ldrb	r2, [r7, #3]
 8004844:	6879      	ldr	r1, [r7, #4]
 8004846:	4613      	mov	r3, r2
 8004848:	011b      	lsls	r3, r3, #4
 800484a:	1a9b      	subs	r3, r3, r2
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	440b      	add	r3, r1
 8004850:	333c      	adds	r3, #60	@ 0x3c
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	78fa      	ldrb	r2, [r7, #3]
 8004856:	f083 0301 	eor.w	r3, r3, #1
 800485a:	b2d8      	uxtb	r0, r3
 800485c:	6879      	ldr	r1, [r7, #4]
 800485e:	4613      	mov	r3, r2
 8004860:	011b      	lsls	r3, r3, #4
 8004862:	1a9b      	subs	r3, r3, r2
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	440b      	add	r3, r1
 8004868:	333c      	adds	r3, #60	@ 0x3c
 800486a:	4602      	mov	r2, r0
 800486c:	701a      	strb	r2, [r3, #0]
 800486e:	f000 bc40 	b.w	80050f2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	78fa      	ldrb	r2, [r7, #3]
 8004878:	4611      	mov	r1, r2
 800487a:	4618      	mov	r0, r3
 800487c:	f004 f991 	bl	8008ba2 <USB_ReadChInterrupts>
 8004880:	4603      	mov	r3, r0
 8004882:	f003 0320 	and.w	r3, r3, #32
 8004886:	2b20      	cmp	r3, #32
 8004888:	d131      	bne.n	80048ee <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800488a:	78fb      	ldrb	r3, [r7, #3]
 800488c:	015a      	lsls	r2, r3, #5
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	4413      	add	r3, r2
 8004892:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004896:	461a      	mov	r2, r3
 8004898:	2320      	movs	r3, #32
 800489a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800489c:	78fa      	ldrb	r2, [r7, #3]
 800489e:	6879      	ldr	r1, [r7, #4]
 80048a0:	4613      	mov	r3, r2
 80048a2:	011b      	lsls	r3, r3, #4
 80048a4:	1a9b      	subs	r3, r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	440b      	add	r3, r1
 80048aa:	331a      	adds	r3, #26
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	f040 841f 	bne.w	80050f2 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80048b4:	78fa      	ldrb	r2, [r7, #3]
 80048b6:	6879      	ldr	r1, [r7, #4]
 80048b8:	4613      	mov	r3, r2
 80048ba:	011b      	lsls	r3, r3, #4
 80048bc:	1a9b      	subs	r3, r3, r2
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	440b      	add	r3, r1
 80048c2:	331b      	adds	r3, #27
 80048c4:	2201      	movs	r2, #1
 80048c6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80048c8:	78fa      	ldrb	r2, [r7, #3]
 80048ca:	6879      	ldr	r1, [r7, #4]
 80048cc:	4613      	mov	r3, r2
 80048ce:	011b      	lsls	r3, r3, #4
 80048d0:	1a9b      	subs	r3, r3, r2
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	440b      	add	r3, r1
 80048d6:	334d      	adds	r3, #77	@ 0x4d
 80048d8:	2203      	movs	r2, #3
 80048da:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	78fa      	ldrb	r2, [r7, #3]
 80048e2:	4611      	mov	r1, r2
 80048e4:	4618      	mov	r0, r3
 80048e6:	f004 ff06 	bl	80096f6 <USB_HC_Halt>
 80048ea:	f000 bc02 	b.w	80050f2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	78fa      	ldrb	r2, [r7, #3]
 80048f4:	4611      	mov	r1, r2
 80048f6:	4618      	mov	r0, r3
 80048f8:	f004 f953 	bl	8008ba2 <USB_ReadChInterrupts>
 80048fc:	4603      	mov	r3, r0
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b02      	cmp	r3, #2
 8004904:	f040 8305 	bne.w	8004f12 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004908:	78fb      	ldrb	r3, [r7, #3]
 800490a:	015a      	lsls	r2, r3, #5
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	4413      	add	r3, r2
 8004910:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004914:	461a      	mov	r2, r3
 8004916:	2302      	movs	r3, #2
 8004918:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800491a:	78fa      	ldrb	r2, [r7, #3]
 800491c:	6879      	ldr	r1, [r7, #4]
 800491e:	4613      	mov	r3, r2
 8004920:	011b      	lsls	r3, r3, #4
 8004922:	1a9b      	subs	r3, r3, r2
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	440b      	add	r3, r1
 8004928:	334d      	adds	r3, #77	@ 0x4d
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	2b01      	cmp	r3, #1
 800492e:	d114      	bne.n	800495a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004930:	78fa      	ldrb	r2, [r7, #3]
 8004932:	6879      	ldr	r1, [r7, #4]
 8004934:	4613      	mov	r3, r2
 8004936:	011b      	lsls	r3, r3, #4
 8004938:	1a9b      	subs	r3, r3, r2
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	440b      	add	r3, r1
 800493e:	334d      	adds	r3, #77	@ 0x4d
 8004940:	2202      	movs	r2, #2
 8004942:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004944:	78fa      	ldrb	r2, [r7, #3]
 8004946:	6879      	ldr	r1, [r7, #4]
 8004948:	4613      	mov	r3, r2
 800494a:	011b      	lsls	r3, r3, #4
 800494c:	1a9b      	subs	r3, r3, r2
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	440b      	add	r3, r1
 8004952:	334c      	adds	r3, #76	@ 0x4c
 8004954:	2201      	movs	r2, #1
 8004956:	701a      	strb	r2, [r3, #0]
 8004958:	e2cc      	b.n	8004ef4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800495a:	78fa      	ldrb	r2, [r7, #3]
 800495c:	6879      	ldr	r1, [r7, #4]
 800495e:	4613      	mov	r3, r2
 8004960:	011b      	lsls	r3, r3, #4
 8004962:	1a9b      	subs	r3, r3, r2
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	440b      	add	r3, r1
 8004968:	334d      	adds	r3, #77	@ 0x4d
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	2b06      	cmp	r3, #6
 800496e:	d114      	bne.n	800499a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004970:	78fa      	ldrb	r2, [r7, #3]
 8004972:	6879      	ldr	r1, [r7, #4]
 8004974:	4613      	mov	r3, r2
 8004976:	011b      	lsls	r3, r3, #4
 8004978:	1a9b      	subs	r3, r3, r2
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	440b      	add	r3, r1
 800497e:	334d      	adds	r3, #77	@ 0x4d
 8004980:	2202      	movs	r2, #2
 8004982:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8004984:	78fa      	ldrb	r2, [r7, #3]
 8004986:	6879      	ldr	r1, [r7, #4]
 8004988:	4613      	mov	r3, r2
 800498a:	011b      	lsls	r3, r3, #4
 800498c:	1a9b      	subs	r3, r3, r2
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	440b      	add	r3, r1
 8004992:	334c      	adds	r3, #76	@ 0x4c
 8004994:	2205      	movs	r2, #5
 8004996:	701a      	strb	r2, [r3, #0]
 8004998:	e2ac      	b.n	8004ef4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800499a:	78fa      	ldrb	r2, [r7, #3]
 800499c:	6879      	ldr	r1, [r7, #4]
 800499e:	4613      	mov	r3, r2
 80049a0:	011b      	lsls	r3, r3, #4
 80049a2:	1a9b      	subs	r3, r3, r2
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	440b      	add	r3, r1
 80049a8:	334d      	adds	r3, #77	@ 0x4d
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	2b07      	cmp	r3, #7
 80049ae:	d00b      	beq.n	80049c8 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80049b0:	78fa      	ldrb	r2, [r7, #3]
 80049b2:	6879      	ldr	r1, [r7, #4]
 80049b4:	4613      	mov	r3, r2
 80049b6:	011b      	lsls	r3, r3, #4
 80049b8:	1a9b      	subs	r3, r3, r2
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	440b      	add	r3, r1
 80049be:	334d      	adds	r3, #77	@ 0x4d
 80049c0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80049c2:	2b09      	cmp	r3, #9
 80049c4:	f040 80a6 	bne.w	8004b14 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80049c8:	78fa      	ldrb	r2, [r7, #3]
 80049ca:	6879      	ldr	r1, [r7, #4]
 80049cc:	4613      	mov	r3, r2
 80049ce:	011b      	lsls	r3, r3, #4
 80049d0:	1a9b      	subs	r3, r3, r2
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	440b      	add	r3, r1
 80049d6:	334d      	adds	r3, #77	@ 0x4d
 80049d8:	2202      	movs	r2, #2
 80049da:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80049dc:	78fa      	ldrb	r2, [r7, #3]
 80049de:	6879      	ldr	r1, [r7, #4]
 80049e0:	4613      	mov	r3, r2
 80049e2:	011b      	lsls	r3, r3, #4
 80049e4:	1a9b      	subs	r3, r3, r2
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	440b      	add	r3, r1
 80049ea:	3344      	adds	r3, #68	@ 0x44
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	1c59      	adds	r1, r3, #1
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	4613      	mov	r3, r2
 80049f4:	011b      	lsls	r3, r3, #4
 80049f6:	1a9b      	subs	r3, r3, r2
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	4403      	add	r3, r0
 80049fc:	3344      	adds	r3, #68	@ 0x44
 80049fe:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004a00:	78fa      	ldrb	r2, [r7, #3]
 8004a02:	6879      	ldr	r1, [r7, #4]
 8004a04:	4613      	mov	r3, r2
 8004a06:	011b      	lsls	r3, r3, #4
 8004a08:	1a9b      	subs	r3, r3, r2
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	440b      	add	r3, r1
 8004a0e:	3344      	adds	r3, #68	@ 0x44
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d943      	bls.n	8004a9e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004a16:	78fa      	ldrb	r2, [r7, #3]
 8004a18:	6879      	ldr	r1, [r7, #4]
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	011b      	lsls	r3, r3, #4
 8004a1e:	1a9b      	subs	r3, r3, r2
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	440b      	add	r3, r1
 8004a24:	3344      	adds	r3, #68	@ 0x44
 8004a26:	2200      	movs	r2, #0
 8004a28:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8004a2a:	78fa      	ldrb	r2, [r7, #3]
 8004a2c:	6879      	ldr	r1, [r7, #4]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	011b      	lsls	r3, r3, #4
 8004a32:	1a9b      	subs	r3, r3, r2
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	440b      	add	r3, r1
 8004a38:	331a      	adds	r3, #26
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d123      	bne.n	8004a88 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8004a40:	78fa      	ldrb	r2, [r7, #3]
 8004a42:	6879      	ldr	r1, [r7, #4]
 8004a44:	4613      	mov	r3, r2
 8004a46:	011b      	lsls	r3, r3, #4
 8004a48:	1a9b      	subs	r3, r3, r2
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	440b      	add	r3, r1
 8004a4e:	331b      	adds	r3, #27
 8004a50:	2200      	movs	r2, #0
 8004a52:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8004a54:	78fa      	ldrb	r2, [r7, #3]
 8004a56:	6879      	ldr	r1, [r7, #4]
 8004a58:	4613      	mov	r3, r2
 8004a5a:	011b      	lsls	r3, r3, #4
 8004a5c:	1a9b      	subs	r3, r3, r2
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	440b      	add	r3, r1
 8004a62:	331c      	adds	r3, #28
 8004a64:	2200      	movs	r2, #0
 8004a66:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004a68:	78fb      	ldrb	r3, [r7, #3]
 8004a6a:	015a      	lsls	r2, r3, #5
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	4413      	add	r3, r2
 8004a70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	78fa      	ldrb	r2, [r7, #3]
 8004a78:	0151      	lsls	r1, r2, #5
 8004a7a:	693a      	ldr	r2, [r7, #16]
 8004a7c:	440a      	add	r2, r1
 8004a7e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004a82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a86:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004a88:	78fa      	ldrb	r2, [r7, #3]
 8004a8a:	6879      	ldr	r1, [r7, #4]
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	011b      	lsls	r3, r3, #4
 8004a90:	1a9b      	subs	r3, r3, r2
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	440b      	add	r3, r1
 8004a96:	334c      	adds	r3, #76	@ 0x4c
 8004a98:	2204      	movs	r2, #4
 8004a9a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004a9c:	e229      	b.n	8004ef2 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004a9e:	78fa      	ldrb	r2, [r7, #3]
 8004aa0:	6879      	ldr	r1, [r7, #4]
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	011b      	lsls	r3, r3, #4
 8004aa6:	1a9b      	subs	r3, r3, r2
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	440b      	add	r3, r1
 8004aac:	334c      	adds	r3, #76	@ 0x4c
 8004aae:	2202      	movs	r2, #2
 8004ab0:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004ab2:	78fa      	ldrb	r2, [r7, #3]
 8004ab4:	6879      	ldr	r1, [r7, #4]
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	011b      	lsls	r3, r3, #4
 8004aba:	1a9b      	subs	r3, r3, r2
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	440b      	add	r3, r1
 8004ac0:	3326      	adds	r3, #38	@ 0x26
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d00b      	beq.n	8004ae0 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004ac8:	78fa      	ldrb	r2, [r7, #3]
 8004aca:	6879      	ldr	r1, [r7, #4]
 8004acc:	4613      	mov	r3, r2
 8004ace:	011b      	lsls	r3, r3, #4
 8004ad0:	1a9b      	subs	r3, r3, r2
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	440b      	add	r3, r1
 8004ad6:	3326      	adds	r3, #38	@ 0x26
 8004ad8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	f040 8209 	bne.w	8004ef2 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004ae0:	78fb      	ldrb	r3, [r7, #3]
 8004ae2:	015a      	lsls	r2, r3, #5
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004af6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004afe:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004b00:	78fb      	ldrb	r3, [r7, #3]
 8004b02:	015a      	lsls	r2, r3, #5
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	4413      	add	r3, r2
 8004b08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004b12:	e1ee      	b.n	8004ef2 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004b14:	78fa      	ldrb	r2, [r7, #3]
 8004b16:	6879      	ldr	r1, [r7, #4]
 8004b18:	4613      	mov	r3, r2
 8004b1a:	011b      	lsls	r3, r3, #4
 8004b1c:	1a9b      	subs	r3, r3, r2
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	440b      	add	r3, r1
 8004b22:	334d      	adds	r3, #77	@ 0x4d
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	2b05      	cmp	r3, #5
 8004b28:	f040 80c8 	bne.w	8004cbc <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004b2c:	78fa      	ldrb	r2, [r7, #3]
 8004b2e:	6879      	ldr	r1, [r7, #4]
 8004b30:	4613      	mov	r3, r2
 8004b32:	011b      	lsls	r3, r3, #4
 8004b34:	1a9b      	subs	r3, r3, r2
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	440b      	add	r3, r1
 8004b3a:	334d      	adds	r3, #77	@ 0x4d
 8004b3c:	2202      	movs	r2, #2
 8004b3e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004b40:	78fa      	ldrb	r2, [r7, #3]
 8004b42:	6879      	ldr	r1, [r7, #4]
 8004b44:	4613      	mov	r3, r2
 8004b46:	011b      	lsls	r3, r3, #4
 8004b48:	1a9b      	subs	r3, r3, r2
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	440b      	add	r3, r1
 8004b4e:	331b      	adds	r3, #27
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	f040 81ce 	bne.w	8004ef4 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004b58:	78fa      	ldrb	r2, [r7, #3]
 8004b5a:	6879      	ldr	r1, [r7, #4]
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	011b      	lsls	r3, r3, #4
 8004b60:	1a9b      	subs	r3, r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	440b      	add	r3, r1
 8004b66:	3326      	adds	r3, #38	@ 0x26
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	2b03      	cmp	r3, #3
 8004b6c:	d16b      	bne.n	8004c46 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8004b6e:	78fa      	ldrb	r2, [r7, #3]
 8004b70:	6879      	ldr	r1, [r7, #4]
 8004b72:	4613      	mov	r3, r2
 8004b74:	011b      	lsls	r3, r3, #4
 8004b76:	1a9b      	subs	r3, r3, r2
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	440b      	add	r3, r1
 8004b7c:	3348      	adds	r3, #72	@ 0x48
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	1c59      	adds	r1, r3, #1
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	4613      	mov	r3, r2
 8004b86:	011b      	lsls	r3, r3, #4
 8004b88:	1a9b      	subs	r3, r3, r2
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	4403      	add	r3, r0
 8004b8e:	3348      	adds	r3, #72	@ 0x48
 8004b90:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8004b92:	78fa      	ldrb	r2, [r7, #3]
 8004b94:	6879      	ldr	r1, [r7, #4]
 8004b96:	4613      	mov	r3, r2
 8004b98:	011b      	lsls	r3, r3, #4
 8004b9a:	1a9b      	subs	r3, r3, r2
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	440b      	add	r3, r1
 8004ba0:	3348      	adds	r3, #72	@ 0x48
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d943      	bls.n	8004c30 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8004ba8:	78fa      	ldrb	r2, [r7, #3]
 8004baa:	6879      	ldr	r1, [r7, #4]
 8004bac:	4613      	mov	r3, r2
 8004bae:	011b      	lsls	r3, r3, #4
 8004bb0:	1a9b      	subs	r3, r3, r2
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	440b      	add	r3, r1
 8004bb6:	3348      	adds	r3, #72	@ 0x48
 8004bb8:	2200      	movs	r2, #0
 8004bba:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8004bbc:	78fa      	ldrb	r2, [r7, #3]
 8004bbe:	6879      	ldr	r1, [r7, #4]
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	011b      	lsls	r3, r3, #4
 8004bc4:	1a9b      	subs	r3, r3, r2
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	440b      	add	r3, r1
 8004bca:	331b      	adds	r3, #27
 8004bcc:	2200      	movs	r2, #0
 8004bce:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8004bd0:	78fa      	ldrb	r2, [r7, #3]
 8004bd2:	6879      	ldr	r1, [r7, #4]
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	011b      	lsls	r3, r3, #4
 8004bd8:	1a9b      	subs	r3, r3, r2
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	440b      	add	r3, r1
 8004bde:	3344      	adds	r3, #68	@ 0x44
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d809      	bhi.n	8004bfa <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8004be6:	78fa      	ldrb	r2, [r7, #3]
 8004be8:	6879      	ldr	r1, [r7, #4]
 8004bea:	4613      	mov	r3, r2
 8004bec:	011b      	lsls	r3, r3, #4
 8004bee:	1a9b      	subs	r3, r3, r2
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	440b      	add	r3, r1
 8004bf4:	331c      	adds	r3, #28
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004bfa:	78fb      	ldrb	r3, [r7, #3]
 8004bfc:	015a      	lsls	r2, r3, #5
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	4413      	add	r3, r2
 8004c02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	78fa      	ldrb	r2, [r7, #3]
 8004c0a:	0151      	lsls	r1, r2, #5
 8004c0c:	693a      	ldr	r2, [r7, #16]
 8004c0e:	440a      	add	r2, r1
 8004c10:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004c14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c18:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8004c1a:	78fa      	ldrb	r2, [r7, #3]
 8004c1c:	6879      	ldr	r1, [r7, #4]
 8004c1e:	4613      	mov	r3, r2
 8004c20:	011b      	lsls	r3, r3, #4
 8004c22:	1a9b      	subs	r3, r3, r2
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	440b      	add	r3, r1
 8004c28:	334c      	adds	r3, #76	@ 0x4c
 8004c2a:	2204      	movs	r2, #4
 8004c2c:	701a      	strb	r2, [r3, #0]
 8004c2e:	e014      	b.n	8004c5a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004c30:	78fa      	ldrb	r2, [r7, #3]
 8004c32:	6879      	ldr	r1, [r7, #4]
 8004c34:	4613      	mov	r3, r2
 8004c36:	011b      	lsls	r3, r3, #4
 8004c38:	1a9b      	subs	r3, r3, r2
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	440b      	add	r3, r1
 8004c3e:	334c      	adds	r3, #76	@ 0x4c
 8004c40:	2202      	movs	r2, #2
 8004c42:	701a      	strb	r2, [r3, #0]
 8004c44:	e009      	b.n	8004c5a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004c46:	78fa      	ldrb	r2, [r7, #3]
 8004c48:	6879      	ldr	r1, [r7, #4]
 8004c4a:	4613      	mov	r3, r2
 8004c4c:	011b      	lsls	r3, r3, #4
 8004c4e:	1a9b      	subs	r3, r3, r2
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	440b      	add	r3, r1
 8004c54:	334c      	adds	r3, #76	@ 0x4c
 8004c56:	2202      	movs	r2, #2
 8004c58:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004c5a:	78fa      	ldrb	r2, [r7, #3]
 8004c5c:	6879      	ldr	r1, [r7, #4]
 8004c5e:	4613      	mov	r3, r2
 8004c60:	011b      	lsls	r3, r3, #4
 8004c62:	1a9b      	subs	r3, r3, r2
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	440b      	add	r3, r1
 8004c68:	3326      	adds	r3, #38	@ 0x26
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d00b      	beq.n	8004c88 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004c70:	78fa      	ldrb	r2, [r7, #3]
 8004c72:	6879      	ldr	r1, [r7, #4]
 8004c74:	4613      	mov	r3, r2
 8004c76:	011b      	lsls	r3, r3, #4
 8004c78:	1a9b      	subs	r3, r3, r2
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	440b      	add	r3, r1
 8004c7e:	3326      	adds	r3, #38	@ 0x26
 8004c80:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	f040 8136 	bne.w	8004ef4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004c88:	78fb      	ldrb	r3, [r7, #3]
 8004c8a:	015a      	lsls	r2, r3, #5
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	4413      	add	r3, r2
 8004c90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004c9e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004ca6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004ca8:	78fb      	ldrb	r3, [r7, #3]
 8004caa:	015a      	lsls	r2, r3, #5
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	4413      	add	r3, r2
 8004cb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6013      	str	r3, [r2, #0]
 8004cba:	e11b      	b.n	8004ef4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004cbc:	78fa      	ldrb	r2, [r7, #3]
 8004cbe:	6879      	ldr	r1, [r7, #4]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	011b      	lsls	r3, r3, #4
 8004cc4:	1a9b      	subs	r3, r3, r2
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	440b      	add	r3, r1
 8004cca:	334d      	adds	r3, #77	@ 0x4d
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	2b03      	cmp	r3, #3
 8004cd0:	f040 8081 	bne.w	8004dd6 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004cd4:	78fa      	ldrb	r2, [r7, #3]
 8004cd6:	6879      	ldr	r1, [r7, #4]
 8004cd8:	4613      	mov	r3, r2
 8004cda:	011b      	lsls	r3, r3, #4
 8004cdc:	1a9b      	subs	r3, r3, r2
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	440b      	add	r3, r1
 8004ce2:	334d      	adds	r3, #77	@ 0x4d
 8004ce4:	2202      	movs	r2, #2
 8004ce6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004ce8:	78fa      	ldrb	r2, [r7, #3]
 8004cea:	6879      	ldr	r1, [r7, #4]
 8004cec:	4613      	mov	r3, r2
 8004cee:	011b      	lsls	r3, r3, #4
 8004cf0:	1a9b      	subs	r3, r3, r2
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	440b      	add	r3, r1
 8004cf6:	331b      	adds	r3, #27
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	f040 80fa 	bne.w	8004ef4 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004d00:	78fa      	ldrb	r2, [r7, #3]
 8004d02:	6879      	ldr	r1, [r7, #4]
 8004d04:	4613      	mov	r3, r2
 8004d06:	011b      	lsls	r3, r3, #4
 8004d08:	1a9b      	subs	r3, r3, r2
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	440b      	add	r3, r1
 8004d0e:	334c      	adds	r3, #76	@ 0x4c
 8004d10:	2202      	movs	r2, #2
 8004d12:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8004d14:	78fb      	ldrb	r3, [r7, #3]
 8004d16:	015a      	lsls	r2, r3, #5
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	78fa      	ldrb	r2, [r7, #3]
 8004d24:	0151      	lsls	r1, r2, #5
 8004d26:	693a      	ldr	r2, [r7, #16]
 8004d28:	440a      	add	r2, r1
 8004d2a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004d2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d32:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8004d34:	78fb      	ldrb	r3, [r7, #3]
 8004d36:	015a      	lsls	r2, r3, #5
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	78fa      	ldrb	r2, [r7, #3]
 8004d44:	0151      	lsls	r1, r2, #5
 8004d46:	693a      	ldr	r2, [r7, #16]
 8004d48:	440a      	add	r2, r1
 8004d4a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004d4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d52:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8004d54:	78fb      	ldrb	r3, [r7, #3]
 8004d56:	015a      	lsls	r2, r3, #5
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	78fa      	ldrb	r2, [r7, #3]
 8004d64:	0151      	lsls	r1, r2, #5
 8004d66:	693a      	ldr	r2, [r7, #16]
 8004d68:	440a      	add	r2, r1
 8004d6a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004d6e:	f023 0320 	bic.w	r3, r3, #32
 8004d72:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004d74:	78fa      	ldrb	r2, [r7, #3]
 8004d76:	6879      	ldr	r1, [r7, #4]
 8004d78:	4613      	mov	r3, r2
 8004d7a:	011b      	lsls	r3, r3, #4
 8004d7c:	1a9b      	subs	r3, r3, r2
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	440b      	add	r3, r1
 8004d82:	3326      	adds	r3, #38	@ 0x26
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00b      	beq.n	8004da2 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004d8a:	78fa      	ldrb	r2, [r7, #3]
 8004d8c:	6879      	ldr	r1, [r7, #4]
 8004d8e:	4613      	mov	r3, r2
 8004d90:	011b      	lsls	r3, r3, #4
 8004d92:	1a9b      	subs	r3, r3, r2
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	440b      	add	r3, r1
 8004d98:	3326      	adds	r3, #38	@ 0x26
 8004d9a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	f040 80a9 	bne.w	8004ef4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004da2:	78fb      	ldrb	r3, [r7, #3]
 8004da4:	015a      	lsls	r2, r3, #5
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	4413      	add	r3, r2
 8004daa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004db8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004dc0:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004dc2:	78fb      	ldrb	r3, [r7, #3]
 8004dc4:	015a      	lsls	r2, r3, #5
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	4413      	add	r3, r2
 8004dca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004dce:	461a      	mov	r2, r3
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6013      	str	r3, [r2, #0]
 8004dd4:	e08e      	b.n	8004ef4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004dd6:	78fa      	ldrb	r2, [r7, #3]
 8004dd8:	6879      	ldr	r1, [r7, #4]
 8004dda:	4613      	mov	r3, r2
 8004ddc:	011b      	lsls	r3, r3, #4
 8004dde:	1a9b      	subs	r3, r3, r2
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	440b      	add	r3, r1
 8004de4:	334d      	adds	r3, #77	@ 0x4d
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	2b04      	cmp	r3, #4
 8004dea:	d143      	bne.n	8004e74 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004dec:	78fa      	ldrb	r2, [r7, #3]
 8004dee:	6879      	ldr	r1, [r7, #4]
 8004df0:	4613      	mov	r3, r2
 8004df2:	011b      	lsls	r3, r3, #4
 8004df4:	1a9b      	subs	r3, r3, r2
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	440b      	add	r3, r1
 8004dfa:	334d      	adds	r3, #77	@ 0x4d
 8004dfc:	2202      	movs	r2, #2
 8004dfe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004e00:	78fa      	ldrb	r2, [r7, #3]
 8004e02:	6879      	ldr	r1, [r7, #4]
 8004e04:	4613      	mov	r3, r2
 8004e06:	011b      	lsls	r3, r3, #4
 8004e08:	1a9b      	subs	r3, r3, r2
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	440b      	add	r3, r1
 8004e0e:	334c      	adds	r3, #76	@ 0x4c
 8004e10:	2202      	movs	r2, #2
 8004e12:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004e14:	78fa      	ldrb	r2, [r7, #3]
 8004e16:	6879      	ldr	r1, [r7, #4]
 8004e18:	4613      	mov	r3, r2
 8004e1a:	011b      	lsls	r3, r3, #4
 8004e1c:	1a9b      	subs	r3, r3, r2
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	440b      	add	r3, r1
 8004e22:	3326      	adds	r3, #38	@ 0x26
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00a      	beq.n	8004e40 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004e2a:	78fa      	ldrb	r2, [r7, #3]
 8004e2c:	6879      	ldr	r1, [r7, #4]
 8004e2e:	4613      	mov	r3, r2
 8004e30:	011b      	lsls	r3, r3, #4
 8004e32:	1a9b      	subs	r3, r3, r2
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	440b      	add	r3, r1
 8004e38:	3326      	adds	r3, #38	@ 0x26
 8004e3a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d159      	bne.n	8004ef4 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004e40:	78fb      	ldrb	r3, [r7, #3]
 8004e42:	015a      	lsls	r2, r3, #5
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	4413      	add	r3, r2
 8004e48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004e56:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004e5e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004e60:	78fb      	ldrb	r3, [r7, #3]
 8004e62:	015a      	lsls	r2, r3, #5
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	4413      	add	r3, r2
 8004e68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6013      	str	r3, [r2, #0]
 8004e72:	e03f      	b.n	8004ef4 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8004e74:	78fa      	ldrb	r2, [r7, #3]
 8004e76:	6879      	ldr	r1, [r7, #4]
 8004e78:	4613      	mov	r3, r2
 8004e7a:	011b      	lsls	r3, r3, #4
 8004e7c:	1a9b      	subs	r3, r3, r2
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	440b      	add	r3, r1
 8004e82:	334d      	adds	r3, #77	@ 0x4d
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	2b08      	cmp	r3, #8
 8004e88:	d126      	bne.n	8004ed8 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004e8a:	78fa      	ldrb	r2, [r7, #3]
 8004e8c:	6879      	ldr	r1, [r7, #4]
 8004e8e:	4613      	mov	r3, r2
 8004e90:	011b      	lsls	r3, r3, #4
 8004e92:	1a9b      	subs	r3, r3, r2
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	440b      	add	r3, r1
 8004e98:	334d      	adds	r3, #77	@ 0x4d
 8004e9a:	2202      	movs	r2, #2
 8004e9c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004e9e:	78fa      	ldrb	r2, [r7, #3]
 8004ea0:	6879      	ldr	r1, [r7, #4]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	011b      	lsls	r3, r3, #4
 8004ea6:	1a9b      	subs	r3, r3, r2
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	440b      	add	r3, r1
 8004eac:	3344      	adds	r3, #68	@ 0x44
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	1c59      	adds	r1, r3, #1
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	011b      	lsls	r3, r3, #4
 8004eb8:	1a9b      	subs	r3, r3, r2
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	4403      	add	r3, r0
 8004ebe:	3344      	adds	r3, #68	@ 0x44
 8004ec0:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8004ec2:	78fa      	ldrb	r2, [r7, #3]
 8004ec4:	6879      	ldr	r1, [r7, #4]
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	011b      	lsls	r3, r3, #4
 8004eca:	1a9b      	subs	r3, r3, r2
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	440b      	add	r3, r1
 8004ed0:	334c      	adds	r3, #76	@ 0x4c
 8004ed2:	2204      	movs	r2, #4
 8004ed4:	701a      	strb	r2, [r3, #0]
 8004ed6:	e00d      	b.n	8004ef4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8004ed8:	78fa      	ldrb	r2, [r7, #3]
 8004eda:	6879      	ldr	r1, [r7, #4]
 8004edc:	4613      	mov	r3, r2
 8004ede:	011b      	lsls	r3, r3, #4
 8004ee0:	1a9b      	subs	r3, r3, r2
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	440b      	add	r3, r1
 8004ee6:	334d      	adds	r3, #77	@ 0x4d
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	f000 8100 	beq.w	80050f0 <HCD_HC_IN_IRQHandler+0xcca>
 8004ef0:	e000      	b.n	8004ef4 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004ef2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004ef4:	78fa      	ldrb	r2, [r7, #3]
 8004ef6:	6879      	ldr	r1, [r7, #4]
 8004ef8:	4613      	mov	r3, r2
 8004efa:	011b      	lsls	r3, r3, #4
 8004efc:	1a9b      	subs	r3, r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	440b      	add	r3, r1
 8004f02:	334c      	adds	r3, #76	@ 0x4c
 8004f04:	781a      	ldrb	r2, [r3, #0]
 8004f06:	78fb      	ldrb	r3, [r7, #3]
 8004f08:	4619      	mov	r1, r3
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f006 ff52 	bl	800bdb4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004f10:	e0ef      	b.n	80050f2 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	78fa      	ldrb	r2, [r7, #3]
 8004f18:	4611      	mov	r1, r2
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f003 fe41 	bl	8008ba2 <USB_ReadChInterrupts>
 8004f20:	4603      	mov	r3, r0
 8004f22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f26:	2b40      	cmp	r3, #64	@ 0x40
 8004f28:	d12f      	bne.n	8004f8a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004f2a:	78fb      	ldrb	r3, [r7, #3]
 8004f2c:	015a      	lsls	r2, r3, #5
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	4413      	add	r3, r2
 8004f32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f36:	461a      	mov	r2, r3
 8004f38:	2340      	movs	r3, #64	@ 0x40
 8004f3a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004f3c:	78fa      	ldrb	r2, [r7, #3]
 8004f3e:	6879      	ldr	r1, [r7, #4]
 8004f40:	4613      	mov	r3, r2
 8004f42:	011b      	lsls	r3, r3, #4
 8004f44:	1a9b      	subs	r3, r3, r2
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	440b      	add	r3, r1
 8004f4a:	334d      	adds	r3, #77	@ 0x4d
 8004f4c:	2205      	movs	r2, #5
 8004f4e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004f50:	78fa      	ldrb	r2, [r7, #3]
 8004f52:	6879      	ldr	r1, [r7, #4]
 8004f54:	4613      	mov	r3, r2
 8004f56:	011b      	lsls	r3, r3, #4
 8004f58:	1a9b      	subs	r3, r3, r2
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	440b      	add	r3, r1
 8004f5e:	331a      	adds	r3, #26
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d109      	bne.n	8004f7a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004f66:	78fa      	ldrb	r2, [r7, #3]
 8004f68:	6879      	ldr	r1, [r7, #4]
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	011b      	lsls	r3, r3, #4
 8004f6e:	1a9b      	subs	r3, r3, r2
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	440b      	add	r3, r1
 8004f74:	3344      	adds	r3, #68	@ 0x44
 8004f76:	2200      	movs	r2, #0
 8004f78:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	78fa      	ldrb	r2, [r7, #3]
 8004f80:	4611      	mov	r1, r2
 8004f82:	4618      	mov	r0, r3
 8004f84:	f004 fbb7 	bl	80096f6 <USB_HC_Halt>
 8004f88:	e0b3      	b.n	80050f2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	78fa      	ldrb	r2, [r7, #3]
 8004f90:	4611      	mov	r1, r2
 8004f92:	4618      	mov	r0, r3
 8004f94:	f003 fe05 	bl	8008ba2 <USB_ReadChInterrupts>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	f003 0310 	and.w	r3, r3, #16
 8004f9e:	2b10      	cmp	r3, #16
 8004fa0:	f040 80a7 	bne.w	80050f2 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004fa4:	78fa      	ldrb	r2, [r7, #3]
 8004fa6:	6879      	ldr	r1, [r7, #4]
 8004fa8:	4613      	mov	r3, r2
 8004faa:	011b      	lsls	r3, r3, #4
 8004fac:	1a9b      	subs	r3, r3, r2
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	440b      	add	r3, r1
 8004fb2:	3326      	adds	r3, #38	@ 0x26
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	2b03      	cmp	r3, #3
 8004fb8:	d11b      	bne.n	8004ff2 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004fba:	78fa      	ldrb	r2, [r7, #3]
 8004fbc:	6879      	ldr	r1, [r7, #4]
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	011b      	lsls	r3, r3, #4
 8004fc2:	1a9b      	subs	r3, r3, r2
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	440b      	add	r3, r1
 8004fc8:	3344      	adds	r3, #68	@ 0x44
 8004fca:	2200      	movs	r2, #0
 8004fcc:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8004fce:	78fa      	ldrb	r2, [r7, #3]
 8004fd0:	6879      	ldr	r1, [r7, #4]
 8004fd2:	4613      	mov	r3, r2
 8004fd4:	011b      	lsls	r3, r3, #4
 8004fd6:	1a9b      	subs	r3, r3, r2
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	440b      	add	r3, r1
 8004fdc:	334d      	adds	r3, #77	@ 0x4d
 8004fde:	2204      	movs	r2, #4
 8004fe0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	78fa      	ldrb	r2, [r7, #3]
 8004fe8:	4611      	mov	r1, r2
 8004fea:	4618      	mov	r0, r3
 8004fec:	f004 fb83 	bl	80096f6 <USB_HC_Halt>
 8004ff0:	e03f      	b.n	8005072 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004ff2:	78fa      	ldrb	r2, [r7, #3]
 8004ff4:	6879      	ldr	r1, [r7, #4]
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	011b      	lsls	r3, r3, #4
 8004ffa:	1a9b      	subs	r3, r3, r2
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	440b      	add	r3, r1
 8005000:	3326      	adds	r3, #38	@ 0x26
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00a      	beq.n	800501e <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005008:	78fa      	ldrb	r2, [r7, #3]
 800500a:	6879      	ldr	r1, [r7, #4]
 800500c:	4613      	mov	r3, r2
 800500e:	011b      	lsls	r3, r3, #4
 8005010:	1a9b      	subs	r3, r3, r2
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	440b      	add	r3, r1
 8005016:	3326      	adds	r3, #38	@ 0x26
 8005018:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800501a:	2b02      	cmp	r3, #2
 800501c:	d129      	bne.n	8005072 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800501e:	78fa      	ldrb	r2, [r7, #3]
 8005020:	6879      	ldr	r1, [r7, #4]
 8005022:	4613      	mov	r3, r2
 8005024:	011b      	lsls	r3, r3, #4
 8005026:	1a9b      	subs	r3, r3, r2
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	440b      	add	r3, r1
 800502c:	3344      	adds	r3, #68	@ 0x44
 800502e:	2200      	movs	r2, #0
 8005030:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	799b      	ldrb	r3, [r3, #6]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00a      	beq.n	8005050 <HCD_HC_IN_IRQHandler+0xc2a>
 800503a:	78fa      	ldrb	r2, [r7, #3]
 800503c:	6879      	ldr	r1, [r7, #4]
 800503e:	4613      	mov	r3, r2
 8005040:	011b      	lsls	r3, r3, #4
 8005042:	1a9b      	subs	r3, r3, r2
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	440b      	add	r3, r1
 8005048:	331b      	adds	r3, #27
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	2b01      	cmp	r3, #1
 800504e:	d110      	bne.n	8005072 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8005050:	78fa      	ldrb	r2, [r7, #3]
 8005052:	6879      	ldr	r1, [r7, #4]
 8005054:	4613      	mov	r3, r2
 8005056:	011b      	lsls	r3, r3, #4
 8005058:	1a9b      	subs	r3, r3, r2
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	440b      	add	r3, r1
 800505e:	334d      	adds	r3, #77	@ 0x4d
 8005060:	2204      	movs	r2, #4
 8005062:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	78fa      	ldrb	r2, [r7, #3]
 800506a:	4611      	mov	r1, r2
 800506c:	4618      	mov	r0, r3
 800506e:	f004 fb42 	bl	80096f6 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8005072:	78fa      	ldrb	r2, [r7, #3]
 8005074:	6879      	ldr	r1, [r7, #4]
 8005076:	4613      	mov	r3, r2
 8005078:	011b      	lsls	r3, r3, #4
 800507a:	1a9b      	subs	r3, r3, r2
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	440b      	add	r3, r1
 8005080:	331b      	adds	r3, #27
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d129      	bne.n	80050dc <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005088:	78fa      	ldrb	r2, [r7, #3]
 800508a:	6879      	ldr	r1, [r7, #4]
 800508c:	4613      	mov	r3, r2
 800508e:	011b      	lsls	r3, r3, #4
 8005090:	1a9b      	subs	r3, r3, r2
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	440b      	add	r3, r1
 8005096:	331b      	adds	r3, #27
 8005098:	2200      	movs	r2, #0
 800509a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800509c:	78fb      	ldrb	r3, [r7, #3]
 800509e:	015a      	lsls	r2, r3, #5
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	4413      	add	r3, r2
 80050a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	78fa      	ldrb	r2, [r7, #3]
 80050ac:	0151      	lsls	r1, r2, #5
 80050ae:	693a      	ldr	r2, [r7, #16]
 80050b0:	440a      	add	r2, r1
 80050b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80050b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050ba:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80050bc:	78fb      	ldrb	r3, [r7, #3]
 80050be:	015a      	lsls	r2, r3, #5
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	4413      	add	r3, r2
 80050c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	78fa      	ldrb	r2, [r7, #3]
 80050cc:	0151      	lsls	r1, r2, #5
 80050ce:	693a      	ldr	r2, [r7, #16]
 80050d0:	440a      	add	r2, r1
 80050d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80050d6:	f043 0320 	orr.w	r3, r3, #32
 80050da:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80050dc:	78fb      	ldrb	r3, [r7, #3]
 80050de:	015a      	lsls	r2, r3, #5
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	4413      	add	r3, r2
 80050e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050e8:	461a      	mov	r2, r3
 80050ea:	2310      	movs	r3, #16
 80050ec:	6093      	str	r3, [r2, #8]
 80050ee:	e000      	b.n	80050f2 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80050f0:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80050f2:	3718      	adds	r7, #24
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b086      	sub	sp, #24
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	460b      	mov	r3, r1
 8005102:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	78fa      	ldrb	r2, [r7, #3]
 8005114:	4611      	mov	r1, r2
 8005116:	4618      	mov	r0, r3
 8005118:	f003 fd43 	bl	8008ba2 <USB_ReadChInterrupts>
 800511c:	4603      	mov	r3, r0
 800511e:	f003 0304 	and.w	r3, r3, #4
 8005122:	2b04      	cmp	r3, #4
 8005124:	d11b      	bne.n	800515e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8005126:	78fb      	ldrb	r3, [r7, #3]
 8005128:	015a      	lsls	r2, r3, #5
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	4413      	add	r3, r2
 800512e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005132:	461a      	mov	r2, r3
 8005134:	2304      	movs	r3, #4
 8005136:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8005138:	78fa      	ldrb	r2, [r7, #3]
 800513a:	6879      	ldr	r1, [r7, #4]
 800513c:	4613      	mov	r3, r2
 800513e:	011b      	lsls	r3, r3, #4
 8005140:	1a9b      	subs	r3, r3, r2
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	440b      	add	r3, r1
 8005146:	334d      	adds	r3, #77	@ 0x4d
 8005148:	2207      	movs	r2, #7
 800514a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	78fa      	ldrb	r2, [r7, #3]
 8005152:	4611      	mov	r1, r2
 8005154:	4618      	mov	r0, r3
 8005156:	f004 face 	bl	80096f6 <USB_HC_Halt>
 800515a:	f000 bc89 	b.w	8005a70 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	78fa      	ldrb	r2, [r7, #3]
 8005164:	4611      	mov	r1, r2
 8005166:	4618      	mov	r0, r3
 8005168:	f003 fd1b 	bl	8008ba2 <USB_ReadChInterrupts>
 800516c:	4603      	mov	r3, r0
 800516e:	f003 0320 	and.w	r3, r3, #32
 8005172:	2b20      	cmp	r3, #32
 8005174:	f040 8082 	bne.w	800527c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005178:	78fb      	ldrb	r3, [r7, #3]
 800517a:	015a      	lsls	r2, r3, #5
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	4413      	add	r3, r2
 8005180:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005184:	461a      	mov	r2, r3
 8005186:	2320      	movs	r3, #32
 8005188:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800518a:	78fa      	ldrb	r2, [r7, #3]
 800518c:	6879      	ldr	r1, [r7, #4]
 800518e:	4613      	mov	r3, r2
 8005190:	011b      	lsls	r3, r3, #4
 8005192:	1a9b      	subs	r3, r3, r2
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	440b      	add	r3, r1
 8005198:	3319      	adds	r3, #25
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	2b01      	cmp	r3, #1
 800519e:	d124      	bne.n	80051ea <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80051a0:	78fa      	ldrb	r2, [r7, #3]
 80051a2:	6879      	ldr	r1, [r7, #4]
 80051a4:	4613      	mov	r3, r2
 80051a6:	011b      	lsls	r3, r3, #4
 80051a8:	1a9b      	subs	r3, r3, r2
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	440b      	add	r3, r1
 80051ae:	3319      	adds	r3, #25
 80051b0:	2200      	movs	r2, #0
 80051b2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80051b4:	78fa      	ldrb	r2, [r7, #3]
 80051b6:	6879      	ldr	r1, [r7, #4]
 80051b8:	4613      	mov	r3, r2
 80051ba:	011b      	lsls	r3, r3, #4
 80051bc:	1a9b      	subs	r3, r3, r2
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	440b      	add	r3, r1
 80051c2:	334c      	adds	r3, #76	@ 0x4c
 80051c4:	2202      	movs	r2, #2
 80051c6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80051c8:	78fa      	ldrb	r2, [r7, #3]
 80051ca:	6879      	ldr	r1, [r7, #4]
 80051cc:	4613      	mov	r3, r2
 80051ce:	011b      	lsls	r3, r3, #4
 80051d0:	1a9b      	subs	r3, r3, r2
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	440b      	add	r3, r1
 80051d6:	334d      	adds	r3, #77	@ 0x4d
 80051d8:	2203      	movs	r2, #3
 80051da:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	78fa      	ldrb	r2, [r7, #3]
 80051e2:	4611      	mov	r1, r2
 80051e4:	4618      	mov	r0, r3
 80051e6:	f004 fa86 	bl	80096f6 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80051ea:	78fa      	ldrb	r2, [r7, #3]
 80051ec:	6879      	ldr	r1, [r7, #4]
 80051ee:	4613      	mov	r3, r2
 80051f0:	011b      	lsls	r3, r3, #4
 80051f2:	1a9b      	subs	r3, r3, r2
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	440b      	add	r3, r1
 80051f8:	331a      	adds	r3, #26
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	f040 8437 	bne.w	8005a70 <HCD_HC_OUT_IRQHandler+0x978>
 8005202:	78fa      	ldrb	r2, [r7, #3]
 8005204:	6879      	ldr	r1, [r7, #4]
 8005206:	4613      	mov	r3, r2
 8005208:	011b      	lsls	r3, r3, #4
 800520a:	1a9b      	subs	r3, r3, r2
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	440b      	add	r3, r1
 8005210:	331b      	adds	r3, #27
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	2b00      	cmp	r3, #0
 8005216:	f040 842b 	bne.w	8005a70 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800521a:	78fa      	ldrb	r2, [r7, #3]
 800521c:	6879      	ldr	r1, [r7, #4]
 800521e:	4613      	mov	r3, r2
 8005220:	011b      	lsls	r3, r3, #4
 8005222:	1a9b      	subs	r3, r3, r2
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	440b      	add	r3, r1
 8005228:	3326      	adds	r3, #38	@ 0x26
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	2b01      	cmp	r3, #1
 800522e:	d009      	beq.n	8005244 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8005230:	78fa      	ldrb	r2, [r7, #3]
 8005232:	6879      	ldr	r1, [r7, #4]
 8005234:	4613      	mov	r3, r2
 8005236:	011b      	lsls	r3, r3, #4
 8005238:	1a9b      	subs	r3, r3, r2
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	440b      	add	r3, r1
 800523e:	331b      	adds	r3, #27
 8005240:	2201      	movs	r2, #1
 8005242:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8005244:	78fa      	ldrb	r2, [r7, #3]
 8005246:	6879      	ldr	r1, [r7, #4]
 8005248:	4613      	mov	r3, r2
 800524a:	011b      	lsls	r3, r3, #4
 800524c:	1a9b      	subs	r3, r3, r2
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	440b      	add	r3, r1
 8005252:	334d      	adds	r3, #77	@ 0x4d
 8005254:	2203      	movs	r2, #3
 8005256:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	78fa      	ldrb	r2, [r7, #3]
 800525e:	4611      	mov	r1, r2
 8005260:	4618      	mov	r0, r3
 8005262:	f004 fa48 	bl	80096f6 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8005266:	78fa      	ldrb	r2, [r7, #3]
 8005268:	6879      	ldr	r1, [r7, #4]
 800526a:	4613      	mov	r3, r2
 800526c:	011b      	lsls	r3, r3, #4
 800526e:	1a9b      	subs	r3, r3, r2
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	440b      	add	r3, r1
 8005274:	3344      	adds	r3, #68	@ 0x44
 8005276:	2200      	movs	r2, #0
 8005278:	601a      	str	r2, [r3, #0]
 800527a:	e3f9      	b.n	8005a70 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	78fa      	ldrb	r2, [r7, #3]
 8005282:	4611      	mov	r1, r2
 8005284:	4618      	mov	r0, r3
 8005286:	f003 fc8c 	bl	8008ba2 <USB_ReadChInterrupts>
 800528a:	4603      	mov	r3, r0
 800528c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005290:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005294:	d111      	bne.n	80052ba <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8005296:	78fb      	ldrb	r3, [r7, #3]
 8005298:	015a      	lsls	r2, r3, #5
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	4413      	add	r3, r2
 800529e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052a2:	461a      	mov	r2, r3
 80052a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80052a8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	78fa      	ldrb	r2, [r7, #3]
 80052b0:	4611      	mov	r1, r2
 80052b2:	4618      	mov	r0, r3
 80052b4:	f004 fa1f 	bl	80096f6 <USB_HC_Halt>
 80052b8:	e3da      	b.n	8005a70 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	78fa      	ldrb	r2, [r7, #3]
 80052c0:	4611      	mov	r1, r2
 80052c2:	4618      	mov	r0, r3
 80052c4:	f003 fc6d 	bl	8008ba2 <USB_ReadChInterrupts>
 80052c8:	4603      	mov	r3, r0
 80052ca:	f003 0301 	and.w	r3, r3, #1
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d168      	bne.n	80053a4 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80052d2:	78fa      	ldrb	r2, [r7, #3]
 80052d4:	6879      	ldr	r1, [r7, #4]
 80052d6:	4613      	mov	r3, r2
 80052d8:	011b      	lsls	r3, r3, #4
 80052da:	1a9b      	subs	r3, r3, r2
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	440b      	add	r3, r1
 80052e0:	3344      	adds	r3, #68	@ 0x44
 80052e2:	2200      	movs	r2, #0
 80052e4:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	78fa      	ldrb	r2, [r7, #3]
 80052ec:	4611      	mov	r1, r2
 80052ee:	4618      	mov	r0, r3
 80052f0:	f003 fc57 	bl	8008ba2 <USB_ReadChInterrupts>
 80052f4:	4603      	mov	r3, r0
 80052f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052fa:	2b40      	cmp	r3, #64	@ 0x40
 80052fc:	d112      	bne.n	8005324 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80052fe:	78fa      	ldrb	r2, [r7, #3]
 8005300:	6879      	ldr	r1, [r7, #4]
 8005302:	4613      	mov	r3, r2
 8005304:	011b      	lsls	r3, r3, #4
 8005306:	1a9b      	subs	r3, r3, r2
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	440b      	add	r3, r1
 800530c:	3319      	adds	r3, #25
 800530e:	2201      	movs	r2, #1
 8005310:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005312:	78fb      	ldrb	r3, [r7, #3]
 8005314:	015a      	lsls	r2, r3, #5
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	4413      	add	r3, r2
 800531a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800531e:	461a      	mov	r2, r3
 8005320:	2340      	movs	r3, #64	@ 0x40
 8005322:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8005324:	78fa      	ldrb	r2, [r7, #3]
 8005326:	6879      	ldr	r1, [r7, #4]
 8005328:	4613      	mov	r3, r2
 800532a:	011b      	lsls	r3, r3, #4
 800532c:	1a9b      	subs	r3, r3, r2
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	440b      	add	r3, r1
 8005332:	331b      	adds	r3, #27
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d019      	beq.n	800536e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800533a:	78fa      	ldrb	r2, [r7, #3]
 800533c:	6879      	ldr	r1, [r7, #4]
 800533e:	4613      	mov	r3, r2
 8005340:	011b      	lsls	r3, r3, #4
 8005342:	1a9b      	subs	r3, r3, r2
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	440b      	add	r3, r1
 8005348:	331b      	adds	r3, #27
 800534a:	2200      	movs	r2, #0
 800534c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800534e:	78fb      	ldrb	r3, [r7, #3]
 8005350:	015a      	lsls	r2, r3, #5
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	4413      	add	r3, r2
 8005356:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	78fa      	ldrb	r2, [r7, #3]
 800535e:	0151      	lsls	r1, r2, #5
 8005360:	693a      	ldr	r2, [r7, #16]
 8005362:	440a      	add	r2, r1
 8005364:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005368:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800536c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800536e:	78fb      	ldrb	r3, [r7, #3]
 8005370:	015a      	lsls	r2, r3, #5
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	4413      	add	r3, r2
 8005376:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800537a:	461a      	mov	r2, r3
 800537c:	2301      	movs	r3, #1
 800537e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8005380:	78fa      	ldrb	r2, [r7, #3]
 8005382:	6879      	ldr	r1, [r7, #4]
 8005384:	4613      	mov	r3, r2
 8005386:	011b      	lsls	r3, r3, #4
 8005388:	1a9b      	subs	r3, r3, r2
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	440b      	add	r3, r1
 800538e:	334d      	adds	r3, #77	@ 0x4d
 8005390:	2201      	movs	r2, #1
 8005392:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	78fa      	ldrb	r2, [r7, #3]
 800539a:	4611      	mov	r1, r2
 800539c:	4618      	mov	r0, r3
 800539e:	f004 f9aa 	bl	80096f6 <USB_HC_Halt>
 80053a2:	e365      	b.n	8005a70 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	78fa      	ldrb	r2, [r7, #3]
 80053aa:	4611      	mov	r1, r2
 80053ac:	4618      	mov	r0, r3
 80053ae:	f003 fbf8 	bl	8008ba2 <USB_ReadChInterrupts>
 80053b2:	4603      	mov	r3, r0
 80053b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053b8:	2b40      	cmp	r3, #64	@ 0x40
 80053ba:	d139      	bne.n	8005430 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80053bc:	78fa      	ldrb	r2, [r7, #3]
 80053be:	6879      	ldr	r1, [r7, #4]
 80053c0:	4613      	mov	r3, r2
 80053c2:	011b      	lsls	r3, r3, #4
 80053c4:	1a9b      	subs	r3, r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	440b      	add	r3, r1
 80053ca:	334d      	adds	r3, #77	@ 0x4d
 80053cc:	2205      	movs	r2, #5
 80053ce:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80053d0:	78fa      	ldrb	r2, [r7, #3]
 80053d2:	6879      	ldr	r1, [r7, #4]
 80053d4:	4613      	mov	r3, r2
 80053d6:	011b      	lsls	r3, r3, #4
 80053d8:	1a9b      	subs	r3, r3, r2
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	440b      	add	r3, r1
 80053de:	331a      	adds	r3, #26
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d109      	bne.n	80053fa <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80053e6:	78fa      	ldrb	r2, [r7, #3]
 80053e8:	6879      	ldr	r1, [r7, #4]
 80053ea:	4613      	mov	r3, r2
 80053ec:	011b      	lsls	r3, r3, #4
 80053ee:	1a9b      	subs	r3, r3, r2
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	440b      	add	r3, r1
 80053f4:	3319      	adds	r3, #25
 80053f6:	2201      	movs	r2, #1
 80053f8:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80053fa:	78fa      	ldrb	r2, [r7, #3]
 80053fc:	6879      	ldr	r1, [r7, #4]
 80053fe:	4613      	mov	r3, r2
 8005400:	011b      	lsls	r3, r3, #4
 8005402:	1a9b      	subs	r3, r3, r2
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	440b      	add	r3, r1
 8005408:	3344      	adds	r3, #68	@ 0x44
 800540a:	2200      	movs	r2, #0
 800540c:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	78fa      	ldrb	r2, [r7, #3]
 8005414:	4611      	mov	r1, r2
 8005416:	4618      	mov	r0, r3
 8005418:	f004 f96d 	bl	80096f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800541c:	78fb      	ldrb	r3, [r7, #3]
 800541e:	015a      	lsls	r2, r3, #5
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	4413      	add	r3, r2
 8005424:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005428:	461a      	mov	r2, r3
 800542a:	2340      	movs	r3, #64	@ 0x40
 800542c:	6093      	str	r3, [r2, #8]
 800542e:	e31f      	b.n	8005a70 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	78fa      	ldrb	r2, [r7, #3]
 8005436:	4611      	mov	r1, r2
 8005438:	4618      	mov	r0, r3
 800543a:	f003 fbb2 	bl	8008ba2 <USB_ReadChInterrupts>
 800543e:	4603      	mov	r3, r0
 8005440:	f003 0308 	and.w	r3, r3, #8
 8005444:	2b08      	cmp	r3, #8
 8005446:	d11a      	bne.n	800547e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8005448:	78fb      	ldrb	r3, [r7, #3]
 800544a:	015a      	lsls	r2, r3, #5
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	4413      	add	r3, r2
 8005450:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005454:	461a      	mov	r2, r3
 8005456:	2308      	movs	r3, #8
 8005458:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800545a:	78fa      	ldrb	r2, [r7, #3]
 800545c:	6879      	ldr	r1, [r7, #4]
 800545e:	4613      	mov	r3, r2
 8005460:	011b      	lsls	r3, r3, #4
 8005462:	1a9b      	subs	r3, r3, r2
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	440b      	add	r3, r1
 8005468:	334d      	adds	r3, #77	@ 0x4d
 800546a:	2206      	movs	r2, #6
 800546c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	78fa      	ldrb	r2, [r7, #3]
 8005474:	4611      	mov	r1, r2
 8005476:	4618      	mov	r0, r3
 8005478:	f004 f93d 	bl	80096f6 <USB_HC_Halt>
 800547c:	e2f8      	b.n	8005a70 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	78fa      	ldrb	r2, [r7, #3]
 8005484:	4611      	mov	r1, r2
 8005486:	4618      	mov	r0, r3
 8005488:	f003 fb8b 	bl	8008ba2 <USB_ReadChInterrupts>
 800548c:	4603      	mov	r3, r0
 800548e:	f003 0310 	and.w	r3, r3, #16
 8005492:	2b10      	cmp	r3, #16
 8005494:	d144      	bne.n	8005520 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8005496:	78fa      	ldrb	r2, [r7, #3]
 8005498:	6879      	ldr	r1, [r7, #4]
 800549a:	4613      	mov	r3, r2
 800549c:	011b      	lsls	r3, r3, #4
 800549e:	1a9b      	subs	r3, r3, r2
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	440b      	add	r3, r1
 80054a4:	3344      	adds	r3, #68	@ 0x44
 80054a6:	2200      	movs	r2, #0
 80054a8:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80054aa:	78fa      	ldrb	r2, [r7, #3]
 80054ac:	6879      	ldr	r1, [r7, #4]
 80054ae:	4613      	mov	r3, r2
 80054b0:	011b      	lsls	r3, r3, #4
 80054b2:	1a9b      	subs	r3, r3, r2
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	440b      	add	r3, r1
 80054b8:	334d      	adds	r3, #77	@ 0x4d
 80054ba:	2204      	movs	r2, #4
 80054bc:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80054be:	78fa      	ldrb	r2, [r7, #3]
 80054c0:	6879      	ldr	r1, [r7, #4]
 80054c2:	4613      	mov	r3, r2
 80054c4:	011b      	lsls	r3, r3, #4
 80054c6:	1a9b      	subs	r3, r3, r2
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	440b      	add	r3, r1
 80054cc:	3319      	adds	r3, #25
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d114      	bne.n	80054fe <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80054d4:	78fa      	ldrb	r2, [r7, #3]
 80054d6:	6879      	ldr	r1, [r7, #4]
 80054d8:	4613      	mov	r3, r2
 80054da:	011b      	lsls	r3, r3, #4
 80054dc:	1a9b      	subs	r3, r3, r2
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	440b      	add	r3, r1
 80054e2:	3318      	adds	r3, #24
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d109      	bne.n	80054fe <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80054ea:	78fa      	ldrb	r2, [r7, #3]
 80054ec:	6879      	ldr	r1, [r7, #4]
 80054ee:	4613      	mov	r3, r2
 80054f0:	011b      	lsls	r3, r3, #4
 80054f2:	1a9b      	subs	r3, r3, r2
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	440b      	add	r3, r1
 80054f8:	3319      	adds	r3, #25
 80054fa:	2201      	movs	r2, #1
 80054fc:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	78fa      	ldrb	r2, [r7, #3]
 8005504:	4611      	mov	r1, r2
 8005506:	4618      	mov	r0, r3
 8005508:	f004 f8f5 	bl	80096f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800550c:	78fb      	ldrb	r3, [r7, #3]
 800550e:	015a      	lsls	r2, r3, #5
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	4413      	add	r3, r2
 8005514:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005518:	461a      	mov	r2, r3
 800551a:	2310      	movs	r3, #16
 800551c:	6093      	str	r3, [r2, #8]
 800551e:	e2a7      	b.n	8005a70 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	78fa      	ldrb	r2, [r7, #3]
 8005526:	4611      	mov	r1, r2
 8005528:	4618      	mov	r0, r3
 800552a:	f003 fb3a 	bl	8008ba2 <USB_ReadChInterrupts>
 800552e:	4603      	mov	r3, r0
 8005530:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005534:	2b80      	cmp	r3, #128	@ 0x80
 8005536:	f040 8083 	bne.w	8005640 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	799b      	ldrb	r3, [r3, #6]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d111      	bne.n	8005566 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8005542:	78fa      	ldrb	r2, [r7, #3]
 8005544:	6879      	ldr	r1, [r7, #4]
 8005546:	4613      	mov	r3, r2
 8005548:	011b      	lsls	r3, r3, #4
 800554a:	1a9b      	subs	r3, r3, r2
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	440b      	add	r3, r1
 8005550:	334d      	adds	r3, #77	@ 0x4d
 8005552:	2207      	movs	r2, #7
 8005554:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	78fa      	ldrb	r2, [r7, #3]
 800555c:	4611      	mov	r1, r2
 800555e:	4618      	mov	r0, r3
 8005560:	f004 f8c9 	bl	80096f6 <USB_HC_Halt>
 8005564:	e062      	b.n	800562c <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8005566:	78fa      	ldrb	r2, [r7, #3]
 8005568:	6879      	ldr	r1, [r7, #4]
 800556a:	4613      	mov	r3, r2
 800556c:	011b      	lsls	r3, r3, #4
 800556e:	1a9b      	subs	r3, r3, r2
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	440b      	add	r3, r1
 8005574:	3344      	adds	r3, #68	@ 0x44
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	1c59      	adds	r1, r3, #1
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	4613      	mov	r3, r2
 800557e:	011b      	lsls	r3, r3, #4
 8005580:	1a9b      	subs	r3, r3, r2
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	4403      	add	r3, r0
 8005586:	3344      	adds	r3, #68	@ 0x44
 8005588:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800558a:	78fa      	ldrb	r2, [r7, #3]
 800558c:	6879      	ldr	r1, [r7, #4]
 800558e:	4613      	mov	r3, r2
 8005590:	011b      	lsls	r3, r3, #4
 8005592:	1a9b      	subs	r3, r3, r2
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	440b      	add	r3, r1
 8005598:	3344      	adds	r3, #68	@ 0x44
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2b02      	cmp	r3, #2
 800559e:	d922      	bls.n	80055e6 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80055a0:	78fa      	ldrb	r2, [r7, #3]
 80055a2:	6879      	ldr	r1, [r7, #4]
 80055a4:	4613      	mov	r3, r2
 80055a6:	011b      	lsls	r3, r3, #4
 80055a8:	1a9b      	subs	r3, r3, r2
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	440b      	add	r3, r1
 80055ae:	3344      	adds	r3, #68	@ 0x44
 80055b0:	2200      	movs	r2, #0
 80055b2:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80055b4:	78fa      	ldrb	r2, [r7, #3]
 80055b6:	6879      	ldr	r1, [r7, #4]
 80055b8:	4613      	mov	r3, r2
 80055ba:	011b      	lsls	r3, r3, #4
 80055bc:	1a9b      	subs	r3, r3, r2
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	440b      	add	r3, r1
 80055c2:	334c      	adds	r3, #76	@ 0x4c
 80055c4:	2204      	movs	r2, #4
 80055c6:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80055c8:	78fa      	ldrb	r2, [r7, #3]
 80055ca:	6879      	ldr	r1, [r7, #4]
 80055cc:	4613      	mov	r3, r2
 80055ce:	011b      	lsls	r3, r3, #4
 80055d0:	1a9b      	subs	r3, r3, r2
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	440b      	add	r3, r1
 80055d6:	334c      	adds	r3, #76	@ 0x4c
 80055d8:	781a      	ldrb	r2, [r3, #0]
 80055da:	78fb      	ldrb	r3, [r7, #3]
 80055dc:	4619      	mov	r1, r3
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f006 fbe8 	bl	800bdb4 <HAL_HCD_HC_NotifyURBChange_Callback>
 80055e4:	e022      	b.n	800562c <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80055e6:	78fa      	ldrb	r2, [r7, #3]
 80055e8:	6879      	ldr	r1, [r7, #4]
 80055ea:	4613      	mov	r3, r2
 80055ec:	011b      	lsls	r3, r3, #4
 80055ee:	1a9b      	subs	r3, r3, r2
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	440b      	add	r3, r1
 80055f4:	334c      	adds	r3, #76	@ 0x4c
 80055f6:	2202      	movs	r2, #2
 80055f8:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80055fa:	78fb      	ldrb	r3, [r7, #3]
 80055fc:	015a      	lsls	r2, r3, #5
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	4413      	add	r3, r2
 8005602:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005610:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005618:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800561a:	78fb      	ldrb	r3, [r7, #3]
 800561c:	015a      	lsls	r2, r3, #5
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	4413      	add	r3, r2
 8005622:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005626:	461a      	mov	r2, r3
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800562c:	78fb      	ldrb	r3, [r7, #3]
 800562e:	015a      	lsls	r2, r3, #5
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	4413      	add	r3, r2
 8005634:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005638:	461a      	mov	r2, r3
 800563a:	2380      	movs	r3, #128	@ 0x80
 800563c:	6093      	str	r3, [r2, #8]
 800563e:	e217      	b.n	8005a70 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	78fa      	ldrb	r2, [r7, #3]
 8005646:	4611      	mov	r1, r2
 8005648:	4618      	mov	r0, r3
 800564a:	f003 faaa 	bl	8008ba2 <USB_ReadChInterrupts>
 800564e:	4603      	mov	r3, r0
 8005650:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005654:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005658:	d11b      	bne.n	8005692 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800565a:	78fa      	ldrb	r2, [r7, #3]
 800565c:	6879      	ldr	r1, [r7, #4]
 800565e:	4613      	mov	r3, r2
 8005660:	011b      	lsls	r3, r3, #4
 8005662:	1a9b      	subs	r3, r3, r2
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	440b      	add	r3, r1
 8005668:	334d      	adds	r3, #77	@ 0x4d
 800566a:	2209      	movs	r2, #9
 800566c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	78fa      	ldrb	r2, [r7, #3]
 8005674:	4611      	mov	r1, r2
 8005676:	4618      	mov	r0, r3
 8005678:	f004 f83d 	bl	80096f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800567c:	78fb      	ldrb	r3, [r7, #3]
 800567e:	015a      	lsls	r2, r3, #5
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	4413      	add	r3, r2
 8005684:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005688:	461a      	mov	r2, r3
 800568a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800568e:	6093      	str	r3, [r2, #8]
 8005690:	e1ee      	b.n	8005a70 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	78fa      	ldrb	r2, [r7, #3]
 8005698:	4611      	mov	r1, r2
 800569a:	4618      	mov	r0, r3
 800569c:	f003 fa81 	bl	8008ba2 <USB_ReadChInterrupts>
 80056a0:	4603      	mov	r3, r0
 80056a2:	f003 0302 	and.w	r3, r3, #2
 80056a6:	2b02      	cmp	r3, #2
 80056a8:	f040 81df 	bne.w	8005a6a <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80056ac:	78fb      	ldrb	r3, [r7, #3]
 80056ae:	015a      	lsls	r2, r3, #5
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	4413      	add	r3, r2
 80056b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056b8:	461a      	mov	r2, r3
 80056ba:	2302      	movs	r3, #2
 80056bc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80056be:	78fa      	ldrb	r2, [r7, #3]
 80056c0:	6879      	ldr	r1, [r7, #4]
 80056c2:	4613      	mov	r3, r2
 80056c4:	011b      	lsls	r3, r3, #4
 80056c6:	1a9b      	subs	r3, r3, r2
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	440b      	add	r3, r1
 80056cc:	334d      	adds	r3, #77	@ 0x4d
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	f040 8093 	bne.w	80057fc <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80056d6:	78fa      	ldrb	r2, [r7, #3]
 80056d8:	6879      	ldr	r1, [r7, #4]
 80056da:	4613      	mov	r3, r2
 80056dc:	011b      	lsls	r3, r3, #4
 80056de:	1a9b      	subs	r3, r3, r2
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	440b      	add	r3, r1
 80056e4:	334d      	adds	r3, #77	@ 0x4d
 80056e6:	2202      	movs	r2, #2
 80056e8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80056ea:	78fa      	ldrb	r2, [r7, #3]
 80056ec:	6879      	ldr	r1, [r7, #4]
 80056ee:	4613      	mov	r3, r2
 80056f0:	011b      	lsls	r3, r3, #4
 80056f2:	1a9b      	subs	r3, r3, r2
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	440b      	add	r3, r1
 80056f8:	334c      	adds	r3, #76	@ 0x4c
 80056fa:	2201      	movs	r2, #1
 80056fc:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80056fe:	78fa      	ldrb	r2, [r7, #3]
 8005700:	6879      	ldr	r1, [r7, #4]
 8005702:	4613      	mov	r3, r2
 8005704:	011b      	lsls	r3, r3, #4
 8005706:	1a9b      	subs	r3, r3, r2
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	440b      	add	r3, r1
 800570c:	3326      	adds	r3, #38	@ 0x26
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	2b02      	cmp	r3, #2
 8005712:	d00b      	beq.n	800572c <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8005714:	78fa      	ldrb	r2, [r7, #3]
 8005716:	6879      	ldr	r1, [r7, #4]
 8005718:	4613      	mov	r3, r2
 800571a:	011b      	lsls	r3, r3, #4
 800571c:	1a9b      	subs	r3, r3, r2
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	440b      	add	r3, r1
 8005722:	3326      	adds	r3, #38	@ 0x26
 8005724:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005726:	2b03      	cmp	r3, #3
 8005728:	f040 8190 	bne.w	8005a4c <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	799b      	ldrb	r3, [r3, #6]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d115      	bne.n	8005760 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8005734:	78fa      	ldrb	r2, [r7, #3]
 8005736:	6879      	ldr	r1, [r7, #4]
 8005738:	4613      	mov	r3, r2
 800573a:	011b      	lsls	r3, r3, #4
 800573c:	1a9b      	subs	r3, r3, r2
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	440b      	add	r3, r1
 8005742:	333d      	adds	r3, #61	@ 0x3d
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	78fa      	ldrb	r2, [r7, #3]
 8005748:	f083 0301 	eor.w	r3, r3, #1
 800574c:	b2d8      	uxtb	r0, r3
 800574e:	6879      	ldr	r1, [r7, #4]
 8005750:	4613      	mov	r3, r2
 8005752:	011b      	lsls	r3, r3, #4
 8005754:	1a9b      	subs	r3, r3, r2
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	440b      	add	r3, r1
 800575a:	333d      	adds	r3, #61	@ 0x3d
 800575c:	4602      	mov	r2, r0
 800575e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	799b      	ldrb	r3, [r3, #6]
 8005764:	2b01      	cmp	r3, #1
 8005766:	f040 8171 	bne.w	8005a4c <HCD_HC_OUT_IRQHandler+0x954>
 800576a:	78fa      	ldrb	r2, [r7, #3]
 800576c:	6879      	ldr	r1, [r7, #4]
 800576e:	4613      	mov	r3, r2
 8005770:	011b      	lsls	r3, r3, #4
 8005772:	1a9b      	subs	r3, r3, r2
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	440b      	add	r3, r1
 8005778:	3334      	adds	r3, #52	@ 0x34
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	2b00      	cmp	r3, #0
 800577e:	f000 8165 	beq.w	8005a4c <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8005782:	78fa      	ldrb	r2, [r7, #3]
 8005784:	6879      	ldr	r1, [r7, #4]
 8005786:	4613      	mov	r3, r2
 8005788:	011b      	lsls	r3, r3, #4
 800578a:	1a9b      	subs	r3, r3, r2
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	440b      	add	r3, r1
 8005790:	3334      	adds	r3, #52	@ 0x34
 8005792:	6819      	ldr	r1, [r3, #0]
 8005794:	78fa      	ldrb	r2, [r7, #3]
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	4613      	mov	r3, r2
 800579a:	011b      	lsls	r3, r3, #4
 800579c:	1a9b      	subs	r3, r3, r2
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	4403      	add	r3, r0
 80057a2:	3328      	adds	r3, #40	@ 0x28
 80057a4:	881b      	ldrh	r3, [r3, #0]
 80057a6:	440b      	add	r3, r1
 80057a8:	1e59      	subs	r1, r3, #1
 80057aa:	78fa      	ldrb	r2, [r7, #3]
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	4613      	mov	r3, r2
 80057b0:	011b      	lsls	r3, r3, #4
 80057b2:	1a9b      	subs	r3, r3, r2
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	4403      	add	r3, r0
 80057b8:	3328      	adds	r3, #40	@ 0x28
 80057ba:	881b      	ldrh	r3, [r3, #0]
 80057bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80057c0:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	f003 0301 	and.w	r3, r3, #1
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	f000 813f 	beq.w	8005a4c <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80057ce:	78fa      	ldrb	r2, [r7, #3]
 80057d0:	6879      	ldr	r1, [r7, #4]
 80057d2:	4613      	mov	r3, r2
 80057d4:	011b      	lsls	r3, r3, #4
 80057d6:	1a9b      	subs	r3, r3, r2
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	440b      	add	r3, r1
 80057dc:	333d      	adds	r3, #61	@ 0x3d
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	78fa      	ldrb	r2, [r7, #3]
 80057e2:	f083 0301 	eor.w	r3, r3, #1
 80057e6:	b2d8      	uxtb	r0, r3
 80057e8:	6879      	ldr	r1, [r7, #4]
 80057ea:	4613      	mov	r3, r2
 80057ec:	011b      	lsls	r3, r3, #4
 80057ee:	1a9b      	subs	r3, r3, r2
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	440b      	add	r3, r1
 80057f4:	333d      	adds	r3, #61	@ 0x3d
 80057f6:	4602      	mov	r2, r0
 80057f8:	701a      	strb	r2, [r3, #0]
 80057fa:	e127      	b.n	8005a4c <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80057fc:	78fa      	ldrb	r2, [r7, #3]
 80057fe:	6879      	ldr	r1, [r7, #4]
 8005800:	4613      	mov	r3, r2
 8005802:	011b      	lsls	r3, r3, #4
 8005804:	1a9b      	subs	r3, r3, r2
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	440b      	add	r3, r1
 800580a:	334d      	adds	r3, #77	@ 0x4d
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	2b03      	cmp	r3, #3
 8005810:	d120      	bne.n	8005854 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005812:	78fa      	ldrb	r2, [r7, #3]
 8005814:	6879      	ldr	r1, [r7, #4]
 8005816:	4613      	mov	r3, r2
 8005818:	011b      	lsls	r3, r3, #4
 800581a:	1a9b      	subs	r3, r3, r2
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	440b      	add	r3, r1
 8005820:	334d      	adds	r3, #77	@ 0x4d
 8005822:	2202      	movs	r2, #2
 8005824:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005826:	78fa      	ldrb	r2, [r7, #3]
 8005828:	6879      	ldr	r1, [r7, #4]
 800582a:	4613      	mov	r3, r2
 800582c:	011b      	lsls	r3, r3, #4
 800582e:	1a9b      	subs	r3, r3, r2
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	440b      	add	r3, r1
 8005834:	331b      	adds	r3, #27
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	2b01      	cmp	r3, #1
 800583a:	f040 8107 	bne.w	8005a4c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800583e:	78fa      	ldrb	r2, [r7, #3]
 8005840:	6879      	ldr	r1, [r7, #4]
 8005842:	4613      	mov	r3, r2
 8005844:	011b      	lsls	r3, r3, #4
 8005846:	1a9b      	subs	r3, r3, r2
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	440b      	add	r3, r1
 800584c:	334c      	adds	r3, #76	@ 0x4c
 800584e:	2202      	movs	r2, #2
 8005850:	701a      	strb	r2, [r3, #0]
 8005852:	e0fb      	b.n	8005a4c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8005854:	78fa      	ldrb	r2, [r7, #3]
 8005856:	6879      	ldr	r1, [r7, #4]
 8005858:	4613      	mov	r3, r2
 800585a:	011b      	lsls	r3, r3, #4
 800585c:	1a9b      	subs	r3, r3, r2
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	440b      	add	r3, r1
 8005862:	334d      	adds	r3, #77	@ 0x4d
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	2b04      	cmp	r3, #4
 8005868:	d13a      	bne.n	80058e0 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800586a:	78fa      	ldrb	r2, [r7, #3]
 800586c:	6879      	ldr	r1, [r7, #4]
 800586e:	4613      	mov	r3, r2
 8005870:	011b      	lsls	r3, r3, #4
 8005872:	1a9b      	subs	r3, r3, r2
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	440b      	add	r3, r1
 8005878:	334d      	adds	r3, #77	@ 0x4d
 800587a:	2202      	movs	r2, #2
 800587c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800587e:	78fa      	ldrb	r2, [r7, #3]
 8005880:	6879      	ldr	r1, [r7, #4]
 8005882:	4613      	mov	r3, r2
 8005884:	011b      	lsls	r3, r3, #4
 8005886:	1a9b      	subs	r3, r3, r2
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	440b      	add	r3, r1
 800588c:	334c      	adds	r3, #76	@ 0x4c
 800588e:	2202      	movs	r2, #2
 8005890:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005892:	78fa      	ldrb	r2, [r7, #3]
 8005894:	6879      	ldr	r1, [r7, #4]
 8005896:	4613      	mov	r3, r2
 8005898:	011b      	lsls	r3, r3, #4
 800589a:	1a9b      	subs	r3, r3, r2
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	440b      	add	r3, r1
 80058a0:	331b      	adds	r3, #27
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	f040 80d1 	bne.w	8005a4c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80058aa:	78fa      	ldrb	r2, [r7, #3]
 80058ac:	6879      	ldr	r1, [r7, #4]
 80058ae:	4613      	mov	r3, r2
 80058b0:	011b      	lsls	r3, r3, #4
 80058b2:	1a9b      	subs	r3, r3, r2
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	440b      	add	r3, r1
 80058b8:	331b      	adds	r3, #27
 80058ba:	2200      	movs	r2, #0
 80058bc:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80058be:	78fb      	ldrb	r3, [r7, #3]
 80058c0:	015a      	lsls	r2, r3, #5
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	4413      	add	r3, r2
 80058c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	78fa      	ldrb	r2, [r7, #3]
 80058ce:	0151      	lsls	r1, r2, #5
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	440a      	add	r2, r1
 80058d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80058d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058dc:	6053      	str	r3, [r2, #4]
 80058de:	e0b5      	b.n	8005a4c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80058e0:	78fa      	ldrb	r2, [r7, #3]
 80058e2:	6879      	ldr	r1, [r7, #4]
 80058e4:	4613      	mov	r3, r2
 80058e6:	011b      	lsls	r3, r3, #4
 80058e8:	1a9b      	subs	r3, r3, r2
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	440b      	add	r3, r1
 80058ee:	334d      	adds	r3, #77	@ 0x4d
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	2b05      	cmp	r3, #5
 80058f4:	d114      	bne.n	8005920 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80058f6:	78fa      	ldrb	r2, [r7, #3]
 80058f8:	6879      	ldr	r1, [r7, #4]
 80058fa:	4613      	mov	r3, r2
 80058fc:	011b      	lsls	r3, r3, #4
 80058fe:	1a9b      	subs	r3, r3, r2
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	440b      	add	r3, r1
 8005904:	334d      	adds	r3, #77	@ 0x4d
 8005906:	2202      	movs	r2, #2
 8005908:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800590a:	78fa      	ldrb	r2, [r7, #3]
 800590c:	6879      	ldr	r1, [r7, #4]
 800590e:	4613      	mov	r3, r2
 8005910:	011b      	lsls	r3, r3, #4
 8005912:	1a9b      	subs	r3, r3, r2
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	440b      	add	r3, r1
 8005918:	334c      	adds	r3, #76	@ 0x4c
 800591a:	2202      	movs	r2, #2
 800591c:	701a      	strb	r2, [r3, #0]
 800591e:	e095      	b.n	8005a4c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8005920:	78fa      	ldrb	r2, [r7, #3]
 8005922:	6879      	ldr	r1, [r7, #4]
 8005924:	4613      	mov	r3, r2
 8005926:	011b      	lsls	r3, r3, #4
 8005928:	1a9b      	subs	r3, r3, r2
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	440b      	add	r3, r1
 800592e:	334d      	adds	r3, #77	@ 0x4d
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	2b06      	cmp	r3, #6
 8005934:	d114      	bne.n	8005960 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005936:	78fa      	ldrb	r2, [r7, #3]
 8005938:	6879      	ldr	r1, [r7, #4]
 800593a:	4613      	mov	r3, r2
 800593c:	011b      	lsls	r3, r3, #4
 800593e:	1a9b      	subs	r3, r3, r2
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	440b      	add	r3, r1
 8005944:	334d      	adds	r3, #77	@ 0x4d
 8005946:	2202      	movs	r2, #2
 8005948:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800594a:	78fa      	ldrb	r2, [r7, #3]
 800594c:	6879      	ldr	r1, [r7, #4]
 800594e:	4613      	mov	r3, r2
 8005950:	011b      	lsls	r3, r3, #4
 8005952:	1a9b      	subs	r3, r3, r2
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	440b      	add	r3, r1
 8005958:	334c      	adds	r3, #76	@ 0x4c
 800595a:	2205      	movs	r2, #5
 800595c:	701a      	strb	r2, [r3, #0]
 800595e:	e075      	b.n	8005a4c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005960:	78fa      	ldrb	r2, [r7, #3]
 8005962:	6879      	ldr	r1, [r7, #4]
 8005964:	4613      	mov	r3, r2
 8005966:	011b      	lsls	r3, r3, #4
 8005968:	1a9b      	subs	r3, r3, r2
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	440b      	add	r3, r1
 800596e:	334d      	adds	r3, #77	@ 0x4d
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	2b07      	cmp	r3, #7
 8005974:	d00a      	beq.n	800598c <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8005976:	78fa      	ldrb	r2, [r7, #3]
 8005978:	6879      	ldr	r1, [r7, #4]
 800597a:	4613      	mov	r3, r2
 800597c:	011b      	lsls	r3, r3, #4
 800597e:	1a9b      	subs	r3, r3, r2
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	440b      	add	r3, r1
 8005984:	334d      	adds	r3, #77	@ 0x4d
 8005986:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005988:	2b09      	cmp	r3, #9
 800598a:	d170      	bne.n	8005a6e <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800598c:	78fa      	ldrb	r2, [r7, #3]
 800598e:	6879      	ldr	r1, [r7, #4]
 8005990:	4613      	mov	r3, r2
 8005992:	011b      	lsls	r3, r3, #4
 8005994:	1a9b      	subs	r3, r3, r2
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	440b      	add	r3, r1
 800599a:	334d      	adds	r3, #77	@ 0x4d
 800599c:	2202      	movs	r2, #2
 800599e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80059a0:	78fa      	ldrb	r2, [r7, #3]
 80059a2:	6879      	ldr	r1, [r7, #4]
 80059a4:	4613      	mov	r3, r2
 80059a6:	011b      	lsls	r3, r3, #4
 80059a8:	1a9b      	subs	r3, r3, r2
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	440b      	add	r3, r1
 80059ae:	3344      	adds	r3, #68	@ 0x44
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	1c59      	adds	r1, r3, #1
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	4613      	mov	r3, r2
 80059b8:	011b      	lsls	r3, r3, #4
 80059ba:	1a9b      	subs	r3, r3, r2
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	4403      	add	r3, r0
 80059c0:	3344      	adds	r3, #68	@ 0x44
 80059c2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80059c4:	78fa      	ldrb	r2, [r7, #3]
 80059c6:	6879      	ldr	r1, [r7, #4]
 80059c8:	4613      	mov	r3, r2
 80059ca:	011b      	lsls	r3, r3, #4
 80059cc:	1a9b      	subs	r3, r3, r2
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	440b      	add	r3, r1
 80059d2:	3344      	adds	r3, #68	@ 0x44
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d914      	bls.n	8005a04 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80059da:	78fa      	ldrb	r2, [r7, #3]
 80059dc:	6879      	ldr	r1, [r7, #4]
 80059de:	4613      	mov	r3, r2
 80059e0:	011b      	lsls	r3, r3, #4
 80059e2:	1a9b      	subs	r3, r3, r2
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	440b      	add	r3, r1
 80059e8:	3344      	adds	r3, #68	@ 0x44
 80059ea:	2200      	movs	r2, #0
 80059ec:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80059ee:	78fa      	ldrb	r2, [r7, #3]
 80059f0:	6879      	ldr	r1, [r7, #4]
 80059f2:	4613      	mov	r3, r2
 80059f4:	011b      	lsls	r3, r3, #4
 80059f6:	1a9b      	subs	r3, r3, r2
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	440b      	add	r3, r1
 80059fc:	334c      	adds	r3, #76	@ 0x4c
 80059fe:	2204      	movs	r2, #4
 8005a00:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005a02:	e022      	b.n	8005a4a <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005a04:	78fa      	ldrb	r2, [r7, #3]
 8005a06:	6879      	ldr	r1, [r7, #4]
 8005a08:	4613      	mov	r3, r2
 8005a0a:	011b      	lsls	r3, r3, #4
 8005a0c:	1a9b      	subs	r3, r3, r2
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	440b      	add	r3, r1
 8005a12:	334c      	adds	r3, #76	@ 0x4c
 8005a14:	2202      	movs	r2, #2
 8005a16:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005a18:	78fb      	ldrb	r3, [r7, #3]
 8005a1a:	015a      	lsls	r2, r3, #5
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	4413      	add	r3, r2
 8005a20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005a2e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005a36:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005a38:	78fb      	ldrb	r3, [r7, #3]
 8005a3a:	015a      	lsls	r2, r3, #5
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	4413      	add	r3, r2
 8005a40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a44:	461a      	mov	r2, r3
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005a4a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005a4c:	78fa      	ldrb	r2, [r7, #3]
 8005a4e:	6879      	ldr	r1, [r7, #4]
 8005a50:	4613      	mov	r3, r2
 8005a52:	011b      	lsls	r3, r3, #4
 8005a54:	1a9b      	subs	r3, r3, r2
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	440b      	add	r3, r1
 8005a5a:	334c      	adds	r3, #76	@ 0x4c
 8005a5c:	781a      	ldrb	r2, [r3, #0]
 8005a5e:	78fb      	ldrb	r3, [r7, #3]
 8005a60:	4619      	mov	r1, r3
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f006 f9a6 	bl	800bdb4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005a68:	e002      	b.n	8005a70 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8005a6a:	bf00      	nop
 8005a6c:	e000      	b.n	8005a70 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8005a6e:	bf00      	nop
  }
}
 8005a70:	3718      	adds	r7, #24
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005a76:	b580      	push	{r7, lr}
 8005a78:	b08a      	sub	sp, #40	@ 0x28
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a86:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	6a1b      	ldr	r3, [r3, #32]
 8005a8e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	f003 030f 	and.w	r3, r3, #15
 8005a96:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	0c5b      	lsrs	r3, r3, #17
 8005a9c:	f003 030f 	and.w	r3, r3, #15
 8005aa0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	091b      	lsrs	r3, r3, #4
 8005aa6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005aaa:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	d004      	beq.n	8005abc <HCD_RXQLVL_IRQHandler+0x46>
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	2b05      	cmp	r3, #5
 8005ab6:	f000 80b6 	beq.w	8005c26 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005aba:	e0b7      	b.n	8005c2c <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	f000 80b3 	beq.w	8005c2a <HCD_RXQLVL_IRQHandler+0x1b4>
 8005ac4:	6879      	ldr	r1, [r7, #4]
 8005ac6:	69ba      	ldr	r2, [r7, #24]
 8005ac8:	4613      	mov	r3, r2
 8005aca:	011b      	lsls	r3, r3, #4
 8005acc:	1a9b      	subs	r3, r3, r2
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	440b      	add	r3, r1
 8005ad2:	332c      	adds	r3, #44	@ 0x2c
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	f000 80a7 	beq.w	8005c2a <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8005adc:	6879      	ldr	r1, [r7, #4]
 8005ade:	69ba      	ldr	r2, [r7, #24]
 8005ae0:	4613      	mov	r3, r2
 8005ae2:	011b      	lsls	r3, r3, #4
 8005ae4:	1a9b      	subs	r3, r3, r2
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	440b      	add	r3, r1
 8005aea:	3338      	adds	r3, #56	@ 0x38
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	18d1      	adds	r1, r2, r3
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	69ba      	ldr	r2, [r7, #24]
 8005af6:	4613      	mov	r3, r2
 8005af8:	011b      	lsls	r3, r3, #4
 8005afa:	1a9b      	subs	r3, r3, r2
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	4403      	add	r3, r0
 8005b00:	3334      	adds	r3, #52	@ 0x34
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4299      	cmp	r1, r3
 8005b06:	f200 8083 	bhi.w	8005c10 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6818      	ldr	r0, [r3, #0]
 8005b0e:	6879      	ldr	r1, [r7, #4]
 8005b10:	69ba      	ldr	r2, [r7, #24]
 8005b12:	4613      	mov	r3, r2
 8005b14:	011b      	lsls	r3, r3, #4
 8005b16:	1a9b      	subs	r3, r3, r2
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	440b      	add	r3, r1
 8005b1c:	332c      	adds	r3, #44	@ 0x2c
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	693a      	ldr	r2, [r7, #16]
 8005b22:	b292      	uxth	r2, r2
 8005b24:	4619      	mov	r1, r3
 8005b26:	f002 ffd1 	bl	8008acc <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8005b2a:	6879      	ldr	r1, [r7, #4]
 8005b2c:	69ba      	ldr	r2, [r7, #24]
 8005b2e:	4613      	mov	r3, r2
 8005b30:	011b      	lsls	r3, r3, #4
 8005b32:	1a9b      	subs	r3, r3, r2
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	440b      	add	r3, r1
 8005b38:	332c      	adds	r3, #44	@ 0x2c
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	18d1      	adds	r1, r2, r3
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	69ba      	ldr	r2, [r7, #24]
 8005b44:	4613      	mov	r3, r2
 8005b46:	011b      	lsls	r3, r3, #4
 8005b48:	1a9b      	subs	r3, r3, r2
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	4403      	add	r3, r0
 8005b4e:	332c      	adds	r3, #44	@ 0x2c
 8005b50:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8005b52:	6879      	ldr	r1, [r7, #4]
 8005b54:	69ba      	ldr	r2, [r7, #24]
 8005b56:	4613      	mov	r3, r2
 8005b58:	011b      	lsls	r3, r3, #4
 8005b5a:	1a9b      	subs	r3, r3, r2
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	440b      	add	r3, r1
 8005b60:	3338      	adds	r3, #56	@ 0x38
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	18d1      	adds	r1, r2, r3
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	69ba      	ldr	r2, [r7, #24]
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	011b      	lsls	r3, r3, #4
 8005b70:	1a9b      	subs	r3, r3, r2
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	4403      	add	r3, r0
 8005b76:	3338      	adds	r3, #56	@ 0x38
 8005b78:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005b7a:	69bb      	ldr	r3, [r7, #24]
 8005b7c:	015a      	lsls	r2, r3, #5
 8005b7e:	6a3b      	ldr	r3, [r7, #32]
 8005b80:	4413      	add	r3, r2
 8005b82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	0cdb      	lsrs	r3, r3, #19
 8005b8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b8e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005b90:	6879      	ldr	r1, [r7, #4]
 8005b92:	69ba      	ldr	r2, [r7, #24]
 8005b94:	4613      	mov	r3, r2
 8005b96:	011b      	lsls	r3, r3, #4
 8005b98:	1a9b      	subs	r3, r3, r2
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	440b      	add	r3, r1
 8005b9e:	3328      	adds	r3, #40	@ 0x28
 8005ba0:	881b      	ldrh	r3, [r3, #0]
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d13f      	bne.n	8005c2a <HCD_RXQLVL_IRQHandler+0x1b4>
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d03c      	beq.n	8005c2a <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	015a      	lsls	r2, r3, #5
 8005bb4:	6a3b      	ldr	r3, [r7, #32]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005bc6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005bce:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	015a      	lsls	r2, r3, #5
 8005bd4:	6a3b      	ldr	r3, [r7, #32]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bdc:	461a      	mov	r2, r3
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8005be2:	6879      	ldr	r1, [r7, #4]
 8005be4:	69ba      	ldr	r2, [r7, #24]
 8005be6:	4613      	mov	r3, r2
 8005be8:	011b      	lsls	r3, r3, #4
 8005bea:	1a9b      	subs	r3, r3, r2
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	440b      	add	r3, r1
 8005bf0:	333c      	adds	r3, #60	@ 0x3c
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	f083 0301 	eor.w	r3, r3, #1
 8005bf8:	b2d8      	uxtb	r0, r3
 8005bfa:	6879      	ldr	r1, [r7, #4]
 8005bfc:	69ba      	ldr	r2, [r7, #24]
 8005bfe:	4613      	mov	r3, r2
 8005c00:	011b      	lsls	r3, r3, #4
 8005c02:	1a9b      	subs	r3, r3, r2
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	440b      	add	r3, r1
 8005c08:	333c      	adds	r3, #60	@ 0x3c
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	701a      	strb	r2, [r3, #0]
      break;
 8005c0e:	e00c      	b.n	8005c2a <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8005c10:	6879      	ldr	r1, [r7, #4]
 8005c12:	69ba      	ldr	r2, [r7, #24]
 8005c14:	4613      	mov	r3, r2
 8005c16:	011b      	lsls	r3, r3, #4
 8005c18:	1a9b      	subs	r3, r3, r2
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	440b      	add	r3, r1
 8005c1e:	334c      	adds	r3, #76	@ 0x4c
 8005c20:	2204      	movs	r2, #4
 8005c22:	701a      	strb	r2, [r3, #0]
      break;
 8005c24:	e001      	b.n	8005c2a <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8005c26:	bf00      	nop
 8005c28:	e000      	b.n	8005c2c <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8005c2a:	bf00      	nop
  }
}
 8005c2c:	bf00      	nop
 8005c2e:	3728      	adds	r7, #40	@ 0x28
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}

08005c34 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b086      	sub	sp, #24
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005c60:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f003 0302 	and.w	r3, r3, #2
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	d10b      	bne.n	8005c84 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f003 0301 	and.w	r3, r3, #1
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d102      	bne.n	8005c7c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f006 f880 	bl	800bd7c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	f043 0302 	orr.w	r3, r3, #2
 8005c82:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f003 0308 	and.w	r3, r3, #8
 8005c8a:	2b08      	cmp	r3, #8
 8005c8c:	d132      	bne.n	8005cf4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	f043 0308 	orr.w	r3, r3, #8
 8005c94:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f003 0304 	and.w	r3, r3, #4
 8005c9c:	2b04      	cmp	r3, #4
 8005c9e:	d126      	bne.n	8005cee <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	7a5b      	ldrb	r3, [r3, #9]
 8005ca4:	2b02      	cmp	r3, #2
 8005ca6:	d113      	bne.n	8005cd0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8005cae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005cb2:	d106      	bne.n	8005cc2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2102      	movs	r1, #2
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f003 f89c 	bl	8008df8 <USB_InitFSLSPClkSel>
 8005cc0:	e011      	b.n	8005ce6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2101      	movs	r1, #1
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f003 f895 	bl	8008df8 <USB_InitFSLSPClkSel>
 8005cce:	e00a      	b.n	8005ce6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	79db      	ldrb	r3, [r3, #7]
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d106      	bne.n	8005ce6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005cde:	461a      	mov	r2, r3
 8005ce0:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8005ce4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f006 f872 	bl	800bdd0 <HAL_HCD_PortEnabled_Callback>
 8005cec:	e002      	b.n	8005cf4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f006 f87c 	bl	800bdec <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f003 0320 	and.w	r3, r3, #32
 8005cfa:	2b20      	cmp	r3, #32
 8005cfc:	d103      	bne.n	8005d06 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	f043 0320 	orr.w	r3, r3, #32
 8005d04:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	6013      	str	r3, [r2, #0]
}
 8005d12:	bf00      	nop
 8005d14:	3718      	adds	r7, #24
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
	...

08005d1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d101      	bne.n	8005d2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e12b      	b.n	8005f86 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d106      	bne.n	8005d48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f7fc f882 	bl	8001e4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2224      	movs	r2, #36	@ 0x24
 8005d4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f022 0201 	bic.w	r2, r2, #1
 8005d5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005d6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005d7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005d80:	f000 fd80 	bl	8006884 <HAL_RCC_GetPCLK1Freq>
 8005d84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	4a81      	ldr	r2, [pc, #516]	@ (8005f90 <HAL_I2C_Init+0x274>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d807      	bhi.n	8005da0 <HAL_I2C_Init+0x84>
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	4a80      	ldr	r2, [pc, #512]	@ (8005f94 <HAL_I2C_Init+0x278>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	bf94      	ite	ls
 8005d98:	2301      	movls	r3, #1
 8005d9a:	2300      	movhi	r3, #0
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	e006      	b.n	8005dae <HAL_I2C_Init+0x92>
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	4a7d      	ldr	r2, [pc, #500]	@ (8005f98 <HAL_I2C_Init+0x27c>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	bf94      	ite	ls
 8005da8:	2301      	movls	r3, #1
 8005daa:	2300      	movhi	r3, #0
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d001      	beq.n	8005db6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	e0e7      	b.n	8005f86 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	4a78      	ldr	r2, [pc, #480]	@ (8005f9c <HAL_I2C_Init+0x280>)
 8005dba:	fba2 2303 	umull	r2, r3, r2, r3
 8005dbe:	0c9b      	lsrs	r3, r3, #18
 8005dc0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68ba      	ldr	r2, [r7, #8]
 8005dd2:	430a      	orrs	r2, r1
 8005dd4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	6a1b      	ldr	r3, [r3, #32]
 8005ddc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	4a6a      	ldr	r2, [pc, #424]	@ (8005f90 <HAL_I2C_Init+0x274>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d802      	bhi.n	8005df0 <HAL_I2C_Init+0xd4>
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	3301      	adds	r3, #1
 8005dee:	e009      	b.n	8005e04 <HAL_I2C_Init+0xe8>
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005df6:	fb02 f303 	mul.w	r3, r2, r3
 8005dfa:	4a69      	ldr	r2, [pc, #420]	@ (8005fa0 <HAL_I2C_Init+0x284>)
 8005dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8005e00:	099b      	lsrs	r3, r3, #6
 8005e02:	3301      	adds	r3, #1
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	6812      	ldr	r2, [r2, #0]
 8005e08:	430b      	orrs	r3, r1
 8005e0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	69db      	ldr	r3, [r3, #28]
 8005e12:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005e16:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	495c      	ldr	r1, [pc, #368]	@ (8005f90 <HAL_I2C_Init+0x274>)
 8005e20:	428b      	cmp	r3, r1
 8005e22:	d819      	bhi.n	8005e58 <HAL_I2C_Init+0x13c>
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	1e59      	subs	r1, r3, #1
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	005b      	lsls	r3, r3, #1
 8005e2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e32:	1c59      	adds	r1, r3, #1
 8005e34:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005e38:	400b      	ands	r3, r1
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00a      	beq.n	8005e54 <HAL_I2C_Init+0x138>
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	1e59      	subs	r1, r3, #1
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	005b      	lsls	r3, r3, #1
 8005e48:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e52:	e051      	b.n	8005ef8 <HAL_I2C_Init+0x1dc>
 8005e54:	2304      	movs	r3, #4
 8005e56:	e04f      	b.n	8005ef8 <HAL_I2C_Init+0x1dc>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d111      	bne.n	8005e84 <HAL_I2C_Init+0x168>
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	1e58      	subs	r0, r3, #1
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6859      	ldr	r1, [r3, #4]
 8005e68:	460b      	mov	r3, r1
 8005e6a:	005b      	lsls	r3, r3, #1
 8005e6c:	440b      	add	r3, r1
 8005e6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e72:	3301      	adds	r3, #1
 8005e74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	bf0c      	ite	eq
 8005e7c:	2301      	moveq	r3, #1
 8005e7e:	2300      	movne	r3, #0
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	e012      	b.n	8005eaa <HAL_I2C_Init+0x18e>
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	1e58      	subs	r0, r3, #1
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6859      	ldr	r1, [r3, #4]
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	440b      	add	r3, r1
 8005e92:	0099      	lsls	r1, r3, #2
 8005e94:	440b      	add	r3, r1
 8005e96:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e9a:	3301      	adds	r3, #1
 8005e9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	bf0c      	ite	eq
 8005ea4:	2301      	moveq	r3, #1
 8005ea6:	2300      	movne	r3, #0
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d001      	beq.n	8005eb2 <HAL_I2C_Init+0x196>
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e022      	b.n	8005ef8 <HAL_I2C_Init+0x1dc>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d10e      	bne.n	8005ed8 <HAL_I2C_Init+0x1bc>
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	1e58      	subs	r0, r3, #1
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6859      	ldr	r1, [r3, #4]
 8005ec2:	460b      	mov	r3, r1
 8005ec4:	005b      	lsls	r3, r3, #1
 8005ec6:	440b      	add	r3, r1
 8005ec8:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ecc:	3301      	adds	r3, #1
 8005ece:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ed2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ed6:	e00f      	b.n	8005ef8 <HAL_I2C_Init+0x1dc>
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	1e58      	subs	r0, r3, #1
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6859      	ldr	r1, [r3, #4]
 8005ee0:	460b      	mov	r3, r1
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	440b      	add	r3, r1
 8005ee6:	0099      	lsls	r1, r3, #2
 8005ee8:	440b      	add	r3, r1
 8005eea:	fbb0 f3f3 	udiv	r3, r0, r3
 8005eee:	3301      	adds	r3, #1
 8005ef0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ef4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005ef8:	6879      	ldr	r1, [r7, #4]
 8005efa:	6809      	ldr	r1, [r1, #0]
 8005efc:	4313      	orrs	r3, r2
 8005efe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	69da      	ldr	r2, [r3, #28]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a1b      	ldr	r3, [r3, #32]
 8005f12:	431a      	orrs	r2, r3
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	430a      	orrs	r2, r1
 8005f1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005f26:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	6911      	ldr	r1, [r2, #16]
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	68d2      	ldr	r2, [r2, #12]
 8005f32:	4311      	orrs	r1, r2
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	6812      	ldr	r2, [r2, #0]
 8005f38:	430b      	orrs	r3, r1
 8005f3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	695a      	ldr	r2, [r3, #20]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	699b      	ldr	r3, [r3, #24]
 8005f4e:	431a      	orrs	r2, r3
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	430a      	orrs	r2, r1
 8005f56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f042 0201 	orr.w	r2, r2, #1
 8005f66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2220      	movs	r2, #32
 8005f72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3710      	adds	r7, #16
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	000186a0 	.word	0x000186a0
 8005f94:	001e847f 	.word	0x001e847f
 8005f98:	003d08ff 	.word	0x003d08ff
 8005f9c:	431bde83 	.word	0x431bde83
 8005fa0:	10624dd3 	.word	0x10624dd3

08005fa4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b086      	sub	sp, #24
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d101      	bne.n	8005fb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e267      	b.n	8006486 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 0301 	and.w	r3, r3, #1
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d075      	beq.n	80060ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005fc2:	4b88      	ldr	r3, [pc, #544]	@ (80061e4 <HAL_RCC_OscConfig+0x240>)
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	f003 030c 	and.w	r3, r3, #12
 8005fca:	2b04      	cmp	r3, #4
 8005fcc:	d00c      	beq.n	8005fe8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005fce:	4b85      	ldr	r3, [pc, #532]	@ (80061e4 <HAL_RCC_OscConfig+0x240>)
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005fd6:	2b08      	cmp	r3, #8
 8005fd8:	d112      	bne.n	8006000 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005fda:	4b82      	ldr	r3, [pc, #520]	@ (80061e4 <HAL_RCC_OscConfig+0x240>)
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005fe2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005fe6:	d10b      	bne.n	8006000 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fe8:	4b7e      	ldr	r3, [pc, #504]	@ (80061e4 <HAL_RCC_OscConfig+0x240>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d05b      	beq.n	80060ac <HAL_RCC_OscConfig+0x108>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d157      	bne.n	80060ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e242      	b.n	8006486 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006008:	d106      	bne.n	8006018 <HAL_RCC_OscConfig+0x74>
 800600a:	4b76      	ldr	r3, [pc, #472]	@ (80061e4 <HAL_RCC_OscConfig+0x240>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a75      	ldr	r2, [pc, #468]	@ (80061e4 <HAL_RCC_OscConfig+0x240>)
 8006010:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006014:	6013      	str	r3, [r2, #0]
 8006016:	e01d      	b.n	8006054 <HAL_RCC_OscConfig+0xb0>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006020:	d10c      	bne.n	800603c <HAL_RCC_OscConfig+0x98>
 8006022:	4b70      	ldr	r3, [pc, #448]	@ (80061e4 <HAL_RCC_OscConfig+0x240>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a6f      	ldr	r2, [pc, #444]	@ (80061e4 <HAL_RCC_OscConfig+0x240>)
 8006028:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800602c:	6013      	str	r3, [r2, #0]
 800602e:	4b6d      	ldr	r3, [pc, #436]	@ (80061e4 <HAL_RCC_OscConfig+0x240>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a6c      	ldr	r2, [pc, #432]	@ (80061e4 <HAL_RCC_OscConfig+0x240>)
 8006034:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006038:	6013      	str	r3, [r2, #0]
 800603a:	e00b      	b.n	8006054 <HAL_RCC_OscConfig+0xb0>
 800603c:	4b69      	ldr	r3, [pc, #420]	@ (80061e4 <HAL_RCC_OscConfig+0x240>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a68      	ldr	r2, [pc, #416]	@ (80061e4 <HAL_RCC_OscConfig+0x240>)
 8006042:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006046:	6013      	str	r3, [r2, #0]
 8006048:	4b66      	ldr	r3, [pc, #408]	@ (80061e4 <HAL_RCC_OscConfig+0x240>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a65      	ldr	r2, [pc, #404]	@ (80061e4 <HAL_RCC_OscConfig+0x240>)
 800604e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006052:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d013      	beq.n	8006084 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800605c:	f7fc f9cc 	bl	80023f8 <HAL_GetTick>
 8006060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006062:	e008      	b.n	8006076 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006064:	f7fc f9c8 	bl	80023f8 <HAL_GetTick>
 8006068:	4602      	mov	r2, r0
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	2b64      	cmp	r3, #100	@ 0x64
 8006070:	d901      	bls.n	8006076 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006072:	2303      	movs	r3, #3
 8006074:	e207      	b.n	8006486 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006076:	4b5b      	ldr	r3, [pc, #364]	@ (80061e4 <HAL_RCC_OscConfig+0x240>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800607e:	2b00      	cmp	r3, #0
 8006080:	d0f0      	beq.n	8006064 <HAL_RCC_OscConfig+0xc0>
 8006082:	e014      	b.n	80060ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006084:	f7fc f9b8 	bl	80023f8 <HAL_GetTick>
 8006088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800608a:	e008      	b.n	800609e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800608c:	f7fc f9b4 	bl	80023f8 <HAL_GetTick>
 8006090:	4602      	mov	r2, r0
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	1ad3      	subs	r3, r2, r3
 8006096:	2b64      	cmp	r3, #100	@ 0x64
 8006098:	d901      	bls.n	800609e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800609a:	2303      	movs	r3, #3
 800609c:	e1f3      	b.n	8006486 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800609e:	4b51      	ldr	r3, [pc, #324]	@ (80061e4 <HAL_RCC_OscConfig+0x240>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d1f0      	bne.n	800608c <HAL_RCC_OscConfig+0xe8>
 80060aa:	e000      	b.n	80060ae <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f003 0302 	and.w	r3, r3, #2
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d063      	beq.n	8006182 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80060ba:	4b4a      	ldr	r3, [pc, #296]	@ (80061e4 <HAL_RCC_OscConfig+0x240>)
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	f003 030c 	and.w	r3, r3, #12
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d00b      	beq.n	80060de <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80060c6:	4b47      	ldr	r3, [pc, #284]	@ (80061e4 <HAL_RCC_OscConfig+0x240>)
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80060ce:	2b08      	cmp	r3, #8
 80060d0:	d11c      	bne.n	800610c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80060d2:	4b44      	ldr	r3, [pc, #272]	@ (80061e4 <HAL_RCC_OscConfig+0x240>)
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d116      	bne.n	800610c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060de:	4b41      	ldr	r3, [pc, #260]	@ (80061e4 <HAL_RCC_OscConfig+0x240>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 0302 	and.w	r3, r3, #2
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d005      	beq.n	80060f6 <HAL_RCC_OscConfig+0x152>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	68db      	ldr	r3, [r3, #12]
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d001      	beq.n	80060f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	e1c7      	b.n	8006486 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060f6:	4b3b      	ldr	r3, [pc, #236]	@ (80061e4 <HAL_RCC_OscConfig+0x240>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	00db      	lsls	r3, r3, #3
 8006104:	4937      	ldr	r1, [pc, #220]	@ (80061e4 <HAL_RCC_OscConfig+0x240>)
 8006106:	4313      	orrs	r3, r2
 8006108:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800610a:	e03a      	b.n	8006182 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d020      	beq.n	8006156 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006114:	4b34      	ldr	r3, [pc, #208]	@ (80061e8 <HAL_RCC_OscConfig+0x244>)
 8006116:	2201      	movs	r2, #1
 8006118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800611a:	f7fc f96d 	bl	80023f8 <HAL_GetTick>
 800611e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006120:	e008      	b.n	8006134 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006122:	f7fc f969 	bl	80023f8 <HAL_GetTick>
 8006126:	4602      	mov	r2, r0
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	1ad3      	subs	r3, r2, r3
 800612c:	2b02      	cmp	r3, #2
 800612e:	d901      	bls.n	8006134 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006130:	2303      	movs	r3, #3
 8006132:	e1a8      	b.n	8006486 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006134:	4b2b      	ldr	r3, [pc, #172]	@ (80061e4 <HAL_RCC_OscConfig+0x240>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f003 0302 	and.w	r3, r3, #2
 800613c:	2b00      	cmp	r3, #0
 800613e:	d0f0      	beq.n	8006122 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006140:	4b28      	ldr	r3, [pc, #160]	@ (80061e4 <HAL_RCC_OscConfig+0x240>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	691b      	ldr	r3, [r3, #16]
 800614c:	00db      	lsls	r3, r3, #3
 800614e:	4925      	ldr	r1, [pc, #148]	@ (80061e4 <HAL_RCC_OscConfig+0x240>)
 8006150:	4313      	orrs	r3, r2
 8006152:	600b      	str	r3, [r1, #0]
 8006154:	e015      	b.n	8006182 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006156:	4b24      	ldr	r3, [pc, #144]	@ (80061e8 <HAL_RCC_OscConfig+0x244>)
 8006158:	2200      	movs	r2, #0
 800615a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800615c:	f7fc f94c 	bl	80023f8 <HAL_GetTick>
 8006160:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006162:	e008      	b.n	8006176 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006164:	f7fc f948 	bl	80023f8 <HAL_GetTick>
 8006168:	4602      	mov	r2, r0
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	1ad3      	subs	r3, r2, r3
 800616e:	2b02      	cmp	r3, #2
 8006170:	d901      	bls.n	8006176 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006172:	2303      	movs	r3, #3
 8006174:	e187      	b.n	8006486 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006176:	4b1b      	ldr	r3, [pc, #108]	@ (80061e4 <HAL_RCC_OscConfig+0x240>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 0302 	and.w	r3, r3, #2
 800617e:	2b00      	cmp	r3, #0
 8006180:	d1f0      	bne.n	8006164 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f003 0308 	and.w	r3, r3, #8
 800618a:	2b00      	cmp	r3, #0
 800618c:	d036      	beq.n	80061fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	695b      	ldr	r3, [r3, #20]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d016      	beq.n	80061c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006196:	4b15      	ldr	r3, [pc, #84]	@ (80061ec <HAL_RCC_OscConfig+0x248>)
 8006198:	2201      	movs	r2, #1
 800619a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800619c:	f7fc f92c 	bl	80023f8 <HAL_GetTick>
 80061a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061a2:	e008      	b.n	80061b6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061a4:	f7fc f928 	bl	80023f8 <HAL_GetTick>
 80061a8:	4602      	mov	r2, r0
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	1ad3      	subs	r3, r2, r3
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	d901      	bls.n	80061b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80061b2:	2303      	movs	r3, #3
 80061b4:	e167      	b.n	8006486 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061b6:	4b0b      	ldr	r3, [pc, #44]	@ (80061e4 <HAL_RCC_OscConfig+0x240>)
 80061b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061ba:	f003 0302 	and.w	r3, r3, #2
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d0f0      	beq.n	80061a4 <HAL_RCC_OscConfig+0x200>
 80061c2:	e01b      	b.n	80061fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061c4:	4b09      	ldr	r3, [pc, #36]	@ (80061ec <HAL_RCC_OscConfig+0x248>)
 80061c6:	2200      	movs	r2, #0
 80061c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061ca:	f7fc f915 	bl	80023f8 <HAL_GetTick>
 80061ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061d0:	e00e      	b.n	80061f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061d2:	f7fc f911 	bl	80023f8 <HAL_GetTick>
 80061d6:	4602      	mov	r2, r0
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	1ad3      	subs	r3, r2, r3
 80061dc:	2b02      	cmp	r3, #2
 80061de:	d907      	bls.n	80061f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80061e0:	2303      	movs	r3, #3
 80061e2:	e150      	b.n	8006486 <HAL_RCC_OscConfig+0x4e2>
 80061e4:	40023800 	.word	0x40023800
 80061e8:	42470000 	.word	0x42470000
 80061ec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061f0:	4b88      	ldr	r3, [pc, #544]	@ (8006414 <HAL_RCC_OscConfig+0x470>)
 80061f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061f4:	f003 0302 	and.w	r3, r3, #2
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d1ea      	bne.n	80061d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f003 0304 	and.w	r3, r3, #4
 8006204:	2b00      	cmp	r3, #0
 8006206:	f000 8097 	beq.w	8006338 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800620a:	2300      	movs	r3, #0
 800620c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800620e:	4b81      	ldr	r3, [pc, #516]	@ (8006414 <HAL_RCC_OscConfig+0x470>)
 8006210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006212:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006216:	2b00      	cmp	r3, #0
 8006218:	d10f      	bne.n	800623a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800621a:	2300      	movs	r3, #0
 800621c:	60bb      	str	r3, [r7, #8]
 800621e:	4b7d      	ldr	r3, [pc, #500]	@ (8006414 <HAL_RCC_OscConfig+0x470>)
 8006220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006222:	4a7c      	ldr	r2, [pc, #496]	@ (8006414 <HAL_RCC_OscConfig+0x470>)
 8006224:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006228:	6413      	str	r3, [r2, #64]	@ 0x40
 800622a:	4b7a      	ldr	r3, [pc, #488]	@ (8006414 <HAL_RCC_OscConfig+0x470>)
 800622c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800622e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006232:	60bb      	str	r3, [r7, #8]
 8006234:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006236:	2301      	movs	r3, #1
 8006238:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800623a:	4b77      	ldr	r3, [pc, #476]	@ (8006418 <HAL_RCC_OscConfig+0x474>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006242:	2b00      	cmp	r3, #0
 8006244:	d118      	bne.n	8006278 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006246:	4b74      	ldr	r3, [pc, #464]	@ (8006418 <HAL_RCC_OscConfig+0x474>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a73      	ldr	r2, [pc, #460]	@ (8006418 <HAL_RCC_OscConfig+0x474>)
 800624c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006250:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006252:	f7fc f8d1 	bl	80023f8 <HAL_GetTick>
 8006256:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006258:	e008      	b.n	800626c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800625a:	f7fc f8cd 	bl	80023f8 <HAL_GetTick>
 800625e:	4602      	mov	r2, r0
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	1ad3      	subs	r3, r2, r3
 8006264:	2b02      	cmp	r3, #2
 8006266:	d901      	bls.n	800626c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006268:	2303      	movs	r3, #3
 800626a:	e10c      	b.n	8006486 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800626c:	4b6a      	ldr	r3, [pc, #424]	@ (8006418 <HAL_RCC_OscConfig+0x474>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006274:	2b00      	cmp	r3, #0
 8006276:	d0f0      	beq.n	800625a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	2b01      	cmp	r3, #1
 800627e:	d106      	bne.n	800628e <HAL_RCC_OscConfig+0x2ea>
 8006280:	4b64      	ldr	r3, [pc, #400]	@ (8006414 <HAL_RCC_OscConfig+0x470>)
 8006282:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006284:	4a63      	ldr	r2, [pc, #396]	@ (8006414 <HAL_RCC_OscConfig+0x470>)
 8006286:	f043 0301 	orr.w	r3, r3, #1
 800628a:	6713      	str	r3, [r2, #112]	@ 0x70
 800628c:	e01c      	b.n	80062c8 <HAL_RCC_OscConfig+0x324>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	2b05      	cmp	r3, #5
 8006294:	d10c      	bne.n	80062b0 <HAL_RCC_OscConfig+0x30c>
 8006296:	4b5f      	ldr	r3, [pc, #380]	@ (8006414 <HAL_RCC_OscConfig+0x470>)
 8006298:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800629a:	4a5e      	ldr	r2, [pc, #376]	@ (8006414 <HAL_RCC_OscConfig+0x470>)
 800629c:	f043 0304 	orr.w	r3, r3, #4
 80062a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80062a2:	4b5c      	ldr	r3, [pc, #368]	@ (8006414 <HAL_RCC_OscConfig+0x470>)
 80062a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062a6:	4a5b      	ldr	r2, [pc, #364]	@ (8006414 <HAL_RCC_OscConfig+0x470>)
 80062a8:	f043 0301 	orr.w	r3, r3, #1
 80062ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80062ae:	e00b      	b.n	80062c8 <HAL_RCC_OscConfig+0x324>
 80062b0:	4b58      	ldr	r3, [pc, #352]	@ (8006414 <HAL_RCC_OscConfig+0x470>)
 80062b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062b4:	4a57      	ldr	r2, [pc, #348]	@ (8006414 <HAL_RCC_OscConfig+0x470>)
 80062b6:	f023 0301 	bic.w	r3, r3, #1
 80062ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80062bc:	4b55      	ldr	r3, [pc, #340]	@ (8006414 <HAL_RCC_OscConfig+0x470>)
 80062be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062c0:	4a54      	ldr	r2, [pc, #336]	@ (8006414 <HAL_RCC_OscConfig+0x470>)
 80062c2:	f023 0304 	bic.w	r3, r3, #4
 80062c6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d015      	beq.n	80062fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062d0:	f7fc f892 	bl	80023f8 <HAL_GetTick>
 80062d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062d6:	e00a      	b.n	80062ee <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062d8:	f7fc f88e 	bl	80023f8 <HAL_GetTick>
 80062dc:	4602      	mov	r2, r0
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d901      	bls.n	80062ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80062ea:	2303      	movs	r3, #3
 80062ec:	e0cb      	b.n	8006486 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062ee:	4b49      	ldr	r3, [pc, #292]	@ (8006414 <HAL_RCC_OscConfig+0x470>)
 80062f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062f2:	f003 0302 	and.w	r3, r3, #2
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d0ee      	beq.n	80062d8 <HAL_RCC_OscConfig+0x334>
 80062fa:	e014      	b.n	8006326 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062fc:	f7fc f87c 	bl	80023f8 <HAL_GetTick>
 8006300:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006302:	e00a      	b.n	800631a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006304:	f7fc f878 	bl	80023f8 <HAL_GetTick>
 8006308:	4602      	mov	r2, r0
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	1ad3      	subs	r3, r2, r3
 800630e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006312:	4293      	cmp	r3, r2
 8006314:	d901      	bls.n	800631a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006316:	2303      	movs	r3, #3
 8006318:	e0b5      	b.n	8006486 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800631a:	4b3e      	ldr	r3, [pc, #248]	@ (8006414 <HAL_RCC_OscConfig+0x470>)
 800631c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800631e:	f003 0302 	and.w	r3, r3, #2
 8006322:	2b00      	cmp	r3, #0
 8006324:	d1ee      	bne.n	8006304 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006326:	7dfb      	ldrb	r3, [r7, #23]
 8006328:	2b01      	cmp	r3, #1
 800632a:	d105      	bne.n	8006338 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800632c:	4b39      	ldr	r3, [pc, #228]	@ (8006414 <HAL_RCC_OscConfig+0x470>)
 800632e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006330:	4a38      	ldr	r2, [pc, #224]	@ (8006414 <HAL_RCC_OscConfig+0x470>)
 8006332:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006336:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	699b      	ldr	r3, [r3, #24]
 800633c:	2b00      	cmp	r3, #0
 800633e:	f000 80a1 	beq.w	8006484 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006342:	4b34      	ldr	r3, [pc, #208]	@ (8006414 <HAL_RCC_OscConfig+0x470>)
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	f003 030c 	and.w	r3, r3, #12
 800634a:	2b08      	cmp	r3, #8
 800634c:	d05c      	beq.n	8006408 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	699b      	ldr	r3, [r3, #24]
 8006352:	2b02      	cmp	r3, #2
 8006354:	d141      	bne.n	80063da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006356:	4b31      	ldr	r3, [pc, #196]	@ (800641c <HAL_RCC_OscConfig+0x478>)
 8006358:	2200      	movs	r2, #0
 800635a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800635c:	f7fc f84c 	bl	80023f8 <HAL_GetTick>
 8006360:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006362:	e008      	b.n	8006376 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006364:	f7fc f848 	bl	80023f8 <HAL_GetTick>
 8006368:	4602      	mov	r2, r0
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	1ad3      	subs	r3, r2, r3
 800636e:	2b02      	cmp	r3, #2
 8006370:	d901      	bls.n	8006376 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006372:	2303      	movs	r3, #3
 8006374:	e087      	b.n	8006486 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006376:	4b27      	ldr	r3, [pc, #156]	@ (8006414 <HAL_RCC_OscConfig+0x470>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800637e:	2b00      	cmp	r3, #0
 8006380:	d1f0      	bne.n	8006364 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	69da      	ldr	r2, [r3, #28]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6a1b      	ldr	r3, [r3, #32]
 800638a:	431a      	orrs	r2, r3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006390:	019b      	lsls	r3, r3, #6
 8006392:	431a      	orrs	r2, r3
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006398:	085b      	lsrs	r3, r3, #1
 800639a:	3b01      	subs	r3, #1
 800639c:	041b      	lsls	r3, r3, #16
 800639e:	431a      	orrs	r2, r3
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063a4:	061b      	lsls	r3, r3, #24
 80063a6:	491b      	ldr	r1, [pc, #108]	@ (8006414 <HAL_RCC_OscConfig+0x470>)
 80063a8:	4313      	orrs	r3, r2
 80063aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063ac:	4b1b      	ldr	r3, [pc, #108]	@ (800641c <HAL_RCC_OscConfig+0x478>)
 80063ae:	2201      	movs	r2, #1
 80063b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063b2:	f7fc f821 	bl	80023f8 <HAL_GetTick>
 80063b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063b8:	e008      	b.n	80063cc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063ba:	f7fc f81d 	bl	80023f8 <HAL_GetTick>
 80063be:	4602      	mov	r2, r0
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	1ad3      	subs	r3, r2, r3
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	d901      	bls.n	80063cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80063c8:	2303      	movs	r3, #3
 80063ca:	e05c      	b.n	8006486 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063cc:	4b11      	ldr	r3, [pc, #68]	@ (8006414 <HAL_RCC_OscConfig+0x470>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d0f0      	beq.n	80063ba <HAL_RCC_OscConfig+0x416>
 80063d8:	e054      	b.n	8006484 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063da:	4b10      	ldr	r3, [pc, #64]	@ (800641c <HAL_RCC_OscConfig+0x478>)
 80063dc:	2200      	movs	r2, #0
 80063de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063e0:	f7fc f80a 	bl	80023f8 <HAL_GetTick>
 80063e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063e6:	e008      	b.n	80063fa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063e8:	f7fc f806 	bl	80023f8 <HAL_GetTick>
 80063ec:	4602      	mov	r2, r0
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	1ad3      	subs	r3, r2, r3
 80063f2:	2b02      	cmp	r3, #2
 80063f4:	d901      	bls.n	80063fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80063f6:	2303      	movs	r3, #3
 80063f8:	e045      	b.n	8006486 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063fa:	4b06      	ldr	r3, [pc, #24]	@ (8006414 <HAL_RCC_OscConfig+0x470>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006402:	2b00      	cmp	r3, #0
 8006404:	d1f0      	bne.n	80063e8 <HAL_RCC_OscConfig+0x444>
 8006406:	e03d      	b.n	8006484 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	699b      	ldr	r3, [r3, #24]
 800640c:	2b01      	cmp	r3, #1
 800640e:	d107      	bne.n	8006420 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	e038      	b.n	8006486 <HAL_RCC_OscConfig+0x4e2>
 8006414:	40023800 	.word	0x40023800
 8006418:	40007000 	.word	0x40007000
 800641c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006420:	4b1b      	ldr	r3, [pc, #108]	@ (8006490 <HAL_RCC_OscConfig+0x4ec>)
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	699b      	ldr	r3, [r3, #24]
 800642a:	2b01      	cmp	r3, #1
 800642c:	d028      	beq.n	8006480 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006438:	429a      	cmp	r2, r3
 800643a:	d121      	bne.n	8006480 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006446:	429a      	cmp	r2, r3
 8006448:	d11a      	bne.n	8006480 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800644a:	68fa      	ldr	r2, [r7, #12]
 800644c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006450:	4013      	ands	r3, r2
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006456:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006458:	4293      	cmp	r3, r2
 800645a:	d111      	bne.n	8006480 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006466:	085b      	lsrs	r3, r3, #1
 8006468:	3b01      	subs	r3, #1
 800646a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800646c:	429a      	cmp	r2, r3
 800646e:	d107      	bne.n	8006480 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800647a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800647c:	429a      	cmp	r2, r3
 800647e:	d001      	beq.n	8006484 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	e000      	b.n	8006486 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3718      	adds	r7, #24
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	40023800 	.word	0x40023800

08006494 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b084      	sub	sp, #16
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d101      	bne.n	80064a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	e0cc      	b.n	8006642 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80064a8:	4b68      	ldr	r3, [pc, #416]	@ (800664c <HAL_RCC_ClockConfig+0x1b8>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f003 0307 	and.w	r3, r3, #7
 80064b0:	683a      	ldr	r2, [r7, #0]
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d90c      	bls.n	80064d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064b6:	4b65      	ldr	r3, [pc, #404]	@ (800664c <HAL_RCC_ClockConfig+0x1b8>)
 80064b8:	683a      	ldr	r2, [r7, #0]
 80064ba:	b2d2      	uxtb	r2, r2
 80064bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064be:	4b63      	ldr	r3, [pc, #396]	@ (800664c <HAL_RCC_ClockConfig+0x1b8>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f003 0307 	and.w	r3, r3, #7
 80064c6:	683a      	ldr	r2, [r7, #0]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d001      	beq.n	80064d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	e0b8      	b.n	8006642 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f003 0302 	and.w	r3, r3, #2
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d020      	beq.n	800651e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f003 0304 	and.w	r3, r3, #4
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d005      	beq.n	80064f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80064e8:	4b59      	ldr	r3, [pc, #356]	@ (8006650 <HAL_RCC_ClockConfig+0x1bc>)
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	4a58      	ldr	r2, [pc, #352]	@ (8006650 <HAL_RCC_ClockConfig+0x1bc>)
 80064ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80064f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f003 0308 	and.w	r3, r3, #8
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d005      	beq.n	800650c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006500:	4b53      	ldr	r3, [pc, #332]	@ (8006650 <HAL_RCC_ClockConfig+0x1bc>)
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	4a52      	ldr	r2, [pc, #328]	@ (8006650 <HAL_RCC_ClockConfig+0x1bc>)
 8006506:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800650a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800650c:	4b50      	ldr	r3, [pc, #320]	@ (8006650 <HAL_RCC_ClockConfig+0x1bc>)
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	494d      	ldr	r1, [pc, #308]	@ (8006650 <HAL_RCC_ClockConfig+0x1bc>)
 800651a:	4313      	orrs	r3, r2
 800651c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f003 0301 	and.w	r3, r3, #1
 8006526:	2b00      	cmp	r3, #0
 8006528:	d044      	beq.n	80065b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	2b01      	cmp	r3, #1
 8006530:	d107      	bne.n	8006542 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006532:	4b47      	ldr	r3, [pc, #284]	@ (8006650 <HAL_RCC_ClockConfig+0x1bc>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800653a:	2b00      	cmp	r3, #0
 800653c:	d119      	bne.n	8006572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	e07f      	b.n	8006642 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	2b02      	cmp	r3, #2
 8006548:	d003      	beq.n	8006552 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800654e:	2b03      	cmp	r3, #3
 8006550:	d107      	bne.n	8006562 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006552:	4b3f      	ldr	r3, [pc, #252]	@ (8006650 <HAL_RCC_ClockConfig+0x1bc>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800655a:	2b00      	cmp	r3, #0
 800655c:	d109      	bne.n	8006572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	e06f      	b.n	8006642 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006562:	4b3b      	ldr	r3, [pc, #236]	@ (8006650 <HAL_RCC_ClockConfig+0x1bc>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f003 0302 	and.w	r3, r3, #2
 800656a:	2b00      	cmp	r3, #0
 800656c:	d101      	bne.n	8006572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800656e:	2301      	movs	r3, #1
 8006570:	e067      	b.n	8006642 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006572:	4b37      	ldr	r3, [pc, #220]	@ (8006650 <HAL_RCC_ClockConfig+0x1bc>)
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	f023 0203 	bic.w	r2, r3, #3
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	4934      	ldr	r1, [pc, #208]	@ (8006650 <HAL_RCC_ClockConfig+0x1bc>)
 8006580:	4313      	orrs	r3, r2
 8006582:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006584:	f7fb ff38 	bl	80023f8 <HAL_GetTick>
 8006588:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800658a:	e00a      	b.n	80065a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800658c:	f7fb ff34 	bl	80023f8 <HAL_GetTick>
 8006590:	4602      	mov	r2, r0
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	1ad3      	subs	r3, r2, r3
 8006596:	f241 3288 	movw	r2, #5000	@ 0x1388
 800659a:	4293      	cmp	r3, r2
 800659c:	d901      	bls.n	80065a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800659e:	2303      	movs	r3, #3
 80065a0:	e04f      	b.n	8006642 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065a2:	4b2b      	ldr	r3, [pc, #172]	@ (8006650 <HAL_RCC_ClockConfig+0x1bc>)
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	f003 020c 	and.w	r2, r3, #12
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d1eb      	bne.n	800658c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80065b4:	4b25      	ldr	r3, [pc, #148]	@ (800664c <HAL_RCC_ClockConfig+0x1b8>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f003 0307 	and.w	r3, r3, #7
 80065bc:	683a      	ldr	r2, [r7, #0]
 80065be:	429a      	cmp	r2, r3
 80065c0:	d20c      	bcs.n	80065dc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065c2:	4b22      	ldr	r3, [pc, #136]	@ (800664c <HAL_RCC_ClockConfig+0x1b8>)
 80065c4:	683a      	ldr	r2, [r7, #0]
 80065c6:	b2d2      	uxtb	r2, r2
 80065c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065ca:	4b20      	ldr	r3, [pc, #128]	@ (800664c <HAL_RCC_ClockConfig+0x1b8>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f003 0307 	and.w	r3, r3, #7
 80065d2:	683a      	ldr	r2, [r7, #0]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d001      	beq.n	80065dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	e032      	b.n	8006642 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f003 0304 	and.w	r3, r3, #4
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d008      	beq.n	80065fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065e8:	4b19      	ldr	r3, [pc, #100]	@ (8006650 <HAL_RCC_ClockConfig+0x1bc>)
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	4916      	ldr	r1, [pc, #88]	@ (8006650 <HAL_RCC_ClockConfig+0x1bc>)
 80065f6:	4313      	orrs	r3, r2
 80065f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f003 0308 	and.w	r3, r3, #8
 8006602:	2b00      	cmp	r3, #0
 8006604:	d009      	beq.n	800661a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006606:	4b12      	ldr	r3, [pc, #72]	@ (8006650 <HAL_RCC_ClockConfig+0x1bc>)
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	691b      	ldr	r3, [r3, #16]
 8006612:	00db      	lsls	r3, r3, #3
 8006614:	490e      	ldr	r1, [pc, #56]	@ (8006650 <HAL_RCC_ClockConfig+0x1bc>)
 8006616:	4313      	orrs	r3, r2
 8006618:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800661a:	f000 f821 	bl	8006660 <HAL_RCC_GetSysClockFreq>
 800661e:	4602      	mov	r2, r0
 8006620:	4b0b      	ldr	r3, [pc, #44]	@ (8006650 <HAL_RCC_ClockConfig+0x1bc>)
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	091b      	lsrs	r3, r3, #4
 8006626:	f003 030f 	and.w	r3, r3, #15
 800662a:	490a      	ldr	r1, [pc, #40]	@ (8006654 <HAL_RCC_ClockConfig+0x1c0>)
 800662c:	5ccb      	ldrb	r3, [r1, r3]
 800662e:	fa22 f303 	lsr.w	r3, r2, r3
 8006632:	4a09      	ldr	r2, [pc, #36]	@ (8006658 <HAL_RCC_ClockConfig+0x1c4>)
 8006634:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006636:	4b09      	ldr	r3, [pc, #36]	@ (800665c <HAL_RCC_ClockConfig+0x1c8>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4618      	mov	r0, r3
 800663c:	f7fb fe98 	bl	8002370 <HAL_InitTick>

  return HAL_OK;
 8006640:	2300      	movs	r3, #0
}
 8006642:	4618      	mov	r0, r3
 8006644:	3710      	adds	r7, #16
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	40023c00 	.word	0x40023c00
 8006650:	40023800 	.word	0x40023800
 8006654:	0800cb9c 	.word	0x0800cb9c
 8006658:	2000001c 	.word	0x2000001c
 800665c:	20000020 	.word	0x20000020

08006660 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006660:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006664:	b094      	sub	sp, #80	@ 0x50
 8006666:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006668:	2300      	movs	r3, #0
 800666a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800666c:	2300      	movs	r3, #0
 800666e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006670:	2300      	movs	r3, #0
 8006672:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006674:	2300      	movs	r3, #0
 8006676:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006678:	4b79      	ldr	r3, [pc, #484]	@ (8006860 <HAL_RCC_GetSysClockFreq+0x200>)
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	f003 030c 	and.w	r3, r3, #12
 8006680:	2b08      	cmp	r3, #8
 8006682:	d00d      	beq.n	80066a0 <HAL_RCC_GetSysClockFreq+0x40>
 8006684:	2b08      	cmp	r3, #8
 8006686:	f200 80e1 	bhi.w	800684c <HAL_RCC_GetSysClockFreq+0x1ec>
 800668a:	2b00      	cmp	r3, #0
 800668c:	d002      	beq.n	8006694 <HAL_RCC_GetSysClockFreq+0x34>
 800668e:	2b04      	cmp	r3, #4
 8006690:	d003      	beq.n	800669a <HAL_RCC_GetSysClockFreq+0x3a>
 8006692:	e0db      	b.n	800684c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006694:	4b73      	ldr	r3, [pc, #460]	@ (8006864 <HAL_RCC_GetSysClockFreq+0x204>)
 8006696:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006698:	e0db      	b.n	8006852 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800669a:	4b73      	ldr	r3, [pc, #460]	@ (8006868 <HAL_RCC_GetSysClockFreq+0x208>)
 800669c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800669e:	e0d8      	b.n	8006852 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80066a0:	4b6f      	ldr	r3, [pc, #444]	@ (8006860 <HAL_RCC_GetSysClockFreq+0x200>)
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80066a8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80066aa:	4b6d      	ldr	r3, [pc, #436]	@ (8006860 <HAL_RCC_GetSysClockFreq+0x200>)
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d063      	beq.n	800677e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066b6:	4b6a      	ldr	r3, [pc, #424]	@ (8006860 <HAL_RCC_GetSysClockFreq+0x200>)
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	099b      	lsrs	r3, r3, #6
 80066bc:	2200      	movs	r2, #0
 80066be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80066c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80066c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80066ca:	2300      	movs	r3, #0
 80066cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80066ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80066d2:	4622      	mov	r2, r4
 80066d4:	462b      	mov	r3, r5
 80066d6:	f04f 0000 	mov.w	r0, #0
 80066da:	f04f 0100 	mov.w	r1, #0
 80066de:	0159      	lsls	r1, r3, #5
 80066e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80066e4:	0150      	lsls	r0, r2, #5
 80066e6:	4602      	mov	r2, r0
 80066e8:	460b      	mov	r3, r1
 80066ea:	4621      	mov	r1, r4
 80066ec:	1a51      	subs	r1, r2, r1
 80066ee:	6139      	str	r1, [r7, #16]
 80066f0:	4629      	mov	r1, r5
 80066f2:	eb63 0301 	sbc.w	r3, r3, r1
 80066f6:	617b      	str	r3, [r7, #20]
 80066f8:	f04f 0200 	mov.w	r2, #0
 80066fc:	f04f 0300 	mov.w	r3, #0
 8006700:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006704:	4659      	mov	r1, fp
 8006706:	018b      	lsls	r3, r1, #6
 8006708:	4651      	mov	r1, sl
 800670a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800670e:	4651      	mov	r1, sl
 8006710:	018a      	lsls	r2, r1, #6
 8006712:	4651      	mov	r1, sl
 8006714:	ebb2 0801 	subs.w	r8, r2, r1
 8006718:	4659      	mov	r1, fp
 800671a:	eb63 0901 	sbc.w	r9, r3, r1
 800671e:	f04f 0200 	mov.w	r2, #0
 8006722:	f04f 0300 	mov.w	r3, #0
 8006726:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800672a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800672e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006732:	4690      	mov	r8, r2
 8006734:	4699      	mov	r9, r3
 8006736:	4623      	mov	r3, r4
 8006738:	eb18 0303 	adds.w	r3, r8, r3
 800673c:	60bb      	str	r3, [r7, #8]
 800673e:	462b      	mov	r3, r5
 8006740:	eb49 0303 	adc.w	r3, r9, r3
 8006744:	60fb      	str	r3, [r7, #12]
 8006746:	f04f 0200 	mov.w	r2, #0
 800674a:	f04f 0300 	mov.w	r3, #0
 800674e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006752:	4629      	mov	r1, r5
 8006754:	024b      	lsls	r3, r1, #9
 8006756:	4621      	mov	r1, r4
 8006758:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800675c:	4621      	mov	r1, r4
 800675e:	024a      	lsls	r2, r1, #9
 8006760:	4610      	mov	r0, r2
 8006762:	4619      	mov	r1, r3
 8006764:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006766:	2200      	movs	r2, #0
 8006768:	62bb      	str	r3, [r7, #40]	@ 0x28
 800676a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800676c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006770:	f7f9 fd86 	bl	8000280 <__aeabi_uldivmod>
 8006774:	4602      	mov	r2, r0
 8006776:	460b      	mov	r3, r1
 8006778:	4613      	mov	r3, r2
 800677a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800677c:	e058      	b.n	8006830 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800677e:	4b38      	ldr	r3, [pc, #224]	@ (8006860 <HAL_RCC_GetSysClockFreq+0x200>)
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	099b      	lsrs	r3, r3, #6
 8006784:	2200      	movs	r2, #0
 8006786:	4618      	mov	r0, r3
 8006788:	4611      	mov	r1, r2
 800678a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800678e:	623b      	str	r3, [r7, #32]
 8006790:	2300      	movs	r3, #0
 8006792:	627b      	str	r3, [r7, #36]	@ 0x24
 8006794:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006798:	4642      	mov	r2, r8
 800679a:	464b      	mov	r3, r9
 800679c:	f04f 0000 	mov.w	r0, #0
 80067a0:	f04f 0100 	mov.w	r1, #0
 80067a4:	0159      	lsls	r1, r3, #5
 80067a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80067aa:	0150      	lsls	r0, r2, #5
 80067ac:	4602      	mov	r2, r0
 80067ae:	460b      	mov	r3, r1
 80067b0:	4641      	mov	r1, r8
 80067b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80067b6:	4649      	mov	r1, r9
 80067b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80067bc:	f04f 0200 	mov.w	r2, #0
 80067c0:	f04f 0300 	mov.w	r3, #0
 80067c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80067c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80067cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80067d0:	ebb2 040a 	subs.w	r4, r2, sl
 80067d4:	eb63 050b 	sbc.w	r5, r3, fp
 80067d8:	f04f 0200 	mov.w	r2, #0
 80067dc:	f04f 0300 	mov.w	r3, #0
 80067e0:	00eb      	lsls	r3, r5, #3
 80067e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80067e6:	00e2      	lsls	r2, r4, #3
 80067e8:	4614      	mov	r4, r2
 80067ea:	461d      	mov	r5, r3
 80067ec:	4643      	mov	r3, r8
 80067ee:	18e3      	adds	r3, r4, r3
 80067f0:	603b      	str	r3, [r7, #0]
 80067f2:	464b      	mov	r3, r9
 80067f4:	eb45 0303 	adc.w	r3, r5, r3
 80067f8:	607b      	str	r3, [r7, #4]
 80067fa:	f04f 0200 	mov.w	r2, #0
 80067fe:	f04f 0300 	mov.w	r3, #0
 8006802:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006806:	4629      	mov	r1, r5
 8006808:	028b      	lsls	r3, r1, #10
 800680a:	4621      	mov	r1, r4
 800680c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006810:	4621      	mov	r1, r4
 8006812:	028a      	lsls	r2, r1, #10
 8006814:	4610      	mov	r0, r2
 8006816:	4619      	mov	r1, r3
 8006818:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800681a:	2200      	movs	r2, #0
 800681c:	61bb      	str	r3, [r7, #24]
 800681e:	61fa      	str	r2, [r7, #28]
 8006820:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006824:	f7f9 fd2c 	bl	8000280 <__aeabi_uldivmod>
 8006828:	4602      	mov	r2, r0
 800682a:	460b      	mov	r3, r1
 800682c:	4613      	mov	r3, r2
 800682e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006830:	4b0b      	ldr	r3, [pc, #44]	@ (8006860 <HAL_RCC_GetSysClockFreq+0x200>)
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	0c1b      	lsrs	r3, r3, #16
 8006836:	f003 0303 	and.w	r3, r3, #3
 800683a:	3301      	adds	r3, #1
 800683c:	005b      	lsls	r3, r3, #1
 800683e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006840:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006842:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006844:	fbb2 f3f3 	udiv	r3, r2, r3
 8006848:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800684a:	e002      	b.n	8006852 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800684c:	4b05      	ldr	r3, [pc, #20]	@ (8006864 <HAL_RCC_GetSysClockFreq+0x204>)
 800684e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006850:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006852:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006854:	4618      	mov	r0, r3
 8006856:	3750      	adds	r7, #80	@ 0x50
 8006858:	46bd      	mov	sp, r7
 800685a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800685e:	bf00      	nop
 8006860:	40023800 	.word	0x40023800
 8006864:	00f42400 	.word	0x00f42400
 8006868:	007a1200 	.word	0x007a1200

0800686c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800686c:	b480      	push	{r7}
 800686e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006870:	4b03      	ldr	r3, [pc, #12]	@ (8006880 <HAL_RCC_GetHCLKFreq+0x14>)
 8006872:	681b      	ldr	r3, [r3, #0]
}
 8006874:	4618      	mov	r0, r3
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr
 800687e:	bf00      	nop
 8006880:	2000001c 	.word	0x2000001c

08006884 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006888:	f7ff fff0 	bl	800686c <HAL_RCC_GetHCLKFreq>
 800688c:	4602      	mov	r2, r0
 800688e:	4b05      	ldr	r3, [pc, #20]	@ (80068a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	0a9b      	lsrs	r3, r3, #10
 8006894:	f003 0307 	and.w	r3, r3, #7
 8006898:	4903      	ldr	r1, [pc, #12]	@ (80068a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800689a:	5ccb      	ldrb	r3, [r1, r3]
 800689c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	bd80      	pop	{r7, pc}
 80068a4:	40023800 	.word	0x40023800
 80068a8:	0800cbac 	.word	0x0800cbac

080068ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80068b0:	f7ff ffdc 	bl	800686c <HAL_RCC_GetHCLKFreq>
 80068b4:	4602      	mov	r2, r0
 80068b6:	4b05      	ldr	r3, [pc, #20]	@ (80068cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	0b5b      	lsrs	r3, r3, #13
 80068bc:	f003 0307 	and.w	r3, r3, #7
 80068c0:	4903      	ldr	r1, [pc, #12]	@ (80068d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80068c2:	5ccb      	ldrb	r3, [r1, r3]
 80068c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	bd80      	pop	{r7, pc}
 80068cc:	40023800 	.word	0x40023800
 80068d0:	0800cbac 	.word	0x0800cbac

080068d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b082      	sub	sp, #8
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d101      	bne.n	80068e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e07b      	b.n	80069de <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d108      	bne.n	8006900 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80068f6:	d009      	beq.n	800690c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	61da      	str	r2, [r3, #28]
 80068fe:	e005      	b.n	800690c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006918:	b2db      	uxtb	r3, r3
 800691a:	2b00      	cmp	r3, #0
 800691c:	d106      	bne.n	800692c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f7fb fad8 	bl	8001edc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2202      	movs	r2, #2
 8006930:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006942:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006954:	431a      	orrs	r2, r3
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800695e:	431a      	orrs	r2, r3
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	691b      	ldr	r3, [r3, #16]
 8006964:	f003 0302 	and.w	r3, r3, #2
 8006968:	431a      	orrs	r2, r3
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	695b      	ldr	r3, [r3, #20]
 800696e:	f003 0301 	and.w	r3, r3, #1
 8006972:	431a      	orrs	r2, r3
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	699b      	ldr	r3, [r3, #24]
 8006978:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800697c:	431a      	orrs	r2, r3
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	69db      	ldr	r3, [r3, #28]
 8006982:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006986:	431a      	orrs	r2, r3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6a1b      	ldr	r3, [r3, #32]
 800698c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006990:	ea42 0103 	orr.w	r1, r2, r3
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006998:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	430a      	orrs	r2, r1
 80069a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	699b      	ldr	r3, [r3, #24]
 80069a8:	0c1b      	lsrs	r3, r3, #16
 80069aa:	f003 0104 	and.w	r1, r3, #4
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069b2:	f003 0210 	and.w	r2, r3, #16
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	430a      	orrs	r2, r1
 80069bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	69da      	ldr	r2, [r3, #28]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80069cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2200      	movs	r2, #0
 80069d2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2201      	movs	r2, #1
 80069d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80069dc:	2300      	movs	r3, #0
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3708      	adds	r7, #8
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}

080069e6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80069e6:	b580      	push	{r7, lr}
 80069e8:	b082      	sub	sp, #8
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d101      	bne.n	80069f8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	e041      	b.n	8006a7c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069fe:	b2db      	uxtb	r3, r3
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d106      	bne.n	8006a12 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f7fb faad 	bl	8001f6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2202      	movs	r2, #2
 8006a16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	3304      	adds	r3, #4
 8006a22:	4619      	mov	r1, r3
 8006a24:	4610      	mov	r0, r2
 8006a26:	f000 fad9 	bl	8006fdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2201      	movs	r2, #1
 8006a36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2201      	movs	r2, #1
 8006a46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2201      	movs	r2, #1
 8006a56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2201      	movs	r2, #1
 8006a66:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2201      	movs	r2, #1
 8006a76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006a7a:	2300      	movs	r3, #0
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3708      	adds	r7, #8
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b082      	sub	sp, #8
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d101      	bne.n	8006a96 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	e041      	b.n	8006b1a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d106      	bne.n	8006ab0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 f839 	bl	8006b22 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2202      	movs	r2, #2
 8006ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	3304      	adds	r3, #4
 8006ac0:	4619      	mov	r1, r3
 8006ac2:	4610      	mov	r0, r2
 8006ac4:	f000 fa8a 	bl	8006fdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2201      	movs	r2, #1
 8006acc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006b18:	2300      	movs	r3, #0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3708      	adds	r7, #8
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}

08006b22 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006b22:	b480      	push	{r7}
 8006b24:	b083      	sub	sp, #12
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006b2a:	bf00      	nop
 8006b2c:	370c      	adds	r7, #12
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr
	...

08006b38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d109      	bne.n	8006b5c <HAL_TIM_PWM_Start+0x24>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	bf14      	ite	ne
 8006b54:	2301      	movne	r3, #1
 8006b56:	2300      	moveq	r3, #0
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	e022      	b.n	8006ba2 <HAL_TIM_PWM_Start+0x6a>
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	2b04      	cmp	r3, #4
 8006b60:	d109      	bne.n	8006b76 <HAL_TIM_PWM_Start+0x3e>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	bf14      	ite	ne
 8006b6e:	2301      	movne	r3, #1
 8006b70:	2300      	moveq	r3, #0
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	e015      	b.n	8006ba2 <HAL_TIM_PWM_Start+0x6a>
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	2b08      	cmp	r3, #8
 8006b7a:	d109      	bne.n	8006b90 <HAL_TIM_PWM_Start+0x58>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	bf14      	ite	ne
 8006b88:	2301      	movne	r3, #1
 8006b8a:	2300      	moveq	r3, #0
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	e008      	b.n	8006ba2 <HAL_TIM_PWM_Start+0x6a>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	bf14      	ite	ne
 8006b9c:	2301      	movne	r3, #1
 8006b9e:	2300      	moveq	r3, #0
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d001      	beq.n	8006baa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e07c      	b.n	8006ca4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d104      	bne.n	8006bba <HAL_TIM_PWM_Start+0x82>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2202      	movs	r2, #2
 8006bb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006bb8:	e013      	b.n	8006be2 <HAL_TIM_PWM_Start+0xaa>
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	2b04      	cmp	r3, #4
 8006bbe:	d104      	bne.n	8006bca <HAL_TIM_PWM_Start+0x92>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2202      	movs	r2, #2
 8006bc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006bc8:	e00b      	b.n	8006be2 <HAL_TIM_PWM_Start+0xaa>
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	2b08      	cmp	r3, #8
 8006bce:	d104      	bne.n	8006bda <HAL_TIM_PWM_Start+0xa2>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2202      	movs	r2, #2
 8006bd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006bd8:	e003      	b.n	8006be2 <HAL_TIM_PWM_Start+0xaa>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2202      	movs	r2, #2
 8006bde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	2201      	movs	r2, #1
 8006be8:	6839      	ldr	r1, [r7, #0]
 8006bea:	4618      	mov	r0, r3
 8006bec:	f000 fce6 	bl	80075bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a2d      	ldr	r2, [pc, #180]	@ (8006cac <HAL_TIM_PWM_Start+0x174>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d004      	beq.n	8006c04 <HAL_TIM_PWM_Start+0xcc>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a2c      	ldr	r2, [pc, #176]	@ (8006cb0 <HAL_TIM_PWM_Start+0x178>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d101      	bne.n	8006c08 <HAL_TIM_PWM_Start+0xd0>
 8006c04:	2301      	movs	r3, #1
 8006c06:	e000      	b.n	8006c0a <HAL_TIM_PWM_Start+0xd2>
 8006c08:	2300      	movs	r3, #0
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d007      	beq.n	8006c1e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006c1c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a22      	ldr	r2, [pc, #136]	@ (8006cac <HAL_TIM_PWM_Start+0x174>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d022      	beq.n	8006c6e <HAL_TIM_PWM_Start+0x136>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c30:	d01d      	beq.n	8006c6e <HAL_TIM_PWM_Start+0x136>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a1f      	ldr	r2, [pc, #124]	@ (8006cb4 <HAL_TIM_PWM_Start+0x17c>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d018      	beq.n	8006c6e <HAL_TIM_PWM_Start+0x136>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a1d      	ldr	r2, [pc, #116]	@ (8006cb8 <HAL_TIM_PWM_Start+0x180>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d013      	beq.n	8006c6e <HAL_TIM_PWM_Start+0x136>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a1c      	ldr	r2, [pc, #112]	@ (8006cbc <HAL_TIM_PWM_Start+0x184>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d00e      	beq.n	8006c6e <HAL_TIM_PWM_Start+0x136>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a16      	ldr	r2, [pc, #88]	@ (8006cb0 <HAL_TIM_PWM_Start+0x178>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d009      	beq.n	8006c6e <HAL_TIM_PWM_Start+0x136>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a18      	ldr	r2, [pc, #96]	@ (8006cc0 <HAL_TIM_PWM_Start+0x188>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d004      	beq.n	8006c6e <HAL_TIM_PWM_Start+0x136>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a16      	ldr	r2, [pc, #88]	@ (8006cc4 <HAL_TIM_PWM_Start+0x18c>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d111      	bne.n	8006c92 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	f003 0307 	and.w	r3, r3, #7
 8006c78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2b06      	cmp	r3, #6
 8006c7e:	d010      	beq.n	8006ca2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f042 0201 	orr.w	r2, r2, #1
 8006c8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c90:	e007      	b.n	8006ca2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f042 0201 	orr.w	r2, r2, #1
 8006ca0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ca2:	2300      	movs	r3, #0
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3710      	adds	r7, #16
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}
 8006cac:	40010000 	.word	0x40010000
 8006cb0:	40010400 	.word	0x40010400
 8006cb4:	40000400 	.word	0x40000400
 8006cb8:	40000800 	.word	0x40000800
 8006cbc:	40000c00 	.word	0x40000c00
 8006cc0:	40014000 	.word	0x40014000
 8006cc4:	40001800 	.word	0x40001800

08006cc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b086      	sub	sp, #24
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	60b9      	str	r1, [r7, #8]
 8006cd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d101      	bne.n	8006ce6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006ce2:	2302      	movs	r3, #2
 8006ce4:	e0ae      	b.n	8006e44 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2201      	movs	r2, #1
 8006cea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2b0c      	cmp	r3, #12
 8006cf2:	f200 809f 	bhi.w	8006e34 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006cf6:	a201      	add	r2, pc, #4	@ (adr r2, 8006cfc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cfc:	08006d31 	.word	0x08006d31
 8006d00:	08006e35 	.word	0x08006e35
 8006d04:	08006e35 	.word	0x08006e35
 8006d08:	08006e35 	.word	0x08006e35
 8006d0c:	08006d71 	.word	0x08006d71
 8006d10:	08006e35 	.word	0x08006e35
 8006d14:	08006e35 	.word	0x08006e35
 8006d18:	08006e35 	.word	0x08006e35
 8006d1c:	08006db3 	.word	0x08006db3
 8006d20:	08006e35 	.word	0x08006e35
 8006d24:	08006e35 	.word	0x08006e35
 8006d28:	08006e35 	.word	0x08006e35
 8006d2c:	08006df3 	.word	0x08006df3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	68b9      	ldr	r1, [r7, #8]
 8006d36:	4618      	mov	r0, r3
 8006d38:	f000 f9f6 	bl	8007128 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	699a      	ldr	r2, [r3, #24]
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f042 0208 	orr.w	r2, r2, #8
 8006d4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	699a      	ldr	r2, [r3, #24]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f022 0204 	bic.w	r2, r2, #4
 8006d5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	6999      	ldr	r1, [r3, #24]
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	691a      	ldr	r2, [r3, #16]
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	430a      	orrs	r2, r1
 8006d6c:	619a      	str	r2, [r3, #24]
      break;
 8006d6e:	e064      	b.n	8006e3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	68b9      	ldr	r1, [r7, #8]
 8006d76:	4618      	mov	r0, r3
 8006d78:	f000 fa46 	bl	8007208 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	699a      	ldr	r2, [r3, #24]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006d8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	699a      	ldr	r2, [r3, #24]
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	6999      	ldr	r1, [r3, #24]
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	021a      	lsls	r2, r3, #8
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	430a      	orrs	r2, r1
 8006dae:	619a      	str	r2, [r3, #24]
      break;
 8006db0:	e043      	b.n	8006e3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	68b9      	ldr	r1, [r7, #8]
 8006db8:	4618      	mov	r0, r3
 8006dba:	f000 fa9b 	bl	80072f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	69da      	ldr	r2, [r3, #28]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f042 0208 	orr.w	r2, r2, #8
 8006dcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	69da      	ldr	r2, [r3, #28]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f022 0204 	bic.w	r2, r2, #4
 8006ddc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	69d9      	ldr	r1, [r3, #28]
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	691a      	ldr	r2, [r3, #16]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	430a      	orrs	r2, r1
 8006dee:	61da      	str	r2, [r3, #28]
      break;
 8006df0:	e023      	b.n	8006e3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	68b9      	ldr	r1, [r7, #8]
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f000 faef 	bl	80073dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	69da      	ldr	r2, [r3, #28]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006e0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	69da      	ldr	r2, [r3, #28]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	69d9      	ldr	r1, [r3, #28]
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	691b      	ldr	r3, [r3, #16]
 8006e28:	021a      	lsls	r2, r3, #8
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	430a      	orrs	r2, r1
 8006e30:	61da      	str	r2, [r3, #28]
      break;
 8006e32:	e002      	b.n	8006e3a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006e34:	2301      	movs	r3, #1
 8006e36:	75fb      	strb	r3, [r7, #23]
      break;
 8006e38:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006e42:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3718      	adds	r7, #24
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b084      	sub	sp, #16
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e56:	2300      	movs	r3, #0
 8006e58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d101      	bne.n	8006e68 <HAL_TIM_ConfigClockSource+0x1c>
 8006e64:	2302      	movs	r3, #2
 8006e66:	e0b4      	b.n	8006fd2 <HAL_TIM_ConfigClockSource+0x186>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2202      	movs	r2, #2
 8006e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006e86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006e8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	68ba      	ldr	r2, [r7, #8]
 8006e96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ea0:	d03e      	beq.n	8006f20 <HAL_TIM_ConfigClockSource+0xd4>
 8006ea2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ea6:	f200 8087 	bhi.w	8006fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8006eaa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006eae:	f000 8086 	beq.w	8006fbe <HAL_TIM_ConfigClockSource+0x172>
 8006eb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006eb6:	d87f      	bhi.n	8006fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8006eb8:	2b70      	cmp	r3, #112	@ 0x70
 8006eba:	d01a      	beq.n	8006ef2 <HAL_TIM_ConfigClockSource+0xa6>
 8006ebc:	2b70      	cmp	r3, #112	@ 0x70
 8006ebe:	d87b      	bhi.n	8006fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8006ec0:	2b60      	cmp	r3, #96	@ 0x60
 8006ec2:	d050      	beq.n	8006f66 <HAL_TIM_ConfigClockSource+0x11a>
 8006ec4:	2b60      	cmp	r3, #96	@ 0x60
 8006ec6:	d877      	bhi.n	8006fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8006ec8:	2b50      	cmp	r3, #80	@ 0x50
 8006eca:	d03c      	beq.n	8006f46 <HAL_TIM_ConfigClockSource+0xfa>
 8006ecc:	2b50      	cmp	r3, #80	@ 0x50
 8006ece:	d873      	bhi.n	8006fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8006ed0:	2b40      	cmp	r3, #64	@ 0x40
 8006ed2:	d058      	beq.n	8006f86 <HAL_TIM_ConfigClockSource+0x13a>
 8006ed4:	2b40      	cmp	r3, #64	@ 0x40
 8006ed6:	d86f      	bhi.n	8006fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8006ed8:	2b30      	cmp	r3, #48	@ 0x30
 8006eda:	d064      	beq.n	8006fa6 <HAL_TIM_ConfigClockSource+0x15a>
 8006edc:	2b30      	cmp	r3, #48	@ 0x30
 8006ede:	d86b      	bhi.n	8006fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8006ee0:	2b20      	cmp	r3, #32
 8006ee2:	d060      	beq.n	8006fa6 <HAL_TIM_ConfigClockSource+0x15a>
 8006ee4:	2b20      	cmp	r3, #32
 8006ee6:	d867      	bhi.n	8006fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d05c      	beq.n	8006fa6 <HAL_TIM_ConfigClockSource+0x15a>
 8006eec:	2b10      	cmp	r3, #16
 8006eee:	d05a      	beq.n	8006fa6 <HAL_TIM_ConfigClockSource+0x15a>
 8006ef0:	e062      	b.n	8006fb8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006f02:	f000 fb3b 	bl	800757c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006f14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	68ba      	ldr	r2, [r7, #8]
 8006f1c:	609a      	str	r2, [r3, #8]
      break;
 8006f1e:	e04f      	b.n	8006fc0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006f30:	f000 fb24 	bl	800757c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	689a      	ldr	r2, [r3, #8]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006f42:	609a      	str	r2, [r3, #8]
      break;
 8006f44:	e03c      	b.n	8006fc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f52:	461a      	mov	r2, r3
 8006f54:	f000 fa98 	bl	8007488 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	2150      	movs	r1, #80	@ 0x50
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f000 faf1 	bl	8007546 <TIM_ITRx_SetConfig>
      break;
 8006f64:	e02c      	b.n	8006fc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f72:	461a      	mov	r2, r3
 8006f74:	f000 fab7 	bl	80074e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	2160      	movs	r1, #96	@ 0x60
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f000 fae1 	bl	8007546 <TIM_ITRx_SetConfig>
      break;
 8006f84:	e01c      	b.n	8006fc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f92:	461a      	mov	r2, r3
 8006f94:	f000 fa78 	bl	8007488 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	2140      	movs	r1, #64	@ 0x40
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f000 fad1 	bl	8007546 <TIM_ITRx_SetConfig>
      break;
 8006fa4:	e00c      	b.n	8006fc0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4619      	mov	r1, r3
 8006fb0:	4610      	mov	r0, r2
 8006fb2:	f000 fac8 	bl	8007546 <TIM_ITRx_SetConfig>
      break;
 8006fb6:	e003      	b.n	8006fc0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	73fb      	strb	r3, [r7, #15]
      break;
 8006fbc:	e000      	b.n	8006fc0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006fbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3710      	adds	r7, #16
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
	...

08006fdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b085      	sub	sp, #20
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	4a43      	ldr	r2, [pc, #268]	@ (80070fc <TIM_Base_SetConfig+0x120>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d013      	beq.n	800701c <TIM_Base_SetConfig+0x40>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ffa:	d00f      	beq.n	800701c <TIM_Base_SetConfig+0x40>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	4a40      	ldr	r2, [pc, #256]	@ (8007100 <TIM_Base_SetConfig+0x124>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d00b      	beq.n	800701c <TIM_Base_SetConfig+0x40>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	4a3f      	ldr	r2, [pc, #252]	@ (8007104 <TIM_Base_SetConfig+0x128>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d007      	beq.n	800701c <TIM_Base_SetConfig+0x40>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	4a3e      	ldr	r2, [pc, #248]	@ (8007108 <TIM_Base_SetConfig+0x12c>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d003      	beq.n	800701c <TIM_Base_SetConfig+0x40>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	4a3d      	ldr	r2, [pc, #244]	@ (800710c <TIM_Base_SetConfig+0x130>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d108      	bne.n	800702e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007022:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	68fa      	ldr	r2, [r7, #12]
 800702a:	4313      	orrs	r3, r2
 800702c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	4a32      	ldr	r2, [pc, #200]	@ (80070fc <TIM_Base_SetConfig+0x120>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d02b      	beq.n	800708e <TIM_Base_SetConfig+0xb2>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800703c:	d027      	beq.n	800708e <TIM_Base_SetConfig+0xb2>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	4a2f      	ldr	r2, [pc, #188]	@ (8007100 <TIM_Base_SetConfig+0x124>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d023      	beq.n	800708e <TIM_Base_SetConfig+0xb2>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	4a2e      	ldr	r2, [pc, #184]	@ (8007104 <TIM_Base_SetConfig+0x128>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d01f      	beq.n	800708e <TIM_Base_SetConfig+0xb2>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	4a2d      	ldr	r2, [pc, #180]	@ (8007108 <TIM_Base_SetConfig+0x12c>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d01b      	beq.n	800708e <TIM_Base_SetConfig+0xb2>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4a2c      	ldr	r2, [pc, #176]	@ (800710c <TIM_Base_SetConfig+0x130>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d017      	beq.n	800708e <TIM_Base_SetConfig+0xb2>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4a2b      	ldr	r2, [pc, #172]	@ (8007110 <TIM_Base_SetConfig+0x134>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d013      	beq.n	800708e <TIM_Base_SetConfig+0xb2>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	4a2a      	ldr	r2, [pc, #168]	@ (8007114 <TIM_Base_SetConfig+0x138>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d00f      	beq.n	800708e <TIM_Base_SetConfig+0xb2>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	4a29      	ldr	r2, [pc, #164]	@ (8007118 <TIM_Base_SetConfig+0x13c>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d00b      	beq.n	800708e <TIM_Base_SetConfig+0xb2>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	4a28      	ldr	r2, [pc, #160]	@ (800711c <TIM_Base_SetConfig+0x140>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d007      	beq.n	800708e <TIM_Base_SetConfig+0xb2>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4a27      	ldr	r2, [pc, #156]	@ (8007120 <TIM_Base_SetConfig+0x144>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d003      	beq.n	800708e <TIM_Base_SetConfig+0xb2>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	4a26      	ldr	r2, [pc, #152]	@ (8007124 <TIM_Base_SetConfig+0x148>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d108      	bne.n	80070a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007094:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	68fa      	ldr	r2, [r7, #12]
 800709c:	4313      	orrs	r3, r2
 800709e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	695b      	ldr	r3, [r3, #20]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	689a      	ldr	r2, [r3, #8]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	4a0e      	ldr	r2, [pc, #56]	@ (80070fc <TIM_Base_SetConfig+0x120>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d003      	beq.n	80070ce <TIM_Base_SetConfig+0xf2>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	4a10      	ldr	r2, [pc, #64]	@ (800710c <TIM_Base_SetConfig+0x130>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d103      	bne.n	80070d6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	691a      	ldr	r2, [r3, #16]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f043 0204 	orr.w	r2, r3, #4
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2201      	movs	r2, #1
 80070e6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	68fa      	ldr	r2, [r7, #12]
 80070ec:	601a      	str	r2, [r3, #0]
}
 80070ee:	bf00      	nop
 80070f0:	3714      	adds	r7, #20
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr
 80070fa:	bf00      	nop
 80070fc:	40010000 	.word	0x40010000
 8007100:	40000400 	.word	0x40000400
 8007104:	40000800 	.word	0x40000800
 8007108:	40000c00 	.word	0x40000c00
 800710c:	40010400 	.word	0x40010400
 8007110:	40014000 	.word	0x40014000
 8007114:	40014400 	.word	0x40014400
 8007118:	40014800 	.word	0x40014800
 800711c:	40001800 	.word	0x40001800
 8007120:	40001c00 	.word	0x40001c00
 8007124:	40002000 	.word	0x40002000

08007128 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007128:	b480      	push	{r7}
 800712a:	b087      	sub	sp, #28
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6a1b      	ldr	r3, [r3, #32]
 8007136:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6a1b      	ldr	r3, [r3, #32]
 800713c:	f023 0201 	bic.w	r2, r3, #1
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	699b      	ldr	r3, [r3, #24]
 800714e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007156:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f023 0303 	bic.w	r3, r3, #3
 800715e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	68fa      	ldr	r2, [r7, #12]
 8007166:	4313      	orrs	r3, r2
 8007168:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	f023 0302 	bic.w	r3, r3, #2
 8007170:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	697a      	ldr	r2, [r7, #20]
 8007178:	4313      	orrs	r3, r2
 800717a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	4a20      	ldr	r2, [pc, #128]	@ (8007200 <TIM_OC1_SetConfig+0xd8>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d003      	beq.n	800718c <TIM_OC1_SetConfig+0x64>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	4a1f      	ldr	r2, [pc, #124]	@ (8007204 <TIM_OC1_SetConfig+0xdc>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d10c      	bne.n	80071a6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	f023 0308 	bic.w	r3, r3, #8
 8007192:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	68db      	ldr	r3, [r3, #12]
 8007198:	697a      	ldr	r2, [r7, #20]
 800719a:	4313      	orrs	r3, r2
 800719c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	f023 0304 	bic.w	r3, r3, #4
 80071a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	4a15      	ldr	r2, [pc, #84]	@ (8007200 <TIM_OC1_SetConfig+0xd8>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d003      	beq.n	80071b6 <TIM_OC1_SetConfig+0x8e>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	4a14      	ldr	r2, [pc, #80]	@ (8007204 <TIM_OC1_SetConfig+0xdc>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d111      	bne.n	80071da <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80071bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80071c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	695b      	ldr	r3, [r3, #20]
 80071ca:	693a      	ldr	r2, [r7, #16]
 80071cc:	4313      	orrs	r3, r2
 80071ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	699b      	ldr	r3, [r3, #24]
 80071d4:	693a      	ldr	r2, [r7, #16]
 80071d6:	4313      	orrs	r3, r2
 80071d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	693a      	ldr	r2, [r7, #16]
 80071de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	68fa      	ldr	r2, [r7, #12]
 80071e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	685a      	ldr	r2, [r3, #4]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	697a      	ldr	r2, [r7, #20]
 80071f2:	621a      	str	r2, [r3, #32]
}
 80071f4:	bf00      	nop
 80071f6:	371c      	adds	r7, #28
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr
 8007200:	40010000 	.word	0x40010000
 8007204:	40010400 	.word	0x40010400

08007208 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007208:	b480      	push	{r7}
 800720a:	b087      	sub	sp, #28
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6a1b      	ldr	r3, [r3, #32]
 8007216:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6a1b      	ldr	r3, [r3, #32]
 800721c:	f023 0210 	bic.w	r2, r3, #16
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	699b      	ldr	r3, [r3, #24]
 800722e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800723e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	021b      	lsls	r3, r3, #8
 8007246:	68fa      	ldr	r2, [r7, #12]
 8007248:	4313      	orrs	r3, r2
 800724a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	f023 0320 	bic.w	r3, r3, #32
 8007252:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	011b      	lsls	r3, r3, #4
 800725a:	697a      	ldr	r2, [r7, #20]
 800725c:	4313      	orrs	r3, r2
 800725e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	4a22      	ldr	r2, [pc, #136]	@ (80072ec <TIM_OC2_SetConfig+0xe4>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d003      	beq.n	8007270 <TIM_OC2_SetConfig+0x68>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	4a21      	ldr	r2, [pc, #132]	@ (80072f0 <TIM_OC2_SetConfig+0xe8>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d10d      	bne.n	800728c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007276:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	011b      	lsls	r3, r3, #4
 800727e:	697a      	ldr	r2, [r7, #20]
 8007280:	4313      	orrs	r3, r2
 8007282:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800728a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	4a17      	ldr	r2, [pc, #92]	@ (80072ec <TIM_OC2_SetConfig+0xe4>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d003      	beq.n	800729c <TIM_OC2_SetConfig+0x94>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	4a16      	ldr	r2, [pc, #88]	@ (80072f0 <TIM_OC2_SetConfig+0xe8>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d113      	bne.n	80072c4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80072a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80072aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	695b      	ldr	r3, [r3, #20]
 80072b0:	009b      	lsls	r3, r3, #2
 80072b2:	693a      	ldr	r2, [r7, #16]
 80072b4:	4313      	orrs	r3, r2
 80072b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	699b      	ldr	r3, [r3, #24]
 80072bc:	009b      	lsls	r3, r3, #2
 80072be:	693a      	ldr	r2, [r7, #16]
 80072c0:	4313      	orrs	r3, r2
 80072c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	693a      	ldr	r2, [r7, #16]
 80072c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	68fa      	ldr	r2, [r7, #12]
 80072ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	685a      	ldr	r2, [r3, #4]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	697a      	ldr	r2, [r7, #20]
 80072dc:	621a      	str	r2, [r3, #32]
}
 80072de:	bf00      	nop
 80072e0:	371c      	adds	r7, #28
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr
 80072ea:	bf00      	nop
 80072ec:	40010000 	.word	0x40010000
 80072f0:	40010400 	.word	0x40010400

080072f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b087      	sub	sp, #28
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6a1b      	ldr	r3, [r3, #32]
 8007302:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6a1b      	ldr	r3, [r3, #32]
 8007308:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	69db      	ldr	r3, [r3, #28]
 800731a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007322:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f023 0303 	bic.w	r3, r3, #3
 800732a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	68fa      	ldr	r2, [r7, #12]
 8007332:	4313      	orrs	r3, r2
 8007334:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800733c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	021b      	lsls	r3, r3, #8
 8007344:	697a      	ldr	r2, [r7, #20]
 8007346:	4313      	orrs	r3, r2
 8007348:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	4a21      	ldr	r2, [pc, #132]	@ (80073d4 <TIM_OC3_SetConfig+0xe0>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d003      	beq.n	800735a <TIM_OC3_SetConfig+0x66>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	4a20      	ldr	r2, [pc, #128]	@ (80073d8 <TIM_OC3_SetConfig+0xe4>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d10d      	bne.n	8007376 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007360:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	68db      	ldr	r3, [r3, #12]
 8007366:	021b      	lsls	r3, r3, #8
 8007368:	697a      	ldr	r2, [r7, #20]
 800736a:	4313      	orrs	r3, r2
 800736c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007374:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	4a16      	ldr	r2, [pc, #88]	@ (80073d4 <TIM_OC3_SetConfig+0xe0>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d003      	beq.n	8007386 <TIM_OC3_SetConfig+0x92>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	4a15      	ldr	r2, [pc, #84]	@ (80073d8 <TIM_OC3_SetConfig+0xe4>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d113      	bne.n	80073ae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800738c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007394:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	695b      	ldr	r3, [r3, #20]
 800739a:	011b      	lsls	r3, r3, #4
 800739c:	693a      	ldr	r2, [r7, #16]
 800739e:	4313      	orrs	r3, r2
 80073a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	699b      	ldr	r3, [r3, #24]
 80073a6:	011b      	lsls	r3, r3, #4
 80073a8:	693a      	ldr	r2, [r7, #16]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	693a      	ldr	r2, [r7, #16]
 80073b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	68fa      	ldr	r2, [r7, #12]
 80073b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	685a      	ldr	r2, [r3, #4]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	697a      	ldr	r2, [r7, #20]
 80073c6:	621a      	str	r2, [r3, #32]
}
 80073c8:	bf00      	nop
 80073ca:	371c      	adds	r7, #28
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr
 80073d4:	40010000 	.word	0x40010000
 80073d8:	40010400 	.word	0x40010400

080073dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80073dc:	b480      	push	{r7}
 80073de:	b087      	sub	sp, #28
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6a1b      	ldr	r3, [r3, #32]
 80073ea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6a1b      	ldr	r3, [r3, #32]
 80073f0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	69db      	ldr	r3, [r3, #28]
 8007402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800740a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007412:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	021b      	lsls	r3, r3, #8
 800741a:	68fa      	ldr	r2, [r7, #12]
 800741c:	4313      	orrs	r3, r2
 800741e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007426:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	031b      	lsls	r3, r3, #12
 800742e:	693a      	ldr	r2, [r7, #16]
 8007430:	4313      	orrs	r3, r2
 8007432:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	4a12      	ldr	r2, [pc, #72]	@ (8007480 <TIM_OC4_SetConfig+0xa4>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d003      	beq.n	8007444 <TIM_OC4_SetConfig+0x68>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	4a11      	ldr	r2, [pc, #68]	@ (8007484 <TIM_OC4_SetConfig+0xa8>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d109      	bne.n	8007458 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800744a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	695b      	ldr	r3, [r3, #20]
 8007450:	019b      	lsls	r3, r3, #6
 8007452:	697a      	ldr	r2, [r7, #20]
 8007454:	4313      	orrs	r3, r2
 8007456:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	697a      	ldr	r2, [r7, #20]
 800745c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	68fa      	ldr	r2, [r7, #12]
 8007462:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	685a      	ldr	r2, [r3, #4]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	693a      	ldr	r2, [r7, #16]
 8007470:	621a      	str	r2, [r3, #32]
}
 8007472:	bf00      	nop
 8007474:	371c      	adds	r7, #28
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr
 800747e:	bf00      	nop
 8007480:	40010000 	.word	0x40010000
 8007484:	40010400 	.word	0x40010400

08007488 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007488:	b480      	push	{r7}
 800748a:	b087      	sub	sp, #28
 800748c:	af00      	add	r7, sp, #0
 800748e:	60f8      	str	r0, [r7, #12]
 8007490:	60b9      	str	r1, [r7, #8]
 8007492:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6a1b      	ldr	r3, [r3, #32]
 8007498:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	6a1b      	ldr	r3, [r3, #32]
 800749e:	f023 0201 	bic.w	r2, r3, #1
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	699b      	ldr	r3, [r3, #24]
 80074aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80074b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	011b      	lsls	r3, r3, #4
 80074b8:	693a      	ldr	r2, [r7, #16]
 80074ba:	4313      	orrs	r3, r2
 80074bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	f023 030a 	bic.w	r3, r3, #10
 80074c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80074c6:	697a      	ldr	r2, [r7, #20]
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	4313      	orrs	r3, r2
 80074cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	693a      	ldr	r2, [r7, #16]
 80074d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	697a      	ldr	r2, [r7, #20]
 80074d8:	621a      	str	r2, [r3, #32]
}
 80074da:	bf00      	nop
 80074dc:	371c      	adds	r7, #28
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr

080074e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074e6:	b480      	push	{r7}
 80074e8:	b087      	sub	sp, #28
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	60f8      	str	r0, [r7, #12]
 80074ee:	60b9      	str	r1, [r7, #8]
 80074f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	6a1b      	ldr	r3, [r3, #32]
 80074f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	6a1b      	ldr	r3, [r3, #32]
 80074fc:	f023 0210 	bic.w	r2, r3, #16
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	699b      	ldr	r3, [r3, #24]
 8007508:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007510:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	031b      	lsls	r3, r3, #12
 8007516:	693a      	ldr	r2, [r7, #16]
 8007518:	4313      	orrs	r3, r2
 800751a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007522:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	011b      	lsls	r3, r3, #4
 8007528:	697a      	ldr	r2, [r7, #20]
 800752a:	4313      	orrs	r3, r2
 800752c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	693a      	ldr	r2, [r7, #16]
 8007532:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	697a      	ldr	r2, [r7, #20]
 8007538:	621a      	str	r2, [r3, #32]
}
 800753a:	bf00      	nop
 800753c:	371c      	adds	r7, #28
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr

08007546 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007546:	b480      	push	{r7}
 8007548:	b085      	sub	sp, #20
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
 800754e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800755c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800755e:	683a      	ldr	r2, [r7, #0]
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	4313      	orrs	r3, r2
 8007564:	f043 0307 	orr.w	r3, r3, #7
 8007568:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	68fa      	ldr	r2, [r7, #12]
 800756e:	609a      	str	r2, [r3, #8]
}
 8007570:	bf00      	nop
 8007572:	3714      	adds	r7, #20
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr

0800757c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800757c:	b480      	push	{r7}
 800757e:	b087      	sub	sp, #28
 8007580:	af00      	add	r7, sp, #0
 8007582:	60f8      	str	r0, [r7, #12]
 8007584:	60b9      	str	r1, [r7, #8]
 8007586:	607a      	str	r2, [r7, #4]
 8007588:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007596:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	021a      	lsls	r2, r3, #8
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	431a      	orrs	r2, r3
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	4313      	orrs	r3, r2
 80075a4:	697a      	ldr	r2, [r7, #20]
 80075a6:	4313      	orrs	r3, r2
 80075a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	697a      	ldr	r2, [r7, #20]
 80075ae:	609a      	str	r2, [r3, #8]
}
 80075b0:	bf00      	nop
 80075b2:	371c      	adds	r7, #28
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr

080075bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80075bc:	b480      	push	{r7}
 80075be:	b087      	sub	sp, #28
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	f003 031f 	and.w	r3, r3, #31
 80075ce:	2201      	movs	r2, #1
 80075d0:	fa02 f303 	lsl.w	r3, r2, r3
 80075d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	6a1a      	ldr	r2, [r3, #32]
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	43db      	mvns	r3, r3
 80075de:	401a      	ands	r2, r3
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	6a1a      	ldr	r2, [r3, #32]
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	f003 031f 	and.w	r3, r3, #31
 80075ee:	6879      	ldr	r1, [r7, #4]
 80075f0:	fa01 f303 	lsl.w	r3, r1, r3
 80075f4:	431a      	orrs	r2, r3
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	621a      	str	r2, [r3, #32]
}
 80075fa:	bf00      	nop
 80075fc:	371c      	adds	r7, #28
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr
	...

08007608 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007608:	b480      	push	{r7}
 800760a:	b085      	sub	sp, #20
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007618:	2b01      	cmp	r3, #1
 800761a:	d101      	bne.n	8007620 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800761c:	2302      	movs	r3, #2
 800761e:	e05a      	b.n	80076d6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2201      	movs	r2, #1
 8007624:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2202      	movs	r2, #2
 800762c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007646:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	68fa      	ldr	r2, [r7, #12]
 800764e:	4313      	orrs	r3, r2
 8007650:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	68fa      	ldr	r2, [r7, #12]
 8007658:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a21      	ldr	r2, [pc, #132]	@ (80076e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d022      	beq.n	80076aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800766c:	d01d      	beq.n	80076aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a1d      	ldr	r2, [pc, #116]	@ (80076e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d018      	beq.n	80076aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a1b      	ldr	r2, [pc, #108]	@ (80076ec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d013      	beq.n	80076aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a1a      	ldr	r2, [pc, #104]	@ (80076f0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d00e      	beq.n	80076aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a18      	ldr	r2, [pc, #96]	@ (80076f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d009      	beq.n	80076aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a17      	ldr	r2, [pc, #92]	@ (80076f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d004      	beq.n	80076aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a15      	ldr	r2, [pc, #84]	@ (80076fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d10c      	bne.n	80076c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80076b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	68ba      	ldr	r2, [r7, #8]
 80076b8:	4313      	orrs	r3, r2
 80076ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	68ba      	ldr	r2, [r7, #8]
 80076c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2201      	movs	r2, #1
 80076c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2200      	movs	r2, #0
 80076d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80076d4:	2300      	movs	r3, #0
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3714      	adds	r7, #20
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr
 80076e2:	bf00      	nop
 80076e4:	40010000 	.word	0x40010000
 80076e8:	40000400 	.word	0x40000400
 80076ec:	40000800 	.word	0x40000800
 80076f0:	40000c00 	.word	0x40000c00
 80076f4:	40010400 	.word	0x40010400
 80076f8:	40014000 	.word	0x40014000
 80076fc:	40001800 	.word	0x40001800

08007700 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b082      	sub	sp, #8
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d101      	bne.n	8007712 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800770e:	2301      	movs	r3, #1
 8007710:	e042      	b.n	8007798 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007718:	b2db      	uxtb	r3, r3
 800771a:	2b00      	cmp	r3, #0
 800771c:	d106      	bne.n	800772c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f7fa fc7c 	bl	8002024 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2224      	movs	r2, #36	@ 0x24
 8007730:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	68da      	ldr	r2, [r3, #12]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007742:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 fddd 	bl	8008304 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	691a      	ldr	r2, [r3, #16]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007758:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	695a      	ldr	r2, [r3, #20]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007768:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	68da      	ldr	r2, [r3, #12]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007778:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2220      	movs	r2, #32
 8007784:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2220      	movs	r2, #32
 800778c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007796:	2300      	movs	r3, #0
}
 8007798:	4618      	mov	r0, r3
 800779a:	3708      	adds	r7, #8
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b08a      	sub	sp, #40	@ 0x28
 80077a4:	af02      	add	r7, sp, #8
 80077a6:	60f8      	str	r0, [r7, #12]
 80077a8:	60b9      	str	r1, [r7, #8]
 80077aa:	603b      	str	r3, [r7, #0]
 80077ac:	4613      	mov	r3, r2
 80077ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80077b0:	2300      	movs	r3, #0
 80077b2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	2b20      	cmp	r3, #32
 80077be:	d175      	bne.n	80078ac <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d002      	beq.n	80077cc <HAL_UART_Transmit+0x2c>
 80077c6:	88fb      	ldrh	r3, [r7, #6]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d101      	bne.n	80077d0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80077cc:	2301      	movs	r3, #1
 80077ce:	e06e      	b.n	80078ae <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2200      	movs	r2, #0
 80077d4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2221      	movs	r2, #33	@ 0x21
 80077da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80077de:	f7fa fe0b 	bl	80023f8 <HAL_GetTick>
 80077e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	88fa      	ldrh	r2, [r7, #6]
 80077e8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	88fa      	ldrh	r2, [r7, #6]
 80077ee:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	689b      	ldr	r3, [r3, #8]
 80077f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077f8:	d108      	bne.n	800780c <HAL_UART_Transmit+0x6c>
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	691b      	ldr	r3, [r3, #16]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d104      	bne.n	800780c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007802:	2300      	movs	r3, #0
 8007804:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	61bb      	str	r3, [r7, #24]
 800780a:	e003      	b.n	8007814 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007810:	2300      	movs	r3, #0
 8007812:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007814:	e02e      	b.n	8007874 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	9300      	str	r3, [sp, #0]
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	2200      	movs	r2, #0
 800781e:	2180      	movs	r1, #128	@ 0x80
 8007820:	68f8      	ldr	r0, [r7, #12]
 8007822:	f000 fb41 	bl	8007ea8 <UART_WaitOnFlagUntilTimeout>
 8007826:	4603      	mov	r3, r0
 8007828:	2b00      	cmp	r3, #0
 800782a:	d005      	beq.n	8007838 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2220      	movs	r2, #32
 8007830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007834:	2303      	movs	r3, #3
 8007836:	e03a      	b.n	80078ae <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007838:	69fb      	ldr	r3, [r7, #28]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d10b      	bne.n	8007856 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800783e:	69bb      	ldr	r3, [r7, #24]
 8007840:	881b      	ldrh	r3, [r3, #0]
 8007842:	461a      	mov	r2, r3
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800784c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800784e:	69bb      	ldr	r3, [r7, #24]
 8007850:	3302      	adds	r3, #2
 8007852:	61bb      	str	r3, [r7, #24]
 8007854:	e007      	b.n	8007866 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007856:	69fb      	ldr	r3, [r7, #28]
 8007858:	781a      	ldrb	r2, [r3, #0]
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007860:	69fb      	ldr	r3, [r7, #28]
 8007862:	3301      	adds	r3, #1
 8007864:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800786a:	b29b      	uxth	r3, r3
 800786c:	3b01      	subs	r3, #1
 800786e:	b29a      	uxth	r2, r3
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007878:	b29b      	uxth	r3, r3
 800787a:	2b00      	cmp	r3, #0
 800787c:	d1cb      	bne.n	8007816 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	9300      	str	r3, [sp, #0]
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	2200      	movs	r2, #0
 8007886:	2140      	movs	r1, #64	@ 0x40
 8007888:	68f8      	ldr	r0, [r7, #12]
 800788a:	f000 fb0d 	bl	8007ea8 <UART_WaitOnFlagUntilTimeout>
 800788e:	4603      	mov	r3, r0
 8007890:	2b00      	cmp	r3, #0
 8007892:	d005      	beq.n	80078a0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2220      	movs	r2, #32
 8007898:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800789c:	2303      	movs	r3, #3
 800789e:	e006      	b.n	80078ae <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2220      	movs	r2, #32
 80078a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80078a8:	2300      	movs	r3, #0
 80078aa:	e000      	b.n	80078ae <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80078ac:	2302      	movs	r3, #2
  }
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3720      	adds	r7, #32
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}

080078b6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80078b6:	b580      	push	{r7, lr}
 80078b8:	b084      	sub	sp, #16
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	60f8      	str	r0, [r7, #12]
 80078be:	60b9      	str	r1, [r7, #8]
 80078c0:	4613      	mov	r3, r2
 80078c2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80078ca:	b2db      	uxtb	r3, r3
 80078cc:	2b20      	cmp	r3, #32
 80078ce:	d112      	bne.n	80078f6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d002      	beq.n	80078dc <HAL_UART_Receive_IT+0x26>
 80078d6:	88fb      	ldrh	r3, [r7, #6]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d101      	bne.n	80078e0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80078dc:	2301      	movs	r3, #1
 80078de:	e00b      	b.n	80078f8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2200      	movs	r2, #0
 80078e4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80078e6:	88fb      	ldrh	r3, [r7, #6]
 80078e8:	461a      	mov	r2, r3
 80078ea:	68b9      	ldr	r1, [r7, #8]
 80078ec:	68f8      	ldr	r0, [r7, #12]
 80078ee:	f000 fb34 	bl	8007f5a <UART_Start_Receive_IT>
 80078f2:	4603      	mov	r3, r0
 80078f4:	e000      	b.n	80078f8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80078f6:	2302      	movs	r3, #2
  }
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3710      	adds	r7, #16
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b0ba      	sub	sp, #232	@ 0xe8
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	68db      	ldr	r3, [r3, #12]
 8007918:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	695b      	ldr	r3, [r3, #20]
 8007922:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007926:	2300      	movs	r3, #0
 8007928:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800792c:	2300      	movs	r3, #0
 800792e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007936:	f003 030f 	and.w	r3, r3, #15
 800793a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800793e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007942:	2b00      	cmp	r3, #0
 8007944:	d10f      	bne.n	8007966 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800794a:	f003 0320 	and.w	r3, r3, #32
 800794e:	2b00      	cmp	r3, #0
 8007950:	d009      	beq.n	8007966 <HAL_UART_IRQHandler+0x66>
 8007952:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007956:	f003 0320 	and.w	r3, r3, #32
 800795a:	2b00      	cmp	r3, #0
 800795c:	d003      	beq.n	8007966 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 fc11 	bl	8008186 <UART_Receive_IT>
      return;
 8007964:	e273      	b.n	8007e4e <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007966:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800796a:	2b00      	cmp	r3, #0
 800796c:	f000 80de 	beq.w	8007b2c <HAL_UART_IRQHandler+0x22c>
 8007970:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007974:	f003 0301 	and.w	r3, r3, #1
 8007978:	2b00      	cmp	r3, #0
 800797a:	d106      	bne.n	800798a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800797c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007980:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007984:	2b00      	cmp	r3, #0
 8007986:	f000 80d1 	beq.w	8007b2c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800798a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800798e:	f003 0301 	and.w	r3, r3, #1
 8007992:	2b00      	cmp	r3, #0
 8007994:	d00b      	beq.n	80079ae <HAL_UART_IRQHandler+0xae>
 8007996:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800799a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d005      	beq.n	80079ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079a6:	f043 0201 	orr.w	r2, r3, #1
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80079ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079b2:	f003 0304 	and.w	r3, r3, #4
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d00b      	beq.n	80079d2 <HAL_UART_IRQHandler+0xd2>
 80079ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80079be:	f003 0301 	and.w	r3, r3, #1
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d005      	beq.n	80079d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079ca:	f043 0202 	orr.w	r2, r3, #2
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80079d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079d6:	f003 0302 	and.w	r3, r3, #2
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d00b      	beq.n	80079f6 <HAL_UART_IRQHandler+0xf6>
 80079de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80079e2:	f003 0301 	and.w	r3, r3, #1
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d005      	beq.n	80079f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079ee:	f043 0204 	orr.w	r2, r3, #4
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80079f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079fa:	f003 0308 	and.w	r3, r3, #8
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d011      	beq.n	8007a26 <HAL_UART_IRQHandler+0x126>
 8007a02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a06:	f003 0320 	and.w	r3, r3, #32
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d105      	bne.n	8007a1a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007a0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a12:	f003 0301 	and.w	r3, r3, #1
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d005      	beq.n	8007a26 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a1e:	f043 0208 	orr.w	r2, r3, #8
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	f000 820a 	beq.w	8007e44 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007a30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a34:	f003 0320 	and.w	r3, r3, #32
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d008      	beq.n	8007a4e <HAL_UART_IRQHandler+0x14e>
 8007a3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a40:	f003 0320 	and.w	r3, r3, #32
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d002      	beq.n	8007a4e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f000 fb9c 	bl	8008186 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	695b      	ldr	r3, [r3, #20]
 8007a54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a58:	2b40      	cmp	r3, #64	@ 0x40
 8007a5a:	bf0c      	ite	eq
 8007a5c:	2301      	moveq	r3, #1
 8007a5e:	2300      	movne	r3, #0
 8007a60:	b2db      	uxtb	r3, r3
 8007a62:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a6a:	f003 0308 	and.w	r3, r3, #8
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d103      	bne.n	8007a7a <HAL_UART_IRQHandler+0x17a>
 8007a72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d04f      	beq.n	8007b1a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 faa7 	bl	8007fce <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	695b      	ldr	r3, [r3, #20]
 8007a86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a8a:	2b40      	cmp	r3, #64	@ 0x40
 8007a8c:	d141      	bne.n	8007b12 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	3314      	adds	r3, #20
 8007a94:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a98:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007a9c:	e853 3f00 	ldrex	r3, [r3]
 8007aa0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007aa4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007aa8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007aac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	3314      	adds	r3, #20
 8007ab6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007aba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007abe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007ac6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007aca:	e841 2300 	strex	r3, r2, [r1]
 8007ace:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007ad2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d1d9      	bne.n	8007a8e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d013      	beq.n	8007b0a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ae6:	4a8a      	ldr	r2, [pc, #552]	@ (8007d10 <HAL_UART_IRQHandler+0x410>)
 8007ae8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007aee:	4618      	mov	r0, r3
 8007af0:	f7fb fb6e 	bl	80031d0 <HAL_DMA_Abort_IT>
 8007af4:	4603      	mov	r3, r0
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d016      	beq.n	8007b28 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007afe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b00:	687a      	ldr	r2, [r7, #4]
 8007b02:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007b04:	4610      	mov	r0, r2
 8007b06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b08:	e00e      	b.n	8007b28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 f9b6 	bl	8007e7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b10:	e00a      	b.n	8007b28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 f9b2 	bl	8007e7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b18:	e006      	b.n	8007b28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 f9ae 	bl	8007e7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2200      	movs	r2, #0
 8007b24:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007b26:	e18d      	b.n	8007e44 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b28:	bf00      	nop
    return;
 8007b2a:	e18b      	b.n	8007e44 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	f040 8167 	bne.w	8007e04 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b3a:	f003 0310 	and.w	r3, r3, #16
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	f000 8160 	beq.w	8007e04 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8007b44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b48:	f003 0310 	and.w	r3, r3, #16
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	f000 8159 	beq.w	8007e04 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007b52:	2300      	movs	r3, #0
 8007b54:	60bb      	str	r3, [r7, #8]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	60bb      	str	r3, [r7, #8]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	60bb      	str	r3, [r7, #8]
 8007b66:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	695b      	ldr	r3, [r3, #20]
 8007b6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b72:	2b40      	cmp	r3, #64	@ 0x40
 8007b74:	f040 80ce 	bne.w	8007d14 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007b84:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	f000 80a9 	beq.w	8007ce0 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007b92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007b96:	429a      	cmp	r2, r3
 8007b98:	f080 80a2 	bcs.w	8007ce0 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007ba2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ba8:	69db      	ldr	r3, [r3, #28]
 8007baa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007bae:	f000 8088 	beq.w	8007cc2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	330c      	adds	r3, #12
 8007bb8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007bc0:	e853 3f00 	ldrex	r3, [r3]
 8007bc4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007bc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007bcc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007bd0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	330c      	adds	r3, #12
 8007bda:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007bde:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007be2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007bea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007bee:	e841 2300 	strex	r3, r2, [r1]
 8007bf2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007bf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d1d9      	bne.n	8007bb2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	3314      	adds	r3, #20
 8007c04:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c06:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007c08:	e853 3f00 	ldrex	r3, [r3]
 8007c0c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007c0e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007c10:	f023 0301 	bic.w	r3, r3, #1
 8007c14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	3314      	adds	r3, #20
 8007c1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007c22:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007c26:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c28:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007c2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007c2e:	e841 2300 	strex	r3, r2, [r1]
 8007c32:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007c34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d1e1      	bne.n	8007bfe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	3314      	adds	r3, #20
 8007c40:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007c44:	e853 3f00 	ldrex	r3, [r3]
 8007c48:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007c4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	3314      	adds	r3, #20
 8007c5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007c5e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007c60:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c62:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007c64:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007c66:	e841 2300 	strex	r3, r2, [r1]
 8007c6a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007c6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d1e3      	bne.n	8007c3a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2220      	movs	r2, #32
 8007c76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	330c      	adds	r3, #12
 8007c86:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c8a:	e853 3f00 	ldrex	r3, [r3]
 8007c8e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007c90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c92:	f023 0310 	bic.w	r3, r3, #16
 8007c96:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	330c      	adds	r3, #12
 8007ca0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007ca4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007ca6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ca8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007caa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007cac:	e841 2300 	strex	r3, r2, [r1]
 8007cb0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007cb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d1e3      	bne.n	8007c80 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f7fb fa17 	bl	80030f0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2202      	movs	r2, #2
 8007cc6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	1ad3      	subs	r3, r2, r3
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	4619      	mov	r1, r3
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f000 f8d9 	bl	8007e90 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007cde:	e0b3      	b.n	8007e48 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007ce4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	f040 80ad 	bne.w	8007e48 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cf2:	69db      	ldr	r3, [r3, #28]
 8007cf4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007cf8:	f040 80a6 	bne.w	8007e48 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2202      	movs	r2, #2
 8007d00:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007d06:	4619      	mov	r1, r3
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f000 f8c1 	bl	8007e90 <HAL_UARTEx_RxEventCallback>
      return;
 8007d0e:	e09b      	b.n	8007e48 <HAL_UART_IRQHandler+0x548>
 8007d10:	08008095 	.word	0x08008095
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	1ad3      	subs	r3, r2, r3
 8007d20:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	f000 808e 	beq.w	8007e4c <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8007d30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	f000 8089 	beq.w	8007e4c <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	330c      	adds	r3, #12
 8007d40:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d44:	e853 3f00 	ldrex	r3, [r3]
 8007d48:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007d4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d50:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	330c      	adds	r3, #12
 8007d5a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007d5e:	647a      	str	r2, [r7, #68]	@ 0x44
 8007d60:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d62:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007d64:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d66:	e841 2300 	strex	r3, r2, [r1]
 8007d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007d6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d1e3      	bne.n	8007d3a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	3314      	adds	r3, #20
 8007d78:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d7c:	e853 3f00 	ldrex	r3, [r3]
 8007d80:	623b      	str	r3, [r7, #32]
   return(result);
 8007d82:	6a3b      	ldr	r3, [r7, #32]
 8007d84:	f023 0301 	bic.w	r3, r3, #1
 8007d88:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	3314      	adds	r3, #20
 8007d92:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007d96:	633a      	str	r2, [r7, #48]	@ 0x30
 8007d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d9e:	e841 2300 	strex	r3, r2, [r1]
 8007da2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d1e3      	bne.n	8007d72 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2220      	movs	r2, #32
 8007dae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2200      	movs	r2, #0
 8007db6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	330c      	adds	r3, #12
 8007dbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	e853 3f00 	ldrex	r3, [r3]
 8007dc6:	60fb      	str	r3, [r7, #12]
   return(result);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f023 0310 	bic.w	r3, r3, #16
 8007dce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	330c      	adds	r3, #12
 8007dd8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007ddc:	61fa      	str	r2, [r7, #28]
 8007dde:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de0:	69b9      	ldr	r1, [r7, #24]
 8007de2:	69fa      	ldr	r2, [r7, #28]
 8007de4:	e841 2300 	strex	r3, r2, [r1]
 8007de8:	617b      	str	r3, [r7, #20]
   return(result);
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d1e3      	bne.n	8007db8 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2202      	movs	r2, #2
 8007df4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007df6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007dfa:	4619      	mov	r1, r3
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 f847 	bl	8007e90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007e02:	e023      	b.n	8007e4c <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007e04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d009      	beq.n	8007e24 <HAL_UART_IRQHandler+0x524>
 8007e10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d003      	beq.n	8007e24 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 f94a 	bl	80080b6 <UART_Transmit_IT>
    return;
 8007e22:	e014      	b.n	8007e4e <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007e24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d00e      	beq.n	8007e4e <HAL_UART_IRQHandler+0x54e>
 8007e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d008      	beq.n	8007e4e <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f000 f98a 	bl	8008156 <UART_EndTransmit_IT>
    return;
 8007e42:	e004      	b.n	8007e4e <HAL_UART_IRQHandler+0x54e>
    return;
 8007e44:	bf00      	nop
 8007e46:	e002      	b.n	8007e4e <HAL_UART_IRQHandler+0x54e>
      return;
 8007e48:	bf00      	nop
 8007e4a:	e000      	b.n	8007e4e <HAL_UART_IRQHandler+0x54e>
      return;
 8007e4c:	bf00      	nop
  }
}
 8007e4e:	37e8      	adds	r7, #232	@ 0xe8
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b083      	sub	sp, #12
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007e5c:	bf00      	nop
 8007e5e:	370c      	adds	r7, #12
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr

08007e68 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b083      	sub	sp, #12
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007e70:	bf00      	nop
 8007e72:	370c      	adds	r7, #12
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr

08007e7c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b083      	sub	sp, #12
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007e84:	bf00      	nop
 8007e86:	370c      	adds	r7, #12
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr

08007e90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b083      	sub	sp, #12
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	460b      	mov	r3, r1
 8007e9a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007e9c:	bf00      	nop
 8007e9e:	370c      	adds	r7, #12
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr

08007ea8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b086      	sub	sp, #24
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	60f8      	str	r0, [r7, #12]
 8007eb0:	60b9      	str	r1, [r7, #8]
 8007eb2:	603b      	str	r3, [r7, #0]
 8007eb4:	4613      	mov	r3, r2
 8007eb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007eb8:	e03b      	b.n	8007f32 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007eba:	6a3b      	ldr	r3, [r7, #32]
 8007ebc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007ec0:	d037      	beq.n	8007f32 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ec2:	f7fa fa99 	bl	80023f8 <HAL_GetTick>
 8007ec6:	4602      	mov	r2, r0
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	1ad3      	subs	r3, r2, r3
 8007ecc:	6a3a      	ldr	r2, [r7, #32]
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	d302      	bcc.n	8007ed8 <UART_WaitOnFlagUntilTimeout+0x30>
 8007ed2:	6a3b      	ldr	r3, [r7, #32]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d101      	bne.n	8007edc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007ed8:	2303      	movs	r3, #3
 8007eda:	e03a      	b.n	8007f52 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	68db      	ldr	r3, [r3, #12]
 8007ee2:	f003 0304 	and.w	r3, r3, #4
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d023      	beq.n	8007f32 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	2b80      	cmp	r3, #128	@ 0x80
 8007eee:	d020      	beq.n	8007f32 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	2b40      	cmp	r3, #64	@ 0x40
 8007ef4:	d01d      	beq.n	8007f32 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f003 0308 	and.w	r3, r3, #8
 8007f00:	2b08      	cmp	r3, #8
 8007f02:	d116      	bne.n	8007f32 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007f04:	2300      	movs	r3, #0
 8007f06:	617b      	str	r3, [r7, #20]
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	617b      	str	r3, [r7, #20]
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	617b      	str	r3, [r7, #20]
 8007f18:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f1a:	68f8      	ldr	r0, [r7, #12]
 8007f1c:	f000 f857 	bl	8007fce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	2208      	movs	r2, #8
 8007f24:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	e00f      	b.n	8007f52 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	681a      	ldr	r2, [r3, #0]
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	4013      	ands	r3, r2
 8007f3c:	68ba      	ldr	r2, [r7, #8]
 8007f3e:	429a      	cmp	r2, r3
 8007f40:	bf0c      	ite	eq
 8007f42:	2301      	moveq	r3, #1
 8007f44:	2300      	movne	r3, #0
 8007f46:	b2db      	uxtb	r3, r3
 8007f48:	461a      	mov	r2, r3
 8007f4a:	79fb      	ldrb	r3, [r7, #7]
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d0b4      	beq.n	8007eba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f50:	2300      	movs	r3, #0
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3718      	adds	r7, #24
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}

08007f5a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f5a:	b480      	push	{r7}
 8007f5c:	b085      	sub	sp, #20
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	60f8      	str	r0, [r7, #12]
 8007f62:	60b9      	str	r1, [r7, #8]
 8007f64:	4613      	mov	r3, r2
 8007f66:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	68ba      	ldr	r2, [r7, #8]
 8007f6c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	88fa      	ldrh	r2, [r7, #6]
 8007f72:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	88fa      	ldrh	r2, [r7, #6]
 8007f78:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2222      	movs	r2, #34	@ 0x22
 8007f84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	691b      	ldr	r3, [r3, #16]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d007      	beq.n	8007fa0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	68da      	ldr	r2, [r3, #12]
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007f9e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	695a      	ldr	r2, [r3, #20]
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f042 0201 	orr.w	r2, r2, #1
 8007fae:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	68da      	ldr	r2, [r3, #12]
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f042 0220 	orr.w	r2, r2, #32
 8007fbe:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007fc0:	2300      	movs	r3, #0
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3714      	adds	r7, #20
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fcc:	4770      	bx	lr

08007fce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007fce:	b480      	push	{r7}
 8007fd0:	b095      	sub	sp, #84	@ 0x54
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	330c      	adds	r3, #12
 8007fdc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fe0:	e853 3f00 	ldrex	r3, [r3]
 8007fe4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fe8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007fec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	330c      	adds	r3, #12
 8007ff4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007ff6:	643a      	str	r2, [r7, #64]	@ 0x40
 8007ff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ffa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007ffc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007ffe:	e841 2300 	strex	r3, r2, [r1]
 8008002:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008006:	2b00      	cmp	r3, #0
 8008008:	d1e5      	bne.n	8007fd6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	3314      	adds	r3, #20
 8008010:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008012:	6a3b      	ldr	r3, [r7, #32]
 8008014:	e853 3f00 	ldrex	r3, [r3]
 8008018:	61fb      	str	r3, [r7, #28]
   return(result);
 800801a:	69fb      	ldr	r3, [r7, #28]
 800801c:	f023 0301 	bic.w	r3, r3, #1
 8008020:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	3314      	adds	r3, #20
 8008028:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800802a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800802c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800802e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008030:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008032:	e841 2300 	strex	r3, r2, [r1]
 8008036:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800803a:	2b00      	cmp	r3, #0
 800803c:	d1e5      	bne.n	800800a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008042:	2b01      	cmp	r3, #1
 8008044:	d119      	bne.n	800807a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	330c      	adds	r3, #12
 800804c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	e853 3f00 	ldrex	r3, [r3]
 8008054:	60bb      	str	r3, [r7, #8]
   return(result);
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	f023 0310 	bic.w	r3, r3, #16
 800805c:	647b      	str	r3, [r7, #68]	@ 0x44
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	330c      	adds	r3, #12
 8008064:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008066:	61ba      	str	r2, [r7, #24]
 8008068:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800806a:	6979      	ldr	r1, [r7, #20]
 800806c:	69ba      	ldr	r2, [r7, #24]
 800806e:	e841 2300 	strex	r3, r2, [r1]
 8008072:	613b      	str	r3, [r7, #16]
   return(result);
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d1e5      	bne.n	8008046 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2220      	movs	r2, #32
 800807e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2200      	movs	r2, #0
 8008086:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008088:	bf00      	nop
 800808a:	3754      	adds	r7, #84	@ 0x54
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr

08008094 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b084      	sub	sp, #16
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2200      	movs	r2, #0
 80080a6:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80080a8:	68f8      	ldr	r0, [r7, #12]
 80080aa:	f7ff fee7 	bl	8007e7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080ae:	bf00      	nop
 80080b0:	3710      	adds	r7, #16
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}

080080b6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80080b6:	b480      	push	{r7}
 80080b8:	b085      	sub	sp, #20
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	2b21      	cmp	r3, #33	@ 0x21
 80080c8:	d13e      	bne.n	8008148 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	689b      	ldr	r3, [r3, #8]
 80080ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080d2:	d114      	bne.n	80080fe <UART_Transmit_IT+0x48>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	691b      	ldr	r3, [r3, #16]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d110      	bne.n	80080fe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6a1b      	ldr	r3, [r3, #32]
 80080e0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	881b      	ldrh	r3, [r3, #0]
 80080e6:	461a      	mov	r2, r3
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80080f0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6a1b      	ldr	r3, [r3, #32]
 80080f6:	1c9a      	adds	r2, r3, #2
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	621a      	str	r2, [r3, #32]
 80080fc:	e008      	b.n	8008110 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6a1b      	ldr	r3, [r3, #32]
 8008102:	1c59      	adds	r1, r3, #1
 8008104:	687a      	ldr	r2, [r7, #4]
 8008106:	6211      	str	r1, [r2, #32]
 8008108:	781a      	ldrb	r2, [r3, #0]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008114:	b29b      	uxth	r3, r3
 8008116:	3b01      	subs	r3, #1
 8008118:	b29b      	uxth	r3, r3
 800811a:	687a      	ldr	r2, [r7, #4]
 800811c:	4619      	mov	r1, r3
 800811e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008120:	2b00      	cmp	r3, #0
 8008122:	d10f      	bne.n	8008144 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	68da      	ldr	r2, [r3, #12]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008132:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	68da      	ldr	r2, [r3, #12]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008142:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008144:	2300      	movs	r3, #0
 8008146:	e000      	b.n	800814a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008148:	2302      	movs	r3, #2
  }
}
 800814a:	4618      	mov	r0, r3
 800814c:	3714      	adds	r7, #20
 800814e:	46bd      	mov	sp, r7
 8008150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008154:	4770      	bx	lr

08008156 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008156:	b580      	push	{r7, lr}
 8008158:	b082      	sub	sp, #8
 800815a:	af00      	add	r7, sp, #0
 800815c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	68da      	ldr	r2, [r3, #12]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800816c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2220      	movs	r2, #32
 8008172:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f7ff fe6c 	bl	8007e54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800817c:	2300      	movs	r3, #0
}
 800817e:	4618      	mov	r0, r3
 8008180:	3708      	adds	r7, #8
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}

08008186 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008186:	b580      	push	{r7, lr}
 8008188:	b08c      	sub	sp, #48	@ 0x30
 800818a:	af00      	add	r7, sp, #0
 800818c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800818e:	2300      	movs	r3, #0
 8008190:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8008192:	2300      	movs	r3, #0
 8008194:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800819c:	b2db      	uxtb	r3, r3
 800819e:	2b22      	cmp	r3, #34	@ 0x22
 80081a0:	f040 80aa 	bne.w	80082f8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	689b      	ldr	r3, [r3, #8]
 80081a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081ac:	d115      	bne.n	80081da <UART_Receive_IT+0x54>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	691b      	ldr	r3, [r3, #16]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d111      	bne.n	80081da <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081ba:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081c8:	b29a      	uxth	r2, r3
 80081ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081d2:	1c9a      	adds	r2, r3, #2
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	629a      	str	r2, [r3, #40]	@ 0x28
 80081d8:	e024      	b.n	8008224 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081de:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	689b      	ldr	r3, [r3, #8]
 80081e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081e8:	d007      	beq.n	80081fa <UART_Receive_IT+0x74>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d10a      	bne.n	8008208 <UART_Receive_IT+0x82>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	691b      	ldr	r3, [r3, #16]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d106      	bne.n	8008208 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	b2da      	uxtb	r2, r3
 8008202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008204:	701a      	strb	r2, [r3, #0]
 8008206:	e008      	b.n	800821a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	b2db      	uxtb	r3, r3
 8008210:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008214:	b2da      	uxtb	r2, r3
 8008216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008218:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800821e:	1c5a      	adds	r2, r3, #1
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008228:	b29b      	uxth	r3, r3
 800822a:	3b01      	subs	r3, #1
 800822c:	b29b      	uxth	r3, r3
 800822e:	687a      	ldr	r2, [r7, #4]
 8008230:	4619      	mov	r1, r3
 8008232:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008234:	2b00      	cmp	r3, #0
 8008236:	d15d      	bne.n	80082f4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	68da      	ldr	r2, [r3, #12]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f022 0220 	bic.w	r2, r2, #32
 8008246:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	68da      	ldr	r2, [r3, #12]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008256:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	695a      	ldr	r2, [r3, #20]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f022 0201 	bic.w	r2, r2, #1
 8008266:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2220      	movs	r2, #32
 800826c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800827a:	2b01      	cmp	r3, #1
 800827c:	d135      	bne.n	80082ea <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2200      	movs	r2, #0
 8008282:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	330c      	adds	r3, #12
 800828a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	e853 3f00 	ldrex	r3, [r3]
 8008292:	613b      	str	r3, [r7, #16]
   return(result);
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	f023 0310 	bic.w	r3, r3, #16
 800829a:	627b      	str	r3, [r7, #36]	@ 0x24
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	330c      	adds	r3, #12
 80082a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082a4:	623a      	str	r2, [r7, #32]
 80082a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a8:	69f9      	ldr	r1, [r7, #28]
 80082aa:	6a3a      	ldr	r2, [r7, #32]
 80082ac:	e841 2300 	strex	r3, r2, [r1]
 80082b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80082b2:	69bb      	ldr	r3, [r7, #24]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d1e5      	bne.n	8008284 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f003 0310 	and.w	r3, r3, #16
 80082c2:	2b10      	cmp	r3, #16
 80082c4:	d10a      	bne.n	80082dc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80082c6:	2300      	movs	r3, #0
 80082c8:	60fb      	str	r3, [r7, #12]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	60fb      	str	r3, [r7, #12]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	60fb      	str	r3, [r7, #12]
 80082da:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80082e0:	4619      	mov	r1, r3
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f7ff fdd4 	bl	8007e90 <HAL_UARTEx_RxEventCallback>
 80082e8:	e002      	b.n	80082f0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f7ff fdbc 	bl	8007e68 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80082f0:	2300      	movs	r3, #0
 80082f2:	e002      	b.n	80082fa <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80082f4:	2300      	movs	r3, #0
 80082f6:	e000      	b.n	80082fa <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80082f8:	2302      	movs	r3, #2
  }
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3730      	adds	r7, #48	@ 0x30
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}
	...

08008304 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008304:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008308:	b0c0      	sub	sp, #256	@ 0x100
 800830a:	af00      	add	r7, sp, #0
 800830c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	691b      	ldr	r3, [r3, #16]
 8008318:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800831c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008320:	68d9      	ldr	r1, [r3, #12]
 8008322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008326:	681a      	ldr	r2, [r3, #0]
 8008328:	ea40 0301 	orr.w	r3, r0, r1
 800832c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800832e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008332:	689a      	ldr	r2, [r3, #8]
 8008334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008338:	691b      	ldr	r3, [r3, #16]
 800833a:	431a      	orrs	r2, r3
 800833c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008340:	695b      	ldr	r3, [r3, #20]
 8008342:	431a      	orrs	r2, r3
 8008344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008348:	69db      	ldr	r3, [r3, #28]
 800834a:	4313      	orrs	r3, r2
 800834c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	68db      	ldr	r3, [r3, #12]
 8008358:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800835c:	f021 010c 	bic.w	r1, r1, #12
 8008360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008364:	681a      	ldr	r2, [r3, #0]
 8008366:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800836a:	430b      	orrs	r3, r1
 800836c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800836e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	695b      	ldr	r3, [r3, #20]
 8008376:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800837a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800837e:	6999      	ldr	r1, [r3, #24]
 8008380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008384:	681a      	ldr	r2, [r3, #0]
 8008386:	ea40 0301 	orr.w	r3, r0, r1
 800838a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800838c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008390:	681a      	ldr	r2, [r3, #0]
 8008392:	4b8f      	ldr	r3, [pc, #572]	@ (80085d0 <UART_SetConfig+0x2cc>)
 8008394:	429a      	cmp	r2, r3
 8008396:	d005      	beq.n	80083a4 <UART_SetConfig+0xa0>
 8008398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800839c:	681a      	ldr	r2, [r3, #0]
 800839e:	4b8d      	ldr	r3, [pc, #564]	@ (80085d4 <UART_SetConfig+0x2d0>)
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d104      	bne.n	80083ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80083a4:	f7fe fa82 	bl	80068ac <HAL_RCC_GetPCLK2Freq>
 80083a8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80083ac:	e003      	b.n	80083b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80083ae:	f7fe fa69 	bl	8006884 <HAL_RCC_GetPCLK1Freq>
 80083b2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80083b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083ba:	69db      	ldr	r3, [r3, #28]
 80083bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80083c0:	f040 810c 	bne.w	80085dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80083c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80083c8:	2200      	movs	r2, #0
 80083ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80083ce:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80083d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80083d6:	4622      	mov	r2, r4
 80083d8:	462b      	mov	r3, r5
 80083da:	1891      	adds	r1, r2, r2
 80083dc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80083de:	415b      	adcs	r3, r3
 80083e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80083e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80083e6:	4621      	mov	r1, r4
 80083e8:	eb12 0801 	adds.w	r8, r2, r1
 80083ec:	4629      	mov	r1, r5
 80083ee:	eb43 0901 	adc.w	r9, r3, r1
 80083f2:	f04f 0200 	mov.w	r2, #0
 80083f6:	f04f 0300 	mov.w	r3, #0
 80083fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80083fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008402:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008406:	4690      	mov	r8, r2
 8008408:	4699      	mov	r9, r3
 800840a:	4623      	mov	r3, r4
 800840c:	eb18 0303 	adds.w	r3, r8, r3
 8008410:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008414:	462b      	mov	r3, r5
 8008416:	eb49 0303 	adc.w	r3, r9, r3
 800841a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800841e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008422:	685b      	ldr	r3, [r3, #4]
 8008424:	2200      	movs	r2, #0
 8008426:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800842a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800842e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008432:	460b      	mov	r3, r1
 8008434:	18db      	adds	r3, r3, r3
 8008436:	653b      	str	r3, [r7, #80]	@ 0x50
 8008438:	4613      	mov	r3, r2
 800843a:	eb42 0303 	adc.w	r3, r2, r3
 800843e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008440:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008444:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008448:	f7f7 ff1a 	bl	8000280 <__aeabi_uldivmod>
 800844c:	4602      	mov	r2, r0
 800844e:	460b      	mov	r3, r1
 8008450:	4b61      	ldr	r3, [pc, #388]	@ (80085d8 <UART_SetConfig+0x2d4>)
 8008452:	fba3 2302 	umull	r2, r3, r3, r2
 8008456:	095b      	lsrs	r3, r3, #5
 8008458:	011c      	lsls	r4, r3, #4
 800845a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800845e:	2200      	movs	r2, #0
 8008460:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008464:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008468:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800846c:	4642      	mov	r2, r8
 800846e:	464b      	mov	r3, r9
 8008470:	1891      	adds	r1, r2, r2
 8008472:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008474:	415b      	adcs	r3, r3
 8008476:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008478:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800847c:	4641      	mov	r1, r8
 800847e:	eb12 0a01 	adds.w	sl, r2, r1
 8008482:	4649      	mov	r1, r9
 8008484:	eb43 0b01 	adc.w	fp, r3, r1
 8008488:	f04f 0200 	mov.w	r2, #0
 800848c:	f04f 0300 	mov.w	r3, #0
 8008490:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008494:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008498:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800849c:	4692      	mov	sl, r2
 800849e:	469b      	mov	fp, r3
 80084a0:	4643      	mov	r3, r8
 80084a2:	eb1a 0303 	adds.w	r3, sl, r3
 80084a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80084aa:	464b      	mov	r3, r9
 80084ac:	eb4b 0303 	adc.w	r3, fp, r3
 80084b0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80084b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	2200      	movs	r2, #0
 80084bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80084c0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80084c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80084c8:	460b      	mov	r3, r1
 80084ca:	18db      	adds	r3, r3, r3
 80084cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80084ce:	4613      	mov	r3, r2
 80084d0:	eb42 0303 	adc.w	r3, r2, r3
 80084d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80084d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80084da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80084de:	f7f7 fecf 	bl	8000280 <__aeabi_uldivmod>
 80084e2:	4602      	mov	r2, r0
 80084e4:	460b      	mov	r3, r1
 80084e6:	4611      	mov	r1, r2
 80084e8:	4b3b      	ldr	r3, [pc, #236]	@ (80085d8 <UART_SetConfig+0x2d4>)
 80084ea:	fba3 2301 	umull	r2, r3, r3, r1
 80084ee:	095b      	lsrs	r3, r3, #5
 80084f0:	2264      	movs	r2, #100	@ 0x64
 80084f2:	fb02 f303 	mul.w	r3, r2, r3
 80084f6:	1acb      	subs	r3, r1, r3
 80084f8:	00db      	lsls	r3, r3, #3
 80084fa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80084fe:	4b36      	ldr	r3, [pc, #216]	@ (80085d8 <UART_SetConfig+0x2d4>)
 8008500:	fba3 2302 	umull	r2, r3, r3, r2
 8008504:	095b      	lsrs	r3, r3, #5
 8008506:	005b      	lsls	r3, r3, #1
 8008508:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800850c:	441c      	add	r4, r3
 800850e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008512:	2200      	movs	r2, #0
 8008514:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008518:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800851c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008520:	4642      	mov	r2, r8
 8008522:	464b      	mov	r3, r9
 8008524:	1891      	adds	r1, r2, r2
 8008526:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008528:	415b      	adcs	r3, r3
 800852a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800852c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008530:	4641      	mov	r1, r8
 8008532:	1851      	adds	r1, r2, r1
 8008534:	6339      	str	r1, [r7, #48]	@ 0x30
 8008536:	4649      	mov	r1, r9
 8008538:	414b      	adcs	r3, r1
 800853a:	637b      	str	r3, [r7, #52]	@ 0x34
 800853c:	f04f 0200 	mov.w	r2, #0
 8008540:	f04f 0300 	mov.w	r3, #0
 8008544:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008548:	4659      	mov	r1, fp
 800854a:	00cb      	lsls	r3, r1, #3
 800854c:	4651      	mov	r1, sl
 800854e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008552:	4651      	mov	r1, sl
 8008554:	00ca      	lsls	r2, r1, #3
 8008556:	4610      	mov	r0, r2
 8008558:	4619      	mov	r1, r3
 800855a:	4603      	mov	r3, r0
 800855c:	4642      	mov	r2, r8
 800855e:	189b      	adds	r3, r3, r2
 8008560:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008564:	464b      	mov	r3, r9
 8008566:	460a      	mov	r2, r1
 8008568:	eb42 0303 	adc.w	r3, r2, r3
 800856c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	2200      	movs	r2, #0
 8008578:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800857c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008580:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008584:	460b      	mov	r3, r1
 8008586:	18db      	adds	r3, r3, r3
 8008588:	62bb      	str	r3, [r7, #40]	@ 0x28
 800858a:	4613      	mov	r3, r2
 800858c:	eb42 0303 	adc.w	r3, r2, r3
 8008590:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008592:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008596:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800859a:	f7f7 fe71 	bl	8000280 <__aeabi_uldivmod>
 800859e:	4602      	mov	r2, r0
 80085a0:	460b      	mov	r3, r1
 80085a2:	4b0d      	ldr	r3, [pc, #52]	@ (80085d8 <UART_SetConfig+0x2d4>)
 80085a4:	fba3 1302 	umull	r1, r3, r3, r2
 80085a8:	095b      	lsrs	r3, r3, #5
 80085aa:	2164      	movs	r1, #100	@ 0x64
 80085ac:	fb01 f303 	mul.w	r3, r1, r3
 80085b0:	1ad3      	subs	r3, r2, r3
 80085b2:	00db      	lsls	r3, r3, #3
 80085b4:	3332      	adds	r3, #50	@ 0x32
 80085b6:	4a08      	ldr	r2, [pc, #32]	@ (80085d8 <UART_SetConfig+0x2d4>)
 80085b8:	fba2 2303 	umull	r2, r3, r2, r3
 80085bc:	095b      	lsrs	r3, r3, #5
 80085be:	f003 0207 	and.w	r2, r3, #7
 80085c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4422      	add	r2, r4
 80085ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80085cc:	e106      	b.n	80087dc <UART_SetConfig+0x4d8>
 80085ce:	bf00      	nop
 80085d0:	40011000 	.word	0x40011000
 80085d4:	40011400 	.word	0x40011400
 80085d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80085dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80085e0:	2200      	movs	r2, #0
 80085e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80085e6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80085ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80085ee:	4642      	mov	r2, r8
 80085f0:	464b      	mov	r3, r9
 80085f2:	1891      	adds	r1, r2, r2
 80085f4:	6239      	str	r1, [r7, #32]
 80085f6:	415b      	adcs	r3, r3
 80085f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80085fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80085fe:	4641      	mov	r1, r8
 8008600:	1854      	adds	r4, r2, r1
 8008602:	4649      	mov	r1, r9
 8008604:	eb43 0501 	adc.w	r5, r3, r1
 8008608:	f04f 0200 	mov.w	r2, #0
 800860c:	f04f 0300 	mov.w	r3, #0
 8008610:	00eb      	lsls	r3, r5, #3
 8008612:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008616:	00e2      	lsls	r2, r4, #3
 8008618:	4614      	mov	r4, r2
 800861a:	461d      	mov	r5, r3
 800861c:	4643      	mov	r3, r8
 800861e:	18e3      	adds	r3, r4, r3
 8008620:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008624:	464b      	mov	r3, r9
 8008626:	eb45 0303 	adc.w	r3, r5, r3
 800862a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800862e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008632:	685b      	ldr	r3, [r3, #4]
 8008634:	2200      	movs	r2, #0
 8008636:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800863a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800863e:	f04f 0200 	mov.w	r2, #0
 8008642:	f04f 0300 	mov.w	r3, #0
 8008646:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800864a:	4629      	mov	r1, r5
 800864c:	008b      	lsls	r3, r1, #2
 800864e:	4621      	mov	r1, r4
 8008650:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008654:	4621      	mov	r1, r4
 8008656:	008a      	lsls	r2, r1, #2
 8008658:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800865c:	f7f7 fe10 	bl	8000280 <__aeabi_uldivmod>
 8008660:	4602      	mov	r2, r0
 8008662:	460b      	mov	r3, r1
 8008664:	4b60      	ldr	r3, [pc, #384]	@ (80087e8 <UART_SetConfig+0x4e4>)
 8008666:	fba3 2302 	umull	r2, r3, r3, r2
 800866a:	095b      	lsrs	r3, r3, #5
 800866c:	011c      	lsls	r4, r3, #4
 800866e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008672:	2200      	movs	r2, #0
 8008674:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008678:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800867c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008680:	4642      	mov	r2, r8
 8008682:	464b      	mov	r3, r9
 8008684:	1891      	adds	r1, r2, r2
 8008686:	61b9      	str	r1, [r7, #24]
 8008688:	415b      	adcs	r3, r3
 800868a:	61fb      	str	r3, [r7, #28]
 800868c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008690:	4641      	mov	r1, r8
 8008692:	1851      	adds	r1, r2, r1
 8008694:	6139      	str	r1, [r7, #16]
 8008696:	4649      	mov	r1, r9
 8008698:	414b      	adcs	r3, r1
 800869a:	617b      	str	r3, [r7, #20]
 800869c:	f04f 0200 	mov.w	r2, #0
 80086a0:	f04f 0300 	mov.w	r3, #0
 80086a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80086a8:	4659      	mov	r1, fp
 80086aa:	00cb      	lsls	r3, r1, #3
 80086ac:	4651      	mov	r1, sl
 80086ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80086b2:	4651      	mov	r1, sl
 80086b4:	00ca      	lsls	r2, r1, #3
 80086b6:	4610      	mov	r0, r2
 80086b8:	4619      	mov	r1, r3
 80086ba:	4603      	mov	r3, r0
 80086bc:	4642      	mov	r2, r8
 80086be:	189b      	adds	r3, r3, r2
 80086c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80086c4:	464b      	mov	r3, r9
 80086c6:	460a      	mov	r2, r1
 80086c8:	eb42 0303 	adc.w	r3, r2, r3
 80086cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80086d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	2200      	movs	r2, #0
 80086d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80086da:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80086dc:	f04f 0200 	mov.w	r2, #0
 80086e0:	f04f 0300 	mov.w	r3, #0
 80086e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80086e8:	4649      	mov	r1, r9
 80086ea:	008b      	lsls	r3, r1, #2
 80086ec:	4641      	mov	r1, r8
 80086ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80086f2:	4641      	mov	r1, r8
 80086f4:	008a      	lsls	r2, r1, #2
 80086f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80086fa:	f7f7 fdc1 	bl	8000280 <__aeabi_uldivmod>
 80086fe:	4602      	mov	r2, r0
 8008700:	460b      	mov	r3, r1
 8008702:	4611      	mov	r1, r2
 8008704:	4b38      	ldr	r3, [pc, #224]	@ (80087e8 <UART_SetConfig+0x4e4>)
 8008706:	fba3 2301 	umull	r2, r3, r3, r1
 800870a:	095b      	lsrs	r3, r3, #5
 800870c:	2264      	movs	r2, #100	@ 0x64
 800870e:	fb02 f303 	mul.w	r3, r2, r3
 8008712:	1acb      	subs	r3, r1, r3
 8008714:	011b      	lsls	r3, r3, #4
 8008716:	3332      	adds	r3, #50	@ 0x32
 8008718:	4a33      	ldr	r2, [pc, #204]	@ (80087e8 <UART_SetConfig+0x4e4>)
 800871a:	fba2 2303 	umull	r2, r3, r2, r3
 800871e:	095b      	lsrs	r3, r3, #5
 8008720:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008724:	441c      	add	r4, r3
 8008726:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800872a:	2200      	movs	r2, #0
 800872c:	673b      	str	r3, [r7, #112]	@ 0x70
 800872e:	677a      	str	r2, [r7, #116]	@ 0x74
 8008730:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008734:	4642      	mov	r2, r8
 8008736:	464b      	mov	r3, r9
 8008738:	1891      	adds	r1, r2, r2
 800873a:	60b9      	str	r1, [r7, #8]
 800873c:	415b      	adcs	r3, r3
 800873e:	60fb      	str	r3, [r7, #12]
 8008740:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008744:	4641      	mov	r1, r8
 8008746:	1851      	adds	r1, r2, r1
 8008748:	6039      	str	r1, [r7, #0]
 800874a:	4649      	mov	r1, r9
 800874c:	414b      	adcs	r3, r1
 800874e:	607b      	str	r3, [r7, #4]
 8008750:	f04f 0200 	mov.w	r2, #0
 8008754:	f04f 0300 	mov.w	r3, #0
 8008758:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800875c:	4659      	mov	r1, fp
 800875e:	00cb      	lsls	r3, r1, #3
 8008760:	4651      	mov	r1, sl
 8008762:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008766:	4651      	mov	r1, sl
 8008768:	00ca      	lsls	r2, r1, #3
 800876a:	4610      	mov	r0, r2
 800876c:	4619      	mov	r1, r3
 800876e:	4603      	mov	r3, r0
 8008770:	4642      	mov	r2, r8
 8008772:	189b      	adds	r3, r3, r2
 8008774:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008776:	464b      	mov	r3, r9
 8008778:	460a      	mov	r2, r1
 800877a:	eb42 0303 	adc.w	r3, r2, r3
 800877e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	2200      	movs	r2, #0
 8008788:	663b      	str	r3, [r7, #96]	@ 0x60
 800878a:	667a      	str	r2, [r7, #100]	@ 0x64
 800878c:	f04f 0200 	mov.w	r2, #0
 8008790:	f04f 0300 	mov.w	r3, #0
 8008794:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008798:	4649      	mov	r1, r9
 800879a:	008b      	lsls	r3, r1, #2
 800879c:	4641      	mov	r1, r8
 800879e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80087a2:	4641      	mov	r1, r8
 80087a4:	008a      	lsls	r2, r1, #2
 80087a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80087aa:	f7f7 fd69 	bl	8000280 <__aeabi_uldivmod>
 80087ae:	4602      	mov	r2, r0
 80087b0:	460b      	mov	r3, r1
 80087b2:	4b0d      	ldr	r3, [pc, #52]	@ (80087e8 <UART_SetConfig+0x4e4>)
 80087b4:	fba3 1302 	umull	r1, r3, r3, r2
 80087b8:	095b      	lsrs	r3, r3, #5
 80087ba:	2164      	movs	r1, #100	@ 0x64
 80087bc:	fb01 f303 	mul.w	r3, r1, r3
 80087c0:	1ad3      	subs	r3, r2, r3
 80087c2:	011b      	lsls	r3, r3, #4
 80087c4:	3332      	adds	r3, #50	@ 0x32
 80087c6:	4a08      	ldr	r2, [pc, #32]	@ (80087e8 <UART_SetConfig+0x4e4>)
 80087c8:	fba2 2303 	umull	r2, r3, r2, r3
 80087cc:	095b      	lsrs	r3, r3, #5
 80087ce:	f003 020f 	and.w	r2, r3, #15
 80087d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4422      	add	r2, r4
 80087da:	609a      	str	r2, [r3, #8]
}
 80087dc:	bf00      	nop
 80087de:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80087e2:	46bd      	mov	sp, r7
 80087e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80087e8:	51eb851f 	.word	0x51eb851f

080087ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80087ec:	b084      	sub	sp, #16
 80087ee:	b580      	push	{r7, lr}
 80087f0:	b084      	sub	sp, #16
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	6078      	str	r0, [r7, #4]
 80087f6:	f107 001c 	add.w	r0, r7, #28
 80087fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80087fe:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008802:	2b01      	cmp	r3, #1
 8008804:	d123      	bne.n	800884e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800880a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	68db      	ldr	r3, [r3, #12]
 8008816:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800881a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800881e:	687a      	ldr	r2, [r7, #4]
 8008820:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	68db      	ldr	r3, [r3, #12]
 8008826:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800882e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008832:	2b01      	cmp	r3, #1
 8008834:	d105      	bne.n	8008842 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	68db      	ldr	r3, [r3, #12]
 800883a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 f9dc 	bl	8008c00 <USB_CoreReset>
 8008848:	4603      	mov	r3, r0
 800884a:	73fb      	strb	r3, [r7, #15]
 800884c:	e01b      	b.n	8008886 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	68db      	ldr	r3, [r3, #12]
 8008852:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f000 f9d0 	bl	8008c00 <USB_CoreReset>
 8008860:	4603      	mov	r3, r0
 8008862:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008864:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008868:	2b00      	cmp	r3, #0
 800886a:	d106      	bne.n	800887a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008870:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	639a      	str	r2, [r3, #56]	@ 0x38
 8008878:	e005      	b.n	8008886 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800887e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008886:	7fbb      	ldrb	r3, [r7, #30]
 8008888:	2b01      	cmp	r3, #1
 800888a:	d10b      	bne.n	80088a4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	689b      	ldr	r3, [r3, #8]
 8008890:	f043 0206 	orr.w	r2, r3, #6
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	689b      	ldr	r3, [r3, #8]
 800889c:	f043 0220 	orr.w	r2, r3, #32
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80088a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3710      	adds	r7, #16
 80088aa:	46bd      	mov	sp, r7
 80088ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80088b0:	b004      	add	sp, #16
 80088b2:	4770      	bx	lr

080088b4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b083      	sub	sp, #12
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	689b      	ldr	r3, [r3, #8]
 80088c0:	f043 0201 	orr.w	r2, r3, #1
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80088c8:	2300      	movs	r3, #0
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	370c      	adds	r7, #12
 80088ce:	46bd      	mov	sp, r7
 80088d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d4:	4770      	bx	lr

080088d6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80088d6:	b480      	push	{r7}
 80088d8:	b083      	sub	sp, #12
 80088da:	af00      	add	r7, sp, #0
 80088dc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	689b      	ldr	r3, [r3, #8]
 80088e2:	f023 0201 	bic.w	r2, r3, #1
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80088ea:	2300      	movs	r3, #0
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	370c      	adds	r7, #12
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr

080088f8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b084      	sub	sp, #16
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	460b      	mov	r3, r1
 8008902:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008904:	2300      	movs	r3, #0
 8008906:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	68db      	ldr	r3, [r3, #12]
 800890c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008914:	78fb      	ldrb	r3, [r7, #3]
 8008916:	2b01      	cmp	r3, #1
 8008918:	d115      	bne.n	8008946 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	68db      	ldr	r3, [r3, #12]
 800891e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008926:	200a      	movs	r0, #10
 8008928:	f7f9 fd72 	bl	8002410 <HAL_Delay>
      ms += 10U;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	330a      	adds	r3, #10
 8008930:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f000 f956 	bl	8008be4 <USB_GetMode>
 8008938:	4603      	mov	r3, r0
 800893a:	2b01      	cmp	r3, #1
 800893c:	d01e      	beq.n	800897c <USB_SetCurrentMode+0x84>
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2bc7      	cmp	r3, #199	@ 0xc7
 8008942:	d9f0      	bls.n	8008926 <USB_SetCurrentMode+0x2e>
 8008944:	e01a      	b.n	800897c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008946:	78fb      	ldrb	r3, [r7, #3]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d115      	bne.n	8008978 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	68db      	ldr	r3, [r3, #12]
 8008950:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008958:	200a      	movs	r0, #10
 800895a:	f7f9 fd59 	bl	8002410 <HAL_Delay>
      ms += 10U;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	330a      	adds	r3, #10
 8008962:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f000 f93d 	bl	8008be4 <USB_GetMode>
 800896a:	4603      	mov	r3, r0
 800896c:	2b00      	cmp	r3, #0
 800896e:	d005      	beq.n	800897c <USB_SetCurrentMode+0x84>
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2bc7      	cmp	r3, #199	@ 0xc7
 8008974:	d9f0      	bls.n	8008958 <USB_SetCurrentMode+0x60>
 8008976:	e001      	b.n	800897c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008978:	2301      	movs	r3, #1
 800897a:	e005      	b.n	8008988 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2bc8      	cmp	r3, #200	@ 0xc8
 8008980:	d101      	bne.n	8008986 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008982:	2301      	movs	r3, #1
 8008984:	e000      	b.n	8008988 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008986:	2300      	movs	r3, #0
}
 8008988:	4618      	mov	r0, r3
 800898a:	3710      	adds	r7, #16
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}

08008990 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008990:	b480      	push	{r7}
 8008992:	b085      	sub	sp, #20
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800899a:	2300      	movs	r3, #0
 800899c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	3301      	adds	r3, #1
 80089a2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80089aa:	d901      	bls.n	80089b0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80089ac:	2303      	movs	r3, #3
 80089ae:	e01b      	b.n	80089e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	691b      	ldr	r3, [r3, #16]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	daf2      	bge.n	800899e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80089b8:	2300      	movs	r3, #0
 80089ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	019b      	lsls	r3, r3, #6
 80089c0:	f043 0220 	orr.w	r2, r3, #32
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	3301      	adds	r3, #1
 80089cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80089d4:	d901      	bls.n	80089da <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80089d6:	2303      	movs	r3, #3
 80089d8:	e006      	b.n	80089e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	691b      	ldr	r3, [r3, #16]
 80089de:	f003 0320 	and.w	r3, r3, #32
 80089e2:	2b20      	cmp	r3, #32
 80089e4:	d0f0      	beq.n	80089c8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80089e6:	2300      	movs	r3, #0
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	3714      	adds	r7, #20
 80089ec:	46bd      	mov	sp, r7
 80089ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f2:	4770      	bx	lr

080089f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b085      	sub	sp, #20
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80089fc:	2300      	movs	r3, #0
 80089fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	3301      	adds	r3, #1
 8008a04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008a0c:	d901      	bls.n	8008a12 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008a0e:	2303      	movs	r3, #3
 8008a10:	e018      	b.n	8008a44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	691b      	ldr	r3, [r3, #16]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	daf2      	bge.n	8008a00 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2210      	movs	r2, #16
 8008a22:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	3301      	adds	r3, #1
 8008a28:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008a30:	d901      	bls.n	8008a36 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008a32:	2303      	movs	r3, #3
 8008a34:	e006      	b.n	8008a44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	691b      	ldr	r3, [r3, #16]
 8008a3a:	f003 0310 	and.w	r3, r3, #16
 8008a3e:	2b10      	cmp	r3, #16
 8008a40:	d0f0      	beq.n	8008a24 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008a42:	2300      	movs	r3, #0
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3714      	adds	r7, #20
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr

08008a50 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b089      	sub	sp, #36	@ 0x24
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	60f8      	str	r0, [r7, #12]
 8008a58:	60b9      	str	r1, [r7, #8]
 8008a5a:	4611      	mov	r1, r2
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	460b      	mov	r3, r1
 8008a60:	71fb      	strb	r3, [r7, #7]
 8008a62:	4613      	mov	r3, r2
 8008a64:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008a6e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d123      	bne.n	8008abe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008a76:	88bb      	ldrh	r3, [r7, #4]
 8008a78:	3303      	adds	r3, #3
 8008a7a:	089b      	lsrs	r3, r3, #2
 8008a7c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008a7e:	2300      	movs	r3, #0
 8008a80:	61bb      	str	r3, [r7, #24]
 8008a82:	e018      	b.n	8008ab6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008a84:	79fb      	ldrb	r3, [r7, #7]
 8008a86:	031a      	lsls	r2, r3, #12
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	4413      	add	r3, r2
 8008a8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008a90:	461a      	mov	r2, r3
 8008a92:	69fb      	ldr	r3, [r7, #28]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008a98:	69fb      	ldr	r3, [r7, #28]
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008a9e:	69fb      	ldr	r3, [r7, #28]
 8008aa0:	3301      	adds	r3, #1
 8008aa2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008aa4:	69fb      	ldr	r3, [r7, #28]
 8008aa6:	3301      	adds	r3, #1
 8008aa8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008aaa:	69fb      	ldr	r3, [r7, #28]
 8008aac:	3301      	adds	r3, #1
 8008aae:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008ab0:	69bb      	ldr	r3, [r7, #24]
 8008ab2:	3301      	adds	r3, #1
 8008ab4:	61bb      	str	r3, [r7, #24]
 8008ab6:	69ba      	ldr	r2, [r7, #24]
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d3e2      	bcc.n	8008a84 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008abe:	2300      	movs	r3, #0
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3724      	adds	r7, #36	@ 0x24
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aca:	4770      	bx	lr

08008acc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b08b      	sub	sp, #44	@ 0x2c
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	60f8      	str	r0, [r7, #12]
 8008ad4:	60b9      	str	r1, [r7, #8]
 8008ad6:	4613      	mov	r3, r2
 8008ad8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008ae2:	88fb      	ldrh	r3, [r7, #6]
 8008ae4:	089b      	lsrs	r3, r3, #2
 8008ae6:	b29b      	uxth	r3, r3
 8008ae8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008aea:	88fb      	ldrh	r3, [r7, #6]
 8008aec:	f003 0303 	and.w	r3, r3, #3
 8008af0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008af2:	2300      	movs	r3, #0
 8008af4:	623b      	str	r3, [r7, #32]
 8008af6:	e014      	b.n	8008b22 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008af8:	69bb      	ldr	r3, [r7, #24]
 8008afa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008afe:	681a      	ldr	r2, [r3, #0]
 8008b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b02:	601a      	str	r2, [r3, #0]
    pDest++;
 8008b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b06:	3301      	adds	r3, #1
 8008b08:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b0c:	3301      	adds	r3, #1
 8008b0e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b12:	3301      	adds	r3, #1
 8008b14:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b18:	3301      	adds	r3, #1
 8008b1a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008b1c:	6a3b      	ldr	r3, [r7, #32]
 8008b1e:	3301      	adds	r3, #1
 8008b20:	623b      	str	r3, [r7, #32]
 8008b22:	6a3a      	ldr	r2, [r7, #32]
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	429a      	cmp	r2, r3
 8008b28:	d3e6      	bcc.n	8008af8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008b2a:	8bfb      	ldrh	r3, [r7, #30]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d01e      	beq.n	8008b6e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008b30:	2300      	movs	r3, #0
 8008b32:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008b34:	69bb      	ldr	r3, [r7, #24]
 8008b36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	f107 0310 	add.w	r3, r7, #16
 8008b40:	6812      	ldr	r2, [r2, #0]
 8008b42:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008b44:	693a      	ldr	r2, [r7, #16]
 8008b46:	6a3b      	ldr	r3, [r7, #32]
 8008b48:	b2db      	uxtb	r3, r3
 8008b4a:	00db      	lsls	r3, r3, #3
 8008b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8008b50:	b2da      	uxtb	r2, r3
 8008b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b54:	701a      	strb	r2, [r3, #0]
      i++;
 8008b56:	6a3b      	ldr	r3, [r7, #32]
 8008b58:	3301      	adds	r3, #1
 8008b5a:	623b      	str	r3, [r7, #32]
      pDest++;
 8008b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b5e:	3301      	adds	r3, #1
 8008b60:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008b62:	8bfb      	ldrh	r3, [r7, #30]
 8008b64:	3b01      	subs	r3, #1
 8008b66:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008b68:	8bfb      	ldrh	r3, [r7, #30]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d1ea      	bne.n	8008b44 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	372c      	adds	r7, #44	@ 0x2c
 8008b74:	46bd      	mov	sp, r7
 8008b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7a:	4770      	bx	lr

08008b7c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b085      	sub	sp, #20
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	695b      	ldr	r3, [r3, #20]
 8008b88:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	699b      	ldr	r3, [r3, #24]
 8008b8e:	68fa      	ldr	r2, [r7, #12]
 8008b90:	4013      	ands	r3, r2
 8008b92:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008b94:	68fb      	ldr	r3, [r7, #12]
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3714      	adds	r7, #20
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba0:	4770      	bx	lr

08008ba2 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8008ba2:	b480      	push	{r7}
 8008ba4:	b085      	sub	sp, #20
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	6078      	str	r0, [r7, #4]
 8008baa:	460b      	mov	r3, r1
 8008bac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8008bb2:	78fb      	ldrb	r3, [r7, #3]
 8008bb4:	015a      	lsls	r2, r3, #5
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	4413      	add	r3, r2
 8008bba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bbe:	689b      	ldr	r3, [r3, #8]
 8008bc0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8008bc2:	78fb      	ldrb	r3, [r7, #3]
 8008bc4:	015a      	lsls	r2, r3, #5
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	4413      	add	r3, r2
 8008bca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bce:	68db      	ldr	r3, [r3, #12]
 8008bd0:	68ba      	ldr	r2, [r7, #8]
 8008bd2:	4013      	ands	r3, r2
 8008bd4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008bd6:	68bb      	ldr	r3, [r7, #8]
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3714      	adds	r7, #20
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr

08008be4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b083      	sub	sp, #12
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	695b      	ldr	r3, [r3, #20]
 8008bf0:	f003 0301 	and.w	r3, r3, #1
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	370c      	adds	r7, #12
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr

08008c00 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b085      	sub	sp, #20
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	3301      	adds	r3, #1
 8008c10:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008c18:	d901      	bls.n	8008c1e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008c1a:	2303      	movs	r3, #3
 8008c1c:	e022      	b.n	8008c64 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	691b      	ldr	r3, [r3, #16]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	daf2      	bge.n	8008c0c <USB_CoreReset+0xc>

  count = 10U;
 8008c26:	230a      	movs	r3, #10
 8008c28:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8008c2a:	e002      	b.n	8008c32 <USB_CoreReset+0x32>
  {
    count--;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	3b01      	subs	r3, #1
 8008c30:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d1f9      	bne.n	8008c2c <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	691b      	ldr	r3, [r3, #16]
 8008c3c:	f043 0201 	orr.w	r2, r3, #1
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	3301      	adds	r3, #1
 8008c48:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008c50:	d901      	bls.n	8008c56 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8008c52:	2303      	movs	r3, #3
 8008c54:	e006      	b.n	8008c64 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	691b      	ldr	r3, [r3, #16]
 8008c5a:	f003 0301 	and.w	r3, r3, #1
 8008c5e:	2b01      	cmp	r3, #1
 8008c60:	d0f0      	beq.n	8008c44 <USB_CoreReset+0x44>

  return HAL_OK;
 8008c62:	2300      	movs	r3, #0
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3714      	adds	r7, #20
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr

08008c70 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008c70:	b084      	sub	sp, #16
 8008c72:	b580      	push	{r7, lr}
 8008c74:	b086      	sub	sp, #24
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	6078      	str	r0, [r7, #4]
 8008c7a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008c7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008c82:	2300      	movs	r3, #0
 8008c84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008c90:	461a      	mov	r2, r3
 8008c92:	2300      	movs	r3, #0
 8008c94:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c9a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ca6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cb2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	68db      	ldr	r3, [r3, #12]
 8008cbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d119      	bne.n	8008cfa <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008cc6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008cca:	2b01      	cmp	r3, #1
 8008ccc:	d10a      	bne.n	8008ce4 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	68fa      	ldr	r2, [r7, #12]
 8008cd8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008cdc:	f043 0304 	orr.w	r3, r3, #4
 8008ce0:	6013      	str	r3, [r2, #0]
 8008ce2:	e014      	b.n	8008d0e <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	68fa      	ldr	r2, [r7, #12]
 8008cee:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008cf2:	f023 0304 	bic.w	r3, r3, #4
 8008cf6:	6013      	str	r3, [r2, #0]
 8008cf8:	e009      	b.n	8008d0e <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	68fa      	ldr	r2, [r7, #12]
 8008d04:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008d08:	f023 0304 	bic.w	r3, r3, #4
 8008d0c:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008d0e:	2110      	movs	r1, #16
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f7ff fe3d 	bl	8008990 <USB_FlushTxFifo>
 8008d16:	4603      	mov	r3, r0
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d001      	beq.n	8008d20 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f7ff fe67 	bl	80089f4 <USB_FlushRxFifo>
 8008d26:	4603      	mov	r3, r0
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d001      	beq.n	8008d30 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008d30:	2300      	movs	r3, #0
 8008d32:	613b      	str	r3, [r7, #16]
 8008d34:	e015      	b.n	8008d62 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	015a      	lsls	r2, r3, #5
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	4413      	add	r3, r2
 8008d3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d42:	461a      	mov	r2, r3
 8008d44:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008d48:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	015a      	lsls	r2, r3, #5
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	4413      	add	r3, r2
 8008d52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d56:	461a      	mov	r2, r3
 8008d58:	2300      	movs	r3, #0
 8008d5a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	3301      	adds	r3, #1
 8008d60:	613b      	str	r3, [r7, #16]
 8008d62:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008d66:	461a      	mov	r2, r3
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d3e3      	bcc.n	8008d36 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2200      	movs	r2, #0
 8008d72:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008d7a:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	4a18      	ldr	r2, [pc, #96]	@ (8008de0 <USB_HostInit+0x170>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d10b      	bne.n	8008d9c <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008d8a:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	4a15      	ldr	r2, [pc, #84]	@ (8008de4 <USB_HostInit+0x174>)
 8008d90:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	4a14      	ldr	r2, [pc, #80]	@ (8008de8 <USB_HostInit+0x178>)
 8008d96:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8008d9a:	e009      	b.n	8008db0 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2280      	movs	r2, #128	@ 0x80
 8008da0:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	4a11      	ldr	r2, [pc, #68]	@ (8008dec <USB_HostInit+0x17c>)
 8008da6:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	4a11      	ldr	r2, [pc, #68]	@ (8008df0 <USB_HostInit+0x180>)
 8008dac:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008db0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d105      	bne.n	8008dc4 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	699b      	ldr	r3, [r3, #24]
 8008dbc:	f043 0210 	orr.w	r2, r3, #16
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	699a      	ldr	r2, [r3, #24]
 8008dc8:	4b0a      	ldr	r3, [pc, #40]	@ (8008df4 <USB_HostInit+0x184>)
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	687a      	ldr	r2, [r7, #4]
 8008dce:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8008dd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3718      	adds	r7, #24
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008ddc:	b004      	add	sp, #16
 8008dde:	4770      	bx	lr
 8008de0:	40040000 	.word	0x40040000
 8008de4:	01000200 	.word	0x01000200
 8008de8:	00e00300 	.word	0x00e00300
 8008dec:	00600080 	.word	0x00600080
 8008df0:	004000e0 	.word	0x004000e0
 8008df4:	a3200008 	.word	0xa3200008

08008df8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b085      	sub	sp, #20
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	460b      	mov	r3, r1
 8008e02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	68fa      	ldr	r2, [r7, #12]
 8008e12:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008e16:	f023 0303 	bic.w	r3, r3, #3
 8008e1a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008e22:	681a      	ldr	r2, [r3, #0]
 8008e24:	78fb      	ldrb	r3, [r7, #3]
 8008e26:	f003 0303 	and.w	r3, r3, #3
 8008e2a:	68f9      	ldr	r1, [r7, #12]
 8008e2c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008e30:	4313      	orrs	r3, r2
 8008e32:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008e34:	78fb      	ldrb	r3, [r7, #3]
 8008e36:	2b01      	cmp	r3, #1
 8008e38:	d107      	bne.n	8008e4a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008e40:	461a      	mov	r2, r3
 8008e42:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008e46:	6053      	str	r3, [r2, #4]
 8008e48:	e00c      	b.n	8008e64 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8008e4a:	78fb      	ldrb	r3, [r7, #3]
 8008e4c:	2b02      	cmp	r3, #2
 8008e4e:	d107      	bne.n	8008e60 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008e56:	461a      	mov	r2, r3
 8008e58:	f241 7370 	movw	r3, #6000	@ 0x1770
 8008e5c:	6053      	str	r3, [r2, #4]
 8008e5e:	e001      	b.n	8008e64 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8008e60:	2301      	movs	r3, #1
 8008e62:	e000      	b.n	8008e66 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8008e64:	2300      	movs	r3, #0
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3714      	adds	r7, #20
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e70:	4770      	bx	lr

08008e72 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8008e72:	b580      	push	{r7, lr}
 8008e74:	b084      	sub	sp, #16
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8008e92:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	68fa      	ldr	r2, [r7, #12]
 8008e98:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008e9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008ea0:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008ea2:	2064      	movs	r0, #100	@ 0x64
 8008ea4:	f7f9 fab4 	bl	8002410 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	68fa      	ldr	r2, [r7, #12]
 8008eac:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008eb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008eb4:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008eb6:	200a      	movs	r0, #10
 8008eb8:	f7f9 faaa 	bl	8002410 <HAL_Delay>

  return HAL_OK;
 8008ebc:	2300      	movs	r3, #0
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3710      	adds	r7, #16
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}

08008ec6 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008ec6:	b480      	push	{r7}
 8008ec8:	b085      	sub	sp, #20
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	6078      	str	r0, [r7, #4]
 8008ece:	460b      	mov	r3, r1
 8008ed0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8008eea:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d109      	bne.n	8008f0a <USB_DriveVbus+0x44>
 8008ef6:	78fb      	ldrb	r3, [r7, #3]
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	d106      	bne.n	8008f0a <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	68fa      	ldr	r2, [r7, #12]
 8008f00:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008f04:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008f08:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008f10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f14:	d109      	bne.n	8008f2a <USB_DriveVbus+0x64>
 8008f16:	78fb      	ldrb	r3, [r7, #3]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d106      	bne.n	8008f2a <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	68fa      	ldr	r2, [r7, #12]
 8008f20:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008f24:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008f28:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008f2a:	2300      	movs	r3, #0
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3714      	adds	r7, #20
 8008f30:	46bd      	mov	sp, r7
 8008f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f36:	4770      	bx	lr

08008f38 <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b085      	sub	sp, #20
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008f44:	2300      	movs	r3, #0
 8008f46:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	0c5b      	lsrs	r3, r3, #17
 8008f56:	f003 0303 	and.w	r3, r3, #3
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3714      	adds	r7, #20
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f64:	4770      	bx	lr

08008f66 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8008f66:	b480      	push	{r7}
 8008f68:	b085      	sub	sp, #20
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008f78:	689b      	ldr	r3, [r3, #8]
 8008f7a:	b29b      	uxth	r3, r3
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3714      	adds	r7, #20
 8008f80:	46bd      	mov	sp, r7
 8008f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f86:	4770      	bx	lr

08008f88 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b088      	sub	sp, #32
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
 8008f90:	4608      	mov	r0, r1
 8008f92:	4611      	mov	r1, r2
 8008f94:	461a      	mov	r2, r3
 8008f96:	4603      	mov	r3, r0
 8008f98:	70fb      	strb	r3, [r7, #3]
 8008f9a:	460b      	mov	r3, r1
 8008f9c:	70bb      	strb	r3, [r7, #2]
 8008f9e:	4613      	mov	r3, r2
 8008fa0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8008faa:	78fb      	ldrb	r3, [r7, #3]
 8008fac:	015a      	lsls	r2, r3, #5
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	4413      	add	r3, r2
 8008fb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008fb6:	461a      	mov	r2, r3
 8008fb8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008fbc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008fbe:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008fc2:	2b03      	cmp	r3, #3
 8008fc4:	d87c      	bhi.n	80090c0 <USB_HC_Init+0x138>
 8008fc6:	a201      	add	r2, pc, #4	@ (adr r2, 8008fcc <USB_HC_Init+0x44>)
 8008fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fcc:	08008fdd 	.word	0x08008fdd
 8008fd0:	08009083 	.word	0x08009083
 8008fd4:	08008fdd 	.word	0x08008fdd
 8008fd8:	08009045 	.word	0x08009045
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008fdc:	78fb      	ldrb	r3, [r7, #3]
 8008fde:	015a      	lsls	r2, r3, #5
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	4413      	add	r3, r2
 8008fe4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008fe8:	461a      	mov	r2, r3
 8008fea:	f240 439d 	movw	r3, #1181	@ 0x49d
 8008fee:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008ff0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	da10      	bge.n	800901a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008ff8:	78fb      	ldrb	r3, [r7, #3]
 8008ffa:	015a      	lsls	r2, r3, #5
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	4413      	add	r3, r2
 8009000:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009004:	68db      	ldr	r3, [r3, #12]
 8009006:	78fa      	ldrb	r2, [r7, #3]
 8009008:	0151      	lsls	r1, r2, #5
 800900a:	693a      	ldr	r2, [r7, #16]
 800900c:	440a      	add	r2, r1
 800900e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009012:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009016:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8009018:	e055      	b.n	80090c6 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	4a6f      	ldr	r2, [pc, #444]	@ (80091dc <USB_HC_Init+0x254>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d151      	bne.n	80090c6 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8009022:	78fb      	ldrb	r3, [r7, #3]
 8009024:	015a      	lsls	r2, r3, #5
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	4413      	add	r3, r2
 800902a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800902e:	68db      	ldr	r3, [r3, #12]
 8009030:	78fa      	ldrb	r2, [r7, #3]
 8009032:	0151      	lsls	r1, r2, #5
 8009034:	693a      	ldr	r2, [r7, #16]
 8009036:	440a      	add	r2, r1
 8009038:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800903c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009040:	60d3      	str	r3, [r2, #12]
      break;
 8009042:	e040      	b.n	80090c6 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009044:	78fb      	ldrb	r3, [r7, #3]
 8009046:	015a      	lsls	r2, r3, #5
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	4413      	add	r3, r2
 800904c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009050:	461a      	mov	r2, r3
 8009052:	f240 639d 	movw	r3, #1693	@ 0x69d
 8009056:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009058:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800905c:	2b00      	cmp	r3, #0
 800905e:	da34      	bge.n	80090ca <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009060:	78fb      	ldrb	r3, [r7, #3]
 8009062:	015a      	lsls	r2, r3, #5
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	4413      	add	r3, r2
 8009068:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800906c:	68db      	ldr	r3, [r3, #12]
 800906e:	78fa      	ldrb	r2, [r7, #3]
 8009070:	0151      	lsls	r1, r2, #5
 8009072:	693a      	ldr	r2, [r7, #16]
 8009074:	440a      	add	r2, r1
 8009076:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800907a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800907e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8009080:	e023      	b.n	80090ca <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009082:	78fb      	ldrb	r3, [r7, #3]
 8009084:	015a      	lsls	r2, r3, #5
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	4413      	add	r3, r2
 800908a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800908e:	461a      	mov	r2, r3
 8009090:	f240 2325 	movw	r3, #549	@ 0x225
 8009094:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009096:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800909a:	2b00      	cmp	r3, #0
 800909c:	da17      	bge.n	80090ce <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800909e:	78fb      	ldrb	r3, [r7, #3]
 80090a0:	015a      	lsls	r2, r3, #5
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	4413      	add	r3, r2
 80090a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090aa:	68db      	ldr	r3, [r3, #12]
 80090ac:	78fa      	ldrb	r2, [r7, #3]
 80090ae:	0151      	lsls	r1, r2, #5
 80090b0:	693a      	ldr	r2, [r7, #16]
 80090b2:	440a      	add	r2, r1
 80090b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80090b8:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80090bc:	60d3      	str	r3, [r2, #12]
      }
      break;
 80090be:	e006      	b.n	80090ce <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 80090c0:	2301      	movs	r3, #1
 80090c2:	77fb      	strb	r3, [r7, #31]
      break;
 80090c4:	e004      	b.n	80090d0 <USB_HC_Init+0x148>
      break;
 80090c6:	bf00      	nop
 80090c8:	e002      	b.n	80090d0 <USB_HC_Init+0x148>
      break;
 80090ca:	bf00      	nop
 80090cc:	e000      	b.n	80090d0 <USB_HC_Init+0x148>
      break;
 80090ce:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80090d0:	78fb      	ldrb	r3, [r7, #3]
 80090d2:	015a      	lsls	r2, r3, #5
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	4413      	add	r3, r2
 80090d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090dc:	461a      	mov	r2, r3
 80090de:	2300      	movs	r3, #0
 80090e0:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80090e2:	78fb      	ldrb	r3, [r7, #3]
 80090e4:	015a      	lsls	r2, r3, #5
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	4413      	add	r3, r2
 80090ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090ee:	68db      	ldr	r3, [r3, #12]
 80090f0:	78fa      	ldrb	r2, [r7, #3]
 80090f2:	0151      	lsls	r1, r2, #5
 80090f4:	693a      	ldr	r2, [r7, #16]
 80090f6:	440a      	add	r2, r1
 80090f8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80090fc:	f043 0302 	orr.w	r3, r3, #2
 8009100:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009108:	699a      	ldr	r2, [r3, #24]
 800910a:	78fb      	ldrb	r3, [r7, #3]
 800910c:	f003 030f 	and.w	r3, r3, #15
 8009110:	2101      	movs	r1, #1
 8009112:	fa01 f303 	lsl.w	r3, r1, r3
 8009116:	6939      	ldr	r1, [r7, #16]
 8009118:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800911c:	4313      	orrs	r3, r2
 800911e:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	699b      	ldr	r3, [r3, #24]
 8009124:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800912c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009130:	2b00      	cmp	r3, #0
 8009132:	da03      	bge.n	800913c <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8009134:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009138:	61bb      	str	r3, [r7, #24]
 800913a:	e001      	b.n	8009140 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800913c:	2300      	movs	r3, #0
 800913e:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f7ff fef9 	bl	8008f38 <USB_GetHostSpeed>
 8009146:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8009148:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800914c:	2b02      	cmp	r3, #2
 800914e:	d106      	bne.n	800915e <USB_HC_Init+0x1d6>
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	2b02      	cmp	r3, #2
 8009154:	d003      	beq.n	800915e <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009156:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800915a:	617b      	str	r3, [r7, #20]
 800915c:	e001      	b.n	8009162 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800915e:	2300      	movs	r3, #0
 8009160:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009162:	787b      	ldrb	r3, [r7, #1]
 8009164:	059b      	lsls	r3, r3, #22
 8009166:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800916a:	78bb      	ldrb	r3, [r7, #2]
 800916c:	02db      	lsls	r3, r3, #11
 800916e:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009172:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009174:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009178:	049b      	lsls	r3, r3, #18
 800917a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800917e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8009180:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8009182:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009186:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8009188:	69bb      	ldr	r3, [r7, #24]
 800918a:	431a      	orrs	r2, r3
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009190:	78fa      	ldrb	r2, [r7, #3]
 8009192:	0151      	lsls	r1, r2, #5
 8009194:	693a      	ldr	r2, [r7, #16]
 8009196:	440a      	add	r2, r1
 8009198:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800919c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80091a0:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80091a2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80091a6:	2b03      	cmp	r3, #3
 80091a8:	d003      	beq.n	80091b2 <USB_HC_Init+0x22a>
 80091aa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80091ae:	2b01      	cmp	r3, #1
 80091b0:	d10f      	bne.n	80091d2 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80091b2:	78fb      	ldrb	r3, [r7, #3]
 80091b4:	015a      	lsls	r2, r3, #5
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	4413      	add	r3, r2
 80091ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	78fa      	ldrb	r2, [r7, #3]
 80091c2:	0151      	lsls	r1, r2, #5
 80091c4:	693a      	ldr	r2, [r7, #16]
 80091c6:	440a      	add	r2, r1
 80091c8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80091cc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80091d0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80091d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3720      	adds	r7, #32
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}
 80091dc:	40040000 	.word	0x40040000

080091e0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b08c      	sub	sp, #48	@ 0x30
 80091e4:	af02      	add	r7, sp, #8
 80091e6:	60f8      	str	r0, [r7, #12]
 80091e8:	60b9      	str	r1, [r7, #8]
 80091ea:	4613      	mov	r3, r2
 80091ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	785b      	ldrb	r3, [r3, #1]
 80091f6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80091f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80091fc:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	4a5d      	ldr	r2, [pc, #372]	@ (8009378 <USB_HC_StartXfer+0x198>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d12f      	bne.n	8009266 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8009206:	79fb      	ldrb	r3, [r7, #7]
 8009208:	2b01      	cmp	r3, #1
 800920a:	d11c      	bne.n	8009246 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	7c9b      	ldrb	r3, [r3, #18]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d003      	beq.n	800921c <USB_HC_StartXfer+0x3c>
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	7c9b      	ldrb	r3, [r3, #18]
 8009218:	2b02      	cmp	r3, #2
 800921a:	d124      	bne.n	8009266 <USB_HC_StartXfer+0x86>
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	799b      	ldrb	r3, [r3, #6]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d120      	bne.n	8009266 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8009224:	69fb      	ldr	r3, [r7, #28]
 8009226:	015a      	lsls	r2, r3, #5
 8009228:	6a3b      	ldr	r3, [r7, #32]
 800922a:	4413      	add	r3, r2
 800922c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009230:	68db      	ldr	r3, [r3, #12]
 8009232:	69fa      	ldr	r2, [r7, #28]
 8009234:	0151      	lsls	r1, r2, #5
 8009236:	6a3a      	ldr	r2, [r7, #32]
 8009238:	440a      	add	r2, r1
 800923a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800923e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009242:	60d3      	str	r3, [r2, #12]
 8009244:	e00f      	b.n	8009266 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	791b      	ldrb	r3, [r3, #4]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d10b      	bne.n	8009266 <USB_HC_StartXfer+0x86>
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	795b      	ldrb	r3, [r3, #5]
 8009252:	2b01      	cmp	r3, #1
 8009254:	d107      	bne.n	8009266 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	785b      	ldrb	r3, [r3, #1]
 800925a:	4619      	mov	r1, r3
 800925c:	68f8      	ldr	r0, [r7, #12]
 800925e:	f000 fb6b 	bl	8009938 <USB_DoPing>
        return HAL_OK;
 8009262:	2300      	movs	r3, #0
 8009264:	e232      	b.n	80096cc <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	799b      	ldrb	r3, [r3, #6]
 800926a:	2b01      	cmp	r3, #1
 800926c:	d158      	bne.n	8009320 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800926e:	2301      	movs	r3, #1
 8009270:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	78db      	ldrb	r3, [r3, #3]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d007      	beq.n	800928a <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800927a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800927c:	68ba      	ldr	r2, [r7, #8]
 800927e:	8a92      	ldrh	r2, [r2, #20]
 8009280:	fb03 f202 	mul.w	r2, r3, r2
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	61da      	str	r2, [r3, #28]
 8009288:	e07c      	b.n	8009384 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	7c9b      	ldrb	r3, [r3, #18]
 800928e:	2b01      	cmp	r3, #1
 8009290:	d130      	bne.n	80092f4 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	6a1b      	ldr	r3, [r3, #32]
 8009296:	2bbc      	cmp	r3, #188	@ 0xbc
 8009298:	d918      	bls.n	80092cc <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	8a9b      	ldrh	r3, [r3, #20]
 800929e:	461a      	mov	r2, r3
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	69da      	ldr	r2, [r3, #28]
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	68db      	ldr	r3, [r3, #12]
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	d003      	beq.n	80092bc <USB_HC_StartXfer+0xdc>
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	68db      	ldr	r3, [r3, #12]
 80092b8:	2b02      	cmp	r3, #2
 80092ba:	d103      	bne.n	80092c4 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	2202      	movs	r2, #2
 80092c0:	60da      	str	r2, [r3, #12]
 80092c2:	e05f      	b.n	8009384 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	2201      	movs	r2, #1
 80092c8:	60da      	str	r2, [r3, #12]
 80092ca:	e05b      	b.n	8009384 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	6a1a      	ldr	r2, [r3, #32]
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	68db      	ldr	r3, [r3, #12]
 80092d8:	2b01      	cmp	r3, #1
 80092da:	d007      	beq.n	80092ec <USB_HC_StartXfer+0x10c>
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	68db      	ldr	r3, [r3, #12]
 80092e0:	2b02      	cmp	r3, #2
 80092e2:	d003      	beq.n	80092ec <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	2204      	movs	r2, #4
 80092e8:	60da      	str	r2, [r3, #12]
 80092ea:	e04b      	b.n	8009384 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	2203      	movs	r2, #3
 80092f0:	60da      	str	r2, [r3, #12]
 80092f2:	e047      	b.n	8009384 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80092f4:	79fb      	ldrb	r3, [r7, #7]
 80092f6:	2b01      	cmp	r3, #1
 80092f8:	d10d      	bne.n	8009316 <USB_HC_StartXfer+0x136>
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	6a1b      	ldr	r3, [r3, #32]
 80092fe:	68ba      	ldr	r2, [r7, #8]
 8009300:	8a92      	ldrh	r2, [r2, #20]
 8009302:	4293      	cmp	r3, r2
 8009304:	d907      	bls.n	8009316 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009306:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009308:	68ba      	ldr	r2, [r7, #8]
 800930a:	8a92      	ldrh	r2, [r2, #20]
 800930c:	fb03 f202 	mul.w	r2, r3, r2
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	61da      	str	r2, [r3, #28]
 8009314:	e036      	b.n	8009384 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	6a1a      	ldr	r2, [r3, #32]
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	61da      	str	r2, [r3, #28]
 800931e:	e031      	b.n	8009384 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	6a1b      	ldr	r3, [r3, #32]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d018      	beq.n	800935a <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	6a1b      	ldr	r3, [r3, #32]
 800932c:	68ba      	ldr	r2, [r7, #8]
 800932e:	8a92      	ldrh	r2, [r2, #20]
 8009330:	4413      	add	r3, r2
 8009332:	3b01      	subs	r3, #1
 8009334:	68ba      	ldr	r2, [r7, #8]
 8009336:	8a92      	ldrh	r2, [r2, #20]
 8009338:	fbb3 f3f2 	udiv	r3, r3, r2
 800933c:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800933e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8009340:	8b7b      	ldrh	r3, [r7, #26]
 8009342:	429a      	cmp	r2, r3
 8009344:	d90b      	bls.n	800935e <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8009346:	8b7b      	ldrh	r3, [r7, #26]
 8009348:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800934a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800934c:	68ba      	ldr	r2, [r7, #8]
 800934e:	8a92      	ldrh	r2, [r2, #20]
 8009350:	fb03 f202 	mul.w	r2, r3, r2
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	61da      	str	r2, [r3, #28]
 8009358:	e001      	b.n	800935e <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800935a:	2301      	movs	r3, #1
 800935c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	78db      	ldrb	r3, [r3, #3]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d00a      	beq.n	800937c <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009366:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009368:	68ba      	ldr	r2, [r7, #8]
 800936a:	8a92      	ldrh	r2, [r2, #20]
 800936c:	fb03 f202 	mul.w	r2, r3, r2
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	61da      	str	r2, [r3, #28]
 8009374:	e006      	b.n	8009384 <USB_HC_StartXfer+0x1a4>
 8009376:	bf00      	nop
 8009378:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	6a1a      	ldr	r2, [r3, #32]
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	69db      	ldr	r3, [r3, #28]
 8009388:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800938c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800938e:	04d9      	lsls	r1, r3, #19
 8009390:	4ba3      	ldr	r3, [pc, #652]	@ (8009620 <USB_HC_StartXfer+0x440>)
 8009392:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009394:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	7d9b      	ldrb	r3, [r3, #22]
 800939a:	075b      	lsls	r3, r3, #29
 800939c:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80093a0:	69f9      	ldr	r1, [r7, #28]
 80093a2:	0148      	lsls	r0, r1, #5
 80093a4:	6a39      	ldr	r1, [r7, #32]
 80093a6:	4401      	add	r1, r0
 80093a8:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80093ac:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80093ae:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80093b0:	79fb      	ldrb	r3, [r7, #7]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d009      	beq.n	80093ca <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	6999      	ldr	r1, [r3, #24]
 80093ba:	69fb      	ldr	r3, [r7, #28]
 80093bc:	015a      	lsls	r2, r3, #5
 80093be:	6a3b      	ldr	r3, [r7, #32]
 80093c0:	4413      	add	r3, r2
 80093c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80093c6:	460a      	mov	r2, r1
 80093c8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80093ca:	6a3b      	ldr	r3, [r7, #32]
 80093cc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80093d0:	689b      	ldr	r3, [r3, #8]
 80093d2:	f003 0301 	and.w	r3, r3, #1
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	bf0c      	ite	eq
 80093da:	2301      	moveq	r3, #1
 80093dc:	2300      	movne	r3, #0
 80093de:	b2db      	uxtb	r3, r3
 80093e0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80093e2:	69fb      	ldr	r3, [r7, #28]
 80093e4:	015a      	lsls	r2, r3, #5
 80093e6:	6a3b      	ldr	r3, [r7, #32]
 80093e8:	4413      	add	r3, r2
 80093ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	69fa      	ldr	r2, [r7, #28]
 80093f2:	0151      	lsls	r1, r2, #5
 80093f4:	6a3a      	ldr	r2, [r7, #32]
 80093f6:	440a      	add	r2, r1
 80093f8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80093fc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009400:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8009402:	69fb      	ldr	r3, [r7, #28]
 8009404:	015a      	lsls	r2, r3, #5
 8009406:	6a3b      	ldr	r3, [r7, #32]
 8009408:	4413      	add	r3, r2
 800940a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800940e:	681a      	ldr	r2, [r3, #0]
 8009410:	7e7b      	ldrb	r3, [r7, #25]
 8009412:	075b      	lsls	r3, r3, #29
 8009414:	69f9      	ldr	r1, [r7, #28]
 8009416:	0148      	lsls	r0, r1, #5
 8009418:	6a39      	ldr	r1, [r7, #32]
 800941a:	4401      	add	r1, r0
 800941c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8009420:	4313      	orrs	r3, r2
 8009422:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	799b      	ldrb	r3, [r3, #6]
 8009428:	2b01      	cmp	r3, #1
 800942a:	f040 80c3 	bne.w	80095b4 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	7c5b      	ldrb	r3, [r3, #17]
 8009432:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8009434:	68ba      	ldr	r2, [r7, #8]
 8009436:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8009438:	4313      	orrs	r3, r2
 800943a:	69fa      	ldr	r2, [r7, #28]
 800943c:	0151      	lsls	r1, r2, #5
 800943e:	6a3a      	ldr	r2, [r7, #32]
 8009440:	440a      	add	r2, r1
 8009442:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8009446:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800944a:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800944c:	69fb      	ldr	r3, [r7, #28]
 800944e:	015a      	lsls	r2, r3, #5
 8009450:	6a3b      	ldr	r3, [r7, #32]
 8009452:	4413      	add	r3, r2
 8009454:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009458:	68db      	ldr	r3, [r3, #12]
 800945a:	69fa      	ldr	r2, [r7, #28]
 800945c:	0151      	lsls	r1, r2, #5
 800945e:	6a3a      	ldr	r2, [r7, #32]
 8009460:	440a      	add	r2, r1
 8009462:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009466:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800946a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	79db      	ldrb	r3, [r3, #7]
 8009470:	2b01      	cmp	r3, #1
 8009472:	d123      	bne.n	80094bc <USB_HC_StartXfer+0x2dc>
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	78db      	ldrb	r3, [r3, #3]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d11f      	bne.n	80094bc <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800947c:	69fb      	ldr	r3, [r7, #28]
 800947e:	015a      	lsls	r2, r3, #5
 8009480:	6a3b      	ldr	r3, [r7, #32]
 8009482:	4413      	add	r3, r2
 8009484:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009488:	685b      	ldr	r3, [r3, #4]
 800948a:	69fa      	ldr	r2, [r7, #28]
 800948c:	0151      	lsls	r1, r2, #5
 800948e:	6a3a      	ldr	r2, [r7, #32]
 8009490:	440a      	add	r2, r1
 8009492:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009496:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800949a:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800949c:	69fb      	ldr	r3, [r7, #28]
 800949e:	015a      	lsls	r2, r3, #5
 80094a0:	6a3b      	ldr	r3, [r7, #32]
 80094a2:	4413      	add	r3, r2
 80094a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80094a8:	68db      	ldr	r3, [r3, #12]
 80094aa:	69fa      	ldr	r2, [r7, #28]
 80094ac:	0151      	lsls	r1, r2, #5
 80094ae:	6a3a      	ldr	r2, [r7, #32]
 80094b0:	440a      	add	r2, r1
 80094b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80094b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80094ba:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	7c9b      	ldrb	r3, [r3, #18]
 80094c0:	2b01      	cmp	r3, #1
 80094c2:	d003      	beq.n	80094cc <USB_HC_StartXfer+0x2ec>
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	7c9b      	ldrb	r3, [r3, #18]
 80094c8:	2b03      	cmp	r3, #3
 80094ca:	d117      	bne.n	80094fc <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	d113      	bne.n	80094fc <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	78db      	ldrb	r3, [r3, #3]
 80094d8:	2b01      	cmp	r3, #1
 80094da:	d10f      	bne.n	80094fc <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80094dc:	69fb      	ldr	r3, [r7, #28]
 80094de:	015a      	lsls	r2, r3, #5
 80094e0:	6a3b      	ldr	r3, [r7, #32]
 80094e2:	4413      	add	r3, r2
 80094e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80094e8:	685b      	ldr	r3, [r3, #4]
 80094ea:	69fa      	ldr	r2, [r7, #28]
 80094ec:	0151      	lsls	r1, r2, #5
 80094ee:	6a3a      	ldr	r2, [r7, #32]
 80094f0:	440a      	add	r2, r1
 80094f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80094f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80094fa:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	7c9b      	ldrb	r3, [r3, #18]
 8009500:	2b01      	cmp	r3, #1
 8009502:	d162      	bne.n	80095ca <USB_HC_StartXfer+0x3ea>
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	78db      	ldrb	r3, [r3, #3]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d15e      	bne.n	80095ca <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	68db      	ldr	r3, [r3, #12]
 8009510:	3b01      	subs	r3, #1
 8009512:	2b03      	cmp	r3, #3
 8009514:	d858      	bhi.n	80095c8 <USB_HC_StartXfer+0x3e8>
 8009516:	a201      	add	r2, pc, #4	@ (adr r2, 800951c <USB_HC_StartXfer+0x33c>)
 8009518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800951c:	0800952d 	.word	0x0800952d
 8009520:	0800954f 	.word	0x0800954f
 8009524:	08009571 	.word	0x08009571
 8009528:	08009593 	.word	0x08009593
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800952c:	69fb      	ldr	r3, [r7, #28]
 800952e:	015a      	lsls	r2, r3, #5
 8009530:	6a3b      	ldr	r3, [r7, #32]
 8009532:	4413      	add	r3, r2
 8009534:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009538:	685b      	ldr	r3, [r3, #4]
 800953a:	69fa      	ldr	r2, [r7, #28]
 800953c:	0151      	lsls	r1, r2, #5
 800953e:	6a3a      	ldr	r2, [r7, #32]
 8009540:	440a      	add	r2, r1
 8009542:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009546:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800954a:	6053      	str	r3, [r2, #4]
          break;
 800954c:	e03d      	b.n	80095ca <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800954e:	69fb      	ldr	r3, [r7, #28]
 8009550:	015a      	lsls	r2, r3, #5
 8009552:	6a3b      	ldr	r3, [r7, #32]
 8009554:	4413      	add	r3, r2
 8009556:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	69fa      	ldr	r2, [r7, #28]
 800955e:	0151      	lsls	r1, r2, #5
 8009560:	6a3a      	ldr	r2, [r7, #32]
 8009562:	440a      	add	r2, r1
 8009564:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009568:	f043 030e 	orr.w	r3, r3, #14
 800956c:	6053      	str	r3, [r2, #4]
          break;
 800956e:	e02c      	b.n	80095ca <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8009570:	69fb      	ldr	r3, [r7, #28]
 8009572:	015a      	lsls	r2, r3, #5
 8009574:	6a3b      	ldr	r3, [r7, #32]
 8009576:	4413      	add	r3, r2
 8009578:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800957c:	685b      	ldr	r3, [r3, #4]
 800957e:	69fa      	ldr	r2, [r7, #28]
 8009580:	0151      	lsls	r1, r2, #5
 8009582:	6a3a      	ldr	r2, [r7, #32]
 8009584:	440a      	add	r2, r1
 8009586:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800958a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800958e:	6053      	str	r3, [r2, #4]
          break;
 8009590:	e01b      	b.n	80095ca <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8009592:	69fb      	ldr	r3, [r7, #28]
 8009594:	015a      	lsls	r2, r3, #5
 8009596:	6a3b      	ldr	r3, [r7, #32]
 8009598:	4413      	add	r3, r2
 800959a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800959e:	685b      	ldr	r3, [r3, #4]
 80095a0:	69fa      	ldr	r2, [r7, #28]
 80095a2:	0151      	lsls	r1, r2, #5
 80095a4:	6a3a      	ldr	r2, [r7, #32]
 80095a6:	440a      	add	r2, r1
 80095a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80095ac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80095b0:	6053      	str	r3, [r2, #4]
          break;
 80095b2:	e00a      	b.n	80095ca <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80095b4:	69fb      	ldr	r3, [r7, #28]
 80095b6:	015a      	lsls	r2, r3, #5
 80095b8:	6a3b      	ldr	r3, [r7, #32]
 80095ba:	4413      	add	r3, r2
 80095bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80095c0:	461a      	mov	r2, r3
 80095c2:	2300      	movs	r3, #0
 80095c4:	6053      	str	r3, [r2, #4]
 80095c6:	e000      	b.n	80095ca <USB_HC_StartXfer+0x3ea>
          break;
 80095c8:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80095ca:	69fb      	ldr	r3, [r7, #28]
 80095cc:	015a      	lsls	r2, r3, #5
 80095ce:	6a3b      	ldr	r3, [r7, #32]
 80095d0:	4413      	add	r3, r2
 80095d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80095e0:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	78db      	ldrb	r3, [r3, #3]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d004      	beq.n	80095f4 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80095f0:	613b      	str	r3, [r7, #16]
 80095f2:	e003      	b.n	80095fc <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80095f4:	693b      	ldr	r3, [r7, #16]
 80095f6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80095fa:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009602:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009604:	69fb      	ldr	r3, [r7, #28]
 8009606:	015a      	lsls	r2, r3, #5
 8009608:	6a3b      	ldr	r3, [r7, #32]
 800960a:	4413      	add	r3, r2
 800960c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009610:	461a      	mov	r2, r3
 8009612:	693b      	ldr	r3, [r7, #16]
 8009614:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8009616:	79fb      	ldrb	r3, [r7, #7]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d003      	beq.n	8009624 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800961c:	2300      	movs	r3, #0
 800961e:	e055      	b.n	80096cc <USB_HC_StartXfer+0x4ec>
 8009620:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	78db      	ldrb	r3, [r3, #3]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d14e      	bne.n	80096ca <USB_HC_StartXfer+0x4ea>
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	6a1b      	ldr	r3, [r3, #32]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d04a      	beq.n	80096ca <USB_HC_StartXfer+0x4ea>
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	79db      	ldrb	r3, [r3, #7]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d146      	bne.n	80096ca <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	7c9b      	ldrb	r3, [r3, #18]
 8009640:	2b03      	cmp	r3, #3
 8009642:	d831      	bhi.n	80096a8 <USB_HC_StartXfer+0x4c8>
 8009644:	a201      	add	r2, pc, #4	@ (adr r2, 800964c <USB_HC_StartXfer+0x46c>)
 8009646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800964a:	bf00      	nop
 800964c:	0800965d 	.word	0x0800965d
 8009650:	08009681 	.word	0x08009681
 8009654:	0800965d 	.word	0x0800965d
 8009658:	08009681 	.word	0x08009681
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	6a1b      	ldr	r3, [r3, #32]
 8009660:	3303      	adds	r3, #3
 8009662:	089b      	lsrs	r3, r3, #2
 8009664:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8009666:	8afa      	ldrh	r2, [r7, #22]
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800966c:	b29b      	uxth	r3, r3
 800966e:	429a      	cmp	r2, r3
 8009670:	d91c      	bls.n	80096ac <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	699b      	ldr	r3, [r3, #24]
 8009676:	f043 0220 	orr.w	r2, r3, #32
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	619a      	str	r2, [r3, #24]
        }
        break;
 800967e:	e015      	b.n	80096ac <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	6a1b      	ldr	r3, [r3, #32]
 8009684:	3303      	adds	r3, #3
 8009686:	089b      	lsrs	r3, r3, #2
 8009688:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800968a:	8afa      	ldrh	r2, [r7, #22]
 800968c:	6a3b      	ldr	r3, [r7, #32]
 800968e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009692:	691b      	ldr	r3, [r3, #16]
 8009694:	b29b      	uxth	r3, r3
 8009696:	429a      	cmp	r2, r3
 8009698:	d90a      	bls.n	80096b0 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	699b      	ldr	r3, [r3, #24]
 800969e:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	619a      	str	r2, [r3, #24]
        }
        break;
 80096a6:	e003      	b.n	80096b0 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 80096a8:	bf00      	nop
 80096aa:	e002      	b.n	80096b2 <USB_HC_StartXfer+0x4d2>
        break;
 80096ac:	bf00      	nop
 80096ae:	e000      	b.n	80096b2 <USB_HC_StartXfer+0x4d2>
        break;
 80096b0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	6999      	ldr	r1, [r3, #24]
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	785a      	ldrb	r2, [r3, #1]
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	6a1b      	ldr	r3, [r3, #32]
 80096be:	b29b      	uxth	r3, r3
 80096c0:	2000      	movs	r0, #0
 80096c2:	9000      	str	r0, [sp, #0]
 80096c4:	68f8      	ldr	r0, [r7, #12]
 80096c6:	f7ff f9c3 	bl	8008a50 <USB_WritePacket>
  }

  return HAL_OK;
 80096ca:	2300      	movs	r3, #0
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3728      	adds	r7, #40	@ 0x28
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}

080096d4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80096d4:	b480      	push	{r7}
 80096d6:	b085      	sub	sp, #20
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80096e6:	695b      	ldr	r3, [r3, #20]
 80096e8:	b29b      	uxth	r3, r3
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3714      	adds	r7, #20
 80096ee:	46bd      	mov	sp, r7
 80096f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f4:	4770      	bx	lr

080096f6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80096f6:	b480      	push	{r7}
 80096f8:	b089      	sub	sp, #36	@ 0x24
 80096fa:	af00      	add	r7, sp, #0
 80096fc:	6078      	str	r0, [r7, #4]
 80096fe:	460b      	mov	r3, r1
 8009700:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8009706:	78fb      	ldrb	r3, [r7, #3]
 8009708:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800970a:	2300      	movs	r3, #0
 800970c:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800970e:	69bb      	ldr	r3, [r7, #24]
 8009710:	015a      	lsls	r2, r3, #5
 8009712:	69fb      	ldr	r3, [r7, #28]
 8009714:	4413      	add	r3, r2
 8009716:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	0c9b      	lsrs	r3, r3, #18
 800971e:	f003 0303 	and.w	r3, r3, #3
 8009722:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8009724:	69bb      	ldr	r3, [r7, #24]
 8009726:	015a      	lsls	r2, r3, #5
 8009728:	69fb      	ldr	r3, [r7, #28]
 800972a:	4413      	add	r3, r2
 800972c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	0fdb      	lsrs	r3, r3, #31
 8009734:	f003 0301 	and.w	r3, r3, #1
 8009738:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800973a:	69bb      	ldr	r3, [r7, #24]
 800973c:	015a      	lsls	r2, r3, #5
 800973e:	69fb      	ldr	r3, [r7, #28]
 8009740:	4413      	add	r3, r2
 8009742:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009746:	685b      	ldr	r3, [r3, #4]
 8009748:	0fdb      	lsrs	r3, r3, #31
 800974a:	f003 0301 	and.w	r3, r3, #1
 800974e:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	689b      	ldr	r3, [r3, #8]
 8009754:	f003 0320 	and.w	r3, r3, #32
 8009758:	2b20      	cmp	r3, #32
 800975a:	d10d      	bne.n	8009778 <USB_HC_Halt+0x82>
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d10a      	bne.n	8009778 <USB_HC_Halt+0x82>
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d005      	beq.n	8009774 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	2b01      	cmp	r3, #1
 800976c:	d002      	beq.n	8009774 <USB_HC_Halt+0x7e>
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	2b03      	cmp	r3, #3
 8009772:	d101      	bne.n	8009778 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8009774:	2300      	movs	r3, #0
 8009776:	e0d8      	b.n	800992a <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d002      	beq.n	8009784 <USB_HC_Halt+0x8e>
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	2b02      	cmp	r3, #2
 8009782:	d173      	bne.n	800986c <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009784:	69bb      	ldr	r3, [r7, #24]
 8009786:	015a      	lsls	r2, r3, #5
 8009788:	69fb      	ldr	r3, [r7, #28]
 800978a:	4413      	add	r3, r2
 800978c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	69ba      	ldr	r2, [r7, #24]
 8009794:	0151      	lsls	r1, r2, #5
 8009796:	69fa      	ldr	r2, [r7, #28]
 8009798:	440a      	add	r2, r1
 800979a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800979e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80097a2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	689b      	ldr	r3, [r3, #8]
 80097a8:	f003 0320 	and.w	r3, r3, #32
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d14a      	bne.n	8009846 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097b4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d133      	bne.n	8009824 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80097bc:	69bb      	ldr	r3, [r7, #24]
 80097be:	015a      	lsls	r2, r3, #5
 80097c0:	69fb      	ldr	r3, [r7, #28]
 80097c2:	4413      	add	r3, r2
 80097c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	69ba      	ldr	r2, [r7, #24]
 80097cc:	0151      	lsls	r1, r2, #5
 80097ce:	69fa      	ldr	r2, [r7, #28]
 80097d0:	440a      	add	r2, r1
 80097d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80097d6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80097da:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80097dc:	69bb      	ldr	r3, [r7, #24]
 80097de:	015a      	lsls	r2, r3, #5
 80097e0:	69fb      	ldr	r3, [r7, #28]
 80097e2:	4413      	add	r3, r2
 80097e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	69ba      	ldr	r2, [r7, #24]
 80097ec:	0151      	lsls	r1, r2, #5
 80097ee:	69fa      	ldr	r2, [r7, #28]
 80097f0:	440a      	add	r2, r1
 80097f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80097f6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80097fa:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	3301      	adds	r3, #1
 8009800:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009808:	d82e      	bhi.n	8009868 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800980a:	69bb      	ldr	r3, [r7, #24]
 800980c:	015a      	lsls	r2, r3, #5
 800980e:	69fb      	ldr	r3, [r7, #28]
 8009810:	4413      	add	r3, r2
 8009812:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800981c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009820:	d0ec      	beq.n	80097fc <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009822:	e081      	b.n	8009928 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009824:	69bb      	ldr	r3, [r7, #24]
 8009826:	015a      	lsls	r2, r3, #5
 8009828:	69fb      	ldr	r3, [r7, #28]
 800982a:	4413      	add	r3, r2
 800982c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	69ba      	ldr	r2, [r7, #24]
 8009834:	0151      	lsls	r1, r2, #5
 8009836:	69fa      	ldr	r2, [r7, #28]
 8009838:	440a      	add	r2, r1
 800983a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800983e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009842:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009844:	e070      	b.n	8009928 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009846:	69bb      	ldr	r3, [r7, #24]
 8009848:	015a      	lsls	r2, r3, #5
 800984a:	69fb      	ldr	r3, [r7, #28]
 800984c:	4413      	add	r3, r2
 800984e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	69ba      	ldr	r2, [r7, #24]
 8009856:	0151      	lsls	r1, r2, #5
 8009858:	69fa      	ldr	r2, [r7, #28]
 800985a:	440a      	add	r2, r1
 800985c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009860:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009864:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009866:	e05f      	b.n	8009928 <USB_HC_Halt+0x232>
            break;
 8009868:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800986a:	e05d      	b.n	8009928 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800986c:	69bb      	ldr	r3, [r7, #24]
 800986e:	015a      	lsls	r2, r3, #5
 8009870:	69fb      	ldr	r3, [r7, #28]
 8009872:	4413      	add	r3, r2
 8009874:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	69ba      	ldr	r2, [r7, #24]
 800987c:	0151      	lsls	r1, r2, #5
 800987e:	69fa      	ldr	r2, [r7, #28]
 8009880:	440a      	add	r2, r1
 8009882:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009886:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800988a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800988c:	69fb      	ldr	r3, [r7, #28]
 800988e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009892:	691b      	ldr	r3, [r3, #16]
 8009894:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009898:	2b00      	cmp	r3, #0
 800989a:	d133      	bne.n	8009904 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800989c:	69bb      	ldr	r3, [r7, #24]
 800989e:	015a      	lsls	r2, r3, #5
 80098a0:	69fb      	ldr	r3, [r7, #28]
 80098a2:	4413      	add	r3, r2
 80098a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	69ba      	ldr	r2, [r7, #24]
 80098ac:	0151      	lsls	r1, r2, #5
 80098ae:	69fa      	ldr	r2, [r7, #28]
 80098b0:	440a      	add	r2, r1
 80098b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80098b6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80098ba:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80098bc:	69bb      	ldr	r3, [r7, #24]
 80098be:	015a      	lsls	r2, r3, #5
 80098c0:	69fb      	ldr	r3, [r7, #28]
 80098c2:	4413      	add	r3, r2
 80098c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	69ba      	ldr	r2, [r7, #24]
 80098cc:	0151      	lsls	r1, r2, #5
 80098ce:	69fa      	ldr	r2, [r7, #28]
 80098d0:	440a      	add	r2, r1
 80098d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80098d6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80098da:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	3301      	adds	r3, #1
 80098e0:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80098e8:	d81d      	bhi.n	8009926 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80098ea:	69bb      	ldr	r3, [r7, #24]
 80098ec:	015a      	lsls	r2, r3, #5
 80098ee:	69fb      	ldr	r3, [r7, #28]
 80098f0:	4413      	add	r3, r2
 80098f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80098fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009900:	d0ec      	beq.n	80098dc <USB_HC_Halt+0x1e6>
 8009902:	e011      	b.n	8009928 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009904:	69bb      	ldr	r3, [r7, #24]
 8009906:	015a      	lsls	r2, r3, #5
 8009908:	69fb      	ldr	r3, [r7, #28]
 800990a:	4413      	add	r3, r2
 800990c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	69ba      	ldr	r2, [r7, #24]
 8009914:	0151      	lsls	r1, r2, #5
 8009916:	69fa      	ldr	r2, [r7, #28]
 8009918:	440a      	add	r2, r1
 800991a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800991e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009922:	6013      	str	r3, [r2, #0]
 8009924:	e000      	b.n	8009928 <USB_HC_Halt+0x232>
          break;
 8009926:	bf00      	nop
    }
  }

  return HAL_OK;
 8009928:	2300      	movs	r3, #0
}
 800992a:	4618      	mov	r0, r3
 800992c:	3724      	adds	r7, #36	@ 0x24
 800992e:	46bd      	mov	sp, r7
 8009930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009934:	4770      	bx	lr
	...

08009938 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009938:	b480      	push	{r7}
 800993a:	b087      	sub	sp, #28
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
 8009940:	460b      	mov	r3, r1
 8009942:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009948:	78fb      	ldrb	r3, [r7, #3]
 800994a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800994c:	2301      	movs	r3, #1
 800994e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	04da      	lsls	r2, r3, #19
 8009954:	4b15      	ldr	r3, [pc, #84]	@ (80099ac <USB_DoPing+0x74>)
 8009956:	4013      	ands	r3, r2
 8009958:	693a      	ldr	r2, [r7, #16]
 800995a:	0151      	lsls	r1, r2, #5
 800995c:	697a      	ldr	r2, [r7, #20]
 800995e:	440a      	add	r2, r1
 8009960:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009964:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009968:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	015a      	lsls	r2, r3, #5
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	4413      	add	r3, r2
 8009972:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009980:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009988:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800998a:	693b      	ldr	r3, [r7, #16]
 800998c:	015a      	lsls	r2, r3, #5
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	4413      	add	r3, r2
 8009992:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009996:	461a      	mov	r2, r3
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800999c:	2300      	movs	r3, #0
}
 800999e:	4618      	mov	r0, r3
 80099a0:	371c      	adds	r7, #28
 80099a2:	46bd      	mov	sp, r7
 80099a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a8:	4770      	bx	lr
 80099aa:	bf00      	nop
 80099ac:	1ff80000 	.word	0x1ff80000

080099b0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b088      	sub	sp, #32
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80099b8:	2300      	movs	r3, #0
 80099ba:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80099c0:	2300      	movs	r3, #0
 80099c2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f7fe ff86 	bl	80088d6 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80099ca:	2110      	movs	r1, #16
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f7fe ffdf 	bl	8008990 <USB_FlushTxFifo>
 80099d2:	4603      	mov	r3, r0
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d001      	beq.n	80099dc <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80099d8:	2301      	movs	r3, #1
 80099da:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f7ff f809 	bl	80089f4 <USB_FlushRxFifo>
 80099e2:	4603      	mov	r3, r0
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d001      	beq.n	80099ec <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80099e8:	2301      	movs	r3, #1
 80099ea:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80099ec:	2300      	movs	r3, #0
 80099ee:	61bb      	str	r3, [r7, #24]
 80099f0:	e01f      	b.n	8009a32 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80099f2:	69bb      	ldr	r3, [r7, #24]
 80099f4:	015a      	lsls	r2, r3, #5
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	4413      	add	r3, r2
 80099fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009a02:	693b      	ldr	r3, [r7, #16]
 8009a04:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009a08:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009a10:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009a18:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009a1a:	69bb      	ldr	r3, [r7, #24]
 8009a1c:	015a      	lsls	r2, r3, #5
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	4413      	add	r3, r2
 8009a22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a26:	461a      	mov	r2, r3
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009a2c:	69bb      	ldr	r3, [r7, #24]
 8009a2e:	3301      	adds	r3, #1
 8009a30:	61bb      	str	r3, [r7, #24]
 8009a32:	69bb      	ldr	r3, [r7, #24]
 8009a34:	2b0f      	cmp	r3, #15
 8009a36:	d9dc      	bls.n	80099f2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009a38:	2300      	movs	r3, #0
 8009a3a:	61bb      	str	r3, [r7, #24]
 8009a3c:	e034      	b.n	8009aa8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8009a3e:	69bb      	ldr	r3, [r7, #24]
 8009a40:	015a      	lsls	r2, r3, #5
 8009a42:	697b      	ldr	r3, [r7, #20]
 8009a44:	4413      	add	r3, r2
 8009a46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009a54:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8009a56:	693b      	ldr	r3, [r7, #16]
 8009a58:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009a5c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009a64:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009a66:	69bb      	ldr	r3, [r7, #24]
 8009a68:	015a      	lsls	r2, r3, #5
 8009a6a:	697b      	ldr	r3, [r7, #20]
 8009a6c:	4413      	add	r3, r2
 8009a6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a72:	461a      	mov	r2, r3
 8009a74:	693b      	ldr	r3, [r7, #16]
 8009a76:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	3301      	adds	r3, #1
 8009a7c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009a84:	d80c      	bhi.n	8009aa0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009a86:	69bb      	ldr	r3, [r7, #24]
 8009a88:	015a      	lsls	r2, r3, #5
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	4413      	add	r3, r2
 8009a8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009a98:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009a9c:	d0ec      	beq.n	8009a78 <USB_StopHost+0xc8>
 8009a9e:	e000      	b.n	8009aa2 <USB_StopHost+0xf2>
        break;
 8009aa0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009aa2:	69bb      	ldr	r3, [r7, #24]
 8009aa4:	3301      	adds	r3, #1
 8009aa6:	61bb      	str	r3, [r7, #24]
 8009aa8:	69bb      	ldr	r3, [r7, #24]
 8009aaa:	2b0f      	cmp	r3, #15
 8009aac:	d9c7      	bls.n	8009a3e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009ab4:	461a      	mov	r2, r3
 8009ab6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009aba:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009ac2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f7fe fef5 	bl	80088b4 <USB_EnableGlobalInt>

  return ret;
 8009aca:	7ffb      	ldrb	r3, [r7, #31]
}
 8009acc:	4618      	mov	r0, r3
 8009ace:	3720      	adds	r7, #32
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}

08009ad4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009ad4:	b590      	push	{r4, r7, lr}
 8009ad6:	b089      	sub	sp, #36	@ 0x24
 8009ad8:	af04      	add	r7, sp, #16
 8009ada:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8009adc:	2301      	movs	r3, #1
 8009ade:	2202      	movs	r2, #2
 8009ae0:	2102      	movs	r1, #2
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f000 fc83 	bl	800a3ee <USBH_FindInterface>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009aec:	7bfb      	ldrb	r3, [r7, #15]
 8009aee:	2bff      	cmp	r3, #255	@ 0xff
 8009af0:	d002      	beq.n	8009af8 <USBH_CDC_InterfaceInit+0x24>
 8009af2:	7bfb      	ldrb	r3, [r7, #15]
 8009af4:	2b01      	cmp	r3, #1
 8009af6:	d901      	bls.n	8009afc <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009af8:	2302      	movs	r3, #2
 8009afa:	e13d      	b.n	8009d78 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8009afc:	7bfb      	ldrb	r3, [r7, #15]
 8009afe:	4619      	mov	r1, r3
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f000 fc58 	bl	800a3b6 <USBH_SelectInterface>
 8009b06:	4603      	mov	r3, r0
 8009b08:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009b0a:	7bbb      	ldrb	r3, [r7, #14]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d001      	beq.n	8009b14 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8009b10:	2302      	movs	r3, #2
 8009b12:	e131      	b.n	8009d78 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8009b1a:	2050      	movs	r0, #80	@ 0x50
 8009b1c:	f002 fb6a 	bl	800c1f4 <malloc>
 8009b20:	4603      	mov	r3, r0
 8009b22:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009b2a:	69db      	ldr	r3, [r3, #28]
 8009b2c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d101      	bne.n	8009b38 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8009b34:	2302      	movs	r3, #2
 8009b36:	e11f      	b.n	8009d78 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8009b38:	2250      	movs	r2, #80	@ 0x50
 8009b3a:	2100      	movs	r1, #0
 8009b3c:	68b8      	ldr	r0, [r7, #8]
 8009b3e:	f002 fc39 	bl	800c3b4 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009b42:	7bfb      	ldrb	r3, [r7, #15]
 8009b44:	687a      	ldr	r2, [r7, #4]
 8009b46:	211a      	movs	r1, #26
 8009b48:	fb01 f303 	mul.w	r3, r1, r3
 8009b4c:	4413      	add	r3, r2
 8009b4e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009b52:	781b      	ldrb	r3, [r3, #0]
 8009b54:	b25b      	sxtb	r3, r3
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	da15      	bge.n	8009b86 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009b5a:	7bfb      	ldrb	r3, [r7, #15]
 8009b5c:	687a      	ldr	r2, [r7, #4]
 8009b5e:	211a      	movs	r1, #26
 8009b60:	fb01 f303 	mul.w	r3, r1, r3
 8009b64:	4413      	add	r3, r2
 8009b66:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009b6a:	781a      	ldrb	r2, [r3, #0]
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009b70:	7bfb      	ldrb	r3, [r7, #15]
 8009b72:	687a      	ldr	r2, [r7, #4]
 8009b74:	211a      	movs	r1, #26
 8009b76:	fb01 f303 	mul.w	r3, r1, r3
 8009b7a:	4413      	add	r3, r2
 8009b7c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009b80:	881a      	ldrh	r2, [r3, #0]
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	785b      	ldrb	r3, [r3, #1]
 8009b8a:	4619      	mov	r1, r3
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f001 ffc4 	bl	800bb1a <USBH_AllocPipe>
 8009b92:	4603      	mov	r3, r0
 8009b94:	461a      	mov	r2, r3
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	7819      	ldrb	r1, [r3, #0]
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	7858      	ldrb	r0, [r3, #1]
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009bae:	68ba      	ldr	r2, [r7, #8]
 8009bb0:	8952      	ldrh	r2, [r2, #10]
 8009bb2:	9202      	str	r2, [sp, #8]
 8009bb4:	2203      	movs	r2, #3
 8009bb6:	9201      	str	r2, [sp, #4]
 8009bb8:	9300      	str	r3, [sp, #0]
 8009bba:	4623      	mov	r3, r4
 8009bbc:	4602      	mov	r2, r0
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f001 ff7c 	bl	800babc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	781b      	ldrb	r3, [r3, #0]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	4619      	mov	r1, r3
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f002 fa8b 	bl	800c0e8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	210a      	movs	r1, #10
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f000 fc08 	bl	800a3ee <USBH_FindInterface>
 8009bde:	4603      	mov	r3, r0
 8009be0:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009be2:	7bfb      	ldrb	r3, [r7, #15]
 8009be4:	2bff      	cmp	r3, #255	@ 0xff
 8009be6:	d002      	beq.n	8009bee <USBH_CDC_InterfaceInit+0x11a>
 8009be8:	7bfb      	ldrb	r3, [r7, #15]
 8009bea:	2b01      	cmp	r3, #1
 8009bec:	d901      	bls.n	8009bf2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009bee:	2302      	movs	r3, #2
 8009bf0:	e0c2      	b.n	8009d78 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009bf2:	7bfb      	ldrb	r3, [r7, #15]
 8009bf4:	687a      	ldr	r2, [r7, #4]
 8009bf6:	211a      	movs	r1, #26
 8009bf8:	fb01 f303 	mul.w	r3, r1, r3
 8009bfc:	4413      	add	r3, r2
 8009bfe:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009c02:	781b      	ldrb	r3, [r3, #0]
 8009c04:	b25b      	sxtb	r3, r3
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	da16      	bge.n	8009c38 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009c0a:	7bfb      	ldrb	r3, [r7, #15]
 8009c0c:	687a      	ldr	r2, [r7, #4]
 8009c0e:	211a      	movs	r1, #26
 8009c10:	fb01 f303 	mul.w	r3, r1, r3
 8009c14:	4413      	add	r3, r2
 8009c16:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009c1a:	781a      	ldrb	r2, [r3, #0]
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009c20:	7bfb      	ldrb	r3, [r7, #15]
 8009c22:	687a      	ldr	r2, [r7, #4]
 8009c24:	211a      	movs	r1, #26
 8009c26:	fb01 f303 	mul.w	r3, r1, r3
 8009c2a:	4413      	add	r3, r2
 8009c2c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009c30:	881a      	ldrh	r2, [r3, #0]
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	835a      	strh	r2, [r3, #26]
 8009c36:	e015      	b.n	8009c64 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009c38:	7bfb      	ldrb	r3, [r7, #15]
 8009c3a:	687a      	ldr	r2, [r7, #4]
 8009c3c:	211a      	movs	r1, #26
 8009c3e:	fb01 f303 	mul.w	r3, r1, r3
 8009c42:	4413      	add	r3, r2
 8009c44:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009c48:	781a      	ldrb	r2, [r3, #0]
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009c4e:	7bfb      	ldrb	r3, [r7, #15]
 8009c50:	687a      	ldr	r2, [r7, #4]
 8009c52:	211a      	movs	r1, #26
 8009c54:	fb01 f303 	mul.w	r3, r1, r3
 8009c58:	4413      	add	r3, r2
 8009c5a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009c5e:	881a      	ldrh	r2, [r3, #0]
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8009c64:	7bfb      	ldrb	r3, [r7, #15]
 8009c66:	687a      	ldr	r2, [r7, #4]
 8009c68:	211a      	movs	r1, #26
 8009c6a:	fb01 f303 	mul.w	r3, r1, r3
 8009c6e:	4413      	add	r3, r2
 8009c70:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009c74:	781b      	ldrb	r3, [r3, #0]
 8009c76:	b25b      	sxtb	r3, r3
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	da16      	bge.n	8009caa <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009c7c:	7bfb      	ldrb	r3, [r7, #15]
 8009c7e:	687a      	ldr	r2, [r7, #4]
 8009c80:	211a      	movs	r1, #26
 8009c82:	fb01 f303 	mul.w	r3, r1, r3
 8009c86:	4413      	add	r3, r2
 8009c88:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009c8c:	781a      	ldrb	r2, [r3, #0]
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009c92:	7bfb      	ldrb	r3, [r7, #15]
 8009c94:	687a      	ldr	r2, [r7, #4]
 8009c96:	211a      	movs	r1, #26
 8009c98:	fb01 f303 	mul.w	r3, r1, r3
 8009c9c:	4413      	add	r3, r2
 8009c9e:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8009ca2:	881a      	ldrh	r2, [r3, #0]
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	835a      	strh	r2, [r3, #26]
 8009ca8:	e015      	b.n	8009cd6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009caa:	7bfb      	ldrb	r3, [r7, #15]
 8009cac:	687a      	ldr	r2, [r7, #4]
 8009cae:	211a      	movs	r1, #26
 8009cb0:	fb01 f303 	mul.w	r3, r1, r3
 8009cb4:	4413      	add	r3, r2
 8009cb6:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009cba:	781a      	ldrb	r2, [r3, #0]
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009cc0:	7bfb      	ldrb	r3, [r7, #15]
 8009cc2:	687a      	ldr	r2, [r7, #4]
 8009cc4:	211a      	movs	r1, #26
 8009cc6:	fb01 f303 	mul.w	r3, r1, r3
 8009cca:	4413      	add	r3, r2
 8009ccc:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8009cd0:	881a      	ldrh	r2, [r3, #0]
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	7b9b      	ldrb	r3, [r3, #14]
 8009cda:	4619      	mov	r1, r3
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f001 ff1c 	bl	800bb1a <USBH_AllocPipe>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	461a      	mov	r2, r3
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	7bdb      	ldrb	r3, [r3, #15]
 8009cee:	4619      	mov	r1, r3
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f001 ff12 	bl	800bb1a <USBH_AllocPipe>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	461a      	mov	r2, r3
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	7b59      	ldrb	r1, [r3, #13]
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	7b98      	ldrb	r0, [r3, #14]
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009d12:	68ba      	ldr	r2, [r7, #8]
 8009d14:	8b12      	ldrh	r2, [r2, #24]
 8009d16:	9202      	str	r2, [sp, #8]
 8009d18:	2202      	movs	r2, #2
 8009d1a:	9201      	str	r2, [sp, #4]
 8009d1c:	9300      	str	r3, [sp, #0]
 8009d1e:	4623      	mov	r3, r4
 8009d20:	4602      	mov	r2, r0
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f001 feca 	bl	800babc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	7b19      	ldrb	r1, [r3, #12]
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	7bd8      	ldrb	r0, [r3, #15]
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009d3c:	68ba      	ldr	r2, [r7, #8]
 8009d3e:	8b52      	ldrh	r2, [r2, #26]
 8009d40:	9202      	str	r2, [sp, #8]
 8009d42:	2202      	movs	r2, #2
 8009d44:	9201      	str	r2, [sp, #4]
 8009d46:	9300      	str	r3, [sp, #0]
 8009d48:	4623      	mov	r3, r4
 8009d4a:	4602      	mov	r2, r0
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f001 feb5 	bl	800babc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	2200      	movs	r2, #0
 8009d56:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	7b5b      	ldrb	r3, [r3, #13]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	4619      	mov	r1, r3
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f002 f9c0 	bl	800c0e8 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	7b1b      	ldrb	r3, [r3, #12]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	4619      	mov	r1, r3
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f002 f9b9 	bl	800c0e8 <USBH_LL_SetToggle>

  return USBH_OK;
 8009d76:	2300      	movs	r3, #0
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3714      	adds	r7, #20
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd90      	pop	{r4, r7, pc}

08009d80 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b084      	sub	sp, #16
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009d8e:	69db      	ldr	r3, [r3, #28]
 8009d90:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	781b      	ldrb	r3, [r3, #0]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d00e      	beq.n	8009db8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	781b      	ldrb	r3, [r3, #0]
 8009d9e:	4619      	mov	r1, r3
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f001 feaa 	bl	800bafa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	781b      	ldrb	r3, [r3, #0]
 8009daa:	4619      	mov	r1, r3
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f001 fed5 	bl	800bb5c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	2200      	movs	r2, #0
 8009db6:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	7b1b      	ldrb	r3, [r3, #12]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d00e      	beq.n	8009dde <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	7b1b      	ldrb	r3, [r3, #12]
 8009dc4:	4619      	mov	r1, r3
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f001 fe97 	bl	800bafa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	7b1b      	ldrb	r3, [r3, #12]
 8009dd0:	4619      	mov	r1, r3
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f001 fec2 	bl	800bb5c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	7b5b      	ldrb	r3, [r3, #13]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d00e      	beq.n	8009e04 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	7b5b      	ldrb	r3, [r3, #13]
 8009dea:	4619      	mov	r1, r3
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f001 fe84 	bl	800bafa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	7b5b      	ldrb	r3, [r3, #13]
 8009df6:	4619      	mov	r1, r3
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f001 feaf 	bl	800bb5c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	2200      	movs	r2, #0
 8009e02:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009e0a:	69db      	ldr	r3, [r3, #28]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d00b      	beq.n	8009e28 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009e16:	69db      	ldr	r3, [r3, #28]
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f002 f9f3 	bl	800c204 <free>
    phost->pActiveClass->pData = 0U;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009e24:	2200      	movs	r2, #0
 8009e26:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009e28:	2300      	movs	r3, #0
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3710      	adds	r7, #16
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}

08009e32 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009e32:	b580      	push	{r7, lr}
 8009e34:	b084      	sub	sp, #16
 8009e36:	af00      	add	r7, sp, #0
 8009e38:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009e40:	69db      	ldr	r3, [r3, #28]
 8009e42:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	3340      	adds	r3, #64	@ 0x40
 8009e48:	4619      	mov	r1, r3
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f000 f8b1 	bl	8009fb2 <GetLineCoding>
 8009e50:	4603      	mov	r3, r0
 8009e52:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8009e54:	7afb      	ldrb	r3, [r7, #11]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d105      	bne.n	8009e66 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009e60:	2102      	movs	r1, #2
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8009e66:	7afb      	ldrb	r3, [r7, #11]
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3710      	adds	r7, #16
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}

08009e70 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b084      	sub	sp, #16
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009e78:	2301      	movs	r3, #1
 8009e7a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009e86:	69db      	ldr	r3, [r3, #28]
 8009e88:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8009e90:	2b04      	cmp	r3, #4
 8009e92:	d877      	bhi.n	8009f84 <USBH_CDC_Process+0x114>
 8009e94:	a201      	add	r2, pc, #4	@ (adr r2, 8009e9c <USBH_CDC_Process+0x2c>)
 8009e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e9a:	bf00      	nop
 8009e9c:	08009eb1 	.word	0x08009eb1
 8009ea0:	08009eb7 	.word	0x08009eb7
 8009ea4:	08009ee7 	.word	0x08009ee7
 8009ea8:	08009f5b 	.word	0x08009f5b
 8009eac:	08009f69 	.word	0x08009f69
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	73fb      	strb	r3, [r7, #15]
      break;
 8009eb4:	e06d      	b.n	8009f92 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009eba:	4619      	mov	r1, r3
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f000 f897 	bl	8009ff0 <SetLineCoding>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009ec6:	7bbb      	ldrb	r3, [r7, #14]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d104      	bne.n	8009ed6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	2202      	movs	r2, #2
 8009ed0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009ed4:	e058      	b.n	8009f88 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8009ed6:	7bbb      	ldrb	r3, [r7, #14]
 8009ed8:	2b01      	cmp	r3, #1
 8009eda:	d055      	beq.n	8009f88 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	2204      	movs	r2, #4
 8009ee0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8009ee4:	e050      	b.n	8009f88 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	3340      	adds	r3, #64	@ 0x40
 8009eea:	4619      	mov	r1, r3
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f000 f860 	bl	8009fb2 <GetLineCoding>
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009ef6:	7bbb      	ldrb	r3, [r7, #14]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d126      	bne.n	8009f4a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	2200      	movs	r2, #0
 8009f00:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009f0e:	791b      	ldrb	r3, [r3, #4]
 8009f10:	429a      	cmp	r2, r3
 8009f12:	d13b      	bne.n	8009f8c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8009f1a:	68bb      	ldr	r3, [r7, #8]
 8009f1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009f1e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009f20:	429a      	cmp	r2, r3
 8009f22:	d133      	bne.n	8009f8c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8009f2a:	68bb      	ldr	r3, [r7, #8]
 8009f2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009f2e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009f30:	429a      	cmp	r2, r3
 8009f32:	d12b      	bne.n	8009f8c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009f3c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009f3e:	429a      	cmp	r2, r3
 8009f40:	d124      	bne.n	8009f8c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f000 f958 	bl	800a1f8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009f48:	e020      	b.n	8009f8c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8009f4a:	7bbb      	ldrb	r3, [r7, #14]
 8009f4c:	2b01      	cmp	r3, #1
 8009f4e:	d01d      	beq.n	8009f8c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	2204      	movs	r2, #4
 8009f54:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8009f58:	e018      	b.n	8009f8c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f000 f867 	bl	800a02e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f000 f8da 	bl	800a11a <CDC_ProcessReception>
      break;
 8009f66:	e014      	b.n	8009f92 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8009f68:	2100      	movs	r1, #0
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f001 f81e 	bl	800afac <USBH_ClrFeature>
 8009f70:	4603      	mov	r3, r0
 8009f72:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009f74:	7bbb      	ldrb	r3, [r7, #14]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d10a      	bne.n	8009f90 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8009f82:	e005      	b.n	8009f90 <USBH_CDC_Process+0x120>

    default:
      break;
 8009f84:	bf00      	nop
 8009f86:	e004      	b.n	8009f92 <USBH_CDC_Process+0x122>
      break;
 8009f88:	bf00      	nop
 8009f8a:	e002      	b.n	8009f92 <USBH_CDC_Process+0x122>
      break;
 8009f8c:	bf00      	nop
 8009f8e:	e000      	b.n	8009f92 <USBH_CDC_Process+0x122>
      break;
 8009f90:	bf00      	nop

  }

  return status;
 8009f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3710      	adds	r7, #16
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b083      	sub	sp, #12
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009fa4:	2300      	movs	r3, #0
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	370c      	adds	r7, #12
 8009faa:	46bd      	mov	sp, r7
 8009fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb0:	4770      	bx	lr

08009fb2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8009fb2:	b580      	push	{r7, lr}
 8009fb4:	b082      	sub	sp, #8
 8009fb6:	af00      	add	r7, sp, #0
 8009fb8:	6078      	str	r0, [r7, #4]
 8009fba:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	22a1      	movs	r2, #161	@ 0xa1
 8009fc0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2221      	movs	r2, #33	@ 0x21
 8009fc6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2207      	movs	r2, #7
 8009fd8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	2207      	movs	r2, #7
 8009fde:	4619      	mov	r1, r3
 8009fe0:	6878      	ldr	r0, [r7, #4]
 8009fe2:	f001 fb17 	bl	800b614 <USBH_CtlReq>
 8009fe6:	4603      	mov	r3, r0
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3708      	adds	r7, #8
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}

08009ff0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b082      	sub	sp, #8
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
 8009ff8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2221      	movs	r2, #33	@ 0x21
 8009ffe:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2220      	movs	r2, #32
 800a004:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2200      	movs	r2, #0
 800a00a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2200      	movs	r2, #0
 800a010:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2207      	movs	r2, #7
 800a016:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	2207      	movs	r2, #7
 800a01c:	4619      	mov	r1, r3
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f001 faf8 	bl	800b614 <USBH_CtlReq>
 800a024:	4603      	mov	r3, r0
}
 800a026:	4618      	mov	r0, r3
 800a028:	3708      	adds	r7, #8
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}

0800a02e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800a02e:	b580      	push	{r7, lr}
 800a030:	b086      	sub	sp, #24
 800a032:	af02      	add	r7, sp, #8
 800a034:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a03c:	69db      	ldr	r3, [r3, #28]
 800a03e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a040:	2300      	movs	r3, #0
 800a042:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800a04a:	2b01      	cmp	r3, #1
 800a04c:	d002      	beq.n	800a054 <CDC_ProcessTransmission+0x26>
 800a04e:	2b02      	cmp	r3, #2
 800a050:	d023      	beq.n	800a09a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800a052:	e05e      	b.n	800a112 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a058:	68fa      	ldr	r2, [r7, #12]
 800a05a:	8b12      	ldrh	r2, [r2, #24]
 800a05c:	4293      	cmp	r3, r2
 800a05e:	d90b      	bls.n	800a078 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	69d9      	ldr	r1, [r3, #28]
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	8b1a      	ldrh	r2, [r3, #24]
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	7b5b      	ldrb	r3, [r3, #13]
 800a06c:	2001      	movs	r0, #1
 800a06e:	9000      	str	r0, [sp, #0]
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	f001 fce0 	bl	800ba36 <USBH_BulkSendData>
 800a076:	e00b      	b.n	800a090 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800a080:	b29a      	uxth	r2, r3
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	7b5b      	ldrb	r3, [r3, #13]
 800a086:	2001      	movs	r0, #1
 800a088:	9000      	str	r0, [sp, #0]
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f001 fcd3 	bl	800ba36 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	2202      	movs	r2, #2
 800a094:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800a098:	e03b      	b.n	800a112 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	7b5b      	ldrb	r3, [r3, #13]
 800a09e:	4619      	mov	r1, r3
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f001 fff7 	bl	800c094 <USBH_LL_GetURBState>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800a0aa:	7afb      	ldrb	r3, [r7, #11]
 800a0ac:	2b01      	cmp	r3, #1
 800a0ae:	d128      	bne.n	800a102 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0b4:	68fa      	ldr	r2, [r7, #12]
 800a0b6:	8b12      	ldrh	r2, [r2, #24]
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	d90e      	bls.n	800a0da <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0c0:	68fa      	ldr	r2, [r7, #12]
 800a0c2:	8b12      	ldrh	r2, [r2, #24]
 800a0c4:	1a9a      	subs	r2, r3, r2
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	69db      	ldr	r3, [r3, #28]
 800a0ce:	68fa      	ldr	r2, [r7, #12]
 800a0d0:	8b12      	ldrh	r2, [r2, #24]
 800a0d2:	441a      	add	r2, r3
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	61da      	str	r2, [r3, #28]
 800a0d8:	e002      	b.n	800a0e0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d004      	beq.n	800a0f2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800a0f0:	e00e      	b.n	800a110 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f000 f868 	bl	800a1d0 <USBH_CDC_TransmitCallback>
      break;
 800a100:	e006      	b.n	800a110 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800a102:	7afb      	ldrb	r3, [r7, #11]
 800a104:	2b02      	cmp	r3, #2
 800a106:	d103      	bne.n	800a110 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	2201      	movs	r2, #1
 800a10c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800a110:	bf00      	nop
  }
}
 800a112:	bf00      	nop
 800a114:	3710      	adds	r7, #16
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}

0800a11a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800a11a:	b580      	push	{r7, lr}
 800a11c:	b086      	sub	sp, #24
 800a11e:	af00      	add	r7, sp, #0
 800a120:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a128:	69db      	ldr	r3, [r3, #28]
 800a12a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a12c:	2300      	movs	r3, #0
 800a12e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800a130:	697b      	ldr	r3, [r7, #20]
 800a132:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800a136:	2b03      	cmp	r3, #3
 800a138:	d002      	beq.n	800a140 <CDC_ProcessReception+0x26>
 800a13a:	2b04      	cmp	r3, #4
 800a13c:	d00e      	beq.n	800a15c <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 800a13e:	e043      	b.n	800a1c8 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800a140:	697b      	ldr	r3, [r7, #20]
 800a142:	6a19      	ldr	r1, [r3, #32]
 800a144:	697b      	ldr	r3, [r7, #20]
 800a146:	8b5a      	ldrh	r2, [r3, #26]
 800a148:	697b      	ldr	r3, [r7, #20]
 800a14a:	7b1b      	ldrb	r3, [r3, #12]
 800a14c:	6878      	ldr	r0, [r7, #4]
 800a14e:	f001 fc97 	bl	800ba80 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	2204      	movs	r2, #4
 800a156:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800a15a:	e035      	b.n	800a1c8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800a15c:	697b      	ldr	r3, [r7, #20]
 800a15e:	7b1b      	ldrb	r3, [r3, #12]
 800a160:	4619      	mov	r1, r3
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f001 ff96 	bl	800c094 <USBH_LL_GetURBState>
 800a168:	4603      	mov	r3, r0
 800a16a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800a16c:	7cfb      	ldrb	r3, [r7, #19]
 800a16e:	2b01      	cmp	r3, #1
 800a170:	d129      	bne.n	800a1c6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	7b1b      	ldrb	r3, [r3, #12]
 800a176:	4619      	mov	r1, r3
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f001 fef9 	bl	800bf70 <USBH_LL_GetLastXferSize>
 800a17e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a184:	68fa      	ldr	r2, [r7, #12]
 800a186:	429a      	cmp	r2, r3
 800a188:	d016      	beq.n	800a1b8 <CDC_ProcessReception+0x9e>
 800a18a:	697b      	ldr	r3, [r7, #20]
 800a18c:	8b5b      	ldrh	r3, [r3, #26]
 800a18e:	461a      	mov	r2, r3
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	4293      	cmp	r3, r2
 800a194:	d110      	bne.n	800a1b8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	1ad2      	subs	r2, r2, r3
 800a19e:	697b      	ldr	r3, [r7, #20]
 800a1a0:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800a1a2:	697b      	ldr	r3, [r7, #20]
 800a1a4:	6a1a      	ldr	r2, [r3, #32]
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	441a      	add	r2, r3
 800a1aa:	697b      	ldr	r3, [r7, #20]
 800a1ac:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	2203      	movs	r2, #3
 800a1b2:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800a1b6:	e006      	b.n	800a1c6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800a1b8:	697b      	ldr	r3, [r7, #20]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f000 f80f 	bl	800a1e4 <USBH_CDC_ReceiveCallback>
      break;
 800a1c6:	bf00      	nop
  }
}
 800a1c8:	bf00      	nop
 800a1ca:	3718      	adds	r7, #24
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}

0800a1d0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b083      	sub	sp, #12
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a1d8:	bf00      	nop
 800a1da:	370c      	adds	r7, #12
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e2:	4770      	bx	lr

0800a1e4 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b083      	sub	sp, #12
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a1ec:	bf00      	nop
 800a1ee:	370c      	adds	r7, #12
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f6:	4770      	bx	lr

0800a1f8 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b083      	sub	sp, #12
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a200:	bf00      	nop
 800a202:	370c      	adds	r7, #12
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr

0800a20c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b084      	sub	sp, #16
 800a210:	af00      	add	r7, sp, #0
 800a212:	60f8      	str	r0, [r7, #12]
 800a214:	60b9      	str	r1, [r7, #8]
 800a216:	4613      	mov	r3, r2
 800a218:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d101      	bne.n	800a224 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a220:	2302      	movs	r3, #2
 800a222:	e029      	b.n	800a278 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	79fa      	ldrb	r2, [r7, #7]
 800a228:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	2200      	movs	r2, #0
 800a230:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	2200      	movs	r2, #0
 800a238:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800a23c:	68f8      	ldr	r0, [r7, #12]
 800a23e:	f000 f81f 	bl	800a280 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	2200      	movs	r2, #0
 800a246:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	2200      	movs	r2, #0
 800a24e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	2200      	movs	r2, #0
 800a256:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	2200      	movs	r2, #0
 800a25e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d003      	beq.n	800a270 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	68ba      	ldr	r2, [r7, #8]
 800a26c:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800a270:	68f8      	ldr	r0, [r7, #12]
 800a272:	f001 fdc9 	bl	800be08 <USBH_LL_Init>

  return USBH_OK;
 800a276:	2300      	movs	r3, #0
}
 800a278:	4618      	mov	r0, r3
 800a27a:	3710      	adds	r7, #16
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bd80      	pop	{r7, pc}

0800a280 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b084      	sub	sp, #16
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a288:	2300      	movs	r3, #0
 800a28a:	60fb      	str	r3, [r7, #12]
 800a28c:	e009      	b.n	800a2a2 <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 800a28e:	687a      	ldr	r2, [r7, #4]
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	33e0      	adds	r3, #224	@ 0xe0
 800a294:	009b      	lsls	r3, r3, #2
 800a296:	4413      	add	r3, r2
 800a298:	2200      	movs	r2, #0
 800a29a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	3301      	adds	r3, #1
 800a2a0:	60fb      	str	r3, [r7, #12]
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	2b0f      	cmp	r3, #15
 800a2a6:	d9f2      	bls.n	800a28e <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	60fb      	str	r3, [r7, #12]
 800a2ac:	e009      	b.n	800a2c2 <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 800a2ae:	687a      	ldr	r2, [r7, #4]
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	4413      	add	r3, r2
 800a2b4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	3301      	adds	r3, #1
 800a2c0:	60fb      	str	r3, [r7, #12]
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a2c8:	d3f1      	bcc.n	800a2ae <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2201      	movs	r2, #1
 800a2da:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2200      	movs	r2, #0
 800a2e0:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2240      	movs	r2, #64	@ 0x40
 800a2ee:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2201      	movs	r2, #1
 800a302:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2200      	movs	r2, #0
 800a30a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2200      	movs	r2, #0
 800a312:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	331c      	adds	r3, #28
 800a31a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a31e:	2100      	movs	r1, #0
 800a320:	4618      	mov	r0, r3
 800a322:	f002 f847 	bl	800c3b4 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a32c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a330:	2100      	movs	r1, #0
 800a332:	4618      	mov	r0, r3
 800a334:	f002 f83e 	bl	800c3b4 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800a33e:	2212      	movs	r2, #18
 800a340:	2100      	movs	r1, #0
 800a342:	4618      	mov	r0, r3
 800a344:	f002 f836 	bl	800c3b4 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a34e:	223e      	movs	r2, #62	@ 0x3e
 800a350:	2100      	movs	r1, #0
 800a352:	4618      	mov	r0, r3
 800a354:	f002 f82e 	bl	800c3b4 <memset>

  return USBH_OK;
 800a358:	2300      	movs	r3, #0
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	3710      	adds	r7, #16
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}

0800a362 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a362:	b480      	push	{r7}
 800a364:	b085      	sub	sp, #20
 800a366:	af00      	add	r7, sp, #0
 800a368:	6078      	str	r0, [r7, #4]
 800a36a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a36c:	2300      	movs	r3, #0
 800a36e:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d016      	beq.n	800a3a4 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d10e      	bne.n	800a39e <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800a386:	1c59      	adds	r1, r3, #1
 800a388:	687a      	ldr	r2, [r7, #4]
 800a38a:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800a38e:	687a      	ldr	r2, [r7, #4]
 800a390:	33de      	adds	r3, #222	@ 0xde
 800a392:	6839      	ldr	r1, [r7, #0]
 800a394:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a398:	2300      	movs	r3, #0
 800a39a:	73fb      	strb	r3, [r7, #15]
 800a39c:	e004      	b.n	800a3a8 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a39e:	2302      	movs	r3, #2
 800a3a0:	73fb      	strb	r3, [r7, #15]
 800a3a2:	e001      	b.n	800a3a8 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a3a4:	2302      	movs	r3, #2
 800a3a6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a3a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	3714      	adds	r7, #20
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b4:	4770      	bx	lr

0800a3b6 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a3b6:	b480      	push	{r7}
 800a3b8:	b085      	sub	sp, #20
 800a3ba:	af00      	add	r7, sp, #0
 800a3bc:	6078      	str	r0, [r7, #4]
 800a3be:	460b      	mov	r3, r1
 800a3c0:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800a3cc:	78fa      	ldrb	r2, [r7, #3]
 800a3ce:	429a      	cmp	r2, r3
 800a3d0:	d204      	bcs.n	800a3dc <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	78fa      	ldrb	r2, [r7, #3]
 800a3d6:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800a3da:	e001      	b.n	800a3e0 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a3dc:	2302      	movs	r3, #2
 800a3de:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a3e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3714      	adds	r7, #20
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ec:	4770      	bx	lr

0800a3ee <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a3ee:	b480      	push	{r7}
 800a3f0:	b087      	sub	sp, #28
 800a3f2:	af00      	add	r7, sp, #0
 800a3f4:	6078      	str	r0, [r7, #4]
 800a3f6:	4608      	mov	r0, r1
 800a3f8:	4611      	mov	r1, r2
 800a3fa:	461a      	mov	r2, r3
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	70fb      	strb	r3, [r7, #3]
 800a400:	460b      	mov	r3, r1
 800a402:	70bb      	strb	r3, [r7, #2]
 800a404:	4613      	mov	r3, r2
 800a406:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a408:	2300      	movs	r3, #0
 800a40a:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a40c:	2300      	movs	r3, #0
 800a40e:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a416:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a418:	e025      	b.n	800a466 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a41a:	7dfb      	ldrb	r3, [r7, #23]
 800a41c:	221a      	movs	r2, #26
 800a41e:	fb02 f303 	mul.w	r3, r2, r3
 800a422:	3308      	adds	r3, #8
 800a424:	68fa      	ldr	r2, [r7, #12]
 800a426:	4413      	add	r3, r2
 800a428:	3302      	adds	r3, #2
 800a42a:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	795b      	ldrb	r3, [r3, #5]
 800a430:	78fa      	ldrb	r2, [r7, #3]
 800a432:	429a      	cmp	r2, r3
 800a434:	d002      	beq.n	800a43c <USBH_FindInterface+0x4e>
 800a436:	78fb      	ldrb	r3, [r7, #3]
 800a438:	2bff      	cmp	r3, #255	@ 0xff
 800a43a:	d111      	bne.n	800a460 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a43c:	693b      	ldr	r3, [r7, #16]
 800a43e:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a440:	78ba      	ldrb	r2, [r7, #2]
 800a442:	429a      	cmp	r2, r3
 800a444:	d002      	beq.n	800a44c <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a446:	78bb      	ldrb	r3, [r7, #2]
 800a448:	2bff      	cmp	r3, #255	@ 0xff
 800a44a:	d109      	bne.n	800a460 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a450:	787a      	ldrb	r2, [r7, #1]
 800a452:	429a      	cmp	r2, r3
 800a454:	d002      	beq.n	800a45c <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a456:	787b      	ldrb	r3, [r7, #1]
 800a458:	2bff      	cmp	r3, #255	@ 0xff
 800a45a:	d101      	bne.n	800a460 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a45c:	7dfb      	ldrb	r3, [r7, #23]
 800a45e:	e006      	b.n	800a46e <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a460:	7dfb      	ldrb	r3, [r7, #23]
 800a462:	3301      	adds	r3, #1
 800a464:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a466:	7dfb      	ldrb	r3, [r7, #23]
 800a468:	2b01      	cmp	r3, #1
 800a46a:	d9d6      	bls.n	800a41a <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a46c:	23ff      	movs	r3, #255	@ 0xff
}
 800a46e:	4618      	mov	r0, r3
 800a470:	371c      	adds	r7, #28
 800a472:	46bd      	mov	sp, r7
 800a474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a478:	4770      	bx	lr

0800a47a <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800a47a:	b580      	push	{r7, lr}
 800a47c:	b082      	sub	sp, #8
 800a47e:	af00      	add	r7, sp, #0
 800a480:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f001 fcfc 	bl	800be80 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800a488:	2101      	movs	r1, #1
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f001 fe15 	bl	800c0ba <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a490:	2300      	movs	r3, #0
}
 800a492:	4618      	mov	r0, r3
 800a494:	3708      	adds	r7, #8
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}
	...

0800a49c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b088      	sub	sp, #32
 800a4a0:	af04      	add	r7, sp, #16
 800a4a2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a4a4:	2302      	movs	r3, #2
 800a4a6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800a4b2:	b2db      	uxtb	r3, r3
 800a4b4:	2b01      	cmp	r3, #1
 800a4b6:	d102      	bne.n	800a4be <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2203      	movs	r2, #3
 800a4bc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	781b      	ldrb	r3, [r3, #0]
 800a4c2:	b2db      	uxtb	r3, r3
 800a4c4:	2b0b      	cmp	r3, #11
 800a4c6:	f200 81bc 	bhi.w	800a842 <USBH_Process+0x3a6>
 800a4ca:	a201      	add	r2, pc, #4	@ (adr r2, 800a4d0 <USBH_Process+0x34>)
 800a4cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4d0:	0800a501 	.word	0x0800a501
 800a4d4:	0800a533 	.word	0x0800a533
 800a4d8:	0800a59d 	.word	0x0800a59d
 800a4dc:	0800a7dd 	.word	0x0800a7dd
 800a4e0:	0800a843 	.word	0x0800a843
 800a4e4:	0800a63d 	.word	0x0800a63d
 800a4e8:	0800a783 	.word	0x0800a783
 800a4ec:	0800a673 	.word	0x0800a673
 800a4f0:	0800a693 	.word	0x0800a693
 800a4f4:	0800a6b1 	.word	0x0800a6b1
 800a4f8:	0800a6f5 	.word	0x0800a6f5
 800a4fc:	0800a7c5 	.word	0x0800a7c5
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800a506:	b2db      	uxtb	r3, r3
 800a508:	2b00      	cmp	r3, #0
 800a50a:	f000 819c 	beq.w	800a846 <USBH_Process+0x3aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2201      	movs	r2, #1
 800a512:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a514:	20c8      	movs	r0, #200	@ 0xc8
 800a516:	f001 fe1a 	bl	800c14e <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f001 fd0d 	bl	800bf3a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2200      	movs	r2, #0
 800a524:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2200      	movs	r2, #0
 800a52c:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800a530:	e189      	b.n	800a846 <USBH_Process+0x3aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800a538:	b2db      	uxtb	r3, r3
 800a53a:	2b01      	cmp	r3, #1
 800a53c:	d107      	bne.n	800a54e <USBH_Process+0xb2>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2200      	movs	r2, #0
 800a542:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2202      	movs	r2, #2
 800a54a:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a54c:	e18a      	b.n	800a864 <USBH_Process+0x3c8>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800a554:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a558:	d914      	bls.n	800a584 <USBH_Process+0xe8>
          phost->device.RstCnt++;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800a560:	3301      	adds	r3, #1
 800a562:	b2da      	uxtb	r2, r3
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800a570:	2b03      	cmp	r3, #3
 800a572:	d903      	bls.n	800a57c <USBH_Process+0xe0>
            phost->gState = HOST_ABORT_STATE;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	220d      	movs	r2, #13
 800a578:	701a      	strb	r2, [r3, #0]
      break;
 800a57a:	e173      	b.n	800a864 <USBH_Process+0x3c8>
            phost->gState = HOST_IDLE;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2200      	movs	r2, #0
 800a580:	701a      	strb	r2, [r3, #0]
      break;
 800a582:	e16f      	b.n	800a864 <USBH_Process+0x3c8>
          phost->Timeout += 10U;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800a58a:	f103 020a 	add.w	r2, r3, #10
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800a594:	200a      	movs	r0, #10
 800a596:	f001 fdda 	bl	800c14e <USBH_Delay>
      break;
 800a59a:	e163      	b.n	800a864 <USBH_Process+0x3c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d005      	beq.n	800a5b2 <USBH_Process+0x116>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a5ac:	2104      	movs	r1, #4
 800a5ae:	6878      	ldr	r0, [r7, #4]
 800a5b0:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a5b2:	2064      	movs	r0, #100	@ 0x64
 800a5b4:	f001 fdcb 	bl	800c14e <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f001 fc97 	bl	800beec <USBH_LL_GetSpeed>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	461a      	mov	r2, r3
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2205      	movs	r2, #5
 800a5cc:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a5ce:	2100      	movs	r1, #0
 800a5d0:	6878      	ldr	r0, [r7, #4]
 800a5d2:	f001 faa2 	bl	800bb1a <USBH_AllocPipe>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	461a      	mov	r2, r3
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a5de:	2180      	movs	r1, #128	@ 0x80
 800a5e0:	6878      	ldr	r0, [r7, #4]
 800a5e2:	f001 fa9a 	bl	800bb1a <USBH_AllocPipe>
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	461a      	mov	r2, r3
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	7919      	ldrb	r1, [r3, #4]
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a5fe:	687a      	ldr	r2, [r7, #4]
 800a600:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a602:	9202      	str	r2, [sp, #8]
 800a604:	2200      	movs	r2, #0
 800a606:	9201      	str	r2, [sp, #4]
 800a608:	9300      	str	r3, [sp, #0]
 800a60a:	4603      	mov	r3, r0
 800a60c:	2280      	movs	r2, #128	@ 0x80
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f001 fa54 	bl	800babc <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	7959      	ldrb	r1, [r3, #5]
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a624:	687a      	ldr	r2, [r7, #4]
 800a626:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a628:	9202      	str	r2, [sp, #8]
 800a62a:	2200      	movs	r2, #0
 800a62c:	9201      	str	r2, [sp, #4]
 800a62e:	9300      	str	r3, [sp, #0]
 800a630:	4603      	mov	r3, r0
 800a632:	2200      	movs	r2, #0
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f001 fa41 	bl	800babc <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a63a:	e113      	b.n	800a864 <USBH_Process+0x3c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	f000 f917 	bl	800a870 <USBH_HandleEnum>
 800a642:	4603      	mov	r3, r0
 800a644:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a646:	7bbb      	ldrb	r3, [r7, #14]
 800a648:	b2db      	uxtb	r3, r3
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	f040 80fd 	bne.w	800a84a <USBH_Process+0x3ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2200      	movs	r2, #0
 800a654:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800a65e:	2b01      	cmp	r3, #1
 800a660:	d103      	bne.n	800a66a <USBH_Process+0x1ce>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2208      	movs	r2, #8
 800a666:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800a668:	e0ef      	b.n	800a84a <USBH_Process+0x3ae>
          phost->gState = HOST_INPUT;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2207      	movs	r2, #7
 800a66e:	701a      	strb	r2, [r3, #0]
      break;
 800a670:	e0eb      	b.n	800a84a <USBH_Process+0x3ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a678:	2b00      	cmp	r3, #0
 800a67a:	f000 80e8 	beq.w	800a84e <USBH_Process+0x3b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a684:	2101      	movs	r1, #1
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2208      	movs	r2, #8
 800a68e:	701a      	strb	r2, [r3, #0]
#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 800a690:	e0dd      	b.n	800a84e <USBH_Process+0x3b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800a698:	4619      	mov	r1, r3
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f000 fc3f 	bl	800af1e <USBH_SetCfg>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	f040 80d5 	bne.w	800a852 <USBH_Process+0x3b6>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2209      	movs	r2, #9
 800a6ac:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a6ae:	e0d0      	b.n	800a852 <USBH_Process+0x3b6>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800a6b6:	f003 0320 	and.w	r3, r3, #32
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d016      	beq.n	800a6ec <USBH_Process+0x250>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800a6be:	2101      	movs	r1, #1
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	f000 fc4f 	bl	800af64 <USBH_SetFeature>
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a6ca:	7bbb      	ldrb	r3, [r7, #14]
 800a6cc:	b2db      	uxtb	r3, r3
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d103      	bne.n	800a6da <USBH_Process+0x23e>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	220a      	movs	r2, #10
 800a6d6:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a6d8:	e0bd      	b.n	800a856 <USBH_Process+0x3ba>
        else if (status == USBH_NOT_SUPPORTED)
 800a6da:	7bbb      	ldrb	r3, [r7, #14]
 800a6dc:	b2db      	uxtb	r3, r3
 800a6de:	2b03      	cmp	r3, #3
 800a6e0:	f040 80b9 	bne.w	800a856 <USBH_Process+0x3ba>
          phost->gState = HOST_CHECK_CLASS;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	220a      	movs	r2, #10
 800a6e8:	701a      	strb	r2, [r3, #0]
      break;
 800a6ea:	e0b4      	b.n	800a856 <USBH_Process+0x3ba>
        phost->gState = HOST_CHECK_CLASS;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	220a      	movs	r2, #10
 800a6f0:	701a      	strb	r2, [r3, #0]
      break;
 800a6f2:	e0b0      	b.n	800a856 <USBH_Process+0x3ba>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	f000 80ad 	beq.w	800a85a <USBH_Process+0x3be>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2200      	movs	r2, #0
 800a704:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a708:	2300      	movs	r3, #0
 800a70a:	73fb      	strb	r3, [r7, #15]
 800a70c:	e016      	b.n	800a73c <USBH_Process+0x2a0>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a70e:	7bfa      	ldrb	r2, [r7, #15]
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	32de      	adds	r2, #222	@ 0xde
 800a714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a718:	791a      	ldrb	r2, [r3, #4]
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800a720:	429a      	cmp	r2, r3
 800a722:	d108      	bne.n	800a736 <USBH_Process+0x29a>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a724:	7bfa      	ldrb	r2, [r7, #15]
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	32de      	adds	r2, #222	@ 0xde
 800a72a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800a734:	e005      	b.n	800a742 <USBH_Process+0x2a6>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a736:	7bfb      	ldrb	r3, [r7, #15]
 800a738:	3301      	adds	r3, #1
 800a73a:	73fb      	strb	r3, [r7, #15]
 800a73c:	7bfb      	ldrb	r3, [r7, #15]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d0e5      	beq.n	800a70e <USBH_Process+0x272>
          }
        }

        if (phost->pActiveClass != NULL)
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d016      	beq.n	800a77a <USBH_Process+0x2de>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a752:	689b      	ldr	r3, [r3, #8]
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	4798      	blx	r3
 800a758:	4603      	mov	r3, r0
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d109      	bne.n	800a772 <USBH_Process+0x2d6>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2206      	movs	r2, #6
 800a762:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a76a:	2103      	movs	r1, #3
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	4798      	blx	r3
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a770:	e073      	b.n	800a85a <USBH_Process+0x3be>
            phost->gState = HOST_ABORT_STATE;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	220d      	movs	r2, #13
 800a776:	701a      	strb	r2, [r3, #0]
      break;
 800a778:	e06f      	b.n	800a85a <USBH_Process+0x3be>
          phost->gState = HOST_ABORT_STATE;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	220d      	movs	r2, #13
 800a77e:	701a      	strb	r2, [r3, #0]
      break;
 800a780:	e06b      	b.n	800a85a <USBH_Process+0x3be>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d017      	beq.n	800a7bc <USBH_Process+0x320>
      {
        status = phost->pActiveClass->Requests(phost);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a792:	691b      	ldr	r3, [r3, #16]
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	4798      	blx	r3
 800a798:	4603      	mov	r3, r0
 800a79a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a79c:	7bbb      	ldrb	r3, [r7, #14]
 800a79e:	b2db      	uxtb	r3, r3
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d103      	bne.n	800a7ac <USBH_Process+0x310>
        {
          phost->gState = HOST_CLASS;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	220b      	movs	r2, #11
 800a7a8:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a7aa:	e058      	b.n	800a85e <USBH_Process+0x3c2>
        else if (status == USBH_FAIL)
 800a7ac:	7bbb      	ldrb	r3, [r7, #14]
 800a7ae:	b2db      	uxtb	r3, r3
 800a7b0:	2b02      	cmp	r3, #2
 800a7b2:	d154      	bne.n	800a85e <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	220d      	movs	r2, #13
 800a7b8:	701a      	strb	r2, [r3, #0]
      break;
 800a7ba:	e050      	b.n	800a85e <USBH_Process+0x3c2>
        phost->gState = HOST_ABORT_STATE;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	220d      	movs	r2, #13
 800a7c0:	701a      	strb	r2, [r3, #0]
      break;
 800a7c2:	e04c      	b.n	800a85e <USBH_Process+0x3c2>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d049      	beq.n	800a862 <USBH_Process+0x3c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a7d4:	695b      	ldr	r3, [r3, #20]
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	4798      	blx	r3
      }
      break;
 800a7da:	e042      	b.n	800a862 <USBH_Process+0x3c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	f7ff fd4b 	bl	800a280 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d009      	beq.n	800a808 <USBH_Process+0x36c>
      {
        phost->pActiveClass->DeInit(phost);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a7fa:	68db      	ldr	r3, [r3, #12]
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2200      	movs	r2, #0
 800a804:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d005      	beq.n	800a81e <USBH_Process+0x382>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a818:	2105      	movs	r1, #5
 800a81a:	6878      	ldr	r0, [r7, #4]
 800a81c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800a824:	b2db      	uxtb	r3, r3
 800a826:	2b01      	cmp	r3, #1
 800a828:	d107      	bne.n	800a83a <USBH_Process+0x39e>
      {
        phost->device.is_ReEnumerated = 0U;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2200      	movs	r2, #0
 800a82e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	f7ff fe21 	bl	800a47a <USBH_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a838:	e014      	b.n	800a864 <USBH_Process+0x3c8>
        (void)USBH_LL_Start(phost);
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f001 fb20 	bl	800be80 <USBH_LL_Start>
      break;
 800a840:	e010      	b.n	800a864 <USBH_Process+0x3c8>

    case HOST_ABORT_STATE:
    default :
      break;
 800a842:	bf00      	nop
 800a844:	e00e      	b.n	800a864 <USBH_Process+0x3c8>
      break;
 800a846:	bf00      	nop
 800a848:	e00c      	b.n	800a864 <USBH_Process+0x3c8>
      break;
 800a84a:	bf00      	nop
 800a84c:	e00a      	b.n	800a864 <USBH_Process+0x3c8>
    break;
 800a84e:	bf00      	nop
 800a850:	e008      	b.n	800a864 <USBH_Process+0x3c8>
      break;
 800a852:	bf00      	nop
 800a854:	e006      	b.n	800a864 <USBH_Process+0x3c8>
      break;
 800a856:	bf00      	nop
 800a858:	e004      	b.n	800a864 <USBH_Process+0x3c8>
      break;
 800a85a:	bf00      	nop
 800a85c:	e002      	b.n	800a864 <USBH_Process+0x3c8>
      break;
 800a85e:	bf00      	nop
 800a860:	e000      	b.n	800a864 <USBH_Process+0x3c8>
      break;
 800a862:	bf00      	nop
  }
  return USBH_OK;
 800a864:	2300      	movs	r3, #0
}
 800a866:	4618      	mov	r0, r3
 800a868:	3710      	adds	r7, #16
 800a86a:	46bd      	mov	sp, r7
 800a86c:	bd80      	pop	{r7, pc}
 800a86e:	bf00      	nop

0800a870 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b088      	sub	sp, #32
 800a874:	af04      	add	r7, sp, #16
 800a876:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a878:	2301      	movs	r3, #1
 800a87a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a87c:	2301      	movs	r3, #1
 800a87e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	785b      	ldrb	r3, [r3, #1]
 800a884:	2b07      	cmp	r3, #7
 800a886:	f200 81bd 	bhi.w	800ac04 <USBH_HandleEnum+0x394>
 800a88a:	a201      	add	r2, pc, #4	@ (adr r2, 800a890 <USBH_HandleEnum+0x20>)
 800a88c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a890:	0800a8b1 	.word	0x0800a8b1
 800a894:	0800a96b 	.word	0x0800a96b
 800a898:	0800a9d5 	.word	0x0800a9d5
 800a89c:	0800aa5f 	.word	0x0800aa5f
 800a8a0:	0800aac9 	.word	0x0800aac9
 800a8a4:	0800ab39 	.word	0x0800ab39
 800a8a8:	0800ab7f 	.word	0x0800ab7f
 800a8ac:	0800abc5 	.word	0x0800abc5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a8b0:	2108      	movs	r1, #8
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	f000 fa50 	bl	800ad58 <USBH_Get_DevDesc>
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a8bc:	7bbb      	ldrb	r3, [r7, #14]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d12e      	bne.n	800a920 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	7919      	ldrb	r1, [r3, #4]
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a8e2:	687a      	ldr	r2, [r7, #4]
 800a8e4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a8e6:	9202      	str	r2, [sp, #8]
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	9201      	str	r2, [sp, #4]
 800a8ec:	9300      	str	r3, [sp, #0]
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	2280      	movs	r2, #128	@ 0x80
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f001 f8e2 	bl	800babc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	7959      	ldrb	r1, [r3, #5]
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a908:	687a      	ldr	r2, [r7, #4]
 800a90a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a90c:	9202      	str	r2, [sp, #8]
 800a90e:	2200      	movs	r2, #0
 800a910:	9201      	str	r2, [sp, #4]
 800a912:	9300      	str	r3, [sp, #0]
 800a914:	4603      	mov	r3, r0
 800a916:	2200      	movs	r2, #0
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f001 f8cf 	bl	800babc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a91e:	e173      	b.n	800ac08 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a920:	7bbb      	ldrb	r3, [r7, #14]
 800a922:	2b03      	cmp	r3, #3
 800a924:	f040 8170 	bne.w	800ac08 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a92e:	3301      	adds	r3, #1
 800a930:	b2da      	uxtb	r2, r3
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a93e:	2b03      	cmp	r3, #3
 800a940:	d903      	bls.n	800a94a <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	220d      	movs	r2, #13
 800a946:	701a      	strb	r2, [r3, #0]
      break;
 800a948:	e15e      	b.n	800ac08 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	795b      	ldrb	r3, [r3, #5]
 800a94e:	4619      	mov	r1, r3
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f001 f903 	bl	800bb5c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	791b      	ldrb	r3, [r3, #4]
 800a95a:	4619      	mov	r1, r3
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f001 f8fd 	bl	800bb5c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2200      	movs	r2, #0
 800a966:	701a      	strb	r2, [r3, #0]
      break;
 800a968:	e14e      	b.n	800ac08 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a96a:	2112      	movs	r1, #18
 800a96c:	6878      	ldr	r0, [r7, #4]
 800a96e:	f000 f9f3 	bl	800ad58 <USBH_Get_DevDesc>
 800a972:	4603      	mov	r3, r0
 800a974:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a976:	7bbb      	ldrb	r3, [r7, #14]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d103      	bne.n	800a984 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2202      	movs	r2, #2
 800a980:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a982:	e143      	b.n	800ac0c <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a984:	7bbb      	ldrb	r3, [r7, #14]
 800a986:	2b03      	cmp	r3, #3
 800a988:	f040 8140 	bne.w	800ac0c <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a992:	3301      	adds	r3, #1
 800a994:	b2da      	uxtb	r2, r3
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a9a2:	2b03      	cmp	r3, #3
 800a9a4:	d903      	bls.n	800a9ae <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	220d      	movs	r2, #13
 800a9aa:	701a      	strb	r2, [r3, #0]
      break;
 800a9ac:	e12e      	b.n	800ac0c <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	795b      	ldrb	r3, [r3, #5]
 800a9b2:	4619      	mov	r1, r3
 800a9b4:	6878      	ldr	r0, [r7, #4]
 800a9b6:	f001 f8d1 	bl	800bb5c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	791b      	ldrb	r3, [r3, #4]
 800a9be:	4619      	mov	r1, r3
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f001 f8cb 	bl	800bb5c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	701a      	strb	r2, [r3, #0]
      break;
 800a9d2:	e11b      	b.n	800ac0c <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a9d4:	2101      	movs	r1, #1
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f000 fa7d 	bl	800aed6 <USBH_SetAddress>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a9e0:	7bbb      	ldrb	r3, [r7, #14]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d130      	bne.n	800aa48 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800a9e6:	2002      	movs	r0, #2
 800a9e8:	f001 fbb1 	bl	800c14e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2201      	movs	r2, #1
 800a9f0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2203      	movs	r2, #3
 800a9f8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	7919      	ldrb	r1, [r3, #4]
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800aa0a:	687a      	ldr	r2, [r7, #4]
 800aa0c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800aa0e:	9202      	str	r2, [sp, #8]
 800aa10:	2200      	movs	r2, #0
 800aa12:	9201      	str	r2, [sp, #4]
 800aa14:	9300      	str	r3, [sp, #0]
 800aa16:	4603      	mov	r3, r0
 800aa18:	2280      	movs	r2, #128	@ 0x80
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f001 f84e 	bl	800babc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	7959      	ldrb	r1, [r3, #5]
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800aa30:	687a      	ldr	r2, [r7, #4]
 800aa32:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800aa34:	9202      	str	r2, [sp, #8]
 800aa36:	2200      	movs	r2, #0
 800aa38:	9201      	str	r2, [sp, #4]
 800aa3a:	9300      	str	r3, [sp, #0]
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	2200      	movs	r2, #0
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f001 f83b 	bl	800babc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800aa46:	e0e3      	b.n	800ac10 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aa48:	7bbb      	ldrb	r3, [r7, #14]
 800aa4a:	2b03      	cmp	r3, #3
 800aa4c:	f040 80e0 	bne.w	800ac10 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	220d      	movs	r2, #13
 800aa54:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	705a      	strb	r2, [r3, #1]
      break;
 800aa5c:	e0d8      	b.n	800ac10 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800aa5e:	2109      	movs	r1, #9
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	f000 f9a5 	bl	800adb0 <USBH_Get_CfgDesc>
 800aa66:	4603      	mov	r3, r0
 800aa68:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aa6a:	7bbb      	ldrb	r3, [r7, #14]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d103      	bne.n	800aa78 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2204      	movs	r2, #4
 800aa74:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800aa76:	e0cd      	b.n	800ac14 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aa78:	7bbb      	ldrb	r3, [r7, #14]
 800aa7a:	2b03      	cmp	r3, #3
 800aa7c:	f040 80ca 	bne.w	800ac14 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800aa86:	3301      	adds	r3, #1
 800aa88:	b2da      	uxtb	r2, r3
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800aa96:	2b03      	cmp	r3, #3
 800aa98:	d903      	bls.n	800aaa2 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	220d      	movs	r2, #13
 800aa9e:	701a      	strb	r2, [r3, #0]
      break;
 800aaa0:	e0b8      	b.n	800ac14 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	795b      	ldrb	r3, [r3, #5]
 800aaa6:	4619      	mov	r1, r3
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f001 f857 	bl	800bb5c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	791b      	ldrb	r3, [r3, #4]
 800aab2:	4619      	mov	r1, r3
 800aab4:	6878      	ldr	r0, [r7, #4]
 800aab6:	f001 f851 	bl	800bb5c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2200      	movs	r2, #0
 800aabe:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2200      	movs	r2, #0
 800aac4:	701a      	strb	r2, [r3, #0]
      break;
 800aac6:	e0a5      	b.n	800ac14 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800aace:	4619      	mov	r1, r3
 800aad0:	6878      	ldr	r0, [r7, #4]
 800aad2:	f000 f96d 	bl	800adb0 <USBH_Get_CfgDesc>
 800aad6:	4603      	mov	r3, r0
 800aad8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aada:	7bbb      	ldrb	r3, [r7, #14]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d103      	bne.n	800aae8 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2205      	movs	r2, #5
 800aae4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800aae6:	e097      	b.n	800ac18 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aae8:	7bbb      	ldrb	r3, [r7, #14]
 800aaea:	2b03      	cmp	r3, #3
 800aaec:	f040 8094 	bne.w	800ac18 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800aaf6:	3301      	adds	r3, #1
 800aaf8:	b2da      	uxtb	r2, r3
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800ab06:	2b03      	cmp	r3, #3
 800ab08:	d903      	bls.n	800ab12 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	220d      	movs	r2, #13
 800ab0e:	701a      	strb	r2, [r3, #0]
      break;
 800ab10:	e082      	b.n	800ac18 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	795b      	ldrb	r3, [r3, #5]
 800ab16:	4619      	mov	r1, r3
 800ab18:	6878      	ldr	r0, [r7, #4]
 800ab1a:	f001 f81f 	bl	800bb5c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	791b      	ldrb	r3, [r3, #4]
 800ab22:	4619      	mov	r1, r3
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f001 f819 	bl	800bb5c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2200      	movs	r2, #0
 800ab34:	701a      	strb	r2, [r3, #0]
      break;
 800ab36:	e06f      	b.n	800ac18 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d019      	beq.n	800ab76 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ab4e:	23ff      	movs	r3, #255	@ 0xff
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f000 f957 	bl	800ae04 <USBH_Get_StringDesc>
 800ab56:	4603      	mov	r3, r0
 800ab58:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ab5a:	7bbb      	ldrb	r3, [r7, #14]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d103      	bne.n	800ab68 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2206      	movs	r2, #6
 800ab64:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800ab66:	e059      	b.n	800ac1c <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ab68:	7bbb      	ldrb	r3, [r7, #14]
 800ab6a:	2b03      	cmp	r3, #3
 800ab6c:	d156      	bne.n	800ac1c <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	2206      	movs	r2, #6
 800ab72:	705a      	strb	r2, [r3, #1]
      break;
 800ab74:	e052      	b.n	800ac1c <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2206      	movs	r2, #6
 800ab7a:	705a      	strb	r2, [r3, #1]
      break;
 800ab7c:	e04e      	b.n	800ac1c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d019      	beq.n	800abbc <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ab94:	23ff      	movs	r3, #255	@ 0xff
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	f000 f934 	bl	800ae04 <USBH_Get_StringDesc>
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800aba0:	7bbb      	ldrb	r3, [r7, #14]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d103      	bne.n	800abae <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2207      	movs	r2, #7
 800abaa:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800abac:	e038      	b.n	800ac20 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800abae:	7bbb      	ldrb	r3, [r7, #14]
 800abb0:	2b03      	cmp	r3, #3
 800abb2:	d135      	bne.n	800ac20 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2207      	movs	r2, #7
 800abb8:	705a      	strb	r2, [r3, #1]
      break;
 800abba:	e031      	b.n	800ac20 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2207      	movs	r2, #7
 800abc0:	705a      	strb	r2, [r3, #1]
      break;
 800abc2:	e02d      	b.n	800ac20 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d017      	beq.n	800abfe <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800abda:	23ff      	movs	r3, #255	@ 0xff
 800abdc:	6878      	ldr	r0, [r7, #4]
 800abde:	f000 f911 	bl	800ae04 <USBH_Get_StringDesc>
 800abe2:	4603      	mov	r3, r0
 800abe4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800abe6:	7bbb      	ldrb	r3, [r7, #14]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d102      	bne.n	800abf2 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800abec:	2300      	movs	r3, #0
 800abee:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800abf0:	e018      	b.n	800ac24 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800abf2:	7bbb      	ldrb	r3, [r7, #14]
 800abf4:	2b03      	cmp	r3, #3
 800abf6:	d115      	bne.n	800ac24 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800abf8:	2300      	movs	r3, #0
 800abfa:	73fb      	strb	r3, [r7, #15]
      break;
 800abfc:	e012      	b.n	800ac24 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800abfe:	2300      	movs	r3, #0
 800ac00:	73fb      	strb	r3, [r7, #15]
      break;
 800ac02:	e00f      	b.n	800ac24 <USBH_HandleEnum+0x3b4>

    default:
      break;
 800ac04:	bf00      	nop
 800ac06:	e00e      	b.n	800ac26 <USBH_HandleEnum+0x3b6>
      break;
 800ac08:	bf00      	nop
 800ac0a:	e00c      	b.n	800ac26 <USBH_HandleEnum+0x3b6>
      break;
 800ac0c:	bf00      	nop
 800ac0e:	e00a      	b.n	800ac26 <USBH_HandleEnum+0x3b6>
      break;
 800ac10:	bf00      	nop
 800ac12:	e008      	b.n	800ac26 <USBH_HandleEnum+0x3b6>
      break;
 800ac14:	bf00      	nop
 800ac16:	e006      	b.n	800ac26 <USBH_HandleEnum+0x3b6>
      break;
 800ac18:	bf00      	nop
 800ac1a:	e004      	b.n	800ac26 <USBH_HandleEnum+0x3b6>
      break;
 800ac1c:	bf00      	nop
 800ac1e:	e002      	b.n	800ac26 <USBH_HandleEnum+0x3b6>
      break;
 800ac20:	bf00      	nop
 800ac22:	e000      	b.n	800ac26 <USBH_HandleEnum+0x3b6>
      break;
 800ac24:	bf00      	nop
  }
  return Status;
 800ac26:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	3710      	adds	r7, #16
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}

0800ac30 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800ac30:	b480      	push	{r7}
 800ac32:	b083      	sub	sp, #12
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
 800ac38:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	683a      	ldr	r2, [r7, #0]
 800ac3e:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800ac42:	bf00      	nop
 800ac44:	370c      	adds	r7, #12
 800ac46:	46bd      	mov	sp, r7
 800ac48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4c:	4770      	bx	lr

0800ac4e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800ac4e:	b580      	push	{r7, lr}
 800ac50:	b082      	sub	sp, #8
 800ac52:	af00      	add	r7, sp, #0
 800ac54:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ac5c:	1c5a      	adds	r2, r3, #1
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	f000 f804 	bl	800ac72 <USBH_HandleSof>
}
 800ac6a:	bf00      	nop
 800ac6c:	3708      	adds	r7, #8
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bd80      	pop	{r7, pc}

0800ac72 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800ac72:	b580      	push	{r7, lr}
 800ac74:	b082      	sub	sp, #8
 800ac76:	af00      	add	r7, sp, #0
 800ac78:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	781b      	ldrb	r3, [r3, #0]
 800ac7e:	b2db      	uxtb	r3, r3
 800ac80:	2b0b      	cmp	r3, #11
 800ac82:	d10a      	bne.n	800ac9a <USBH_HandleSof+0x28>
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d005      	beq.n	800ac9a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ac94:	699b      	ldr	r3, [r3, #24]
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	4798      	blx	r3
  }
}
 800ac9a:	bf00      	nop
 800ac9c:	3708      	adds	r7, #8
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}

0800aca2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800aca2:	b480      	push	{r7}
 800aca4:	b083      	sub	sp, #12
 800aca6:	af00      	add	r7, sp, #0
 800aca8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	2201      	movs	r2, #1
 800acae:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
 800acb2:	bf00      	nop
}
 800acb4:	370c      	adds	r7, #12
 800acb6:	46bd      	mov	sp, r7
 800acb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbc:	4770      	bx	lr

0800acbe <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800acbe:	b480      	push	{r7}
 800acc0:	b083      	sub	sp, #12
 800acc2:	af00      	add	r7, sp, #0
 800acc4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	2200      	movs	r2, #0
 800acca:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2201      	movs	r2, #1
 800acd2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 800acd6:	bf00      	nop
}
 800acd8:	370c      	adds	r7, #12
 800acda:	46bd      	mov	sp, r7
 800acdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace0:	4770      	bx	lr

0800ace2 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800ace2:	b480      	push	{r7}
 800ace4:	b083      	sub	sp, #12
 800ace6:	af00      	add	r7, sp, #0
 800ace8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2201      	movs	r2, #1
 800acee:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2200      	movs	r2, #0
 800acf6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	2200      	movs	r2, #0
 800acfe:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800ad02:	2300      	movs	r3, #0
}
 800ad04:	4618      	mov	r0, r3
 800ad06:	370c      	adds	r7, #12
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0e:	4770      	bx	lr

0800ad10 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b082      	sub	sp, #8
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2201      	movs	r2, #1
 800ad1c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2200      	movs	r2, #0
 800ad24:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f001 f8c0 	bl	800beb6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	791b      	ldrb	r3, [r3, #4]
 800ad3a:	4619      	mov	r1, r3
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f000 ff0d 	bl	800bb5c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	795b      	ldrb	r3, [r3, #5]
 800ad46:	4619      	mov	r1, r3
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f000 ff07 	bl	800bb5c <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800ad4e:	2300      	movs	r3, #0
}
 800ad50:	4618      	mov	r0, r3
 800ad52:	3708      	adds	r7, #8
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bd80      	pop	{r7, pc}

0800ad58 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b086      	sub	sp, #24
 800ad5c:	af02      	add	r7, sp, #8
 800ad5e:	6078      	str	r0, [r7, #4]
 800ad60:	460b      	mov	r3, r1
 800ad62:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800ad64:	887b      	ldrh	r3, [r7, #2]
 800ad66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad6a:	d901      	bls.n	800ad70 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800ad6c:	2303      	movs	r3, #3
 800ad6e:	e01b      	b.n	800ada8 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800ad76:	887b      	ldrh	r3, [r7, #2]
 800ad78:	9300      	str	r3, [sp, #0]
 800ad7a:	4613      	mov	r3, r2
 800ad7c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ad80:	2100      	movs	r1, #0
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f000 f872 	bl	800ae6c <USBH_GetDescriptor>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800ad8c:	7bfb      	ldrb	r3, [r7, #15]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d109      	bne.n	800ada6 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800ad98:	887a      	ldrh	r2, [r7, #2]
 800ad9a:	4619      	mov	r1, r3
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f000 f929 	bl	800aff4 <USBH_ParseDevDesc>
 800ada2:	4603      	mov	r3, r0
 800ada4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ada6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ada8:	4618      	mov	r0, r3
 800adaa:	3710      	adds	r7, #16
 800adac:	46bd      	mov	sp, r7
 800adae:	bd80      	pop	{r7, pc}

0800adb0 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b086      	sub	sp, #24
 800adb4:	af02      	add	r7, sp, #8
 800adb6:	6078      	str	r0, [r7, #4]
 800adb8:	460b      	mov	r3, r1
 800adba:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	331c      	adds	r3, #28
 800adc0:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800adc2:	887b      	ldrh	r3, [r7, #2]
 800adc4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800adc8:	d901      	bls.n	800adce <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800adca:	2303      	movs	r3, #3
 800adcc:	e016      	b.n	800adfc <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800adce:	887b      	ldrh	r3, [r7, #2]
 800add0:	9300      	str	r3, [sp, #0]
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800add8:	2100      	movs	r1, #0
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f000 f846 	bl	800ae6c <USBH_GetDescriptor>
 800ade0:	4603      	mov	r3, r0
 800ade2:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800ade4:	7bfb      	ldrb	r3, [r7, #15]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d107      	bne.n	800adfa <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800adea:	887b      	ldrh	r3, [r7, #2]
 800adec:	461a      	mov	r2, r3
 800adee:	68b9      	ldr	r1, [r7, #8]
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f000 f9af 	bl	800b154 <USBH_ParseCfgDesc>
 800adf6:	4603      	mov	r3, r0
 800adf8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800adfa:	7bfb      	ldrb	r3, [r7, #15]
}
 800adfc:	4618      	mov	r0, r3
 800adfe:	3710      	adds	r7, #16
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bd80      	pop	{r7, pc}

0800ae04 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b088      	sub	sp, #32
 800ae08:	af02      	add	r7, sp, #8
 800ae0a:	60f8      	str	r0, [r7, #12]
 800ae0c:	607a      	str	r2, [r7, #4]
 800ae0e:	461a      	mov	r2, r3
 800ae10:	460b      	mov	r3, r1
 800ae12:	72fb      	strb	r3, [r7, #11]
 800ae14:	4613      	mov	r3, r2
 800ae16:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800ae18:	893b      	ldrh	r3, [r7, #8]
 800ae1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae1e:	d802      	bhi.n	800ae26 <USBH_Get_StringDesc+0x22>
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d101      	bne.n	800ae2a <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800ae26:	2303      	movs	r3, #3
 800ae28:	e01c      	b.n	800ae64 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800ae2a:	7afb      	ldrb	r3, [r7, #11]
 800ae2c:	b29b      	uxth	r3, r3
 800ae2e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800ae32:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800ae3a:	893b      	ldrh	r3, [r7, #8]
 800ae3c:	9300      	str	r3, [sp, #0]
 800ae3e:	460b      	mov	r3, r1
 800ae40:	2100      	movs	r1, #0
 800ae42:	68f8      	ldr	r0, [r7, #12]
 800ae44:	f000 f812 	bl	800ae6c <USBH_GetDescriptor>
 800ae48:	4603      	mov	r3, r0
 800ae4a:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800ae4c:	7dfb      	ldrb	r3, [r7, #23]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d107      	bne.n	800ae62 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800ae58:	893a      	ldrh	r2, [r7, #8]
 800ae5a:	6879      	ldr	r1, [r7, #4]
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	f000 fb8c 	bl	800b57a <USBH_ParseStringDesc>
  }

  return status;
 800ae62:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae64:	4618      	mov	r0, r3
 800ae66:	3718      	adds	r7, #24
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bd80      	pop	{r7, pc}

0800ae6c <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b084      	sub	sp, #16
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	60f8      	str	r0, [r7, #12]
 800ae74:	607b      	str	r3, [r7, #4]
 800ae76:	460b      	mov	r3, r1
 800ae78:	72fb      	strb	r3, [r7, #11]
 800ae7a:	4613      	mov	r3, r2
 800ae7c:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	789b      	ldrb	r3, [r3, #2]
 800ae82:	2b01      	cmp	r3, #1
 800ae84:	d11c      	bne.n	800aec0 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800ae86:	7afb      	ldrb	r3, [r7, #11]
 800ae88:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ae8c:	b2da      	uxtb	r2, r3
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	2206      	movs	r2, #6
 800ae96:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	893a      	ldrh	r2, [r7, #8]
 800ae9c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800ae9e:	893b      	ldrh	r3, [r7, #8]
 800aea0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800aea4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aea8:	d104      	bne.n	800aeb4 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	f240 4209 	movw	r2, #1033	@ 0x409
 800aeb0:	829a      	strh	r2, [r3, #20]
 800aeb2:	e002      	b.n	800aeba <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	8b3a      	ldrh	r2, [r7, #24]
 800aebe:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800aec0:	8b3b      	ldrh	r3, [r7, #24]
 800aec2:	461a      	mov	r2, r3
 800aec4:	6879      	ldr	r1, [r7, #4]
 800aec6:	68f8      	ldr	r0, [r7, #12]
 800aec8:	f000 fba4 	bl	800b614 <USBH_CtlReq>
 800aecc:	4603      	mov	r3, r0
}
 800aece:	4618      	mov	r0, r3
 800aed0:	3710      	adds	r7, #16
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}

0800aed6 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800aed6:	b580      	push	{r7, lr}
 800aed8:	b082      	sub	sp, #8
 800aeda:	af00      	add	r7, sp, #0
 800aedc:	6078      	str	r0, [r7, #4]
 800aede:	460b      	mov	r3, r1
 800aee0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	789b      	ldrb	r3, [r3, #2]
 800aee6:	2b01      	cmp	r3, #1
 800aee8:	d10f      	bne.n	800af0a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2200      	movs	r2, #0
 800aeee:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2205      	movs	r2, #5
 800aef4:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800aef6:	78fb      	ldrb	r3, [r7, #3]
 800aef8:	b29a      	uxth	r2, r3
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2200      	movs	r2, #0
 800af02:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2200      	movs	r2, #0
 800af08:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800af0a:	2200      	movs	r2, #0
 800af0c:	2100      	movs	r1, #0
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	f000 fb80 	bl	800b614 <USBH_CtlReq>
 800af14:	4603      	mov	r3, r0
}
 800af16:	4618      	mov	r0, r3
 800af18:	3708      	adds	r7, #8
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd80      	pop	{r7, pc}

0800af1e <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800af1e:	b580      	push	{r7, lr}
 800af20:	b082      	sub	sp, #8
 800af22:	af00      	add	r7, sp, #0
 800af24:	6078      	str	r0, [r7, #4]
 800af26:	460b      	mov	r3, r1
 800af28:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	789b      	ldrb	r3, [r3, #2]
 800af2e:	2b01      	cmp	r3, #1
 800af30:	d10e      	bne.n	800af50 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2200      	movs	r2, #0
 800af36:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2209      	movs	r2, #9
 800af3c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	887a      	ldrh	r2, [r7, #2]
 800af42:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2200      	movs	r2, #0
 800af48:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2200      	movs	r2, #0
 800af4e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800af50:	2200      	movs	r2, #0
 800af52:	2100      	movs	r1, #0
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	f000 fb5d 	bl	800b614 <USBH_CtlReq>
 800af5a:	4603      	mov	r3, r0
}
 800af5c:	4618      	mov	r0, r3
 800af5e:	3708      	adds	r7, #8
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}

0800af64 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b082      	sub	sp, #8
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
 800af6c:	460b      	mov	r3, r1
 800af6e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	789b      	ldrb	r3, [r3, #2]
 800af74:	2b01      	cmp	r3, #1
 800af76:	d10f      	bne.n	800af98 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2200      	movs	r2, #0
 800af7c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2203      	movs	r2, #3
 800af82:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800af84:	78fb      	ldrb	r3, [r7, #3]
 800af86:	b29a      	uxth	r2, r3
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2200      	movs	r2, #0
 800af90:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	2200      	movs	r2, #0
 800af96:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800af98:	2200      	movs	r2, #0
 800af9a:	2100      	movs	r1, #0
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f000 fb39 	bl	800b614 <USBH_CtlReq>
 800afa2:	4603      	mov	r3, r0
}
 800afa4:	4618      	mov	r0, r3
 800afa6:	3708      	adds	r7, #8
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd80      	pop	{r7, pc}

0800afac <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b082      	sub	sp, #8
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
 800afb4:	460b      	mov	r3, r1
 800afb6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	789b      	ldrb	r3, [r3, #2]
 800afbc:	2b01      	cmp	r3, #1
 800afbe:	d10f      	bne.n	800afe0 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2202      	movs	r2, #2
 800afc4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2201      	movs	r2, #1
 800afca:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2200      	movs	r2, #0
 800afd0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800afd2:	78fb      	ldrb	r3, [r7, #3]
 800afd4:	b29a      	uxth	r2, r3
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2200      	movs	r2, #0
 800afde:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800afe0:	2200      	movs	r2, #0
 800afe2:	2100      	movs	r1, #0
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f000 fb15 	bl	800b614 <USBH_CtlReq>
 800afea:	4603      	mov	r3, r0
}
 800afec:	4618      	mov	r0, r3
 800afee:	3708      	adds	r7, #8
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bd80      	pop	{r7, pc}

0800aff4 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800aff4:	b480      	push	{r7}
 800aff6:	b087      	sub	sp, #28
 800aff8:	af00      	add	r7, sp, #0
 800affa:	60f8      	str	r0, [r7, #12]
 800affc:	60b9      	str	r1, [r7, #8]
 800affe:	4613      	mov	r3, r2
 800b000:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800b008:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800b00a:	2300      	movs	r3, #0
 800b00c:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800b00e:	68bb      	ldr	r3, [r7, #8]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d101      	bne.n	800b018 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800b014:	2302      	movs	r3, #2
 800b016:	e094      	b.n	800b142 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	781a      	ldrb	r2, [r3, #0]
 800b01c:	693b      	ldr	r3, [r7, #16]
 800b01e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	785a      	ldrb	r2, [r3, #1]
 800b024:	693b      	ldr	r3, [r7, #16]
 800b026:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	3302      	adds	r3, #2
 800b02c:	781b      	ldrb	r3, [r3, #0]
 800b02e:	461a      	mov	r2, r3
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	3303      	adds	r3, #3
 800b034:	781b      	ldrb	r3, [r3, #0]
 800b036:	021b      	lsls	r3, r3, #8
 800b038:	b29b      	uxth	r3, r3
 800b03a:	4313      	orrs	r3, r2
 800b03c:	b29a      	uxth	r2, r3
 800b03e:	693b      	ldr	r3, [r7, #16]
 800b040:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800b042:	68bb      	ldr	r3, [r7, #8]
 800b044:	791a      	ldrb	r2, [r3, #4]
 800b046:	693b      	ldr	r3, [r7, #16]
 800b048:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800b04a:	68bb      	ldr	r3, [r7, #8]
 800b04c:	795a      	ldrb	r2, [r3, #5]
 800b04e:	693b      	ldr	r3, [r7, #16]
 800b050:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	799a      	ldrb	r2, [r3, #6]
 800b056:	693b      	ldr	r3, [r7, #16]
 800b058:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	79da      	ldrb	r2, [r3, #7]
 800b05e:	693b      	ldr	r3, [r7, #16]
 800b060:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d004      	beq.n	800b076 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800b072:	2b01      	cmp	r3, #1
 800b074:	d11b      	bne.n	800b0ae <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800b076:	693b      	ldr	r3, [r7, #16]
 800b078:	79db      	ldrb	r3, [r3, #7]
 800b07a:	2b20      	cmp	r3, #32
 800b07c:	dc0f      	bgt.n	800b09e <USBH_ParseDevDesc+0xaa>
 800b07e:	2b08      	cmp	r3, #8
 800b080:	db0f      	blt.n	800b0a2 <USBH_ParseDevDesc+0xae>
 800b082:	3b08      	subs	r3, #8
 800b084:	4a32      	ldr	r2, [pc, #200]	@ (800b150 <USBH_ParseDevDesc+0x15c>)
 800b086:	fa22 f303 	lsr.w	r3, r2, r3
 800b08a:	f003 0301 	and.w	r3, r3, #1
 800b08e:	2b00      	cmp	r3, #0
 800b090:	bf14      	ite	ne
 800b092:	2301      	movne	r3, #1
 800b094:	2300      	moveq	r3, #0
 800b096:	b2db      	uxtb	r3, r3
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d106      	bne.n	800b0aa <USBH_ParseDevDesc+0xb6>
 800b09c:	e001      	b.n	800b0a2 <USBH_ParseDevDesc+0xae>
 800b09e:	2b40      	cmp	r3, #64	@ 0x40
 800b0a0:	d003      	beq.n	800b0aa <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800b0a2:	693b      	ldr	r3, [r7, #16]
 800b0a4:	2208      	movs	r2, #8
 800b0a6:	71da      	strb	r2, [r3, #7]
        break;
 800b0a8:	e000      	b.n	800b0ac <USBH_ParseDevDesc+0xb8>
        break;
 800b0aa:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800b0ac:	e00e      	b.n	800b0cc <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b0b4:	2b02      	cmp	r3, #2
 800b0b6:	d107      	bne.n	800b0c8 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800b0b8:	693b      	ldr	r3, [r7, #16]
 800b0ba:	79db      	ldrb	r3, [r3, #7]
 800b0bc:	2b08      	cmp	r3, #8
 800b0be:	d005      	beq.n	800b0cc <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800b0c0:	693b      	ldr	r3, [r7, #16]
 800b0c2:	2208      	movs	r2, #8
 800b0c4:	71da      	strb	r2, [r3, #7]
 800b0c6:	e001      	b.n	800b0cc <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800b0c8:	2303      	movs	r3, #3
 800b0ca:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800b0cc:	88fb      	ldrh	r3, [r7, #6]
 800b0ce:	2b08      	cmp	r3, #8
 800b0d0:	d936      	bls.n	800b140 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800b0d2:	68bb      	ldr	r3, [r7, #8]
 800b0d4:	3308      	adds	r3, #8
 800b0d6:	781b      	ldrb	r3, [r3, #0]
 800b0d8:	461a      	mov	r2, r3
 800b0da:	68bb      	ldr	r3, [r7, #8]
 800b0dc:	3309      	adds	r3, #9
 800b0de:	781b      	ldrb	r3, [r3, #0]
 800b0e0:	021b      	lsls	r3, r3, #8
 800b0e2:	b29b      	uxth	r3, r3
 800b0e4:	4313      	orrs	r3, r2
 800b0e6:	b29a      	uxth	r2, r3
 800b0e8:	693b      	ldr	r3, [r7, #16]
 800b0ea:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	330a      	adds	r3, #10
 800b0f0:	781b      	ldrb	r3, [r3, #0]
 800b0f2:	461a      	mov	r2, r3
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	330b      	adds	r3, #11
 800b0f8:	781b      	ldrb	r3, [r3, #0]
 800b0fa:	021b      	lsls	r3, r3, #8
 800b0fc:	b29b      	uxth	r3, r3
 800b0fe:	4313      	orrs	r3, r2
 800b100:	b29a      	uxth	r2, r3
 800b102:	693b      	ldr	r3, [r7, #16]
 800b104:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800b106:	68bb      	ldr	r3, [r7, #8]
 800b108:	330c      	adds	r3, #12
 800b10a:	781b      	ldrb	r3, [r3, #0]
 800b10c:	461a      	mov	r2, r3
 800b10e:	68bb      	ldr	r3, [r7, #8]
 800b110:	330d      	adds	r3, #13
 800b112:	781b      	ldrb	r3, [r3, #0]
 800b114:	021b      	lsls	r3, r3, #8
 800b116:	b29b      	uxth	r3, r3
 800b118:	4313      	orrs	r3, r2
 800b11a:	b29a      	uxth	r2, r3
 800b11c:	693b      	ldr	r3, [r7, #16]
 800b11e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	7b9a      	ldrb	r2, [r3, #14]
 800b124:	693b      	ldr	r3, [r7, #16]
 800b126:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	7bda      	ldrb	r2, [r3, #15]
 800b12c:	693b      	ldr	r3, [r7, #16]
 800b12e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	7c1a      	ldrb	r2, [r3, #16]
 800b134:	693b      	ldr	r3, [r7, #16]
 800b136:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	7c5a      	ldrb	r2, [r3, #17]
 800b13c:	693b      	ldr	r3, [r7, #16]
 800b13e:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800b140:	7dfb      	ldrb	r3, [r7, #23]
}
 800b142:	4618      	mov	r0, r3
 800b144:	371c      	adds	r7, #28
 800b146:	46bd      	mov	sp, r7
 800b148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14c:	4770      	bx	lr
 800b14e:	bf00      	nop
 800b150:	01000101 	.word	0x01000101

0800b154 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b08c      	sub	sp, #48	@ 0x30
 800b158:	af00      	add	r7, sp, #0
 800b15a:	60f8      	str	r0, [r7, #12]
 800b15c:	60b9      	str	r1, [r7, #8]
 800b15e:	4613      	mov	r3, r2
 800b160:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800b168:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800b16a:	2300      	movs	r3, #0
 800b16c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b170:	2300      	movs	r3, #0
 800b172:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800b176:	2300      	movs	r3, #0
 800b178:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800b17c:	68bb      	ldr	r3, [r7, #8]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d101      	bne.n	800b186 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800b182:	2302      	movs	r3, #2
 800b184:	e0de      	b.n	800b344 <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b186:	68bb      	ldr	r3, [r7, #8]
 800b188:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800b18a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b18c:	781b      	ldrb	r3, [r3, #0]
 800b18e:	2b09      	cmp	r3, #9
 800b190:	d002      	beq.n	800b198 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800b192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b194:	2209      	movs	r2, #9
 800b196:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800b198:	68bb      	ldr	r3, [r7, #8]
 800b19a:	781a      	ldrb	r2, [r3, #0]
 800b19c:	6a3b      	ldr	r3, [r7, #32]
 800b19e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	785a      	ldrb	r2, [r3, #1]
 800b1a4:	6a3b      	ldr	r3, [r7, #32]
 800b1a6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	3302      	adds	r3, #2
 800b1ac:	781b      	ldrb	r3, [r3, #0]
 800b1ae:	461a      	mov	r2, r3
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	3303      	adds	r3, #3
 800b1b4:	781b      	ldrb	r3, [r3, #0]
 800b1b6:	021b      	lsls	r3, r3, #8
 800b1b8:	b29b      	uxth	r3, r3
 800b1ba:	4313      	orrs	r3, r2
 800b1bc:	b29b      	uxth	r3, r3
 800b1be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b1c2:	bf28      	it	cs
 800b1c4:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800b1c8:	b29a      	uxth	r2, r3
 800b1ca:	6a3b      	ldr	r3, [r7, #32]
 800b1cc:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	791a      	ldrb	r2, [r3, #4]
 800b1d2:	6a3b      	ldr	r3, [r7, #32]
 800b1d4:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	795a      	ldrb	r2, [r3, #5]
 800b1da:	6a3b      	ldr	r3, [r7, #32]
 800b1dc:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	799a      	ldrb	r2, [r3, #6]
 800b1e2:	6a3b      	ldr	r3, [r7, #32]
 800b1e4:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	79da      	ldrb	r2, [r3, #7]
 800b1ea:	6a3b      	ldr	r3, [r7, #32]
 800b1ec:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	7a1a      	ldrb	r2, [r3, #8]
 800b1f2:	6a3b      	ldr	r3, [r7, #32]
 800b1f4:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b1f6:	88fb      	ldrh	r3, [r7, #6]
 800b1f8:	2b09      	cmp	r3, #9
 800b1fa:	f240 80a1 	bls.w	800b340 <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 800b1fe:	2309      	movs	r3, #9
 800b200:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b202:	2300      	movs	r3, #0
 800b204:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b206:	e085      	b.n	800b314 <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b208:	f107 0316 	add.w	r3, r7, #22
 800b20c:	4619      	mov	r1, r3
 800b20e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b210:	f000 f9e6 	bl	800b5e0 <USBH_GetNextDesc>
 800b214:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800b216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b218:	785b      	ldrb	r3, [r3, #1]
 800b21a:	2b04      	cmp	r3, #4
 800b21c:	d17a      	bne.n	800b314 <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800b21e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b220:	781b      	ldrb	r3, [r3, #0]
 800b222:	2b09      	cmp	r3, #9
 800b224:	d002      	beq.n	800b22c <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800b226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b228:	2209      	movs	r2, #9
 800b22a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800b22c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b230:	221a      	movs	r2, #26
 800b232:	fb02 f303 	mul.w	r3, r2, r3
 800b236:	3308      	adds	r3, #8
 800b238:	6a3a      	ldr	r2, [r7, #32]
 800b23a:	4413      	add	r3, r2
 800b23c:	3302      	adds	r3, #2
 800b23e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b240:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b242:	69f8      	ldr	r0, [r7, #28]
 800b244:	f000 f882 	bl	800b34c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b248:	2300      	movs	r3, #0
 800b24a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800b24e:	2300      	movs	r3, #0
 800b250:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b252:	e043      	b.n	800b2dc <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b254:	f107 0316 	add.w	r3, r7, #22
 800b258:	4619      	mov	r1, r3
 800b25a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b25c:	f000 f9c0 	bl	800b5e0 <USBH_GetNextDesc>
 800b260:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b264:	785b      	ldrb	r3, [r3, #1]
 800b266:	2b05      	cmp	r3, #5
 800b268:	d138      	bne.n	800b2dc <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800b26a:	69fb      	ldr	r3, [r7, #28]
 800b26c:	795b      	ldrb	r3, [r3, #5]
 800b26e:	2b01      	cmp	r3, #1
 800b270:	d113      	bne.n	800b29a <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800b272:	69fb      	ldr	r3, [r7, #28]
 800b274:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800b276:	2b02      	cmp	r3, #2
 800b278:	d003      	beq.n	800b282 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800b27a:	69fb      	ldr	r3, [r7, #28]
 800b27c:	799b      	ldrb	r3, [r3, #6]
 800b27e:	2b03      	cmp	r3, #3
 800b280:	d10b      	bne.n	800b29a <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b282:	69fb      	ldr	r3, [r7, #28]
 800b284:	79db      	ldrb	r3, [r3, #7]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d10b      	bne.n	800b2a2 <USBH_ParseCfgDesc+0x14e>
 800b28a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b28c:	781b      	ldrb	r3, [r3, #0]
 800b28e:	2b09      	cmp	r3, #9
 800b290:	d007      	beq.n	800b2a2 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800b292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b294:	2209      	movs	r2, #9
 800b296:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b298:	e003      	b.n	800b2a2 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800b29a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b29c:	2207      	movs	r2, #7
 800b29e:	701a      	strb	r2, [r3, #0]
 800b2a0:	e000      	b.n	800b2a4 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b2a2:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b2a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b2a8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b2ac:	3201      	adds	r2, #1
 800b2ae:	00d2      	lsls	r2, r2, #3
 800b2b0:	211a      	movs	r1, #26
 800b2b2:	fb01 f303 	mul.w	r3, r1, r3
 800b2b6:	4413      	add	r3, r2
 800b2b8:	3308      	adds	r3, #8
 800b2ba:	6a3a      	ldr	r2, [r7, #32]
 800b2bc:	4413      	add	r3, r2
 800b2be:	3304      	adds	r3, #4
 800b2c0:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800b2c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b2c4:	69b9      	ldr	r1, [r7, #24]
 800b2c6:	68f8      	ldr	r0, [r7, #12]
 800b2c8:	f000 f86f 	bl	800b3aa <USBH_ParseEPDesc>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800b2d2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b2d6:	3301      	adds	r3, #1
 800b2d8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b2dc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b2e0:	2b01      	cmp	r3, #1
 800b2e2:	d80a      	bhi.n	800b2fa <USBH_ParseCfgDesc+0x1a6>
 800b2e4:	69fb      	ldr	r3, [r7, #28]
 800b2e6:	791b      	ldrb	r3, [r3, #4]
 800b2e8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b2ec:	429a      	cmp	r2, r3
 800b2ee:	d204      	bcs.n	800b2fa <USBH_ParseCfgDesc+0x1a6>
 800b2f0:	6a3b      	ldr	r3, [r7, #32]
 800b2f2:	885a      	ldrh	r2, [r3, #2]
 800b2f4:	8afb      	ldrh	r3, [r7, #22]
 800b2f6:	429a      	cmp	r2, r3
 800b2f8:	d8ac      	bhi.n	800b254 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800b2fa:	69fb      	ldr	r3, [r7, #28]
 800b2fc:	791b      	ldrb	r3, [r3, #4]
 800b2fe:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b302:	429a      	cmp	r2, r3
 800b304:	d201      	bcs.n	800b30a <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 800b306:	2303      	movs	r3, #3
 800b308:	e01c      	b.n	800b344 <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 800b30a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b30e:	3301      	adds	r3, #1
 800b310:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b314:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b318:	2b01      	cmp	r3, #1
 800b31a:	d805      	bhi.n	800b328 <USBH_ParseCfgDesc+0x1d4>
 800b31c:	6a3b      	ldr	r3, [r7, #32]
 800b31e:	885a      	ldrh	r2, [r3, #2]
 800b320:	8afb      	ldrh	r3, [r7, #22]
 800b322:	429a      	cmp	r2, r3
 800b324:	f63f af70 	bhi.w	800b208 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800b328:	6a3b      	ldr	r3, [r7, #32]
 800b32a:	791b      	ldrb	r3, [r3, #4]
 800b32c:	2b02      	cmp	r3, #2
 800b32e:	bf28      	it	cs
 800b330:	2302      	movcs	r3, #2
 800b332:	b2db      	uxtb	r3, r3
 800b334:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b338:	429a      	cmp	r2, r3
 800b33a:	d201      	bcs.n	800b340 <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 800b33c:	2303      	movs	r3, #3
 800b33e:	e001      	b.n	800b344 <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 800b340:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b344:	4618      	mov	r0, r3
 800b346:	3730      	adds	r7, #48	@ 0x30
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd80      	pop	{r7, pc}

0800b34c <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800b34c:	b480      	push	{r7}
 800b34e:	b083      	sub	sp, #12
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
 800b354:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	781a      	ldrb	r2, [r3, #0]
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800b35e:	683b      	ldr	r3, [r7, #0]
 800b360:	785a      	ldrb	r2, [r3, #1]
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	789a      	ldrb	r2, [r3, #2]
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	78da      	ldrb	r2, [r3, #3]
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	791a      	ldrb	r2, [r3, #4]
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	795a      	ldrb	r2, [r3, #5]
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	799a      	ldrb	r2, [r3, #6]
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	79da      	ldrb	r2, [r3, #7]
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	7a1a      	ldrb	r2, [r3, #8]
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	721a      	strb	r2, [r3, #8]
}
 800b39e:	bf00      	nop
 800b3a0:	370c      	adds	r7, #12
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a8:	4770      	bx	lr

0800b3aa <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800b3aa:	b480      	push	{r7}
 800b3ac:	b087      	sub	sp, #28
 800b3ae:	af00      	add	r7, sp, #0
 800b3b0:	60f8      	str	r0, [r7, #12]
 800b3b2:	60b9      	str	r1, [r7, #8]
 800b3b4:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	781a      	ldrb	r2, [r3, #0]
 800b3be:	68bb      	ldr	r3, [r7, #8]
 800b3c0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	785a      	ldrb	r2, [r3, #1]
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	789a      	ldrb	r2, [r3, #2]
 800b3ce:	68bb      	ldr	r3, [r7, #8]
 800b3d0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	78da      	ldrb	r2, [r3, #3]
 800b3d6:	68bb      	ldr	r3, [r7, #8]
 800b3d8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	3304      	adds	r3, #4
 800b3de:	781b      	ldrb	r3, [r3, #0]
 800b3e0:	461a      	mov	r2, r3
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	3305      	adds	r3, #5
 800b3e6:	781b      	ldrb	r3, [r3, #0]
 800b3e8:	021b      	lsls	r3, r3, #8
 800b3ea:	b29b      	uxth	r3, r3
 800b3ec:	4313      	orrs	r3, r2
 800b3ee:	b29a      	uxth	r2, r3
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	799a      	ldrb	r2, [r3, #6]
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800b3fc:	68bb      	ldr	r3, [r7, #8]
 800b3fe:	889b      	ldrh	r3, [r3, #4]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d009      	beq.n	800b418 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800b408:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b40c:	d804      	bhi.n	800b418 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800b40e:	68bb      	ldr	r3, [r7, #8]
 800b410:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800b412:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b416:	d901      	bls.n	800b41c <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800b418:	2303      	movs	r3, #3
 800b41a:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b422:	2b00      	cmp	r3, #0
 800b424:	d136      	bne.n	800b494 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800b426:	68bb      	ldr	r3, [r7, #8]
 800b428:	78db      	ldrb	r3, [r3, #3]
 800b42a:	f003 0303 	and.w	r3, r3, #3
 800b42e:	2b02      	cmp	r3, #2
 800b430:	d108      	bne.n	800b444 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	889b      	ldrh	r3, [r3, #4]
 800b436:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b43a:	f240 8097 	bls.w	800b56c <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b43e:	2303      	movs	r3, #3
 800b440:	75fb      	strb	r3, [r7, #23]
 800b442:	e093      	b.n	800b56c <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800b444:	68bb      	ldr	r3, [r7, #8]
 800b446:	78db      	ldrb	r3, [r3, #3]
 800b448:	f003 0303 	and.w	r3, r3, #3
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d107      	bne.n	800b460 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	889b      	ldrh	r3, [r3, #4]
 800b454:	2b40      	cmp	r3, #64	@ 0x40
 800b456:	f240 8089 	bls.w	800b56c <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b45a:	2303      	movs	r3, #3
 800b45c:	75fb      	strb	r3, [r7, #23]
 800b45e:	e085      	b.n	800b56c <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	78db      	ldrb	r3, [r3, #3]
 800b464:	f003 0303 	and.w	r3, r3, #3
 800b468:	2b01      	cmp	r3, #1
 800b46a:	d005      	beq.n	800b478 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	78db      	ldrb	r3, [r3, #3]
 800b470:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b474:	2b03      	cmp	r3, #3
 800b476:	d10a      	bne.n	800b48e <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b478:	68bb      	ldr	r3, [r7, #8]
 800b47a:	799b      	ldrb	r3, [r3, #6]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d003      	beq.n	800b488 <USBH_ParseEPDesc+0xde>
 800b480:	68bb      	ldr	r3, [r7, #8]
 800b482:	799b      	ldrb	r3, [r3, #6]
 800b484:	2b10      	cmp	r3, #16
 800b486:	d970      	bls.n	800b56a <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800b488:	2303      	movs	r3, #3
 800b48a:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b48c:	e06d      	b.n	800b56a <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800b48e:	2303      	movs	r3, #3
 800b490:	75fb      	strb	r3, [r7, #23]
 800b492:	e06b      	b.n	800b56c <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b49a:	2b01      	cmp	r3, #1
 800b49c:	d13c      	bne.n	800b518 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	78db      	ldrb	r3, [r3, #3]
 800b4a2:	f003 0303 	and.w	r3, r3, #3
 800b4a6:	2b02      	cmp	r3, #2
 800b4a8:	d005      	beq.n	800b4b6 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	78db      	ldrb	r3, [r3, #3]
 800b4ae:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d106      	bne.n	800b4c4 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800b4b6:	68bb      	ldr	r3, [r7, #8]
 800b4b8:	889b      	ldrh	r3, [r3, #4]
 800b4ba:	2b40      	cmp	r3, #64	@ 0x40
 800b4bc:	d956      	bls.n	800b56c <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b4be:	2303      	movs	r3, #3
 800b4c0:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800b4c2:	e053      	b.n	800b56c <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800b4c4:	68bb      	ldr	r3, [r7, #8]
 800b4c6:	78db      	ldrb	r3, [r3, #3]
 800b4c8:	f003 0303 	and.w	r3, r3, #3
 800b4cc:	2b01      	cmp	r3, #1
 800b4ce:	d10e      	bne.n	800b4ee <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800b4d0:	68bb      	ldr	r3, [r7, #8]
 800b4d2:	799b      	ldrb	r3, [r3, #6]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d007      	beq.n	800b4e8 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800b4dc:	2b10      	cmp	r3, #16
 800b4de:	d803      	bhi.n	800b4e8 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800b4e4:	2b40      	cmp	r3, #64	@ 0x40
 800b4e6:	d941      	bls.n	800b56c <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b4e8:	2303      	movs	r3, #3
 800b4ea:	75fb      	strb	r3, [r7, #23]
 800b4ec:	e03e      	b.n	800b56c <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800b4ee:	68bb      	ldr	r3, [r7, #8]
 800b4f0:	78db      	ldrb	r3, [r3, #3]
 800b4f2:	f003 0303 	and.w	r3, r3, #3
 800b4f6:	2b03      	cmp	r3, #3
 800b4f8:	d10b      	bne.n	800b512 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800b4fa:	68bb      	ldr	r3, [r7, #8]
 800b4fc:	799b      	ldrb	r3, [r3, #6]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d004      	beq.n	800b50c <USBH_ParseEPDesc+0x162>
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	889b      	ldrh	r3, [r3, #4]
 800b506:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b50a:	d32f      	bcc.n	800b56c <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b50c:	2303      	movs	r3, #3
 800b50e:	75fb      	strb	r3, [r7, #23]
 800b510:	e02c      	b.n	800b56c <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800b512:	2303      	movs	r3, #3
 800b514:	75fb      	strb	r3, [r7, #23]
 800b516:	e029      	b.n	800b56c <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b51e:	2b02      	cmp	r3, #2
 800b520:	d120      	bne.n	800b564 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800b522:	68bb      	ldr	r3, [r7, #8]
 800b524:	78db      	ldrb	r3, [r3, #3]
 800b526:	f003 0303 	and.w	r3, r3, #3
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d106      	bne.n	800b53c <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	889b      	ldrh	r3, [r3, #4]
 800b532:	2b08      	cmp	r3, #8
 800b534:	d01a      	beq.n	800b56c <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b536:	2303      	movs	r3, #3
 800b538:	75fb      	strb	r3, [r7, #23]
 800b53a:	e017      	b.n	800b56c <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	78db      	ldrb	r3, [r3, #3]
 800b540:	f003 0303 	and.w	r3, r3, #3
 800b544:	2b03      	cmp	r3, #3
 800b546:	d10a      	bne.n	800b55e <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	799b      	ldrb	r3, [r3, #6]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d003      	beq.n	800b558 <USBH_ParseEPDesc+0x1ae>
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	889b      	ldrh	r3, [r3, #4]
 800b554:	2b08      	cmp	r3, #8
 800b556:	d909      	bls.n	800b56c <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b558:	2303      	movs	r3, #3
 800b55a:	75fb      	strb	r3, [r7, #23]
 800b55c:	e006      	b.n	800b56c <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800b55e:	2303      	movs	r3, #3
 800b560:	75fb      	strb	r3, [r7, #23]
 800b562:	e003      	b.n	800b56c <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800b564:	2303      	movs	r3, #3
 800b566:	75fb      	strb	r3, [r7, #23]
 800b568:	e000      	b.n	800b56c <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b56a:	bf00      	nop
  }

  return status;
 800b56c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b56e:	4618      	mov	r0, r3
 800b570:	371c      	adds	r7, #28
 800b572:	46bd      	mov	sp, r7
 800b574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b578:	4770      	bx	lr

0800b57a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b57a:	b480      	push	{r7}
 800b57c:	b087      	sub	sp, #28
 800b57e:	af00      	add	r7, sp, #0
 800b580:	60f8      	str	r0, [r7, #12]
 800b582:	60b9      	str	r1, [r7, #8]
 800b584:	4613      	mov	r3, r2
 800b586:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	3301      	adds	r3, #1
 800b58c:	781b      	ldrb	r3, [r3, #0]
 800b58e:	2b03      	cmp	r3, #3
 800b590:	d120      	bne.n	800b5d4 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	781b      	ldrb	r3, [r3, #0]
 800b596:	1e9a      	subs	r2, r3, #2
 800b598:	88fb      	ldrh	r3, [r7, #6]
 800b59a:	4293      	cmp	r3, r2
 800b59c:	bf28      	it	cs
 800b59e:	4613      	movcs	r3, r2
 800b5a0:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	3302      	adds	r3, #2
 800b5a6:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	82fb      	strh	r3, [r7, #22]
 800b5ac:	e00b      	b.n	800b5c6 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b5ae:	8afb      	ldrh	r3, [r7, #22]
 800b5b0:	68fa      	ldr	r2, [r7, #12]
 800b5b2:	4413      	add	r3, r2
 800b5b4:	781a      	ldrb	r2, [r3, #0]
 800b5b6:	68bb      	ldr	r3, [r7, #8]
 800b5b8:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	3301      	adds	r3, #1
 800b5be:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b5c0:	8afb      	ldrh	r3, [r7, #22]
 800b5c2:	3302      	adds	r3, #2
 800b5c4:	82fb      	strh	r3, [r7, #22]
 800b5c6:	8afa      	ldrh	r2, [r7, #22]
 800b5c8:	8abb      	ldrh	r3, [r7, #20]
 800b5ca:	429a      	cmp	r2, r3
 800b5cc:	d3ef      	bcc.n	800b5ae <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b5ce:	68bb      	ldr	r3, [r7, #8]
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	701a      	strb	r2, [r3, #0]
  }
}
 800b5d4:	bf00      	nop
 800b5d6:	371c      	adds	r7, #28
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5de:	4770      	bx	lr

0800b5e0 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b085      	sub	sp, #20
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
 800b5e8:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	881b      	ldrh	r3, [r3, #0]
 800b5ee:	687a      	ldr	r2, [r7, #4]
 800b5f0:	7812      	ldrb	r2, [r2, #0]
 800b5f2:	4413      	add	r3, r2
 800b5f4:	b29a      	uxth	r2, r3
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	781b      	ldrb	r3, [r3, #0]
 800b5fe:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	4413      	add	r3, r2
 800b604:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b606:	68fb      	ldr	r3, [r7, #12]
}
 800b608:	4618      	mov	r0, r3
 800b60a:	3714      	adds	r7, #20
 800b60c:	46bd      	mov	sp, r7
 800b60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b612:	4770      	bx	lr

0800b614 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b086      	sub	sp, #24
 800b618:	af00      	add	r7, sp, #0
 800b61a:	60f8      	str	r0, [r7, #12]
 800b61c:	60b9      	str	r1, [r7, #8]
 800b61e:	4613      	mov	r3, r2
 800b620:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b622:	2301      	movs	r3, #1
 800b624:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	789b      	ldrb	r3, [r3, #2]
 800b62a:	2b01      	cmp	r3, #1
 800b62c:	d002      	beq.n	800b634 <USBH_CtlReq+0x20>
 800b62e:	2b02      	cmp	r3, #2
 800b630:	d00f      	beq.n	800b652 <USBH_CtlReq+0x3e>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 800b632:	e027      	b.n	800b684 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	68ba      	ldr	r2, [r7, #8]
 800b638:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	88fa      	ldrh	r2, [r7, #6]
 800b63e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	2201      	movs	r2, #1
 800b644:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	2202      	movs	r2, #2
 800b64a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b64c:	2301      	movs	r3, #1
 800b64e:	75fb      	strb	r3, [r7, #23]
      break;
 800b650:	e018      	b.n	800b684 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800b652:	68f8      	ldr	r0, [r7, #12]
 800b654:	f000 f81c 	bl	800b690 <USBH_HandleControl>
 800b658:	4603      	mov	r3, r0
 800b65a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b65c:	7dfb      	ldrb	r3, [r7, #23]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d002      	beq.n	800b668 <USBH_CtlReq+0x54>
 800b662:	7dfb      	ldrb	r3, [r7, #23]
 800b664:	2b03      	cmp	r3, #3
 800b666:	d106      	bne.n	800b676 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	2201      	movs	r2, #1
 800b66c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	2200      	movs	r2, #0
 800b672:	761a      	strb	r2, [r3, #24]
      break;
 800b674:	e005      	b.n	800b682 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800b676:	7dfb      	ldrb	r3, [r7, #23]
 800b678:	2b02      	cmp	r3, #2
 800b67a:	d102      	bne.n	800b682 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	2201      	movs	r2, #1
 800b680:	709a      	strb	r2, [r3, #2]
      break;
 800b682:	bf00      	nop
  }
  return status;
 800b684:	7dfb      	ldrb	r3, [r7, #23]
}
 800b686:	4618      	mov	r0, r3
 800b688:	3718      	adds	r7, #24
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bd80      	pop	{r7, pc}
	...

0800b690 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b086      	sub	sp, #24
 800b694:	af02      	add	r7, sp, #8
 800b696:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b698:	2301      	movs	r3, #1
 800b69a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b69c:	2300      	movs	r3, #0
 800b69e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	7e1b      	ldrb	r3, [r3, #24]
 800b6a4:	3b01      	subs	r3, #1
 800b6a6:	2b0a      	cmp	r3, #10
 800b6a8:	f200 8157 	bhi.w	800b95a <USBH_HandleControl+0x2ca>
 800b6ac:	a201      	add	r2, pc, #4	@ (adr r2, 800b6b4 <USBH_HandleControl+0x24>)
 800b6ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6b2:	bf00      	nop
 800b6b4:	0800b6e1 	.word	0x0800b6e1
 800b6b8:	0800b6fb 	.word	0x0800b6fb
 800b6bc:	0800b765 	.word	0x0800b765
 800b6c0:	0800b78b 	.word	0x0800b78b
 800b6c4:	0800b7c5 	.word	0x0800b7c5
 800b6c8:	0800b7ef 	.word	0x0800b7ef
 800b6cc:	0800b841 	.word	0x0800b841
 800b6d0:	0800b863 	.word	0x0800b863
 800b6d4:	0800b89f 	.word	0x0800b89f
 800b6d8:	0800b8c5 	.word	0x0800b8c5
 800b6dc:	0800b903 	.word	0x0800b903
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f103 0110 	add.w	r1, r3, #16
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	795b      	ldrb	r3, [r3, #5]
 800b6ea:	461a      	mov	r2, r3
 800b6ec:	6878      	ldr	r0, [r7, #4]
 800b6ee:	f000 f945 	bl	800b97c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2202      	movs	r2, #2
 800b6f6:	761a      	strb	r2, [r3, #24]
      break;
 800b6f8:	e13a      	b.n	800b970 <USBH_HandleControl+0x2e0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	795b      	ldrb	r3, [r3, #5]
 800b6fe:	4619      	mov	r1, r3
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	f000 fcc7 	bl	800c094 <USBH_LL_GetURBState>
 800b706:	4603      	mov	r3, r0
 800b708:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b70a:	7bbb      	ldrb	r3, [r7, #14]
 800b70c:	2b01      	cmp	r3, #1
 800b70e:	d11e      	bne.n	800b74e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	7c1b      	ldrb	r3, [r3, #16]
 800b714:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b718:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	8adb      	ldrh	r3, [r3, #22]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d00a      	beq.n	800b738 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b722:	7b7b      	ldrb	r3, [r7, #13]
 800b724:	2b80      	cmp	r3, #128	@ 0x80
 800b726:	d103      	bne.n	800b730 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2203      	movs	r2, #3
 800b72c:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800b72e:	e116      	b.n	800b95e <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_DATA_OUT;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2205      	movs	r2, #5
 800b734:	761a      	strb	r2, [r3, #24]
      break;
 800b736:	e112      	b.n	800b95e <USBH_HandleControl+0x2ce>
          if (direction == USB_D2H)
 800b738:	7b7b      	ldrb	r3, [r7, #13]
 800b73a:	2b80      	cmp	r3, #128	@ 0x80
 800b73c:	d103      	bne.n	800b746 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2209      	movs	r2, #9
 800b742:	761a      	strb	r2, [r3, #24]
      break;
 800b744:	e10b      	b.n	800b95e <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_STATUS_IN;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2207      	movs	r2, #7
 800b74a:	761a      	strb	r2, [r3, #24]
      break;
 800b74c:	e107      	b.n	800b95e <USBH_HandleControl+0x2ce>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b74e:	7bbb      	ldrb	r3, [r7, #14]
 800b750:	2b04      	cmp	r3, #4
 800b752:	d003      	beq.n	800b75c <USBH_HandleControl+0xcc>
 800b754:	7bbb      	ldrb	r3, [r7, #14]
 800b756:	2b02      	cmp	r3, #2
 800b758:	f040 8101 	bne.w	800b95e <USBH_HandleControl+0x2ce>
          phost->Control.state = CTRL_ERROR;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	220b      	movs	r2, #11
 800b760:	761a      	strb	r2, [r3, #24]
      break;
 800b762:	e0fc      	b.n	800b95e <USBH_HandleControl+0x2ce>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b76a:	b29a      	uxth	r2, r3
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	6899      	ldr	r1, [r3, #8]
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	899a      	ldrh	r2, [r3, #12]
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	791b      	ldrb	r3, [r3, #4]
 800b77c:	6878      	ldr	r0, [r7, #4]
 800b77e:	f000 f93c 	bl	800b9fa <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	2204      	movs	r2, #4
 800b786:	761a      	strb	r2, [r3, #24]
      break;
 800b788:	e0f2      	b.n	800b970 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	791b      	ldrb	r3, [r3, #4]
 800b78e:	4619      	mov	r1, r3
 800b790:	6878      	ldr	r0, [r7, #4]
 800b792:	f000 fc7f 	bl	800c094 <USBH_LL_GetURBState>
 800b796:	4603      	mov	r3, r0
 800b798:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b79a:	7bbb      	ldrb	r3, [r7, #14]
 800b79c:	2b01      	cmp	r3, #1
 800b79e:	d103      	bne.n	800b7a8 <USBH_HandleControl+0x118>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2209      	movs	r2, #9
 800b7a4:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800b7a6:	e0dc      	b.n	800b962 <USBH_HandleControl+0x2d2>
      else if (URB_Status == USBH_URB_STALL)
 800b7a8:	7bbb      	ldrb	r3, [r7, #14]
 800b7aa:	2b05      	cmp	r3, #5
 800b7ac:	d102      	bne.n	800b7b4 <USBH_HandleControl+0x124>
        status = USBH_NOT_SUPPORTED;
 800b7ae:	2303      	movs	r3, #3
 800b7b0:	73fb      	strb	r3, [r7, #15]
      break;
 800b7b2:	e0d6      	b.n	800b962 <USBH_HandleControl+0x2d2>
        if (URB_Status == USBH_URB_ERROR)
 800b7b4:	7bbb      	ldrb	r3, [r7, #14]
 800b7b6:	2b04      	cmp	r3, #4
 800b7b8:	f040 80d3 	bne.w	800b962 <USBH_HandleControl+0x2d2>
          phost->Control.state = CTRL_ERROR;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	220b      	movs	r2, #11
 800b7c0:	761a      	strb	r2, [r3, #24]
      break;
 800b7c2:	e0ce      	b.n	800b962 <USBH_HandleControl+0x2d2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	6899      	ldr	r1, [r3, #8]
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	899a      	ldrh	r2, [r3, #12]
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	795b      	ldrb	r3, [r3, #5]
 800b7d0:	2001      	movs	r0, #1
 800b7d2:	9000      	str	r0, [sp, #0]
 800b7d4:	6878      	ldr	r0, [r7, #4]
 800b7d6:	f000 f8eb 	bl	800b9b0 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b7e0:	b29a      	uxth	r2, r3
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2206      	movs	r2, #6
 800b7ea:	761a      	strb	r2, [r3, #24]
      break;
 800b7ec:	e0c0      	b.n	800b970 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	795b      	ldrb	r3, [r3, #5]
 800b7f2:	4619      	mov	r1, r3
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f000 fc4d 	bl	800c094 <USBH_LL_GetURBState>
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b7fe:	7bbb      	ldrb	r3, [r7, #14]
 800b800:	2b01      	cmp	r3, #1
 800b802:	d103      	bne.n	800b80c <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2207      	movs	r2, #7
 800b808:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800b80a:	e0ac      	b.n	800b966 <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_STALL)
 800b80c:	7bbb      	ldrb	r3, [r7, #14]
 800b80e:	2b05      	cmp	r3, #5
 800b810:	d105      	bne.n	800b81e <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	220c      	movs	r2, #12
 800b816:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b818:	2303      	movs	r3, #3
 800b81a:	73fb      	strb	r3, [r7, #15]
      break;
 800b81c:	e0a3      	b.n	800b966 <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b81e:	7bbb      	ldrb	r3, [r7, #14]
 800b820:	2b02      	cmp	r3, #2
 800b822:	d103      	bne.n	800b82c <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2205      	movs	r2, #5
 800b828:	761a      	strb	r2, [r3, #24]
      break;
 800b82a:	e09c      	b.n	800b966 <USBH_HandleControl+0x2d6>
        if (URB_Status == USBH_URB_ERROR)
 800b82c:	7bbb      	ldrb	r3, [r7, #14]
 800b82e:	2b04      	cmp	r3, #4
 800b830:	f040 8099 	bne.w	800b966 <USBH_HandleControl+0x2d6>
          phost->Control.state = CTRL_ERROR;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	220b      	movs	r2, #11
 800b838:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b83a:	2302      	movs	r3, #2
 800b83c:	73fb      	strb	r3, [r7, #15]
      break;
 800b83e:	e092      	b.n	800b966 <USBH_HandleControl+0x2d6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	791b      	ldrb	r3, [r3, #4]
 800b844:	2200      	movs	r2, #0
 800b846:	2100      	movs	r1, #0
 800b848:	6878      	ldr	r0, [r7, #4]
 800b84a:	f000 f8d6 	bl	800b9fa <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b854:	b29a      	uxth	r2, r3
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	2208      	movs	r2, #8
 800b85e:	761a      	strb	r2, [r3, #24]

      break;
 800b860:	e086      	b.n	800b970 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	791b      	ldrb	r3, [r3, #4]
 800b866:	4619      	mov	r1, r3
 800b868:	6878      	ldr	r0, [r7, #4]
 800b86a:	f000 fc13 	bl	800c094 <USBH_LL_GetURBState>
 800b86e:	4603      	mov	r3, r0
 800b870:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b872:	7bbb      	ldrb	r3, [r7, #14]
 800b874:	2b01      	cmp	r3, #1
 800b876:	d105      	bne.n	800b884 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	220d      	movs	r2, #13
 800b87c:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b87e:	2300      	movs	r3, #0
 800b880:	73fb      	strb	r3, [r7, #15]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800b882:	e072      	b.n	800b96a <USBH_HandleControl+0x2da>
      else if (URB_Status == USBH_URB_ERROR)
 800b884:	7bbb      	ldrb	r3, [r7, #14]
 800b886:	2b04      	cmp	r3, #4
 800b888:	d103      	bne.n	800b892 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	220b      	movs	r2, #11
 800b88e:	761a      	strb	r2, [r3, #24]
      break;
 800b890:	e06b      	b.n	800b96a <USBH_HandleControl+0x2da>
        if (URB_Status == USBH_URB_STALL)
 800b892:	7bbb      	ldrb	r3, [r7, #14]
 800b894:	2b05      	cmp	r3, #5
 800b896:	d168      	bne.n	800b96a <USBH_HandleControl+0x2da>
          status = USBH_NOT_SUPPORTED;
 800b898:	2303      	movs	r3, #3
 800b89a:	73fb      	strb	r3, [r7, #15]
      break;
 800b89c:	e065      	b.n	800b96a <USBH_HandleControl+0x2da>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	795b      	ldrb	r3, [r3, #5]
 800b8a2:	2201      	movs	r2, #1
 800b8a4:	9200      	str	r2, [sp, #0]
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	2100      	movs	r1, #0
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f000 f880 	bl	800b9b0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b8b6:	b29a      	uxth	r2, r3
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	220a      	movs	r2, #10
 800b8c0:	761a      	strb	r2, [r3, #24]
      break;
 800b8c2:	e055      	b.n	800b970 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	795b      	ldrb	r3, [r3, #5]
 800b8c8:	4619      	mov	r1, r3
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f000 fbe2 	bl	800c094 <USBH_LL_GetURBState>
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b8d4:	7bbb      	ldrb	r3, [r7, #14]
 800b8d6:	2b01      	cmp	r3, #1
 800b8d8:	d105      	bne.n	800b8e6 <USBH_HandleControl+0x256>
      {
        status = USBH_OK;
 800b8da:	2300      	movs	r3, #0
 800b8dc:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	220d      	movs	r2, #13
 800b8e2:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800b8e4:	e043      	b.n	800b96e <USBH_HandleControl+0x2de>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b8e6:	7bbb      	ldrb	r3, [r7, #14]
 800b8e8:	2b02      	cmp	r3, #2
 800b8ea:	d103      	bne.n	800b8f4 <USBH_HandleControl+0x264>
        phost->Control.state = CTRL_STATUS_OUT;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2209      	movs	r2, #9
 800b8f0:	761a      	strb	r2, [r3, #24]
      break;
 800b8f2:	e03c      	b.n	800b96e <USBH_HandleControl+0x2de>
        if (URB_Status == USBH_URB_ERROR)
 800b8f4:	7bbb      	ldrb	r3, [r7, #14]
 800b8f6:	2b04      	cmp	r3, #4
 800b8f8:	d139      	bne.n	800b96e <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	220b      	movs	r2, #11
 800b8fe:	761a      	strb	r2, [r3, #24]
      break;
 800b900:	e035      	b.n	800b96e <USBH_HandleControl+0x2de>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	7e5b      	ldrb	r3, [r3, #25]
 800b906:	3301      	adds	r3, #1
 800b908:	b2da      	uxtb	r2, r3
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	765a      	strb	r2, [r3, #25]
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	7e5b      	ldrb	r3, [r3, #25]
 800b912:	2b02      	cmp	r3, #2
 800b914:	d806      	bhi.n	800b924 <USBH_HandleControl+0x294>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2201      	movs	r2, #1
 800b91a:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2201      	movs	r2, #1
 800b920:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b922:	e025      	b.n	800b970 <USBH_HandleControl+0x2e0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b92a:	2106      	movs	r1, #6
 800b92c:	6878      	ldr	r0, [r7, #4]
 800b92e:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2200      	movs	r2, #0
 800b934:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	795b      	ldrb	r3, [r3, #5]
 800b93a:	4619      	mov	r1, r3
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	f000 f90d 	bl	800bb5c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	791b      	ldrb	r3, [r3, #4]
 800b946:	4619      	mov	r1, r3
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	f000 f907 	bl	800bb5c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	2200      	movs	r2, #0
 800b952:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b954:	2302      	movs	r3, #2
 800b956:	73fb      	strb	r3, [r7, #15]
      break;
 800b958:	e00a      	b.n	800b970 <USBH_HandleControl+0x2e0>

    default:
      break;
 800b95a:	bf00      	nop
 800b95c:	e008      	b.n	800b970 <USBH_HandleControl+0x2e0>
      break;
 800b95e:	bf00      	nop
 800b960:	e006      	b.n	800b970 <USBH_HandleControl+0x2e0>
      break;
 800b962:	bf00      	nop
 800b964:	e004      	b.n	800b970 <USBH_HandleControl+0x2e0>
      break;
 800b966:	bf00      	nop
 800b968:	e002      	b.n	800b970 <USBH_HandleControl+0x2e0>
      break;
 800b96a:	bf00      	nop
 800b96c:	e000      	b.n	800b970 <USBH_HandleControl+0x2e0>
      break;
 800b96e:	bf00      	nop
  }

  return status;
 800b970:	7bfb      	ldrb	r3, [r7, #15]
}
 800b972:	4618      	mov	r0, r3
 800b974:	3710      	adds	r7, #16
 800b976:	46bd      	mov	sp, r7
 800b978:	bd80      	pop	{r7, pc}
 800b97a:	bf00      	nop

0800b97c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b088      	sub	sp, #32
 800b980:	af04      	add	r7, sp, #16
 800b982:	60f8      	str	r0, [r7, #12]
 800b984:	60b9      	str	r1, [r7, #8]
 800b986:	4613      	mov	r3, r2
 800b988:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b98a:	79f9      	ldrb	r1, [r7, #7]
 800b98c:	2300      	movs	r3, #0
 800b98e:	9303      	str	r3, [sp, #12]
 800b990:	2308      	movs	r3, #8
 800b992:	9302      	str	r3, [sp, #8]
 800b994:	68bb      	ldr	r3, [r7, #8]
 800b996:	9301      	str	r3, [sp, #4]
 800b998:	2300      	movs	r3, #0
 800b99a:	9300      	str	r3, [sp, #0]
 800b99c:	2300      	movs	r3, #0
 800b99e:	2200      	movs	r2, #0
 800b9a0:	68f8      	ldr	r0, [r7, #12]
 800b9a2:	f000 fb46 	bl	800c032 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800b9a6:	2300      	movs	r3, #0
}
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	3710      	adds	r7, #16
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	bd80      	pop	{r7, pc}

0800b9b0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b088      	sub	sp, #32
 800b9b4:	af04      	add	r7, sp, #16
 800b9b6:	60f8      	str	r0, [r7, #12]
 800b9b8:	60b9      	str	r1, [r7, #8]
 800b9ba:	4611      	mov	r1, r2
 800b9bc:	461a      	mov	r2, r3
 800b9be:	460b      	mov	r3, r1
 800b9c0:	80fb      	strh	r3, [r7, #6]
 800b9c2:	4613      	mov	r3, r2
 800b9c4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d001      	beq.n	800b9d4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b9d4:	7979      	ldrb	r1, [r7, #5]
 800b9d6:	7e3b      	ldrb	r3, [r7, #24]
 800b9d8:	9303      	str	r3, [sp, #12]
 800b9da:	88fb      	ldrh	r3, [r7, #6]
 800b9dc:	9302      	str	r3, [sp, #8]
 800b9de:	68bb      	ldr	r3, [r7, #8]
 800b9e0:	9301      	str	r3, [sp, #4]
 800b9e2:	2301      	movs	r3, #1
 800b9e4:	9300      	str	r3, [sp, #0]
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	68f8      	ldr	r0, [r7, #12]
 800b9ec:	f000 fb21 	bl	800c032 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b9f0:	2300      	movs	r3, #0
}
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	3710      	adds	r7, #16
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	bd80      	pop	{r7, pc}

0800b9fa <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b9fa:	b580      	push	{r7, lr}
 800b9fc:	b088      	sub	sp, #32
 800b9fe:	af04      	add	r7, sp, #16
 800ba00:	60f8      	str	r0, [r7, #12]
 800ba02:	60b9      	str	r1, [r7, #8]
 800ba04:	4611      	mov	r1, r2
 800ba06:	461a      	mov	r2, r3
 800ba08:	460b      	mov	r3, r1
 800ba0a:	80fb      	strh	r3, [r7, #6]
 800ba0c:	4613      	mov	r3, r2
 800ba0e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ba10:	7979      	ldrb	r1, [r7, #5]
 800ba12:	2300      	movs	r3, #0
 800ba14:	9303      	str	r3, [sp, #12]
 800ba16:	88fb      	ldrh	r3, [r7, #6]
 800ba18:	9302      	str	r3, [sp, #8]
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	9301      	str	r3, [sp, #4]
 800ba1e:	2301      	movs	r3, #1
 800ba20:	9300      	str	r3, [sp, #0]
 800ba22:	2300      	movs	r3, #0
 800ba24:	2201      	movs	r2, #1
 800ba26:	68f8      	ldr	r0, [r7, #12]
 800ba28:	f000 fb03 	bl	800c032 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800ba2c:	2300      	movs	r3, #0

}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	3710      	adds	r7, #16
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd80      	pop	{r7, pc}

0800ba36 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800ba36:	b580      	push	{r7, lr}
 800ba38:	b088      	sub	sp, #32
 800ba3a:	af04      	add	r7, sp, #16
 800ba3c:	60f8      	str	r0, [r7, #12]
 800ba3e:	60b9      	str	r1, [r7, #8]
 800ba40:	4611      	mov	r1, r2
 800ba42:	461a      	mov	r2, r3
 800ba44:	460b      	mov	r3, r1
 800ba46:	80fb      	strh	r3, [r7, #6]
 800ba48:	4613      	mov	r3, r2
 800ba4a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d001      	beq.n	800ba5a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800ba56:	2300      	movs	r3, #0
 800ba58:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ba5a:	7979      	ldrb	r1, [r7, #5]
 800ba5c:	7e3b      	ldrb	r3, [r7, #24]
 800ba5e:	9303      	str	r3, [sp, #12]
 800ba60:	88fb      	ldrh	r3, [r7, #6]
 800ba62:	9302      	str	r3, [sp, #8]
 800ba64:	68bb      	ldr	r3, [r7, #8]
 800ba66:	9301      	str	r3, [sp, #4]
 800ba68:	2301      	movs	r3, #1
 800ba6a:	9300      	str	r3, [sp, #0]
 800ba6c:	2302      	movs	r3, #2
 800ba6e:	2200      	movs	r2, #0
 800ba70:	68f8      	ldr	r0, [r7, #12]
 800ba72:	f000 fade 	bl	800c032 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800ba76:	2300      	movs	r3, #0
}
 800ba78:	4618      	mov	r0, r3
 800ba7a:	3710      	adds	r7, #16
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	bd80      	pop	{r7, pc}

0800ba80 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b088      	sub	sp, #32
 800ba84:	af04      	add	r7, sp, #16
 800ba86:	60f8      	str	r0, [r7, #12]
 800ba88:	60b9      	str	r1, [r7, #8]
 800ba8a:	4611      	mov	r1, r2
 800ba8c:	461a      	mov	r2, r3
 800ba8e:	460b      	mov	r3, r1
 800ba90:	80fb      	strh	r3, [r7, #6]
 800ba92:	4613      	mov	r3, r2
 800ba94:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ba96:	7979      	ldrb	r1, [r7, #5]
 800ba98:	2300      	movs	r3, #0
 800ba9a:	9303      	str	r3, [sp, #12]
 800ba9c:	88fb      	ldrh	r3, [r7, #6]
 800ba9e:	9302      	str	r3, [sp, #8]
 800baa0:	68bb      	ldr	r3, [r7, #8]
 800baa2:	9301      	str	r3, [sp, #4]
 800baa4:	2301      	movs	r3, #1
 800baa6:	9300      	str	r3, [sp, #0]
 800baa8:	2302      	movs	r3, #2
 800baaa:	2201      	movs	r2, #1
 800baac:	68f8      	ldr	r0, [r7, #12]
 800baae:	f000 fac0 	bl	800c032 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800bab2:	2300      	movs	r3, #0
}
 800bab4:	4618      	mov	r0, r3
 800bab6:	3710      	adds	r7, #16
 800bab8:	46bd      	mov	sp, r7
 800baba:	bd80      	pop	{r7, pc}

0800babc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b086      	sub	sp, #24
 800bac0:	af04      	add	r7, sp, #16
 800bac2:	6078      	str	r0, [r7, #4]
 800bac4:	4608      	mov	r0, r1
 800bac6:	4611      	mov	r1, r2
 800bac8:	461a      	mov	r2, r3
 800baca:	4603      	mov	r3, r0
 800bacc:	70fb      	strb	r3, [r7, #3]
 800bace:	460b      	mov	r3, r1
 800bad0:	70bb      	strb	r3, [r7, #2]
 800bad2:	4613      	mov	r3, r2
 800bad4:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800bad6:	7878      	ldrb	r0, [r7, #1]
 800bad8:	78ba      	ldrb	r2, [r7, #2]
 800bada:	78f9      	ldrb	r1, [r7, #3]
 800badc:	8b3b      	ldrh	r3, [r7, #24]
 800bade:	9302      	str	r3, [sp, #8]
 800bae0:	7d3b      	ldrb	r3, [r7, #20]
 800bae2:	9301      	str	r3, [sp, #4]
 800bae4:	7c3b      	ldrb	r3, [r7, #16]
 800bae6:	9300      	str	r3, [sp, #0]
 800bae8:	4603      	mov	r3, r0
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	f000 fa53 	bl	800bf96 <USBH_LL_OpenPipe>

  return USBH_OK;
 800baf0:	2300      	movs	r3, #0
}
 800baf2:	4618      	mov	r0, r3
 800baf4:	3708      	adds	r7, #8
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bd80      	pop	{r7, pc}

0800bafa <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800bafa:	b580      	push	{r7, lr}
 800bafc:	b082      	sub	sp, #8
 800bafe:	af00      	add	r7, sp, #0
 800bb00:	6078      	str	r0, [r7, #4]
 800bb02:	460b      	mov	r3, r1
 800bb04:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800bb06:	78fb      	ldrb	r3, [r7, #3]
 800bb08:	4619      	mov	r1, r3
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	f000 fa72 	bl	800bff4 <USBH_LL_ClosePipe>

  return USBH_OK;
 800bb10:	2300      	movs	r3, #0
}
 800bb12:	4618      	mov	r0, r3
 800bb14:	3708      	adds	r7, #8
 800bb16:	46bd      	mov	sp, r7
 800bb18:	bd80      	pop	{r7, pc}

0800bb1a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800bb1a:	b580      	push	{r7, lr}
 800bb1c:	b084      	sub	sp, #16
 800bb1e:	af00      	add	r7, sp, #0
 800bb20:	6078      	str	r0, [r7, #4]
 800bb22:	460b      	mov	r3, r1
 800bb24:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800bb26:	6878      	ldr	r0, [r7, #4]
 800bb28:	f000 f836 	bl	800bb98 <USBH_GetFreePipe>
 800bb2c:	4603      	mov	r3, r0
 800bb2e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800bb30:	89fb      	ldrh	r3, [r7, #14]
 800bb32:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bb36:	4293      	cmp	r3, r2
 800bb38:	d00a      	beq.n	800bb50 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800bb3a:	78fa      	ldrb	r2, [r7, #3]
 800bb3c:	89fb      	ldrh	r3, [r7, #14]
 800bb3e:	f003 030f 	and.w	r3, r3, #15
 800bb42:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800bb46:	6879      	ldr	r1, [r7, #4]
 800bb48:	33e0      	adds	r3, #224	@ 0xe0
 800bb4a:	009b      	lsls	r3, r3, #2
 800bb4c:	440b      	add	r3, r1
 800bb4e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800bb50:	89fb      	ldrh	r3, [r7, #14]
 800bb52:	b2db      	uxtb	r3, r3
}
 800bb54:	4618      	mov	r0, r3
 800bb56:	3710      	adds	r7, #16
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	bd80      	pop	{r7, pc}

0800bb5c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800bb5c:	b480      	push	{r7}
 800bb5e:	b083      	sub	sp, #12
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
 800bb64:	460b      	mov	r3, r1
 800bb66:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800bb68:	78fb      	ldrb	r3, [r7, #3]
 800bb6a:	2b0f      	cmp	r3, #15
 800bb6c:	d80d      	bhi.n	800bb8a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800bb6e:	78fb      	ldrb	r3, [r7, #3]
 800bb70:	687a      	ldr	r2, [r7, #4]
 800bb72:	33e0      	adds	r3, #224	@ 0xe0
 800bb74:	009b      	lsls	r3, r3, #2
 800bb76:	4413      	add	r3, r2
 800bb78:	685a      	ldr	r2, [r3, #4]
 800bb7a:	78fb      	ldrb	r3, [r7, #3]
 800bb7c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800bb80:	6879      	ldr	r1, [r7, #4]
 800bb82:	33e0      	adds	r3, #224	@ 0xe0
 800bb84:	009b      	lsls	r3, r3, #2
 800bb86:	440b      	add	r3, r1
 800bb88:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800bb8a:	2300      	movs	r3, #0
}
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	370c      	adds	r7, #12
 800bb90:	46bd      	mov	sp, r7
 800bb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb96:	4770      	bx	lr

0800bb98 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800bb98:	b480      	push	{r7}
 800bb9a:	b085      	sub	sp, #20
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800bba0:	2300      	movs	r3, #0
 800bba2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800bba4:	2300      	movs	r3, #0
 800bba6:	73fb      	strb	r3, [r7, #15]
 800bba8:	e00f      	b.n	800bbca <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800bbaa:	7bfb      	ldrb	r3, [r7, #15]
 800bbac:	687a      	ldr	r2, [r7, #4]
 800bbae:	33e0      	adds	r3, #224	@ 0xe0
 800bbb0:	009b      	lsls	r3, r3, #2
 800bbb2:	4413      	add	r3, r2
 800bbb4:	685b      	ldr	r3, [r3, #4]
 800bbb6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d102      	bne.n	800bbc4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800bbbe:	7bfb      	ldrb	r3, [r7, #15]
 800bbc0:	b29b      	uxth	r3, r3
 800bbc2:	e007      	b.n	800bbd4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800bbc4:	7bfb      	ldrb	r3, [r7, #15]
 800bbc6:	3301      	adds	r3, #1
 800bbc8:	73fb      	strb	r3, [r7, #15]
 800bbca:	7bfb      	ldrb	r3, [r7, #15]
 800bbcc:	2b0f      	cmp	r3, #15
 800bbce:	d9ec      	bls.n	800bbaa <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800bbd0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	3714      	adds	r7, #20
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbde:	4770      	bx	lr

0800bbe0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800bbe4:	2201      	movs	r2, #1
 800bbe6:	490e      	ldr	r1, [pc, #56]	@ (800bc20 <MX_USB_HOST_Init+0x40>)
 800bbe8:	480e      	ldr	r0, [pc, #56]	@ (800bc24 <MX_USB_HOST_Init+0x44>)
 800bbea:	f7fe fb0f 	bl	800a20c <USBH_Init>
 800bbee:	4603      	mov	r3, r0
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d001      	beq.n	800bbf8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800bbf4:	f7f5 ff84 	bl	8001b00 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800bbf8:	490b      	ldr	r1, [pc, #44]	@ (800bc28 <MX_USB_HOST_Init+0x48>)
 800bbfa:	480a      	ldr	r0, [pc, #40]	@ (800bc24 <MX_USB_HOST_Init+0x44>)
 800bbfc:	f7fe fbb1 	bl	800a362 <USBH_RegisterClass>
 800bc00:	4603      	mov	r3, r0
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d001      	beq.n	800bc0a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800bc06:	f7f5 ff7b 	bl	8001b00 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800bc0a:	4806      	ldr	r0, [pc, #24]	@ (800bc24 <MX_USB_HOST_Init+0x44>)
 800bc0c:	f7fe fc35 	bl	800a47a <USBH_Start>
 800bc10:	4603      	mov	r3, r0
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d001      	beq.n	800bc1a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800bc16:	f7f5 ff73 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800bc1a:	bf00      	nop
 800bc1c:	bd80      	pop	{r7, pc}
 800bc1e:	bf00      	nop
 800bc20:	0800bc41 	.word	0x0800bc41
 800bc24:	200004f0 	.word	0x200004f0
 800bc28:	20000028 	.word	0x20000028

0800bc2c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800bc30:	4802      	ldr	r0, [pc, #8]	@ (800bc3c <MX_USB_HOST_Process+0x10>)
 800bc32:	f7fe fc33 	bl	800a49c <USBH_Process>
}
 800bc36:	bf00      	nop
 800bc38:	bd80      	pop	{r7, pc}
 800bc3a:	bf00      	nop
 800bc3c:	200004f0 	.word	0x200004f0

0800bc40 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800bc40:	b480      	push	{r7}
 800bc42:	b083      	sub	sp, #12
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
 800bc48:	460b      	mov	r3, r1
 800bc4a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800bc4c:	78fb      	ldrb	r3, [r7, #3]
 800bc4e:	3b01      	subs	r3, #1
 800bc50:	2b04      	cmp	r3, #4
 800bc52:	d819      	bhi.n	800bc88 <USBH_UserProcess+0x48>
 800bc54:	a201      	add	r2, pc, #4	@ (adr r2, 800bc5c <USBH_UserProcess+0x1c>)
 800bc56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc5a:	bf00      	nop
 800bc5c:	0800bc89 	.word	0x0800bc89
 800bc60:	0800bc79 	.word	0x0800bc79
 800bc64:	0800bc89 	.word	0x0800bc89
 800bc68:	0800bc81 	.word	0x0800bc81
 800bc6c:	0800bc71 	.word	0x0800bc71
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800bc70:	4b09      	ldr	r3, [pc, #36]	@ (800bc98 <USBH_UserProcess+0x58>)
 800bc72:	2203      	movs	r2, #3
 800bc74:	701a      	strb	r2, [r3, #0]
  break;
 800bc76:	e008      	b.n	800bc8a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800bc78:	4b07      	ldr	r3, [pc, #28]	@ (800bc98 <USBH_UserProcess+0x58>)
 800bc7a:	2202      	movs	r2, #2
 800bc7c:	701a      	strb	r2, [r3, #0]
  break;
 800bc7e:	e004      	b.n	800bc8a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800bc80:	4b05      	ldr	r3, [pc, #20]	@ (800bc98 <USBH_UserProcess+0x58>)
 800bc82:	2201      	movs	r2, #1
 800bc84:	701a      	strb	r2, [r3, #0]
  break;
 800bc86:	e000      	b.n	800bc8a <USBH_UserProcess+0x4a>

  default:
  break;
 800bc88:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800bc8a:	bf00      	nop
 800bc8c:	370c      	adds	r7, #12
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc94:	4770      	bx	lr
 800bc96:	bf00      	nop
 800bc98:	200008c8 	.word	0x200008c8

0800bc9c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b08a      	sub	sp, #40	@ 0x28
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bca4:	f107 0314 	add.w	r3, r7, #20
 800bca8:	2200      	movs	r2, #0
 800bcaa:	601a      	str	r2, [r3, #0]
 800bcac:	605a      	str	r2, [r3, #4]
 800bcae:	609a      	str	r2, [r3, #8]
 800bcb0:	60da      	str	r2, [r3, #12]
 800bcb2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bcbc:	d147      	bne.n	800bd4e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	613b      	str	r3, [r7, #16]
 800bcc2:	4b25      	ldr	r3, [pc, #148]	@ (800bd58 <HAL_HCD_MspInit+0xbc>)
 800bcc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bcc6:	4a24      	ldr	r2, [pc, #144]	@ (800bd58 <HAL_HCD_MspInit+0xbc>)
 800bcc8:	f043 0301 	orr.w	r3, r3, #1
 800bccc:	6313      	str	r3, [r2, #48]	@ 0x30
 800bcce:	4b22      	ldr	r3, [pc, #136]	@ (800bd58 <HAL_HCD_MspInit+0xbc>)
 800bcd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bcd2:	f003 0301 	and.w	r3, r3, #1
 800bcd6:	613b      	str	r3, [r7, #16]
 800bcd8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800bcda:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bcde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bce0:	2300      	movs	r3, #0
 800bce2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bce4:	2300      	movs	r3, #0
 800bce6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800bce8:	f107 0314 	add.w	r3, r7, #20
 800bcec:	4619      	mov	r1, r3
 800bcee:	481b      	ldr	r0, [pc, #108]	@ (800bd5c <HAL_HCD_MspInit+0xc0>)
 800bcf0:	f7f7 fcfa 	bl	80036e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800bcf4:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800bcf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bcfa:	2302      	movs	r3, #2
 800bcfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bcfe:	2300      	movs	r3, #0
 800bd00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bd02:	2300      	movs	r3, #0
 800bd04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bd06:	230a      	movs	r3, #10
 800bd08:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bd0a:	f107 0314 	add.w	r3, r7, #20
 800bd0e:	4619      	mov	r1, r3
 800bd10:	4812      	ldr	r0, [pc, #72]	@ (800bd5c <HAL_HCD_MspInit+0xc0>)
 800bd12:	f7f7 fce9 	bl	80036e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bd16:	4b10      	ldr	r3, [pc, #64]	@ (800bd58 <HAL_HCD_MspInit+0xbc>)
 800bd18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd1a:	4a0f      	ldr	r2, [pc, #60]	@ (800bd58 <HAL_HCD_MspInit+0xbc>)
 800bd1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd20:	6353      	str	r3, [r2, #52]	@ 0x34
 800bd22:	2300      	movs	r3, #0
 800bd24:	60fb      	str	r3, [r7, #12]
 800bd26:	4b0c      	ldr	r3, [pc, #48]	@ (800bd58 <HAL_HCD_MspInit+0xbc>)
 800bd28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd2a:	4a0b      	ldr	r2, [pc, #44]	@ (800bd58 <HAL_HCD_MspInit+0xbc>)
 800bd2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800bd30:	6453      	str	r3, [r2, #68]	@ 0x44
 800bd32:	4b09      	ldr	r3, [pc, #36]	@ (800bd58 <HAL_HCD_MspInit+0xbc>)
 800bd34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bd3a:	60fb      	str	r3, [r7, #12]
 800bd3c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bd3e:	2200      	movs	r2, #0
 800bd40:	2100      	movs	r1, #0
 800bd42:	2043      	movs	r0, #67	@ 0x43
 800bd44:	f7f7 f889 	bl	8002e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bd48:	2043      	movs	r0, #67	@ 0x43
 800bd4a:	f7f7 f8a2 	bl	8002e92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bd4e:	bf00      	nop
 800bd50:	3728      	adds	r7, #40	@ 0x28
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bd80      	pop	{r7, pc}
 800bd56:	bf00      	nop
 800bd58:	40023800 	.word	0x40023800
 800bd5c:	40020000 	.word	0x40020000

0800bd60 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b082      	sub	sp, #8
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bd6e:	4618      	mov	r0, r3
 800bd70:	f7fe ff6d 	bl	800ac4e <USBH_LL_IncTimer>
}
 800bd74:	bf00      	nop
 800bd76:	3708      	adds	r7, #8
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	bd80      	pop	{r7, pc}

0800bd7c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b082      	sub	sp, #8
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	f7fe ffa9 	bl	800ace2 <USBH_LL_Connect>
}
 800bd90:	bf00      	nop
 800bd92:	3708      	adds	r7, #8
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bd80      	pop	{r7, pc}

0800bd98 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b082      	sub	sp, #8
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bda6:	4618      	mov	r0, r3
 800bda8:	f7fe ffb2 	bl	800ad10 <USBH_LL_Disconnect>
}
 800bdac:	bf00      	nop
 800bdae:	3708      	adds	r7, #8
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	bd80      	pop	{r7, pc}

0800bdb4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800bdb4:	b480      	push	{r7}
 800bdb6:	b083      	sub	sp, #12
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
 800bdbc:	460b      	mov	r3, r1
 800bdbe:	70fb      	strb	r3, [r7, #3]
 800bdc0:	4613      	mov	r3, r2
 800bdc2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800bdc4:	bf00      	nop
 800bdc6:	370c      	adds	r7, #12
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdce:	4770      	bx	lr

0800bdd0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b082      	sub	sp, #8
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bdde:	4618      	mov	r0, r3
 800bde0:	f7fe ff5f 	bl	800aca2 <USBH_LL_PortEnabled>
}
 800bde4:	bf00      	nop
 800bde6:	3708      	adds	r7, #8
 800bde8:	46bd      	mov	sp, r7
 800bdea:	bd80      	pop	{r7, pc}

0800bdec <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b082      	sub	sp, #8
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	f7fe ff5f 	bl	800acbe <USBH_LL_PortDisabled>
}
 800be00:	bf00      	nop
 800be02:	3708      	adds	r7, #8
 800be04:	46bd      	mov	sp, r7
 800be06:	bd80      	pop	{r7, pc}

0800be08 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b082      	sub	sp, #8
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800be16:	2b01      	cmp	r3, #1
 800be18:	d12a      	bne.n	800be70 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800be1a:	4a18      	ldr	r2, [pc, #96]	@ (800be7c <USBH_LL_Init+0x74>)
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	4a15      	ldr	r2, [pc, #84]	@ (800be7c <USBH_LL_Init+0x74>)
 800be26:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800be2a:	4b14      	ldr	r3, [pc, #80]	@ (800be7c <USBH_LL_Init+0x74>)
 800be2c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800be30:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800be32:	4b12      	ldr	r3, [pc, #72]	@ (800be7c <USBH_LL_Init+0x74>)
 800be34:	2208      	movs	r2, #8
 800be36:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800be38:	4b10      	ldr	r3, [pc, #64]	@ (800be7c <USBH_LL_Init+0x74>)
 800be3a:	2201      	movs	r2, #1
 800be3c:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800be3e:	4b0f      	ldr	r3, [pc, #60]	@ (800be7c <USBH_LL_Init+0x74>)
 800be40:	2200      	movs	r2, #0
 800be42:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800be44:	4b0d      	ldr	r3, [pc, #52]	@ (800be7c <USBH_LL_Init+0x74>)
 800be46:	2202      	movs	r2, #2
 800be48:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800be4a:	4b0c      	ldr	r3, [pc, #48]	@ (800be7c <USBH_LL_Init+0x74>)
 800be4c:	2200      	movs	r2, #0
 800be4e:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800be50:	480a      	ldr	r0, [pc, #40]	@ (800be7c <USBH_LL_Init+0x74>)
 800be52:	f7f7 fe2f 	bl	8003ab4 <HAL_HCD_Init>
 800be56:	4603      	mov	r3, r0
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d001      	beq.n	800be60 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800be5c:	f7f5 fe50 	bl	8001b00 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800be60:	4806      	ldr	r0, [pc, #24]	@ (800be7c <USBH_LL_Init+0x74>)
 800be62:	f7f8 fa8f 	bl	8004384 <HAL_HCD_GetCurrentFrame>
 800be66:	4603      	mov	r3, r0
 800be68:	4619      	mov	r1, r3
 800be6a:	6878      	ldr	r0, [r7, #4]
 800be6c:	f7fe fee0 	bl	800ac30 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800be70:	2300      	movs	r3, #0
}
 800be72:	4618      	mov	r0, r3
 800be74:	3708      	adds	r7, #8
 800be76:	46bd      	mov	sp, r7
 800be78:	bd80      	pop	{r7, pc}
 800be7a:	bf00      	nop
 800be7c:	200008cc 	.word	0x200008cc

0800be80 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b084      	sub	sp, #16
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be88:	2300      	movs	r3, #0
 800be8a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800be8c:	2300      	movs	r3, #0
 800be8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800be96:	4618      	mov	r0, r3
 800be98:	f7f8 f9fc 	bl	8004294 <HAL_HCD_Start>
 800be9c:	4603      	mov	r3, r0
 800be9e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bea0:	7bfb      	ldrb	r3, [r7, #15]
 800bea2:	4618      	mov	r0, r3
 800bea4:	f000 f95e 	bl	800c164 <USBH_Get_USB_Status>
 800bea8:	4603      	mov	r3, r0
 800beaa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800beac:	7bbb      	ldrb	r3, [r7, #14]
}
 800beae:	4618      	mov	r0, r3
 800beb0:	3710      	adds	r7, #16
 800beb2:	46bd      	mov	sp, r7
 800beb4:	bd80      	pop	{r7, pc}

0800beb6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800beb6:	b580      	push	{r7, lr}
 800beb8:	b084      	sub	sp, #16
 800beba:	af00      	add	r7, sp, #0
 800bebc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bebe:	2300      	movs	r3, #0
 800bec0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bec2:	2300      	movs	r3, #0
 800bec4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800becc:	4618      	mov	r0, r3
 800bece:	f7f8 fa04 	bl	80042da <HAL_HCD_Stop>
 800bed2:	4603      	mov	r3, r0
 800bed4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bed6:	7bfb      	ldrb	r3, [r7, #15]
 800bed8:	4618      	mov	r0, r3
 800beda:	f000 f943 	bl	800c164 <USBH_Get_USB_Status>
 800bede:	4603      	mov	r3, r0
 800bee0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bee2:	7bbb      	ldrb	r3, [r7, #14]
}
 800bee4:	4618      	mov	r0, r3
 800bee6:	3710      	adds	r7, #16
 800bee8:	46bd      	mov	sp, r7
 800beea:	bd80      	pop	{r7, pc}

0800beec <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b084      	sub	sp, #16
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800bef4:	2301      	movs	r3, #1
 800bef6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800befe:	4618      	mov	r0, r3
 800bf00:	f7f8 fa4e 	bl	80043a0 <HAL_HCD_GetCurrentSpeed>
 800bf04:	4603      	mov	r3, r0
 800bf06:	2b02      	cmp	r3, #2
 800bf08:	d00c      	beq.n	800bf24 <USBH_LL_GetSpeed+0x38>
 800bf0a:	2b02      	cmp	r3, #2
 800bf0c:	d80d      	bhi.n	800bf2a <USBH_LL_GetSpeed+0x3e>
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d002      	beq.n	800bf18 <USBH_LL_GetSpeed+0x2c>
 800bf12:	2b01      	cmp	r3, #1
 800bf14:	d003      	beq.n	800bf1e <USBH_LL_GetSpeed+0x32>
 800bf16:	e008      	b.n	800bf2a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	73fb      	strb	r3, [r7, #15]
    break;
 800bf1c:	e008      	b.n	800bf30 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800bf1e:	2301      	movs	r3, #1
 800bf20:	73fb      	strb	r3, [r7, #15]
    break;
 800bf22:	e005      	b.n	800bf30 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800bf24:	2302      	movs	r3, #2
 800bf26:	73fb      	strb	r3, [r7, #15]
    break;
 800bf28:	e002      	b.n	800bf30 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800bf2a:	2301      	movs	r3, #1
 800bf2c:	73fb      	strb	r3, [r7, #15]
    break;
 800bf2e:	bf00      	nop
  }
  return  speed;
 800bf30:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf32:	4618      	mov	r0, r3
 800bf34:	3710      	adds	r7, #16
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd80      	pop	{r7, pc}

0800bf3a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800bf3a:	b580      	push	{r7, lr}
 800bf3c:	b084      	sub	sp, #16
 800bf3e:	af00      	add	r7, sp, #0
 800bf40:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf42:	2300      	movs	r3, #0
 800bf44:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bf46:	2300      	movs	r3, #0
 800bf48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bf50:	4618      	mov	r0, r3
 800bf52:	f7f8 f9df 	bl	8004314 <HAL_HCD_ResetPort>
 800bf56:	4603      	mov	r3, r0
 800bf58:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bf5a:	7bfb      	ldrb	r3, [r7, #15]
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	f000 f901 	bl	800c164 <USBH_Get_USB_Status>
 800bf62:	4603      	mov	r3, r0
 800bf64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf66:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf68:	4618      	mov	r0, r3
 800bf6a:	3710      	adds	r7, #16
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	bd80      	pop	{r7, pc}

0800bf70 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b082      	sub	sp, #8
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
 800bf78:	460b      	mov	r3, r1
 800bf7a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bf82:	78fa      	ldrb	r2, [r7, #3]
 800bf84:	4611      	mov	r1, r2
 800bf86:	4618      	mov	r0, r3
 800bf88:	f7f8 f9e7 	bl	800435a <HAL_HCD_HC_GetXferCount>
 800bf8c:	4603      	mov	r3, r0
}
 800bf8e:	4618      	mov	r0, r3
 800bf90:	3708      	adds	r7, #8
 800bf92:	46bd      	mov	sp, r7
 800bf94:	bd80      	pop	{r7, pc}

0800bf96 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bf96:	b590      	push	{r4, r7, lr}
 800bf98:	b089      	sub	sp, #36	@ 0x24
 800bf9a:	af04      	add	r7, sp, #16
 800bf9c:	6078      	str	r0, [r7, #4]
 800bf9e:	4608      	mov	r0, r1
 800bfa0:	4611      	mov	r1, r2
 800bfa2:	461a      	mov	r2, r3
 800bfa4:	4603      	mov	r3, r0
 800bfa6:	70fb      	strb	r3, [r7, #3]
 800bfa8:	460b      	mov	r3, r1
 800bfaa:	70bb      	strb	r3, [r7, #2]
 800bfac:	4613      	mov	r3, r2
 800bfae:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800bfbe:	787c      	ldrb	r4, [r7, #1]
 800bfc0:	78ba      	ldrb	r2, [r7, #2]
 800bfc2:	78f9      	ldrb	r1, [r7, #3]
 800bfc4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800bfc6:	9302      	str	r3, [sp, #8]
 800bfc8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800bfcc:	9301      	str	r3, [sp, #4]
 800bfce:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bfd2:	9300      	str	r3, [sp, #0]
 800bfd4:	4623      	mov	r3, r4
 800bfd6:	f7f7 fdd4 	bl	8003b82 <HAL_HCD_HC_Init>
 800bfda:	4603      	mov	r3, r0
 800bfdc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800bfde:	7bfb      	ldrb	r3, [r7, #15]
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	f000 f8bf 	bl	800c164 <USBH_Get_USB_Status>
 800bfe6:	4603      	mov	r3, r0
 800bfe8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bfea:	7bbb      	ldrb	r3, [r7, #14]
}
 800bfec:	4618      	mov	r0, r3
 800bfee:	3714      	adds	r7, #20
 800bff0:	46bd      	mov	sp, r7
 800bff2:	bd90      	pop	{r4, r7, pc}

0800bff4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b084      	sub	sp, #16
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
 800bffc:	460b      	mov	r3, r1
 800bffe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c000:	2300      	movs	r3, #0
 800c002:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c004:	2300      	movs	r3, #0
 800c006:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c00e:	78fa      	ldrb	r2, [r7, #3]
 800c010:	4611      	mov	r1, r2
 800c012:	4618      	mov	r0, r3
 800c014:	f7f7 fe6d 	bl	8003cf2 <HAL_HCD_HC_Halt>
 800c018:	4603      	mov	r3, r0
 800c01a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c01c:	7bfb      	ldrb	r3, [r7, #15]
 800c01e:	4618      	mov	r0, r3
 800c020:	f000 f8a0 	bl	800c164 <USBH_Get_USB_Status>
 800c024:	4603      	mov	r3, r0
 800c026:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c028:	7bbb      	ldrb	r3, [r7, #14]
}
 800c02a:	4618      	mov	r0, r3
 800c02c:	3710      	adds	r7, #16
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}

0800c032 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800c032:	b590      	push	{r4, r7, lr}
 800c034:	b089      	sub	sp, #36	@ 0x24
 800c036:	af04      	add	r7, sp, #16
 800c038:	6078      	str	r0, [r7, #4]
 800c03a:	4608      	mov	r0, r1
 800c03c:	4611      	mov	r1, r2
 800c03e:	461a      	mov	r2, r3
 800c040:	4603      	mov	r3, r0
 800c042:	70fb      	strb	r3, [r7, #3]
 800c044:	460b      	mov	r3, r1
 800c046:	70bb      	strb	r3, [r7, #2]
 800c048:	4613      	mov	r3, r2
 800c04a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c04c:	2300      	movs	r3, #0
 800c04e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c050:	2300      	movs	r3, #0
 800c052:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800c05a:	787c      	ldrb	r4, [r7, #1]
 800c05c:	78ba      	ldrb	r2, [r7, #2]
 800c05e:	78f9      	ldrb	r1, [r7, #3]
 800c060:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800c064:	9303      	str	r3, [sp, #12]
 800c066:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c068:	9302      	str	r3, [sp, #8]
 800c06a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c06c:	9301      	str	r3, [sp, #4]
 800c06e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c072:	9300      	str	r3, [sp, #0]
 800c074:	4623      	mov	r3, r4
 800c076:	f7f7 fe5f 	bl	8003d38 <HAL_HCD_HC_SubmitRequest>
 800c07a:	4603      	mov	r3, r0
 800c07c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800c07e:	7bfb      	ldrb	r3, [r7, #15]
 800c080:	4618      	mov	r0, r3
 800c082:	f000 f86f 	bl	800c164 <USBH_Get_USB_Status>
 800c086:	4603      	mov	r3, r0
 800c088:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c08a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c08c:	4618      	mov	r0, r3
 800c08e:	3714      	adds	r7, #20
 800c090:	46bd      	mov	sp, r7
 800c092:	bd90      	pop	{r4, r7, pc}

0800c094 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c094:	b580      	push	{r7, lr}
 800c096:	b082      	sub	sp, #8
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
 800c09c:	460b      	mov	r3, r1
 800c09e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c0a6:	78fa      	ldrb	r2, [r7, #3]
 800c0a8:	4611      	mov	r1, r2
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	f7f8 f940 	bl	8004330 <HAL_HCD_HC_GetURBState>
 800c0b0:	4603      	mov	r3, r0
}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	3708      	adds	r7, #8
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}

0800c0ba <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800c0ba:	b580      	push	{r7, lr}
 800c0bc:	b082      	sub	sp, #8
 800c0be:	af00      	add	r7, sp, #0
 800c0c0:	6078      	str	r0, [r7, #4]
 800c0c2:	460b      	mov	r3, r1
 800c0c4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800c0cc:	2b01      	cmp	r3, #1
 800c0ce:	d103      	bne.n	800c0d8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800c0d0:	78fb      	ldrb	r3, [r7, #3]
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	f000 f872 	bl	800c1bc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800c0d8:	20c8      	movs	r0, #200	@ 0xc8
 800c0da:	f7f6 f999 	bl	8002410 <HAL_Delay>
  return USBH_OK;
 800c0de:	2300      	movs	r3, #0
}
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	3708      	adds	r7, #8
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	bd80      	pop	{r7, pc}

0800c0e8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800c0e8:	b480      	push	{r7}
 800c0ea:	b085      	sub	sp, #20
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
 800c0f0:	460b      	mov	r3, r1
 800c0f2:	70fb      	strb	r3, [r7, #3]
 800c0f4:	4613      	mov	r3, r2
 800c0f6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800c0fe:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800c100:	78fa      	ldrb	r2, [r7, #3]
 800c102:	68f9      	ldr	r1, [r7, #12]
 800c104:	4613      	mov	r3, r2
 800c106:	011b      	lsls	r3, r3, #4
 800c108:	1a9b      	subs	r3, r3, r2
 800c10a:	009b      	lsls	r3, r3, #2
 800c10c:	440b      	add	r3, r1
 800c10e:	3317      	adds	r3, #23
 800c110:	781b      	ldrb	r3, [r3, #0]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d00a      	beq.n	800c12c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800c116:	78fa      	ldrb	r2, [r7, #3]
 800c118:	68f9      	ldr	r1, [r7, #12]
 800c11a:	4613      	mov	r3, r2
 800c11c:	011b      	lsls	r3, r3, #4
 800c11e:	1a9b      	subs	r3, r3, r2
 800c120:	009b      	lsls	r3, r3, #2
 800c122:	440b      	add	r3, r1
 800c124:	333c      	adds	r3, #60	@ 0x3c
 800c126:	78ba      	ldrb	r2, [r7, #2]
 800c128:	701a      	strb	r2, [r3, #0]
 800c12a:	e009      	b.n	800c140 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800c12c:	78fa      	ldrb	r2, [r7, #3]
 800c12e:	68f9      	ldr	r1, [r7, #12]
 800c130:	4613      	mov	r3, r2
 800c132:	011b      	lsls	r3, r3, #4
 800c134:	1a9b      	subs	r3, r3, r2
 800c136:	009b      	lsls	r3, r3, #2
 800c138:	440b      	add	r3, r1
 800c13a:	333d      	adds	r3, #61	@ 0x3d
 800c13c:	78ba      	ldrb	r2, [r7, #2]
 800c13e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800c140:	2300      	movs	r3, #0
}
 800c142:	4618      	mov	r0, r3
 800c144:	3714      	adds	r7, #20
 800c146:	46bd      	mov	sp, r7
 800c148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14c:	4770      	bx	lr

0800c14e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800c14e:	b580      	push	{r7, lr}
 800c150:	b082      	sub	sp, #8
 800c152:	af00      	add	r7, sp, #0
 800c154:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c156:	6878      	ldr	r0, [r7, #4]
 800c158:	f7f6 f95a 	bl	8002410 <HAL_Delay>
}
 800c15c:	bf00      	nop
 800c15e:	3708      	adds	r7, #8
 800c160:	46bd      	mov	sp, r7
 800c162:	bd80      	pop	{r7, pc}

0800c164 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c164:	b480      	push	{r7}
 800c166:	b085      	sub	sp, #20
 800c168:	af00      	add	r7, sp, #0
 800c16a:	4603      	mov	r3, r0
 800c16c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c16e:	2300      	movs	r3, #0
 800c170:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c172:	79fb      	ldrb	r3, [r7, #7]
 800c174:	2b03      	cmp	r3, #3
 800c176:	d817      	bhi.n	800c1a8 <USBH_Get_USB_Status+0x44>
 800c178:	a201      	add	r2, pc, #4	@ (adr r2, 800c180 <USBH_Get_USB_Status+0x1c>)
 800c17a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c17e:	bf00      	nop
 800c180:	0800c191 	.word	0x0800c191
 800c184:	0800c197 	.word	0x0800c197
 800c188:	0800c19d 	.word	0x0800c19d
 800c18c:	0800c1a3 	.word	0x0800c1a3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c190:	2300      	movs	r3, #0
 800c192:	73fb      	strb	r3, [r7, #15]
    break;
 800c194:	e00b      	b.n	800c1ae <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c196:	2302      	movs	r3, #2
 800c198:	73fb      	strb	r3, [r7, #15]
    break;
 800c19a:	e008      	b.n	800c1ae <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c19c:	2301      	movs	r3, #1
 800c19e:	73fb      	strb	r3, [r7, #15]
    break;
 800c1a0:	e005      	b.n	800c1ae <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c1a2:	2302      	movs	r3, #2
 800c1a4:	73fb      	strb	r3, [r7, #15]
    break;
 800c1a6:	e002      	b.n	800c1ae <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c1a8:	2302      	movs	r3, #2
 800c1aa:	73fb      	strb	r3, [r7, #15]
    break;
 800c1ac:	bf00      	nop
  }
  return usb_status;
 800c1ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	3714      	adds	r7, #20
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ba:	4770      	bx	lr

0800c1bc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b084      	sub	sp, #16
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800c1c6:	79fb      	ldrb	r3, [r7, #7]
 800c1c8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800c1ca:	79fb      	ldrb	r3, [r7, #7]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d102      	bne.n	800c1d6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	73fb      	strb	r3, [r7, #15]
 800c1d4:	e001      	b.n	800c1da <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800c1d6:	2301      	movs	r3, #1
 800c1d8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800c1da:	7bfb      	ldrb	r3, [r7, #15]
 800c1dc:	461a      	mov	r2, r3
 800c1de:	2101      	movs	r1, #1
 800c1e0:	4803      	ldr	r0, [pc, #12]	@ (800c1f0 <MX_DriverVbusFS+0x34>)
 800c1e2:	f7f7 fc35 	bl	8003a50 <HAL_GPIO_WritePin>
}
 800c1e6:	bf00      	nop
 800c1e8:	3710      	adds	r7, #16
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}
 800c1ee:	bf00      	nop
 800c1f0:	40020800 	.word	0x40020800

0800c1f4 <malloc>:
 800c1f4:	4b02      	ldr	r3, [pc, #8]	@ (800c200 <malloc+0xc>)
 800c1f6:	4601      	mov	r1, r0
 800c1f8:	6818      	ldr	r0, [r3, #0]
 800c1fa:	f000 b82d 	b.w	800c258 <_malloc_r>
 800c1fe:	bf00      	nop
 800c200:	20000048 	.word	0x20000048

0800c204 <free>:
 800c204:	4b02      	ldr	r3, [pc, #8]	@ (800c210 <free+0xc>)
 800c206:	4601      	mov	r1, r0
 800c208:	6818      	ldr	r0, [r3, #0]
 800c20a:	f000 b917 	b.w	800c43c <_free_r>
 800c20e:	bf00      	nop
 800c210:	20000048 	.word	0x20000048

0800c214 <sbrk_aligned>:
 800c214:	b570      	push	{r4, r5, r6, lr}
 800c216:	4e0f      	ldr	r6, [pc, #60]	@ (800c254 <sbrk_aligned+0x40>)
 800c218:	460c      	mov	r4, r1
 800c21a:	6831      	ldr	r1, [r6, #0]
 800c21c:	4605      	mov	r5, r0
 800c21e:	b911      	cbnz	r1, 800c226 <sbrk_aligned+0x12>
 800c220:	f000 f8d0 	bl	800c3c4 <_sbrk_r>
 800c224:	6030      	str	r0, [r6, #0]
 800c226:	4621      	mov	r1, r4
 800c228:	4628      	mov	r0, r5
 800c22a:	f000 f8cb 	bl	800c3c4 <_sbrk_r>
 800c22e:	1c43      	adds	r3, r0, #1
 800c230:	d103      	bne.n	800c23a <sbrk_aligned+0x26>
 800c232:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c236:	4620      	mov	r0, r4
 800c238:	bd70      	pop	{r4, r5, r6, pc}
 800c23a:	1cc4      	adds	r4, r0, #3
 800c23c:	f024 0403 	bic.w	r4, r4, #3
 800c240:	42a0      	cmp	r0, r4
 800c242:	d0f8      	beq.n	800c236 <sbrk_aligned+0x22>
 800c244:	1a21      	subs	r1, r4, r0
 800c246:	4628      	mov	r0, r5
 800c248:	f000 f8bc 	bl	800c3c4 <_sbrk_r>
 800c24c:	3001      	adds	r0, #1
 800c24e:	d1f2      	bne.n	800c236 <sbrk_aligned+0x22>
 800c250:	e7ef      	b.n	800c232 <sbrk_aligned+0x1e>
 800c252:	bf00      	nop
 800c254:	20000cac 	.word	0x20000cac

0800c258 <_malloc_r>:
 800c258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c25c:	1ccd      	adds	r5, r1, #3
 800c25e:	f025 0503 	bic.w	r5, r5, #3
 800c262:	3508      	adds	r5, #8
 800c264:	2d0c      	cmp	r5, #12
 800c266:	bf38      	it	cc
 800c268:	250c      	movcc	r5, #12
 800c26a:	2d00      	cmp	r5, #0
 800c26c:	4606      	mov	r6, r0
 800c26e:	db01      	blt.n	800c274 <_malloc_r+0x1c>
 800c270:	42a9      	cmp	r1, r5
 800c272:	d904      	bls.n	800c27e <_malloc_r+0x26>
 800c274:	230c      	movs	r3, #12
 800c276:	6033      	str	r3, [r6, #0]
 800c278:	2000      	movs	r0, #0
 800c27a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c27e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c354 <_malloc_r+0xfc>
 800c282:	f000 f869 	bl	800c358 <__malloc_lock>
 800c286:	f8d8 3000 	ldr.w	r3, [r8]
 800c28a:	461c      	mov	r4, r3
 800c28c:	bb44      	cbnz	r4, 800c2e0 <_malloc_r+0x88>
 800c28e:	4629      	mov	r1, r5
 800c290:	4630      	mov	r0, r6
 800c292:	f7ff ffbf 	bl	800c214 <sbrk_aligned>
 800c296:	1c43      	adds	r3, r0, #1
 800c298:	4604      	mov	r4, r0
 800c29a:	d158      	bne.n	800c34e <_malloc_r+0xf6>
 800c29c:	f8d8 4000 	ldr.w	r4, [r8]
 800c2a0:	4627      	mov	r7, r4
 800c2a2:	2f00      	cmp	r7, #0
 800c2a4:	d143      	bne.n	800c32e <_malloc_r+0xd6>
 800c2a6:	2c00      	cmp	r4, #0
 800c2a8:	d04b      	beq.n	800c342 <_malloc_r+0xea>
 800c2aa:	6823      	ldr	r3, [r4, #0]
 800c2ac:	4639      	mov	r1, r7
 800c2ae:	4630      	mov	r0, r6
 800c2b0:	eb04 0903 	add.w	r9, r4, r3
 800c2b4:	f000 f886 	bl	800c3c4 <_sbrk_r>
 800c2b8:	4581      	cmp	r9, r0
 800c2ba:	d142      	bne.n	800c342 <_malloc_r+0xea>
 800c2bc:	6821      	ldr	r1, [r4, #0]
 800c2be:	1a6d      	subs	r5, r5, r1
 800c2c0:	4629      	mov	r1, r5
 800c2c2:	4630      	mov	r0, r6
 800c2c4:	f7ff ffa6 	bl	800c214 <sbrk_aligned>
 800c2c8:	3001      	adds	r0, #1
 800c2ca:	d03a      	beq.n	800c342 <_malloc_r+0xea>
 800c2cc:	6823      	ldr	r3, [r4, #0]
 800c2ce:	442b      	add	r3, r5
 800c2d0:	6023      	str	r3, [r4, #0]
 800c2d2:	f8d8 3000 	ldr.w	r3, [r8]
 800c2d6:	685a      	ldr	r2, [r3, #4]
 800c2d8:	bb62      	cbnz	r2, 800c334 <_malloc_r+0xdc>
 800c2da:	f8c8 7000 	str.w	r7, [r8]
 800c2de:	e00f      	b.n	800c300 <_malloc_r+0xa8>
 800c2e0:	6822      	ldr	r2, [r4, #0]
 800c2e2:	1b52      	subs	r2, r2, r5
 800c2e4:	d420      	bmi.n	800c328 <_malloc_r+0xd0>
 800c2e6:	2a0b      	cmp	r2, #11
 800c2e8:	d917      	bls.n	800c31a <_malloc_r+0xc2>
 800c2ea:	1961      	adds	r1, r4, r5
 800c2ec:	42a3      	cmp	r3, r4
 800c2ee:	6025      	str	r5, [r4, #0]
 800c2f0:	bf18      	it	ne
 800c2f2:	6059      	strne	r1, [r3, #4]
 800c2f4:	6863      	ldr	r3, [r4, #4]
 800c2f6:	bf08      	it	eq
 800c2f8:	f8c8 1000 	streq.w	r1, [r8]
 800c2fc:	5162      	str	r2, [r4, r5]
 800c2fe:	604b      	str	r3, [r1, #4]
 800c300:	4630      	mov	r0, r6
 800c302:	f000 f82f 	bl	800c364 <__malloc_unlock>
 800c306:	f104 000b 	add.w	r0, r4, #11
 800c30a:	1d23      	adds	r3, r4, #4
 800c30c:	f020 0007 	bic.w	r0, r0, #7
 800c310:	1ac2      	subs	r2, r0, r3
 800c312:	bf1c      	itt	ne
 800c314:	1a1b      	subne	r3, r3, r0
 800c316:	50a3      	strne	r3, [r4, r2]
 800c318:	e7af      	b.n	800c27a <_malloc_r+0x22>
 800c31a:	6862      	ldr	r2, [r4, #4]
 800c31c:	42a3      	cmp	r3, r4
 800c31e:	bf0c      	ite	eq
 800c320:	f8c8 2000 	streq.w	r2, [r8]
 800c324:	605a      	strne	r2, [r3, #4]
 800c326:	e7eb      	b.n	800c300 <_malloc_r+0xa8>
 800c328:	4623      	mov	r3, r4
 800c32a:	6864      	ldr	r4, [r4, #4]
 800c32c:	e7ae      	b.n	800c28c <_malloc_r+0x34>
 800c32e:	463c      	mov	r4, r7
 800c330:	687f      	ldr	r7, [r7, #4]
 800c332:	e7b6      	b.n	800c2a2 <_malloc_r+0x4a>
 800c334:	461a      	mov	r2, r3
 800c336:	685b      	ldr	r3, [r3, #4]
 800c338:	42a3      	cmp	r3, r4
 800c33a:	d1fb      	bne.n	800c334 <_malloc_r+0xdc>
 800c33c:	2300      	movs	r3, #0
 800c33e:	6053      	str	r3, [r2, #4]
 800c340:	e7de      	b.n	800c300 <_malloc_r+0xa8>
 800c342:	230c      	movs	r3, #12
 800c344:	6033      	str	r3, [r6, #0]
 800c346:	4630      	mov	r0, r6
 800c348:	f000 f80c 	bl	800c364 <__malloc_unlock>
 800c34c:	e794      	b.n	800c278 <_malloc_r+0x20>
 800c34e:	6005      	str	r5, [r0, #0]
 800c350:	e7d6      	b.n	800c300 <_malloc_r+0xa8>
 800c352:	bf00      	nop
 800c354:	20000cb0 	.word	0x20000cb0

0800c358 <__malloc_lock>:
 800c358:	4801      	ldr	r0, [pc, #4]	@ (800c360 <__malloc_lock+0x8>)
 800c35a:	f000 b86d 	b.w	800c438 <__retarget_lock_acquire_recursive>
 800c35e:	bf00      	nop
 800c360:	20000dec 	.word	0x20000dec

0800c364 <__malloc_unlock>:
 800c364:	4801      	ldr	r0, [pc, #4]	@ (800c36c <__malloc_unlock+0x8>)
 800c366:	f000 b868 	b.w	800c43a <__retarget_lock_release_recursive>
 800c36a:	bf00      	nop
 800c36c:	20000dec 	.word	0x20000dec

0800c370 <siprintf>:
 800c370:	b40e      	push	{r1, r2, r3}
 800c372:	b510      	push	{r4, lr}
 800c374:	b09d      	sub	sp, #116	@ 0x74
 800c376:	ab1f      	add	r3, sp, #124	@ 0x7c
 800c378:	9002      	str	r0, [sp, #8]
 800c37a:	9006      	str	r0, [sp, #24]
 800c37c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c380:	480a      	ldr	r0, [pc, #40]	@ (800c3ac <siprintf+0x3c>)
 800c382:	9107      	str	r1, [sp, #28]
 800c384:	9104      	str	r1, [sp, #16]
 800c386:	490a      	ldr	r1, [pc, #40]	@ (800c3b0 <siprintf+0x40>)
 800c388:	f853 2b04 	ldr.w	r2, [r3], #4
 800c38c:	9105      	str	r1, [sp, #20]
 800c38e:	2400      	movs	r4, #0
 800c390:	a902      	add	r1, sp, #8
 800c392:	6800      	ldr	r0, [r0, #0]
 800c394:	9301      	str	r3, [sp, #4]
 800c396:	941b      	str	r4, [sp, #108]	@ 0x6c
 800c398:	f000 f8f6 	bl	800c588 <_svfiprintf_r>
 800c39c:	9b02      	ldr	r3, [sp, #8]
 800c39e:	701c      	strb	r4, [r3, #0]
 800c3a0:	b01d      	add	sp, #116	@ 0x74
 800c3a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c3a6:	b003      	add	sp, #12
 800c3a8:	4770      	bx	lr
 800c3aa:	bf00      	nop
 800c3ac:	20000048 	.word	0x20000048
 800c3b0:	ffff0208 	.word	0xffff0208

0800c3b4 <memset>:
 800c3b4:	4402      	add	r2, r0
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	4293      	cmp	r3, r2
 800c3ba:	d100      	bne.n	800c3be <memset+0xa>
 800c3bc:	4770      	bx	lr
 800c3be:	f803 1b01 	strb.w	r1, [r3], #1
 800c3c2:	e7f9      	b.n	800c3b8 <memset+0x4>

0800c3c4 <_sbrk_r>:
 800c3c4:	b538      	push	{r3, r4, r5, lr}
 800c3c6:	4d06      	ldr	r5, [pc, #24]	@ (800c3e0 <_sbrk_r+0x1c>)
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	4604      	mov	r4, r0
 800c3cc:	4608      	mov	r0, r1
 800c3ce:	602b      	str	r3, [r5, #0]
 800c3d0:	f7f5 fef0 	bl	80021b4 <_sbrk>
 800c3d4:	1c43      	adds	r3, r0, #1
 800c3d6:	d102      	bne.n	800c3de <_sbrk_r+0x1a>
 800c3d8:	682b      	ldr	r3, [r5, #0]
 800c3da:	b103      	cbz	r3, 800c3de <_sbrk_r+0x1a>
 800c3dc:	6023      	str	r3, [r4, #0]
 800c3de:	bd38      	pop	{r3, r4, r5, pc}
 800c3e0:	20000df0 	.word	0x20000df0

0800c3e4 <__errno>:
 800c3e4:	4b01      	ldr	r3, [pc, #4]	@ (800c3ec <__errno+0x8>)
 800c3e6:	6818      	ldr	r0, [r3, #0]
 800c3e8:	4770      	bx	lr
 800c3ea:	bf00      	nop
 800c3ec:	20000048 	.word	0x20000048

0800c3f0 <__libc_init_array>:
 800c3f0:	b570      	push	{r4, r5, r6, lr}
 800c3f2:	4d0d      	ldr	r5, [pc, #52]	@ (800c428 <__libc_init_array+0x38>)
 800c3f4:	4c0d      	ldr	r4, [pc, #52]	@ (800c42c <__libc_init_array+0x3c>)
 800c3f6:	1b64      	subs	r4, r4, r5
 800c3f8:	10a4      	asrs	r4, r4, #2
 800c3fa:	2600      	movs	r6, #0
 800c3fc:	42a6      	cmp	r6, r4
 800c3fe:	d109      	bne.n	800c414 <__libc_init_array+0x24>
 800c400:	4d0b      	ldr	r5, [pc, #44]	@ (800c430 <__libc_init_array+0x40>)
 800c402:	4c0c      	ldr	r4, [pc, #48]	@ (800c434 <__libc_init_array+0x44>)
 800c404:	f000 fba6 	bl	800cb54 <_init>
 800c408:	1b64      	subs	r4, r4, r5
 800c40a:	10a4      	asrs	r4, r4, #2
 800c40c:	2600      	movs	r6, #0
 800c40e:	42a6      	cmp	r6, r4
 800c410:	d105      	bne.n	800c41e <__libc_init_array+0x2e>
 800c412:	bd70      	pop	{r4, r5, r6, pc}
 800c414:	f855 3b04 	ldr.w	r3, [r5], #4
 800c418:	4798      	blx	r3
 800c41a:	3601      	adds	r6, #1
 800c41c:	e7ee      	b.n	800c3fc <__libc_init_array+0xc>
 800c41e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c422:	4798      	blx	r3
 800c424:	3601      	adds	r6, #1
 800c426:	e7f2      	b.n	800c40e <__libc_init_array+0x1e>
 800c428:	0800cbf8 	.word	0x0800cbf8
 800c42c:	0800cbf8 	.word	0x0800cbf8
 800c430:	0800cbf8 	.word	0x0800cbf8
 800c434:	0800cbfc 	.word	0x0800cbfc

0800c438 <__retarget_lock_acquire_recursive>:
 800c438:	4770      	bx	lr

0800c43a <__retarget_lock_release_recursive>:
 800c43a:	4770      	bx	lr

0800c43c <_free_r>:
 800c43c:	b538      	push	{r3, r4, r5, lr}
 800c43e:	4605      	mov	r5, r0
 800c440:	2900      	cmp	r1, #0
 800c442:	d041      	beq.n	800c4c8 <_free_r+0x8c>
 800c444:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c448:	1f0c      	subs	r4, r1, #4
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	bfb8      	it	lt
 800c44e:	18e4      	addlt	r4, r4, r3
 800c450:	f7ff ff82 	bl	800c358 <__malloc_lock>
 800c454:	4a1d      	ldr	r2, [pc, #116]	@ (800c4cc <_free_r+0x90>)
 800c456:	6813      	ldr	r3, [r2, #0]
 800c458:	b933      	cbnz	r3, 800c468 <_free_r+0x2c>
 800c45a:	6063      	str	r3, [r4, #4]
 800c45c:	6014      	str	r4, [r2, #0]
 800c45e:	4628      	mov	r0, r5
 800c460:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c464:	f7ff bf7e 	b.w	800c364 <__malloc_unlock>
 800c468:	42a3      	cmp	r3, r4
 800c46a:	d908      	bls.n	800c47e <_free_r+0x42>
 800c46c:	6820      	ldr	r0, [r4, #0]
 800c46e:	1821      	adds	r1, r4, r0
 800c470:	428b      	cmp	r3, r1
 800c472:	bf01      	itttt	eq
 800c474:	6819      	ldreq	r1, [r3, #0]
 800c476:	685b      	ldreq	r3, [r3, #4]
 800c478:	1809      	addeq	r1, r1, r0
 800c47a:	6021      	streq	r1, [r4, #0]
 800c47c:	e7ed      	b.n	800c45a <_free_r+0x1e>
 800c47e:	461a      	mov	r2, r3
 800c480:	685b      	ldr	r3, [r3, #4]
 800c482:	b10b      	cbz	r3, 800c488 <_free_r+0x4c>
 800c484:	42a3      	cmp	r3, r4
 800c486:	d9fa      	bls.n	800c47e <_free_r+0x42>
 800c488:	6811      	ldr	r1, [r2, #0]
 800c48a:	1850      	adds	r0, r2, r1
 800c48c:	42a0      	cmp	r0, r4
 800c48e:	d10b      	bne.n	800c4a8 <_free_r+0x6c>
 800c490:	6820      	ldr	r0, [r4, #0]
 800c492:	4401      	add	r1, r0
 800c494:	1850      	adds	r0, r2, r1
 800c496:	4283      	cmp	r3, r0
 800c498:	6011      	str	r1, [r2, #0]
 800c49a:	d1e0      	bne.n	800c45e <_free_r+0x22>
 800c49c:	6818      	ldr	r0, [r3, #0]
 800c49e:	685b      	ldr	r3, [r3, #4]
 800c4a0:	6053      	str	r3, [r2, #4]
 800c4a2:	4408      	add	r0, r1
 800c4a4:	6010      	str	r0, [r2, #0]
 800c4a6:	e7da      	b.n	800c45e <_free_r+0x22>
 800c4a8:	d902      	bls.n	800c4b0 <_free_r+0x74>
 800c4aa:	230c      	movs	r3, #12
 800c4ac:	602b      	str	r3, [r5, #0]
 800c4ae:	e7d6      	b.n	800c45e <_free_r+0x22>
 800c4b0:	6820      	ldr	r0, [r4, #0]
 800c4b2:	1821      	adds	r1, r4, r0
 800c4b4:	428b      	cmp	r3, r1
 800c4b6:	bf04      	itt	eq
 800c4b8:	6819      	ldreq	r1, [r3, #0]
 800c4ba:	685b      	ldreq	r3, [r3, #4]
 800c4bc:	6063      	str	r3, [r4, #4]
 800c4be:	bf04      	itt	eq
 800c4c0:	1809      	addeq	r1, r1, r0
 800c4c2:	6021      	streq	r1, [r4, #0]
 800c4c4:	6054      	str	r4, [r2, #4]
 800c4c6:	e7ca      	b.n	800c45e <_free_r+0x22>
 800c4c8:	bd38      	pop	{r3, r4, r5, pc}
 800c4ca:	bf00      	nop
 800c4cc:	20000cb0 	.word	0x20000cb0

0800c4d0 <__ssputs_r>:
 800c4d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4d4:	688e      	ldr	r6, [r1, #8]
 800c4d6:	461f      	mov	r7, r3
 800c4d8:	42be      	cmp	r6, r7
 800c4da:	680b      	ldr	r3, [r1, #0]
 800c4dc:	4682      	mov	sl, r0
 800c4de:	460c      	mov	r4, r1
 800c4e0:	4690      	mov	r8, r2
 800c4e2:	d82d      	bhi.n	800c540 <__ssputs_r+0x70>
 800c4e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c4e8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c4ec:	d026      	beq.n	800c53c <__ssputs_r+0x6c>
 800c4ee:	6965      	ldr	r5, [r4, #20]
 800c4f0:	6909      	ldr	r1, [r1, #16]
 800c4f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c4f6:	eba3 0901 	sub.w	r9, r3, r1
 800c4fa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c4fe:	1c7b      	adds	r3, r7, #1
 800c500:	444b      	add	r3, r9
 800c502:	106d      	asrs	r5, r5, #1
 800c504:	429d      	cmp	r5, r3
 800c506:	bf38      	it	cc
 800c508:	461d      	movcc	r5, r3
 800c50a:	0553      	lsls	r3, r2, #21
 800c50c:	d527      	bpl.n	800c55e <__ssputs_r+0x8e>
 800c50e:	4629      	mov	r1, r5
 800c510:	f7ff fea2 	bl	800c258 <_malloc_r>
 800c514:	4606      	mov	r6, r0
 800c516:	b360      	cbz	r0, 800c572 <__ssputs_r+0xa2>
 800c518:	6921      	ldr	r1, [r4, #16]
 800c51a:	464a      	mov	r2, r9
 800c51c:	f000 fb04 	bl	800cb28 <memcpy>
 800c520:	89a3      	ldrh	r3, [r4, #12]
 800c522:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c526:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c52a:	81a3      	strh	r3, [r4, #12]
 800c52c:	6126      	str	r6, [r4, #16]
 800c52e:	6165      	str	r5, [r4, #20]
 800c530:	444e      	add	r6, r9
 800c532:	eba5 0509 	sub.w	r5, r5, r9
 800c536:	6026      	str	r6, [r4, #0]
 800c538:	60a5      	str	r5, [r4, #8]
 800c53a:	463e      	mov	r6, r7
 800c53c:	42be      	cmp	r6, r7
 800c53e:	d900      	bls.n	800c542 <__ssputs_r+0x72>
 800c540:	463e      	mov	r6, r7
 800c542:	6820      	ldr	r0, [r4, #0]
 800c544:	4632      	mov	r2, r6
 800c546:	4641      	mov	r1, r8
 800c548:	f000 fad4 	bl	800caf4 <memmove>
 800c54c:	68a3      	ldr	r3, [r4, #8]
 800c54e:	1b9b      	subs	r3, r3, r6
 800c550:	60a3      	str	r3, [r4, #8]
 800c552:	6823      	ldr	r3, [r4, #0]
 800c554:	4433      	add	r3, r6
 800c556:	6023      	str	r3, [r4, #0]
 800c558:	2000      	movs	r0, #0
 800c55a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c55e:	462a      	mov	r2, r5
 800c560:	f000 fa9a 	bl	800ca98 <_realloc_r>
 800c564:	4606      	mov	r6, r0
 800c566:	2800      	cmp	r0, #0
 800c568:	d1e0      	bne.n	800c52c <__ssputs_r+0x5c>
 800c56a:	6921      	ldr	r1, [r4, #16]
 800c56c:	4650      	mov	r0, sl
 800c56e:	f7ff ff65 	bl	800c43c <_free_r>
 800c572:	230c      	movs	r3, #12
 800c574:	f8ca 3000 	str.w	r3, [sl]
 800c578:	89a3      	ldrh	r3, [r4, #12]
 800c57a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c57e:	81a3      	strh	r3, [r4, #12]
 800c580:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c584:	e7e9      	b.n	800c55a <__ssputs_r+0x8a>
	...

0800c588 <_svfiprintf_r>:
 800c588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c58c:	4698      	mov	r8, r3
 800c58e:	898b      	ldrh	r3, [r1, #12]
 800c590:	061b      	lsls	r3, r3, #24
 800c592:	b09d      	sub	sp, #116	@ 0x74
 800c594:	4607      	mov	r7, r0
 800c596:	460d      	mov	r5, r1
 800c598:	4614      	mov	r4, r2
 800c59a:	d510      	bpl.n	800c5be <_svfiprintf_r+0x36>
 800c59c:	690b      	ldr	r3, [r1, #16]
 800c59e:	b973      	cbnz	r3, 800c5be <_svfiprintf_r+0x36>
 800c5a0:	2140      	movs	r1, #64	@ 0x40
 800c5a2:	f7ff fe59 	bl	800c258 <_malloc_r>
 800c5a6:	6028      	str	r0, [r5, #0]
 800c5a8:	6128      	str	r0, [r5, #16]
 800c5aa:	b930      	cbnz	r0, 800c5ba <_svfiprintf_r+0x32>
 800c5ac:	230c      	movs	r3, #12
 800c5ae:	603b      	str	r3, [r7, #0]
 800c5b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c5b4:	b01d      	add	sp, #116	@ 0x74
 800c5b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5ba:	2340      	movs	r3, #64	@ 0x40
 800c5bc:	616b      	str	r3, [r5, #20]
 800c5be:	2300      	movs	r3, #0
 800c5c0:	9309      	str	r3, [sp, #36]	@ 0x24
 800c5c2:	2320      	movs	r3, #32
 800c5c4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c5c8:	f8cd 800c 	str.w	r8, [sp, #12]
 800c5cc:	2330      	movs	r3, #48	@ 0x30
 800c5ce:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c76c <_svfiprintf_r+0x1e4>
 800c5d2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c5d6:	f04f 0901 	mov.w	r9, #1
 800c5da:	4623      	mov	r3, r4
 800c5dc:	469a      	mov	sl, r3
 800c5de:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c5e2:	b10a      	cbz	r2, 800c5e8 <_svfiprintf_r+0x60>
 800c5e4:	2a25      	cmp	r2, #37	@ 0x25
 800c5e6:	d1f9      	bne.n	800c5dc <_svfiprintf_r+0x54>
 800c5e8:	ebba 0b04 	subs.w	fp, sl, r4
 800c5ec:	d00b      	beq.n	800c606 <_svfiprintf_r+0x7e>
 800c5ee:	465b      	mov	r3, fp
 800c5f0:	4622      	mov	r2, r4
 800c5f2:	4629      	mov	r1, r5
 800c5f4:	4638      	mov	r0, r7
 800c5f6:	f7ff ff6b 	bl	800c4d0 <__ssputs_r>
 800c5fa:	3001      	adds	r0, #1
 800c5fc:	f000 80a7 	beq.w	800c74e <_svfiprintf_r+0x1c6>
 800c600:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c602:	445a      	add	r2, fp
 800c604:	9209      	str	r2, [sp, #36]	@ 0x24
 800c606:	f89a 3000 	ldrb.w	r3, [sl]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	f000 809f 	beq.w	800c74e <_svfiprintf_r+0x1c6>
 800c610:	2300      	movs	r3, #0
 800c612:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c616:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c61a:	f10a 0a01 	add.w	sl, sl, #1
 800c61e:	9304      	str	r3, [sp, #16]
 800c620:	9307      	str	r3, [sp, #28]
 800c622:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c626:	931a      	str	r3, [sp, #104]	@ 0x68
 800c628:	4654      	mov	r4, sl
 800c62a:	2205      	movs	r2, #5
 800c62c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c630:	484e      	ldr	r0, [pc, #312]	@ (800c76c <_svfiprintf_r+0x1e4>)
 800c632:	f7f3 fdd5 	bl	80001e0 <memchr>
 800c636:	9a04      	ldr	r2, [sp, #16]
 800c638:	b9d8      	cbnz	r0, 800c672 <_svfiprintf_r+0xea>
 800c63a:	06d0      	lsls	r0, r2, #27
 800c63c:	bf44      	itt	mi
 800c63e:	2320      	movmi	r3, #32
 800c640:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c644:	0711      	lsls	r1, r2, #28
 800c646:	bf44      	itt	mi
 800c648:	232b      	movmi	r3, #43	@ 0x2b
 800c64a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c64e:	f89a 3000 	ldrb.w	r3, [sl]
 800c652:	2b2a      	cmp	r3, #42	@ 0x2a
 800c654:	d015      	beq.n	800c682 <_svfiprintf_r+0xfa>
 800c656:	9a07      	ldr	r2, [sp, #28]
 800c658:	4654      	mov	r4, sl
 800c65a:	2000      	movs	r0, #0
 800c65c:	f04f 0c0a 	mov.w	ip, #10
 800c660:	4621      	mov	r1, r4
 800c662:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c666:	3b30      	subs	r3, #48	@ 0x30
 800c668:	2b09      	cmp	r3, #9
 800c66a:	d94b      	bls.n	800c704 <_svfiprintf_r+0x17c>
 800c66c:	b1b0      	cbz	r0, 800c69c <_svfiprintf_r+0x114>
 800c66e:	9207      	str	r2, [sp, #28]
 800c670:	e014      	b.n	800c69c <_svfiprintf_r+0x114>
 800c672:	eba0 0308 	sub.w	r3, r0, r8
 800c676:	fa09 f303 	lsl.w	r3, r9, r3
 800c67a:	4313      	orrs	r3, r2
 800c67c:	9304      	str	r3, [sp, #16]
 800c67e:	46a2      	mov	sl, r4
 800c680:	e7d2      	b.n	800c628 <_svfiprintf_r+0xa0>
 800c682:	9b03      	ldr	r3, [sp, #12]
 800c684:	1d19      	adds	r1, r3, #4
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	9103      	str	r1, [sp, #12]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	bfbb      	ittet	lt
 800c68e:	425b      	neglt	r3, r3
 800c690:	f042 0202 	orrlt.w	r2, r2, #2
 800c694:	9307      	strge	r3, [sp, #28]
 800c696:	9307      	strlt	r3, [sp, #28]
 800c698:	bfb8      	it	lt
 800c69a:	9204      	strlt	r2, [sp, #16]
 800c69c:	7823      	ldrb	r3, [r4, #0]
 800c69e:	2b2e      	cmp	r3, #46	@ 0x2e
 800c6a0:	d10a      	bne.n	800c6b8 <_svfiprintf_r+0x130>
 800c6a2:	7863      	ldrb	r3, [r4, #1]
 800c6a4:	2b2a      	cmp	r3, #42	@ 0x2a
 800c6a6:	d132      	bne.n	800c70e <_svfiprintf_r+0x186>
 800c6a8:	9b03      	ldr	r3, [sp, #12]
 800c6aa:	1d1a      	adds	r2, r3, #4
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	9203      	str	r2, [sp, #12]
 800c6b0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c6b4:	3402      	adds	r4, #2
 800c6b6:	9305      	str	r3, [sp, #20]
 800c6b8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c77c <_svfiprintf_r+0x1f4>
 800c6bc:	7821      	ldrb	r1, [r4, #0]
 800c6be:	2203      	movs	r2, #3
 800c6c0:	4650      	mov	r0, sl
 800c6c2:	f7f3 fd8d 	bl	80001e0 <memchr>
 800c6c6:	b138      	cbz	r0, 800c6d8 <_svfiprintf_r+0x150>
 800c6c8:	9b04      	ldr	r3, [sp, #16]
 800c6ca:	eba0 000a 	sub.w	r0, r0, sl
 800c6ce:	2240      	movs	r2, #64	@ 0x40
 800c6d0:	4082      	lsls	r2, r0
 800c6d2:	4313      	orrs	r3, r2
 800c6d4:	3401      	adds	r4, #1
 800c6d6:	9304      	str	r3, [sp, #16]
 800c6d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6dc:	4824      	ldr	r0, [pc, #144]	@ (800c770 <_svfiprintf_r+0x1e8>)
 800c6de:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c6e2:	2206      	movs	r2, #6
 800c6e4:	f7f3 fd7c 	bl	80001e0 <memchr>
 800c6e8:	2800      	cmp	r0, #0
 800c6ea:	d036      	beq.n	800c75a <_svfiprintf_r+0x1d2>
 800c6ec:	4b21      	ldr	r3, [pc, #132]	@ (800c774 <_svfiprintf_r+0x1ec>)
 800c6ee:	bb1b      	cbnz	r3, 800c738 <_svfiprintf_r+0x1b0>
 800c6f0:	9b03      	ldr	r3, [sp, #12]
 800c6f2:	3307      	adds	r3, #7
 800c6f4:	f023 0307 	bic.w	r3, r3, #7
 800c6f8:	3308      	adds	r3, #8
 800c6fa:	9303      	str	r3, [sp, #12]
 800c6fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6fe:	4433      	add	r3, r6
 800c700:	9309      	str	r3, [sp, #36]	@ 0x24
 800c702:	e76a      	b.n	800c5da <_svfiprintf_r+0x52>
 800c704:	fb0c 3202 	mla	r2, ip, r2, r3
 800c708:	460c      	mov	r4, r1
 800c70a:	2001      	movs	r0, #1
 800c70c:	e7a8      	b.n	800c660 <_svfiprintf_r+0xd8>
 800c70e:	2300      	movs	r3, #0
 800c710:	3401      	adds	r4, #1
 800c712:	9305      	str	r3, [sp, #20]
 800c714:	4619      	mov	r1, r3
 800c716:	f04f 0c0a 	mov.w	ip, #10
 800c71a:	4620      	mov	r0, r4
 800c71c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c720:	3a30      	subs	r2, #48	@ 0x30
 800c722:	2a09      	cmp	r2, #9
 800c724:	d903      	bls.n	800c72e <_svfiprintf_r+0x1a6>
 800c726:	2b00      	cmp	r3, #0
 800c728:	d0c6      	beq.n	800c6b8 <_svfiprintf_r+0x130>
 800c72a:	9105      	str	r1, [sp, #20]
 800c72c:	e7c4      	b.n	800c6b8 <_svfiprintf_r+0x130>
 800c72e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c732:	4604      	mov	r4, r0
 800c734:	2301      	movs	r3, #1
 800c736:	e7f0      	b.n	800c71a <_svfiprintf_r+0x192>
 800c738:	ab03      	add	r3, sp, #12
 800c73a:	9300      	str	r3, [sp, #0]
 800c73c:	462a      	mov	r2, r5
 800c73e:	4b0e      	ldr	r3, [pc, #56]	@ (800c778 <_svfiprintf_r+0x1f0>)
 800c740:	a904      	add	r1, sp, #16
 800c742:	4638      	mov	r0, r7
 800c744:	f3af 8000 	nop.w
 800c748:	1c42      	adds	r2, r0, #1
 800c74a:	4606      	mov	r6, r0
 800c74c:	d1d6      	bne.n	800c6fc <_svfiprintf_r+0x174>
 800c74e:	89ab      	ldrh	r3, [r5, #12]
 800c750:	065b      	lsls	r3, r3, #25
 800c752:	f53f af2d 	bmi.w	800c5b0 <_svfiprintf_r+0x28>
 800c756:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c758:	e72c      	b.n	800c5b4 <_svfiprintf_r+0x2c>
 800c75a:	ab03      	add	r3, sp, #12
 800c75c:	9300      	str	r3, [sp, #0]
 800c75e:	462a      	mov	r2, r5
 800c760:	4b05      	ldr	r3, [pc, #20]	@ (800c778 <_svfiprintf_r+0x1f0>)
 800c762:	a904      	add	r1, sp, #16
 800c764:	4638      	mov	r0, r7
 800c766:	f000 f879 	bl	800c85c <_printf_i>
 800c76a:	e7ed      	b.n	800c748 <_svfiprintf_r+0x1c0>
 800c76c:	0800cbbc 	.word	0x0800cbbc
 800c770:	0800cbc6 	.word	0x0800cbc6
 800c774:	00000000 	.word	0x00000000
 800c778:	0800c4d1 	.word	0x0800c4d1
 800c77c:	0800cbc2 	.word	0x0800cbc2

0800c780 <_printf_common>:
 800c780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c784:	4616      	mov	r6, r2
 800c786:	4698      	mov	r8, r3
 800c788:	688a      	ldr	r2, [r1, #8]
 800c78a:	690b      	ldr	r3, [r1, #16]
 800c78c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c790:	4293      	cmp	r3, r2
 800c792:	bfb8      	it	lt
 800c794:	4613      	movlt	r3, r2
 800c796:	6033      	str	r3, [r6, #0]
 800c798:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c79c:	4607      	mov	r7, r0
 800c79e:	460c      	mov	r4, r1
 800c7a0:	b10a      	cbz	r2, 800c7a6 <_printf_common+0x26>
 800c7a2:	3301      	adds	r3, #1
 800c7a4:	6033      	str	r3, [r6, #0]
 800c7a6:	6823      	ldr	r3, [r4, #0]
 800c7a8:	0699      	lsls	r1, r3, #26
 800c7aa:	bf42      	ittt	mi
 800c7ac:	6833      	ldrmi	r3, [r6, #0]
 800c7ae:	3302      	addmi	r3, #2
 800c7b0:	6033      	strmi	r3, [r6, #0]
 800c7b2:	6825      	ldr	r5, [r4, #0]
 800c7b4:	f015 0506 	ands.w	r5, r5, #6
 800c7b8:	d106      	bne.n	800c7c8 <_printf_common+0x48>
 800c7ba:	f104 0a19 	add.w	sl, r4, #25
 800c7be:	68e3      	ldr	r3, [r4, #12]
 800c7c0:	6832      	ldr	r2, [r6, #0]
 800c7c2:	1a9b      	subs	r3, r3, r2
 800c7c4:	42ab      	cmp	r3, r5
 800c7c6:	dc26      	bgt.n	800c816 <_printf_common+0x96>
 800c7c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c7cc:	6822      	ldr	r2, [r4, #0]
 800c7ce:	3b00      	subs	r3, #0
 800c7d0:	bf18      	it	ne
 800c7d2:	2301      	movne	r3, #1
 800c7d4:	0692      	lsls	r2, r2, #26
 800c7d6:	d42b      	bmi.n	800c830 <_printf_common+0xb0>
 800c7d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c7dc:	4641      	mov	r1, r8
 800c7de:	4638      	mov	r0, r7
 800c7e0:	47c8      	blx	r9
 800c7e2:	3001      	adds	r0, #1
 800c7e4:	d01e      	beq.n	800c824 <_printf_common+0xa4>
 800c7e6:	6823      	ldr	r3, [r4, #0]
 800c7e8:	6922      	ldr	r2, [r4, #16]
 800c7ea:	f003 0306 	and.w	r3, r3, #6
 800c7ee:	2b04      	cmp	r3, #4
 800c7f0:	bf02      	ittt	eq
 800c7f2:	68e5      	ldreq	r5, [r4, #12]
 800c7f4:	6833      	ldreq	r3, [r6, #0]
 800c7f6:	1aed      	subeq	r5, r5, r3
 800c7f8:	68a3      	ldr	r3, [r4, #8]
 800c7fa:	bf0c      	ite	eq
 800c7fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c800:	2500      	movne	r5, #0
 800c802:	4293      	cmp	r3, r2
 800c804:	bfc4      	itt	gt
 800c806:	1a9b      	subgt	r3, r3, r2
 800c808:	18ed      	addgt	r5, r5, r3
 800c80a:	2600      	movs	r6, #0
 800c80c:	341a      	adds	r4, #26
 800c80e:	42b5      	cmp	r5, r6
 800c810:	d11a      	bne.n	800c848 <_printf_common+0xc8>
 800c812:	2000      	movs	r0, #0
 800c814:	e008      	b.n	800c828 <_printf_common+0xa8>
 800c816:	2301      	movs	r3, #1
 800c818:	4652      	mov	r2, sl
 800c81a:	4641      	mov	r1, r8
 800c81c:	4638      	mov	r0, r7
 800c81e:	47c8      	blx	r9
 800c820:	3001      	adds	r0, #1
 800c822:	d103      	bne.n	800c82c <_printf_common+0xac>
 800c824:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c82c:	3501      	adds	r5, #1
 800c82e:	e7c6      	b.n	800c7be <_printf_common+0x3e>
 800c830:	18e1      	adds	r1, r4, r3
 800c832:	1c5a      	adds	r2, r3, #1
 800c834:	2030      	movs	r0, #48	@ 0x30
 800c836:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c83a:	4422      	add	r2, r4
 800c83c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c840:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c844:	3302      	adds	r3, #2
 800c846:	e7c7      	b.n	800c7d8 <_printf_common+0x58>
 800c848:	2301      	movs	r3, #1
 800c84a:	4622      	mov	r2, r4
 800c84c:	4641      	mov	r1, r8
 800c84e:	4638      	mov	r0, r7
 800c850:	47c8      	blx	r9
 800c852:	3001      	adds	r0, #1
 800c854:	d0e6      	beq.n	800c824 <_printf_common+0xa4>
 800c856:	3601      	adds	r6, #1
 800c858:	e7d9      	b.n	800c80e <_printf_common+0x8e>
	...

0800c85c <_printf_i>:
 800c85c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c860:	7e0f      	ldrb	r7, [r1, #24]
 800c862:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c864:	2f78      	cmp	r7, #120	@ 0x78
 800c866:	4691      	mov	r9, r2
 800c868:	4680      	mov	r8, r0
 800c86a:	460c      	mov	r4, r1
 800c86c:	469a      	mov	sl, r3
 800c86e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c872:	d807      	bhi.n	800c884 <_printf_i+0x28>
 800c874:	2f62      	cmp	r7, #98	@ 0x62
 800c876:	d80a      	bhi.n	800c88e <_printf_i+0x32>
 800c878:	2f00      	cmp	r7, #0
 800c87a:	f000 80d1 	beq.w	800ca20 <_printf_i+0x1c4>
 800c87e:	2f58      	cmp	r7, #88	@ 0x58
 800c880:	f000 80b8 	beq.w	800c9f4 <_printf_i+0x198>
 800c884:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c888:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c88c:	e03a      	b.n	800c904 <_printf_i+0xa8>
 800c88e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c892:	2b15      	cmp	r3, #21
 800c894:	d8f6      	bhi.n	800c884 <_printf_i+0x28>
 800c896:	a101      	add	r1, pc, #4	@ (adr r1, 800c89c <_printf_i+0x40>)
 800c898:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c89c:	0800c8f5 	.word	0x0800c8f5
 800c8a0:	0800c909 	.word	0x0800c909
 800c8a4:	0800c885 	.word	0x0800c885
 800c8a8:	0800c885 	.word	0x0800c885
 800c8ac:	0800c885 	.word	0x0800c885
 800c8b0:	0800c885 	.word	0x0800c885
 800c8b4:	0800c909 	.word	0x0800c909
 800c8b8:	0800c885 	.word	0x0800c885
 800c8bc:	0800c885 	.word	0x0800c885
 800c8c0:	0800c885 	.word	0x0800c885
 800c8c4:	0800c885 	.word	0x0800c885
 800c8c8:	0800ca07 	.word	0x0800ca07
 800c8cc:	0800c933 	.word	0x0800c933
 800c8d0:	0800c9c1 	.word	0x0800c9c1
 800c8d4:	0800c885 	.word	0x0800c885
 800c8d8:	0800c885 	.word	0x0800c885
 800c8dc:	0800ca29 	.word	0x0800ca29
 800c8e0:	0800c885 	.word	0x0800c885
 800c8e4:	0800c933 	.word	0x0800c933
 800c8e8:	0800c885 	.word	0x0800c885
 800c8ec:	0800c885 	.word	0x0800c885
 800c8f0:	0800c9c9 	.word	0x0800c9c9
 800c8f4:	6833      	ldr	r3, [r6, #0]
 800c8f6:	1d1a      	adds	r2, r3, #4
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	6032      	str	r2, [r6, #0]
 800c8fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c900:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c904:	2301      	movs	r3, #1
 800c906:	e09c      	b.n	800ca42 <_printf_i+0x1e6>
 800c908:	6833      	ldr	r3, [r6, #0]
 800c90a:	6820      	ldr	r0, [r4, #0]
 800c90c:	1d19      	adds	r1, r3, #4
 800c90e:	6031      	str	r1, [r6, #0]
 800c910:	0606      	lsls	r6, r0, #24
 800c912:	d501      	bpl.n	800c918 <_printf_i+0xbc>
 800c914:	681d      	ldr	r5, [r3, #0]
 800c916:	e003      	b.n	800c920 <_printf_i+0xc4>
 800c918:	0645      	lsls	r5, r0, #25
 800c91a:	d5fb      	bpl.n	800c914 <_printf_i+0xb8>
 800c91c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c920:	2d00      	cmp	r5, #0
 800c922:	da03      	bge.n	800c92c <_printf_i+0xd0>
 800c924:	232d      	movs	r3, #45	@ 0x2d
 800c926:	426d      	negs	r5, r5
 800c928:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c92c:	4858      	ldr	r0, [pc, #352]	@ (800ca90 <_printf_i+0x234>)
 800c92e:	230a      	movs	r3, #10
 800c930:	e011      	b.n	800c956 <_printf_i+0xfa>
 800c932:	6821      	ldr	r1, [r4, #0]
 800c934:	6833      	ldr	r3, [r6, #0]
 800c936:	0608      	lsls	r0, r1, #24
 800c938:	f853 5b04 	ldr.w	r5, [r3], #4
 800c93c:	d402      	bmi.n	800c944 <_printf_i+0xe8>
 800c93e:	0649      	lsls	r1, r1, #25
 800c940:	bf48      	it	mi
 800c942:	b2ad      	uxthmi	r5, r5
 800c944:	2f6f      	cmp	r7, #111	@ 0x6f
 800c946:	4852      	ldr	r0, [pc, #328]	@ (800ca90 <_printf_i+0x234>)
 800c948:	6033      	str	r3, [r6, #0]
 800c94a:	bf14      	ite	ne
 800c94c:	230a      	movne	r3, #10
 800c94e:	2308      	moveq	r3, #8
 800c950:	2100      	movs	r1, #0
 800c952:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c956:	6866      	ldr	r6, [r4, #4]
 800c958:	60a6      	str	r6, [r4, #8]
 800c95a:	2e00      	cmp	r6, #0
 800c95c:	db05      	blt.n	800c96a <_printf_i+0x10e>
 800c95e:	6821      	ldr	r1, [r4, #0]
 800c960:	432e      	orrs	r6, r5
 800c962:	f021 0104 	bic.w	r1, r1, #4
 800c966:	6021      	str	r1, [r4, #0]
 800c968:	d04b      	beq.n	800ca02 <_printf_i+0x1a6>
 800c96a:	4616      	mov	r6, r2
 800c96c:	fbb5 f1f3 	udiv	r1, r5, r3
 800c970:	fb03 5711 	mls	r7, r3, r1, r5
 800c974:	5dc7      	ldrb	r7, [r0, r7]
 800c976:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c97a:	462f      	mov	r7, r5
 800c97c:	42bb      	cmp	r3, r7
 800c97e:	460d      	mov	r5, r1
 800c980:	d9f4      	bls.n	800c96c <_printf_i+0x110>
 800c982:	2b08      	cmp	r3, #8
 800c984:	d10b      	bne.n	800c99e <_printf_i+0x142>
 800c986:	6823      	ldr	r3, [r4, #0]
 800c988:	07df      	lsls	r7, r3, #31
 800c98a:	d508      	bpl.n	800c99e <_printf_i+0x142>
 800c98c:	6923      	ldr	r3, [r4, #16]
 800c98e:	6861      	ldr	r1, [r4, #4]
 800c990:	4299      	cmp	r1, r3
 800c992:	bfde      	ittt	le
 800c994:	2330      	movle	r3, #48	@ 0x30
 800c996:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c99a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800c99e:	1b92      	subs	r2, r2, r6
 800c9a0:	6122      	str	r2, [r4, #16]
 800c9a2:	f8cd a000 	str.w	sl, [sp]
 800c9a6:	464b      	mov	r3, r9
 800c9a8:	aa03      	add	r2, sp, #12
 800c9aa:	4621      	mov	r1, r4
 800c9ac:	4640      	mov	r0, r8
 800c9ae:	f7ff fee7 	bl	800c780 <_printf_common>
 800c9b2:	3001      	adds	r0, #1
 800c9b4:	d14a      	bne.n	800ca4c <_printf_i+0x1f0>
 800c9b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c9ba:	b004      	add	sp, #16
 800c9bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9c0:	6823      	ldr	r3, [r4, #0]
 800c9c2:	f043 0320 	orr.w	r3, r3, #32
 800c9c6:	6023      	str	r3, [r4, #0]
 800c9c8:	4832      	ldr	r0, [pc, #200]	@ (800ca94 <_printf_i+0x238>)
 800c9ca:	2778      	movs	r7, #120	@ 0x78
 800c9cc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c9d0:	6823      	ldr	r3, [r4, #0]
 800c9d2:	6831      	ldr	r1, [r6, #0]
 800c9d4:	061f      	lsls	r7, r3, #24
 800c9d6:	f851 5b04 	ldr.w	r5, [r1], #4
 800c9da:	d402      	bmi.n	800c9e2 <_printf_i+0x186>
 800c9dc:	065f      	lsls	r7, r3, #25
 800c9de:	bf48      	it	mi
 800c9e0:	b2ad      	uxthmi	r5, r5
 800c9e2:	6031      	str	r1, [r6, #0]
 800c9e4:	07d9      	lsls	r1, r3, #31
 800c9e6:	bf44      	itt	mi
 800c9e8:	f043 0320 	orrmi.w	r3, r3, #32
 800c9ec:	6023      	strmi	r3, [r4, #0]
 800c9ee:	b11d      	cbz	r5, 800c9f8 <_printf_i+0x19c>
 800c9f0:	2310      	movs	r3, #16
 800c9f2:	e7ad      	b.n	800c950 <_printf_i+0xf4>
 800c9f4:	4826      	ldr	r0, [pc, #152]	@ (800ca90 <_printf_i+0x234>)
 800c9f6:	e7e9      	b.n	800c9cc <_printf_i+0x170>
 800c9f8:	6823      	ldr	r3, [r4, #0]
 800c9fa:	f023 0320 	bic.w	r3, r3, #32
 800c9fe:	6023      	str	r3, [r4, #0]
 800ca00:	e7f6      	b.n	800c9f0 <_printf_i+0x194>
 800ca02:	4616      	mov	r6, r2
 800ca04:	e7bd      	b.n	800c982 <_printf_i+0x126>
 800ca06:	6833      	ldr	r3, [r6, #0]
 800ca08:	6825      	ldr	r5, [r4, #0]
 800ca0a:	6961      	ldr	r1, [r4, #20]
 800ca0c:	1d18      	adds	r0, r3, #4
 800ca0e:	6030      	str	r0, [r6, #0]
 800ca10:	062e      	lsls	r6, r5, #24
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	d501      	bpl.n	800ca1a <_printf_i+0x1be>
 800ca16:	6019      	str	r1, [r3, #0]
 800ca18:	e002      	b.n	800ca20 <_printf_i+0x1c4>
 800ca1a:	0668      	lsls	r0, r5, #25
 800ca1c:	d5fb      	bpl.n	800ca16 <_printf_i+0x1ba>
 800ca1e:	8019      	strh	r1, [r3, #0]
 800ca20:	2300      	movs	r3, #0
 800ca22:	6123      	str	r3, [r4, #16]
 800ca24:	4616      	mov	r6, r2
 800ca26:	e7bc      	b.n	800c9a2 <_printf_i+0x146>
 800ca28:	6833      	ldr	r3, [r6, #0]
 800ca2a:	1d1a      	adds	r2, r3, #4
 800ca2c:	6032      	str	r2, [r6, #0]
 800ca2e:	681e      	ldr	r6, [r3, #0]
 800ca30:	6862      	ldr	r2, [r4, #4]
 800ca32:	2100      	movs	r1, #0
 800ca34:	4630      	mov	r0, r6
 800ca36:	f7f3 fbd3 	bl	80001e0 <memchr>
 800ca3a:	b108      	cbz	r0, 800ca40 <_printf_i+0x1e4>
 800ca3c:	1b80      	subs	r0, r0, r6
 800ca3e:	6060      	str	r0, [r4, #4]
 800ca40:	6863      	ldr	r3, [r4, #4]
 800ca42:	6123      	str	r3, [r4, #16]
 800ca44:	2300      	movs	r3, #0
 800ca46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ca4a:	e7aa      	b.n	800c9a2 <_printf_i+0x146>
 800ca4c:	6923      	ldr	r3, [r4, #16]
 800ca4e:	4632      	mov	r2, r6
 800ca50:	4649      	mov	r1, r9
 800ca52:	4640      	mov	r0, r8
 800ca54:	47d0      	blx	sl
 800ca56:	3001      	adds	r0, #1
 800ca58:	d0ad      	beq.n	800c9b6 <_printf_i+0x15a>
 800ca5a:	6823      	ldr	r3, [r4, #0]
 800ca5c:	079b      	lsls	r3, r3, #30
 800ca5e:	d413      	bmi.n	800ca88 <_printf_i+0x22c>
 800ca60:	68e0      	ldr	r0, [r4, #12]
 800ca62:	9b03      	ldr	r3, [sp, #12]
 800ca64:	4298      	cmp	r0, r3
 800ca66:	bfb8      	it	lt
 800ca68:	4618      	movlt	r0, r3
 800ca6a:	e7a6      	b.n	800c9ba <_printf_i+0x15e>
 800ca6c:	2301      	movs	r3, #1
 800ca6e:	4632      	mov	r2, r6
 800ca70:	4649      	mov	r1, r9
 800ca72:	4640      	mov	r0, r8
 800ca74:	47d0      	blx	sl
 800ca76:	3001      	adds	r0, #1
 800ca78:	d09d      	beq.n	800c9b6 <_printf_i+0x15a>
 800ca7a:	3501      	adds	r5, #1
 800ca7c:	68e3      	ldr	r3, [r4, #12]
 800ca7e:	9903      	ldr	r1, [sp, #12]
 800ca80:	1a5b      	subs	r3, r3, r1
 800ca82:	42ab      	cmp	r3, r5
 800ca84:	dcf2      	bgt.n	800ca6c <_printf_i+0x210>
 800ca86:	e7eb      	b.n	800ca60 <_printf_i+0x204>
 800ca88:	2500      	movs	r5, #0
 800ca8a:	f104 0619 	add.w	r6, r4, #25
 800ca8e:	e7f5      	b.n	800ca7c <_printf_i+0x220>
 800ca90:	0800cbcd 	.word	0x0800cbcd
 800ca94:	0800cbde 	.word	0x0800cbde

0800ca98 <_realloc_r>:
 800ca98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca9c:	4607      	mov	r7, r0
 800ca9e:	4614      	mov	r4, r2
 800caa0:	460d      	mov	r5, r1
 800caa2:	b921      	cbnz	r1, 800caae <_realloc_r+0x16>
 800caa4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800caa8:	4611      	mov	r1, r2
 800caaa:	f7ff bbd5 	b.w	800c258 <_malloc_r>
 800caae:	b92a      	cbnz	r2, 800cabc <_realloc_r+0x24>
 800cab0:	f7ff fcc4 	bl	800c43c <_free_r>
 800cab4:	4625      	mov	r5, r4
 800cab6:	4628      	mov	r0, r5
 800cab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cabc:	f000 f842 	bl	800cb44 <_malloc_usable_size_r>
 800cac0:	4284      	cmp	r4, r0
 800cac2:	4606      	mov	r6, r0
 800cac4:	d802      	bhi.n	800cacc <_realloc_r+0x34>
 800cac6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800caca:	d8f4      	bhi.n	800cab6 <_realloc_r+0x1e>
 800cacc:	4621      	mov	r1, r4
 800cace:	4638      	mov	r0, r7
 800cad0:	f7ff fbc2 	bl	800c258 <_malloc_r>
 800cad4:	4680      	mov	r8, r0
 800cad6:	b908      	cbnz	r0, 800cadc <_realloc_r+0x44>
 800cad8:	4645      	mov	r5, r8
 800cada:	e7ec      	b.n	800cab6 <_realloc_r+0x1e>
 800cadc:	42b4      	cmp	r4, r6
 800cade:	4622      	mov	r2, r4
 800cae0:	4629      	mov	r1, r5
 800cae2:	bf28      	it	cs
 800cae4:	4632      	movcs	r2, r6
 800cae6:	f000 f81f 	bl	800cb28 <memcpy>
 800caea:	4629      	mov	r1, r5
 800caec:	4638      	mov	r0, r7
 800caee:	f7ff fca5 	bl	800c43c <_free_r>
 800caf2:	e7f1      	b.n	800cad8 <_realloc_r+0x40>

0800caf4 <memmove>:
 800caf4:	4288      	cmp	r0, r1
 800caf6:	b510      	push	{r4, lr}
 800caf8:	eb01 0402 	add.w	r4, r1, r2
 800cafc:	d902      	bls.n	800cb04 <memmove+0x10>
 800cafe:	4284      	cmp	r4, r0
 800cb00:	4623      	mov	r3, r4
 800cb02:	d807      	bhi.n	800cb14 <memmove+0x20>
 800cb04:	1e43      	subs	r3, r0, #1
 800cb06:	42a1      	cmp	r1, r4
 800cb08:	d008      	beq.n	800cb1c <memmove+0x28>
 800cb0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cb0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cb12:	e7f8      	b.n	800cb06 <memmove+0x12>
 800cb14:	4402      	add	r2, r0
 800cb16:	4601      	mov	r1, r0
 800cb18:	428a      	cmp	r2, r1
 800cb1a:	d100      	bne.n	800cb1e <memmove+0x2a>
 800cb1c:	bd10      	pop	{r4, pc}
 800cb1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cb22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cb26:	e7f7      	b.n	800cb18 <memmove+0x24>

0800cb28 <memcpy>:
 800cb28:	440a      	add	r2, r1
 800cb2a:	4291      	cmp	r1, r2
 800cb2c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800cb30:	d100      	bne.n	800cb34 <memcpy+0xc>
 800cb32:	4770      	bx	lr
 800cb34:	b510      	push	{r4, lr}
 800cb36:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cb3e:	4291      	cmp	r1, r2
 800cb40:	d1f9      	bne.n	800cb36 <memcpy+0xe>
 800cb42:	bd10      	pop	{r4, pc}

0800cb44 <_malloc_usable_size_r>:
 800cb44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb48:	1f18      	subs	r0, r3, #4
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	bfbc      	itt	lt
 800cb4e:	580b      	ldrlt	r3, [r1, r0]
 800cb50:	18c0      	addlt	r0, r0, r3
 800cb52:	4770      	bx	lr

0800cb54 <_init>:
 800cb54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb56:	bf00      	nop
 800cb58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb5a:	bc08      	pop	{r3}
 800cb5c:	469e      	mov	lr, r3
 800cb5e:	4770      	bx	lr

0800cb60 <_fini>:
 800cb60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb62:	bf00      	nop
 800cb64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb66:	bc08      	pop	{r3}
 800cb68:	469e      	mov	lr, r3
 800cb6a:	4770      	bx	lr
