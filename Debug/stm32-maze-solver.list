
stm32-maze-solver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aeb0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800b038  0800b038  0000c038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b05c  0800b05c  0000d08c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b05c  0800b05c  0000c05c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b064  0800b064  0000d08c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b064  0800b064  0000c064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b068  0800b068  0000c068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  0800b06c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d08c  2**0
                  CONTENTS
 10 .bss          00000ca8  2000008c  2000008c  0000d08c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000d34  20000d34  0000d08c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d08c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c66a  00000000  00000000  0000d0bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000047a9  00000000  00000000  00029726  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001908  00000000  00000000  0002ded0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001354  00000000  00000000  0002f7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005d7e  00000000  00000000  00030b2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020d24  00000000  00000000  000368aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1494  00000000  00000000  000575ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00138a62  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006d14  00000000  00000000  00138aa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  0013f7bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000008c 	.word	0x2000008c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800b020 	.word	0x0800b020

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000090 	.word	0x20000090
 80001c4:	0800b020 	.word	0x0800b020

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <HAL_ADC_ConvHalfCpltCallback>:

bool calibrado = false;

// Interrupciones DMA
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
    promediar_sensores(&dma_buffer[0]);
 80004fc:	4803      	ldr	r0, [pc, #12]	@ (800050c <HAL_ADC_ConvHalfCpltCallback+0x18>)
 80004fe:	f000 f815 	bl	800052c <promediar_sensores>
}
 8000502:	bf00      	nop
 8000504:	3708      	adds	r7, #8
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	20000298 	.word	0x20000298

08000510 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
    promediar_sensores(&dma_buffer[BUFFER_MINIMO]);
 8000518:	4803      	ldr	r0, [pc, #12]	@ (8000528 <HAL_ADC_ConvCpltCallback+0x18>)
 800051a:	f000 f807 	bl	800052c <promediar_sensores>
}
 800051e:	bf00      	nop
 8000520:	3708      	adds	r7, #8
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	20000360 	.word	0x20000360

0800052c <promediar_sensores>:

// Función promediar
void promediar_sensores(uint16_t *buffer)
{
 800052c:	b480      	push	{r7}
 800052e:	b087      	sub	sp, #28
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
    uint32_t izq_sum = 0, der_sum = 0;
 8000534:	2300      	movs	r3, #0
 8000536:	617b      	str	r3, [r7, #20]
 8000538:	2300      	movs	r3, #0
 800053a:	613b      	str	r3, [r7, #16]

    // Canal 8 (derecho), Canal 9 (izquierdo)
    for (int i = 0; i < MUESTRAS; ++i)
 800053c:	2300      	movs	r3, #0
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	e012      	b.n	8000568 <promediar_sensores+0x3c>
    {
        der_sum += buffer[0]; // Canal 8 (PB0)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	881b      	ldrh	r3, [r3, #0]
 8000546:	461a      	mov	r2, r3
 8000548:	693b      	ldr	r3, [r7, #16]
 800054a:	4413      	add	r3, r2
 800054c:	613b      	str	r3, [r7, #16]
        izq_sum += buffer[1]; // Canal 9 (PB1)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	3302      	adds	r3, #2
 8000552:	881b      	ldrh	r3, [r3, #0]
 8000554:	461a      	mov	r2, r3
 8000556:	697b      	ldr	r3, [r7, #20]
 8000558:	4413      	add	r3, r2
 800055a:	617b      	str	r3, [r7, #20]
        buffer += 2;          // Avanza 2 posiciones
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	3304      	adds	r3, #4
 8000560:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < MUESTRAS; ++i)
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	3301      	adds	r3, #1
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	2b31      	cmp	r3, #49	@ 0x31
 800056c:	dde9      	ble.n	8000542 <promediar_sensores+0x16>
    }

    sensor_der_avg = der_sum / MUESTRAS;
 800056e:	693b      	ldr	r3, [r7, #16]
 8000570:	4a0a      	ldr	r2, [pc, #40]	@ (800059c <promediar_sensores+0x70>)
 8000572:	fba2 2303 	umull	r2, r3, r2, r3
 8000576:	091b      	lsrs	r3, r3, #4
 8000578:	b29a      	uxth	r2, r3
 800057a:	4b09      	ldr	r3, [pc, #36]	@ (80005a0 <promediar_sensores+0x74>)
 800057c:	801a      	strh	r2, [r3, #0]
    sensor_izq_avg = izq_sum / MUESTRAS;
 800057e:	697b      	ldr	r3, [r7, #20]
 8000580:	4a06      	ldr	r2, [pc, #24]	@ (800059c <promediar_sensores+0x70>)
 8000582:	fba2 2303 	umull	r2, r3, r2, r3
 8000586:	091b      	lsrs	r3, r3, #4
 8000588:	b29a      	uxth	r2, r3
 800058a:	4b06      	ldr	r3, [pc, #24]	@ (80005a4 <promediar_sensores+0x78>)
 800058c:	801a      	strh	r2, [r3, #0]
}
 800058e:	bf00      	nop
 8000590:	371c      	adds	r7, #28
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	51eb851f 	.word	0x51eb851f
 80005a0:	200000aa 	.word	0x200000aa
 80005a4:	200000a8 	.word	0x200000a8

080005a8 <auto_calibracion>:

// Auto-calibración
void auto_calibracion(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
    HAL_Delay(1000);
 80005ac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005b0:	f001 f894 	bl	80016dc <HAL_Delay>

    // Medición 1: CERCA DE PARED DERECHA
    HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET); // Naranja
 80005b4:	2201      	movs	r2, #1
 80005b6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005ba:	4835      	ldr	r0, [pc, #212]	@ (8000690 <auto_calibracion+0xe8>)
 80005bc:	f002 fad2 	bl	8002b64 <HAL_GPIO_WritePin>
    HAL_Delay(3000);                                         // Tiempo para posicionar cerca de pared derecha
 80005c0:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80005c4:	f001 f88a 	bl	80016dc <HAL_Delay>

    der_cerca = sensor_der_avg;
 80005c8:	4b32      	ldr	r3, [pc, #200]	@ (8000694 <auto_calibracion+0xec>)
 80005ca:	881a      	ldrh	r2, [r3, #0]
 80005cc:	4b32      	ldr	r3, [pc, #200]	@ (8000698 <auto_calibracion+0xf0>)
 80005ce:	801a      	strh	r2, [r3, #0]

    // Medición 2: CERCA DE PARED IZQUIERDA
    HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 80005d0:	2200      	movs	r2, #0
 80005d2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005d6:	482e      	ldr	r0, [pc, #184]	@ (8000690 <auto_calibracion+0xe8>)
 80005d8:	f002 fac4 	bl	8002b64 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET); // Rojo
 80005dc:	2201      	movs	r2, #1
 80005de:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005e2:	482b      	ldr	r0, [pc, #172]	@ (8000690 <auto_calibracion+0xe8>)
 80005e4:	f002 fabe 	bl	8002b64 <HAL_GPIO_WritePin>
    HAL_Delay(3000);                                         // Tiempo para posicionar cerca de pared izquierda
 80005e8:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80005ec:	f001 f876 	bl	80016dc <HAL_Delay>

    izq_cerca = sensor_izq_avg;
 80005f0:	4b2a      	ldr	r3, [pc, #168]	@ (800069c <auto_calibracion+0xf4>)
 80005f2:	881a      	ldrh	r2, [r3, #0]
 80005f4:	4b2a      	ldr	r3, [pc, #168]	@ (80006a0 <auto_calibracion+0xf8>)
 80005f6:	801a      	strh	r2, [r3, #0]

    // Medición 3: CENTRADO EN PASILLO
    HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 80005f8:	2200      	movs	r2, #0
 80005fa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005fe:	4824      	ldr	r0, [pc, #144]	@ (8000690 <auto_calibracion+0xe8>)
 8000600:	f002 fab0 	bl	8002b64 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_SET); // Azul
 8000604:	2201      	movs	r2, #1
 8000606:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800060a:	4821      	ldr	r0, [pc, #132]	@ (8000690 <auto_calibracion+0xe8>)
 800060c:	f002 faaa 	bl	8002b64 <HAL_GPIO_WritePin>
    HAL_Delay(3000);                                         // Tiempo para centrar
 8000610:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000614:	f001 f862 	bl	80016dc <HAL_Delay>

    izq_lejos = sensor_izq_avg;
 8000618:	4b20      	ldr	r3, [pc, #128]	@ (800069c <auto_calibracion+0xf4>)
 800061a:	881a      	ldrh	r2, [r3, #0]
 800061c:	4b21      	ldr	r3, [pc, #132]	@ (80006a4 <auto_calibracion+0xfc>)
 800061e:	801a      	strh	r2, [r3, #0]
    der_lejos = sensor_der_avg;
 8000620:	4b1c      	ldr	r3, [pc, #112]	@ (8000694 <auto_calibracion+0xec>)
 8000622:	881a      	ldrh	r2, [r3, #0]
 8000624:	4b20      	ldr	r3, [pc, #128]	@ (80006a8 <auto_calibracion+0x100>)
 8000626:	801a      	strh	r2, [r3, #0]

    // Calcular valores medios
    izq_centrado = (izq_cerca + izq_lejos) / 2;
 8000628:	4b1d      	ldr	r3, [pc, #116]	@ (80006a0 <auto_calibracion+0xf8>)
 800062a:	881b      	ldrh	r3, [r3, #0]
 800062c:	461a      	mov	r2, r3
 800062e:	4b1d      	ldr	r3, [pc, #116]	@ (80006a4 <auto_calibracion+0xfc>)
 8000630:	881b      	ldrh	r3, [r3, #0]
 8000632:	4413      	add	r3, r2
 8000634:	0fda      	lsrs	r2, r3, #31
 8000636:	4413      	add	r3, r2
 8000638:	105b      	asrs	r3, r3, #1
 800063a:	b29a      	uxth	r2, r3
 800063c:	4b1b      	ldr	r3, [pc, #108]	@ (80006ac <auto_calibracion+0x104>)
 800063e:	801a      	strh	r2, [r3, #0]
    der_centrado = (der_cerca + der_lejos) / 2;
 8000640:	4b15      	ldr	r3, [pc, #84]	@ (8000698 <auto_calibracion+0xf0>)
 8000642:	881b      	ldrh	r3, [r3, #0]
 8000644:	461a      	mov	r2, r3
 8000646:	4b18      	ldr	r3, [pc, #96]	@ (80006a8 <auto_calibracion+0x100>)
 8000648:	881b      	ldrh	r3, [r3, #0]
 800064a:	4413      	add	r3, r2
 800064c:	0fda      	lsrs	r2, r3, #31
 800064e:	4413      	add	r3, r2
 8000650:	105b      	asrs	r3, r3, #1
 8000652:	b29a      	uxth	r2, r3
 8000654:	4b16      	ldr	r3, [pc, #88]	@ (80006b0 <auto_calibracion+0x108>)
 8000656:	801a      	strh	r2, [r3, #0]

    // Calibración completa
    HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 8000658:	2200      	movs	r2, #0
 800065a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800065e:	480c      	ldr	r0, [pc, #48]	@ (8000690 <auto_calibracion+0xe8>)
 8000660:	f002 fa80 	bl	8002b64 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET); // Verde
 8000664:	2201      	movs	r2, #1
 8000666:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800066a:	4809      	ldr	r0, [pc, #36]	@ (8000690 <auto_calibracion+0xe8>)
 800066c:	f002 fa7a 	bl	8002b64 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8000670:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000674:	f001 f832 	bl	80016dc <HAL_Delay>
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000678:	2200      	movs	r2, #0
 800067a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800067e:	4804      	ldr	r0, [pc, #16]	@ (8000690 <auto_calibracion+0xe8>)
 8000680:	f002 fa70 	bl	8002b64 <HAL_GPIO_WritePin>

    calibrado = true;
 8000684:	4b0b      	ldr	r3, [pc, #44]	@ (80006b4 <auto_calibracion+0x10c>)
 8000686:	2201      	movs	r2, #1
 8000688:	701a      	strb	r2, [r3, #0]
}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40020c00 	.word	0x40020c00
 8000694:	200000aa 	.word	0x200000aa
 8000698:	20000006 	.word	0x20000006
 800069c:	200000a8 	.word	0x200000a8
 80006a0:	20000000 	.word	0x20000000
 80006a4:	20000002 	.word	0x20000002
 80006a8:	20000008 	.word	0x20000008
 80006ac:	20000004 	.word	0x20000004
 80006b0:	2000000a 	.word	0x2000000a
 80006b4:	200000ac 	.word	0x200000ac

080006b8 <control_motor_init>:

/**
 * @brief Inicializa el control de motores
 */
void control_motor_init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
    // Iniciar PWM en ambos canales
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // Motor izquierdo (PC8)
 80006bc:	2108      	movs	r1, #8
 80006be:	4805      	ldr	r0, [pc, #20]	@ (80006d4 <control_motor_init+0x1c>)
 80006c0:	f006 f87a 	bl	80067b8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // Motor derecho (PC9)
 80006c4:	210c      	movs	r1, #12
 80006c6:	4803      	ldr	r0, [pc, #12]	@ (80006d4 <control_motor_init+0x1c>)
 80006c8:	f006 f876 	bl	80067b8 <HAL_TIM_PWM_Start>

    // comienza yendo para adelante
    avanza();
 80006cc:	f000 f88c 	bl	80007e8 <avanza>
}
 80006d0:	bf00      	nop
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	2000024c 	.word	0x2000024c

080006d8 <set_motor_izq>:
 * @brief Configura motor izquierdo
 * @param estado: MOTOR_AVANCE, MOTOR_RETROCESO o MOTOR_FRENADO
 * @param pwm: Valor PWM (0-1000)
 */
void set_motor_izq(motor_estado_t estado, uint16_t pwm)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	460a      	mov	r2, r1
 80006e2:	71fb      	strb	r3, [r7, #7]
 80006e4:	4613      	mov	r3, r2
 80006e6:	80bb      	strh	r3, [r7, #4]
    switch (estado)
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d002      	beq.n	80006f4 <set_motor_izq+0x1c>
 80006ee:	2b01      	cmp	r3, #1
 80006f0:	d00d      	beq.n	800070e <set_motor_izq+0x36>
 80006f2:	e019      	b.n	8000728 <set_motor_izq+0x50>
    {
    case MOTOR_AVANCE:
        HAL_GPIO_WritePin(MI0_GPIO_Port, MI0_Pin, GPIO_PIN_SET);   // MI0 = 1
 80006f4:	2201      	movs	r2, #1
 80006f6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006fa:	4817      	ldr	r0, [pc, #92]	@ (8000758 <set_motor_izq+0x80>)
 80006fc:	f002 fa32 	bl	8002b64 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MI1_GPIO_Port, MI1_Pin, GPIO_PIN_RESET); // MI1 = 0
 8000700:	2200      	movs	r2, #0
 8000702:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000706:	4814      	ldr	r0, [pc, #80]	@ (8000758 <set_motor_izq+0x80>)
 8000708:	f002 fa2c 	bl	8002b64 <HAL_GPIO_WritePin>
        break;
 800070c:	e01b      	b.n	8000746 <set_motor_izq+0x6e>

    case MOTOR_RETROCESO:
        HAL_GPIO_WritePin(MI0_GPIO_Port, MI0_Pin, GPIO_PIN_RESET); // MI0 = 0
 800070e:	2200      	movs	r2, #0
 8000710:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000714:	4810      	ldr	r0, [pc, #64]	@ (8000758 <set_motor_izq+0x80>)
 8000716:	f002 fa25 	bl	8002b64 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MI1_GPIO_Port, MI1_Pin, GPIO_PIN_SET);   // MI1 = 1
 800071a:	2201      	movs	r2, #1
 800071c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000720:	480d      	ldr	r0, [pc, #52]	@ (8000758 <set_motor_izq+0x80>)
 8000722:	f002 fa1f 	bl	8002b64 <HAL_GPIO_WritePin>
        break;
 8000726:	e00e      	b.n	8000746 <set_motor_izq+0x6e>

    case MOTOR_FRENADO:
    default:
        HAL_GPIO_WritePin(MI0_GPIO_Port, MI0_Pin, GPIO_PIN_RESET); // MI0 = 0
 8000728:	2200      	movs	r2, #0
 800072a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800072e:	480a      	ldr	r0, [pc, #40]	@ (8000758 <set_motor_izq+0x80>)
 8000730:	f002 fa18 	bl	8002b64 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MI1_GPIO_Port, MI1_Pin, GPIO_PIN_RESET); // MI1 = 0
 8000734:	2200      	movs	r2, #0
 8000736:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800073a:	4807      	ldr	r0, [pc, #28]	@ (8000758 <set_motor_izq+0x80>)
 800073c:	f002 fa12 	bl	8002b64 <HAL_GPIO_WritePin>
        pwm = 0;                                                   // Forzar PWM a 0 en frenado
 8000740:	2300      	movs	r3, #0
 8000742:	80bb      	strh	r3, [r7, #4]
        break;
 8000744:	bf00      	nop
    }

    // Establecer PWM, aca le definimos la velocidad
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pwm);
 8000746:	4b05      	ldr	r3, [pc, #20]	@ (800075c <set_motor_izq+0x84>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	88ba      	ldrh	r2, [r7, #4]
 800074c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40020400 	.word	0x40020400
 800075c:	2000024c 	.word	0x2000024c

08000760 <set_motor_der>:
 * @brief Configura motor derecho
 * @param estado: MOTOR_AVANCE, MOTOR_RETROCESO o MOTOR_FRENADO
 * @param pwm: Valor PWM (0-1000)
 */
void set_motor_der(motor_estado_t estado, uint16_t pwm)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	460a      	mov	r2, r1
 800076a:	71fb      	strb	r3, [r7, #7]
 800076c:	4613      	mov	r3, r2
 800076e:	80bb      	strh	r3, [r7, #4]
    switch (estado)
 8000770:	79fb      	ldrb	r3, [r7, #7]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d002      	beq.n	800077c <set_motor_der+0x1c>
 8000776:	2b01      	cmp	r3, #1
 8000778:	d00d      	beq.n	8000796 <set_motor_der+0x36>
 800077a:	e019      	b.n	80007b0 <set_motor_der+0x50>
    {
    case MOTOR_AVANCE:
        HAL_GPIO_WritePin(MD0_GPIO_Port, MD0_Pin, GPIO_PIN_SET);   // MD0 = 1
 800077c:	2201      	movs	r2, #1
 800077e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000782:	4817      	ldr	r0, [pc, #92]	@ (80007e0 <set_motor_der+0x80>)
 8000784:	f002 f9ee 	bl	8002b64 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MD1_GPIO_Port, MD1_Pin, GPIO_PIN_RESET); // MD1 = 0
 8000788:	2200      	movs	r2, #0
 800078a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800078e:	4814      	ldr	r0, [pc, #80]	@ (80007e0 <set_motor_der+0x80>)
 8000790:	f002 f9e8 	bl	8002b64 <HAL_GPIO_WritePin>
        break;
 8000794:	e01b      	b.n	80007ce <set_motor_der+0x6e>

    case MOTOR_RETROCESO:
        HAL_GPIO_WritePin(MD0_GPIO_Port, MD0_Pin, GPIO_PIN_RESET); // MD0 = 0
 8000796:	2200      	movs	r2, #0
 8000798:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800079c:	4810      	ldr	r0, [pc, #64]	@ (80007e0 <set_motor_der+0x80>)
 800079e:	f002 f9e1 	bl	8002b64 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MD1_GPIO_Port, MD1_Pin, GPIO_PIN_SET);   // MD1 = 1
 80007a2:	2201      	movs	r2, #1
 80007a4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007a8:	480d      	ldr	r0, [pc, #52]	@ (80007e0 <set_motor_der+0x80>)
 80007aa:	f002 f9db 	bl	8002b64 <HAL_GPIO_WritePin>
        break;
 80007ae:	e00e      	b.n	80007ce <set_motor_der+0x6e>

    case MOTOR_FRENADO:
    default:
        HAL_GPIO_WritePin(MD0_GPIO_Port, MD0_Pin, GPIO_PIN_RESET); // MD0 = 0
 80007b0:	2200      	movs	r2, #0
 80007b2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007b6:	480a      	ldr	r0, [pc, #40]	@ (80007e0 <set_motor_der+0x80>)
 80007b8:	f002 f9d4 	bl	8002b64 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MD1_GPIO_Port, MD1_Pin, GPIO_PIN_RESET); // MD1 = 0
 80007bc:	2200      	movs	r2, #0
 80007be:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007c2:	4807      	ldr	r0, [pc, #28]	@ (80007e0 <set_motor_der+0x80>)
 80007c4:	f002 f9ce 	bl	8002b64 <HAL_GPIO_WritePin>
        pwm = 0;                                                   // Forzar PWM a 0 en frenado
 80007c8:	2300      	movs	r3, #0
 80007ca:	80bb      	strh	r3, [r7, #4]
        break;
 80007cc:	bf00      	nop
    }

    // Establecer VELOCIDAD
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, pwm);
 80007ce:	4b05      	ldr	r3, [pc, #20]	@ (80007e4 <set_motor_der+0x84>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	88ba      	ldrh	r2, [r7, #4]
 80007d4:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80007d6:	bf00      	nop
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40020400 	.word	0x40020400
 80007e4:	2000024c 	.word	0x2000024c

080007e8 <avanza>:

/**
 * @brief Avanza con ambos motores al 70% de velocidad
 */
void avanza(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
    set_motor_izq(MOTOR_AVANCE, VELOCIDAD_AVANCE);
 80007ec:	4b06      	ldr	r3, [pc, #24]	@ (8000808 <avanza+0x20>)
 80007ee:	881b      	ldrh	r3, [r3, #0]
 80007f0:	4619      	mov	r1, r3
 80007f2:	2000      	movs	r0, #0
 80007f4:	f7ff ff70 	bl	80006d8 <set_motor_izq>
    set_motor_der(MOTOR_AVANCE, VELOCIDAD_AVANCE);
 80007f8:	4b03      	ldr	r3, [pc, #12]	@ (8000808 <avanza+0x20>)
 80007fa:	881b      	ldrh	r3, [r3, #0]
 80007fc:	4619      	mov	r1, r3
 80007fe:	2000      	movs	r0, #0
 8000800:	f7ff ffae 	bl	8000760 <set_motor_der>
}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}
 8000808:	2000000c 	.word	0x2000000c

0800080c <gira90izq>:
/**
 * @brief Gira 90 grados a la izquierda y luego continúa avanzando
 * Motor izq retrocede, motor der avanza al 100%
 */
brujula gira90izq(brujula sentido)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	71fb      	strb	r3, [r7, #7]
    set_motor_izq(MOTOR_RETROCESO, VELOCIDAD_GIRO);
 8000816:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800081a:	2001      	movs	r0, #1
 800081c:	f7ff ff5c 	bl	80006d8 <set_motor_izq>
    set_motor_der(MOTOR_AVANCE, VELOCIDAD_GIRO);
 8000820:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000824:	2000      	movs	r0, #0
 8000826:	f7ff ff9b 	bl	8000760 <set_motor_der>

    HAL_Delay(TIEMPO_GIRO_90);
 800082a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800082e:	f000 ff55 	bl	80016dc <HAL_Delay>
    switch (sentido)
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	2b03      	cmp	r3, #3
 8000836:	d817      	bhi.n	8000868 <gira90izq+0x5c>
 8000838:	a201      	add	r2, pc, #4	@ (adr r2, 8000840 <gira90izq+0x34>)
 800083a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800083e:	bf00      	nop
 8000840:	08000851 	.word	0x08000851
 8000844:	08000857 	.word	0x08000857
 8000848:	0800085d 	.word	0x0800085d
 800084c:	08000863 	.word	0x08000863
    {
    case norte:
        sentido = oeste;
 8000850:	2303      	movs	r3, #3
 8000852:	71fb      	strb	r3, [r7, #7]
        break;
 8000854:	e008      	b.n	8000868 <gira90izq+0x5c>

    case este:
        sentido = norte;
 8000856:	2300      	movs	r3, #0
 8000858:	71fb      	strb	r3, [r7, #7]
        break;
 800085a:	e005      	b.n	8000868 <gira90izq+0x5c>

    case sur:
        sentido = este;
 800085c:	2301      	movs	r3, #1
 800085e:	71fb      	strb	r3, [r7, #7]
        break;
 8000860:	e002      	b.n	8000868 <gira90izq+0x5c>

    case oeste:
        sentido = sur;
 8000862:	2302      	movs	r3, #2
 8000864:	71fb      	strb	r3, [r7, #7]
        break;
 8000866:	bf00      	nop
    }

    // Después del giro, continuar avanzando
    avanza();
 8000868:	f7ff ffbe 	bl	80007e8 <avanza>
    return sentido;
 800086c:	79fb      	ldrb	r3, [r7, #7]
}
 800086e:	4618      	mov	r0, r3
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop

08000878 <gira90der>:
/**
 * @brief Gira 90 grados a la derecha y luego continúa avanzando
 * Motor der retrocede, motor izq avanza al 100%
 */
brujula gira90der(brujula sentido)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	71fb      	strb	r3, [r7, #7]
    set_motor_izq(MOTOR_AVANCE, VELOCIDAD_GIRO);
 8000882:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000886:	2000      	movs	r0, #0
 8000888:	f7ff ff26 	bl	80006d8 <set_motor_izq>
    set_motor_der(MOTOR_RETROCESO, VELOCIDAD_GIRO);
 800088c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000890:	2001      	movs	r0, #1
 8000892:	f7ff ff65 	bl	8000760 <set_motor_der>

    HAL_Delay(TIEMPO_GIRO_90);
 8000896:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800089a:	f000 ff1f 	bl	80016dc <HAL_Delay>
    switch (sentido)
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	2b03      	cmp	r3, #3
 80008a2:	d817      	bhi.n	80008d4 <gira90der+0x5c>
 80008a4:	a201      	add	r2, pc, #4	@ (adr r2, 80008ac <gira90der+0x34>)
 80008a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008aa:	bf00      	nop
 80008ac:	080008bd 	.word	0x080008bd
 80008b0:	080008c3 	.word	0x080008c3
 80008b4:	080008c9 	.word	0x080008c9
 80008b8:	080008cf 	.word	0x080008cf
    {
    case norte:
        sentido = este;
 80008bc:	2301      	movs	r3, #1
 80008be:	71fb      	strb	r3, [r7, #7]
        break;
 80008c0:	e008      	b.n	80008d4 <gira90der+0x5c>

    case este:
        sentido = sur;
 80008c2:	2302      	movs	r3, #2
 80008c4:	71fb      	strb	r3, [r7, #7]
        break;
 80008c6:	e005      	b.n	80008d4 <gira90der+0x5c>

    case sur:
        sentido = oeste;
 80008c8:	2303      	movs	r3, #3
 80008ca:	71fb      	strb	r3, [r7, #7]
        break;
 80008cc:	e002      	b.n	80008d4 <gira90der+0x5c>

    case oeste:
        sentido = norte;
 80008ce:	2300      	movs	r3, #0
 80008d0:	71fb      	strb	r3, [r7, #7]
        break;
 80008d2:	bf00      	nop
    }

    // Después del giro, continuar avanzando
    avanza();
 80008d4:	f7ff ff88 	bl	80007e8 <avanza>
    return sentido;
 80008d8:	79fb      	ldrb	r3, [r7, #7]
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop

080008e4 <gira180>:
/**
 * @brief Gira 180 grados y luego continúa avanzando
 * Motor der retrocede, motor izq avanza al 100%
 */
brujula gira180(brujula sentido)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	71fb      	strb	r3, [r7, #7]
    set_motor_izq(MOTOR_AVANCE, VELOCIDAD_GIRO);
 80008ee:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80008f2:	2000      	movs	r0, #0
 80008f4:	f7ff fef0 	bl	80006d8 <set_motor_izq>
    set_motor_der(MOTOR_RETROCESO, VELOCIDAD_GIRO);
 80008f8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80008fc:	2001      	movs	r0, #1
 80008fe:	f7ff ff2f 	bl	8000760 <set_motor_der>

    HAL_Delay(TIEMPO_GIRO_180);
 8000902:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000906:	f000 fee9 	bl	80016dc <HAL_Delay>
    switch (sentido)
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	2b03      	cmp	r3, #3
 800090e:	d817      	bhi.n	8000940 <gira180+0x5c>
 8000910:	a201      	add	r2, pc, #4	@ (adr r2, 8000918 <gira180+0x34>)
 8000912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000916:	bf00      	nop
 8000918:	08000929 	.word	0x08000929
 800091c:	0800092f 	.word	0x0800092f
 8000920:	08000935 	.word	0x08000935
 8000924:	0800093b 	.word	0x0800093b
    {
    case norte:
        sentido = sur;
 8000928:	2302      	movs	r3, #2
 800092a:	71fb      	strb	r3, [r7, #7]
        break;
 800092c:	e008      	b.n	8000940 <gira180+0x5c>

    case este:
        sentido = oeste;
 800092e:	2303      	movs	r3, #3
 8000930:	71fb      	strb	r3, [r7, #7]
        break;
 8000932:	e005      	b.n	8000940 <gira180+0x5c>

    case sur:
        sentido = norte;
 8000934:	2300      	movs	r3, #0
 8000936:	71fb      	strb	r3, [r7, #7]
        break;
 8000938:	e002      	b.n	8000940 <gira180+0x5c>

    case oeste:
        sentido = este;
 800093a:	2301      	movs	r3, #1
 800093c:	71fb      	strb	r3, [r7, #7]
        break;
 800093e:	bf00      	nop
    }

    // Después del giro, continuar avanzando
    avanza();
 8000940:	f7ff ff52 	bl	80007e8 <avanza>
    return sentido;
 8000944:	79fb      	ldrb	r3, [r7, #7]
}
 8000946:	4618      	mov	r0, r3
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop

08000950 <termino>:

/**
 * @brief Detiene ambos motores (cuando ganemos)
 */
void termino(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
    set_motor_izq(MOTOR_FRENADO, 0);
 8000954:	2100      	movs	r1, #0
 8000956:	2002      	movs	r0, #2
 8000958:	f7ff febe 	bl	80006d8 <set_motor_izq>
    set_motor_der(MOTOR_FRENADO, 0);
 800095c:	2100      	movs	r1, #0
 800095e:	2002      	movs	r0, #2
 8000960:	f7ff fefe 	bl	8000760 <set_motor_der>
 8000964:	bf00      	nop
 8000966:	bd80      	pop	{r7, pc}

08000968 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800096c:	f000 fe44 	bl	80015f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000970:	f000 f85e 	bl	8000a30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000974:	f000 fa5a 	bl	8000e2c <MX_GPIO_Init>
  MX_DMA_Init();
 8000978:	f000 fa38 	bl	8000dec <MX_DMA_Init>
  MX_I2C1_Init();
 800097c:	f000 f922 	bl	8000bc4 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000980:	f000 f94e 	bl	8000c20 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000984:	f000 f97a 	bl	8000c7c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000988:	f009 fef4 	bl	800a774 <MX_USB_HOST_Init>
  MX_ADC1_Init();
 800098c:	f000 f8ba 	bl	8000b04 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000990:	f000 f9aa 	bl	8000ce8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  // Inicializar ADC con DMA primero
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)dma_buffer, BUFFER_TOTAL);
 8000994:	22c8      	movs	r2, #200	@ 0xc8
 8000996:	4922      	ldr	r1, [pc, #136]	@ (8000a20 <main+0xb8>)
 8000998:	4822      	ldr	r0, [pc, #136]	@ (8000a24 <main+0xbc>)
 800099a:	f000 ff07 	bl	80017ac <HAL_ADC_Start_DMA>

  // Auto-calibración (sin motores activos)
  auto_calibracion();
 800099e:	f7ff fe03 	bl	80005a8 <auto_calibracion>
  // Inicializar el módulo de motores
  control_motor_init();
 80009a2:	f7ff fe89 	bl	80006b8 <control_motor_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80009a6:	f009 ff0b 	bl	800a7c0 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    if (!terminado) // Solo ejecutar si no ha terminado
 80009aa:	4b1f      	ldr	r3, [pc, #124]	@ (8000a28 <main+0xc0>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	f083 0301 	eor.w	r3, r3, #1
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d0f6      	beq.n	80009a6 <main+0x3e>
            controlar_linea_recta();
    }
            reset_posicion_pushbutton(); // ⚡ I AM SPEED button */

      // OJO SOLO PARA PROBAR LOS TIEMPOS DE LOS GIROS
      avanza(); // Comenzar avanzando 1 SEGUNDO
 80009b8:	f7ff ff16 	bl	80007e8 <avanza>
      HAL_Delay(1000);
 80009bc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009c0:	f000 fe8c 	bl	80016dc <HAL_Delay>

      // Simular detección de pared - girar a la derecha
      sentido_actual = gira90der(sentido_actual); // Gira Y SIGUE AVANZANDO POR 2 SEGUNDOS
 80009c4:	4b19      	ldr	r3, [pc, #100]	@ (8000a2c <main+0xc4>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff ff55 	bl	8000878 <gira90der>
 80009ce:	4603      	mov	r3, r0
 80009d0:	461a      	mov	r2, r3
 80009d2:	4b16      	ldr	r3, [pc, #88]	@ (8000a2c <main+0xc4>)
 80009d4:	701a      	strb	r2, [r3, #0]
      HAL_Delay(2000);
 80009d6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80009da:	f000 fe7f 	bl	80016dc <HAL_Delay>

      // Otro obstáculo - girar a la izquierda
      sentido_actual = gira90izq(sentido_actual); // Gira Y SIGUE AVANZANDO
 80009de:	4b13      	ldr	r3, [pc, #76]	@ (8000a2c <main+0xc4>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	4618      	mov	r0, r3
 80009e4:	f7ff ff12 	bl	800080c <gira90izq>
 80009e8:	4603      	mov	r3, r0
 80009ea:	461a      	mov	r2, r3
 80009ec:	4b0f      	ldr	r3, [pc, #60]	@ (8000a2c <main+0xc4>)
 80009ee:	701a      	strb	r2, [r3, #0]
      HAL_Delay(2000);
 80009f0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80009f4:	f000 fe72 	bl	80016dc <HAL_Delay>

      // Callejón sin salida - dar media vuelta
      sentido_actual = gira180(sentido_actual); // Gira Y SIGUE AVANZANDO POR 3 SEGUNDOS
 80009f8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a2c <main+0xc4>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff ff71 	bl	80008e4 <gira180>
 8000a02:	4603      	mov	r3, r0
 8000a04:	461a      	mov	r2, r3
 8000a06:	4b09      	ldr	r3, [pc, #36]	@ (8000a2c <main+0xc4>)
 8000a08:	701a      	strb	r2, [r3, #0]
      HAL_Delay(3000);
 8000a0a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000a0e:	f000 fe65 	bl	80016dc <HAL_Delay>

      // SIMULA QUE TERMINÓ
      termino();       // Usando tu función
 8000a12:	f7ff ff9d 	bl	8000950 <termino>
      HAL_Delay(5000); // Pausa antes de reiniciar
 8000a16:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000a1a:	f000 fe5f 	bl	80016dc <HAL_Delay>
    MX_USB_HOST_Process();
 8000a1e:	e7c2      	b.n	80009a6 <main+0x3e>
 8000a20:	20000298 	.word	0x20000298
 8000a24:	200000b0 	.word	0x200000b0
 8000a28:	20000295 	.word	0x20000295
 8000a2c:	20000294 	.word	0x20000294

08000a30 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b094      	sub	sp, #80	@ 0x50
 8000a34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a36:	f107 0320 	add.w	r3, r7, #32
 8000a3a:	2230      	movs	r2, #48	@ 0x30
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f00a fa60 	bl	800af04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a44:	f107 030c 	add.w	r3, r7, #12
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a54:	2300      	movs	r3, #0
 8000a56:	60bb      	str	r3, [r7, #8]
 8000a58:	4b28      	ldr	r3, [pc, #160]	@ (8000afc <SystemClock_Config+0xcc>)
 8000a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a5c:	4a27      	ldr	r2, [pc, #156]	@ (8000afc <SystemClock_Config+0xcc>)
 8000a5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a62:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a64:	4b25      	ldr	r3, [pc, #148]	@ (8000afc <SystemClock_Config+0xcc>)
 8000a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a6c:	60bb      	str	r3, [r7, #8]
 8000a6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a70:	2300      	movs	r3, #0
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	4b22      	ldr	r3, [pc, #136]	@ (8000b00 <SystemClock_Config+0xd0>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a21      	ldr	r2, [pc, #132]	@ (8000b00 <SystemClock_Config+0xd0>)
 8000a7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a7e:	6013      	str	r3, [r2, #0]
 8000a80:	4b1f      	ldr	r3, [pc, #124]	@ (8000b00 <SystemClock_Config+0xd0>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a88:	607b      	str	r3, [r7, #4]
 8000a8a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a90:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a94:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a96:	2302      	movs	r3, #2
 8000a98:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a9a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000aa0:	2308      	movs	r3, #8
 8000aa2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000aa4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000aa8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000aae:	2307      	movs	r3, #7
 8000ab0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab2:	f107 0320 	add.w	r3, r7, #32
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f004 ff86 	bl	80059c8 <HAL_RCC_OscConfig>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000ac2:	f000 fad1 	bl	8001068 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000ac6:	230f      	movs	r3, #15
 8000ac8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aca:	2302      	movs	r3, #2
 8000acc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ad2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ad6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ad8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000adc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ade:	f107 030c 	add.w	r3, r7, #12
 8000ae2:	2105      	movs	r1, #5
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f005 f9e7 	bl	8005eb8 <HAL_RCC_ClockConfig>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000af0:	f000 faba 	bl	8001068 <Error_Handler>
  }
}
 8000af4:	bf00      	nop
 8000af6:	3750      	adds	r7, #80	@ 0x50
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	40023800 	.word	0x40023800
 8000b00:	40007000 	.word	0x40007000

08000b04 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b0a:	463b      	mov	r3, r7
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
   */
  hadc1.Instance = ADC1;
 8000b16:	4b28      	ldr	r3, [pc, #160]	@ (8000bb8 <MX_ADC1_Init+0xb4>)
 8000b18:	4a28      	ldr	r2, [pc, #160]	@ (8000bbc <MX_ADC1_Init+0xb8>)
 8000b1a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000b1c:	4b26      	ldr	r3, [pc, #152]	@ (8000bb8 <MX_ADC1_Init+0xb4>)
 8000b1e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000b22:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b24:	4b24      	ldr	r3, [pc, #144]	@ (8000bb8 <MX_ADC1_Init+0xb4>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000b2a:	4b23      	ldr	r3, [pc, #140]	@ (8000bb8 <MX_ADC1_Init+0xb4>)
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b30:	4b21      	ldr	r3, [pc, #132]	@ (8000bb8 <MX_ADC1_Init+0xb4>)
 8000b32:	2201      	movs	r2, #1
 8000b34:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b36:	4b20      	ldr	r3, [pc, #128]	@ (8000bb8 <MX_ADC1_Init+0xb4>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b3e:	4b1e      	ldr	r3, [pc, #120]	@ (8000bb8 <MX_ADC1_Init+0xb4>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b44:	4b1c      	ldr	r3, [pc, #112]	@ (8000bb8 <MX_ADC1_Init+0xb4>)
 8000b46:	4a1e      	ldr	r2, [pc, #120]	@ (8000bc0 <MX_ADC1_Init+0xbc>)
 8000b48:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b4a:	4b1b      	ldr	r3, [pc, #108]	@ (8000bb8 <MX_ADC1_Init+0xb4>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000b50:	4b19      	ldr	r3, [pc, #100]	@ (8000bb8 <MX_ADC1_Init+0xb4>)
 8000b52:	2202      	movs	r2, #2
 8000b54:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000b56:	4b18      	ldr	r3, [pc, #96]	@ (8000bb8 <MX_ADC1_Init+0xb4>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000b5e:	4b16      	ldr	r3, [pc, #88]	@ (8000bb8 <MX_ADC1_Init+0xb4>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b64:	4814      	ldr	r0, [pc, #80]	@ (8000bb8 <MX_ADC1_Init+0xb4>)
 8000b66:	f000 fddd 	bl	8001724 <HAL_ADC_Init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000b70:	f000 fa7a 	bl	8001068 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_8;
 8000b74:	2308      	movs	r3, #8
 8000b76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8000b7c:	2305      	movs	r3, #5
 8000b7e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b80:	463b      	mov	r3, r7
 8000b82:	4619      	mov	r1, r3
 8000b84:	480c      	ldr	r0, [pc, #48]	@ (8000bb8 <MX_ADC1_Init+0xb4>)
 8000b86:	f000 ff2f 	bl	80019e8 <HAL_ADC_ConfigChannel>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000b90:	f000 fa6a 	bl	8001068 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_9;
 8000b94:	2309      	movs	r3, #9
 8000b96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b9c:	463b      	mov	r3, r7
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4805      	ldr	r0, [pc, #20]	@ (8000bb8 <MX_ADC1_Init+0xb4>)
 8000ba2:	f000 ff21 	bl	80019e8 <HAL_ADC_ConfigChannel>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000bac:	f000 fa5c 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 8000bb0:	bf00      	nop
 8000bb2:	3710      	adds	r7, #16
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	200000b0 	.word	0x200000b0
 8000bbc:	40012000 	.word	0x40012000
 8000bc0:	0f000001 	.word	0x0f000001

08000bc4 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bc8:	4b12      	ldr	r3, [pc, #72]	@ (8000c14 <MX_I2C1_Init+0x50>)
 8000bca:	4a13      	ldr	r2, [pc, #76]	@ (8000c18 <MX_I2C1_Init+0x54>)
 8000bcc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000bce:	4b11      	ldr	r3, [pc, #68]	@ (8000c14 <MX_I2C1_Init+0x50>)
 8000bd0:	4a12      	ldr	r2, [pc, #72]	@ (8000c1c <MX_I2C1_Init+0x58>)
 8000bd2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bd4:	4b0f      	ldr	r3, [pc, #60]	@ (8000c14 <MX_I2C1_Init+0x50>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000bda:	4b0e      	ldr	r3, [pc, #56]	@ (8000c14 <MX_I2C1_Init+0x50>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000be0:	4b0c      	ldr	r3, [pc, #48]	@ (8000c14 <MX_I2C1_Init+0x50>)
 8000be2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000be6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000be8:	4b0a      	ldr	r3, [pc, #40]	@ (8000c14 <MX_I2C1_Init+0x50>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000bee:	4b09      	ldr	r3, [pc, #36]	@ (8000c14 <MX_I2C1_Init+0x50>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bf4:	4b07      	ldr	r3, [pc, #28]	@ (8000c14 <MX_I2C1_Init+0x50>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bfa:	4b06      	ldr	r3, [pc, #24]	@ (8000c14 <MX_I2C1_Init+0x50>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c00:	4804      	ldr	r0, [pc, #16]	@ (8000c14 <MX_I2C1_Init+0x50>)
 8000c02:	f004 f8fd 	bl	8004e00 <HAL_I2C_Init>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c0c:	f000 fa2c 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8000c10:	bf00      	nop
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	20000158 	.word	0x20000158
 8000c18:	40005400 	.word	0x40005400
 8000c1c:	000186a0 	.word	0x000186a0

08000c20 <MX_I2S3_Init>:
 * @brief I2S3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S3_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000c24:	4b13      	ldr	r3, [pc, #76]	@ (8000c74 <MX_I2S3_Init+0x54>)
 8000c26:	4a14      	ldr	r2, [pc, #80]	@ (8000c78 <MX_I2S3_Init+0x58>)
 8000c28:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000c2a:	4b12      	ldr	r3, [pc, #72]	@ (8000c74 <MX_I2S3_Init+0x54>)
 8000c2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c30:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000c32:	4b10      	ldr	r3, [pc, #64]	@ (8000c74 <MX_I2S3_Init+0x54>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000c38:	4b0e      	ldr	r3, [pc, #56]	@ (8000c74 <MX_I2S3_Init+0x54>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000c74 <MX_I2S3_Init+0x54>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000c44:	4b0b      	ldr	r3, [pc, #44]	@ (8000c74 <MX_I2S3_Init+0x54>)
 8000c46:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8000c4a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000c4c:	4b09      	ldr	r3, [pc, #36]	@ (8000c74 <MX_I2S3_Init+0x54>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000c52:	4b08      	ldr	r3, [pc, #32]	@ (8000c74 <MX_I2S3_Init+0x54>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000c58:	4b06      	ldr	r3, [pc, #24]	@ (8000c74 <MX_I2S3_Init+0x54>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000c5e:	4805      	ldr	r0, [pc, #20]	@ (8000c74 <MX_I2S3_Init+0x54>)
 8000c60:	f004 fa12 	bl	8005088 <HAL_I2S_Init>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000c6a:	f000 f9fd 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	200001ac 	.word	0x200001ac
 8000c78:	40003c00 	.word	0x40003c00

08000c7c <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c80:	4b17      	ldr	r3, [pc, #92]	@ (8000ce0 <MX_SPI1_Init+0x64>)
 8000c82:	4a18      	ldr	r2, [pc, #96]	@ (8000ce4 <MX_SPI1_Init+0x68>)
 8000c84:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c86:	4b16      	ldr	r3, [pc, #88]	@ (8000ce0 <MX_SPI1_Init+0x64>)
 8000c88:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c8c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c8e:	4b14      	ldr	r3, [pc, #80]	@ (8000ce0 <MX_SPI1_Init+0x64>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c94:	4b12      	ldr	r3, [pc, #72]	@ (8000ce0 <MX_SPI1_Init+0x64>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ce0 <MX_SPI1_Init+0x64>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ca0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce0 <MX_SPI1_Init+0x64>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce0 <MX_SPI1_Init+0x64>)
 8000ca8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cae:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce0 <MX_SPI1_Init+0x64>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cb4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce0 <MX_SPI1_Init+0x64>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cba:	4b09      	ldr	r3, [pc, #36]	@ (8000ce0 <MX_SPI1_Init+0x64>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cc0:	4b07      	ldr	r3, [pc, #28]	@ (8000ce0 <MX_SPI1_Init+0x64>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000cc6:	4b06      	ldr	r3, [pc, #24]	@ (8000ce0 <MX_SPI1_Init+0x64>)
 8000cc8:	220a      	movs	r2, #10
 8000cca:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ccc:	4804      	ldr	r0, [pc, #16]	@ (8000ce0 <MX_SPI1_Init+0x64>)
 8000cce:	f005 fc41 	bl	8006554 <HAL_SPI_Init>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000cd8:	f000 f9c6 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	200001f4 	.word	0x200001f4
 8000ce4:	40013000 	.word	0x40013000

08000ce8 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08e      	sub	sp, #56	@ 0x38
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
 8000cf8:	609a      	str	r2, [r3, #8]
 8000cfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cfc:	f107 0320 	add.w	r3, r7, #32
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d06:	1d3b      	adds	r3, r7, #4
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
 8000d14:	615a      	str	r2, [r3, #20]
 8000d16:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d18:	4b32      	ldr	r3, [pc, #200]	@ (8000de4 <MX_TIM3_Init+0xfc>)
 8000d1a:	4a33      	ldr	r2, [pc, #204]	@ (8000de8 <MX_TIM3_Init+0x100>)
 8000d1c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8000d1e:	4b31      	ldr	r3, [pc, #196]	@ (8000de4 <MX_TIM3_Init+0xfc>)
 8000d20:	2253      	movs	r2, #83	@ 0x53
 8000d22:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d24:	4b2f      	ldr	r3, [pc, #188]	@ (8000de4 <MX_TIM3_Init+0xfc>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000d2a:	4b2e      	ldr	r3, [pc, #184]	@ (8000de4 <MX_TIM3_Init+0xfc>)
 8000d2c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d30:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d32:	4b2c      	ldr	r3, [pc, #176]	@ (8000de4 <MX_TIM3_Init+0xfc>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d38:	4b2a      	ldr	r3, [pc, #168]	@ (8000de4 <MX_TIM3_Init+0xfc>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d3e:	4829      	ldr	r0, [pc, #164]	@ (8000de4 <MX_TIM3_Init+0xfc>)
 8000d40:	f005 fc91 	bl	8006666 <HAL_TIM_Base_Init>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000d4a:	f000 f98d 	bl	8001068 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d52:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d54:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4822      	ldr	r0, [pc, #136]	@ (8000de4 <MX_TIM3_Init+0xfc>)
 8000d5c:	f005 feb6 	bl	8006acc <HAL_TIM_ConfigClockSource>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000d66:	f000 f97f 	bl	8001068 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d6a:	481e      	ldr	r0, [pc, #120]	@ (8000de4 <MX_TIM3_Init+0xfc>)
 8000d6c:	f005 fcca 	bl	8006704 <HAL_TIM_PWM_Init>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000d76:	f000 f977 	bl	8001068 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d82:	f107 0320 	add.w	r3, r7, #32
 8000d86:	4619      	mov	r1, r3
 8000d88:	4816      	ldr	r0, [pc, #88]	@ (8000de4 <MX_TIM3_Init+0xfc>)
 8000d8a:	f006 fa7d 	bl	8007288 <HAL_TIMEx_MasterConfigSynchronization>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000d94:	f000 f968 	bl	8001068 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d98:	2360      	movs	r3, #96	@ 0x60
 8000d9a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000da0:	2300      	movs	r3, #0
 8000da2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000da4:	2300      	movs	r3, #0
 8000da6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000da8:	1d3b      	adds	r3, r7, #4
 8000daa:	2208      	movs	r2, #8
 8000dac:	4619      	mov	r1, r3
 8000dae:	480d      	ldr	r0, [pc, #52]	@ (8000de4 <MX_TIM3_Init+0xfc>)
 8000db0:	f005 fdca 	bl	8006948 <HAL_TIM_PWM_ConfigChannel>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000dba:	f000 f955 	bl	8001068 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000dbe:	1d3b      	adds	r3, r7, #4
 8000dc0:	220c      	movs	r2, #12
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4807      	ldr	r0, [pc, #28]	@ (8000de4 <MX_TIM3_Init+0xfc>)
 8000dc6:	f005 fdbf 	bl	8006948 <HAL_TIM_PWM_ConfigChannel>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000dd0:	f000 f94a 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000dd4:	4803      	ldr	r0, [pc, #12]	@ (8000de4 <MX_TIM3_Init+0xfc>)
 8000dd6:	f000 fb1f 	bl	8001418 <HAL_TIM_MspPostInit>
}
 8000dda:	bf00      	nop
 8000ddc:	3738      	adds	r7, #56	@ 0x38
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	2000024c 	.word	0x2000024c
 8000de8:	40000400 	.word	0x40000400

08000dec <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	607b      	str	r3, [r7, #4]
 8000df6:	4b0c      	ldr	r3, [pc, #48]	@ (8000e28 <MX_DMA_Init+0x3c>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfa:	4a0b      	ldr	r2, [pc, #44]	@ (8000e28 <MX_DMA_Init+0x3c>)
 8000dfc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e02:	4b09      	ldr	r3, [pc, #36]	@ (8000e28 <MX_DMA_Init+0x3c>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e0a:	607b      	str	r3, [r7, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2100      	movs	r1, #0
 8000e12:	2038      	movs	r0, #56	@ 0x38
 8000e14:	f001 f963 	bl	80020de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000e18:	2038      	movs	r0, #56	@ 0x38
 8000e1a:	f001 f97c 	bl	8002116 <HAL_NVIC_EnableIRQ>
}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40023800 	.word	0x40023800

08000e2c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b08c      	sub	sp, #48	@ 0x30
 8000e30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e32:	f107 031c 	add.w	r3, r7, #28
 8000e36:	2200      	movs	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	605a      	str	r2, [r3, #4]
 8000e3c:	609a      	str	r2, [r3, #8]
 8000e3e:	60da      	str	r2, [r3, #12]
 8000e40:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	61bb      	str	r3, [r7, #24]
 8000e46:	4b82      	ldr	r3, [pc, #520]	@ (8001050 <MX_GPIO_Init+0x224>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4a:	4a81      	ldr	r2, [pc, #516]	@ (8001050 <MX_GPIO_Init+0x224>)
 8000e4c:	f043 0310 	orr.w	r3, r3, #16
 8000e50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e52:	4b7f      	ldr	r3, [pc, #508]	@ (8001050 <MX_GPIO_Init+0x224>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e56:	f003 0310 	and.w	r3, r3, #16
 8000e5a:	61bb      	str	r3, [r7, #24]
 8000e5c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	617b      	str	r3, [r7, #20]
 8000e62:	4b7b      	ldr	r3, [pc, #492]	@ (8001050 <MX_GPIO_Init+0x224>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e66:	4a7a      	ldr	r2, [pc, #488]	@ (8001050 <MX_GPIO_Init+0x224>)
 8000e68:	f043 0304 	orr.w	r3, r3, #4
 8000e6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e6e:	4b78      	ldr	r3, [pc, #480]	@ (8001050 <MX_GPIO_Init+0x224>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e72:	f003 0304 	and.w	r3, r3, #4
 8000e76:	617b      	str	r3, [r7, #20]
 8000e78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	613b      	str	r3, [r7, #16]
 8000e7e:	4b74      	ldr	r3, [pc, #464]	@ (8001050 <MX_GPIO_Init+0x224>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e82:	4a73      	ldr	r2, [pc, #460]	@ (8001050 <MX_GPIO_Init+0x224>)
 8000e84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e8a:	4b71      	ldr	r3, [pc, #452]	@ (8001050 <MX_GPIO_Init+0x224>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e92:	613b      	str	r3, [r7, #16]
 8000e94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	4b6d      	ldr	r3, [pc, #436]	@ (8001050 <MX_GPIO_Init+0x224>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9e:	4a6c      	ldr	r2, [pc, #432]	@ (8001050 <MX_GPIO_Init+0x224>)
 8000ea0:	f043 0301 	orr.w	r3, r3, #1
 8000ea4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ea6:	4b6a      	ldr	r3, [pc, #424]	@ (8001050 <MX_GPIO_Init+0x224>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60bb      	str	r3, [r7, #8]
 8000eb6:	4b66      	ldr	r3, [pc, #408]	@ (8001050 <MX_GPIO_Init+0x224>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eba:	4a65      	ldr	r2, [pc, #404]	@ (8001050 <MX_GPIO_Init+0x224>)
 8000ebc:	f043 0302 	orr.w	r3, r3, #2
 8000ec0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec2:	4b63      	ldr	r3, [pc, #396]	@ (8001050 <MX_GPIO_Init+0x224>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec6:	f003 0302 	and.w	r3, r3, #2
 8000eca:	60bb      	str	r3, [r7, #8]
 8000ecc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	607b      	str	r3, [r7, #4]
 8000ed2:	4b5f      	ldr	r3, [pc, #380]	@ (8001050 <MX_GPIO_Init+0x224>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed6:	4a5e      	ldr	r2, [pc, #376]	@ (8001050 <MX_GPIO_Init+0x224>)
 8000ed8:	f043 0308 	orr.w	r3, r3, #8
 8000edc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ede:	4b5c      	ldr	r3, [pc, #368]	@ (8001050 <MX_GPIO_Init+0x224>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee2:	f003 0308 	and.w	r3, r3, #8
 8000ee6:	607b      	str	r3, [r7, #4]
 8000ee8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2108      	movs	r1, #8
 8000eee:	4859      	ldr	r0, [pc, #356]	@ (8001054 <MX_GPIO_Init+0x228>)
 8000ef0:	f001 fe38 	bl	8002b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	4857      	ldr	r0, [pc, #348]	@ (8001058 <MX_GPIO_Init+0x22c>)
 8000efa:	f001 fe33 	bl	8002b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MI0_Pin | MI1_Pin | MD0_Pin | MD1_Pin, GPIO_PIN_RESET);
 8000efe:	2200      	movs	r2, #0
 8000f00:	f44f 41f0 	mov.w	r1, #30720	@ 0x7800
 8000f04:	4855      	ldr	r0, [pc, #340]	@ (800105c <MX_GPIO_Init+0x230>)
 8000f06:	f001 fe2d 	bl	8002b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin, GPIO_PIN_RESET);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000f10:	4853      	ldr	r0, [pc, #332]	@ (8001060 <MX_GPIO_Init+0x234>)
 8000f12:	f001 fe27 	bl	8002b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000f16:	2308      	movs	r3, #8
 8000f18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f22:	2300      	movs	r3, #0
 8000f24:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000f26:	f107 031c 	add.w	r3, r7, #28
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4849      	ldr	r0, [pc, #292]	@ (8001054 <MX_GPIO_Init+0x228>)
 8000f2e:	f001 fc7d 	bl	800282c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000f32:	2301      	movs	r3, #1
 8000f34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f36:	2301      	movs	r3, #1
 8000f38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f42:	f107 031c 	add.w	r3, r7, #28
 8000f46:	4619      	mov	r1, r3
 8000f48:	4843      	ldr	r0, [pc, #268]	@ (8001058 <MX_GPIO_Init+0x22c>)
 8000f4a:	f001 fc6f 	bl	800282c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000f4e:	2308      	movs	r3, #8
 8000f50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f52:	2302      	movs	r3, #2
 8000f54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f5e:	2305      	movs	r3, #5
 8000f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000f62:	f107 031c 	add.w	r3, r7, #28
 8000f66:	4619      	mov	r1, r3
 8000f68:	483b      	ldr	r0, [pc, #236]	@ (8001058 <MX_GPIO_Init+0x22c>)
 8000f6a:	f001 fc5f 	bl	800282c <HAL_GPIO_Init>

  /*Configure GPIO pin : i_am_speed_Pin */
  GPIO_InitStruct.Pin = i_am_speed_Pin;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f72:	2300      	movs	r3, #0
 8000f74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(i_am_speed_GPIO_Port, &GPIO_InitStruct);
 8000f7a:	f107 031c 	add.w	r3, r7, #28
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4838      	ldr	r0, [pc, #224]	@ (8001064 <MX_GPIO_Init+0x238>)
 8000f82:	f001 fc53 	bl	800282c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000f86:	2304      	movs	r3, #4
 8000f88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000f92:	f107 031c 	add.w	r3, r7, #28
 8000f96:	4619      	mov	r1, r3
 8000f98:	4830      	ldr	r0, [pc, #192]	@ (800105c <MX_GPIO_Init+0x230>)
 8000f9a:	f001 fc47 	bl	800282c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000f9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fac:	2300      	movs	r3, #0
 8000fae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fb0:	2305      	movs	r3, #5
 8000fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000fb4:	f107 031c 	add.w	r3, r7, #28
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4828      	ldr	r0, [pc, #160]	@ (800105c <MX_GPIO_Init+0x230>)
 8000fbc:	f001 fc36 	bl	800282c <HAL_GPIO_Init>

  /*Configure GPIO pins : MI0_Pin MI1_Pin MD0_Pin MD1_Pin */
  GPIO_InitStruct.Pin = MI0_Pin | MI1_Pin | MD0_Pin | MD1_Pin;
 8000fc0:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 8000fc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd2:	f107 031c 	add.w	r3, r7, #28
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4820      	ldr	r0, [pc, #128]	@ (800105c <MX_GPIO_Init+0x230>)
 8000fda:	f001 fc27 	bl	800282c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin;
 8000fde:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000fe2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fec:	2300      	movs	r3, #0
 8000fee:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ff0:	f107 031c 	add.w	r3, r7, #28
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	481a      	ldr	r0, [pc, #104]	@ (8001060 <MX_GPIO_Init+0x234>)
 8000ff8:	f001 fc18 	bl	800282c <HAL_GPIO_Init>

  /*Configure GPIO pins : WallSensor_Pin LineSensor_Pin */
  GPIO_InitStruct.Pin = WallSensor_Pin | LineSensor_Pin;
 8000ffc:	23c0      	movs	r3, #192	@ 0xc0
 8000ffe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001000:	2300      	movs	r3, #0
 8001002:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001008:	f107 031c 	add.w	r3, r7, #28
 800100c:	4619      	mov	r1, r3
 800100e:	4812      	ldr	r0, [pc, #72]	@ (8001058 <MX_GPIO_Init+0x22c>)
 8001010:	f001 fc0c 	bl	800282c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001014:	2320      	movs	r3, #32
 8001016:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001018:	2300      	movs	r3, #0
 800101a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001020:	f107 031c 	add.w	r3, r7, #28
 8001024:	4619      	mov	r1, r3
 8001026:	480e      	ldr	r0, [pc, #56]	@ (8001060 <MX_GPIO_Init+0x234>)
 8001028:	f001 fc00 	bl	800282c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800102c:	2302      	movs	r3, #2
 800102e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001030:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001034:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800103a:	f107 031c 	add.w	r3, r7, #28
 800103e:	4619      	mov	r1, r3
 8001040:	4804      	ldr	r0, [pc, #16]	@ (8001054 <MX_GPIO_Init+0x228>)
 8001042:	f001 fbf3 	bl	800282c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001046:	bf00      	nop
 8001048:	3730      	adds	r7, #48	@ 0x30
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40023800 	.word	0x40023800
 8001054:	40021000 	.word	0x40021000
 8001058:	40020800 	.word	0x40020800
 800105c:	40020400 	.word	0x40020400
 8001060:	40020c00 	.word	0x40020c00
 8001064:	40020000 	.word	0x40020000

08001068 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800106c:	b672      	cpsid	i
}
 800106e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001070:	bf00      	nop
 8001072:	e7fd      	b.n	8001070 <Error_Handler+0x8>

08001074 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	607b      	str	r3, [r7, #4]
 800107e:	4b10      	ldr	r3, [pc, #64]	@ (80010c0 <HAL_MspInit+0x4c>)
 8001080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001082:	4a0f      	ldr	r2, [pc, #60]	@ (80010c0 <HAL_MspInit+0x4c>)
 8001084:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001088:	6453      	str	r3, [r2, #68]	@ 0x44
 800108a:	4b0d      	ldr	r3, [pc, #52]	@ (80010c0 <HAL_MspInit+0x4c>)
 800108c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800108e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	603b      	str	r3, [r7, #0]
 800109a:	4b09      	ldr	r3, [pc, #36]	@ (80010c0 <HAL_MspInit+0x4c>)
 800109c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800109e:	4a08      	ldr	r2, [pc, #32]	@ (80010c0 <HAL_MspInit+0x4c>)
 80010a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80010a6:	4b06      	ldr	r3, [pc, #24]	@ (80010c0 <HAL_MspInit+0x4c>)
 80010a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010ae:	603b      	str	r3, [r7, #0]
 80010b0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80010b2:	2007      	movs	r0, #7
 80010b4:	f001 f808 	bl	80020c8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010b8:	bf00      	nop
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40023800 	.word	0x40023800

080010c4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08a      	sub	sp, #40	@ 0x28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a2f      	ldr	r2, [pc, #188]	@ (80011a0 <HAL_ADC_MspInit+0xdc>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d157      	bne.n	8001196 <HAL_ADC_MspInit+0xd2>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	613b      	str	r3, [r7, #16]
 80010ea:	4b2e      	ldr	r3, [pc, #184]	@ (80011a4 <HAL_ADC_MspInit+0xe0>)
 80010ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ee:	4a2d      	ldr	r2, [pc, #180]	@ (80011a4 <HAL_ADC_MspInit+0xe0>)
 80010f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80010f6:	4b2b      	ldr	r3, [pc, #172]	@ (80011a4 <HAL_ADC_MspInit+0xe0>)
 80010f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010fe:	613b      	str	r3, [r7, #16]
 8001100:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	4b27      	ldr	r3, [pc, #156]	@ (80011a4 <HAL_ADC_MspInit+0xe0>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110a:	4a26      	ldr	r2, [pc, #152]	@ (80011a4 <HAL_ADC_MspInit+0xe0>)
 800110c:	f043 0302 	orr.w	r3, r3, #2
 8001110:	6313      	str	r3, [r2, #48]	@ 0x30
 8001112:	4b24      	ldr	r3, [pc, #144]	@ (80011a4 <HAL_ADC_MspInit+0xe0>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = RightSensor_Pin|LeftSensor_Pin;
 800111e:	2303      	movs	r3, #3
 8001120:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001122:	2303      	movs	r3, #3
 8001124:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800112a:	f107 0314 	add.w	r3, r7, #20
 800112e:	4619      	mov	r1, r3
 8001130:	481d      	ldr	r0, [pc, #116]	@ (80011a8 <HAL_ADC_MspInit+0xe4>)
 8001132:	f001 fb7b 	bl	800282c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001136:	4b1d      	ldr	r3, [pc, #116]	@ (80011ac <HAL_ADC_MspInit+0xe8>)
 8001138:	4a1d      	ldr	r2, [pc, #116]	@ (80011b0 <HAL_ADC_MspInit+0xec>)
 800113a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800113c:	4b1b      	ldr	r3, [pc, #108]	@ (80011ac <HAL_ADC_MspInit+0xe8>)
 800113e:	2200      	movs	r2, #0
 8001140:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001142:	4b1a      	ldr	r3, [pc, #104]	@ (80011ac <HAL_ADC_MspInit+0xe8>)
 8001144:	2200      	movs	r2, #0
 8001146:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001148:	4b18      	ldr	r3, [pc, #96]	@ (80011ac <HAL_ADC_MspInit+0xe8>)
 800114a:	2200      	movs	r2, #0
 800114c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800114e:	4b17      	ldr	r3, [pc, #92]	@ (80011ac <HAL_ADC_MspInit+0xe8>)
 8001150:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001154:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001156:	4b15      	ldr	r3, [pc, #84]	@ (80011ac <HAL_ADC_MspInit+0xe8>)
 8001158:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800115c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800115e:	4b13      	ldr	r3, [pc, #76]	@ (80011ac <HAL_ADC_MspInit+0xe8>)
 8001160:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001164:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001166:	4b11      	ldr	r3, [pc, #68]	@ (80011ac <HAL_ADC_MspInit+0xe8>)
 8001168:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800116c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800116e:	4b0f      	ldr	r3, [pc, #60]	@ (80011ac <HAL_ADC_MspInit+0xe8>)
 8001170:	2200      	movs	r2, #0
 8001172:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001174:	4b0d      	ldr	r3, [pc, #52]	@ (80011ac <HAL_ADC_MspInit+0xe8>)
 8001176:	2200      	movs	r2, #0
 8001178:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800117a:	480c      	ldr	r0, [pc, #48]	@ (80011ac <HAL_ADC_MspInit+0xe8>)
 800117c:	f000 ffe6 	bl	800214c <HAL_DMA_Init>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001186:	f7ff ff6f 	bl	8001068 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a07      	ldr	r2, [pc, #28]	@ (80011ac <HAL_ADC_MspInit+0xe8>)
 800118e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001190:	4a06      	ldr	r2, [pc, #24]	@ (80011ac <HAL_ADC_MspInit+0xe8>)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001196:	bf00      	nop
 8001198:	3728      	adds	r7, #40	@ 0x28
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40012000 	.word	0x40012000
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40020400 	.word	0x40020400
 80011ac:	200000f8 	.word	0x200000f8
 80011b0:	40026410 	.word	0x40026410

080011b4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08a      	sub	sp, #40	@ 0x28
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a19      	ldr	r2, [pc, #100]	@ (8001238 <HAL_I2C_MspInit+0x84>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d12c      	bne.n	8001230 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	613b      	str	r3, [r7, #16]
 80011da:	4b18      	ldr	r3, [pc, #96]	@ (800123c <HAL_I2C_MspInit+0x88>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011de:	4a17      	ldr	r2, [pc, #92]	@ (800123c <HAL_I2C_MspInit+0x88>)
 80011e0:	f043 0302 	orr.w	r3, r3, #2
 80011e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011e6:	4b15      	ldr	r3, [pc, #84]	@ (800123c <HAL_I2C_MspInit+0x88>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	613b      	str	r3, [r7, #16]
 80011f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80011f2:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80011f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011f8:	2312      	movs	r3, #18
 80011fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011fc:	2301      	movs	r3, #1
 80011fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001200:	2300      	movs	r3, #0
 8001202:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001204:	2304      	movs	r3, #4
 8001206:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	4619      	mov	r1, r3
 800120e:	480c      	ldr	r0, [pc, #48]	@ (8001240 <HAL_I2C_MspInit+0x8c>)
 8001210:	f001 fb0c 	bl	800282c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001214:	2300      	movs	r3, #0
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	4b08      	ldr	r3, [pc, #32]	@ (800123c <HAL_I2C_MspInit+0x88>)
 800121a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121c:	4a07      	ldr	r2, [pc, #28]	@ (800123c <HAL_I2C_MspInit+0x88>)
 800121e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001222:	6413      	str	r3, [r2, #64]	@ 0x40
 8001224:	4b05      	ldr	r3, [pc, #20]	@ (800123c <HAL_I2C_MspInit+0x88>)
 8001226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001228:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800122c:	60fb      	str	r3, [r7, #12]
 800122e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001230:	bf00      	nop
 8001232:	3728      	adds	r7, #40	@ 0x28
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40005400 	.word	0x40005400
 800123c:	40023800 	.word	0x40023800
 8001240:	40020400 	.word	0x40020400

08001244 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b08e      	sub	sp, #56	@ 0x38
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a31      	ldr	r2, [pc, #196]	@ (8001334 <HAL_I2S_MspInit+0xf0>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d15a      	bne.n	800132a <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001274:	2301      	movs	r3, #1
 8001276:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001278:	23c0      	movs	r3, #192	@ 0xc0
 800127a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800127c:	2302      	movs	r3, #2
 800127e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	4618      	mov	r0, r3
 8001286:	f005 f823 	bl	80062d0 <HAL_RCCEx_PeriphCLKConfig>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001290:	f7ff feea 	bl	8001068 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001294:	2300      	movs	r3, #0
 8001296:	613b      	str	r3, [r7, #16]
 8001298:	4b27      	ldr	r3, [pc, #156]	@ (8001338 <HAL_I2S_MspInit+0xf4>)
 800129a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129c:	4a26      	ldr	r2, [pc, #152]	@ (8001338 <HAL_I2S_MspInit+0xf4>)
 800129e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80012a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80012a4:	4b24      	ldr	r3, [pc, #144]	@ (8001338 <HAL_I2S_MspInit+0xf4>)
 80012a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80012ac:	613b      	str	r3, [r7, #16]
 80012ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b0:	2300      	movs	r3, #0
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	4b20      	ldr	r3, [pc, #128]	@ (8001338 <HAL_I2S_MspInit+0xf4>)
 80012b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b8:	4a1f      	ldr	r2, [pc, #124]	@ (8001338 <HAL_I2S_MspInit+0xf4>)
 80012ba:	f043 0301 	orr.w	r3, r3, #1
 80012be:	6313      	str	r3, [r2, #48]	@ 0x30
 80012c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001338 <HAL_I2S_MspInit+0xf4>)
 80012c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c4:	f003 0301 	and.w	r3, r3, #1
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012cc:	2300      	movs	r3, #0
 80012ce:	60bb      	str	r3, [r7, #8]
 80012d0:	4b19      	ldr	r3, [pc, #100]	@ (8001338 <HAL_I2S_MspInit+0xf4>)
 80012d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d4:	4a18      	ldr	r2, [pc, #96]	@ (8001338 <HAL_I2S_MspInit+0xf4>)
 80012d6:	f043 0304 	orr.w	r3, r3, #4
 80012da:	6313      	str	r3, [r2, #48]	@ 0x30
 80012dc:	4b16      	ldr	r3, [pc, #88]	@ (8001338 <HAL_I2S_MspInit+0xf4>)
 80012de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e0:	f003 0304 	and.w	r3, r3, #4
 80012e4:	60bb      	str	r3, [r7, #8]
 80012e6:	68bb      	ldr	r3, [r7, #8]
    /**I2S3 GPIO Configuration
    PA4     ------> I2S3_WS
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80012e8:	2310      	movs	r3, #16
 80012ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ec:	2302      	movs	r3, #2
 80012ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f4:	2300      	movs	r3, #0
 80012f6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012f8:	2306      	movs	r3, #6
 80012fa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80012fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001300:	4619      	mov	r1, r3
 8001302:	480e      	ldr	r0, [pc, #56]	@ (800133c <HAL_I2S_MspInit+0xf8>)
 8001304:	f001 fa92 	bl	800282c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_SCK_Pin|I2S3_SD_Pin;
 8001308:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800130c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130e:	2302      	movs	r3, #2
 8001310:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001316:	2300      	movs	r3, #0
 8001318:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800131a:	2306      	movs	r3, #6
 800131c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800131e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001322:	4619      	mov	r1, r3
 8001324:	4806      	ldr	r0, [pc, #24]	@ (8001340 <HAL_I2S_MspInit+0xfc>)
 8001326:	f001 fa81 	bl	800282c <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 800132a:	bf00      	nop
 800132c:	3738      	adds	r7, #56	@ 0x38
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40003c00 	.word	0x40003c00
 8001338:	40023800 	.word	0x40023800
 800133c:	40020000 	.word	0x40020000
 8001340:	40020800 	.word	0x40020800

08001344 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08a      	sub	sp, #40	@ 0x28
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134c:	f107 0314 	add.w	r3, r7, #20
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a19      	ldr	r2, [pc, #100]	@ (80013c8 <HAL_SPI_MspInit+0x84>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d12b      	bne.n	80013be <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	613b      	str	r3, [r7, #16]
 800136a:	4b18      	ldr	r3, [pc, #96]	@ (80013cc <HAL_SPI_MspInit+0x88>)
 800136c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800136e:	4a17      	ldr	r2, [pc, #92]	@ (80013cc <HAL_SPI_MspInit+0x88>)
 8001370:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001374:	6453      	str	r3, [r2, #68]	@ 0x44
 8001376:	4b15      	ldr	r3, [pc, #84]	@ (80013cc <HAL_SPI_MspInit+0x88>)
 8001378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800137a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800137e:	613b      	str	r3, [r7, #16]
 8001380:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	4b11      	ldr	r3, [pc, #68]	@ (80013cc <HAL_SPI_MspInit+0x88>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138a:	4a10      	ldr	r2, [pc, #64]	@ (80013cc <HAL_SPI_MspInit+0x88>)
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	6313      	str	r3, [r2, #48]	@ 0x30
 8001392:	4b0e      	ldr	r3, [pc, #56]	@ (80013cc <HAL_SPI_MspInit+0x88>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800139e:	23e0      	movs	r3, #224	@ 0xe0
 80013a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a2:	2302      	movs	r3, #2
 80013a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013aa:	2300      	movs	r3, #0
 80013ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013ae:	2305      	movs	r3, #5
 80013b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b2:	f107 0314 	add.w	r3, r7, #20
 80013b6:	4619      	mov	r1, r3
 80013b8:	4805      	ldr	r0, [pc, #20]	@ (80013d0 <HAL_SPI_MspInit+0x8c>)
 80013ba:	f001 fa37 	bl	800282c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80013be:	bf00      	nop
 80013c0:	3728      	adds	r7, #40	@ 0x28
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40013000 	.word	0x40013000
 80013cc:	40023800 	.word	0x40023800
 80013d0:	40020000 	.word	0x40020000

080013d4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a0b      	ldr	r2, [pc, #44]	@ (8001410 <HAL_TIM_Base_MspInit+0x3c>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d10d      	bne.n	8001402 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001414 <HAL_TIM_Base_MspInit+0x40>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ee:	4a09      	ldr	r2, [pc, #36]	@ (8001414 <HAL_TIM_Base_MspInit+0x40>)
 80013f0:	f043 0302 	orr.w	r3, r3, #2
 80013f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80013f6:	4b07      	ldr	r3, [pc, #28]	@ (8001414 <HAL_TIM_Base_MspInit+0x40>)
 80013f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001402:	bf00      	nop
 8001404:	3714      	adds	r7, #20
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	40000400 	.word	0x40000400
 8001414:	40023800 	.word	0x40023800

08001418 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b088      	sub	sp, #32
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001420:	f107 030c 	add.w	r3, r7, #12
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a12      	ldr	r2, [pc, #72]	@ (8001480 <HAL_TIM_MspPostInit+0x68>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d11e      	bne.n	8001478 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	60bb      	str	r3, [r7, #8]
 800143e:	4b11      	ldr	r3, [pc, #68]	@ (8001484 <HAL_TIM_MspPostInit+0x6c>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001442:	4a10      	ldr	r2, [pc, #64]	@ (8001484 <HAL_TIM_MspPostInit+0x6c>)
 8001444:	f043 0304 	orr.w	r3, r3, #4
 8001448:	6313      	str	r3, [r2, #48]	@ 0x30
 800144a:	4b0e      	ldr	r3, [pc, #56]	@ (8001484 <HAL_TIM_MspPostInit+0x6c>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144e:	f003 0304 	and.w	r3, r3, #4
 8001452:	60bb      	str	r3, [r7, #8]
 8001454:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = Vel_I_Pin|Vel_D_Pin;
 8001456:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800145a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145c:	2302      	movs	r3, #2
 800145e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001464:	2300      	movs	r3, #0
 8001466:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001468:	2302      	movs	r3, #2
 800146a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800146c:	f107 030c 	add.w	r3, r7, #12
 8001470:	4619      	mov	r1, r3
 8001472:	4805      	ldr	r0, [pc, #20]	@ (8001488 <HAL_TIM_MspPostInit+0x70>)
 8001474:	f001 f9da 	bl	800282c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001478:	bf00      	nop
 800147a:	3720      	adds	r7, #32
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40000400 	.word	0x40000400
 8001484:	40023800 	.word	0x40023800
 8001488:	40020800 	.word	0x40020800

0800148c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001490:	bf00      	nop
 8001492:	e7fd      	b.n	8001490 <NMI_Handler+0x4>

08001494 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001498:	bf00      	nop
 800149a:	e7fd      	b.n	8001498 <HardFault_Handler+0x4>

0800149c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014a0:	bf00      	nop
 80014a2:	e7fd      	b.n	80014a0 <MemManage_Handler+0x4>

080014a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014a8:	bf00      	nop
 80014aa:	e7fd      	b.n	80014a8 <BusFault_Handler+0x4>

080014ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014b0:	bf00      	nop
 80014b2:	e7fd      	b.n	80014b0 <UsageFault_Handler+0x4>

080014b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr

080014c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014c2:	b480      	push	{r7}
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr

080014de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014e2:	f000 f8db 	bl	800169c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
	...

080014ec <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80014f0:	4802      	ldr	r0, [pc, #8]	@ (80014fc <DMA2_Stream0_IRQHandler+0x10>)
 80014f2:	f000 ff31 	bl	8002358 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	200000f8 	.word	0x200000f8

08001500 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001504:	4802      	ldr	r0, [pc, #8]	@ (8001510 <OTG_FS_IRQHandler+0x10>)
 8001506:	f001 fe27 	bl	8003158 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	2000080c 	.word	0x2000080c

08001514 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800151c:	4a14      	ldr	r2, [pc, #80]	@ (8001570 <_sbrk+0x5c>)
 800151e:	4b15      	ldr	r3, [pc, #84]	@ (8001574 <_sbrk+0x60>)
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001528:	4b13      	ldr	r3, [pc, #76]	@ (8001578 <_sbrk+0x64>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d102      	bne.n	8001536 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001530:	4b11      	ldr	r3, [pc, #68]	@ (8001578 <_sbrk+0x64>)
 8001532:	4a12      	ldr	r2, [pc, #72]	@ (800157c <_sbrk+0x68>)
 8001534:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001536:	4b10      	ldr	r3, [pc, #64]	@ (8001578 <_sbrk+0x64>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4413      	add	r3, r2
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	429a      	cmp	r2, r3
 8001542:	d207      	bcs.n	8001554 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001544:	f009 fcf6 	bl	800af34 <__errno>
 8001548:	4603      	mov	r3, r0
 800154a:	220c      	movs	r2, #12
 800154c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800154e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001552:	e009      	b.n	8001568 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001554:	4b08      	ldr	r3, [pc, #32]	@ (8001578 <_sbrk+0x64>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800155a:	4b07      	ldr	r3, [pc, #28]	@ (8001578 <_sbrk+0x64>)
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4413      	add	r3, r2
 8001562:	4a05      	ldr	r2, [pc, #20]	@ (8001578 <_sbrk+0x64>)
 8001564:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001566:	68fb      	ldr	r3, [r7, #12]
}
 8001568:	4618      	mov	r0, r3
 800156a:	3718      	adds	r7, #24
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20020000 	.word	0x20020000
 8001574:	00000400 	.word	0x00000400
 8001578:	20000428 	.word	0x20000428
 800157c:	20000d38 	.word	0x20000d38

08001580 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001584:	4b06      	ldr	r3, [pc, #24]	@ (80015a0 <SystemInit+0x20>)
 8001586:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800158a:	4a05      	ldr	r2, [pc, #20]	@ (80015a0 <SystemInit+0x20>)
 800158c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001590:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80015a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015dc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80015a8:	f7ff ffea 	bl	8001580 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015ac:	480c      	ldr	r0, [pc, #48]	@ (80015e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015ae:	490d      	ldr	r1, [pc, #52]	@ (80015e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015b0:	4a0d      	ldr	r2, [pc, #52]	@ (80015e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015b4:	e002      	b.n	80015bc <LoopCopyDataInit>

080015b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ba:	3304      	adds	r3, #4

080015bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015c0:	d3f9      	bcc.n	80015b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015c2:	4a0a      	ldr	r2, [pc, #40]	@ (80015ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015c4:	4c0a      	ldr	r4, [pc, #40]	@ (80015f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015c8:	e001      	b.n	80015ce <LoopFillZerobss>

080015ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015cc:	3204      	adds	r2, #4

080015ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015d0:	d3fb      	bcc.n	80015ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015d2:	f009 fcb5 	bl	800af40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015d6:	f7ff f9c7 	bl	8000968 <main>
  bx  lr    
 80015da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80015dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015e4:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80015e8:	0800b06c 	.word	0x0800b06c
  ldr r2, =_sbss
 80015ec:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80015f0:	20000d34 	.word	0x20000d34

080015f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015f4:	e7fe      	b.n	80015f4 <ADC_IRQHandler>
	...

080015f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001638 <HAL_Init+0x40>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a0d      	ldr	r2, [pc, #52]	@ (8001638 <HAL_Init+0x40>)
 8001602:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001606:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001608:	4b0b      	ldr	r3, [pc, #44]	@ (8001638 <HAL_Init+0x40>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a0a      	ldr	r2, [pc, #40]	@ (8001638 <HAL_Init+0x40>)
 800160e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001612:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001614:	4b08      	ldr	r3, [pc, #32]	@ (8001638 <HAL_Init+0x40>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a07      	ldr	r2, [pc, #28]	@ (8001638 <HAL_Init+0x40>)
 800161a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800161e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001620:	2003      	movs	r0, #3
 8001622:	f000 fd51 	bl	80020c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001626:	2000      	movs	r0, #0
 8001628:	f000 f808 	bl	800163c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800162c:	f7ff fd22 	bl	8001074 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40023c00 	.word	0x40023c00

0800163c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001644:	4b12      	ldr	r3, [pc, #72]	@ (8001690 <HAL_InitTick+0x54>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	4b12      	ldr	r3, [pc, #72]	@ (8001694 <HAL_InitTick+0x58>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	4619      	mov	r1, r3
 800164e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001652:	fbb3 f3f1 	udiv	r3, r3, r1
 8001656:	fbb2 f3f3 	udiv	r3, r2, r3
 800165a:	4618      	mov	r0, r3
 800165c:	f000 fd69 	bl	8002132 <HAL_SYSTICK_Config>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e00e      	b.n	8001688 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2b0f      	cmp	r3, #15
 800166e:	d80a      	bhi.n	8001686 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001670:	2200      	movs	r2, #0
 8001672:	6879      	ldr	r1, [r7, #4]
 8001674:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001678:	f000 fd31 	bl	80020de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800167c:	4a06      	ldr	r2, [pc, #24]	@ (8001698 <HAL_InitTick+0x5c>)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001682:	2300      	movs	r3, #0
 8001684:	e000      	b.n	8001688 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
}
 8001688:	4618      	mov	r0, r3
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	20000010 	.word	0x20000010
 8001694:	20000018 	.word	0x20000018
 8001698:	20000014 	.word	0x20000014

0800169c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016a0:	4b06      	ldr	r3, [pc, #24]	@ (80016bc <HAL_IncTick+0x20>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	461a      	mov	r2, r3
 80016a6:	4b06      	ldr	r3, [pc, #24]	@ (80016c0 <HAL_IncTick+0x24>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4413      	add	r3, r2
 80016ac:	4a04      	ldr	r2, [pc, #16]	@ (80016c0 <HAL_IncTick+0x24>)
 80016ae:	6013      	str	r3, [r2, #0]
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	20000018 	.word	0x20000018
 80016c0:	2000042c 	.word	0x2000042c

080016c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  return uwTick;
 80016c8:	4b03      	ldr	r3, [pc, #12]	@ (80016d8 <HAL_GetTick+0x14>)
 80016ca:	681b      	ldr	r3, [r3, #0]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	2000042c 	.word	0x2000042c

080016dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016e4:	f7ff ffee 	bl	80016c4 <HAL_GetTick>
 80016e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80016f4:	d005      	beq.n	8001702 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001720 <HAL_Delay+0x44>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	461a      	mov	r2, r3
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	4413      	add	r3, r2
 8001700:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001702:	bf00      	nop
 8001704:	f7ff ffde 	bl	80016c4 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	68fa      	ldr	r2, [r7, #12]
 8001710:	429a      	cmp	r2, r3
 8001712:	d8f7      	bhi.n	8001704 <HAL_Delay+0x28>
  {
  }
}
 8001714:	bf00      	nop
 8001716:	bf00      	nop
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20000018 	.word	0x20000018

08001724 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800172c:	2300      	movs	r3, #0
 800172e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d101      	bne.n	800173a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e033      	b.n	80017a2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173e:	2b00      	cmp	r3, #0
 8001740:	d109      	bne.n	8001756 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7ff fcbe 	bl	80010c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2200      	movs	r2, #0
 800174c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175a:	f003 0310 	and.w	r3, r3, #16
 800175e:	2b00      	cmp	r3, #0
 8001760:	d118      	bne.n	8001794 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001766:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800176a:	f023 0302 	bic.w	r3, r3, #2
 800176e:	f043 0202 	orr.w	r2, r3, #2
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f000 fa58 	bl	8001c2c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001786:	f023 0303 	bic.w	r3, r3, #3
 800178a:	f043 0201 	orr.w	r2, r3, #1
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	641a      	str	r2, [r3, #64]	@ 0x40
 8001792:	e001      	b.n	8001798 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80017a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
	...

080017ac <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b088      	sub	sp, #32
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017bc:	2300      	movs	r3, #0
 80017be:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d101      	bne.n	80017ce <HAL_ADC_Start_DMA+0x22>
 80017ca:	2302      	movs	r3, #2
 80017cc:	e0eb      	b.n	80019a6 <HAL_ADC_Start_DMA+0x1fa>
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2201      	movs	r2, #1
 80017d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f003 0301 	and.w	r3, r3, #1
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d018      	beq.n	8001816 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	689a      	ldr	r2, [r3, #8]
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f042 0201 	orr.w	r2, r2, #1
 80017f2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80017f4:	4b6e      	ldr	r3, [pc, #440]	@ (80019b0 <HAL_ADC_Start_DMA+0x204>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a6e      	ldr	r2, [pc, #440]	@ (80019b4 <HAL_ADC_Start_DMA+0x208>)
 80017fa:	fba2 2303 	umull	r2, r3, r2, r3
 80017fe:	0c9a      	lsrs	r2, r3, #18
 8001800:	4613      	mov	r3, r2
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	4413      	add	r3, r2
 8001806:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001808:	e002      	b.n	8001810 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	3b01      	subs	r3, #1
 800180e:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1f9      	bne.n	800180a <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001820:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001824:	d107      	bne.n	8001836 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	689a      	ldr	r2, [r3, #8]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001834:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f003 0301 	and.w	r3, r3, #1
 8001840:	2b01      	cmp	r3, #1
 8001842:	f040 80a3 	bne.w	800198c <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800184e:	f023 0301 	bic.w	r3, r3, #1
 8001852:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001864:	2b00      	cmp	r3, #0
 8001866:	d007      	beq.n	8001878 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001870:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800187c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001880:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001884:	d106      	bne.n	8001894 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800188a:	f023 0206 	bic.w	r2, r3, #6
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	645a      	str	r2, [r3, #68]	@ 0x44
 8001892:	e002      	b.n	800189a <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2200      	movs	r2, #0
 8001898:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2200      	movs	r2, #0
 800189e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018a2:	4b45      	ldr	r3, [pc, #276]	@ (80019b8 <HAL_ADC_Start_DMA+0x20c>)
 80018a4:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018aa:	4a44      	ldr	r2, [pc, #272]	@ (80019bc <HAL_ADC_Start_DMA+0x210>)
 80018ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018b2:	4a43      	ldr	r2, [pc, #268]	@ (80019c0 <HAL_ADC_Start_DMA+0x214>)
 80018b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018ba:	4a42      	ldr	r2, [pc, #264]	@ (80019c4 <HAL_ADC_Start_DMA+0x218>)
 80018bc:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80018c6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	685a      	ldr	r2, [r3, #4]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80018d6:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	689a      	ldr	r2, [r3, #8]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80018e6:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	334c      	adds	r3, #76	@ 0x4c
 80018f2:	4619      	mov	r1, r3
 80018f4:	68ba      	ldr	r2, [r7, #8]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f000 fcd6 	bl	80022a8 <HAL_DMA_Start_IT>
 80018fc:	4603      	mov	r3, r0
 80018fe:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f003 031f 	and.w	r3, r3, #31
 8001908:	2b00      	cmp	r3, #0
 800190a:	d12a      	bne.n	8001962 <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a2d      	ldr	r2, [pc, #180]	@ (80019c8 <HAL_ADC_Start_DMA+0x21c>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d015      	beq.n	8001942 <HAL_ADC_Start_DMA+0x196>
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a2c      	ldr	r2, [pc, #176]	@ (80019cc <HAL_ADC_Start_DMA+0x220>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d105      	bne.n	800192c <HAL_ADC_Start_DMA+0x180>
 8001920:	4b25      	ldr	r3, [pc, #148]	@ (80019b8 <HAL_ADC_Start_DMA+0x20c>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f003 031f 	and.w	r3, r3, #31
 8001928:	2b00      	cmp	r3, #0
 800192a:	d00a      	beq.n	8001942 <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a27      	ldr	r2, [pc, #156]	@ (80019d0 <HAL_ADC_Start_DMA+0x224>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d136      	bne.n	80019a4 <HAL_ADC_Start_DMA+0x1f8>
 8001936:	4b20      	ldr	r3, [pc, #128]	@ (80019b8 <HAL_ADC_Start_DMA+0x20c>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f003 0310 	and.w	r3, r3, #16
 800193e:	2b00      	cmp	r3, #0
 8001940:	d130      	bne.n	80019a4 <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d129      	bne.n	80019a4 <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	689a      	ldr	r2, [r3, #8]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800195e:	609a      	str	r2, [r3, #8]
 8001960:	e020      	b.n	80019a4 <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a18      	ldr	r2, [pc, #96]	@ (80019c8 <HAL_ADC_Start_DMA+0x21c>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d11b      	bne.n	80019a4 <HAL_ADC_Start_DMA+0x1f8>
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d114      	bne.n	80019a4 <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	689a      	ldr	r2, [r3, #8]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001988:	609a      	str	r2, [r3, #8]
 800198a:	e00b      	b.n	80019a4 <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001990:	f043 0210 	orr.w	r2, r3, #16
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800199c:	f043 0201 	orr.w	r2, r3, #1
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 80019a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3720      	adds	r7, #32
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20000010 	.word	0x20000010
 80019b4:	431bde83 	.word	0x431bde83
 80019b8:	40012300 	.word	0x40012300
 80019bc:	08001e25 	.word	0x08001e25
 80019c0:	08001edf 	.word	0x08001edf
 80019c4:	08001efb 	.word	0x08001efb
 80019c8:	40012000 	.word	0x40012000
 80019cc:	40012100 	.word	0x40012100
 80019d0:	40012200 	.word	0x40012200

080019d4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80019f2:	2300      	movs	r3, #0
 80019f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d101      	bne.n	8001a04 <HAL_ADC_ConfigChannel+0x1c>
 8001a00:	2302      	movs	r3, #2
 8001a02:	e105      	b.n	8001c10 <HAL_ADC_ConfigChannel+0x228>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2201      	movs	r2, #1
 8001a08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2b09      	cmp	r3, #9
 8001a12:	d925      	bls.n	8001a60 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	68d9      	ldr	r1, [r3, #12]
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	461a      	mov	r2, r3
 8001a22:	4613      	mov	r3, r2
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	4413      	add	r3, r2
 8001a28:	3b1e      	subs	r3, #30
 8001a2a:	2207      	movs	r2, #7
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	43da      	mvns	r2, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	400a      	ands	r2, r1
 8001a38:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	68d9      	ldr	r1, [r3, #12]
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	689a      	ldr	r2, [r3, #8]
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	4403      	add	r3, r0
 8001a52:	3b1e      	subs	r3, #30
 8001a54:	409a      	lsls	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	60da      	str	r2, [r3, #12]
 8001a5e:	e022      	b.n	8001aa6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	6919      	ldr	r1, [r3, #16]
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	4613      	mov	r3, r2
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	4413      	add	r3, r2
 8001a74:	2207      	movs	r2, #7
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	43da      	mvns	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	400a      	ands	r2, r1
 8001a82:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	6919      	ldr	r1, [r3, #16]
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	689a      	ldr	r2, [r3, #8]
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	4618      	mov	r0, r3
 8001a96:	4603      	mov	r3, r0
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	4403      	add	r3, r0
 8001a9c:	409a      	lsls	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2b06      	cmp	r3, #6
 8001aac:	d824      	bhi.n	8001af8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685a      	ldr	r2, [r3, #4]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4413      	add	r3, r2
 8001abe:	3b05      	subs	r3, #5
 8001ac0:	221f      	movs	r2, #31
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	43da      	mvns	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	400a      	ands	r2, r1
 8001ace:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	4618      	mov	r0, r3
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685a      	ldr	r2, [r3, #4]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	4413      	add	r3, r2
 8001ae8:	3b05      	subs	r3, #5
 8001aea:	fa00 f203 	lsl.w	r2, r0, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	430a      	orrs	r2, r1
 8001af4:	635a      	str	r2, [r3, #52]	@ 0x34
 8001af6:	e04c      	b.n	8001b92 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	2b0c      	cmp	r3, #12
 8001afe:	d824      	bhi.n	8001b4a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685a      	ldr	r2, [r3, #4]
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	4413      	add	r3, r2
 8001b10:	3b23      	subs	r3, #35	@ 0x23
 8001b12:	221f      	movs	r2, #31
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	43da      	mvns	r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	400a      	ands	r2, r1
 8001b20:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	4618      	mov	r0, r3
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685a      	ldr	r2, [r3, #4]
 8001b34:	4613      	mov	r3, r2
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	4413      	add	r3, r2
 8001b3a:	3b23      	subs	r3, #35	@ 0x23
 8001b3c:	fa00 f203 	lsl.w	r2, r0, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	430a      	orrs	r2, r1
 8001b46:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b48:	e023      	b.n	8001b92 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685a      	ldr	r2, [r3, #4]
 8001b54:	4613      	mov	r3, r2
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	4413      	add	r3, r2
 8001b5a:	3b41      	subs	r3, #65	@ 0x41
 8001b5c:	221f      	movs	r2, #31
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	43da      	mvns	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	400a      	ands	r2, r1
 8001b6a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	4618      	mov	r0, r3
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685a      	ldr	r2, [r3, #4]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	4413      	add	r3, r2
 8001b84:	3b41      	subs	r3, #65	@ 0x41
 8001b86:	fa00 f203 	lsl.w	r2, r0, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b92:	4b22      	ldr	r3, [pc, #136]	@ (8001c1c <HAL_ADC_ConfigChannel+0x234>)
 8001b94:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a21      	ldr	r2, [pc, #132]	@ (8001c20 <HAL_ADC_ConfigChannel+0x238>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d109      	bne.n	8001bb4 <HAL_ADC_ConfigChannel+0x1cc>
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2b12      	cmp	r3, #18
 8001ba6:	d105      	bne.n	8001bb4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a19      	ldr	r2, [pc, #100]	@ (8001c20 <HAL_ADC_ConfigChannel+0x238>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d123      	bne.n	8001c06 <HAL_ADC_ConfigChannel+0x21e>
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2b10      	cmp	r3, #16
 8001bc4:	d003      	beq.n	8001bce <HAL_ADC_ConfigChannel+0x1e6>
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2b11      	cmp	r3, #17
 8001bcc:	d11b      	bne.n	8001c06 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2b10      	cmp	r3, #16
 8001be0:	d111      	bne.n	8001c06 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001be2:	4b10      	ldr	r3, [pc, #64]	@ (8001c24 <HAL_ADC_ConfigChannel+0x23c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a10      	ldr	r2, [pc, #64]	@ (8001c28 <HAL_ADC_ConfigChannel+0x240>)
 8001be8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bec:	0c9a      	lsrs	r2, r3, #18
 8001bee:	4613      	mov	r3, r2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	4413      	add	r3, r2
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001bf8:	e002      	b.n	8001c00 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	3b01      	subs	r3, #1
 8001bfe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1f9      	bne.n	8001bfa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3714      	adds	r7, #20
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	40012300 	.word	0x40012300
 8001c20:	40012000 	.word	0x40012000
 8001c24:	20000010 	.word	0x20000010
 8001c28:	431bde83 	.word	0x431bde83

08001c2c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c34:	4b79      	ldr	r3, [pc, #484]	@ (8001e1c <ADC_Init+0x1f0>)
 8001c36:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	685a      	ldr	r2, [r3, #4]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	431a      	orrs	r2, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	685a      	ldr	r2, [r3, #4]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	6859      	ldr	r1, [r3, #4]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	691b      	ldr	r3, [r3, #16]
 8001c6c:	021a      	lsls	r2, r3, #8
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	430a      	orrs	r2, r1
 8001c74:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	685a      	ldr	r2, [r3, #4]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001c84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	6859      	ldr	r1, [r3, #4]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689a      	ldr	r2, [r3, #8]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	430a      	orrs	r2, r1
 8001c96:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	689a      	ldr	r2, [r3, #8]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ca6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6899      	ldr	r1, [r3, #8]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	68da      	ldr	r2, [r3, #12]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cbe:	4a58      	ldr	r2, [pc, #352]	@ (8001e20 <ADC_Init+0x1f4>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d022      	beq.n	8001d0a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	689a      	ldr	r2, [r3, #8]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001cd2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	6899      	ldr	r1, [r3, #8]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	689a      	ldr	r2, [r3, #8]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001cf4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	6899      	ldr	r1, [r3, #8]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	430a      	orrs	r2, r1
 8001d06:	609a      	str	r2, [r3, #8]
 8001d08:	e00f      	b.n	8001d2a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	689a      	ldr	r2, [r3, #8]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001d18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	689a      	ldr	r2, [r3, #8]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001d28:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	689a      	ldr	r2, [r3, #8]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f022 0202 	bic.w	r2, r2, #2
 8001d38:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	6899      	ldr	r1, [r3, #8]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	7e1b      	ldrb	r3, [r3, #24]
 8001d44:	005a      	lsls	r2, r3, #1
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d01b      	beq.n	8001d90 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	685a      	ldr	r2, [r3, #4]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d66:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	685a      	ldr	r2, [r3, #4]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001d76:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	6859      	ldr	r1, [r3, #4]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d82:	3b01      	subs	r3, #1
 8001d84:	035a      	lsls	r2, r3, #13
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	e007      	b.n	8001da0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	685a      	ldr	r2, [r3, #4]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d9e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001dae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	69db      	ldr	r3, [r3, #28]
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	051a      	lsls	r2, r3, #20
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	689a      	ldr	r2, [r3, #8]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001dd4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	6899      	ldr	r1, [r3, #8]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001de2:	025a      	lsls	r2, r3, #9
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	430a      	orrs	r2, r1
 8001dea:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	689a      	ldr	r2, [r3, #8]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001dfa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	6899      	ldr	r1, [r3, #8]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	029a      	lsls	r2, r3, #10
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	609a      	str	r2, [r3, #8]
}
 8001e10:	bf00      	nop
 8001e12:	3714      	adds	r7, #20
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	40012300 	.word	0x40012300
 8001e20:	0f000001 	.word	0x0f000001

08001e24 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e30:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e36:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d13c      	bne.n	8001eb8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e42:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d12b      	bne.n	8001eb0 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d127      	bne.n	8001eb0 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e66:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d006      	beq.n	8001e7c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d119      	bne.n	8001eb0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	685a      	ldr	r2, [r3, #4]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f022 0220 	bic.w	r2, r2, #32
 8001e8a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e90:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d105      	bne.n	8001eb0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea8:	f043 0201 	orr.w	r2, r3, #1
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001eb0:	68f8      	ldr	r0, [r7, #12]
 8001eb2:	f7fe fb2d 	bl	8000510 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001eb6:	e00e      	b.n	8001ed6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ebc:	f003 0310 	and.w	r3, r3, #16
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d003      	beq.n	8001ecc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001ec4:	68f8      	ldr	r0, [r7, #12]
 8001ec6:	f7ff fd85 	bl	80019d4 <HAL_ADC_ErrorCallback>
}
 8001eca:	e004      	b.n	8001ed6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	4798      	blx	r3
}
 8001ed6:	bf00      	nop
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b084      	sub	sp, #16
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001eea:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001eec:	68f8      	ldr	r0, [r7, #12]
 8001eee:	f7fe fb01 	bl	80004f4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ef2:	bf00      	nop
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b084      	sub	sp, #16
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f06:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2240      	movs	r2, #64	@ 0x40
 8001f0c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f12:	f043 0204 	orr.w	r2, r3, #4
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001f1a:	68f8      	ldr	r0, [r7, #12]
 8001f1c:	f7ff fd5a 	bl	80019d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f20:	bf00      	nop
 8001f22:	3710      	adds	r7, #16
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f003 0307 	and.w	r3, r3, #7
 8001f36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f38:	4b0c      	ldr	r3, [pc, #48]	@ (8001f6c <__NVIC_SetPriorityGrouping+0x44>)
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f3e:	68ba      	ldr	r2, [r7, #8]
 8001f40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f44:	4013      	ands	r3, r2
 8001f46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f5a:	4a04      	ldr	r2, [pc, #16]	@ (8001f6c <__NVIC_SetPriorityGrouping+0x44>)
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	60d3      	str	r3, [r2, #12]
}
 8001f60:	bf00      	nop
 8001f62:	3714      	adds	r7, #20
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	e000ed00 	.word	0xe000ed00

08001f70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f74:	4b04      	ldr	r3, [pc, #16]	@ (8001f88 <__NVIC_GetPriorityGrouping+0x18>)
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	0a1b      	lsrs	r3, r3, #8
 8001f7a:	f003 0307 	and.w	r3, r3, #7
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	e000ed00 	.word	0xe000ed00

08001f8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	db0b      	blt.n	8001fb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f9e:	79fb      	ldrb	r3, [r7, #7]
 8001fa0:	f003 021f 	and.w	r2, r3, #31
 8001fa4:	4907      	ldr	r1, [pc, #28]	@ (8001fc4 <__NVIC_EnableIRQ+0x38>)
 8001fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001faa:	095b      	lsrs	r3, r3, #5
 8001fac:	2001      	movs	r0, #1
 8001fae:	fa00 f202 	lsl.w	r2, r0, r2
 8001fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fb6:	bf00      	nop
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	e000e100 	.word	0xe000e100

08001fc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	6039      	str	r1, [r7, #0]
 8001fd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	db0a      	blt.n	8001ff2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	b2da      	uxtb	r2, r3
 8001fe0:	490c      	ldr	r1, [pc, #48]	@ (8002014 <__NVIC_SetPriority+0x4c>)
 8001fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe6:	0112      	lsls	r2, r2, #4
 8001fe8:	b2d2      	uxtb	r2, r2
 8001fea:	440b      	add	r3, r1
 8001fec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ff0:	e00a      	b.n	8002008 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	b2da      	uxtb	r2, r3
 8001ff6:	4908      	ldr	r1, [pc, #32]	@ (8002018 <__NVIC_SetPriority+0x50>)
 8001ff8:	79fb      	ldrb	r3, [r7, #7]
 8001ffa:	f003 030f 	and.w	r3, r3, #15
 8001ffe:	3b04      	subs	r3, #4
 8002000:	0112      	lsls	r2, r2, #4
 8002002:	b2d2      	uxtb	r2, r2
 8002004:	440b      	add	r3, r1
 8002006:	761a      	strb	r2, [r3, #24]
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr
 8002014:	e000e100 	.word	0xe000e100
 8002018:	e000ed00 	.word	0xe000ed00

0800201c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800201c:	b480      	push	{r7}
 800201e:	b089      	sub	sp, #36	@ 0x24
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	f1c3 0307 	rsb	r3, r3, #7
 8002036:	2b04      	cmp	r3, #4
 8002038:	bf28      	it	cs
 800203a:	2304      	movcs	r3, #4
 800203c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	3304      	adds	r3, #4
 8002042:	2b06      	cmp	r3, #6
 8002044:	d902      	bls.n	800204c <NVIC_EncodePriority+0x30>
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	3b03      	subs	r3, #3
 800204a:	e000      	b.n	800204e <NVIC_EncodePriority+0x32>
 800204c:	2300      	movs	r3, #0
 800204e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002050:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	43da      	mvns	r2, r3
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	401a      	ands	r2, r3
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002064:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	fa01 f303 	lsl.w	r3, r1, r3
 800206e:	43d9      	mvns	r1, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002074:	4313      	orrs	r3, r2
         );
}
 8002076:	4618      	mov	r0, r3
 8002078:	3724      	adds	r7, #36	@ 0x24
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
	...

08002084 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3b01      	subs	r3, #1
 8002090:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002094:	d301      	bcc.n	800209a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002096:	2301      	movs	r3, #1
 8002098:	e00f      	b.n	80020ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800209a:	4a0a      	ldr	r2, [pc, #40]	@ (80020c4 <SysTick_Config+0x40>)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	3b01      	subs	r3, #1
 80020a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020a2:	210f      	movs	r1, #15
 80020a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80020a8:	f7ff ff8e 	bl	8001fc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020ac:	4b05      	ldr	r3, [pc, #20]	@ (80020c4 <SysTick_Config+0x40>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020b2:	4b04      	ldr	r3, [pc, #16]	@ (80020c4 <SysTick_Config+0x40>)
 80020b4:	2207      	movs	r2, #7
 80020b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	e000e010 	.word	0xe000e010

080020c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f7ff ff29 	bl	8001f28 <__NVIC_SetPriorityGrouping>
}
 80020d6:	bf00      	nop
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020de:	b580      	push	{r7, lr}
 80020e0:	b086      	sub	sp, #24
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	4603      	mov	r3, r0
 80020e6:	60b9      	str	r1, [r7, #8]
 80020e8:	607a      	str	r2, [r7, #4]
 80020ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020ec:	2300      	movs	r3, #0
 80020ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020f0:	f7ff ff3e 	bl	8001f70 <__NVIC_GetPriorityGrouping>
 80020f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	68b9      	ldr	r1, [r7, #8]
 80020fa:	6978      	ldr	r0, [r7, #20]
 80020fc:	f7ff ff8e 	bl	800201c <NVIC_EncodePriority>
 8002100:	4602      	mov	r2, r0
 8002102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002106:	4611      	mov	r1, r2
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff ff5d 	bl	8001fc8 <__NVIC_SetPriority>
}
 800210e:	bf00      	nop
 8002110:	3718      	adds	r7, #24
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b082      	sub	sp, #8
 800211a:	af00      	add	r7, sp, #0
 800211c:	4603      	mov	r3, r0
 800211e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff ff31 	bl	8001f8c <__NVIC_EnableIRQ>
}
 800212a:	bf00      	nop
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b082      	sub	sp, #8
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f7ff ffa2 	bl	8002084 <SysTick_Config>
 8002140:	4603      	mov	r3, r0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
	...

0800214c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002154:	2300      	movs	r3, #0
 8002156:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002158:	f7ff fab4 	bl	80016c4 <HAL_GetTick>
 800215c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d101      	bne.n	8002168 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e099      	b.n	800229c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2202      	movs	r2, #2
 800216c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 0201 	bic.w	r2, r2, #1
 8002186:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002188:	e00f      	b.n	80021aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800218a:	f7ff fa9b 	bl	80016c4 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b05      	cmp	r3, #5
 8002196:	d908      	bls.n	80021aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2220      	movs	r2, #32
 800219c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2203      	movs	r2, #3
 80021a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e078      	b.n	800229c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d1e8      	bne.n	800218a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021c0:	697a      	ldr	r2, [r7, #20]
 80021c2:	4b38      	ldr	r3, [pc, #224]	@ (80022a4 <HAL_DMA_Init+0x158>)
 80021c4:	4013      	ands	r3, r2
 80021c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685a      	ldr	r2, [r3, #4]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	691b      	ldr	r3, [r3, #16]
 80021dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a1b      	ldr	r3, [r3, #32]
 80021f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021f6:	697a      	ldr	r2, [r7, #20]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002200:	2b04      	cmp	r3, #4
 8002202:	d107      	bne.n	8002214 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220c:	4313      	orrs	r3, r2
 800220e:	697a      	ldr	r2, [r7, #20]
 8002210:	4313      	orrs	r3, r2
 8002212:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	697a      	ldr	r2, [r7, #20]
 800221a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	695b      	ldr	r3, [r3, #20]
 8002222:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	f023 0307 	bic.w	r3, r3, #7
 800222a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002230:	697a      	ldr	r2, [r7, #20]
 8002232:	4313      	orrs	r3, r2
 8002234:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800223a:	2b04      	cmp	r3, #4
 800223c:	d117      	bne.n	800226e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002242:	697a      	ldr	r2, [r7, #20]
 8002244:	4313      	orrs	r3, r2
 8002246:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800224c:	2b00      	cmp	r3, #0
 800224e:	d00e      	beq.n	800226e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f000 fa6f 	bl	8002734 <DMA_CheckFifoParam>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d008      	beq.n	800226e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2240      	movs	r2, #64	@ 0x40
 8002260:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2201      	movs	r2, #1
 8002266:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800226a:	2301      	movs	r3, #1
 800226c:	e016      	b.n	800229c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	697a      	ldr	r2, [r7, #20]
 8002274:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f000 fa26 	bl	80026c8 <DMA_CalcBaseAndBitshift>
 800227c:	4603      	mov	r3, r0
 800227e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002284:	223f      	movs	r2, #63	@ 0x3f
 8002286:	409a      	lsls	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2201      	movs	r2, #1
 8002296:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	3718      	adds	r7, #24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	f010803f 	.word	0xf010803f

080022a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
 80022b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022b6:	2300      	movs	r3, #0
 80022b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d101      	bne.n	80022ce <HAL_DMA_Start_IT+0x26>
 80022ca:	2302      	movs	r3, #2
 80022cc:	e040      	b.n	8002350 <HAL_DMA_Start_IT+0xa8>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2201      	movs	r2, #1
 80022d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d12f      	bne.n	8002342 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2202      	movs	r2, #2
 80022e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2200      	movs	r2, #0
 80022ee:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	68b9      	ldr	r1, [r7, #8]
 80022f6:	68f8      	ldr	r0, [r7, #12]
 80022f8:	f000 f9b8 	bl	800266c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002300:	223f      	movs	r2, #63	@ 0x3f
 8002302:	409a      	lsls	r2, r3
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f042 0216 	orr.w	r2, r2, #22
 8002316:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231c:	2b00      	cmp	r3, #0
 800231e:	d007      	beq.n	8002330 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f042 0208 	orr.w	r2, r2, #8
 800232e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f042 0201 	orr.w	r2, r2, #1
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	e005      	b.n	800234e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800234a:	2302      	movs	r3, #2
 800234c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800234e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002350:	4618      	mov	r0, r3
 8002352:	3718      	adds	r7, #24
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b086      	sub	sp, #24
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002360:	2300      	movs	r3, #0
 8002362:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002364:	4b8e      	ldr	r3, [pc, #568]	@ (80025a0 <HAL_DMA_IRQHandler+0x248>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a8e      	ldr	r2, [pc, #568]	@ (80025a4 <HAL_DMA_IRQHandler+0x24c>)
 800236a:	fba2 2303 	umull	r2, r3, r2, r3
 800236e:	0a9b      	lsrs	r3, r3, #10
 8002370:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002376:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002382:	2208      	movs	r2, #8
 8002384:	409a      	lsls	r2, r3
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	4013      	ands	r3, r2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d01a      	beq.n	80023c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	2b00      	cmp	r3, #0
 800239a:	d013      	beq.n	80023c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 0204 	bic.w	r2, r2, #4
 80023aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023b0:	2208      	movs	r2, #8
 80023b2:	409a      	lsls	r2, r3
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023bc:	f043 0201 	orr.w	r2, r3, #1
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023c8:	2201      	movs	r2, #1
 80023ca:	409a      	lsls	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	4013      	ands	r3, r2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d012      	beq.n	80023fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	695b      	ldr	r3, [r3, #20]
 80023da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d00b      	beq.n	80023fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023e6:	2201      	movs	r2, #1
 80023e8:	409a      	lsls	r2, r3
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023f2:	f043 0202 	orr.w	r2, r3, #2
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023fe:	2204      	movs	r2, #4
 8002400:	409a      	lsls	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	4013      	ands	r3, r2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d012      	beq.n	8002430 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d00b      	beq.n	8002430 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800241c:	2204      	movs	r2, #4
 800241e:	409a      	lsls	r2, r3
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002428:	f043 0204 	orr.w	r2, r3, #4
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002434:	2210      	movs	r2, #16
 8002436:	409a      	lsls	r2, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	4013      	ands	r3, r2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d043      	beq.n	80024c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0308 	and.w	r3, r3, #8
 800244a:	2b00      	cmp	r3, #0
 800244c:	d03c      	beq.n	80024c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002452:	2210      	movs	r2, #16
 8002454:	409a      	lsls	r2, r3
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d018      	beq.n	800249a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d108      	bne.n	8002488 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247a:	2b00      	cmp	r3, #0
 800247c:	d024      	beq.n	80024c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	4798      	blx	r3
 8002486:	e01f      	b.n	80024c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800248c:	2b00      	cmp	r3, #0
 800248e:	d01b      	beq.n	80024c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	4798      	blx	r3
 8002498:	e016      	b.n	80024c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d107      	bne.n	80024b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f022 0208 	bic.w	r2, r2, #8
 80024b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d003      	beq.n	80024c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024cc:	2220      	movs	r2, #32
 80024ce:	409a      	lsls	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	4013      	ands	r3, r2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	f000 808f 	beq.w	80025f8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0310 	and.w	r3, r3, #16
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f000 8087 	beq.w	80025f8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ee:	2220      	movs	r2, #32
 80024f0:	409a      	lsls	r2, r3
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b05      	cmp	r3, #5
 8002500:	d136      	bne.n	8002570 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f022 0216 	bic.w	r2, r2, #22
 8002510:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	695a      	ldr	r2, [r3, #20]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002520:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002526:	2b00      	cmp	r3, #0
 8002528:	d103      	bne.n	8002532 <HAL_DMA_IRQHandler+0x1da>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800252e:	2b00      	cmp	r3, #0
 8002530:	d007      	beq.n	8002542 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f022 0208 	bic.w	r2, r2, #8
 8002540:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002546:	223f      	movs	r2, #63	@ 0x3f
 8002548:	409a      	lsls	r2, r3
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2201      	movs	r2, #1
 8002552:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002562:	2b00      	cmp	r3, #0
 8002564:	d07e      	beq.n	8002664 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	4798      	blx	r3
        }
        return;
 800256e:	e079      	b.n	8002664 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d01d      	beq.n	80025ba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d10d      	bne.n	80025a8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002590:	2b00      	cmp	r3, #0
 8002592:	d031      	beq.n	80025f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	4798      	blx	r3
 800259c:	e02c      	b.n	80025f8 <HAL_DMA_IRQHandler+0x2a0>
 800259e:	bf00      	nop
 80025a0:	20000010 	.word	0x20000010
 80025a4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d023      	beq.n	80025f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	4798      	blx	r3
 80025b8:	e01e      	b.n	80025f8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d10f      	bne.n	80025e8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f022 0210 	bic.w	r2, r2, #16
 80025d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d003      	beq.n	80025f8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d032      	beq.n	8002666 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002604:	f003 0301 	and.w	r3, r3, #1
 8002608:	2b00      	cmp	r3, #0
 800260a:	d022      	beq.n	8002652 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2205      	movs	r2, #5
 8002610:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f022 0201 	bic.w	r2, r2, #1
 8002622:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	3301      	adds	r3, #1
 8002628:	60bb      	str	r3, [r7, #8]
 800262a:	697a      	ldr	r2, [r7, #20]
 800262c:	429a      	cmp	r2, r3
 800262e:	d307      	bcc.n	8002640 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1f2      	bne.n	8002624 <HAL_DMA_IRQHandler+0x2cc>
 800263e:	e000      	b.n	8002642 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002640:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002656:	2b00      	cmp	r3, #0
 8002658:	d005      	beq.n	8002666 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	4798      	blx	r3
 8002662:	e000      	b.n	8002666 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002664:	bf00      	nop
    }
  }
}
 8002666:	3718      	adds	r7, #24
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	607a      	str	r2, [r7, #4]
 8002678:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002688:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	683a      	ldr	r2, [r7, #0]
 8002690:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	2b40      	cmp	r3, #64	@ 0x40
 8002698:	d108      	bne.n	80026ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68ba      	ldr	r2, [r7, #8]
 80026a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80026aa:	e007      	b.n	80026bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68ba      	ldr	r2, [r7, #8]
 80026b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	60da      	str	r2, [r3, #12]
}
 80026bc:	bf00      	nop
 80026be:	3714      	adds	r7, #20
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	3b10      	subs	r3, #16
 80026d8:	4a14      	ldr	r2, [pc, #80]	@ (800272c <DMA_CalcBaseAndBitshift+0x64>)
 80026da:	fba2 2303 	umull	r2, r3, r2, r3
 80026de:	091b      	lsrs	r3, r3, #4
 80026e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80026e2:	4a13      	ldr	r2, [pc, #76]	@ (8002730 <DMA_CalcBaseAndBitshift+0x68>)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4413      	add	r3, r2
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	461a      	mov	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2b03      	cmp	r3, #3
 80026f4:	d909      	bls.n	800270a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80026fe:	f023 0303 	bic.w	r3, r3, #3
 8002702:	1d1a      	adds	r2, r3, #4
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	659a      	str	r2, [r3, #88]	@ 0x58
 8002708:	e007      	b.n	800271a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002712:	f023 0303 	bic.w	r3, r3, #3
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800271e:	4618      	mov	r0, r3
 8002720:	3714      	adds	r7, #20
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	aaaaaaab 	.word	0xaaaaaaab
 8002730:	0800b054 	.word	0x0800b054

08002734 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800273c:	2300      	movs	r3, #0
 800273e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002744:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d11f      	bne.n	800278e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	2b03      	cmp	r3, #3
 8002752:	d856      	bhi.n	8002802 <DMA_CheckFifoParam+0xce>
 8002754:	a201      	add	r2, pc, #4	@ (adr r2, 800275c <DMA_CheckFifoParam+0x28>)
 8002756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800275a:	bf00      	nop
 800275c:	0800276d 	.word	0x0800276d
 8002760:	0800277f 	.word	0x0800277f
 8002764:	0800276d 	.word	0x0800276d
 8002768:	08002803 	.word	0x08002803
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002770:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d046      	beq.n	8002806 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800277c:	e043      	b.n	8002806 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002782:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002786:	d140      	bne.n	800280a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800278c:	e03d      	b.n	800280a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002796:	d121      	bne.n	80027dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	2b03      	cmp	r3, #3
 800279c:	d837      	bhi.n	800280e <DMA_CheckFifoParam+0xda>
 800279e:	a201      	add	r2, pc, #4	@ (adr r2, 80027a4 <DMA_CheckFifoParam+0x70>)
 80027a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027a4:	080027b5 	.word	0x080027b5
 80027a8:	080027bb 	.word	0x080027bb
 80027ac:	080027b5 	.word	0x080027b5
 80027b0:	080027cd 	.word	0x080027cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	73fb      	strb	r3, [r7, #15]
      break;
 80027b8:	e030      	b.n	800281c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d025      	beq.n	8002812 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027ca:	e022      	b.n	8002812 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027d0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80027d4:	d11f      	bne.n	8002816 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80027da:	e01c      	b.n	8002816 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d903      	bls.n	80027ea <DMA_CheckFifoParam+0xb6>
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	2b03      	cmp	r3, #3
 80027e6:	d003      	beq.n	80027f0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80027e8:	e018      	b.n	800281c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	73fb      	strb	r3, [r7, #15]
      break;
 80027ee:	e015      	b.n	800281c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d00e      	beq.n	800281a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002800:	e00b      	b.n	800281a <DMA_CheckFifoParam+0xe6>
      break;
 8002802:	bf00      	nop
 8002804:	e00a      	b.n	800281c <DMA_CheckFifoParam+0xe8>
      break;
 8002806:	bf00      	nop
 8002808:	e008      	b.n	800281c <DMA_CheckFifoParam+0xe8>
      break;
 800280a:	bf00      	nop
 800280c:	e006      	b.n	800281c <DMA_CheckFifoParam+0xe8>
      break;
 800280e:	bf00      	nop
 8002810:	e004      	b.n	800281c <DMA_CheckFifoParam+0xe8>
      break;
 8002812:	bf00      	nop
 8002814:	e002      	b.n	800281c <DMA_CheckFifoParam+0xe8>
      break;   
 8002816:	bf00      	nop
 8002818:	e000      	b.n	800281c <DMA_CheckFifoParam+0xe8>
      break;
 800281a:	bf00      	nop
    }
  } 
  
  return status; 
 800281c:	7bfb      	ldrb	r3, [r7, #15]
}
 800281e:	4618      	mov	r0, r3
 8002820:	3714      	adds	r7, #20
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop

0800282c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800282c:	b480      	push	{r7}
 800282e:	b089      	sub	sp, #36	@ 0x24
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002836:	2300      	movs	r3, #0
 8002838:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800283a:	2300      	movs	r3, #0
 800283c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800283e:	2300      	movs	r3, #0
 8002840:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002842:	2300      	movs	r3, #0
 8002844:	61fb      	str	r3, [r7, #28]
 8002846:	e16b      	b.n	8002b20 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002848:	2201      	movs	r2, #1
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	4013      	ands	r3, r2
 800285a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	429a      	cmp	r2, r3
 8002862:	f040 815a 	bne.w	8002b1a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f003 0303 	and.w	r3, r3, #3
 800286e:	2b01      	cmp	r3, #1
 8002870:	d005      	beq.n	800287e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800287a:	2b02      	cmp	r3, #2
 800287c:	d130      	bne.n	80028e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	2203      	movs	r2, #3
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	43db      	mvns	r3, r3
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	4013      	ands	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	68da      	ldr	r2, [r3, #12]
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028b4:	2201      	movs	r2, #1
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	43db      	mvns	r3, r3
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	4013      	ands	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	091b      	lsrs	r3, r3, #4
 80028ca:	f003 0201 	and.w	r2, r3, #1
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f003 0303 	and.w	r3, r3, #3
 80028e8:	2b03      	cmp	r3, #3
 80028ea:	d017      	beq.n	800291c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	2203      	movs	r2, #3
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	43db      	mvns	r3, r3
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	4013      	ands	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	4313      	orrs	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f003 0303 	and.w	r3, r3, #3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d123      	bne.n	8002970 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	08da      	lsrs	r2, r3, #3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	3208      	adds	r2, #8
 8002930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002934:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	f003 0307 	and.w	r3, r3, #7
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	220f      	movs	r2, #15
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	43db      	mvns	r3, r3
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	4013      	ands	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	691a      	ldr	r2, [r3, #16]
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	4313      	orrs	r3, r2
 8002960:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	08da      	lsrs	r2, r3, #3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	3208      	adds	r2, #8
 800296a:	69b9      	ldr	r1, [r7, #24]
 800296c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	2203      	movs	r2, #3
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	43db      	mvns	r3, r3
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	4013      	ands	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f003 0203 	and.w	r2, r3, #3
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	4313      	orrs	r3, r2
 800299c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f000 80b4 	beq.w	8002b1a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029b2:	2300      	movs	r3, #0
 80029b4:	60fb      	str	r3, [r7, #12]
 80029b6:	4b60      	ldr	r3, [pc, #384]	@ (8002b38 <HAL_GPIO_Init+0x30c>)
 80029b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ba:	4a5f      	ldr	r2, [pc, #380]	@ (8002b38 <HAL_GPIO_Init+0x30c>)
 80029bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80029c2:	4b5d      	ldr	r3, [pc, #372]	@ (8002b38 <HAL_GPIO_Init+0x30c>)
 80029c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029ce:	4a5b      	ldr	r2, [pc, #364]	@ (8002b3c <HAL_GPIO_Init+0x310>)
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	089b      	lsrs	r3, r3, #2
 80029d4:	3302      	adds	r3, #2
 80029d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	f003 0303 	and.w	r3, r3, #3
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	220f      	movs	r2, #15
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	43db      	mvns	r3, r3
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	4013      	ands	r3, r2
 80029f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a52      	ldr	r2, [pc, #328]	@ (8002b40 <HAL_GPIO_Init+0x314>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d02b      	beq.n	8002a52 <HAL_GPIO_Init+0x226>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a51      	ldr	r2, [pc, #324]	@ (8002b44 <HAL_GPIO_Init+0x318>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d025      	beq.n	8002a4e <HAL_GPIO_Init+0x222>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a50      	ldr	r2, [pc, #320]	@ (8002b48 <HAL_GPIO_Init+0x31c>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d01f      	beq.n	8002a4a <HAL_GPIO_Init+0x21e>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a4f      	ldr	r2, [pc, #316]	@ (8002b4c <HAL_GPIO_Init+0x320>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d019      	beq.n	8002a46 <HAL_GPIO_Init+0x21a>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a4e      	ldr	r2, [pc, #312]	@ (8002b50 <HAL_GPIO_Init+0x324>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d013      	beq.n	8002a42 <HAL_GPIO_Init+0x216>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a4d      	ldr	r2, [pc, #308]	@ (8002b54 <HAL_GPIO_Init+0x328>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d00d      	beq.n	8002a3e <HAL_GPIO_Init+0x212>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a4c      	ldr	r2, [pc, #304]	@ (8002b58 <HAL_GPIO_Init+0x32c>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d007      	beq.n	8002a3a <HAL_GPIO_Init+0x20e>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a4b      	ldr	r2, [pc, #300]	@ (8002b5c <HAL_GPIO_Init+0x330>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d101      	bne.n	8002a36 <HAL_GPIO_Init+0x20a>
 8002a32:	2307      	movs	r3, #7
 8002a34:	e00e      	b.n	8002a54 <HAL_GPIO_Init+0x228>
 8002a36:	2308      	movs	r3, #8
 8002a38:	e00c      	b.n	8002a54 <HAL_GPIO_Init+0x228>
 8002a3a:	2306      	movs	r3, #6
 8002a3c:	e00a      	b.n	8002a54 <HAL_GPIO_Init+0x228>
 8002a3e:	2305      	movs	r3, #5
 8002a40:	e008      	b.n	8002a54 <HAL_GPIO_Init+0x228>
 8002a42:	2304      	movs	r3, #4
 8002a44:	e006      	b.n	8002a54 <HAL_GPIO_Init+0x228>
 8002a46:	2303      	movs	r3, #3
 8002a48:	e004      	b.n	8002a54 <HAL_GPIO_Init+0x228>
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	e002      	b.n	8002a54 <HAL_GPIO_Init+0x228>
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e000      	b.n	8002a54 <HAL_GPIO_Init+0x228>
 8002a52:	2300      	movs	r3, #0
 8002a54:	69fa      	ldr	r2, [r7, #28]
 8002a56:	f002 0203 	and.w	r2, r2, #3
 8002a5a:	0092      	lsls	r2, r2, #2
 8002a5c:	4093      	lsls	r3, r2
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a64:	4935      	ldr	r1, [pc, #212]	@ (8002b3c <HAL_GPIO_Init+0x310>)
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	089b      	lsrs	r3, r3, #2
 8002a6a:	3302      	adds	r3, #2
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a72:	4b3b      	ldr	r3, [pc, #236]	@ (8002b60 <HAL_GPIO_Init+0x334>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	43db      	mvns	r3, r3
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	4013      	ands	r3, r2
 8002a80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d003      	beq.n	8002a96 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a96:	4a32      	ldr	r2, [pc, #200]	@ (8002b60 <HAL_GPIO_Init+0x334>)
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a9c:	4b30      	ldr	r3, [pc, #192]	@ (8002b60 <HAL_GPIO_Init+0x334>)
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d003      	beq.n	8002ac0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ac0:	4a27      	ldr	r2, [pc, #156]	@ (8002b60 <HAL_GPIO_Init+0x334>)
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ac6:	4b26      	ldr	r3, [pc, #152]	@ (8002b60 <HAL_GPIO_Init+0x334>)
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	43db      	mvns	r3, r3
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d003      	beq.n	8002aea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002aea:	4a1d      	ldr	r2, [pc, #116]	@ (8002b60 <HAL_GPIO_Init+0x334>)
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002af0:	4b1b      	ldr	r3, [pc, #108]	@ (8002b60 <HAL_GPIO_Init+0x334>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	43db      	mvns	r3, r3
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	4013      	ands	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d003      	beq.n	8002b14 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b14:	4a12      	ldr	r2, [pc, #72]	@ (8002b60 <HAL_GPIO_Init+0x334>)
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	61fb      	str	r3, [r7, #28]
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	2b0f      	cmp	r3, #15
 8002b24:	f67f ae90 	bls.w	8002848 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b28:	bf00      	nop
 8002b2a:	bf00      	nop
 8002b2c:	3724      	adds	r7, #36	@ 0x24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	40023800 	.word	0x40023800
 8002b3c:	40013800 	.word	0x40013800
 8002b40:	40020000 	.word	0x40020000
 8002b44:	40020400 	.word	0x40020400
 8002b48:	40020800 	.word	0x40020800
 8002b4c:	40020c00 	.word	0x40020c00
 8002b50:	40021000 	.word	0x40021000
 8002b54:	40021400 	.word	0x40021400
 8002b58:	40021800 	.word	0x40021800
 8002b5c:	40021c00 	.word	0x40021c00
 8002b60:	40013c00 	.word	0x40013c00

08002b64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	807b      	strh	r3, [r7, #2]
 8002b70:	4613      	mov	r3, r2
 8002b72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b74:	787b      	ldrb	r3, [r7, #1]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d003      	beq.n	8002b82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b7a:	887a      	ldrh	r2, [r7, #2]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b80:	e003      	b.n	8002b8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b82:	887b      	ldrh	r3, [r7, #2]
 8002b84:	041a      	lsls	r2, r3, #16
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	619a      	str	r2, [r3, #24]
}
 8002b8a:	bf00      	nop
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr

08002b96 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b086      	sub	sp, #24
 8002b9a:	af02      	add	r7, sp, #8
 8002b9c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d101      	bne.n	8002ba8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e059      	b.n	8002c5c <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d106      	bne.n	8002bc8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f007 fe34 	bl	800a830 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2203      	movs	r2, #3
 8002bcc:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002bd6:	d102      	bne.n	8002bde <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f004 fc41 	bl	800746a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6818      	ldr	r0, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	7c1a      	ldrb	r2, [r3, #16]
 8002bf0:	f88d 2000 	strb.w	r2, [sp]
 8002bf4:	3304      	adds	r3, #4
 8002bf6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bf8:	f004 fbc2 	bl	8007380 <USB_CoreInit>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d005      	beq.n	8002c0e <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2202      	movs	r2, #2
 8002c06:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e026      	b.n	8002c5c <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2101      	movs	r1, #1
 8002c14:	4618      	mov	r0, r3
 8002c16:	f004 fc39 	bl	800748c <USB_SetCurrentMode>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d005      	beq.n	8002c2c <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2202      	movs	r2, #2
 8002c24:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e017      	b.n	8002c5c <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6818      	ldr	r0, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	7c1a      	ldrb	r2, [r3, #16]
 8002c34:	f88d 2000 	strb.w	r2, [sp]
 8002c38:	3304      	adds	r3, #4
 8002c3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c3c:	f004 fde2 	bl	8007804 <USB_HostInit>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d005      	beq.n	8002c52 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2202      	movs	r2, #2
 8002c4a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e004      	b.n	8002c5c <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3710      	adds	r7, #16
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002c64:	b590      	push	{r4, r7, lr}
 8002c66:	b08b      	sub	sp, #44	@ 0x2c
 8002c68:	af04      	add	r7, sp, #16
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	4608      	mov	r0, r1
 8002c6e:	4611      	mov	r1, r2
 8002c70:	461a      	mov	r2, r3
 8002c72:	4603      	mov	r3, r0
 8002c74:	70fb      	strb	r3, [r7, #3]
 8002c76:	460b      	mov	r3, r1
 8002c78:	70bb      	strb	r3, [r7, #2]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8002c7e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002c80:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d101      	bne.n	8002c90 <HAL_HCD_HC_Init+0x2c>
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	e09d      	b.n	8002dcc <HAL_HCD_HC_Init+0x168>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002c98:	78fa      	ldrb	r2, [r7, #3]
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	011b      	lsls	r3, r3, #4
 8002ca0:	1a9b      	subs	r3, r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	440b      	add	r3, r1
 8002ca6:	3319      	adds	r3, #25
 8002ca8:	2200      	movs	r2, #0
 8002caa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002cac:	78fa      	ldrb	r2, [r7, #3]
 8002cae:	6879      	ldr	r1, [r7, #4]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	011b      	lsls	r3, r3, #4
 8002cb4:	1a9b      	subs	r3, r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	440b      	add	r3, r1
 8002cba:	3314      	adds	r3, #20
 8002cbc:	787a      	ldrb	r2, [r7, #1]
 8002cbe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002cc0:	78fa      	ldrb	r2, [r7, #3]
 8002cc2:	6879      	ldr	r1, [r7, #4]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	011b      	lsls	r3, r3, #4
 8002cc8:	1a9b      	subs	r3, r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	440b      	add	r3, r1
 8002cce:	3315      	adds	r3, #21
 8002cd0:	78fa      	ldrb	r2, [r7, #3]
 8002cd2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002cd4:	78fa      	ldrb	r2, [r7, #3]
 8002cd6:	6879      	ldr	r1, [r7, #4]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	011b      	lsls	r3, r3, #4
 8002cdc:	1a9b      	subs	r3, r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	440b      	add	r3, r1
 8002ce2:	3326      	adds	r3, #38	@ 0x26
 8002ce4:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8002ce8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002cea:	78fa      	ldrb	r2, [r7, #3]
 8002cec:	78bb      	ldrb	r3, [r7, #2]
 8002cee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002cf2:	b2d8      	uxtb	r0, r3
 8002cf4:	6879      	ldr	r1, [r7, #4]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	011b      	lsls	r3, r3, #4
 8002cfa:	1a9b      	subs	r3, r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	440b      	add	r3, r1
 8002d00:	3316      	adds	r3, #22
 8002d02:	4602      	mov	r2, r0
 8002d04:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8002d06:	78fb      	ldrb	r3, [r7, #3]
 8002d08:	4619      	mov	r1, r3
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 fbc8 	bl	80034a0 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8002d10:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	da0a      	bge.n	8002d2e <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002d18:	78fa      	ldrb	r2, [r7, #3]
 8002d1a:	6879      	ldr	r1, [r7, #4]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	011b      	lsls	r3, r3, #4
 8002d20:	1a9b      	subs	r3, r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	440b      	add	r3, r1
 8002d26:	3317      	adds	r3, #23
 8002d28:	2201      	movs	r2, #1
 8002d2a:	701a      	strb	r2, [r3, #0]
 8002d2c:	e009      	b.n	8002d42 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002d2e:	78fa      	ldrb	r2, [r7, #3]
 8002d30:	6879      	ldr	r1, [r7, #4]
 8002d32:	4613      	mov	r3, r2
 8002d34:	011b      	lsls	r3, r3, #4
 8002d36:	1a9b      	subs	r3, r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	440b      	add	r3, r1
 8002d3c:	3317      	adds	r3, #23
 8002d3e:	2200      	movs	r2, #0
 8002d40:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f004 fec0 	bl	8007acc <USB_GetHostSpeed>
 8002d4c:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8002d4e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d10b      	bne.n	8002d6e <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8002d56:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d107      	bne.n	8002d6e <HAL_HCD_HC_Init+0x10a>
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d104      	bne.n	8002d6e <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	2bbc      	cmp	r3, #188	@ 0xbc
 8002d68:	d901      	bls.n	8002d6e <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8002d6a:	23bc      	movs	r3, #188	@ 0xbc
 8002d6c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8002d6e:	78fa      	ldrb	r2, [r7, #3]
 8002d70:	6879      	ldr	r1, [r7, #4]
 8002d72:	4613      	mov	r3, r2
 8002d74:	011b      	lsls	r3, r3, #4
 8002d76:	1a9b      	subs	r3, r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	440b      	add	r3, r1
 8002d7c:	3318      	adds	r3, #24
 8002d7e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002d82:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002d84:	78fa      	ldrb	r2, [r7, #3]
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	b298      	uxth	r0, r3
 8002d8a:	6879      	ldr	r1, [r7, #4]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	011b      	lsls	r3, r3, #4
 8002d90:	1a9b      	subs	r3, r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	440b      	add	r3, r1
 8002d96:	3328      	adds	r3, #40	@ 0x28
 8002d98:	4602      	mov	r2, r0
 8002d9a:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6818      	ldr	r0, [r3, #0]
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	787c      	ldrb	r4, [r7, #1]
 8002da6:	78ba      	ldrb	r2, [r7, #2]
 8002da8:	78f9      	ldrb	r1, [r7, #3]
 8002daa:	9302      	str	r3, [sp, #8]
 8002dac:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002db0:	9301      	str	r3, [sp, #4]
 8002db2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002db6:	9300      	str	r3, [sp, #0]
 8002db8:	4623      	mov	r3, r4
 8002dba:	f004 feaf 	bl	8007b1c <USB_HC_Init>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	371c      	adds	r7, #28
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd90      	pop	{r4, r7, pc}

08002dd4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	460b      	mov	r3, r1
 8002dde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002de0:	2300      	movs	r3, #0
 8002de2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d101      	bne.n	8002df2 <HAL_HCD_HC_Halt+0x1e>
 8002dee:	2302      	movs	r3, #2
 8002df0:	e00f      	b.n	8002e12 <HAL_HCD_HC_Halt+0x3e>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2201      	movs	r2, #1
 8002df6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	78fa      	ldrb	r2, [r7, #3]
 8002e00:	4611      	mov	r1, r2
 8002e02:	4618      	mov	r0, r3
 8002e04:	f005 fa41 	bl	800828a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
	...

08002e1c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	4608      	mov	r0, r1
 8002e26:	4611      	mov	r1, r2
 8002e28:	461a      	mov	r2, r3
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	70fb      	strb	r3, [r7, #3]
 8002e2e:	460b      	mov	r3, r1
 8002e30:	70bb      	strb	r3, [r7, #2]
 8002e32:	4613      	mov	r3, r2
 8002e34:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002e36:	78fa      	ldrb	r2, [r7, #3]
 8002e38:	6879      	ldr	r1, [r7, #4]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	011b      	lsls	r3, r3, #4
 8002e3e:	1a9b      	subs	r3, r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	440b      	add	r3, r1
 8002e44:	3317      	adds	r3, #23
 8002e46:	78ba      	ldrb	r2, [r7, #2]
 8002e48:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002e4a:	78fa      	ldrb	r2, [r7, #3]
 8002e4c:	6879      	ldr	r1, [r7, #4]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	011b      	lsls	r3, r3, #4
 8002e52:	1a9b      	subs	r3, r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	440b      	add	r3, r1
 8002e58:	3326      	adds	r3, #38	@ 0x26
 8002e5a:	787a      	ldrb	r2, [r7, #1]
 8002e5c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002e5e:	7c3b      	ldrb	r3, [r7, #16]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d114      	bne.n	8002e8e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002e64:	78fa      	ldrb	r2, [r7, #3]
 8002e66:	6879      	ldr	r1, [r7, #4]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	011b      	lsls	r3, r3, #4
 8002e6c:	1a9b      	subs	r3, r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	440b      	add	r3, r1
 8002e72:	332a      	adds	r3, #42	@ 0x2a
 8002e74:	2203      	movs	r2, #3
 8002e76:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002e78:	78fa      	ldrb	r2, [r7, #3]
 8002e7a:	6879      	ldr	r1, [r7, #4]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	011b      	lsls	r3, r3, #4
 8002e80:	1a9b      	subs	r3, r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	440b      	add	r3, r1
 8002e86:	3319      	adds	r3, #25
 8002e88:	7f3a      	ldrb	r2, [r7, #28]
 8002e8a:	701a      	strb	r2, [r3, #0]
 8002e8c:	e009      	b.n	8002ea2 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002e8e:	78fa      	ldrb	r2, [r7, #3]
 8002e90:	6879      	ldr	r1, [r7, #4]
 8002e92:	4613      	mov	r3, r2
 8002e94:	011b      	lsls	r3, r3, #4
 8002e96:	1a9b      	subs	r3, r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	440b      	add	r3, r1
 8002e9c:	332a      	adds	r3, #42	@ 0x2a
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002ea2:	787b      	ldrb	r3, [r7, #1]
 8002ea4:	2b03      	cmp	r3, #3
 8002ea6:	f200 8102 	bhi.w	80030ae <HAL_HCD_HC_SubmitRequest+0x292>
 8002eaa:	a201      	add	r2, pc, #4	@ (adr r2, 8002eb0 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb0:	08002ec1 	.word	0x08002ec1
 8002eb4:	08003099 	.word	0x08003099
 8002eb8:	08002f85 	.word	0x08002f85
 8002ebc:	0800300f 	.word	0x0800300f
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002ec0:	7c3b      	ldrb	r3, [r7, #16]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	f040 80f5 	bne.w	80030b2 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002ec8:	78bb      	ldrb	r3, [r7, #2]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d12d      	bne.n	8002f2a <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8002ece:	8b3b      	ldrh	r3, [r7, #24]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d109      	bne.n	8002ee8 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002ed4:	78fa      	ldrb	r2, [r7, #3]
 8002ed6:	6879      	ldr	r1, [r7, #4]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	011b      	lsls	r3, r3, #4
 8002edc:	1a9b      	subs	r3, r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	440b      	add	r3, r1
 8002ee2:	333d      	adds	r3, #61	@ 0x3d
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8002ee8:	78fa      	ldrb	r2, [r7, #3]
 8002eea:	6879      	ldr	r1, [r7, #4]
 8002eec:	4613      	mov	r3, r2
 8002eee:	011b      	lsls	r3, r3, #4
 8002ef0:	1a9b      	subs	r3, r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	440b      	add	r3, r1
 8002ef6:	333d      	adds	r3, #61	@ 0x3d
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d10a      	bne.n	8002f14 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002efe:	78fa      	ldrb	r2, [r7, #3]
 8002f00:	6879      	ldr	r1, [r7, #4]
 8002f02:	4613      	mov	r3, r2
 8002f04:	011b      	lsls	r3, r3, #4
 8002f06:	1a9b      	subs	r3, r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	440b      	add	r3, r1
 8002f0c:	332a      	adds	r3, #42	@ 0x2a
 8002f0e:	2200      	movs	r2, #0
 8002f10:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8002f12:	e0ce      	b.n	80030b2 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f14:	78fa      	ldrb	r2, [r7, #3]
 8002f16:	6879      	ldr	r1, [r7, #4]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	011b      	lsls	r3, r3, #4
 8002f1c:	1a9b      	subs	r3, r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	440b      	add	r3, r1
 8002f22:	332a      	adds	r3, #42	@ 0x2a
 8002f24:	2202      	movs	r2, #2
 8002f26:	701a      	strb	r2, [r3, #0]
      break;
 8002f28:	e0c3      	b.n	80030b2 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8002f2a:	78fa      	ldrb	r2, [r7, #3]
 8002f2c:	6879      	ldr	r1, [r7, #4]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	011b      	lsls	r3, r3, #4
 8002f32:	1a9b      	subs	r3, r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	440b      	add	r3, r1
 8002f38:	331a      	adds	r3, #26
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	f040 80b8 	bne.w	80030b2 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8002f42:	78fa      	ldrb	r2, [r7, #3]
 8002f44:	6879      	ldr	r1, [r7, #4]
 8002f46:	4613      	mov	r3, r2
 8002f48:	011b      	lsls	r3, r3, #4
 8002f4a:	1a9b      	subs	r3, r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	440b      	add	r3, r1
 8002f50:	333c      	adds	r3, #60	@ 0x3c
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d10a      	bne.n	8002f6e <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002f58:	78fa      	ldrb	r2, [r7, #3]
 8002f5a:	6879      	ldr	r1, [r7, #4]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	011b      	lsls	r3, r3, #4
 8002f60:	1a9b      	subs	r3, r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	440b      	add	r3, r1
 8002f66:	332a      	adds	r3, #42	@ 0x2a
 8002f68:	2200      	movs	r2, #0
 8002f6a:	701a      	strb	r2, [r3, #0]
      break;
 8002f6c:	e0a1      	b.n	80030b2 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f6e:	78fa      	ldrb	r2, [r7, #3]
 8002f70:	6879      	ldr	r1, [r7, #4]
 8002f72:	4613      	mov	r3, r2
 8002f74:	011b      	lsls	r3, r3, #4
 8002f76:	1a9b      	subs	r3, r3, r2
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	440b      	add	r3, r1
 8002f7c:	332a      	adds	r3, #42	@ 0x2a
 8002f7e:	2202      	movs	r2, #2
 8002f80:	701a      	strb	r2, [r3, #0]
      break;
 8002f82:	e096      	b.n	80030b2 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002f84:	78bb      	ldrb	r3, [r7, #2]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d120      	bne.n	8002fcc <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002f8a:	78fa      	ldrb	r2, [r7, #3]
 8002f8c:	6879      	ldr	r1, [r7, #4]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	011b      	lsls	r3, r3, #4
 8002f92:	1a9b      	subs	r3, r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	440b      	add	r3, r1
 8002f98:	333d      	adds	r3, #61	@ 0x3d
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d10a      	bne.n	8002fb6 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002fa0:	78fa      	ldrb	r2, [r7, #3]
 8002fa2:	6879      	ldr	r1, [r7, #4]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	011b      	lsls	r3, r3, #4
 8002fa8:	1a9b      	subs	r3, r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	440b      	add	r3, r1
 8002fae:	332a      	adds	r3, #42	@ 0x2a
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002fb4:	e07e      	b.n	80030b4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002fb6:	78fa      	ldrb	r2, [r7, #3]
 8002fb8:	6879      	ldr	r1, [r7, #4]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	011b      	lsls	r3, r3, #4
 8002fbe:	1a9b      	subs	r3, r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	440b      	add	r3, r1
 8002fc4:	332a      	adds	r3, #42	@ 0x2a
 8002fc6:	2202      	movs	r2, #2
 8002fc8:	701a      	strb	r2, [r3, #0]
      break;
 8002fca:	e073      	b.n	80030b4 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002fcc:	78fa      	ldrb	r2, [r7, #3]
 8002fce:	6879      	ldr	r1, [r7, #4]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	011b      	lsls	r3, r3, #4
 8002fd4:	1a9b      	subs	r3, r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	440b      	add	r3, r1
 8002fda:	333c      	adds	r3, #60	@ 0x3c
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10a      	bne.n	8002ff8 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002fe2:	78fa      	ldrb	r2, [r7, #3]
 8002fe4:	6879      	ldr	r1, [r7, #4]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	011b      	lsls	r3, r3, #4
 8002fea:	1a9b      	subs	r3, r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	440b      	add	r3, r1
 8002ff0:	332a      	adds	r3, #42	@ 0x2a
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	701a      	strb	r2, [r3, #0]
      break;
 8002ff6:	e05d      	b.n	80030b4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002ff8:	78fa      	ldrb	r2, [r7, #3]
 8002ffa:	6879      	ldr	r1, [r7, #4]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	011b      	lsls	r3, r3, #4
 8003000:	1a9b      	subs	r3, r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	440b      	add	r3, r1
 8003006:	332a      	adds	r3, #42	@ 0x2a
 8003008:	2202      	movs	r2, #2
 800300a:	701a      	strb	r2, [r3, #0]
      break;
 800300c:	e052      	b.n	80030b4 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800300e:	78bb      	ldrb	r3, [r7, #2]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d120      	bne.n	8003056 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003014:	78fa      	ldrb	r2, [r7, #3]
 8003016:	6879      	ldr	r1, [r7, #4]
 8003018:	4613      	mov	r3, r2
 800301a:	011b      	lsls	r3, r3, #4
 800301c:	1a9b      	subs	r3, r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	440b      	add	r3, r1
 8003022:	333d      	adds	r3, #61	@ 0x3d
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d10a      	bne.n	8003040 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800302a:	78fa      	ldrb	r2, [r7, #3]
 800302c:	6879      	ldr	r1, [r7, #4]
 800302e:	4613      	mov	r3, r2
 8003030:	011b      	lsls	r3, r3, #4
 8003032:	1a9b      	subs	r3, r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	440b      	add	r3, r1
 8003038:	332a      	adds	r3, #42	@ 0x2a
 800303a:	2200      	movs	r2, #0
 800303c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800303e:	e039      	b.n	80030b4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003040:	78fa      	ldrb	r2, [r7, #3]
 8003042:	6879      	ldr	r1, [r7, #4]
 8003044:	4613      	mov	r3, r2
 8003046:	011b      	lsls	r3, r3, #4
 8003048:	1a9b      	subs	r3, r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	440b      	add	r3, r1
 800304e:	332a      	adds	r3, #42	@ 0x2a
 8003050:	2202      	movs	r2, #2
 8003052:	701a      	strb	r2, [r3, #0]
      break;
 8003054:	e02e      	b.n	80030b4 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003056:	78fa      	ldrb	r2, [r7, #3]
 8003058:	6879      	ldr	r1, [r7, #4]
 800305a:	4613      	mov	r3, r2
 800305c:	011b      	lsls	r3, r3, #4
 800305e:	1a9b      	subs	r3, r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	440b      	add	r3, r1
 8003064:	333c      	adds	r3, #60	@ 0x3c
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d10a      	bne.n	8003082 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800306c:	78fa      	ldrb	r2, [r7, #3]
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	4613      	mov	r3, r2
 8003072:	011b      	lsls	r3, r3, #4
 8003074:	1a9b      	subs	r3, r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	440b      	add	r3, r1
 800307a:	332a      	adds	r3, #42	@ 0x2a
 800307c:	2200      	movs	r2, #0
 800307e:	701a      	strb	r2, [r3, #0]
      break;
 8003080:	e018      	b.n	80030b4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003082:	78fa      	ldrb	r2, [r7, #3]
 8003084:	6879      	ldr	r1, [r7, #4]
 8003086:	4613      	mov	r3, r2
 8003088:	011b      	lsls	r3, r3, #4
 800308a:	1a9b      	subs	r3, r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	440b      	add	r3, r1
 8003090:	332a      	adds	r3, #42	@ 0x2a
 8003092:	2202      	movs	r2, #2
 8003094:	701a      	strb	r2, [r3, #0]
      break;
 8003096:	e00d      	b.n	80030b4 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003098:	78fa      	ldrb	r2, [r7, #3]
 800309a:	6879      	ldr	r1, [r7, #4]
 800309c:	4613      	mov	r3, r2
 800309e:	011b      	lsls	r3, r3, #4
 80030a0:	1a9b      	subs	r3, r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	440b      	add	r3, r1
 80030a6:	332a      	adds	r3, #42	@ 0x2a
 80030a8:	2200      	movs	r2, #0
 80030aa:	701a      	strb	r2, [r3, #0]
      break;
 80030ac:	e002      	b.n	80030b4 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80030ae:	bf00      	nop
 80030b0:	e000      	b.n	80030b4 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80030b2:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80030b4:	78fa      	ldrb	r2, [r7, #3]
 80030b6:	6879      	ldr	r1, [r7, #4]
 80030b8:	4613      	mov	r3, r2
 80030ba:	011b      	lsls	r3, r3, #4
 80030bc:	1a9b      	subs	r3, r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	440b      	add	r3, r1
 80030c2:	332c      	adds	r3, #44	@ 0x2c
 80030c4:	697a      	ldr	r2, [r7, #20]
 80030c6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80030c8:	78fa      	ldrb	r2, [r7, #3]
 80030ca:	8b39      	ldrh	r1, [r7, #24]
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	4613      	mov	r3, r2
 80030d0:	011b      	lsls	r3, r3, #4
 80030d2:	1a9b      	subs	r3, r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	4403      	add	r3, r0
 80030d8:	3334      	adds	r3, #52	@ 0x34
 80030da:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80030dc:	78fa      	ldrb	r2, [r7, #3]
 80030de:	6879      	ldr	r1, [r7, #4]
 80030e0:	4613      	mov	r3, r2
 80030e2:	011b      	lsls	r3, r3, #4
 80030e4:	1a9b      	subs	r3, r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	440b      	add	r3, r1
 80030ea:	334c      	adds	r3, #76	@ 0x4c
 80030ec:	2200      	movs	r2, #0
 80030ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80030f0:	78fa      	ldrb	r2, [r7, #3]
 80030f2:	6879      	ldr	r1, [r7, #4]
 80030f4:	4613      	mov	r3, r2
 80030f6:	011b      	lsls	r3, r3, #4
 80030f8:	1a9b      	subs	r3, r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	440b      	add	r3, r1
 80030fe:	3338      	adds	r3, #56	@ 0x38
 8003100:	2200      	movs	r2, #0
 8003102:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003104:	78fa      	ldrb	r2, [r7, #3]
 8003106:	6879      	ldr	r1, [r7, #4]
 8003108:	4613      	mov	r3, r2
 800310a:	011b      	lsls	r3, r3, #4
 800310c:	1a9b      	subs	r3, r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	440b      	add	r3, r1
 8003112:	3315      	adds	r3, #21
 8003114:	78fa      	ldrb	r2, [r7, #3]
 8003116:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003118:	78fa      	ldrb	r2, [r7, #3]
 800311a:	6879      	ldr	r1, [r7, #4]
 800311c:	4613      	mov	r3, r2
 800311e:	011b      	lsls	r3, r3, #4
 8003120:	1a9b      	subs	r3, r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	440b      	add	r3, r1
 8003126:	334d      	adds	r3, #77	@ 0x4d
 8003128:	2200      	movs	r2, #0
 800312a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6818      	ldr	r0, [r3, #0]
 8003130:	78fa      	ldrb	r2, [r7, #3]
 8003132:	4613      	mov	r3, r2
 8003134:	011b      	lsls	r3, r3, #4
 8003136:	1a9b      	subs	r3, r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	3310      	adds	r3, #16
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	4413      	add	r3, r2
 8003140:	1d19      	adds	r1, r3, #4
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	799b      	ldrb	r3, [r3, #6]
 8003146:	461a      	mov	r2, r3
 8003148:	f004 fe14 	bl	8007d74 <USB_HC_StartXfer>
 800314c:	4603      	mov	r3, r0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3708      	adds	r7, #8
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop

08003158 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4618      	mov	r0, r3
 8003170:	f004 fb02 	bl	8007778 <USB_GetMode>
 8003174:	4603      	mov	r3, r0
 8003176:	2b01      	cmp	r3, #1
 8003178:	f040 80fb 	bne.w	8003372 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4618      	mov	r0, r3
 8003182:	f004 fac5 	bl	8007710 <USB_ReadInterrupts>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	f000 80f1 	beq.w	8003370 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4618      	mov	r0, r3
 8003194:	f004 fabc 	bl	8007710 <USB_ReadInterrupts>
 8003198:	4603      	mov	r3, r0
 800319a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800319e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80031a2:	d104      	bne.n	80031ae <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80031ac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f004 faac 	bl	8007710 <USB_ReadInterrupts>
 80031b8:	4603      	mov	r3, r0
 80031ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80031c2:	d104      	bne.n	80031ce <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80031cc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f004 fa9c 	bl	8007710 <USB_ReadInterrupts>
 80031d8:	4603      	mov	r3, r0
 80031da:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80031de:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80031e2:	d104      	bne.n	80031ee <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80031ec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f004 fa8c 	bl	8007710 <USB_ReadInterrupts>
 80031f8:	4603      	mov	r3, r0
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d103      	bne.n	800320a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2202      	movs	r2, #2
 8003208:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f004 fa7e 	bl	8007710 <USB_ReadInterrupts>
 8003214:	4603      	mov	r3, r0
 8003216:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800321a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800321e:	d120      	bne.n	8003262 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003228:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	2b00      	cmp	r3, #0
 8003238:	d113      	bne.n	8003262 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800323a:	2110      	movs	r1, #16
 800323c:	6938      	ldr	r0, [r7, #16]
 800323e:	f004 f971 	bl	8007524 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003242:	6938      	ldr	r0, [r7, #16]
 8003244:	f004 f9a0 	bl	8007588 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	7a5b      	ldrb	r3, [r3, #9]
 800324c:	2b02      	cmp	r3, #2
 800324e:	d105      	bne.n	800325c <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2101      	movs	r1, #1
 8003256:	4618      	mov	r0, r3
 8003258:	f004 fb98 	bl	800798c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f007 fb65 	bl	800a92c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4618      	mov	r0, r3
 8003268:	f004 fa52 	bl	8007710 <USB_ReadInterrupts>
 800326c:	4603      	mov	r3, r0
 800326e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003272:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003276:	d102      	bne.n	800327e <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f001 fd4d 	bl	8004d18 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4618      	mov	r0, r3
 8003284:	f004 fa44 	bl	8007710 <USB_ReadInterrupts>
 8003288:	4603      	mov	r3, r0
 800328a:	f003 0308 	and.w	r3, r3, #8
 800328e:	2b08      	cmp	r3, #8
 8003290:	d106      	bne.n	80032a0 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f007 fb2e 	bl	800a8f4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2208      	movs	r2, #8
 800329e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f004 fa33 	bl	8007710 <USB_ReadInterrupts>
 80032aa:	4603      	mov	r3, r0
 80032ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80032b4:	d139      	bne.n	800332a <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f004 ffd4 	bl	8008268 <USB_HC_ReadInterrupt>
 80032c0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80032c2:	2300      	movs	r3, #0
 80032c4:	617b      	str	r3, [r7, #20]
 80032c6:	e025      	b.n	8003314 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	f003 030f 	and.w	r3, r3, #15
 80032ce:	68ba      	ldr	r2, [r7, #8]
 80032d0:	fa22 f303 	lsr.w	r3, r2, r3
 80032d4:	f003 0301 	and.w	r3, r3, #1
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d018      	beq.n	800330e <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	015a      	lsls	r2, r3, #5
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	4413      	add	r3, r2
 80032e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032f2:	d106      	bne.n	8003302 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	4619      	mov	r1, r3
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 f905 	bl	800350a <HCD_HC_IN_IRQHandler>
 8003300:	e005      	b.n	800330e <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	b2db      	uxtb	r3, r3
 8003306:	4619      	mov	r1, r3
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f000 ff67 	bl	80041dc <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	3301      	adds	r3, #1
 8003312:	617b      	str	r3, [r7, #20]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	795b      	ldrb	r3, [r3, #5]
 8003318:	461a      	mov	r2, r3
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	4293      	cmp	r3, r2
 800331e:	d3d3      	bcc.n	80032c8 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003328:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4618      	mov	r0, r3
 8003330:	f004 f9ee 	bl	8007710 <USB_ReadInterrupts>
 8003334:	4603      	mov	r3, r0
 8003336:	f003 0310 	and.w	r3, r3, #16
 800333a:	2b10      	cmp	r3, #16
 800333c:	d101      	bne.n	8003342 <HAL_HCD_IRQHandler+0x1ea>
 800333e:	2301      	movs	r3, #1
 8003340:	e000      	b.n	8003344 <HAL_HCD_IRQHandler+0x1ec>
 8003342:	2300      	movs	r3, #0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d014      	beq.n	8003372 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	699a      	ldr	r2, [r3, #24]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f022 0210 	bic.w	r2, r2, #16
 8003356:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f001 fbfe 	bl	8004b5a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	699a      	ldr	r2, [r3, #24]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f042 0210 	orr.w	r2, r2, #16
 800336c:	619a      	str	r2, [r3, #24]
 800336e:	e000      	b.n	8003372 <HAL_HCD_IRQHandler+0x21a>
      return;
 8003370:	bf00      	nop
    }
  }
}
 8003372:	3718      	adds	r7, #24
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003386:	2b01      	cmp	r3, #1
 8003388:	d101      	bne.n	800338e <HAL_HCD_Start+0x16>
 800338a:	2302      	movs	r3, #2
 800338c:	e013      	b.n	80033b6 <HAL_HCD_Start+0x3e>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2201      	movs	r2, #1
 8003392:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2101      	movs	r1, #1
 800339c:	4618      	mov	r0, r3
 800339e:	f004 fb5c 	bl	8007a5a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f004 f84e 	bl	8007448 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3708      	adds	r7, #8
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80033be:	b580      	push	{r7, lr}
 80033c0:	b082      	sub	sp, #8
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d101      	bne.n	80033d4 <HAL_HCD_Stop+0x16>
 80033d0:	2302      	movs	r3, #2
 80033d2:	e00d      	b.n	80033f0 <HAL_HCD_Stop+0x32>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f005 f8af 	bl	8008544 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3708      	adds	r7, #8
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4618      	mov	r0, r3
 8003406:	f004 fafe 	bl	8007a06 <USB_ResetPort>
 800340a:	4603      	mov	r3, r0
}
 800340c:	4618      	mov	r0, r3
 800340e:	3708      	adds	r7, #8
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	460b      	mov	r3, r1
 800341e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003420:	78fa      	ldrb	r2, [r7, #3]
 8003422:	6879      	ldr	r1, [r7, #4]
 8003424:	4613      	mov	r3, r2
 8003426:	011b      	lsls	r3, r3, #4
 8003428:	1a9b      	subs	r3, r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	440b      	add	r3, r1
 800342e:	334c      	adds	r3, #76	@ 0x4c
 8003430:	781b      	ldrb	r3, [r3, #0]
}
 8003432:	4618      	mov	r0, r3
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr

0800343e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800343e:	b480      	push	{r7}
 8003440:	b083      	sub	sp, #12
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
 8003446:	460b      	mov	r3, r1
 8003448:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800344a:	78fa      	ldrb	r2, [r7, #3]
 800344c:	6879      	ldr	r1, [r7, #4]
 800344e:	4613      	mov	r3, r2
 8003450:	011b      	lsls	r3, r3, #4
 8003452:	1a9b      	subs	r3, r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	440b      	add	r3, r1
 8003458:	3338      	adds	r3, #56	@ 0x38
 800345a:	681b      	ldr	r3, [r3, #0]
}
 800345c:	4618      	mov	r0, r3
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4618      	mov	r0, r3
 8003476:	f004 fb40 	bl	8007afa <USB_GetCurrentFrame>
 800347a:	4603      	mov	r3, r0
}
 800347c:	4618      	mov	r0, r3
 800347e:	3708      	adds	r7, #8
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4618      	mov	r0, r3
 8003492:	f004 fb1b 	bl	8007acc <USB_GetHostSpeed>
 8003496:	4603      	mov	r3, r0
}
 8003498:	4618      	mov	r0, r3
 800349a:	3708      	adds	r7, #8
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	460b      	mov	r3, r1
 80034aa:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80034ac:	78fa      	ldrb	r2, [r7, #3]
 80034ae:	6879      	ldr	r1, [r7, #4]
 80034b0:	4613      	mov	r3, r2
 80034b2:	011b      	lsls	r3, r3, #4
 80034b4:	1a9b      	subs	r3, r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	440b      	add	r3, r1
 80034ba:	331a      	adds	r3, #26
 80034bc:	2200      	movs	r2, #0
 80034be:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80034c0:	78fa      	ldrb	r2, [r7, #3]
 80034c2:	6879      	ldr	r1, [r7, #4]
 80034c4:	4613      	mov	r3, r2
 80034c6:	011b      	lsls	r3, r3, #4
 80034c8:	1a9b      	subs	r3, r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	440b      	add	r3, r1
 80034ce:	331b      	adds	r3, #27
 80034d0:	2200      	movs	r2, #0
 80034d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80034d4:	78fa      	ldrb	r2, [r7, #3]
 80034d6:	6879      	ldr	r1, [r7, #4]
 80034d8:	4613      	mov	r3, r2
 80034da:	011b      	lsls	r3, r3, #4
 80034dc:	1a9b      	subs	r3, r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	440b      	add	r3, r1
 80034e2:	3325      	adds	r3, #37	@ 0x25
 80034e4:	2200      	movs	r2, #0
 80034e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80034e8:	78fa      	ldrb	r2, [r7, #3]
 80034ea:	6879      	ldr	r1, [r7, #4]
 80034ec:	4613      	mov	r3, r2
 80034ee:	011b      	lsls	r3, r3, #4
 80034f0:	1a9b      	subs	r3, r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	440b      	add	r3, r1
 80034f6:	3324      	adds	r3, #36	@ 0x24
 80034f8:	2200      	movs	r2, #0
 80034fa:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	370c      	adds	r7, #12
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr

0800350a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b086      	sub	sp, #24
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
 8003512:	460b      	mov	r3, r1
 8003514:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	78fa      	ldrb	r2, [r7, #3]
 8003526:	4611      	mov	r1, r2
 8003528:	4618      	mov	r0, r3
 800352a:	f004 f904 	bl	8007736 <USB_ReadChInterrupts>
 800352e:	4603      	mov	r3, r0
 8003530:	f003 0304 	and.w	r3, r3, #4
 8003534:	2b04      	cmp	r3, #4
 8003536:	d11a      	bne.n	800356e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003538:	78fb      	ldrb	r3, [r7, #3]
 800353a:	015a      	lsls	r2, r3, #5
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	4413      	add	r3, r2
 8003540:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003544:	461a      	mov	r2, r3
 8003546:	2304      	movs	r3, #4
 8003548:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800354a:	78fa      	ldrb	r2, [r7, #3]
 800354c:	6879      	ldr	r1, [r7, #4]
 800354e:	4613      	mov	r3, r2
 8003550:	011b      	lsls	r3, r3, #4
 8003552:	1a9b      	subs	r3, r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	440b      	add	r3, r1
 8003558:	334d      	adds	r3, #77	@ 0x4d
 800355a:	2207      	movs	r2, #7
 800355c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	78fa      	ldrb	r2, [r7, #3]
 8003564:	4611      	mov	r1, r2
 8003566:	4618      	mov	r0, r3
 8003568:	f004 fe8f 	bl	800828a <USB_HC_Halt>
 800356c:	e09e      	b.n	80036ac <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	78fa      	ldrb	r2, [r7, #3]
 8003574:	4611      	mov	r1, r2
 8003576:	4618      	mov	r0, r3
 8003578:	f004 f8dd 	bl	8007736 <USB_ReadChInterrupts>
 800357c:	4603      	mov	r3, r0
 800357e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003582:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003586:	d11b      	bne.n	80035c0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8003588:	78fb      	ldrb	r3, [r7, #3]
 800358a:	015a      	lsls	r2, r3, #5
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	4413      	add	r3, r2
 8003590:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003594:	461a      	mov	r2, r3
 8003596:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800359a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 800359c:	78fa      	ldrb	r2, [r7, #3]
 800359e:	6879      	ldr	r1, [r7, #4]
 80035a0:	4613      	mov	r3, r2
 80035a2:	011b      	lsls	r3, r3, #4
 80035a4:	1a9b      	subs	r3, r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	440b      	add	r3, r1
 80035aa:	334d      	adds	r3, #77	@ 0x4d
 80035ac:	2208      	movs	r2, #8
 80035ae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	78fa      	ldrb	r2, [r7, #3]
 80035b6:	4611      	mov	r1, r2
 80035b8:	4618      	mov	r0, r3
 80035ba:	f004 fe66 	bl	800828a <USB_HC_Halt>
 80035be:	e075      	b.n	80036ac <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	78fa      	ldrb	r2, [r7, #3]
 80035c6:	4611      	mov	r1, r2
 80035c8:	4618      	mov	r0, r3
 80035ca:	f004 f8b4 	bl	8007736 <USB_ReadChInterrupts>
 80035ce:	4603      	mov	r3, r0
 80035d0:	f003 0308 	and.w	r3, r3, #8
 80035d4:	2b08      	cmp	r3, #8
 80035d6:	d11a      	bne.n	800360e <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80035d8:	78fb      	ldrb	r3, [r7, #3]
 80035da:	015a      	lsls	r2, r3, #5
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	4413      	add	r3, r2
 80035e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035e4:	461a      	mov	r2, r3
 80035e6:	2308      	movs	r3, #8
 80035e8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80035ea:	78fa      	ldrb	r2, [r7, #3]
 80035ec:	6879      	ldr	r1, [r7, #4]
 80035ee:	4613      	mov	r3, r2
 80035f0:	011b      	lsls	r3, r3, #4
 80035f2:	1a9b      	subs	r3, r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	440b      	add	r3, r1
 80035f8:	334d      	adds	r3, #77	@ 0x4d
 80035fa:	2206      	movs	r2, #6
 80035fc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	78fa      	ldrb	r2, [r7, #3]
 8003604:	4611      	mov	r1, r2
 8003606:	4618      	mov	r0, r3
 8003608:	f004 fe3f 	bl	800828a <USB_HC_Halt>
 800360c:	e04e      	b.n	80036ac <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	78fa      	ldrb	r2, [r7, #3]
 8003614:	4611      	mov	r1, r2
 8003616:	4618      	mov	r0, r3
 8003618:	f004 f88d 	bl	8007736 <USB_ReadChInterrupts>
 800361c:	4603      	mov	r3, r0
 800361e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003622:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003626:	d11b      	bne.n	8003660 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003628:	78fb      	ldrb	r3, [r7, #3]
 800362a:	015a      	lsls	r2, r3, #5
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	4413      	add	r3, r2
 8003630:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003634:	461a      	mov	r2, r3
 8003636:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800363a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800363c:	78fa      	ldrb	r2, [r7, #3]
 800363e:	6879      	ldr	r1, [r7, #4]
 8003640:	4613      	mov	r3, r2
 8003642:	011b      	lsls	r3, r3, #4
 8003644:	1a9b      	subs	r3, r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	440b      	add	r3, r1
 800364a:	334d      	adds	r3, #77	@ 0x4d
 800364c:	2209      	movs	r2, #9
 800364e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	78fa      	ldrb	r2, [r7, #3]
 8003656:	4611      	mov	r1, r2
 8003658:	4618      	mov	r0, r3
 800365a:	f004 fe16 	bl	800828a <USB_HC_Halt>
 800365e:	e025      	b.n	80036ac <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	78fa      	ldrb	r2, [r7, #3]
 8003666:	4611      	mov	r1, r2
 8003668:	4618      	mov	r0, r3
 800366a:	f004 f864 	bl	8007736 <USB_ReadChInterrupts>
 800366e:	4603      	mov	r3, r0
 8003670:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003674:	2b80      	cmp	r3, #128	@ 0x80
 8003676:	d119      	bne.n	80036ac <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003678:	78fb      	ldrb	r3, [r7, #3]
 800367a:	015a      	lsls	r2, r3, #5
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	4413      	add	r3, r2
 8003680:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003684:	461a      	mov	r2, r3
 8003686:	2380      	movs	r3, #128	@ 0x80
 8003688:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800368a:	78fa      	ldrb	r2, [r7, #3]
 800368c:	6879      	ldr	r1, [r7, #4]
 800368e:	4613      	mov	r3, r2
 8003690:	011b      	lsls	r3, r3, #4
 8003692:	1a9b      	subs	r3, r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	440b      	add	r3, r1
 8003698:	334d      	adds	r3, #77	@ 0x4d
 800369a:	2207      	movs	r2, #7
 800369c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	78fa      	ldrb	r2, [r7, #3]
 80036a4:	4611      	mov	r1, r2
 80036a6:	4618      	mov	r0, r3
 80036a8:	f004 fdef 	bl	800828a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	78fa      	ldrb	r2, [r7, #3]
 80036b2:	4611      	mov	r1, r2
 80036b4:	4618      	mov	r0, r3
 80036b6:	f004 f83e 	bl	8007736 <USB_ReadChInterrupts>
 80036ba:	4603      	mov	r3, r0
 80036bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036c4:	d112      	bne.n	80036ec <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	78fa      	ldrb	r2, [r7, #3]
 80036cc:	4611      	mov	r1, r2
 80036ce:	4618      	mov	r0, r3
 80036d0:	f004 fddb 	bl	800828a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80036d4:	78fb      	ldrb	r3, [r7, #3]
 80036d6:	015a      	lsls	r2, r3, #5
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	4413      	add	r3, r2
 80036dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036e0:	461a      	mov	r2, r3
 80036e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80036e6:	6093      	str	r3, [r2, #8]
 80036e8:	f000 bd75 	b.w	80041d6 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	78fa      	ldrb	r2, [r7, #3]
 80036f2:	4611      	mov	r1, r2
 80036f4:	4618      	mov	r0, r3
 80036f6:	f004 f81e 	bl	8007736 <USB_ReadChInterrupts>
 80036fa:	4603      	mov	r3, r0
 80036fc:	f003 0301 	and.w	r3, r3, #1
 8003700:	2b01      	cmp	r3, #1
 8003702:	f040 8128 	bne.w	8003956 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003706:	78fb      	ldrb	r3, [r7, #3]
 8003708:	015a      	lsls	r2, r3, #5
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	4413      	add	r3, r2
 800370e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003712:	461a      	mov	r2, r3
 8003714:	2320      	movs	r3, #32
 8003716:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003718:	78fa      	ldrb	r2, [r7, #3]
 800371a:	6879      	ldr	r1, [r7, #4]
 800371c:	4613      	mov	r3, r2
 800371e:	011b      	lsls	r3, r3, #4
 8003720:	1a9b      	subs	r3, r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	440b      	add	r3, r1
 8003726:	331b      	adds	r3, #27
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d119      	bne.n	8003762 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800372e:	78fa      	ldrb	r2, [r7, #3]
 8003730:	6879      	ldr	r1, [r7, #4]
 8003732:	4613      	mov	r3, r2
 8003734:	011b      	lsls	r3, r3, #4
 8003736:	1a9b      	subs	r3, r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	440b      	add	r3, r1
 800373c:	331b      	adds	r3, #27
 800373e:	2200      	movs	r2, #0
 8003740:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003742:	78fb      	ldrb	r3, [r7, #3]
 8003744:	015a      	lsls	r2, r3, #5
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	4413      	add	r3, r2
 800374a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	78fa      	ldrb	r2, [r7, #3]
 8003752:	0151      	lsls	r1, r2, #5
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	440a      	add	r2, r1
 8003758:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800375c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003760:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	799b      	ldrb	r3, [r3, #6]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d01b      	beq.n	80037a2 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800376a:	78fa      	ldrb	r2, [r7, #3]
 800376c:	6879      	ldr	r1, [r7, #4]
 800376e:	4613      	mov	r3, r2
 8003770:	011b      	lsls	r3, r3, #4
 8003772:	1a9b      	subs	r3, r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	440b      	add	r3, r1
 8003778:	3330      	adds	r3, #48	@ 0x30
 800377a:	6819      	ldr	r1, [r3, #0]
 800377c:	78fb      	ldrb	r3, [r7, #3]
 800377e:	015a      	lsls	r2, r3, #5
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	4413      	add	r3, r2
 8003784:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800378e:	78fa      	ldrb	r2, [r7, #3]
 8003790:	1ac9      	subs	r1, r1, r3
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	4613      	mov	r3, r2
 8003796:	011b      	lsls	r3, r3, #4
 8003798:	1a9b      	subs	r3, r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	4403      	add	r3, r0
 800379e:	3338      	adds	r3, #56	@ 0x38
 80037a0:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80037a2:	78fa      	ldrb	r2, [r7, #3]
 80037a4:	6879      	ldr	r1, [r7, #4]
 80037a6:	4613      	mov	r3, r2
 80037a8:	011b      	lsls	r3, r3, #4
 80037aa:	1a9b      	subs	r3, r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	440b      	add	r3, r1
 80037b0:	334d      	adds	r3, #77	@ 0x4d
 80037b2:	2201      	movs	r2, #1
 80037b4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80037b6:	78fa      	ldrb	r2, [r7, #3]
 80037b8:	6879      	ldr	r1, [r7, #4]
 80037ba:	4613      	mov	r3, r2
 80037bc:	011b      	lsls	r3, r3, #4
 80037be:	1a9b      	subs	r3, r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	440b      	add	r3, r1
 80037c4:	3344      	adds	r3, #68	@ 0x44
 80037c6:	2200      	movs	r2, #0
 80037c8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80037ca:	78fb      	ldrb	r3, [r7, #3]
 80037cc:	015a      	lsls	r2, r3, #5
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	4413      	add	r3, r2
 80037d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037d6:	461a      	mov	r2, r3
 80037d8:	2301      	movs	r3, #1
 80037da:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80037dc:	78fa      	ldrb	r2, [r7, #3]
 80037de:	6879      	ldr	r1, [r7, #4]
 80037e0:	4613      	mov	r3, r2
 80037e2:	011b      	lsls	r3, r3, #4
 80037e4:	1a9b      	subs	r3, r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	440b      	add	r3, r1
 80037ea:	3326      	adds	r3, #38	@ 0x26
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00a      	beq.n	8003808 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80037f2:	78fa      	ldrb	r2, [r7, #3]
 80037f4:	6879      	ldr	r1, [r7, #4]
 80037f6:	4613      	mov	r3, r2
 80037f8:	011b      	lsls	r3, r3, #4
 80037fa:	1a9b      	subs	r3, r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	440b      	add	r3, r1
 8003800:	3326      	adds	r3, #38	@ 0x26
 8003802:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003804:	2b02      	cmp	r3, #2
 8003806:	d110      	bne.n	800382a <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	78fa      	ldrb	r2, [r7, #3]
 800380e:	4611      	mov	r1, r2
 8003810:	4618      	mov	r0, r3
 8003812:	f004 fd3a 	bl	800828a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003816:	78fb      	ldrb	r3, [r7, #3]
 8003818:	015a      	lsls	r2, r3, #5
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	4413      	add	r3, r2
 800381e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003822:	461a      	mov	r2, r3
 8003824:	2310      	movs	r3, #16
 8003826:	6093      	str	r3, [r2, #8]
 8003828:	e03d      	b.n	80038a6 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800382a:	78fa      	ldrb	r2, [r7, #3]
 800382c:	6879      	ldr	r1, [r7, #4]
 800382e:	4613      	mov	r3, r2
 8003830:	011b      	lsls	r3, r3, #4
 8003832:	1a9b      	subs	r3, r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	440b      	add	r3, r1
 8003838:	3326      	adds	r3, #38	@ 0x26
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	2b03      	cmp	r3, #3
 800383e:	d00a      	beq.n	8003856 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8003840:	78fa      	ldrb	r2, [r7, #3]
 8003842:	6879      	ldr	r1, [r7, #4]
 8003844:	4613      	mov	r3, r2
 8003846:	011b      	lsls	r3, r3, #4
 8003848:	1a9b      	subs	r3, r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	440b      	add	r3, r1
 800384e:	3326      	adds	r3, #38	@ 0x26
 8003850:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003852:	2b01      	cmp	r3, #1
 8003854:	d127      	bne.n	80038a6 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003856:	78fb      	ldrb	r3, [r7, #3]
 8003858:	015a      	lsls	r2, r3, #5
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	4413      	add	r3, r2
 800385e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	78fa      	ldrb	r2, [r7, #3]
 8003866:	0151      	lsls	r1, r2, #5
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	440a      	add	r2, r1
 800386c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003870:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003874:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003876:	78fa      	ldrb	r2, [r7, #3]
 8003878:	6879      	ldr	r1, [r7, #4]
 800387a:	4613      	mov	r3, r2
 800387c:	011b      	lsls	r3, r3, #4
 800387e:	1a9b      	subs	r3, r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	440b      	add	r3, r1
 8003884:	334c      	adds	r3, #76	@ 0x4c
 8003886:	2201      	movs	r2, #1
 8003888:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800388a:	78fa      	ldrb	r2, [r7, #3]
 800388c:	6879      	ldr	r1, [r7, #4]
 800388e:	4613      	mov	r3, r2
 8003890:	011b      	lsls	r3, r3, #4
 8003892:	1a9b      	subs	r3, r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	440b      	add	r3, r1
 8003898:	334c      	adds	r3, #76	@ 0x4c
 800389a:	781a      	ldrb	r2, [r3, #0]
 800389c:	78fb      	ldrb	r3, [r7, #3]
 800389e:	4619      	mov	r1, r3
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f007 f851 	bl	800a948 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	799b      	ldrb	r3, [r3, #6]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d13b      	bne.n	8003926 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80038ae:	78fa      	ldrb	r2, [r7, #3]
 80038b0:	6879      	ldr	r1, [r7, #4]
 80038b2:	4613      	mov	r3, r2
 80038b4:	011b      	lsls	r3, r3, #4
 80038b6:	1a9b      	subs	r3, r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	440b      	add	r3, r1
 80038bc:	3338      	adds	r3, #56	@ 0x38
 80038be:	6819      	ldr	r1, [r3, #0]
 80038c0:	78fa      	ldrb	r2, [r7, #3]
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	4613      	mov	r3, r2
 80038c6:	011b      	lsls	r3, r3, #4
 80038c8:	1a9b      	subs	r3, r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	4403      	add	r3, r0
 80038ce:	3328      	adds	r3, #40	@ 0x28
 80038d0:	881b      	ldrh	r3, [r3, #0]
 80038d2:	440b      	add	r3, r1
 80038d4:	1e59      	subs	r1, r3, #1
 80038d6:	78fa      	ldrb	r2, [r7, #3]
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	4613      	mov	r3, r2
 80038dc:	011b      	lsls	r3, r3, #4
 80038de:	1a9b      	subs	r3, r3, r2
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	4403      	add	r3, r0
 80038e4:	3328      	adds	r3, #40	@ 0x28
 80038e6:	881b      	ldrh	r3, [r3, #0]
 80038e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80038ec:	f003 0301 	and.w	r3, r3, #1
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	f000 8470 	beq.w	80041d6 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80038f6:	78fa      	ldrb	r2, [r7, #3]
 80038f8:	6879      	ldr	r1, [r7, #4]
 80038fa:	4613      	mov	r3, r2
 80038fc:	011b      	lsls	r3, r3, #4
 80038fe:	1a9b      	subs	r3, r3, r2
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	440b      	add	r3, r1
 8003904:	333c      	adds	r3, #60	@ 0x3c
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	78fa      	ldrb	r2, [r7, #3]
 800390a:	f083 0301 	eor.w	r3, r3, #1
 800390e:	b2d8      	uxtb	r0, r3
 8003910:	6879      	ldr	r1, [r7, #4]
 8003912:	4613      	mov	r3, r2
 8003914:	011b      	lsls	r3, r3, #4
 8003916:	1a9b      	subs	r3, r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	440b      	add	r3, r1
 800391c:	333c      	adds	r3, #60	@ 0x3c
 800391e:	4602      	mov	r2, r0
 8003920:	701a      	strb	r2, [r3, #0]
 8003922:	f000 bc58 	b.w	80041d6 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003926:	78fa      	ldrb	r2, [r7, #3]
 8003928:	6879      	ldr	r1, [r7, #4]
 800392a:	4613      	mov	r3, r2
 800392c:	011b      	lsls	r3, r3, #4
 800392e:	1a9b      	subs	r3, r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	440b      	add	r3, r1
 8003934:	333c      	adds	r3, #60	@ 0x3c
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	78fa      	ldrb	r2, [r7, #3]
 800393a:	f083 0301 	eor.w	r3, r3, #1
 800393e:	b2d8      	uxtb	r0, r3
 8003940:	6879      	ldr	r1, [r7, #4]
 8003942:	4613      	mov	r3, r2
 8003944:	011b      	lsls	r3, r3, #4
 8003946:	1a9b      	subs	r3, r3, r2
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	440b      	add	r3, r1
 800394c:	333c      	adds	r3, #60	@ 0x3c
 800394e:	4602      	mov	r2, r0
 8003950:	701a      	strb	r2, [r3, #0]
 8003952:	f000 bc40 	b.w	80041d6 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	78fa      	ldrb	r2, [r7, #3]
 800395c:	4611      	mov	r1, r2
 800395e:	4618      	mov	r0, r3
 8003960:	f003 fee9 	bl	8007736 <USB_ReadChInterrupts>
 8003964:	4603      	mov	r3, r0
 8003966:	f003 0320 	and.w	r3, r3, #32
 800396a:	2b20      	cmp	r3, #32
 800396c:	d131      	bne.n	80039d2 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800396e:	78fb      	ldrb	r3, [r7, #3]
 8003970:	015a      	lsls	r2, r3, #5
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	4413      	add	r3, r2
 8003976:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800397a:	461a      	mov	r2, r3
 800397c:	2320      	movs	r3, #32
 800397e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8003980:	78fa      	ldrb	r2, [r7, #3]
 8003982:	6879      	ldr	r1, [r7, #4]
 8003984:	4613      	mov	r3, r2
 8003986:	011b      	lsls	r3, r3, #4
 8003988:	1a9b      	subs	r3, r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	440b      	add	r3, r1
 800398e:	331a      	adds	r3, #26
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	2b01      	cmp	r3, #1
 8003994:	f040 841f 	bne.w	80041d6 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8003998:	78fa      	ldrb	r2, [r7, #3]
 800399a:	6879      	ldr	r1, [r7, #4]
 800399c:	4613      	mov	r3, r2
 800399e:	011b      	lsls	r3, r3, #4
 80039a0:	1a9b      	subs	r3, r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	440b      	add	r3, r1
 80039a6:	331b      	adds	r3, #27
 80039a8:	2201      	movs	r2, #1
 80039aa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80039ac:	78fa      	ldrb	r2, [r7, #3]
 80039ae:	6879      	ldr	r1, [r7, #4]
 80039b0:	4613      	mov	r3, r2
 80039b2:	011b      	lsls	r3, r3, #4
 80039b4:	1a9b      	subs	r3, r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	440b      	add	r3, r1
 80039ba:	334d      	adds	r3, #77	@ 0x4d
 80039bc:	2203      	movs	r2, #3
 80039be:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	78fa      	ldrb	r2, [r7, #3]
 80039c6:	4611      	mov	r1, r2
 80039c8:	4618      	mov	r0, r3
 80039ca:	f004 fc5e 	bl	800828a <USB_HC_Halt>
 80039ce:	f000 bc02 	b.w	80041d6 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	78fa      	ldrb	r2, [r7, #3]
 80039d8:	4611      	mov	r1, r2
 80039da:	4618      	mov	r0, r3
 80039dc:	f003 feab 	bl	8007736 <USB_ReadChInterrupts>
 80039e0:	4603      	mov	r3, r0
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	f040 8305 	bne.w	8003ff6 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80039ec:	78fb      	ldrb	r3, [r7, #3]
 80039ee:	015a      	lsls	r2, r3, #5
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	4413      	add	r3, r2
 80039f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039f8:	461a      	mov	r2, r3
 80039fa:	2302      	movs	r3, #2
 80039fc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80039fe:	78fa      	ldrb	r2, [r7, #3]
 8003a00:	6879      	ldr	r1, [r7, #4]
 8003a02:	4613      	mov	r3, r2
 8003a04:	011b      	lsls	r3, r3, #4
 8003a06:	1a9b      	subs	r3, r3, r2
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	440b      	add	r3, r1
 8003a0c:	334d      	adds	r3, #77	@ 0x4d
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d114      	bne.n	8003a3e <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003a14:	78fa      	ldrb	r2, [r7, #3]
 8003a16:	6879      	ldr	r1, [r7, #4]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	011b      	lsls	r3, r3, #4
 8003a1c:	1a9b      	subs	r3, r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	440b      	add	r3, r1
 8003a22:	334d      	adds	r3, #77	@ 0x4d
 8003a24:	2202      	movs	r2, #2
 8003a26:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003a28:	78fa      	ldrb	r2, [r7, #3]
 8003a2a:	6879      	ldr	r1, [r7, #4]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	011b      	lsls	r3, r3, #4
 8003a30:	1a9b      	subs	r3, r3, r2
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	440b      	add	r3, r1
 8003a36:	334c      	adds	r3, #76	@ 0x4c
 8003a38:	2201      	movs	r2, #1
 8003a3a:	701a      	strb	r2, [r3, #0]
 8003a3c:	e2cc      	b.n	8003fd8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003a3e:	78fa      	ldrb	r2, [r7, #3]
 8003a40:	6879      	ldr	r1, [r7, #4]
 8003a42:	4613      	mov	r3, r2
 8003a44:	011b      	lsls	r3, r3, #4
 8003a46:	1a9b      	subs	r3, r3, r2
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	440b      	add	r3, r1
 8003a4c:	334d      	adds	r3, #77	@ 0x4d
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	2b06      	cmp	r3, #6
 8003a52:	d114      	bne.n	8003a7e <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003a54:	78fa      	ldrb	r2, [r7, #3]
 8003a56:	6879      	ldr	r1, [r7, #4]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	011b      	lsls	r3, r3, #4
 8003a5c:	1a9b      	subs	r3, r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	440b      	add	r3, r1
 8003a62:	334d      	adds	r3, #77	@ 0x4d
 8003a64:	2202      	movs	r2, #2
 8003a66:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003a68:	78fa      	ldrb	r2, [r7, #3]
 8003a6a:	6879      	ldr	r1, [r7, #4]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	011b      	lsls	r3, r3, #4
 8003a70:	1a9b      	subs	r3, r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	440b      	add	r3, r1
 8003a76:	334c      	adds	r3, #76	@ 0x4c
 8003a78:	2205      	movs	r2, #5
 8003a7a:	701a      	strb	r2, [r3, #0]
 8003a7c:	e2ac      	b.n	8003fd8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003a7e:	78fa      	ldrb	r2, [r7, #3]
 8003a80:	6879      	ldr	r1, [r7, #4]
 8003a82:	4613      	mov	r3, r2
 8003a84:	011b      	lsls	r3, r3, #4
 8003a86:	1a9b      	subs	r3, r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	440b      	add	r3, r1
 8003a8c:	334d      	adds	r3, #77	@ 0x4d
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	2b07      	cmp	r3, #7
 8003a92:	d00b      	beq.n	8003aac <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003a94:	78fa      	ldrb	r2, [r7, #3]
 8003a96:	6879      	ldr	r1, [r7, #4]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	011b      	lsls	r3, r3, #4
 8003a9c:	1a9b      	subs	r3, r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	440b      	add	r3, r1
 8003aa2:	334d      	adds	r3, #77	@ 0x4d
 8003aa4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003aa6:	2b09      	cmp	r3, #9
 8003aa8:	f040 80a6 	bne.w	8003bf8 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003aac:	78fa      	ldrb	r2, [r7, #3]
 8003aae:	6879      	ldr	r1, [r7, #4]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	011b      	lsls	r3, r3, #4
 8003ab4:	1a9b      	subs	r3, r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	440b      	add	r3, r1
 8003aba:	334d      	adds	r3, #77	@ 0x4d
 8003abc:	2202      	movs	r2, #2
 8003abe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003ac0:	78fa      	ldrb	r2, [r7, #3]
 8003ac2:	6879      	ldr	r1, [r7, #4]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	011b      	lsls	r3, r3, #4
 8003ac8:	1a9b      	subs	r3, r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	440b      	add	r3, r1
 8003ace:	3344      	adds	r3, #68	@ 0x44
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	1c59      	adds	r1, r3, #1
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	011b      	lsls	r3, r3, #4
 8003ada:	1a9b      	subs	r3, r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	4403      	add	r3, r0
 8003ae0:	3344      	adds	r3, #68	@ 0x44
 8003ae2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003ae4:	78fa      	ldrb	r2, [r7, #3]
 8003ae6:	6879      	ldr	r1, [r7, #4]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	011b      	lsls	r3, r3, #4
 8003aec:	1a9b      	subs	r3, r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	440b      	add	r3, r1
 8003af2:	3344      	adds	r3, #68	@ 0x44
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d943      	bls.n	8003b82 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003afa:	78fa      	ldrb	r2, [r7, #3]
 8003afc:	6879      	ldr	r1, [r7, #4]
 8003afe:	4613      	mov	r3, r2
 8003b00:	011b      	lsls	r3, r3, #4
 8003b02:	1a9b      	subs	r3, r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	440b      	add	r3, r1
 8003b08:	3344      	adds	r3, #68	@ 0x44
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003b0e:	78fa      	ldrb	r2, [r7, #3]
 8003b10:	6879      	ldr	r1, [r7, #4]
 8003b12:	4613      	mov	r3, r2
 8003b14:	011b      	lsls	r3, r3, #4
 8003b16:	1a9b      	subs	r3, r3, r2
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	440b      	add	r3, r1
 8003b1c:	331a      	adds	r3, #26
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d123      	bne.n	8003b6c <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003b24:	78fa      	ldrb	r2, [r7, #3]
 8003b26:	6879      	ldr	r1, [r7, #4]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	011b      	lsls	r3, r3, #4
 8003b2c:	1a9b      	subs	r3, r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	440b      	add	r3, r1
 8003b32:	331b      	adds	r3, #27
 8003b34:	2200      	movs	r2, #0
 8003b36:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003b38:	78fa      	ldrb	r2, [r7, #3]
 8003b3a:	6879      	ldr	r1, [r7, #4]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	011b      	lsls	r3, r3, #4
 8003b40:	1a9b      	subs	r3, r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	440b      	add	r3, r1
 8003b46:	331c      	adds	r3, #28
 8003b48:	2200      	movs	r2, #0
 8003b4a:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003b4c:	78fb      	ldrb	r3, [r7, #3]
 8003b4e:	015a      	lsls	r2, r3, #5
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	4413      	add	r3, r2
 8003b54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	78fa      	ldrb	r2, [r7, #3]
 8003b5c:	0151      	lsls	r1, r2, #5
 8003b5e:	693a      	ldr	r2, [r7, #16]
 8003b60:	440a      	add	r2, r1
 8003b62:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003b66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b6a:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003b6c:	78fa      	ldrb	r2, [r7, #3]
 8003b6e:	6879      	ldr	r1, [r7, #4]
 8003b70:	4613      	mov	r3, r2
 8003b72:	011b      	lsls	r3, r3, #4
 8003b74:	1a9b      	subs	r3, r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	440b      	add	r3, r1
 8003b7a:	334c      	adds	r3, #76	@ 0x4c
 8003b7c:	2204      	movs	r2, #4
 8003b7e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003b80:	e229      	b.n	8003fd6 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003b82:	78fa      	ldrb	r2, [r7, #3]
 8003b84:	6879      	ldr	r1, [r7, #4]
 8003b86:	4613      	mov	r3, r2
 8003b88:	011b      	lsls	r3, r3, #4
 8003b8a:	1a9b      	subs	r3, r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	440b      	add	r3, r1
 8003b90:	334c      	adds	r3, #76	@ 0x4c
 8003b92:	2202      	movs	r2, #2
 8003b94:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003b96:	78fa      	ldrb	r2, [r7, #3]
 8003b98:	6879      	ldr	r1, [r7, #4]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	011b      	lsls	r3, r3, #4
 8003b9e:	1a9b      	subs	r3, r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	440b      	add	r3, r1
 8003ba4:	3326      	adds	r3, #38	@ 0x26
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00b      	beq.n	8003bc4 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003bac:	78fa      	ldrb	r2, [r7, #3]
 8003bae:	6879      	ldr	r1, [r7, #4]
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	011b      	lsls	r3, r3, #4
 8003bb4:	1a9b      	subs	r3, r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	440b      	add	r3, r1
 8003bba:	3326      	adds	r3, #38	@ 0x26
 8003bbc:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	f040 8209 	bne.w	8003fd6 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003bc4:	78fb      	ldrb	r3, [r7, #3]
 8003bc6:	015a      	lsls	r2, r3, #5
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	4413      	add	r3, r2
 8003bcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003bda:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003be2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003be4:	78fb      	ldrb	r3, [r7, #3]
 8003be6:	015a      	lsls	r2, r3, #5
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	4413      	add	r3, r2
 8003bec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003bf6:	e1ee      	b.n	8003fd6 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003bf8:	78fa      	ldrb	r2, [r7, #3]
 8003bfa:	6879      	ldr	r1, [r7, #4]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	011b      	lsls	r3, r3, #4
 8003c00:	1a9b      	subs	r3, r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	440b      	add	r3, r1
 8003c06:	334d      	adds	r3, #77	@ 0x4d
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	2b05      	cmp	r3, #5
 8003c0c:	f040 80c8 	bne.w	8003da0 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003c10:	78fa      	ldrb	r2, [r7, #3]
 8003c12:	6879      	ldr	r1, [r7, #4]
 8003c14:	4613      	mov	r3, r2
 8003c16:	011b      	lsls	r3, r3, #4
 8003c18:	1a9b      	subs	r3, r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	440b      	add	r3, r1
 8003c1e:	334d      	adds	r3, #77	@ 0x4d
 8003c20:	2202      	movs	r2, #2
 8003c22:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003c24:	78fa      	ldrb	r2, [r7, #3]
 8003c26:	6879      	ldr	r1, [r7, #4]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	011b      	lsls	r3, r3, #4
 8003c2c:	1a9b      	subs	r3, r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	440b      	add	r3, r1
 8003c32:	331b      	adds	r3, #27
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	f040 81ce 	bne.w	8003fd8 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003c3c:	78fa      	ldrb	r2, [r7, #3]
 8003c3e:	6879      	ldr	r1, [r7, #4]
 8003c40:	4613      	mov	r3, r2
 8003c42:	011b      	lsls	r3, r3, #4
 8003c44:	1a9b      	subs	r3, r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	440b      	add	r3, r1
 8003c4a:	3326      	adds	r3, #38	@ 0x26
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	2b03      	cmp	r3, #3
 8003c50:	d16b      	bne.n	8003d2a <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8003c52:	78fa      	ldrb	r2, [r7, #3]
 8003c54:	6879      	ldr	r1, [r7, #4]
 8003c56:	4613      	mov	r3, r2
 8003c58:	011b      	lsls	r3, r3, #4
 8003c5a:	1a9b      	subs	r3, r3, r2
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	440b      	add	r3, r1
 8003c60:	3348      	adds	r3, #72	@ 0x48
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	1c59      	adds	r1, r3, #1
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	011b      	lsls	r3, r3, #4
 8003c6c:	1a9b      	subs	r3, r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	4403      	add	r3, r0
 8003c72:	3348      	adds	r3, #72	@ 0x48
 8003c74:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003c76:	78fa      	ldrb	r2, [r7, #3]
 8003c78:	6879      	ldr	r1, [r7, #4]
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	011b      	lsls	r3, r3, #4
 8003c7e:	1a9b      	subs	r3, r3, r2
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	440b      	add	r3, r1
 8003c84:	3348      	adds	r3, #72	@ 0x48
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d943      	bls.n	8003d14 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003c8c:	78fa      	ldrb	r2, [r7, #3]
 8003c8e:	6879      	ldr	r1, [r7, #4]
 8003c90:	4613      	mov	r3, r2
 8003c92:	011b      	lsls	r3, r3, #4
 8003c94:	1a9b      	subs	r3, r3, r2
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	440b      	add	r3, r1
 8003c9a:	3348      	adds	r3, #72	@ 0x48
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003ca0:	78fa      	ldrb	r2, [r7, #3]
 8003ca2:	6879      	ldr	r1, [r7, #4]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	011b      	lsls	r3, r3, #4
 8003ca8:	1a9b      	subs	r3, r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	440b      	add	r3, r1
 8003cae:	331b      	adds	r3, #27
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003cb4:	78fa      	ldrb	r2, [r7, #3]
 8003cb6:	6879      	ldr	r1, [r7, #4]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	011b      	lsls	r3, r3, #4
 8003cbc:	1a9b      	subs	r3, r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	440b      	add	r3, r1
 8003cc2:	3344      	adds	r3, #68	@ 0x44
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d809      	bhi.n	8003cde <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8003cca:	78fa      	ldrb	r2, [r7, #3]
 8003ccc:	6879      	ldr	r1, [r7, #4]
 8003cce:	4613      	mov	r3, r2
 8003cd0:	011b      	lsls	r3, r3, #4
 8003cd2:	1a9b      	subs	r3, r3, r2
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	440b      	add	r3, r1
 8003cd8:	331c      	adds	r3, #28
 8003cda:	2201      	movs	r2, #1
 8003cdc:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003cde:	78fb      	ldrb	r3, [r7, #3]
 8003ce0:	015a      	lsls	r2, r3, #5
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	78fa      	ldrb	r2, [r7, #3]
 8003cee:	0151      	lsls	r1, r2, #5
 8003cf0:	693a      	ldr	r2, [r7, #16]
 8003cf2:	440a      	add	r2, r1
 8003cf4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003cf8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cfc:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003cfe:	78fa      	ldrb	r2, [r7, #3]
 8003d00:	6879      	ldr	r1, [r7, #4]
 8003d02:	4613      	mov	r3, r2
 8003d04:	011b      	lsls	r3, r3, #4
 8003d06:	1a9b      	subs	r3, r3, r2
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	440b      	add	r3, r1
 8003d0c:	334c      	adds	r3, #76	@ 0x4c
 8003d0e:	2204      	movs	r2, #4
 8003d10:	701a      	strb	r2, [r3, #0]
 8003d12:	e014      	b.n	8003d3e <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003d14:	78fa      	ldrb	r2, [r7, #3]
 8003d16:	6879      	ldr	r1, [r7, #4]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	011b      	lsls	r3, r3, #4
 8003d1c:	1a9b      	subs	r3, r3, r2
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	440b      	add	r3, r1
 8003d22:	334c      	adds	r3, #76	@ 0x4c
 8003d24:	2202      	movs	r2, #2
 8003d26:	701a      	strb	r2, [r3, #0]
 8003d28:	e009      	b.n	8003d3e <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003d2a:	78fa      	ldrb	r2, [r7, #3]
 8003d2c:	6879      	ldr	r1, [r7, #4]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	011b      	lsls	r3, r3, #4
 8003d32:	1a9b      	subs	r3, r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	440b      	add	r3, r1
 8003d38:	334c      	adds	r3, #76	@ 0x4c
 8003d3a:	2202      	movs	r2, #2
 8003d3c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003d3e:	78fa      	ldrb	r2, [r7, #3]
 8003d40:	6879      	ldr	r1, [r7, #4]
 8003d42:	4613      	mov	r3, r2
 8003d44:	011b      	lsls	r3, r3, #4
 8003d46:	1a9b      	subs	r3, r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	440b      	add	r3, r1
 8003d4c:	3326      	adds	r3, #38	@ 0x26
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00b      	beq.n	8003d6c <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003d54:	78fa      	ldrb	r2, [r7, #3]
 8003d56:	6879      	ldr	r1, [r7, #4]
 8003d58:	4613      	mov	r3, r2
 8003d5a:	011b      	lsls	r3, r3, #4
 8003d5c:	1a9b      	subs	r3, r3, r2
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	440b      	add	r3, r1
 8003d62:	3326      	adds	r3, #38	@ 0x26
 8003d64:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	f040 8136 	bne.w	8003fd8 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003d6c:	78fb      	ldrb	r3, [r7, #3]
 8003d6e:	015a      	lsls	r2, r3, #5
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	4413      	add	r3, r2
 8003d74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003d82:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003d8a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003d8c:	78fb      	ldrb	r3, [r7, #3]
 8003d8e:	015a      	lsls	r2, r3, #5
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	4413      	add	r3, r2
 8003d94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d98:	461a      	mov	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6013      	str	r3, [r2, #0]
 8003d9e:	e11b      	b.n	8003fd8 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003da0:	78fa      	ldrb	r2, [r7, #3]
 8003da2:	6879      	ldr	r1, [r7, #4]
 8003da4:	4613      	mov	r3, r2
 8003da6:	011b      	lsls	r3, r3, #4
 8003da8:	1a9b      	subs	r3, r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	440b      	add	r3, r1
 8003dae:	334d      	adds	r3, #77	@ 0x4d
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	2b03      	cmp	r3, #3
 8003db4:	f040 8081 	bne.w	8003eba <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003db8:	78fa      	ldrb	r2, [r7, #3]
 8003dba:	6879      	ldr	r1, [r7, #4]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	011b      	lsls	r3, r3, #4
 8003dc0:	1a9b      	subs	r3, r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	440b      	add	r3, r1
 8003dc6:	334d      	adds	r3, #77	@ 0x4d
 8003dc8:	2202      	movs	r2, #2
 8003dca:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003dcc:	78fa      	ldrb	r2, [r7, #3]
 8003dce:	6879      	ldr	r1, [r7, #4]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	011b      	lsls	r3, r3, #4
 8003dd4:	1a9b      	subs	r3, r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	440b      	add	r3, r1
 8003dda:	331b      	adds	r3, #27
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	f040 80fa 	bne.w	8003fd8 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003de4:	78fa      	ldrb	r2, [r7, #3]
 8003de6:	6879      	ldr	r1, [r7, #4]
 8003de8:	4613      	mov	r3, r2
 8003dea:	011b      	lsls	r3, r3, #4
 8003dec:	1a9b      	subs	r3, r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	440b      	add	r3, r1
 8003df2:	334c      	adds	r3, #76	@ 0x4c
 8003df4:	2202      	movs	r2, #2
 8003df6:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003df8:	78fb      	ldrb	r3, [r7, #3]
 8003dfa:	015a      	lsls	r2, r3, #5
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	4413      	add	r3, r2
 8003e00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	78fa      	ldrb	r2, [r7, #3]
 8003e08:	0151      	lsls	r1, r2, #5
 8003e0a:	693a      	ldr	r2, [r7, #16]
 8003e0c:	440a      	add	r2, r1
 8003e0e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003e12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e16:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003e18:	78fb      	ldrb	r3, [r7, #3]
 8003e1a:	015a      	lsls	r2, r3, #5
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	4413      	add	r3, r2
 8003e20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	78fa      	ldrb	r2, [r7, #3]
 8003e28:	0151      	lsls	r1, r2, #5
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	440a      	add	r2, r1
 8003e2e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003e32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e36:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003e38:	78fb      	ldrb	r3, [r7, #3]
 8003e3a:	015a      	lsls	r2, r3, #5
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	4413      	add	r3, r2
 8003e40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	78fa      	ldrb	r2, [r7, #3]
 8003e48:	0151      	lsls	r1, r2, #5
 8003e4a:	693a      	ldr	r2, [r7, #16]
 8003e4c:	440a      	add	r2, r1
 8003e4e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003e52:	f023 0320 	bic.w	r3, r3, #32
 8003e56:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003e58:	78fa      	ldrb	r2, [r7, #3]
 8003e5a:	6879      	ldr	r1, [r7, #4]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	011b      	lsls	r3, r3, #4
 8003e60:	1a9b      	subs	r3, r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	440b      	add	r3, r1
 8003e66:	3326      	adds	r3, #38	@ 0x26
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d00b      	beq.n	8003e86 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003e6e:	78fa      	ldrb	r2, [r7, #3]
 8003e70:	6879      	ldr	r1, [r7, #4]
 8003e72:	4613      	mov	r3, r2
 8003e74:	011b      	lsls	r3, r3, #4
 8003e76:	1a9b      	subs	r3, r3, r2
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	440b      	add	r3, r1
 8003e7c:	3326      	adds	r3, #38	@ 0x26
 8003e7e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	f040 80a9 	bne.w	8003fd8 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003e86:	78fb      	ldrb	r3, [r7, #3]
 8003e88:	015a      	lsls	r2, r3, #5
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003e9c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003ea4:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003ea6:	78fb      	ldrb	r3, [r7, #3]
 8003ea8:	015a      	lsls	r2, r3, #5
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	4413      	add	r3, r2
 8003eae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6013      	str	r3, [r2, #0]
 8003eb8:	e08e      	b.n	8003fd8 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003eba:	78fa      	ldrb	r2, [r7, #3]
 8003ebc:	6879      	ldr	r1, [r7, #4]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	011b      	lsls	r3, r3, #4
 8003ec2:	1a9b      	subs	r3, r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	440b      	add	r3, r1
 8003ec8:	334d      	adds	r3, #77	@ 0x4d
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	2b04      	cmp	r3, #4
 8003ece:	d143      	bne.n	8003f58 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003ed0:	78fa      	ldrb	r2, [r7, #3]
 8003ed2:	6879      	ldr	r1, [r7, #4]
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	011b      	lsls	r3, r3, #4
 8003ed8:	1a9b      	subs	r3, r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	440b      	add	r3, r1
 8003ede:	334d      	adds	r3, #77	@ 0x4d
 8003ee0:	2202      	movs	r2, #2
 8003ee2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003ee4:	78fa      	ldrb	r2, [r7, #3]
 8003ee6:	6879      	ldr	r1, [r7, #4]
 8003ee8:	4613      	mov	r3, r2
 8003eea:	011b      	lsls	r3, r3, #4
 8003eec:	1a9b      	subs	r3, r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	440b      	add	r3, r1
 8003ef2:	334c      	adds	r3, #76	@ 0x4c
 8003ef4:	2202      	movs	r2, #2
 8003ef6:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003ef8:	78fa      	ldrb	r2, [r7, #3]
 8003efa:	6879      	ldr	r1, [r7, #4]
 8003efc:	4613      	mov	r3, r2
 8003efe:	011b      	lsls	r3, r3, #4
 8003f00:	1a9b      	subs	r3, r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	440b      	add	r3, r1
 8003f06:	3326      	adds	r3, #38	@ 0x26
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00a      	beq.n	8003f24 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003f0e:	78fa      	ldrb	r2, [r7, #3]
 8003f10:	6879      	ldr	r1, [r7, #4]
 8003f12:	4613      	mov	r3, r2
 8003f14:	011b      	lsls	r3, r3, #4
 8003f16:	1a9b      	subs	r3, r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	440b      	add	r3, r1
 8003f1c:	3326      	adds	r3, #38	@ 0x26
 8003f1e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d159      	bne.n	8003fd8 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003f24:	78fb      	ldrb	r3, [r7, #3]
 8003f26:	015a      	lsls	r2, r3, #5
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003f3a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003f42:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003f44:	78fb      	ldrb	r3, [r7, #3]
 8003f46:	015a      	lsls	r2, r3, #5
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f50:	461a      	mov	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6013      	str	r3, [r2, #0]
 8003f56:	e03f      	b.n	8003fd8 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003f58:	78fa      	ldrb	r2, [r7, #3]
 8003f5a:	6879      	ldr	r1, [r7, #4]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	011b      	lsls	r3, r3, #4
 8003f60:	1a9b      	subs	r3, r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	440b      	add	r3, r1
 8003f66:	334d      	adds	r3, #77	@ 0x4d
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	2b08      	cmp	r3, #8
 8003f6c:	d126      	bne.n	8003fbc <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f6e:	78fa      	ldrb	r2, [r7, #3]
 8003f70:	6879      	ldr	r1, [r7, #4]
 8003f72:	4613      	mov	r3, r2
 8003f74:	011b      	lsls	r3, r3, #4
 8003f76:	1a9b      	subs	r3, r3, r2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	440b      	add	r3, r1
 8003f7c:	334d      	adds	r3, #77	@ 0x4d
 8003f7e:	2202      	movs	r2, #2
 8003f80:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003f82:	78fa      	ldrb	r2, [r7, #3]
 8003f84:	6879      	ldr	r1, [r7, #4]
 8003f86:	4613      	mov	r3, r2
 8003f88:	011b      	lsls	r3, r3, #4
 8003f8a:	1a9b      	subs	r3, r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	440b      	add	r3, r1
 8003f90:	3344      	adds	r3, #68	@ 0x44
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	1c59      	adds	r1, r3, #1
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	4613      	mov	r3, r2
 8003f9a:	011b      	lsls	r3, r3, #4
 8003f9c:	1a9b      	subs	r3, r3, r2
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	4403      	add	r3, r0
 8003fa2:	3344      	adds	r3, #68	@ 0x44
 8003fa4:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003fa6:	78fa      	ldrb	r2, [r7, #3]
 8003fa8:	6879      	ldr	r1, [r7, #4]
 8003faa:	4613      	mov	r3, r2
 8003fac:	011b      	lsls	r3, r3, #4
 8003fae:	1a9b      	subs	r3, r3, r2
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	440b      	add	r3, r1
 8003fb4:	334c      	adds	r3, #76	@ 0x4c
 8003fb6:	2204      	movs	r2, #4
 8003fb8:	701a      	strb	r2, [r3, #0]
 8003fba:	e00d      	b.n	8003fd8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003fbc:	78fa      	ldrb	r2, [r7, #3]
 8003fbe:	6879      	ldr	r1, [r7, #4]
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	011b      	lsls	r3, r3, #4
 8003fc4:	1a9b      	subs	r3, r3, r2
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	440b      	add	r3, r1
 8003fca:	334d      	adds	r3, #77	@ 0x4d
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	f000 8100 	beq.w	80041d4 <HCD_HC_IN_IRQHandler+0xcca>
 8003fd4:	e000      	b.n	8003fd8 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003fd6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003fd8:	78fa      	ldrb	r2, [r7, #3]
 8003fda:	6879      	ldr	r1, [r7, #4]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	011b      	lsls	r3, r3, #4
 8003fe0:	1a9b      	subs	r3, r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	440b      	add	r3, r1
 8003fe6:	334c      	adds	r3, #76	@ 0x4c
 8003fe8:	781a      	ldrb	r2, [r3, #0]
 8003fea:	78fb      	ldrb	r3, [r7, #3]
 8003fec:	4619      	mov	r1, r3
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f006 fcaa 	bl	800a948 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003ff4:	e0ef      	b.n	80041d6 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	78fa      	ldrb	r2, [r7, #3]
 8003ffc:	4611      	mov	r1, r2
 8003ffe:	4618      	mov	r0, r3
 8004000:	f003 fb99 	bl	8007736 <USB_ReadChInterrupts>
 8004004:	4603      	mov	r3, r0
 8004006:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800400a:	2b40      	cmp	r3, #64	@ 0x40
 800400c:	d12f      	bne.n	800406e <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800400e:	78fb      	ldrb	r3, [r7, #3]
 8004010:	015a      	lsls	r2, r3, #5
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	4413      	add	r3, r2
 8004016:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800401a:	461a      	mov	r2, r3
 800401c:	2340      	movs	r3, #64	@ 0x40
 800401e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004020:	78fa      	ldrb	r2, [r7, #3]
 8004022:	6879      	ldr	r1, [r7, #4]
 8004024:	4613      	mov	r3, r2
 8004026:	011b      	lsls	r3, r3, #4
 8004028:	1a9b      	subs	r3, r3, r2
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	440b      	add	r3, r1
 800402e:	334d      	adds	r3, #77	@ 0x4d
 8004030:	2205      	movs	r2, #5
 8004032:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004034:	78fa      	ldrb	r2, [r7, #3]
 8004036:	6879      	ldr	r1, [r7, #4]
 8004038:	4613      	mov	r3, r2
 800403a:	011b      	lsls	r3, r3, #4
 800403c:	1a9b      	subs	r3, r3, r2
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	440b      	add	r3, r1
 8004042:	331a      	adds	r3, #26
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d109      	bne.n	800405e <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800404a:	78fa      	ldrb	r2, [r7, #3]
 800404c:	6879      	ldr	r1, [r7, #4]
 800404e:	4613      	mov	r3, r2
 8004050:	011b      	lsls	r3, r3, #4
 8004052:	1a9b      	subs	r3, r3, r2
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	440b      	add	r3, r1
 8004058:	3344      	adds	r3, #68	@ 0x44
 800405a:	2200      	movs	r2, #0
 800405c:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	78fa      	ldrb	r2, [r7, #3]
 8004064:	4611      	mov	r1, r2
 8004066:	4618      	mov	r0, r3
 8004068:	f004 f90f 	bl	800828a <USB_HC_Halt>
 800406c:	e0b3      	b.n	80041d6 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	78fa      	ldrb	r2, [r7, #3]
 8004074:	4611      	mov	r1, r2
 8004076:	4618      	mov	r0, r3
 8004078:	f003 fb5d 	bl	8007736 <USB_ReadChInterrupts>
 800407c:	4603      	mov	r3, r0
 800407e:	f003 0310 	and.w	r3, r3, #16
 8004082:	2b10      	cmp	r3, #16
 8004084:	f040 80a7 	bne.w	80041d6 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004088:	78fa      	ldrb	r2, [r7, #3]
 800408a:	6879      	ldr	r1, [r7, #4]
 800408c:	4613      	mov	r3, r2
 800408e:	011b      	lsls	r3, r3, #4
 8004090:	1a9b      	subs	r3, r3, r2
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	440b      	add	r3, r1
 8004096:	3326      	adds	r3, #38	@ 0x26
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	2b03      	cmp	r3, #3
 800409c:	d11b      	bne.n	80040d6 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800409e:	78fa      	ldrb	r2, [r7, #3]
 80040a0:	6879      	ldr	r1, [r7, #4]
 80040a2:	4613      	mov	r3, r2
 80040a4:	011b      	lsls	r3, r3, #4
 80040a6:	1a9b      	subs	r3, r3, r2
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	440b      	add	r3, r1
 80040ac:	3344      	adds	r3, #68	@ 0x44
 80040ae:	2200      	movs	r2, #0
 80040b0:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80040b2:	78fa      	ldrb	r2, [r7, #3]
 80040b4:	6879      	ldr	r1, [r7, #4]
 80040b6:	4613      	mov	r3, r2
 80040b8:	011b      	lsls	r3, r3, #4
 80040ba:	1a9b      	subs	r3, r3, r2
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	440b      	add	r3, r1
 80040c0:	334d      	adds	r3, #77	@ 0x4d
 80040c2:	2204      	movs	r2, #4
 80040c4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	78fa      	ldrb	r2, [r7, #3]
 80040cc:	4611      	mov	r1, r2
 80040ce:	4618      	mov	r0, r3
 80040d0:	f004 f8db 	bl	800828a <USB_HC_Halt>
 80040d4:	e03f      	b.n	8004156 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80040d6:	78fa      	ldrb	r2, [r7, #3]
 80040d8:	6879      	ldr	r1, [r7, #4]
 80040da:	4613      	mov	r3, r2
 80040dc:	011b      	lsls	r3, r3, #4
 80040de:	1a9b      	subs	r3, r3, r2
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	440b      	add	r3, r1
 80040e4:	3326      	adds	r3, #38	@ 0x26
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d00a      	beq.n	8004102 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80040ec:	78fa      	ldrb	r2, [r7, #3]
 80040ee:	6879      	ldr	r1, [r7, #4]
 80040f0:	4613      	mov	r3, r2
 80040f2:	011b      	lsls	r3, r3, #4
 80040f4:	1a9b      	subs	r3, r3, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	440b      	add	r3, r1
 80040fa:	3326      	adds	r3, #38	@ 0x26
 80040fc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d129      	bne.n	8004156 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004102:	78fa      	ldrb	r2, [r7, #3]
 8004104:	6879      	ldr	r1, [r7, #4]
 8004106:	4613      	mov	r3, r2
 8004108:	011b      	lsls	r3, r3, #4
 800410a:	1a9b      	subs	r3, r3, r2
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	440b      	add	r3, r1
 8004110:	3344      	adds	r3, #68	@ 0x44
 8004112:	2200      	movs	r2, #0
 8004114:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	799b      	ldrb	r3, [r3, #6]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00a      	beq.n	8004134 <HCD_HC_IN_IRQHandler+0xc2a>
 800411e:	78fa      	ldrb	r2, [r7, #3]
 8004120:	6879      	ldr	r1, [r7, #4]
 8004122:	4613      	mov	r3, r2
 8004124:	011b      	lsls	r3, r3, #4
 8004126:	1a9b      	subs	r3, r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	440b      	add	r3, r1
 800412c:	331b      	adds	r3, #27
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d110      	bne.n	8004156 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8004134:	78fa      	ldrb	r2, [r7, #3]
 8004136:	6879      	ldr	r1, [r7, #4]
 8004138:	4613      	mov	r3, r2
 800413a:	011b      	lsls	r3, r3, #4
 800413c:	1a9b      	subs	r3, r3, r2
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	440b      	add	r3, r1
 8004142:	334d      	adds	r3, #77	@ 0x4d
 8004144:	2204      	movs	r2, #4
 8004146:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	78fa      	ldrb	r2, [r7, #3]
 800414e:	4611      	mov	r1, r2
 8004150:	4618      	mov	r0, r3
 8004152:	f004 f89a 	bl	800828a <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004156:	78fa      	ldrb	r2, [r7, #3]
 8004158:	6879      	ldr	r1, [r7, #4]
 800415a:	4613      	mov	r3, r2
 800415c:	011b      	lsls	r3, r3, #4
 800415e:	1a9b      	subs	r3, r3, r2
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	440b      	add	r3, r1
 8004164:	331b      	adds	r3, #27
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	2b01      	cmp	r3, #1
 800416a:	d129      	bne.n	80041c0 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800416c:	78fa      	ldrb	r2, [r7, #3]
 800416e:	6879      	ldr	r1, [r7, #4]
 8004170:	4613      	mov	r3, r2
 8004172:	011b      	lsls	r3, r3, #4
 8004174:	1a9b      	subs	r3, r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	440b      	add	r3, r1
 800417a:	331b      	adds	r3, #27
 800417c:	2200      	movs	r2, #0
 800417e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004180:	78fb      	ldrb	r3, [r7, #3]
 8004182:	015a      	lsls	r2, r3, #5
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	4413      	add	r3, r2
 8004188:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	78fa      	ldrb	r2, [r7, #3]
 8004190:	0151      	lsls	r1, r2, #5
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	440a      	add	r2, r1
 8004196:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800419a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800419e:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80041a0:	78fb      	ldrb	r3, [r7, #3]
 80041a2:	015a      	lsls	r2, r3, #5
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	4413      	add	r3, r2
 80041a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	78fa      	ldrb	r2, [r7, #3]
 80041b0:	0151      	lsls	r1, r2, #5
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	440a      	add	r2, r1
 80041b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80041ba:	f043 0320 	orr.w	r3, r3, #32
 80041be:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80041c0:	78fb      	ldrb	r3, [r7, #3]
 80041c2:	015a      	lsls	r2, r3, #5
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	4413      	add	r3, r2
 80041c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041cc:	461a      	mov	r2, r3
 80041ce:	2310      	movs	r3, #16
 80041d0:	6093      	str	r3, [r2, #8]
 80041d2:	e000      	b.n	80041d6 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80041d4:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80041d6:	3718      	adds	r7, #24
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b086      	sub	sp, #24
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	460b      	mov	r3, r1
 80041e6:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	78fa      	ldrb	r2, [r7, #3]
 80041f8:	4611      	mov	r1, r2
 80041fa:	4618      	mov	r0, r3
 80041fc:	f003 fa9b 	bl	8007736 <USB_ReadChInterrupts>
 8004200:	4603      	mov	r3, r0
 8004202:	f003 0304 	and.w	r3, r3, #4
 8004206:	2b04      	cmp	r3, #4
 8004208:	d11b      	bne.n	8004242 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800420a:	78fb      	ldrb	r3, [r7, #3]
 800420c:	015a      	lsls	r2, r3, #5
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	4413      	add	r3, r2
 8004212:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004216:	461a      	mov	r2, r3
 8004218:	2304      	movs	r3, #4
 800421a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800421c:	78fa      	ldrb	r2, [r7, #3]
 800421e:	6879      	ldr	r1, [r7, #4]
 8004220:	4613      	mov	r3, r2
 8004222:	011b      	lsls	r3, r3, #4
 8004224:	1a9b      	subs	r3, r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	440b      	add	r3, r1
 800422a:	334d      	adds	r3, #77	@ 0x4d
 800422c:	2207      	movs	r2, #7
 800422e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	78fa      	ldrb	r2, [r7, #3]
 8004236:	4611      	mov	r1, r2
 8004238:	4618      	mov	r0, r3
 800423a:	f004 f826 	bl	800828a <USB_HC_Halt>
 800423e:	f000 bc89 	b.w	8004b54 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	78fa      	ldrb	r2, [r7, #3]
 8004248:	4611      	mov	r1, r2
 800424a:	4618      	mov	r0, r3
 800424c:	f003 fa73 	bl	8007736 <USB_ReadChInterrupts>
 8004250:	4603      	mov	r3, r0
 8004252:	f003 0320 	and.w	r3, r3, #32
 8004256:	2b20      	cmp	r3, #32
 8004258:	f040 8082 	bne.w	8004360 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800425c:	78fb      	ldrb	r3, [r7, #3]
 800425e:	015a      	lsls	r2, r3, #5
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	4413      	add	r3, r2
 8004264:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004268:	461a      	mov	r2, r3
 800426a:	2320      	movs	r3, #32
 800426c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800426e:	78fa      	ldrb	r2, [r7, #3]
 8004270:	6879      	ldr	r1, [r7, #4]
 8004272:	4613      	mov	r3, r2
 8004274:	011b      	lsls	r3, r3, #4
 8004276:	1a9b      	subs	r3, r3, r2
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	440b      	add	r3, r1
 800427c:	3319      	adds	r3, #25
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	2b01      	cmp	r3, #1
 8004282:	d124      	bne.n	80042ce <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8004284:	78fa      	ldrb	r2, [r7, #3]
 8004286:	6879      	ldr	r1, [r7, #4]
 8004288:	4613      	mov	r3, r2
 800428a:	011b      	lsls	r3, r3, #4
 800428c:	1a9b      	subs	r3, r3, r2
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	440b      	add	r3, r1
 8004292:	3319      	adds	r3, #25
 8004294:	2200      	movs	r2, #0
 8004296:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004298:	78fa      	ldrb	r2, [r7, #3]
 800429a:	6879      	ldr	r1, [r7, #4]
 800429c:	4613      	mov	r3, r2
 800429e:	011b      	lsls	r3, r3, #4
 80042a0:	1a9b      	subs	r3, r3, r2
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	440b      	add	r3, r1
 80042a6:	334c      	adds	r3, #76	@ 0x4c
 80042a8:	2202      	movs	r2, #2
 80042aa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80042ac:	78fa      	ldrb	r2, [r7, #3]
 80042ae:	6879      	ldr	r1, [r7, #4]
 80042b0:	4613      	mov	r3, r2
 80042b2:	011b      	lsls	r3, r3, #4
 80042b4:	1a9b      	subs	r3, r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	440b      	add	r3, r1
 80042ba:	334d      	adds	r3, #77	@ 0x4d
 80042bc:	2203      	movs	r2, #3
 80042be:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	78fa      	ldrb	r2, [r7, #3]
 80042c6:	4611      	mov	r1, r2
 80042c8:	4618      	mov	r0, r3
 80042ca:	f003 ffde 	bl	800828a <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80042ce:	78fa      	ldrb	r2, [r7, #3]
 80042d0:	6879      	ldr	r1, [r7, #4]
 80042d2:	4613      	mov	r3, r2
 80042d4:	011b      	lsls	r3, r3, #4
 80042d6:	1a9b      	subs	r3, r3, r2
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	440b      	add	r3, r1
 80042dc:	331a      	adds	r3, #26
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	f040 8437 	bne.w	8004b54 <HCD_HC_OUT_IRQHandler+0x978>
 80042e6:	78fa      	ldrb	r2, [r7, #3]
 80042e8:	6879      	ldr	r1, [r7, #4]
 80042ea:	4613      	mov	r3, r2
 80042ec:	011b      	lsls	r3, r3, #4
 80042ee:	1a9b      	subs	r3, r3, r2
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	440b      	add	r3, r1
 80042f4:	331b      	adds	r3, #27
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f040 842b 	bne.w	8004b54 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80042fe:	78fa      	ldrb	r2, [r7, #3]
 8004300:	6879      	ldr	r1, [r7, #4]
 8004302:	4613      	mov	r3, r2
 8004304:	011b      	lsls	r3, r3, #4
 8004306:	1a9b      	subs	r3, r3, r2
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	440b      	add	r3, r1
 800430c:	3326      	adds	r3, #38	@ 0x26
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	2b01      	cmp	r3, #1
 8004312:	d009      	beq.n	8004328 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004314:	78fa      	ldrb	r2, [r7, #3]
 8004316:	6879      	ldr	r1, [r7, #4]
 8004318:	4613      	mov	r3, r2
 800431a:	011b      	lsls	r3, r3, #4
 800431c:	1a9b      	subs	r3, r3, r2
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	440b      	add	r3, r1
 8004322:	331b      	adds	r3, #27
 8004324:	2201      	movs	r2, #1
 8004326:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004328:	78fa      	ldrb	r2, [r7, #3]
 800432a:	6879      	ldr	r1, [r7, #4]
 800432c:	4613      	mov	r3, r2
 800432e:	011b      	lsls	r3, r3, #4
 8004330:	1a9b      	subs	r3, r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	440b      	add	r3, r1
 8004336:	334d      	adds	r3, #77	@ 0x4d
 8004338:	2203      	movs	r2, #3
 800433a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	78fa      	ldrb	r2, [r7, #3]
 8004342:	4611      	mov	r1, r2
 8004344:	4618      	mov	r0, r3
 8004346:	f003 ffa0 	bl	800828a <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800434a:	78fa      	ldrb	r2, [r7, #3]
 800434c:	6879      	ldr	r1, [r7, #4]
 800434e:	4613      	mov	r3, r2
 8004350:	011b      	lsls	r3, r3, #4
 8004352:	1a9b      	subs	r3, r3, r2
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	440b      	add	r3, r1
 8004358:	3344      	adds	r3, #68	@ 0x44
 800435a:	2200      	movs	r2, #0
 800435c:	601a      	str	r2, [r3, #0]
 800435e:	e3f9      	b.n	8004b54 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	78fa      	ldrb	r2, [r7, #3]
 8004366:	4611      	mov	r1, r2
 8004368:	4618      	mov	r0, r3
 800436a:	f003 f9e4 	bl	8007736 <USB_ReadChInterrupts>
 800436e:	4603      	mov	r3, r0
 8004370:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004374:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004378:	d111      	bne.n	800439e <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800437a:	78fb      	ldrb	r3, [r7, #3]
 800437c:	015a      	lsls	r2, r3, #5
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	4413      	add	r3, r2
 8004382:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004386:	461a      	mov	r2, r3
 8004388:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800438c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	78fa      	ldrb	r2, [r7, #3]
 8004394:	4611      	mov	r1, r2
 8004396:	4618      	mov	r0, r3
 8004398:	f003 ff77 	bl	800828a <USB_HC_Halt>
 800439c:	e3da      	b.n	8004b54 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	78fa      	ldrb	r2, [r7, #3]
 80043a4:	4611      	mov	r1, r2
 80043a6:	4618      	mov	r0, r3
 80043a8:	f003 f9c5 	bl	8007736 <USB_ReadChInterrupts>
 80043ac:	4603      	mov	r3, r0
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d168      	bne.n	8004488 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80043b6:	78fa      	ldrb	r2, [r7, #3]
 80043b8:	6879      	ldr	r1, [r7, #4]
 80043ba:	4613      	mov	r3, r2
 80043bc:	011b      	lsls	r3, r3, #4
 80043be:	1a9b      	subs	r3, r3, r2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	440b      	add	r3, r1
 80043c4:	3344      	adds	r3, #68	@ 0x44
 80043c6:	2200      	movs	r2, #0
 80043c8:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	78fa      	ldrb	r2, [r7, #3]
 80043d0:	4611      	mov	r1, r2
 80043d2:	4618      	mov	r0, r3
 80043d4:	f003 f9af 	bl	8007736 <USB_ReadChInterrupts>
 80043d8:	4603      	mov	r3, r0
 80043da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043de:	2b40      	cmp	r3, #64	@ 0x40
 80043e0:	d112      	bne.n	8004408 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80043e2:	78fa      	ldrb	r2, [r7, #3]
 80043e4:	6879      	ldr	r1, [r7, #4]
 80043e6:	4613      	mov	r3, r2
 80043e8:	011b      	lsls	r3, r3, #4
 80043ea:	1a9b      	subs	r3, r3, r2
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	440b      	add	r3, r1
 80043f0:	3319      	adds	r3, #25
 80043f2:	2201      	movs	r2, #1
 80043f4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80043f6:	78fb      	ldrb	r3, [r7, #3]
 80043f8:	015a      	lsls	r2, r3, #5
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	4413      	add	r3, r2
 80043fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004402:	461a      	mov	r2, r3
 8004404:	2340      	movs	r3, #64	@ 0x40
 8004406:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004408:	78fa      	ldrb	r2, [r7, #3]
 800440a:	6879      	ldr	r1, [r7, #4]
 800440c:	4613      	mov	r3, r2
 800440e:	011b      	lsls	r3, r3, #4
 8004410:	1a9b      	subs	r3, r3, r2
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	440b      	add	r3, r1
 8004416:	331b      	adds	r3, #27
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d019      	beq.n	8004452 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800441e:	78fa      	ldrb	r2, [r7, #3]
 8004420:	6879      	ldr	r1, [r7, #4]
 8004422:	4613      	mov	r3, r2
 8004424:	011b      	lsls	r3, r3, #4
 8004426:	1a9b      	subs	r3, r3, r2
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	440b      	add	r3, r1
 800442c:	331b      	adds	r3, #27
 800442e:	2200      	movs	r2, #0
 8004430:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004432:	78fb      	ldrb	r3, [r7, #3]
 8004434:	015a      	lsls	r2, r3, #5
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	4413      	add	r3, r2
 800443a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	78fa      	ldrb	r2, [r7, #3]
 8004442:	0151      	lsls	r1, r2, #5
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	440a      	add	r2, r1
 8004448:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800444c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004450:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004452:	78fb      	ldrb	r3, [r7, #3]
 8004454:	015a      	lsls	r2, r3, #5
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	4413      	add	r3, r2
 800445a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800445e:	461a      	mov	r2, r3
 8004460:	2301      	movs	r3, #1
 8004462:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8004464:	78fa      	ldrb	r2, [r7, #3]
 8004466:	6879      	ldr	r1, [r7, #4]
 8004468:	4613      	mov	r3, r2
 800446a:	011b      	lsls	r3, r3, #4
 800446c:	1a9b      	subs	r3, r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	440b      	add	r3, r1
 8004472:	334d      	adds	r3, #77	@ 0x4d
 8004474:	2201      	movs	r2, #1
 8004476:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	78fa      	ldrb	r2, [r7, #3]
 800447e:	4611      	mov	r1, r2
 8004480:	4618      	mov	r0, r3
 8004482:	f003 ff02 	bl	800828a <USB_HC_Halt>
 8004486:	e365      	b.n	8004b54 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	78fa      	ldrb	r2, [r7, #3]
 800448e:	4611      	mov	r1, r2
 8004490:	4618      	mov	r0, r3
 8004492:	f003 f950 	bl	8007736 <USB_ReadChInterrupts>
 8004496:	4603      	mov	r3, r0
 8004498:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800449c:	2b40      	cmp	r3, #64	@ 0x40
 800449e:	d139      	bne.n	8004514 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80044a0:	78fa      	ldrb	r2, [r7, #3]
 80044a2:	6879      	ldr	r1, [r7, #4]
 80044a4:	4613      	mov	r3, r2
 80044a6:	011b      	lsls	r3, r3, #4
 80044a8:	1a9b      	subs	r3, r3, r2
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	440b      	add	r3, r1
 80044ae:	334d      	adds	r3, #77	@ 0x4d
 80044b0:	2205      	movs	r2, #5
 80044b2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80044b4:	78fa      	ldrb	r2, [r7, #3]
 80044b6:	6879      	ldr	r1, [r7, #4]
 80044b8:	4613      	mov	r3, r2
 80044ba:	011b      	lsls	r3, r3, #4
 80044bc:	1a9b      	subs	r3, r3, r2
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	440b      	add	r3, r1
 80044c2:	331a      	adds	r3, #26
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d109      	bne.n	80044de <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80044ca:	78fa      	ldrb	r2, [r7, #3]
 80044cc:	6879      	ldr	r1, [r7, #4]
 80044ce:	4613      	mov	r3, r2
 80044d0:	011b      	lsls	r3, r3, #4
 80044d2:	1a9b      	subs	r3, r3, r2
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	440b      	add	r3, r1
 80044d8:	3319      	adds	r3, #25
 80044da:	2201      	movs	r2, #1
 80044dc:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80044de:	78fa      	ldrb	r2, [r7, #3]
 80044e0:	6879      	ldr	r1, [r7, #4]
 80044e2:	4613      	mov	r3, r2
 80044e4:	011b      	lsls	r3, r3, #4
 80044e6:	1a9b      	subs	r3, r3, r2
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	440b      	add	r3, r1
 80044ec:	3344      	adds	r3, #68	@ 0x44
 80044ee:	2200      	movs	r2, #0
 80044f0:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	78fa      	ldrb	r2, [r7, #3]
 80044f8:	4611      	mov	r1, r2
 80044fa:	4618      	mov	r0, r3
 80044fc:	f003 fec5 	bl	800828a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004500:	78fb      	ldrb	r3, [r7, #3]
 8004502:	015a      	lsls	r2, r3, #5
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	4413      	add	r3, r2
 8004508:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800450c:	461a      	mov	r2, r3
 800450e:	2340      	movs	r3, #64	@ 0x40
 8004510:	6093      	str	r3, [r2, #8]
 8004512:	e31f      	b.n	8004b54 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	78fa      	ldrb	r2, [r7, #3]
 800451a:	4611      	mov	r1, r2
 800451c:	4618      	mov	r0, r3
 800451e:	f003 f90a 	bl	8007736 <USB_ReadChInterrupts>
 8004522:	4603      	mov	r3, r0
 8004524:	f003 0308 	and.w	r3, r3, #8
 8004528:	2b08      	cmp	r3, #8
 800452a:	d11a      	bne.n	8004562 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800452c:	78fb      	ldrb	r3, [r7, #3]
 800452e:	015a      	lsls	r2, r3, #5
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	4413      	add	r3, r2
 8004534:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004538:	461a      	mov	r2, r3
 800453a:	2308      	movs	r3, #8
 800453c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800453e:	78fa      	ldrb	r2, [r7, #3]
 8004540:	6879      	ldr	r1, [r7, #4]
 8004542:	4613      	mov	r3, r2
 8004544:	011b      	lsls	r3, r3, #4
 8004546:	1a9b      	subs	r3, r3, r2
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	440b      	add	r3, r1
 800454c:	334d      	adds	r3, #77	@ 0x4d
 800454e:	2206      	movs	r2, #6
 8004550:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	78fa      	ldrb	r2, [r7, #3]
 8004558:	4611      	mov	r1, r2
 800455a:	4618      	mov	r0, r3
 800455c:	f003 fe95 	bl	800828a <USB_HC_Halt>
 8004560:	e2f8      	b.n	8004b54 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	78fa      	ldrb	r2, [r7, #3]
 8004568:	4611      	mov	r1, r2
 800456a:	4618      	mov	r0, r3
 800456c:	f003 f8e3 	bl	8007736 <USB_ReadChInterrupts>
 8004570:	4603      	mov	r3, r0
 8004572:	f003 0310 	and.w	r3, r3, #16
 8004576:	2b10      	cmp	r3, #16
 8004578:	d144      	bne.n	8004604 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800457a:	78fa      	ldrb	r2, [r7, #3]
 800457c:	6879      	ldr	r1, [r7, #4]
 800457e:	4613      	mov	r3, r2
 8004580:	011b      	lsls	r3, r3, #4
 8004582:	1a9b      	subs	r3, r3, r2
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	440b      	add	r3, r1
 8004588:	3344      	adds	r3, #68	@ 0x44
 800458a:	2200      	movs	r2, #0
 800458c:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800458e:	78fa      	ldrb	r2, [r7, #3]
 8004590:	6879      	ldr	r1, [r7, #4]
 8004592:	4613      	mov	r3, r2
 8004594:	011b      	lsls	r3, r3, #4
 8004596:	1a9b      	subs	r3, r3, r2
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	440b      	add	r3, r1
 800459c:	334d      	adds	r3, #77	@ 0x4d
 800459e:	2204      	movs	r2, #4
 80045a0:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80045a2:	78fa      	ldrb	r2, [r7, #3]
 80045a4:	6879      	ldr	r1, [r7, #4]
 80045a6:	4613      	mov	r3, r2
 80045a8:	011b      	lsls	r3, r3, #4
 80045aa:	1a9b      	subs	r3, r3, r2
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	440b      	add	r3, r1
 80045b0:	3319      	adds	r3, #25
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d114      	bne.n	80045e2 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80045b8:	78fa      	ldrb	r2, [r7, #3]
 80045ba:	6879      	ldr	r1, [r7, #4]
 80045bc:	4613      	mov	r3, r2
 80045be:	011b      	lsls	r3, r3, #4
 80045c0:	1a9b      	subs	r3, r3, r2
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	440b      	add	r3, r1
 80045c6:	3318      	adds	r3, #24
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d109      	bne.n	80045e2 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80045ce:	78fa      	ldrb	r2, [r7, #3]
 80045d0:	6879      	ldr	r1, [r7, #4]
 80045d2:	4613      	mov	r3, r2
 80045d4:	011b      	lsls	r3, r3, #4
 80045d6:	1a9b      	subs	r3, r3, r2
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	440b      	add	r3, r1
 80045dc:	3319      	adds	r3, #25
 80045de:	2201      	movs	r2, #1
 80045e0:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	78fa      	ldrb	r2, [r7, #3]
 80045e8:	4611      	mov	r1, r2
 80045ea:	4618      	mov	r0, r3
 80045ec:	f003 fe4d 	bl	800828a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80045f0:	78fb      	ldrb	r3, [r7, #3]
 80045f2:	015a      	lsls	r2, r3, #5
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	4413      	add	r3, r2
 80045f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045fc:	461a      	mov	r2, r3
 80045fe:	2310      	movs	r3, #16
 8004600:	6093      	str	r3, [r2, #8]
 8004602:	e2a7      	b.n	8004b54 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	78fa      	ldrb	r2, [r7, #3]
 800460a:	4611      	mov	r1, r2
 800460c:	4618      	mov	r0, r3
 800460e:	f003 f892 	bl	8007736 <USB_ReadChInterrupts>
 8004612:	4603      	mov	r3, r0
 8004614:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004618:	2b80      	cmp	r3, #128	@ 0x80
 800461a:	f040 8083 	bne.w	8004724 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	799b      	ldrb	r3, [r3, #6]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d111      	bne.n	800464a <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004626:	78fa      	ldrb	r2, [r7, #3]
 8004628:	6879      	ldr	r1, [r7, #4]
 800462a:	4613      	mov	r3, r2
 800462c:	011b      	lsls	r3, r3, #4
 800462e:	1a9b      	subs	r3, r3, r2
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	440b      	add	r3, r1
 8004634:	334d      	adds	r3, #77	@ 0x4d
 8004636:	2207      	movs	r2, #7
 8004638:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	78fa      	ldrb	r2, [r7, #3]
 8004640:	4611      	mov	r1, r2
 8004642:	4618      	mov	r0, r3
 8004644:	f003 fe21 	bl	800828a <USB_HC_Halt>
 8004648:	e062      	b.n	8004710 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800464a:	78fa      	ldrb	r2, [r7, #3]
 800464c:	6879      	ldr	r1, [r7, #4]
 800464e:	4613      	mov	r3, r2
 8004650:	011b      	lsls	r3, r3, #4
 8004652:	1a9b      	subs	r3, r3, r2
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	440b      	add	r3, r1
 8004658:	3344      	adds	r3, #68	@ 0x44
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	1c59      	adds	r1, r3, #1
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	4613      	mov	r3, r2
 8004662:	011b      	lsls	r3, r3, #4
 8004664:	1a9b      	subs	r3, r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	4403      	add	r3, r0
 800466a:	3344      	adds	r3, #68	@ 0x44
 800466c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800466e:	78fa      	ldrb	r2, [r7, #3]
 8004670:	6879      	ldr	r1, [r7, #4]
 8004672:	4613      	mov	r3, r2
 8004674:	011b      	lsls	r3, r3, #4
 8004676:	1a9b      	subs	r3, r3, r2
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	440b      	add	r3, r1
 800467c:	3344      	adds	r3, #68	@ 0x44
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2b02      	cmp	r3, #2
 8004682:	d922      	bls.n	80046ca <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004684:	78fa      	ldrb	r2, [r7, #3]
 8004686:	6879      	ldr	r1, [r7, #4]
 8004688:	4613      	mov	r3, r2
 800468a:	011b      	lsls	r3, r3, #4
 800468c:	1a9b      	subs	r3, r3, r2
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	440b      	add	r3, r1
 8004692:	3344      	adds	r3, #68	@ 0x44
 8004694:	2200      	movs	r2, #0
 8004696:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004698:	78fa      	ldrb	r2, [r7, #3]
 800469a:	6879      	ldr	r1, [r7, #4]
 800469c:	4613      	mov	r3, r2
 800469e:	011b      	lsls	r3, r3, #4
 80046a0:	1a9b      	subs	r3, r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	440b      	add	r3, r1
 80046a6:	334c      	adds	r3, #76	@ 0x4c
 80046a8:	2204      	movs	r2, #4
 80046aa:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80046ac:	78fa      	ldrb	r2, [r7, #3]
 80046ae:	6879      	ldr	r1, [r7, #4]
 80046b0:	4613      	mov	r3, r2
 80046b2:	011b      	lsls	r3, r3, #4
 80046b4:	1a9b      	subs	r3, r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	440b      	add	r3, r1
 80046ba:	334c      	adds	r3, #76	@ 0x4c
 80046bc:	781a      	ldrb	r2, [r3, #0]
 80046be:	78fb      	ldrb	r3, [r7, #3]
 80046c0:	4619      	mov	r1, r3
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f006 f940 	bl	800a948 <HAL_HCD_HC_NotifyURBChange_Callback>
 80046c8:	e022      	b.n	8004710 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80046ca:	78fa      	ldrb	r2, [r7, #3]
 80046cc:	6879      	ldr	r1, [r7, #4]
 80046ce:	4613      	mov	r3, r2
 80046d0:	011b      	lsls	r3, r3, #4
 80046d2:	1a9b      	subs	r3, r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	440b      	add	r3, r1
 80046d8:	334c      	adds	r3, #76	@ 0x4c
 80046da:	2202      	movs	r2, #2
 80046dc:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80046de:	78fb      	ldrb	r3, [r7, #3]
 80046e0:	015a      	lsls	r2, r3, #5
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	4413      	add	r3, r2
 80046e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80046f4:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80046fc:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80046fe:	78fb      	ldrb	r3, [r7, #3]
 8004700:	015a      	lsls	r2, r3, #5
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	4413      	add	r3, r2
 8004706:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800470a:	461a      	mov	r2, r3
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004710:	78fb      	ldrb	r3, [r7, #3]
 8004712:	015a      	lsls	r2, r3, #5
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	4413      	add	r3, r2
 8004718:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800471c:	461a      	mov	r2, r3
 800471e:	2380      	movs	r3, #128	@ 0x80
 8004720:	6093      	str	r3, [r2, #8]
 8004722:	e217      	b.n	8004b54 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	78fa      	ldrb	r2, [r7, #3]
 800472a:	4611      	mov	r1, r2
 800472c:	4618      	mov	r0, r3
 800472e:	f003 f802 	bl	8007736 <USB_ReadChInterrupts>
 8004732:	4603      	mov	r3, r0
 8004734:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004738:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800473c:	d11b      	bne.n	8004776 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800473e:	78fa      	ldrb	r2, [r7, #3]
 8004740:	6879      	ldr	r1, [r7, #4]
 8004742:	4613      	mov	r3, r2
 8004744:	011b      	lsls	r3, r3, #4
 8004746:	1a9b      	subs	r3, r3, r2
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	440b      	add	r3, r1
 800474c:	334d      	adds	r3, #77	@ 0x4d
 800474e:	2209      	movs	r2, #9
 8004750:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	78fa      	ldrb	r2, [r7, #3]
 8004758:	4611      	mov	r1, r2
 800475a:	4618      	mov	r0, r3
 800475c:	f003 fd95 	bl	800828a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004760:	78fb      	ldrb	r3, [r7, #3]
 8004762:	015a      	lsls	r2, r3, #5
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	4413      	add	r3, r2
 8004768:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800476c:	461a      	mov	r2, r3
 800476e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004772:	6093      	str	r3, [r2, #8]
 8004774:	e1ee      	b.n	8004b54 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	78fa      	ldrb	r2, [r7, #3]
 800477c:	4611      	mov	r1, r2
 800477e:	4618      	mov	r0, r3
 8004780:	f002 ffd9 	bl	8007736 <USB_ReadChInterrupts>
 8004784:	4603      	mov	r3, r0
 8004786:	f003 0302 	and.w	r3, r3, #2
 800478a:	2b02      	cmp	r3, #2
 800478c:	f040 81df 	bne.w	8004b4e <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004790:	78fb      	ldrb	r3, [r7, #3]
 8004792:	015a      	lsls	r2, r3, #5
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	4413      	add	r3, r2
 8004798:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800479c:	461a      	mov	r2, r3
 800479e:	2302      	movs	r3, #2
 80047a0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80047a2:	78fa      	ldrb	r2, [r7, #3]
 80047a4:	6879      	ldr	r1, [r7, #4]
 80047a6:	4613      	mov	r3, r2
 80047a8:	011b      	lsls	r3, r3, #4
 80047aa:	1a9b      	subs	r3, r3, r2
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	440b      	add	r3, r1
 80047b0:	334d      	adds	r3, #77	@ 0x4d
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	f040 8093 	bne.w	80048e0 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80047ba:	78fa      	ldrb	r2, [r7, #3]
 80047bc:	6879      	ldr	r1, [r7, #4]
 80047be:	4613      	mov	r3, r2
 80047c0:	011b      	lsls	r3, r3, #4
 80047c2:	1a9b      	subs	r3, r3, r2
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	440b      	add	r3, r1
 80047c8:	334d      	adds	r3, #77	@ 0x4d
 80047ca:	2202      	movs	r2, #2
 80047cc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80047ce:	78fa      	ldrb	r2, [r7, #3]
 80047d0:	6879      	ldr	r1, [r7, #4]
 80047d2:	4613      	mov	r3, r2
 80047d4:	011b      	lsls	r3, r3, #4
 80047d6:	1a9b      	subs	r3, r3, r2
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	440b      	add	r3, r1
 80047dc:	334c      	adds	r3, #76	@ 0x4c
 80047de:	2201      	movs	r2, #1
 80047e0:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80047e2:	78fa      	ldrb	r2, [r7, #3]
 80047e4:	6879      	ldr	r1, [r7, #4]
 80047e6:	4613      	mov	r3, r2
 80047e8:	011b      	lsls	r3, r3, #4
 80047ea:	1a9b      	subs	r3, r3, r2
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	440b      	add	r3, r1
 80047f0:	3326      	adds	r3, #38	@ 0x26
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d00b      	beq.n	8004810 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80047f8:	78fa      	ldrb	r2, [r7, #3]
 80047fa:	6879      	ldr	r1, [r7, #4]
 80047fc:	4613      	mov	r3, r2
 80047fe:	011b      	lsls	r3, r3, #4
 8004800:	1a9b      	subs	r3, r3, r2
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	440b      	add	r3, r1
 8004806:	3326      	adds	r3, #38	@ 0x26
 8004808:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800480a:	2b03      	cmp	r3, #3
 800480c:	f040 8190 	bne.w	8004b30 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	799b      	ldrb	r3, [r3, #6]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d115      	bne.n	8004844 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8004818:	78fa      	ldrb	r2, [r7, #3]
 800481a:	6879      	ldr	r1, [r7, #4]
 800481c:	4613      	mov	r3, r2
 800481e:	011b      	lsls	r3, r3, #4
 8004820:	1a9b      	subs	r3, r3, r2
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	440b      	add	r3, r1
 8004826:	333d      	adds	r3, #61	@ 0x3d
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	78fa      	ldrb	r2, [r7, #3]
 800482c:	f083 0301 	eor.w	r3, r3, #1
 8004830:	b2d8      	uxtb	r0, r3
 8004832:	6879      	ldr	r1, [r7, #4]
 8004834:	4613      	mov	r3, r2
 8004836:	011b      	lsls	r3, r3, #4
 8004838:	1a9b      	subs	r3, r3, r2
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	440b      	add	r3, r1
 800483e:	333d      	adds	r3, #61	@ 0x3d
 8004840:	4602      	mov	r2, r0
 8004842:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	799b      	ldrb	r3, [r3, #6]
 8004848:	2b01      	cmp	r3, #1
 800484a:	f040 8171 	bne.w	8004b30 <HCD_HC_OUT_IRQHandler+0x954>
 800484e:	78fa      	ldrb	r2, [r7, #3]
 8004850:	6879      	ldr	r1, [r7, #4]
 8004852:	4613      	mov	r3, r2
 8004854:	011b      	lsls	r3, r3, #4
 8004856:	1a9b      	subs	r3, r3, r2
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	440b      	add	r3, r1
 800485c:	3334      	adds	r3, #52	@ 0x34
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	f000 8165 	beq.w	8004b30 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8004866:	78fa      	ldrb	r2, [r7, #3]
 8004868:	6879      	ldr	r1, [r7, #4]
 800486a:	4613      	mov	r3, r2
 800486c:	011b      	lsls	r3, r3, #4
 800486e:	1a9b      	subs	r3, r3, r2
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	440b      	add	r3, r1
 8004874:	3334      	adds	r3, #52	@ 0x34
 8004876:	6819      	ldr	r1, [r3, #0]
 8004878:	78fa      	ldrb	r2, [r7, #3]
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	4613      	mov	r3, r2
 800487e:	011b      	lsls	r3, r3, #4
 8004880:	1a9b      	subs	r3, r3, r2
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	4403      	add	r3, r0
 8004886:	3328      	adds	r3, #40	@ 0x28
 8004888:	881b      	ldrh	r3, [r3, #0]
 800488a:	440b      	add	r3, r1
 800488c:	1e59      	subs	r1, r3, #1
 800488e:	78fa      	ldrb	r2, [r7, #3]
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	4613      	mov	r3, r2
 8004894:	011b      	lsls	r3, r3, #4
 8004896:	1a9b      	subs	r3, r3, r2
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	4403      	add	r3, r0
 800489c:	3328      	adds	r3, #40	@ 0x28
 800489e:	881b      	ldrh	r3, [r3, #0]
 80048a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80048a4:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	f003 0301 	and.w	r3, r3, #1
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f000 813f 	beq.w	8004b30 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80048b2:	78fa      	ldrb	r2, [r7, #3]
 80048b4:	6879      	ldr	r1, [r7, #4]
 80048b6:	4613      	mov	r3, r2
 80048b8:	011b      	lsls	r3, r3, #4
 80048ba:	1a9b      	subs	r3, r3, r2
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	440b      	add	r3, r1
 80048c0:	333d      	adds	r3, #61	@ 0x3d
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	78fa      	ldrb	r2, [r7, #3]
 80048c6:	f083 0301 	eor.w	r3, r3, #1
 80048ca:	b2d8      	uxtb	r0, r3
 80048cc:	6879      	ldr	r1, [r7, #4]
 80048ce:	4613      	mov	r3, r2
 80048d0:	011b      	lsls	r3, r3, #4
 80048d2:	1a9b      	subs	r3, r3, r2
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	440b      	add	r3, r1
 80048d8:	333d      	adds	r3, #61	@ 0x3d
 80048da:	4602      	mov	r2, r0
 80048dc:	701a      	strb	r2, [r3, #0]
 80048de:	e127      	b.n	8004b30 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80048e0:	78fa      	ldrb	r2, [r7, #3]
 80048e2:	6879      	ldr	r1, [r7, #4]
 80048e4:	4613      	mov	r3, r2
 80048e6:	011b      	lsls	r3, r3, #4
 80048e8:	1a9b      	subs	r3, r3, r2
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	440b      	add	r3, r1
 80048ee:	334d      	adds	r3, #77	@ 0x4d
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	2b03      	cmp	r3, #3
 80048f4:	d120      	bne.n	8004938 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80048f6:	78fa      	ldrb	r2, [r7, #3]
 80048f8:	6879      	ldr	r1, [r7, #4]
 80048fa:	4613      	mov	r3, r2
 80048fc:	011b      	lsls	r3, r3, #4
 80048fe:	1a9b      	subs	r3, r3, r2
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	440b      	add	r3, r1
 8004904:	334d      	adds	r3, #77	@ 0x4d
 8004906:	2202      	movs	r2, #2
 8004908:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800490a:	78fa      	ldrb	r2, [r7, #3]
 800490c:	6879      	ldr	r1, [r7, #4]
 800490e:	4613      	mov	r3, r2
 8004910:	011b      	lsls	r3, r3, #4
 8004912:	1a9b      	subs	r3, r3, r2
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	440b      	add	r3, r1
 8004918:	331b      	adds	r3, #27
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	2b01      	cmp	r3, #1
 800491e:	f040 8107 	bne.w	8004b30 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004922:	78fa      	ldrb	r2, [r7, #3]
 8004924:	6879      	ldr	r1, [r7, #4]
 8004926:	4613      	mov	r3, r2
 8004928:	011b      	lsls	r3, r3, #4
 800492a:	1a9b      	subs	r3, r3, r2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	440b      	add	r3, r1
 8004930:	334c      	adds	r3, #76	@ 0x4c
 8004932:	2202      	movs	r2, #2
 8004934:	701a      	strb	r2, [r3, #0]
 8004936:	e0fb      	b.n	8004b30 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004938:	78fa      	ldrb	r2, [r7, #3]
 800493a:	6879      	ldr	r1, [r7, #4]
 800493c:	4613      	mov	r3, r2
 800493e:	011b      	lsls	r3, r3, #4
 8004940:	1a9b      	subs	r3, r3, r2
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	440b      	add	r3, r1
 8004946:	334d      	adds	r3, #77	@ 0x4d
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	2b04      	cmp	r3, #4
 800494c:	d13a      	bne.n	80049c4 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800494e:	78fa      	ldrb	r2, [r7, #3]
 8004950:	6879      	ldr	r1, [r7, #4]
 8004952:	4613      	mov	r3, r2
 8004954:	011b      	lsls	r3, r3, #4
 8004956:	1a9b      	subs	r3, r3, r2
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	440b      	add	r3, r1
 800495c:	334d      	adds	r3, #77	@ 0x4d
 800495e:	2202      	movs	r2, #2
 8004960:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004962:	78fa      	ldrb	r2, [r7, #3]
 8004964:	6879      	ldr	r1, [r7, #4]
 8004966:	4613      	mov	r3, r2
 8004968:	011b      	lsls	r3, r3, #4
 800496a:	1a9b      	subs	r3, r3, r2
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	440b      	add	r3, r1
 8004970:	334c      	adds	r3, #76	@ 0x4c
 8004972:	2202      	movs	r2, #2
 8004974:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004976:	78fa      	ldrb	r2, [r7, #3]
 8004978:	6879      	ldr	r1, [r7, #4]
 800497a:	4613      	mov	r3, r2
 800497c:	011b      	lsls	r3, r3, #4
 800497e:	1a9b      	subs	r3, r3, r2
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	440b      	add	r3, r1
 8004984:	331b      	adds	r3, #27
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	2b01      	cmp	r3, #1
 800498a:	f040 80d1 	bne.w	8004b30 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800498e:	78fa      	ldrb	r2, [r7, #3]
 8004990:	6879      	ldr	r1, [r7, #4]
 8004992:	4613      	mov	r3, r2
 8004994:	011b      	lsls	r3, r3, #4
 8004996:	1a9b      	subs	r3, r3, r2
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	440b      	add	r3, r1
 800499c:	331b      	adds	r3, #27
 800499e:	2200      	movs	r2, #0
 80049a0:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80049a2:	78fb      	ldrb	r3, [r7, #3]
 80049a4:	015a      	lsls	r2, r3, #5
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	4413      	add	r3, r2
 80049aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	78fa      	ldrb	r2, [r7, #3]
 80049b2:	0151      	lsls	r1, r2, #5
 80049b4:	693a      	ldr	r2, [r7, #16]
 80049b6:	440a      	add	r2, r1
 80049b8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80049bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049c0:	6053      	str	r3, [r2, #4]
 80049c2:	e0b5      	b.n	8004b30 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80049c4:	78fa      	ldrb	r2, [r7, #3]
 80049c6:	6879      	ldr	r1, [r7, #4]
 80049c8:	4613      	mov	r3, r2
 80049ca:	011b      	lsls	r3, r3, #4
 80049cc:	1a9b      	subs	r3, r3, r2
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	440b      	add	r3, r1
 80049d2:	334d      	adds	r3, #77	@ 0x4d
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	2b05      	cmp	r3, #5
 80049d8:	d114      	bne.n	8004a04 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80049da:	78fa      	ldrb	r2, [r7, #3]
 80049dc:	6879      	ldr	r1, [r7, #4]
 80049de:	4613      	mov	r3, r2
 80049e0:	011b      	lsls	r3, r3, #4
 80049e2:	1a9b      	subs	r3, r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	440b      	add	r3, r1
 80049e8:	334d      	adds	r3, #77	@ 0x4d
 80049ea:	2202      	movs	r2, #2
 80049ec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80049ee:	78fa      	ldrb	r2, [r7, #3]
 80049f0:	6879      	ldr	r1, [r7, #4]
 80049f2:	4613      	mov	r3, r2
 80049f4:	011b      	lsls	r3, r3, #4
 80049f6:	1a9b      	subs	r3, r3, r2
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	440b      	add	r3, r1
 80049fc:	334c      	adds	r3, #76	@ 0x4c
 80049fe:	2202      	movs	r2, #2
 8004a00:	701a      	strb	r2, [r3, #0]
 8004a02:	e095      	b.n	8004b30 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004a04:	78fa      	ldrb	r2, [r7, #3]
 8004a06:	6879      	ldr	r1, [r7, #4]
 8004a08:	4613      	mov	r3, r2
 8004a0a:	011b      	lsls	r3, r3, #4
 8004a0c:	1a9b      	subs	r3, r3, r2
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	440b      	add	r3, r1
 8004a12:	334d      	adds	r3, #77	@ 0x4d
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	2b06      	cmp	r3, #6
 8004a18:	d114      	bne.n	8004a44 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004a1a:	78fa      	ldrb	r2, [r7, #3]
 8004a1c:	6879      	ldr	r1, [r7, #4]
 8004a1e:	4613      	mov	r3, r2
 8004a20:	011b      	lsls	r3, r3, #4
 8004a22:	1a9b      	subs	r3, r3, r2
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	440b      	add	r3, r1
 8004a28:	334d      	adds	r3, #77	@ 0x4d
 8004a2a:	2202      	movs	r2, #2
 8004a2c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8004a2e:	78fa      	ldrb	r2, [r7, #3]
 8004a30:	6879      	ldr	r1, [r7, #4]
 8004a32:	4613      	mov	r3, r2
 8004a34:	011b      	lsls	r3, r3, #4
 8004a36:	1a9b      	subs	r3, r3, r2
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	440b      	add	r3, r1
 8004a3c:	334c      	adds	r3, #76	@ 0x4c
 8004a3e:	2205      	movs	r2, #5
 8004a40:	701a      	strb	r2, [r3, #0]
 8004a42:	e075      	b.n	8004b30 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004a44:	78fa      	ldrb	r2, [r7, #3]
 8004a46:	6879      	ldr	r1, [r7, #4]
 8004a48:	4613      	mov	r3, r2
 8004a4a:	011b      	lsls	r3, r3, #4
 8004a4c:	1a9b      	subs	r3, r3, r2
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	440b      	add	r3, r1
 8004a52:	334d      	adds	r3, #77	@ 0x4d
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	2b07      	cmp	r3, #7
 8004a58:	d00a      	beq.n	8004a70 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004a5a:	78fa      	ldrb	r2, [r7, #3]
 8004a5c:	6879      	ldr	r1, [r7, #4]
 8004a5e:	4613      	mov	r3, r2
 8004a60:	011b      	lsls	r3, r3, #4
 8004a62:	1a9b      	subs	r3, r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	440b      	add	r3, r1
 8004a68:	334d      	adds	r3, #77	@ 0x4d
 8004a6a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004a6c:	2b09      	cmp	r3, #9
 8004a6e:	d170      	bne.n	8004b52 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004a70:	78fa      	ldrb	r2, [r7, #3]
 8004a72:	6879      	ldr	r1, [r7, #4]
 8004a74:	4613      	mov	r3, r2
 8004a76:	011b      	lsls	r3, r3, #4
 8004a78:	1a9b      	subs	r3, r3, r2
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	440b      	add	r3, r1
 8004a7e:	334d      	adds	r3, #77	@ 0x4d
 8004a80:	2202      	movs	r2, #2
 8004a82:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004a84:	78fa      	ldrb	r2, [r7, #3]
 8004a86:	6879      	ldr	r1, [r7, #4]
 8004a88:	4613      	mov	r3, r2
 8004a8a:	011b      	lsls	r3, r3, #4
 8004a8c:	1a9b      	subs	r3, r3, r2
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	440b      	add	r3, r1
 8004a92:	3344      	adds	r3, #68	@ 0x44
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	1c59      	adds	r1, r3, #1
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	011b      	lsls	r3, r3, #4
 8004a9e:	1a9b      	subs	r3, r3, r2
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	4403      	add	r3, r0
 8004aa4:	3344      	adds	r3, #68	@ 0x44
 8004aa6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004aa8:	78fa      	ldrb	r2, [r7, #3]
 8004aaa:	6879      	ldr	r1, [r7, #4]
 8004aac:	4613      	mov	r3, r2
 8004aae:	011b      	lsls	r3, r3, #4
 8004ab0:	1a9b      	subs	r3, r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	440b      	add	r3, r1
 8004ab6:	3344      	adds	r3, #68	@ 0x44
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d914      	bls.n	8004ae8 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004abe:	78fa      	ldrb	r2, [r7, #3]
 8004ac0:	6879      	ldr	r1, [r7, #4]
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	011b      	lsls	r3, r3, #4
 8004ac6:	1a9b      	subs	r3, r3, r2
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	440b      	add	r3, r1
 8004acc:	3344      	adds	r3, #68	@ 0x44
 8004ace:	2200      	movs	r2, #0
 8004ad0:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004ad2:	78fa      	ldrb	r2, [r7, #3]
 8004ad4:	6879      	ldr	r1, [r7, #4]
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	011b      	lsls	r3, r3, #4
 8004ada:	1a9b      	subs	r3, r3, r2
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	440b      	add	r3, r1
 8004ae0:	334c      	adds	r3, #76	@ 0x4c
 8004ae2:	2204      	movs	r2, #4
 8004ae4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004ae6:	e022      	b.n	8004b2e <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004ae8:	78fa      	ldrb	r2, [r7, #3]
 8004aea:	6879      	ldr	r1, [r7, #4]
 8004aec:	4613      	mov	r3, r2
 8004aee:	011b      	lsls	r3, r3, #4
 8004af0:	1a9b      	subs	r3, r3, r2
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	440b      	add	r3, r1
 8004af6:	334c      	adds	r3, #76	@ 0x4c
 8004af8:	2202      	movs	r2, #2
 8004afa:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004afc:	78fb      	ldrb	r3, [r7, #3]
 8004afe:	015a      	lsls	r2, r3, #5
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	4413      	add	r3, r2
 8004b04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004b12:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004b1a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004b1c:	78fb      	ldrb	r3, [r7, #3]
 8004b1e:	015a      	lsls	r2, r3, #5
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	4413      	add	r3, r2
 8004b24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b28:	461a      	mov	r2, r3
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004b2e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004b30:	78fa      	ldrb	r2, [r7, #3]
 8004b32:	6879      	ldr	r1, [r7, #4]
 8004b34:	4613      	mov	r3, r2
 8004b36:	011b      	lsls	r3, r3, #4
 8004b38:	1a9b      	subs	r3, r3, r2
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	440b      	add	r3, r1
 8004b3e:	334c      	adds	r3, #76	@ 0x4c
 8004b40:	781a      	ldrb	r2, [r3, #0]
 8004b42:	78fb      	ldrb	r3, [r7, #3]
 8004b44:	4619      	mov	r1, r3
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f005 fefe 	bl	800a948 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004b4c:	e002      	b.n	8004b54 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004b4e:	bf00      	nop
 8004b50:	e000      	b.n	8004b54 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8004b52:	bf00      	nop
  }
}
 8004b54:	3718      	adds	r7, #24
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}

08004b5a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004b5a:	b580      	push	{r7, lr}
 8004b5c:	b08a      	sub	sp, #40	@ 0x28
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b6a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	6a1b      	ldr	r3, [r3, #32]
 8004b72:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	f003 030f 	and.w	r3, r3, #15
 8004b7a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	0c5b      	lsrs	r3, r3, #17
 8004b80:	f003 030f 	and.w	r3, r3, #15
 8004b84:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	091b      	lsrs	r3, r3, #4
 8004b8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b8e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d004      	beq.n	8004ba0 <HCD_RXQLVL_IRQHandler+0x46>
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	2b05      	cmp	r3, #5
 8004b9a:	f000 80b6 	beq.w	8004d0a <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004b9e:	e0b7      	b.n	8004d10 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	f000 80b3 	beq.w	8004d0e <HCD_RXQLVL_IRQHandler+0x1b4>
 8004ba8:	6879      	ldr	r1, [r7, #4]
 8004baa:	69ba      	ldr	r2, [r7, #24]
 8004bac:	4613      	mov	r3, r2
 8004bae:	011b      	lsls	r3, r3, #4
 8004bb0:	1a9b      	subs	r3, r3, r2
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	440b      	add	r3, r1
 8004bb6:	332c      	adds	r3, #44	@ 0x2c
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	f000 80a7 	beq.w	8004d0e <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004bc0:	6879      	ldr	r1, [r7, #4]
 8004bc2:	69ba      	ldr	r2, [r7, #24]
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	011b      	lsls	r3, r3, #4
 8004bc8:	1a9b      	subs	r3, r3, r2
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	440b      	add	r3, r1
 8004bce:	3338      	adds	r3, #56	@ 0x38
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	18d1      	adds	r1, r2, r3
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	69ba      	ldr	r2, [r7, #24]
 8004bda:	4613      	mov	r3, r2
 8004bdc:	011b      	lsls	r3, r3, #4
 8004bde:	1a9b      	subs	r3, r3, r2
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	4403      	add	r3, r0
 8004be4:	3334      	adds	r3, #52	@ 0x34
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4299      	cmp	r1, r3
 8004bea:	f200 8083 	bhi.w	8004cf4 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6818      	ldr	r0, [r3, #0]
 8004bf2:	6879      	ldr	r1, [r7, #4]
 8004bf4:	69ba      	ldr	r2, [r7, #24]
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	011b      	lsls	r3, r3, #4
 8004bfa:	1a9b      	subs	r3, r3, r2
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	440b      	add	r3, r1
 8004c00:	332c      	adds	r3, #44	@ 0x2c
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	693a      	ldr	r2, [r7, #16]
 8004c06:	b292      	uxth	r2, r2
 8004c08:	4619      	mov	r1, r3
 8004c0a:	f002 fd29 	bl	8007660 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8004c0e:	6879      	ldr	r1, [r7, #4]
 8004c10:	69ba      	ldr	r2, [r7, #24]
 8004c12:	4613      	mov	r3, r2
 8004c14:	011b      	lsls	r3, r3, #4
 8004c16:	1a9b      	subs	r3, r3, r2
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	440b      	add	r3, r1
 8004c1c:	332c      	adds	r3, #44	@ 0x2c
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	18d1      	adds	r1, r2, r3
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	69ba      	ldr	r2, [r7, #24]
 8004c28:	4613      	mov	r3, r2
 8004c2a:	011b      	lsls	r3, r3, #4
 8004c2c:	1a9b      	subs	r3, r3, r2
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	4403      	add	r3, r0
 8004c32:	332c      	adds	r3, #44	@ 0x2c
 8004c34:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8004c36:	6879      	ldr	r1, [r7, #4]
 8004c38:	69ba      	ldr	r2, [r7, #24]
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	011b      	lsls	r3, r3, #4
 8004c3e:	1a9b      	subs	r3, r3, r2
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	440b      	add	r3, r1
 8004c44:	3338      	adds	r3, #56	@ 0x38
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	18d1      	adds	r1, r2, r3
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	69ba      	ldr	r2, [r7, #24]
 8004c50:	4613      	mov	r3, r2
 8004c52:	011b      	lsls	r3, r3, #4
 8004c54:	1a9b      	subs	r3, r3, r2
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	4403      	add	r3, r0
 8004c5a:	3338      	adds	r3, #56	@ 0x38
 8004c5c:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	015a      	lsls	r2, r3, #5
 8004c62:	6a3b      	ldr	r3, [r7, #32]
 8004c64:	4413      	add	r3, r2
 8004c66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c6a:	691b      	ldr	r3, [r3, #16]
 8004c6c:	0cdb      	lsrs	r3, r3, #19
 8004c6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c72:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004c74:	6879      	ldr	r1, [r7, #4]
 8004c76:	69ba      	ldr	r2, [r7, #24]
 8004c78:	4613      	mov	r3, r2
 8004c7a:	011b      	lsls	r3, r3, #4
 8004c7c:	1a9b      	subs	r3, r3, r2
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	440b      	add	r3, r1
 8004c82:	3328      	adds	r3, #40	@ 0x28
 8004c84:	881b      	ldrh	r3, [r3, #0]
 8004c86:	461a      	mov	r2, r3
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d13f      	bne.n	8004d0e <HCD_RXQLVL_IRQHandler+0x1b4>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d03c      	beq.n	8004d0e <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	015a      	lsls	r2, r3, #5
 8004c98:	6a3b      	ldr	r3, [r7, #32]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004caa:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004cb2:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	015a      	lsls	r2, r3, #5
 8004cb8:	6a3b      	ldr	r3, [r7, #32]
 8004cba:	4413      	add	r3, r2
 8004cbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004cc6:	6879      	ldr	r1, [r7, #4]
 8004cc8:	69ba      	ldr	r2, [r7, #24]
 8004cca:	4613      	mov	r3, r2
 8004ccc:	011b      	lsls	r3, r3, #4
 8004cce:	1a9b      	subs	r3, r3, r2
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	440b      	add	r3, r1
 8004cd4:	333c      	adds	r3, #60	@ 0x3c
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	f083 0301 	eor.w	r3, r3, #1
 8004cdc:	b2d8      	uxtb	r0, r3
 8004cde:	6879      	ldr	r1, [r7, #4]
 8004ce0:	69ba      	ldr	r2, [r7, #24]
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	011b      	lsls	r3, r3, #4
 8004ce6:	1a9b      	subs	r3, r3, r2
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	440b      	add	r3, r1
 8004cec:	333c      	adds	r3, #60	@ 0x3c
 8004cee:	4602      	mov	r2, r0
 8004cf0:	701a      	strb	r2, [r3, #0]
      break;
 8004cf2:	e00c      	b.n	8004d0e <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004cf4:	6879      	ldr	r1, [r7, #4]
 8004cf6:	69ba      	ldr	r2, [r7, #24]
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	011b      	lsls	r3, r3, #4
 8004cfc:	1a9b      	subs	r3, r3, r2
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	440b      	add	r3, r1
 8004d02:	334c      	adds	r3, #76	@ 0x4c
 8004d04:	2204      	movs	r2, #4
 8004d06:	701a      	strb	r2, [r3, #0]
      break;
 8004d08:	e001      	b.n	8004d0e <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004d0a:	bf00      	nop
 8004d0c:	e000      	b.n	8004d10 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8004d0e:	bf00      	nop
  }
}
 8004d10:	bf00      	nop
 8004d12:	3728      	adds	r7, #40	@ 0x28
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b086      	sub	sp, #24
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004d44:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f003 0302 	and.w	r3, r3, #2
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d10b      	bne.n	8004d68 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f003 0301 	and.w	r3, r3, #1
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d102      	bne.n	8004d60 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f005 fdd8 	bl	800a910 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	f043 0302 	orr.w	r3, r3, #2
 8004d66:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f003 0308 	and.w	r3, r3, #8
 8004d6e:	2b08      	cmp	r3, #8
 8004d70:	d132      	bne.n	8004dd8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	f043 0308 	orr.w	r3, r3, #8
 8004d78:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f003 0304 	and.w	r3, r3, #4
 8004d80:	2b04      	cmp	r3, #4
 8004d82:	d126      	bne.n	8004dd2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	7a5b      	ldrb	r3, [r3, #9]
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d113      	bne.n	8004db4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004d92:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004d96:	d106      	bne.n	8004da6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2102      	movs	r1, #2
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f002 fdf4 	bl	800798c <USB_InitFSLSPClkSel>
 8004da4:	e011      	b.n	8004dca <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2101      	movs	r1, #1
 8004dac:	4618      	mov	r0, r3
 8004dae:	f002 fded 	bl	800798c <USB_InitFSLSPClkSel>
 8004db2:	e00a      	b.n	8004dca <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	79db      	ldrb	r3, [r3, #7]
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d106      	bne.n	8004dca <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004dc8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f005 fdca 	bl	800a964 <HAL_HCD_PortEnabled_Callback>
 8004dd0:	e002      	b.n	8004dd8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f005 fdd4 	bl	800a980 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f003 0320 	and.w	r3, r3, #32
 8004dde:	2b20      	cmp	r3, #32
 8004de0:	d103      	bne.n	8004dea <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	f043 0320 	orr.w	r3, r3, #32
 8004de8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004df0:	461a      	mov	r2, r3
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	6013      	str	r3, [r2, #0]
}
 8004df6:	bf00      	nop
 8004df8:	3718      	adds	r7, #24
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
	...

08004e00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d101      	bne.n	8004e12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e12b      	b.n	800506a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d106      	bne.n	8004e2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f7fc f9c4 	bl	80011b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2224      	movs	r2, #36	@ 0x24
 8004e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f022 0201 	bic.w	r2, r2, #1
 8004e42:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004e52:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004e62:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004e64:	f001 fa20 	bl	80062a8 <HAL_RCC_GetPCLK1Freq>
 8004e68:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	4a81      	ldr	r2, [pc, #516]	@ (8005074 <HAL_I2C_Init+0x274>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d807      	bhi.n	8004e84 <HAL_I2C_Init+0x84>
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	4a80      	ldr	r2, [pc, #512]	@ (8005078 <HAL_I2C_Init+0x278>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	bf94      	ite	ls
 8004e7c:	2301      	movls	r3, #1
 8004e7e:	2300      	movhi	r3, #0
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	e006      	b.n	8004e92 <HAL_I2C_Init+0x92>
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	4a7d      	ldr	r2, [pc, #500]	@ (800507c <HAL_I2C_Init+0x27c>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	bf94      	ite	ls
 8004e8c:	2301      	movls	r3, #1
 8004e8e:	2300      	movhi	r3, #0
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d001      	beq.n	8004e9a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e0e7      	b.n	800506a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	4a78      	ldr	r2, [pc, #480]	@ (8005080 <HAL_I2C_Init+0x280>)
 8004e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea2:	0c9b      	lsrs	r3, r3, #18
 8004ea4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68ba      	ldr	r2, [r7, #8]
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	6a1b      	ldr	r3, [r3, #32]
 8004ec0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	4a6a      	ldr	r2, [pc, #424]	@ (8005074 <HAL_I2C_Init+0x274>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d802      	bhi.n	8004ed4 <HAL_I2C_Init+0xd4>
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	3301      	adds	r3, #1
 8004ed2:	e009      	b.n	8004ee8 <HAL_I2C_Init+0xe8>
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004eda:	fb02 f303 	mul.w	r3, r2, r3
 8004ede:	4a69      	ldr	r2, [pc, #420]	@ (8005084 <HAL_I2C_Init+0x284>)
 8004ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee4:	099b      	lsrs	r3, r3, #6
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	6812      	ldr	r2, [r2, #0]
 8004eec:	430b      	orrs	r3, r1
 8004eee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	69db      	ldr	r3, [r3, #28]
 8004ef6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004efa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	495c      	ldr	r1, [pc, #368]	@ (8005074 <HAL_I2C_Init+0x274>)
 8004f04:	428b      	cmp	r3, r1
 8004f06:	d819      	bhi.n	8004f3c <HAL_I2C_Init+0x13c>
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	1e59      	subs	r1, r3, #1
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	005b      	lsls	r3, r3, #1
 8004f12:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f16:	1c59      	adds	r1, r3, #1
 8004f18:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004f1c:	400b      	ands	r3, r1
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d00a      	beq.n	8004f38 <HAL_I2C_Init+0x138>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	1e59      	subs	r1, r3, #1
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	005b      	lsls	r3, r3, #1
 8004f2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f30:	3301      	adds	r3, #1
 8004f32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f36:	e051      	b.n	8004fdc <HAL_I2C_Init+0x1dc>
 8004f38:	2304      	movs	r3, #4
 8004f3a:	e04f      	b.n	8004fdc <HAL_I2C_Init+0x1dc>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d111      	bne.n	8004f68 <HAL_I2C_Init+0x168>
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	1e58      	subs	r0, r3, #1
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6859      	ldr	r1, [r3, #4]
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	005b      	lsls	r3, r3, #1
 8004f50:	440b      	add	r3, r1
 8004f52:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f56:	3301      	adds	r3, #1
 8004f58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	bf0c      	ite	eq
 8004f60:	2301      	moveq	r3, #1
 8004f62:	2300      	movne	r3, #0
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	e012      	b.n	8004f8e <HAL_I2C_Init+0x18e>
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	1e58      	subs	r0, r3, #1
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6859      	ldr	r1, [r3, #4]
 8004f70:	460b      	mov	r3, r1
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	440b      	add	r3, r1
 8004f76:	0099      	lsls	r1, r3, #2
 8004f78:	440b      	add	r3, r1
 8004f7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f7e:	3301      	adds	r3, #1
 8004f80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	bf0c      	ite	eq
 8004f88:	2301      	moveq	r3, #1
 8004f8a:	2300      	movne	r3, #0
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d001      	beq.n	8004f96 <HAL_I2C_Init+0x196>
 8004f92:	2301      	movs	r3, #1
 8004f94:	e022      	b.n	8004fdc <HAL_I2C_Init+0x1dc>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d10e      	bne.n	8004fbc <HAL_I2C_Init+0x1bc>
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	1e58      	subs	r0, r3, #1
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6859      	ldr	r1, [r3, #4]
 8004fa6:	460b      	mov	r3, r1
 8004fa8:	005b      	lsls	r3, r3, #1
 8004faa:	440b      	add	r3, r1
 8004fac:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004fba:	e00f      	b.n	8004fdc <HAL_I2C_Init+0x1dc>
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	1e58      	subs	r0, r3, #1
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6859      	ldr	r1, [r3, #4]
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	440b      	add	r3, r1
 8004fca:	0099      	lsls	r1, r3, #2
 8004fcc:	440b      	add	r3, r1
 8004fce:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fd8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004fdc:	6879      	ldr	r1, [r7, #4]
 8004fde:	6809      	ldr	r1, [r1, #0]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	69da      	ldr	r2, [r3, #28]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a1b      	ldr	r3, [r3, #32]
 8004ff6:	431a      	orrs	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	430a      	orrs	r2, r1
 8004ffe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800500a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	6911      	ldr	r1, [r2, #16]
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	68d2      	ldr	r2, [r2, #12]
 8005016:	4311      	orrs	r1, r2
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	6812      	ldr	r2, [r2, #0]
 800501c:	430b      	orrs	r3, r1
 800501e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	695a      	ldr	r2, [r3, #20]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	699b      	ldr	r3, [r3, #24]
 8005032:	431a      	orrs	r2, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	430a      	orrs	r2, r1
 800503a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f042 0201 	orr.w	r2, r2, #1
 800504a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2220      	movs	r2, #32
 8005056:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3710      	adds	r7, #16
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	000186a0 	.word	0x000186a0
 8005078:	001e847f 	.word	0x001e847f
 800507c:	003d08ff 	.word	0x003d08ff
 8005080:	431bde83 	.word	0x431bde83
 8005084:	10624dd3 	.word	0x10624dd3

08005088 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b088      	sub	sp, #32
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d101      	bne.n	800509a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e128      	b.n	80052ec <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d109      	bne.n	80050ba <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a90      	ldr	r2, [pc, #576]	@ (80052f4 <HAL_I2S_Init+0x26c>)
 80050b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f7fc f8c5 	bl	8001244 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2202      	movs	r2, #2
 80050be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	69db      	ldr	r3, [r3, #28]
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	6812      	ldr	r2, [r2, #0]
 80050cc:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80050d0:	f023 030f 	bic.w	r3, r3, #15
 80050d4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2202      	movs	r2, #2
 80050dc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	695b      	ldr	r3, [r3, #20]
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d060      	beq.n	80051a8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d102      	bne.n	80050f4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80050ee:	2310      	movs	r3, #16
 80050f0:	617b      	str	r3, [r7, #20]
 80050f2:	e001      	b.n	80050f8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80050f4:	2320      	movs	r3, #32
 80050f6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	2b20      	cmp	r3, #32
 80050fe:	d802      	bhi.n	8005106 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	005b      	lsls	r3, r3, #1
 8005104:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005106:	2001      	movs	r0, #1
 8005108:	f001 f9c4 	bl	8006494 <HAL_RCCEx_GetPeriphCLKFreq>
 800510c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005116:	d125      	bne.n	8005164 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d010      	beq.n	8005142 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	fbb2 f2f3 	udiv	r2, r2, r3
 800512a:	4613      	mov	r3, r2
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	4413      	add	r3, r2
 8005130:	005b      	lsls	r3, r3, #1
 8005132:	461a      	mov	r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	695b      	ldr	r3, [r3, #20]
 8005138:	fbb2 f3f3 	udiv	r3, r2, r3
 800513c:	3305      	adds	r3, #5
 800513e:	613b      	str	r3, [r7, #16]
 8005140:	e01f      	b.n	8005182 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	00db      	lsls	r3, r3, #3
 8005146:	68fa      	ldr	r2, [r7, #12]
 8005148:	fbb2 f2f3 	udiv	r2, r2, r3
 800514c:	4613      	mov	r3, r2
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	4413      	add	r3, r2
 8005152:	005b      	lsls	r3, r3, #1
 8005154:	461a      	mov	r2, r3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	fbb2 f3f3 	udiv	r3, r2, r3
 800515e:	3305      	adds	r3, #5
 8005160:	613b      	str	r3, [r7, #16]
 8005162:	e00e      	b.n	8005182 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	fbb2 f2f3 	udiv	r2, r2, r3
 800516c:	4613      	mov	r3, r2
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	4413      	add	r3, r2
 8005172:	005b      	lsls	r3, r3, #1
 8005174:	461a      	mov	r2, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	fbb2 f3f3 	udiv	r3, r2, r3
 800517e:	3305      	adds	r3, #5
 8005180:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	4a5c      	ldr	r2, [pc, #368]	@ (80052f8 <HAL_I2S_Init+0x270>)
 8005186:	fba2 2303 	umull	r2, r3, r2, r3
 800518a:	08db      	lsrs	r3, r3, #3
 800518c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	f003 0301 	and.w	r3, r3, #1
 8005194:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005196:	693a      	ldr	r2, [r7, #16]
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	085b      	lsrs	r3, r3, #1
 800519e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	021b      	lsls	r3, r3, #8
 80051a4:	61bb      	str	r3, [r7, #24]
 80051a6:	e003      	b.n	80051b0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80051a8:	2302      	movs	r3, #2
 80051aa:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80051ac:	2300      	movs	r3, #0
 80051ae:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d902      	bls.n	80051bc <HAL_I2S_Init+0x134>
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	2bff      	cmp	r3, #255	@ 0xff
 80051ba:	d907      	bls.n	80051cc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051c0:	f043 0210 	orr.w	r2, r3, #16
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e08f      	b.n	80052ec <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	691a      	ldr	r2, [r3, #16]
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	ea42 0103 	orr.w	r1, r2, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	69fa      	ldr	r2, [r7, #28]
 80051dc:	430a      	orrs	r2, r1
 80051de:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	69db      	ldr	r3, [r3, #28]
 80051e6:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80051ea:	f023 030f 	bic.w	r3, r3, #15
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	6851      	ldr	r1, [r2, #4]
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	6892      	ldr	r2, [r2, #8]
 80051f6:	4311      	orrs	r1, r2
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	68d2      	ldr	r2, [r2, #12]
 80051fc:	4311      	orrs	r1, r2
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	6992      	ldr	r2, [r2, #24]
 8005202:	430a      	orrs	r2, r1
 8005204:	431a      	orrs	r2, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800520e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a1b      	ldr	r3, [r3, #32]
 8005214:	2b01      	cmp	r3, #1
 8005216:	d161      	bne.n	80052dc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a38      	ldr	r2, [pc, #224]	@ (80052fc <HAL_I2S_Init+0x274>)
 800521c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a37      	ldr	r2, [pc, #220]	@ (8005300 <HAL_I2S_Init+0x278>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d101      	bne.n	800522c <HAL_I2S_Init+0x1a4>
 8005228:	4b36      	ldr	r3, [pc, #216]	@ (8005304 <HAL_I2S_Init+0x27c>)
 800522a:	e001      	b.n	8005230 <HAL_I2S_Init+0x1a8>
 800522c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005230:	69db      	ldr	r3, [r3, #28]
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	6812      	ldr	r2, [r2, #0]
 8005236:	4932      	ldr	r1, [pc, #200]	@ (8005300 <HAL_I2S_Init+0x278>)
 8005238:	428a      	cmp	r2, r1
 800523a:	d101      	bne.n	8005240 <HAL_I2S_Init+0x1b8>
 800523c:	4a31      	ldr	r2, [pc, #196]	@ (8005304 <HAL_I2S_Init+0x27c>)
 800523e:	e001      	b.n	8005244 <HAL_I2S_Init+0x1bc>
 8005240:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8005244:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005248:	f023 030f 	bic.w	r3, r3, #15
 800524c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a2b      	ldr	r2, [pc, #172]	@ (8005300 <HAL_I2S_Init+0x278>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d101      	bne.n	800525c <HAL_I2S_Init+0x1d4>
 8005258:	4b2a      	ldr	r3, [pc, #168]	@ (8005304 <HAL_I2S_Init+0x27c>)
 800525a:	e001      	b.n	8005260 <HAL_I2S_Init+0x1d8>
 800525c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005260:	2202      	movs	r2, #2
 8005262:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a25      	ldr	r2, [pc, #148]	@ (8005300 <HAL_I2S_Init+0x278>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d101      	bne.n	8005272 <HAL_I2S_Init+0x1ea>
 800526e:	4b25      	ldr	r3, [pc, #148]	@ (8005304 <HAL_I2S_Init+0x27c>)
 8005270:	e001      	b.n	8005276 <HAL_I2S_Init+0x1ee>
 8005272:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005276:	69db      	ldr	r3, [r3, #28]
 8005278:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005282:	d003      	beq.n	800528c <HAL_I2S_Init+0x204>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d103      	bne.n	8005294 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800528c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005290:	613b      	str	r3, [r7, #16]
 8005292:	e001      	b.n	8005298 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005294:	2300      	movs	r3, #0
 8005296:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80052a2:	4313      	orrs	r3, r2
 80052a4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80052ac:	4313      	orrs	r3, r2
 80052ae:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	699b      	ldr	r3, [r3, #24]
 80052b4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80052b6:	4313      	orrs	r3, r2
 80052b8:	b29a      	uxth	r2, r3
 80052ba:	897b      	ldrh	r3, [r7, #10]
 80052bc:	4313      	orrs	r3, r2
 80052be:	b29b      	uxth	r3, r3
 80052c0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80052c4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a0d      	ldr	r2, [pc, #52]	@ (8005300 <HAL_I2S_Init+0x278>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d101      	bne.n	80052d4 <HAL_I2S_Init+0x24c>
 80052d0:	4b0c      	ldr	r3, [pc, #48]	@ (8005304 <HAL_I2S_Init+0x27c>)
 80052d2:	e001      	b.n	80052d8 <HAL_I2S_Init+0x250>
 80052d4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80052d8:	897a      	ldrh	r2, [r7, #10]
 80052da:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2201      	movs	r2, #1
 80052e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80052ea:	2300      	movs	r3, #0
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3720      	adds	r7, #32
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	080053ff 	.word	0x080053ff
 80052f8:	cccccccd 	.word	0xcccccccd
 80052fc:	08005515 	.word	0x08005515
 8005300:	40003800 	.word	0x40003800
 8005304:	40003400 	.word	0x40003400

08005308 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005310:	bf00      	nop
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005324:	bf00      	nop
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005338:	bf00      	nop
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005350:	881a      	ldrh	r2, [r3, #0]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800535c:	1c9a      	adds	r2, r3, #2
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005366:	b29b      	uxth	r3, r3
 8005368:	3b01      	subs	r3, #1
 800536a:	b29a      	uxth	r2, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005374:	b29b      	uxth	r3, r3
 8005376:	2b00      	cmp	r3, #0
 8005378:	d10e      	bne.n	8005398 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	685a      	ldr	r2, [r3, #4]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005388:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2201      	movs	r2, #1
 800538e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f7ff ffb8 	bl	8005308 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005398:	bf00      	nop
 800539a:	3708      	adds	r7, #8
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68da      	ldr	r2, [r3, #12]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b2:	b292      	uxth	r2, r2
 80053b4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ba:	1c9a      	adds	r2, r3, #2
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	3b01      	subs	r3, #1
 80053c8:	b29a      	uxth	r2, r3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d10e      	bne.n	80053f6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	685a      	ldr	r2, [r3, #4]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80053e6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f7ff ff93 	bl	800531c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80053f6:	bf00      	nop
 80053f8:	3708      	adds	r7, #8
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}

080053fe <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80053fe:	b580      	push	{r7, lr}
 8005400:	b086      	sub	sp, #24
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005414:	b2db      	uxtb	r3, r3
 8005416:	2b04      	cmp	r3, #4
 8005418:	d13a      	bne.n	8005490 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	f003 0301 	and.w	r3, r3, #1
 8005420:	2b01      	cmp	r3, #1
 8005422:	d109      	bne.n	8005438 <I2S_IRQHandler+0x3a>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800542e:	2b40      	cmp	r3, #64	@ 0x40
 8005430:	d102      	bne.n	8005438 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f7ff ffb4 	bl	80053a0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800543e:	2b40      	cmp	r3, #64	@ 0x40
 8005440:	d126      	bne.n	8005490 <I2S_IRQHandler+0x92>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	f003 0320 	and.w	r3, r3, #32
 800544c:	2b20      	cmp	r3, #32
 800544e:	d11f      	bne.n	8005490 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	685a      	ldr	r2, [r3, #4]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800545e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005460:	2300      	movs	r3, #0
 8005462:	613b      	str	r3, [r7, #16]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	613b      	str	r3, [r7, #16]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	613b      	str	r3, [r7, #16]
 8005474:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2201      	movs	r2, #1
 800547a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005482:	f043 0202 	orr.w	r2, r3, #2
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f7ff ff50 	bl	8005330 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005496:	b2db      	uxtb	r3, r3
 8005498:	2b03      	cmp	r3, #3
 800549a:	d136      	bne.n	800550a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	f003 0302 	and.w	r3, r3, #2
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d109      	bne.n	80054ba <I2S_IRQHandler+0xbc>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054b0:	2b80      	cmp	r3, #128	@ 0x80
 80054b2:	d102      	bne.n	80054ba <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f7ff ff45 	bl	8005344 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	f003 0308 	and.w	r3, r3, #8
 80054c0:	2b08      	cmp	r3, #8
 80054c2:	d122      	bne.n	800550a <I2S_IRQHandler+0x10c>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	f003 0320 	and.w	r3, r3, #32
 80054ce:	2b20      	cmp	r3, #32
 80054d0:	d11b      	bne.n	800550a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	685a      	ldr	r2, [r3, #4]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80054e0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80054e2:	2300      	movs	r3, #0
 80054e4:	60fb      	str	r3, [r7, #12]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	60fb      	str	r3, [r7, #12]
 80054ee:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054fc:	f043 0204 	orr.w	r2, r3, #4
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f7ff ff13 	bl	8005330 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800550a:	bf00      	nop
 800550c:	3718      	adds	r7, #24
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
	...

08005514 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b088      	sub	sp, #32
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a92      	ldr	r2, [pc, #584]	@ (8005774 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d101      	bne.n	8005532 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800552e:	4b92      	ldr	r3, [pc, #584]	@ (8005778 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005530:	e001      	b.n	8005536 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005532:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a8b      	ldr	r2, [pc, #556]	@ (8005774 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d101      	bne.n	8005550 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800554c:	4b8a      	ldr	r3, [pc, #552]	@ (8005778 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800554e:	e001      	b.n	8005554 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005550:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005560:	d004      	beq.n	800556c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	2b00      	cmp	r3, #0
 8005568:	f040 8099 	bne.w	800569e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	f003 0302 	and.w	r3, r3, #2
 8005572:	2b02      	cmp	r3, #2
 8005574:	d107      	bne.n	8005586 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800557c:	2b00      	cmp	r3, #0
 800557e:	d002      	beq.n	8005586 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f000 f925 	bl	80057d0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	f003 0301 	and.w	r3, r3, #1
 800558c:	2b01      	cmp	r3, #1
 800558e:	d107      	bne.n	80055a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005596:	2b00      	cmp	r3, #0
 8005598:	d002      	beq.n	80055a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 f9c8 	bl	8005930 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80055a0:	69bb      	ldr	r3, [r7, #24]
 80055a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055a6:	2b40      	cmp	r3, #64	@ 0x40
 80055a8:	d13a      	bne.n	8005620 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	f003 0320 	and.w	r3, r3, #32
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d035      	beq.n	8005620 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a6e      	ldr	r2, [pc, #440]	@ (8005774 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d101      	bne.n	80055c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80055be:	4b6e      	ldr	r3, [pc, #440]	@ (8005778 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80055c0:	e001      	b.n	80055c6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80055c2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80055c6:	685a      	ldr	r2, [r3, #4]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4969      	ldr	r1, [pc, #420]	@ (8005774 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80055ce:	428b      	cmp	r3, r1
 80055d0:	d101      	bne.n	80055d6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80055d2:	4b69      	ldr	r3, [pc, #420]	@ (8005778 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80055d4:	e001      	b.n	80055da <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80055d6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80055da:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80055de:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	685a      	ldr	r2, [r3, #4]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80055ee:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80055f0:	2300      	movs	r3, #0
 80055f2:	60fb      	str	r3, [r7, #12]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	60fb      	str	r3, [r7, #12]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	60fb      	str	r3, [r7, #12]
 8005604:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2201      	movs	r2, #1
 800560a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005612:	f043 0202 	orr.w	r2, r3, #2
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f7ff fe88 	bl	8005330 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	f003 0308 	and.w	r3, r3, #8
 8005626:	2b08      	cmp	r3, #8
 8005628:	f040 80c3 	bne.w	80057b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	f003 0320 	and.w	r3, r3, #32
 8005632:	2b00      	cmp	r3, #0
 8005634:	f000 80bd 	beq.w	80057b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	685a      	ldr	r2, [r3, #4]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005646:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a49      	ldr	r2, [pc, #292]	@ (8005774 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d101      	bne.n	8005656 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005652:	4b49      	ldr	r3, [pc, #292]	@ (8005778 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005654:	e001      	b.n	800565a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005656:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800565a:	685a      	ldr	r2, [r3, #4]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4944      	ldr	r1, [pc, #272]	@ (8005774 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005662:	428b      	cmp	r3, r1
 8005664:	d101      	bne.n	800566a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005666:	4b44      	ldr	r3, [pc, #272]	@ (8005778 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005668:	e001      	b.n	800566e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800566a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800566e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005672:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005674:	2300      	movs	r3, #0
 8005676:	60bb      	str	r3, [r7, #8]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	60bb      	str	r3, [r7, #8]
 8005680:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2201      	movs	r2, #1
 8005686:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800568e:	f043 0204 	orr.w	r2, r3, #4
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f7ff fe4a 	bl	8005330 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800569c:	e089      	b.n	80057b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	f003 0302 	and.w	r3, r3, #2
 80056a4:	2b02      	cmp	r3, #2
 80056a6:	d107      	bne.n	80056b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d002      	beq.n	80056b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 f8be 	bl	8005834 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	f003 0301 	and.w	r3, r3, #1
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d107      	bne.n	80056d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d002      	beq.n	80056d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f000 f8fd 	bl	80058cc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056d8:	2b40      	cmp	r3, #64	@ 0x40
 80056da:	d12f      	bne.n	800573c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	f003 0320 	and.w	r3, r3, #32
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d02a      	beq.n	800573c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	685a      	ldr	r2, [r3, #4]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80056f4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a1e      	ldr	r2, [pc, #120]	@ (8005774 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d101      	bne.n	8005704 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005700:	4b1d      	ldr	r3, [pc, #116]	@ (8005778 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005702:	e001      	b.n	8005708 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005704:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005708:	685a      	ldr	r2, [r3, #4]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4919      	ldr	r1, [pc, #100]	@ (8005774 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005710:	428b      	cmp	r3, r1
 8005712:	d101      	bne.n	8005718 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005714:	4b18      	ldr	r3, [pc, #96]	@ (8005778 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005716:	e001      	b.n	800571c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005718:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800571c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005720:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2201      	movs	r2, #1
 8005726:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800572e:	f043 0202 	orr.w	r2, r3, #2
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f7ff fdfa 	bl	8005330 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	f003 0308 	and.w	r3, r3, #8
 8005742:	2b08      	cmp	r3, #8
 8005744:	d136      	bne.n	80057b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	f003 0320 	and.w	r3, r3, #32
 800574c:	2b00      	cmp	r3, #0
 800574e:	d031      	beq.n	80057b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a07      	ldr	r2, [pc, #28]	@ (8005774 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d101      	bne.n	800575e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800575a:	4b07      	ldr	r3, [pc, #28]	@ (8005778 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800575c:	e001      	b.n	8005762 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800575e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005762:	685a      	ldr	r2, [r3, #4]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4902      	ldr	r1, [pc, #8]	@ (8005774 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800576a:	428b      	cmp	r3, r1
 800576c:	d106      	bne.n	800577c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800576e:	4b02      	ldr	r3, [pc, #8]	@ (8005778 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005770:	e006      	b.n	8005780 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8005772:	bf00      	nop
 8005774:	40003800 	.word	0x40003800
 8005778:	40003400 	.word	0x40003400
 800577c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005780:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005784:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	685a      	ldr	r2, [r3, #4]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005794:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2201      	movs	r2, #1
 800579a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057a2:	f043 0204 	orr.w	r2, r3, #4
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f7ff fdc0 	bl	8005330 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80057b0:	e000      	b.n	80057b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80057b2:	bf00      	nop
}
 80057b4:	bf00      	nop
 80057b6:	3720      	adds	r7, #32
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80057c4:	bf00      	nop
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b082      	sub	sp, #8
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057dc:	1c99      	adds	r1, r3, #2
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	6251      	str	r1, [r2, #36]	@ 0x24
 80057e2:	881a      	ldrh	r2, [r3, #0]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	3b01      	subs	r3, #1
 80057f2:	b29a      	uxth	r2, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d113      	bne.n	800582a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	685a      	ldr	r2, [r3, #4]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005810:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005816:	b29b      	uxth	r3, r3
 8005818:	2b00      	cmp	r3, #0
 800581a:	d106      	bne.n	800582a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f7ff ffc9 	bl	80057bc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800582a:	bf00      	nop
 800582c:	3708      	adds	r7, #8
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
	...

08005834 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005840:	1c99      	adds	r1, r3, #2
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	6251      	str	r1, [r2, #36]	@ 0x24
 8005846:	8819      	ldrh	r1, [r3, #0]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a1d      	ldr	r2, [pc, #116]	@ (80058c4 <I2SEx_TxISR_I2SExt+0x90>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d101      	bne.n	8005856 <I2SEx_TxISR_I2SExt+0x22>
 8005852:	4b1d      	ldr	r3, [pc, #116]	@ (80058c8 <I2SEx_TxISR_I2SExt+0x94>)
 8005854:	e001      	b.n	800585a <I2SEx_TxISR_I2SExt+0x26>
 8005856:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800585a:	460a      	mov	r2, r1
 800585c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005862:	b29b      	uxth	r3, r3
 8005864:	3b01      	subs	r3, #1
 8005866:	b29a      	uxth	r2, r3
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005870:	b29b      	uxth	r3, r3
 8005872:	2b00      	cmp	r3, #0
 8005874:	d121      	bne.n	80058ba <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a12      	ldr	r2, [pc, #72]	@ (80058c4 <I2SEx_TxISR_I2SExt+0x90>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d101      	bne.n	8005884 <I2SEx_TxISR_I2SExt+0x50>
 8005880:	4b11      	ldr	r3, [pc, #68]	@ (80058c8 <I2SEx_TxISR_I2SExt+0x94>)
 8005882:	e001      	b.n	8005888 <I2SEx_TxISR_I2SExt+0x54>
 8005884:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005888:	685a      	ldr	r2, [r3, #4]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	490d      	ldr	r1, [pc, #52]	@ (80058c4 <I2SEx_TxISR_I2SExt+0x90>)
 8005890:	428b      	cmp	r3, r1
 8005892:	d101      	bne.n	8005898 <I2SEx_TxISR_I2SExt+0x64>
 8005894:	4b0c      	ldr	r3, [pc, #48]	@ (80058c8 <I2SEx_TxISR_I2SExt+0x94>)
 8005896:	e001      	b.n	800589c <I2SEx_TxISR_I2SExt+0x68>
 8005898:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800589c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80058a0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d106      	bne.n	80058ba <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f7ff ff81 	bl	80057bc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80058ba:	bf00      	nop
 80058bc:	3708      	adds	r7, #8
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop
 80058c4:	40003800 	.word	0x40003800
 80058c8:	40003400 	.word	0x40003400

080058cc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68d8      	ldr	r0, [r3, #12]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058de:	1c99      	adds	r1, r3, #2
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80058e4:	b282      	uxth	r2, r0
 80058e6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	3b01      	subs	r3, #1
 80058f0:	b29a      	uxth	r2, r3
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d113      	bne.n	8005928 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	685a      	ldr	r2, [r3, #4]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800590e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005914:	b29b      	uxth	r3, r3
 8005916:	2b00      	cmp	r3, #0
 8005918:	d106      	bne.n	8005928 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f7ff ff4a 	bl	80057bc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005928:	bf00      	nop
 800592a:	3708      	adds	r7, #8
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a20      	ldr	r2, [pc, #128]	@ (80059c0 <I2SEx_RxISR_I2SExt+0x90>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d101      	bne.n	8005946 <I2SEx_RxISR_I2SExt+0x16>
 8005942:	4b20      	ldr	r3, [pc, #128]	@ (80059c4 <I2SEx_RxISR_I2SExt+0x94>)
 8005944:	e001      	b.n	800594a <I2SEx_RxISR_I2SExt+0x1a>
 8005946:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800594a:	68d8      	ldr	r0, [r3, #12]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005950:	1c99      	adds	r1, r3, #2
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005956:	b282      	uxth	r2, r0
 8005958:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800595e:	b29b      	uxth	r3, r3
 8005960:	3b01      	subs	r3, #1
 8005962:	b29a      	uxth	r2, r3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800596c:	b29b      	uxth	r3, r3
 800596e:	2b00      	cmp	r3, #0
 8005970:	d121      	bne.n	80059b6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a12      	ldr	r2, [pc, #72]	@ (80059c0 <I2SEx_RxISR_I2SExt+0x90>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d101      	bne.n	8005980 <I2SEx_RxISR_I2SExt+0x50>
 800597c:	4b11      	ldr	r3, [pc, #68]	@ (80059c4 <I2SEx_RxISR_I2SExt+0x94>)
 800597e:	e001      	b.n	8005984 <I2SEx_RxISR_I2SExt+0x54>
 8005980:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005984:	685a      	ldr	r2, [r3, #4]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	490d      	ldr	r1, [pc, #52]	@ (80059c0 <I2SEx_RxISR_I2SExt+0x90>)
 800598c:	428b      	cmp	r3, r1
 800598e:	d101      	bne.n	8005994 <I2SEx_RxISR_I2SExt+0x64>
 8005990:	4b0c      	ldr	r3, [pc, #48]	@ (80059c4 <I2SEx_RxISR_I2SExt+0x94>)
 8005992:	e001      	b.n	8005998 <I2SEx_RxISR_I2SExt+0x68>
 8005994:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005998:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800599c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d106      	bne.n	80059b6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f7ff ff03 	bl	80057bc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80059b6:	bf00      	nop
 80059b8:	3708      	adds	r7, #8
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	40003800 	.word	0x40003800
 80059c4:	40003400 	.word	0x40003400

080059c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b086      	sub	sp, #24
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d101      	bne.n	80059da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e267      	b.n	8005eaa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 0301 	and.w	r3, r3, #1
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d075      	beq.n	8005ad2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80059e6:	4b88      	ldr	r3, [pc, #544]	@ (8005c08 <HAL_RCC_OscConfig+0x240>)
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	f003 030c 	and.w	r3, r3, #12
 80059ee:	2b04      	cmp	r3, #4
 80059f0:	d00c      	beq.n	8005a0c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059f2:	4b85      	ldr	r3, [pc, #532]	@ (8005c08 <HAL_RCC_OscConfig+0x240>)
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80059fa:	2b08      	cmp	r3, #8
 80059fc:	d112      	bne.n	8005a24 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059fe:	4b82      	ldr	r3, [pc, #520]	@ (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a06:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a0a:	d10b      	bne.n	8005a24 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a0c:	4b7e      	ldr	r3, [pc, #504]	@ (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d05b      	beq.n	8005ad0 <HAL_RCC_OscConfig+0x108>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d157      	bne.n	8005ad0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e242      	b.n	8005eaa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a2c:	d106      	bne.n	8005a3c <HAL_RCC_OscConfig+0x74>
 8005a2e:	4b76      	ldr	r3, [pc, #472]	@ (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a75      	ldr	r2, [pc, #468]	@ (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005a34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a38:	6013      	str	r3, [r2, #0]
 8005a3a:	e01d      	b.n	8005a78 <HAL_RCC_OscConfig+0xb0>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005a44:	d10c      	bne.n	8005a60 <HAL_RCC_OscConfig+0x98>
 8005a46:	4b70      	ldr	r3, [pc, #448]	@ (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a6f      	ldr	r2, [pc, #444]	@ (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005a4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005a50:	6013      	str	r3, [r2, #0]
 8005a52:	4b6d      	ldr	r3, [pc, #436]	@ (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a6c      	ldr	r2, [pc, #432]	@ (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005a58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a5c:	6013      	str	r3, [r2, #0]
 8005a5e:	e00b      	b.n	8005a78 <HAL_RCC_OscConfig+0xb0>
 8005a60:	4b69      	ldr	r3, [pc, #420]	@ (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a68      	ldr	r2, [pc, #416]	@ (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005a66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a6a:	6013      	str	r3, [r2, #0]
 8005a6c:	4b66      	ldr	r3, [pc, #408]	@ (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a65      	ldr	r2, [pc, #404]	@ (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005a72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d013      	beq.n	8005aa8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a80:	f7fb fe20 	bl	80016c4 <HAL_GetTick>
 8005a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a86:	e008      	b.n	8005a9a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a88:	f7fb fe1c 	bl	80016c4 <HAL_GetTick>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	1ad3      	subs	r3, r2, r3
 8005a92:	2b64      	cmp	r3, #100	@ 0x64
 8005a94:	d901      	bls.n	8005a9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005a96:	2303      	movs	r3, #3
 8005a98:	e207      	b.n	8005eaa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a9a:	4b5b      	ldr	r3, [pc, #364]	@ (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d0f0      	beq.n	8005a88 <HAL_RCC_OscConfig+0xc0>
 8005aa6:	e014      	b.n	8005ad2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aa8:	f7fb fe0c 	bl	80016c4 <HAL_GetTick>
 8005aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005aae:	e008      	b.n	8005ac2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ab0:	f7fb fe08 	bl	80016c4 <HAL_GetTick>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	2b64      	cmp	r3, #100	@ 0x64
 8005abc:	d901      	bls.n	8005ac2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e1f3      	b.n	8005eaa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ac2:	4b51      	ldr	r3, [pc, #324]	@ (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d1f0      	bne.n	8005ab0 <HAL_RCC_OscConfig+0xe8>
 8005ace:	e000      	b.n	8005ad2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ad0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 0302 	and.w	r3, r3, #2
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d063      	beq.n	8005ba6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005ade:	4b4a      	ldr	r3, [pc, #296]	@ (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	f003 030c 	and.w	r3, r3, #12
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00b      	beq.n	8005b02 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005aea:	4b47      	ldr	r3, [pc, #284]	@ (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005af2:	2b08      	cmp	r3, #8
 8005af4:	d11c      	bne.n	8005b30 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005af6:	4b44      	ldr	r3, [pc, #272]	@ (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d116      	bne.n	8005b30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b02:	4b41      	ldr	r3, [pc, #260]	@ (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 0302 	and.w	r3, r3, #2
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d005      	beq.n	8005b1a <HAL_RCC_OscConfig+0x152>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d001      	beq.n	8005b1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e1c7      	b.n	8005eaa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b1a:	4b3b      	ldr	r3, [pc, #236]	@ (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	00db      	lsls	r3, r3, #3
 8005b28:	4937      	ldr	r1, [pc, #220]	@ (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b2e:	e03a      	b.n	8005ba6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d020      	beq.n	8005b7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b38:	4b34      	ldr	r3, [pc, #208]	@ (8005c0c <HAL_RCC_OscConfig+0x244>)
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b3e:	f7fb fdc1 	bl	80016c4 <HAL_GetTick>
 8005b42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b44:	e008      	b.n	8005b58 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b46:	f7fb fdbd 	bl	80016c4 <HAL_GetTick>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	1ad3      	subs	r3, r2, r3
 8005b50:	2b02      	cmp	r3, #2
 8005b52:	d901      	bls.n	8005b58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005b54:	2303      	movs	r3, #3
 8005b56:	e1a8      	b.n	8005eaa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b58:	4b2b      	ldr	r3, [pc, #172]	@ (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 0302 	and.w	r3, r3, #2
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d0f0      	beq.n	8005b46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b64:	4b28      	ldr	r3, [pc, #160]	@ (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	00db      	lsls	r3, r3, #3
 8005b72:	4925      	ldr	r1, [pc, #148]	@ (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005b74:	4313      	orrs	r3, r2
 8005b76:	600b      	str	r3, [r1, #0]
 8005b78:	e015      	b.n	8005ba6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b7a:	4b24      	ldr	r3, [pc, #144]	@ (8005c0c <HAL_RCC_OscConfig+0x244>)
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b80:	f7fb fda0 	bl	80016c4 <HAL_GetTick>
 8005b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b86:	e008      	b.n	8005b9a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b88:	f7fb fd9c 	bl	80016c4 <HAL_GetTick>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	2b02      	cmp	r3, #2
 8005b94:	d901      	bls.n	8005b9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	e187      	b.n	8005eaa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b9a:	4b1b      	ldr	r3, [pc, #108]	@ (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f003 0302 	and.w	r3, r3, #2
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1f0      	bne.n	8005b88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 0308 	and.w	r3, r3, #8
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d036      	beq.n	8005c20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	695b      	ldr	r3, [r3, #20]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d016      	beq.n	8005be8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bba:	4b15      	ldr	r3, [pc, #84]	@ (8005c10 <HAL_RCC_OscConfig+0x248>)
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bc0:	f7fb fd80 	bl	80016c4 <HAL_GetTick>
 8005bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bc6:	e008      	b.n	8005bda <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bc8:	f7fb fd7c 	bl	80016c4 <HAL_GetTick>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	2b02      	cmp	r3, #2
 8005bd4:	d901      	bls.n	8005bda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	e167      	b.n	8005eaa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bda:	4b0b      	ldr	r3, [pc, #44]	@ (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005bdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bde:	f003 0302 	and.w	r3, r3, #2
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d0f0      	beq.n	8005bc8 <HAL_RCC_OscConfig+0x200>
 8005be6:	e01b      	b.n	8005c20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005be8:	4b09      	ldr	r3, [pc, #36]	@ (8005c10 <HAL_RCC_OscConfig+0x248>)
 8005bea:	2200      	movs	r2, #0
 8005bec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bee:	f7fb fd69 	bl	80016c4 <HAL_GetTick>
 8005bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bf4:	e00e      	b.n	8005c14 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bf6:	f7fb fd65 	bl	80016c4 <HAL_GetTick>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	1ad3      	subs	r3, r2, r3
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	d907      	bls.n	8005c14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005c04:	2303      	movs	r3, #3
 8005c06:	e150      	b.n	8005eaa <HAL_RCC_OscConfig+0x4e2>
 8005c08:	40023800 	.word	0x40023800
 8005c0c:	42470000 	.word	0x42470000
 8005c10:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c14:	4b88      	ldr	r3, [pc, #544]	@ (8005e38 <HAL_RCC_OscConfig+0x470>)
 8005c16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c18:	f003 0302 	and.w	r3, r3, #2
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d1ea      	bne.n	8005bf6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 0304 	and.w	r3, r3, #4
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	f000 8097 	beq.w	8005d5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c32:	4b81      	ldr	r3, [pc, #516]	@ (8005e38 <HAL_RCC_OscConfig+0x470>)
 8005c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d10f      	bne.n	8005c5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c3e:	2300      	movs	r3, #0
 8005c40:	60bb      	str	r3, [r7, #8]
 8005c42:	4b7d      	ldr	r3, [pc, #500]	@ (8005e38 <HAL_RCC_OscConfig+0x470>)
 8005c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c46:	4a7c      	ldr	r2, [pc, #496]	@ (8005e38 <HAL_RCC_OscConfig+0x470>)
 8005c48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005c4e:	4b7a      	ldr	r3, [pc, #488]	@ (8005e38 <HAL_RCC_OscConfig+0x470>)
 8005c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c56:	60bb      	str	r3, [r7, #8]
 8005c58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c5e:	4b77      	ldr	r3, [pc, #476]	@ (8005e3c <HAL_RCC_OscConfig+0x474>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d118      	bne.n	8005c9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c6a:	4b74      	ldr	r3, [pc, #464]	@ (8005e3c <HAL_RCC_OscConfig+0x474>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a73      	ldr	r2, [pc, #460]	@ (8005e3c <HAL_RCC_OscConfig+0x474>)
 8005c70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c76:	f7fb fd25 	bl	80016c4 <HAL_GetTick>
 8005c7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c7c:	e008      	b.n	8005c90 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c7e:	f7fb fd21 	bl	80016c4 <HAL_GetTick>
 8005c82:	4602      	mov	r2, r0
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	1ad3      	subs	r3, r2, r3
 8005c88:	2b02      	cmp	r3, #2
 8005c8a:	d901      	bls.n	8005c90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005c8c:	2303      	movs	r3, #3
 8005c8e:	e10c      	b.n	8005eaa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c90:	4b6a      	ldr	r3, [pc, #424]	@ (8005e3c <HAL_RCC_OscConfig+0x474>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d0f0      	beq.n	8005c7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d106      	bne.n	8005cb2 <HAL_RCC_OscConfig+0x2ea>
 8005ca4:	4b64      	ldr	r3, [pc, #400]	@ (8005e38 <HAL_RCC_OscConfig+0x470>)
 8005ca6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ca8:	4a63      	ldr	r2, [pc, #396]	@ (8005e38 <HAL_RCC_OscConfig+0x470>)
 8005caa:	f043 0301 	orr.w	r3, r3, #1
 8005cae:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cb0:	e01c      	b.n	8005cec <HAL_RCC_OscConfig+0x324>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	2b05      	cmp	r3, #5
 8005cb8:	d10c      	bne.n	8005cd4 <HAL_RCC_OscConfig+0x30c>
 8005cba:	4b5f      	ldr	r3, [pc, #380]	@ (8005e38 <HAL_RCC_OscConfig+0x470>)
 8005cbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cbe:	4a5e      	ldr	r2, [pc, #376]	@ (8005e38 <HAL_RCC_OscConfig+0x470>)
 8005cc0:	f043 0304 	orr.w	r3, r3, #4
 8005cc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cc6:	4b5c      	ldr	r3, [pc, #368]	@ (8005e38 <HAL_RCC_OscConfig+0x470>)
 8005cc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cca:	4a5b      	ldr	r2, [pc, #364]	@ (8005e38 <HAL_RCC_OscConfig+0x470>)
 8005ccc:	f043 0301 	orr.w	r3, r3, #1
 8005cd0:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cd2:	e00b      	b.n	8005cec <HAL_RCC_OscConfig+0x324>
 8005cd4:	4b58      	ldr	r3, [pc, #352]	@ (8005e38 <HAL_RCC_OscConfig+0x470>)
 8005cd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cd8:	4a57      	ldr	r2, [pc, #348]	@ (8005e38 <HAL_RCC_OscConfig+0x470>)
 8005cda:	f023 0301 	bic.w	r3, r3, #1
 8005cde:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ce0:	4b55      	ldr	r3, [pc, #340]	@ (8005e38 <HAL_RCC_OscConfig+0x470>)
 8005ce2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ce4:	4a54      	ldr	r2, [pc, #336]	@ (8005e38 <HAL_RCC_OscConfig+0x470>)
 8005ce6:	f023 0304 	bic.w	r3, r3, #4
 8005cea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d015      	beq.n	8005d20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cf4:	f7fb fce6 	bl	80016c4 <HAL_GetTick>
 8005cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cfa:	e00a      	b.n	8005d12 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cfc:	f7fb fce2 	bl	80016c4 <HAL_GetTick>
 8005d00:	4602      	mov	r2, r0
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	1ad3      	subs	r3, r2, r3
 8005d06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d901      	bls.n	8005d12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	e0cb      	b.n	8005eaa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d12:	4b49      	ldr	r3, [pc, #292]	@ (8005e38 <HAL_RCC_OscConfig+0x470>)
 8005d14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d16:	f003 0302 	and.w	r3, r3, #2
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d0ee      	beq.n	8005cfc <HAL_RCC_OscConfig+0x334>
 8005d1e:	e014      	b.n	8005d4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d20:	f7fb fcd0 	bl	80016c4 <HAL_GetTick>
 8005d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d26:	e00a      	b.n	8005d3e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d28:	f7fb fccc 	bl	80016c4 <HAL_GetTick>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d901      	bls.n	8005d3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e0b5      	b.n	8005eaa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d3e:	4b3e      	ldr	r3, [pc, #248]	@ (8005e38 <HAL_RCC_OscConfig+0x470>)
 8005d40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d42:	f003 0302 	and.w	r3, r3, #2
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d1ee      	bne.n	8005d28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005d4a:	7dfb      	ldrb	r3, [r7, #23]
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d105      	bne.n	8005d5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d50:	4b39      	ldr	r3, [pc, #228]	@ (8005e38 <HAL_RCC_OscConfig+0x470>)
 8005d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d54:	4a38      	ldr	r2, [pc, #224]	@ (8005e38 <HAL_RCC_OscConfig+0x470>)
 8005d56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d5a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	699b      	ldr	r3, [r3, #24]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	f000 80a1 	beq.w	8005ea8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d66:	4b34      	ldr	r3, [pc, #208]	@ (8005e38 <HAL_RCC_OscConfig+0x470>)
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	f003 030c 	and.w	r3, r3, #12
 8005d6e:	2b08      	cmp	r3, #8
 8005d70:	d05c      	beq.n	8005e2c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	699b      	ldr	r3, [r3, #24]
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d141      	bne.n	8005dfe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d7a:	4b31      	ldr	r3, [pc, #196]	@ (8005e40 <HAL_RCC_OscConfig+0x478>)
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d80:	f7fb fca0 	bl	80016c4 <HAL_GetTick>
 8005d84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d86:	e008      	b.n	8005d9a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d88:	f7fb fc9c 	bl	80016c4 <HAL_GetTick>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	2b02      	cmp	r3, #2
 8005d94:	d901      	bls.n	8005d9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005d96:	2303      	movs	r3, #3
 8005d98:	e087      	b.n	8005eaa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d9a:	4b27      	ldr	r3, [pc, #156]	@ (8005e38 <HAL_RCC_OscConfig+0x470>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d1f0      	bne.n	8005d88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	69da      	ldr	r2, [r3, #28]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	431a      	orrs	r2, r3
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005db4:	019b      	lsls	r3, r3, #6
 8005db6:	431a      	orrs	r2, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dbc:	085b      	lsrs	r3, r3, #1
 8005dbe:	3b01      	subs	r3, #1
 8005dc0:	041b      	lsls	r3, r3, #16
 8005dc2:	431a      	orrs	r2, r3
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dc8:	061b      	lsls	r3, r3, #24
 8005dca:	491b      	ldr	r1, [pc, #108]	@ (8005e38 <HAL_RCC_OscConfig+0x470>)
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005dd0:	4b1b      	ldr	r3, [pc, #108]	@ (8005e40 <HAL_RCC_OscConfig+0x478>)
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dd6:	f7fb fc75 	bl	80016c4 <HAL_GetTick>
 8005dda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ddc:	e008      	b.n	8005df0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005dde:	f7fb fc71 	bl	80016c4 <HAL_GetTick>
 8005de2:	4602      	mov	r2, r0
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	2b02      	cmp	r3, #2
 8005dea:	d901      	bls.n	8005df0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005dec:	2303      	movs	r3, #3
 8005dee:	e05c      	b.n	8005eaa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005df0:	4b11      	ldr	r3, [pc, #68]	@ (8005e38 <HAL_RCC_OscConfig+0x470>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d0f0      	beq.n	8005dde <HAL_RCC_OscConfig+0x416>
 8005dfc:	e054      	b.n	8005ea8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dfe:	4b10      	ldr	r3, [pc, #64]	@ (8005e40 <HAL_RCC_OscConfig+0x478>)
 8005e00:	2200      	movs	r2, #0
 8005e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e04:	f7fb fc5e 	bl	80016c4 <HAL_GetTick>
 8005e08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e0a:	e008      	b.n	8005e1e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e0c:	f7fb fc5a 	bl	80016c4 <HAL_GetTick>
 8005e10:	4602      	mov	r2, r0
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	1ad3      	subs	r3, r2, r3
 8005e16:	2b02      	cmp	r3, #2
 8005e18:	d901      	bls.n	8005e1e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	e045      	b.n	8005eaa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e1e:	4b06      	ldr	r3, [pc, #24]	@ (8005e38 <HAL_RCC_OscConfig+0x470>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d1f0      	bne.n	8005e0c <HAL_RCC_OscConfig+0x444>
 8005e2a:	e03d      	b.n	8005ea8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	699b      	ldr	r3, [r3, #24]
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d107      	bne.n	8005e44 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	e038      	b.n	8005eaa <HAL_RCC_OscConfig+0x4e2>
 8005e38:	40023800 	.word	0x40023800
 8005e3c:	40007000 	.word	0x40007000
 8005e40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005e44:	4b1b      	ldr	r3, [pc, #108]	@ (8005eb4 <HAL_RCC_OscConfig+0x4ec>)
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	699b      	ldr	r3, [r3, #24]
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d028      	beq.n	8005ea4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d121      	bne.n	8005ea4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d11a      	bne.n	8005ea4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005e74:	4013      	ands	r3, r2
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005e7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d111      	bne.n	8005ea4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e8a:	085b      	lsrs	r3, r3, #1
 8005e8c:	3b01      	subs	r3, #1
 8005e8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d107      	bne.n	8005ea4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d001      	beq.n	8005ea8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e000      	b.n	8005eaa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3718      	adds	r7, #24
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	bf00      	nop
 8005eb4:	40023800 	.word	0x40023800

08005eb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d101      	bne.n	8005ecc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e0cc      	b.n	8006066 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ecc:	4b68      	ldr	r3, [pc, #416]	@ (8006070 <HAL_RCC_ClockConfig+0x1b8>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 0307 	and.w	r3, r3, #7
 8005ed4:	683a      	ldr	r2, [r7, #0]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d90c      	bls.n	8005ef4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005eda:	4b65      	ldr	r3, [pc, #404]	@ (8006070 <HAL_RCC_ClockConfig+0x1b8>)
 8005edc:	683a      	ldr	r2, [r7, #0]
 8005ede:	b2d2      	uxtb	r2, r2
 8005ee0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ee2:	4b63      	ldr	r3, [pc, #396]	@ (8006070 <HAL_RCC_ClockConfig+0x1b8>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 0307 	and.w	r3, r3, #7
 8005eea:	683a      	ldr	r2, [r7, #0]
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d001      	beq.n	8005ef4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e0b8      	b.n	8006066 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f003 0302 	and.w	r3, r3, #2
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d020      	beq.n	8005f42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 0304 	and.w	r3, r3, #4
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d005      	beq.n	8005f18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f0c:	4b59      	ldr	r3, [pc, #356]	@ (8006074 <HAL_RCC_ClockConfig+0x1bc>)
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	4a58      	ldr	r2, [pc, #352]	@ (8006074 <HAL_RCC_ClockConfig+0x1bc>)
 8005f12:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005f16:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 0308 	and.w	r3, r3, #8
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d005      	beq.n	8005f30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f24:	4b53      	ldr	r3, [pc, #332]	@ (8006074 <HAL_RCC_ClockConfig+0x1bc>)
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	4a52      	ldr	r2, [pc, #328]	@ (8006074 <HAL_RCC_ClockConfig+0x1bc>)
 8005f2a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005f2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f30:	4b50      	ldr	r3, [pc, #320]	@ (8006074 <HAL_RCC_ClockConfig+0x1bc>)
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	494d      	ldr	r1, [pc, #308]	@ (8006074 <HAL_RCC_ClockConfig+0x1bc>)
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f003 0301 	and.w	r3, r3, #1
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d044      	beq.n	8005fd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d107      	bne.n	8005f66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f56:	4b47      	ldr	r3, [pc, #284]	@ (8006074 <HAL_RCC_ClockConfig+0x1bc>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d119      	bne.n	8005f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e07f      	b.n	8006066 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	d003      	beq.n	8005f76 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f72:	2b03      	cmp	r3, #3
 8005f74:	d107      	bne.n	8005f86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f76:	4b3f      	ldr	r3, [pc, #252]	@ (8006074 <HAL_RCC_ClockConfig+0x1bc>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d109      	bne.n	8005f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e06f      	b.n	8006066 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f86:	4b3b      	ldr	r3, [pc, #236]	@ (8006074 <HAL_RCC_ClockConfig+0x1bc>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 0302 	and.w	r3, r3, #2
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d101      	bne.n	8005f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	e067      	b.n	8006066 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f96:	4b37      	ldr	r3, [pc, #220]	@ (8006074 <HAL_RCC_ClockConfig+0x1bc>)
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	f023 0203 	bic.w	r2, r3, #3
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	4934      	ldr	r1, [pc, #208]	@ (8006074 <HAL_RCC_ClockConfig+0x1bc>)
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005fa8:	f7fb fb8c 	bl	80016c4 <HAL_GetTick>
 8005fac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fae:	e00a      	b.n	8005fc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fb0:	f7fb fb88 	bl	80016c4 <HAL_GetTick>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	1ad3      	subs	r3, r2, r3
 8005fba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d901      	bls.n	8005fc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	e04f      	b.n	8006066 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fc6:	4b2b      	ldr	r3, [pc, #172]	@ (8006074 <HAL_RCC_ClockConfig+0x1bc>)
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	f003 020c 	and.w	r2, r3, #12
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d1eb      	bne.n	8005fb0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005fd8:	4b25      	ldr	r3, [pc, #148]	@ (8006070 <HAL_RCC_ClockConfig+0x1b8>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 0307 	and.w	r3, r3, #7
 8005fe0:	683a      	ldr	r2, [r7, #0]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d20c      	bcs.n	8006000 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fe6:	4b22      	ldr	r3, [pc, #136]	@ (8006070 <HAL_RCC_ClockConfig+0x1b8>)
 8005fe8:	683a      	ldr	r2, [r7, #0]
 8005fea:	b2d2      	uxtb	r2, r2
 8005fec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fee:	4b20      	ldr	r3, [pc, #128]	@ (8006070 <HAL_RCC_ClockConfig+0x1b8>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f003 0307 	and.w	r3, r3, #7
 8005ff6:	683a      	ldr	r2, [r7, #0]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d001      	beq.n	8006000 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e032      	b.n	8006066 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f003 0304 	and.w	r3, r3, #4
 8006008:	2b00      	cmp	r3, #0
 800600a:	d008      	beq.n	800601e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800600c:	4b19      	ldr	r3, [pc, #100]	@ (8006074 <HAL_RCC_ClockConfig+0x1bc>)
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	4916      	ldr	r1, [pc, #88]	@ (8006074 <HAL_RCC_ClockConfig+0x1bc>)
 800601a:	4313      	orrs	r3, r2
 800601c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f003 0308 	and.w	r3, r3, #8
 8006026:	2b00      	cmp	r3, #0
 8006028:	d009      	beq.n	800603e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800602a:	4b12      	ldr	r3, [pc, #72]	@ (8006074 <HAL_RCC_ClockConfig+0x1bc>)
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	00db      	lsls	r3, r3, #3
 8006038:	490e      	ldr	r1, [pc, #56]	@ (8006074 <HAL_RCC_ClockConfig+0x1bc>)
 800603a:	4313      	orrs	r3, r2
 800603c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800603e:	f000 f821 	bl	8006084 <HAL_RCC_GetSysClockFreq>
 8006042:	4602      	mov	r2, r0
 8006044:	4b0b      	ldr	r3, [pc, #44]	@ (8006074 <HAL_RCC_ClockConfig+0x1bc>)
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	091b      	lsrs	r3, r3, #4
 800604a:	f003 030f 	and.w	r3, r3, #15
 800604e:	490a      	ldr	r1, [pc, #40]	@ (8006078 <HAL_RCC_ClockConfig+0x1c0>)
 8006050:	5ccb      	ldrb	r3, [r1, r3]
 8006052:	fa22 f303 	lsr.w	r3, r2, r3
 8006056:	4a09      	ldr	r2, [pc, #36]	@ (800607c <HAL_RCC_ClockConfig+0x1c4>)
 8006058:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800605a:	4b09      	ldr	r3, [pc, #36]	@ (8006080 <HAL_RCC_ClockConfig+0x1c8>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4618      	mov	r0, r3
 8006060:	f7fb faec 	bl	800163c <HAL_InitTick>

  return HAL_OK;
 8006064:	2300      	movs	r3, #0
}
 8006066:	4618      	mov	r0, r3
 8006068:	3710      	adds	r7, #16
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	40023c00 	.word	0x40023c00
 8006074:	40023800 	.word	0x40023800
 8006078:	0800b03c 	.word	0x0800b03c
 800607c:	20000010 	.word	0x20000010
 8006080:	20000014 	.word	0x20000014

08006084 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006084:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006088:	b094      	sub	sp, #80	@ 0x50
 800608a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800608c:	2300      	movs	r3, #0
 800608e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006090:	2300      	movs	r3, #0
 8006092:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006094:	2300      	movs	r3, #0
 8006096:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006098:	2300      	movs	r3, #0
 800609a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800609c:	4b79      	ldr	r3, [pc, #484]	@ (8006284 <HAL_RCC_GetSysClockFreq+0x200>)
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	f003 030c 	and.w	r3, r3, #12
 80060a4:	2b08      	cmp	r3, #8
 80060a6:	d00d      	beq.n	80060c4 <HAL_RCC_GetSysClockFreq+0x40>
 80060a8:	2b08      	cmp	r3, #8
 80060aa:	f200 80e1 	bhi.w	8006270 <HAL_RCC_GetSysClockFreq+0x1ec>
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d002      	beq.n	80060b8 <HAL_RCC_GetSysClockFreq+0x34>
 80060b2:	2b04      	cmp	r3, #4
 80060b4:	d003      	beq.n	80060be <HAL_RCC_GetSysClockFreq+0x3a>
 80060b6:	e0db      	b.n	8006270 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80060b8:	4b73      	ldr	r3, [pc, #460]	@ (8006288 <HAL_RCC_GetSysClockFreq+0x204>)
 80060ba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80060bc:	e0db      	b.n	8006276 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80060be:	4b73      	ldr	r3, [pc, #460]	@ (800628c <HAL_RCC_GetSysClockFreq+0x208>)
 80060c0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80060c2:	e0d8      	b.n	8006276 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80060c4:	4b6f      	ldr	r3, [pc, #444]	@ (8006284 <HAL_RCC_GetSysClockFreq+0x200>)
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80060cc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80060ce:	4b6d      	ldr	r3, [pc, #436]	@ (8006284 <HAL_RCC_GetSysClockFreq+0x200>)
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d063      	beq.n	80061a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060da:	4b6a      	ldr	r3, [pc, #424]	@ (8006284 <HAL_RCC_GetSysClockFreq+0x200>)
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	099b      	lsrs	r3, r3, #6
 80060e0:	2200      	movs	r2, #0
 80060e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80060e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80060e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80060ee:	2300      	movs	r3, #0
 80060f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80060f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80060f6:	4622      	mov	r2, r4
 80060f8:	462b      	mov	r3, r5
 80060fa:	f04f 0000 	mov.w	r0, #0
 80060fe:	f04f 0100 	mov.w	r1, #0
 8006102:	0159      	lsls	r1, r3, #5
 8006104:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006108:	0150      	lsls	r0, r2, #5
 800610a:	4602      	mov	r2, r0
 800610c:	460b      	mov	r3, r1
 800610e:	4621      	mov	r1, r4
 8006110:	1a51      	subs	r1, r2, r1
 8006112:	6139      	str	r1, [r7, #16]
 8006114:	4629      	mov	r1, r5
 8006116:	eb63 0301 	sbc.w	r3, r3, r1
 800611a:	617b      	str	r3, [r7, #20]
 800611c:	f04f 0200 	mov.w	r2, #0
 8006120:	f04f 0300 	mov.w	r3, #0
 8006124:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006128:	4659      	mov	r1, fp
 800612a:	018b      	lsls	r3, r1, #6
 800612c:	4651      	mov	r1, sl
 800612e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006132:	4651      	mov	r1, sl
 8006134:	018a      	lsls	r2, r1, #6
 8006136:	4651      	mov	r1, sl
 8006138:	ebb2 0801 	subs.w	r8, r2, r1
 800613c:	4659      	mov	r1, fp
 800613e:	eb63 0901 	sbc.w	r9, r3, r1
 8006142:	f04f 0200 	mov.w	r2, #0
 8006146:	f04f 0300 	mov.w	r3, #0
 800614a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800614e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006152:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006156:	4690      	mov	r8, r2
 8006158:	4699      	mov	r9, r3
 800615a:	4623      	mov	r3, r4
 800615c:	eb18 0303 	adds.w	r3, r8, r3
 8006160:	60bb      	str	r3, [r7, #8]
 8006162:	462b      	mov	r3, r5
 8006164:	eb49 0303 	adc.w	r3, r9, r3
 8006168:	60fb      	str	r3, [r7, #12]
 800616a:	f04f 0200 	mov.w	r2, #0
 800616e:	f04f 0300 	mov.w	r3, #0
 8006172:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006176:	4629      	mov	r1, r5
 8006178:	024b      	lsls	r3, r1, #9
 800617a:	4621      	mov	r1, r4
 800617c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006180:	4621      	mov	r1, r4
 8006182:	024a      	lsls	r2, r1, #9
 8006184:	4610      	mov	r0, r2
 8006186:	4619      	mov	r1, r3
 8006188:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800618a:	2200      	movs	r2, #0
 800618c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800618e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006190:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006194:	f7fa f818 	bl	80001c8 <__aeabi_uldivmod>
 8006198:	4602      	mov	r2, r0
 800619a:	460b      	mov	r3, r1
 800619c:	4613      	mov	r3, r2
 800619e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061a0:	e058      	b.n	8006254 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061a2:	4b38      	ldr	r3, [pc, #224]	@ (8006284 <HAL_RCC_GetSysClockFreq+0x200>)
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	099b      	lsrs	r3, r3, #6
 80061a8:	2200      	movs	r2, #0
 80061aa:	4618      	mov	r0, r3
 80061ac:	4611      	mov	r1, r2
 80061ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80061b2:	623b      	str	r3, [r7, #32]
 80061b4:	2300      	movs	r3, #0
 80061b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80061b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80061bc:	4642      	mov	r2, r8
 80061be:	464b      	mov	r3, r9
 80061c0:	f04f 0000 	mov.w	r0, #0
 80061c4:	f04f 0100 	mov.w	r1, #0
 80061c8:	0159      	lsls	r1, r3, #5
 80061ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80061ce:	0150      	lsls	r0, r2, #5
 80061d0:	4602      	mov	r2, r0
 80061d2:	460b      	mov	r3, r1
 80061d4:	4641      	mov	r1, r8
 80061d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80061da:	4649      	mov	r1, r9
 80061dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80061e0:	f04f 0200 	mov.w	r2, #0
 80061e4:	f04f 0300 	mov.w	r3, #0
 80061e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80061ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80061f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80061f4:	ebb2 040a 	subs.w	r4, r2, sl
 80061f8:	eb63 050b 	sbc.w	r5, r3, fp
 80061fc:	f04f 0200 	mov.w	r2, #0
 8006200:	f04f 0300 	mov.w	r3, #0
 8006204:	00eb      	lsls	r3, r5, #3
 8006206:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800620a:	00e2      	lsls	r2, r4, #3
 800620c:	4614      	mov	r4, r2
 800620e:	461d      	mov	r5, r3
 8006210:	4643      	mov	r3, r8
 8006212:	18e3      	adds	r3, r4, r3
 8006214:	603b      	str	r3, [r7, #0]
 8006216:	464b      	mov	r3, r9
 8006218:	eb45 0303 	adc.w	r3, r5, r3
 800621c:	607b      	str	r3, [r7, #4]
 800621e:	f04f 0200 	mov.w	r2, #0
 8006222:	f04f 0300 	mov.w	r3, #0
 8006226:	e9d7 4500 	ldrd	r4, r5, [r7]
 800622a:	4629      	mov	r1, r5
 800622c:	028b      	lsls	r3, r1, #10
 800622e:	4621      	mov	r1, r4
 8006230:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006234:	4621      	mov	r1, r4
 8006236:	028a      	lsls	r2, r1, #10
 8006238:	4610      	mov	r0, r2
 800623a:	4619      	mov	r1, r3
 800623c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800623e:	2200      	movs	r2, #0
 8006240:	61bb      	str	r3, [r7, #24]
 8006242:	61fa      	str	r2, [r7, #28]
 8006244:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006248:	f7f9 ffbe 	bl	80001c8 <__aeabi_uldivmod>
 800624c:	4602      	mov	r2, r0
 800624e:	460b      	mov	r3, r1
 8006250:	4613      	mov	r3, r2
 8006252:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006254:	4b0b      	ldr	r3, [pc, #44]	@ (8006284 <HAL_RCC_GetSysClockFreq+0x200>)
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	0c1b      	lsrs	r3, r3, #16
 800625a:	f003 0303 	and.w	r3, r3, #3
 800625e:	3301      	adds	r3, #1
 8006260:	005b      	lsls	r3, r3, #1
 8006262:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006264:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006266:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006268:	fbb2 f3f3 	udiv	r3, r2, r3
 800626c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800626e:	e002      	b.n	8006276 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006270:	4b05      	ldr	r3, [pc, #20]	@ (8006288 <HAL_RCC_GetSysClockFreq+0x204>)
 8006272:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006274:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006276:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006278:	4618      	mov	r0, r3
 800627a:	3750      	adds	r7, #80	@ 0x50
 800627c:	46bd      	mov	sp, r7
 800627e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006282:	bf00      	nop
 8006284:	40023800 	.word	0x40023800
 8006288:	00f42400 	.word	0x00f42400
 800628c:	007a1200 	.word	0x007a1200

08006290 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006290:	b480      	push	{r7}
 8006292:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006294:	4b03      	ldr	r3, [pc, #12]	@ (80062a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006296:	681b      	ldr	r3, [r3, #0]
}
 8006298:	4618      	mov	r0, r3
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr
 80062a2:	bf00      	nop
 80062a4:	20000010 	.word	0x20000010

080062a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80062ac:	f7ff fff0 	bl	8006290 <HAL_RCC_GetHCLKFreq>
 80062b0:	4602      	mov	r2, r0
 80062b2:	4b05      	ldr	r3, [pc, #20]	@ (80062c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	0a9b      	lsrs	r3, r3, #10
 80062b8:	f003 0307 	and.w	r3, r3, #7
 80062bc:	4903      	ldr	r1, [pc, #12]	@ (80062cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80062be:	5ccb      	ldrb	r3, [r1, r3]
 80062c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	40023800 	.word	0x40023800
 80062cc:	0800b04c 	.word	0x0800b04c

080062d0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b086      	sub	sp, #24
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80062d8:	2300      	movs	r3, #0
 80062da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80062dc:	2300      	movs	r3, #0
 80062de:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 0301 	and.w	r3, r3, #1
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d105      	bne.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d035      	beq.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80062f8:	4b62      	ldr	r3, [pc, #392]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80062fa:	2200      	movs	r2, #0
 80062fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80062fe:	f7fb f9e1 	bl	80016c4 <HAL_GetTick>
 8006302:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006304:	e008      	b.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006306:	f7fb f9dd 	bl	80016c4 <HAL_GetTick>
 800630a:	4602      	mov	r2, r0
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	1ad3      	subs	r3, r2, r3
 8006310:	2b02      	cmp	r3, #2
 8006312:	d901      	bls.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006314:	2303      	movs	r3, #3
 8006316:	e0b0      	b.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006318:	4b5b      	ldr	r3, [pc, #364]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006320:	2b00      	cmp	r3, #0
 8006322:	d1f0      	bne.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	019a      	lsls	r2, r3, #6
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	071b      	lsls	r3, r3, #28
 8006330:	4955      	ldr	r1, [pc, #340]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006332:	4313      	orrs	r3, r2
 8006334:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006338:	4b52      	ldr	r3, [pc, #328]	@ (8006484 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800633a:	2201      	movs	r2, #1
 800633c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800633e:	f7fb f9c1 	bl	80016c4 <HAL_GetTick>
 8006342:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006344:	e008      	b.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006346:	f7fb f9bd 	bl	80016c4 <HAL_GetTick>
 800634a:	4602      	mov	r2, r0
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	1ad3      	subs	r3, r2, r3
 8006350:	2b02      	cmp	r3, #2
 8006352:	d901      	bls.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006354:	2303      	movs	r3, #3
 8006356:	e090      	b.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006358:	4b4b      	ldr	r3, [pc, #300]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006360:	2b00      	cmp	r3, #0
 8006362:	d0f0      	beq.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f003 0302 	and.w	r3, r3, #2
 800636c:	2b00      	cmp	r3, #0
 800636e:	f000 8083 	beq.w	8006478 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006372:	2300      	movs	r3, #0
 8006374:	60fb      	str	r3, [r7, #12]
 8006376:	4b44      	ldr	r3, [pc, #272]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800637a:	4a43      	ldr	r2, [pc, #268]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800637c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006380:	6413      	str	r3, [r2, #64]	@ 0x40
 8006382:	4b41      	ldr	r3, [pc, #260]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006386:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800638a:	60fb      	str	r3, [r7, #12]
 800638c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800638e:	4b3f      	ldr	r3, [pc, #252]	@ (800648c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a3e      	ldr	r2, [pc, #248]	@ (800648c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006394:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006398:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800639a:	f7fb f993 	bl	80016c4 <HAL_GetTick>
 800639e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80063a0:	e008      	b.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063a2:	f7fb f98f 	bl	80016c4 <HAL_GetTick>
 80063a6:	4602      	mov	r2, r0
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	1ad3      	subs	r3, r2, r3
 80063ac:	2b02      	cmp	r3, #2
 80063ae:	d901      	bls.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80063b0:	2303      	movs	r3, #3
 80063b2:	e062      	b.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80063b4:	4b35      	ldr	r3, [pc, #212]	@ (800648c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d0f0      	beq.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80063c0:	4b31      	ldr	r3, [pc, #196]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063c8:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d02f      	beq.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063d8:	693a      	ldr	r2, [r7, #16]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d028      	beq.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80063de:	4b2a      	ldr	r3, [pc, #168]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063e6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80063e8:	4b29      	ldr	r3, [pc, #164]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80063ea:	2201      	movs	r2, #1
 80063ec:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80063ee:	4b28      	ldr	r3, [pc, #160]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80063f0:	2200      	movs	r2, #0
 80063f2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80063f4:	4a24      	ldr	r2, [pc, #144]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80063fa:	4b23      	ldr	r3, [pc, #140]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063fe:	f003 0301 	and.w	r3, r3, #1
 8006402:	2b01      	cmp	r3, #1
 8006404:	d114      	bne.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006406:	f7fb f95d 	bl	80016c4 <HAL_GetTick>
 800640a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800640c:	e00a      	b.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800640e:	f7fb f959 	bl	80016c4 <HAL_GetTick>
 8006412:	4602      	mov	r2, r0
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	1ad3      	subs	r3, r2, r3
 8006418:	f241 3288 	movw	r2, #5000	@ 0x1388
 800641c:	4293      	cmp	r3, r2
 800641e:	d901      	bls.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006420:	2303      	movs	r3, #3
 8006422:	e02a      	b.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006424:	4b18      	ldr	r3, [pc, #96]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006426:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006428:	f003 0302 	and.w	r3, r3, #2
 800642c:	2b00      	cmp	r3, #0
 800642e:	d0ee      	beq.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006438:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800643c:	d10d      	bne.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800643e:	4b12      	ldr	r3, [pc, #72]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800644e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006452:	490d      	ldr	r1, [pc, #52]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006454:	4313      	orrs	r3, r2
 8006456:	608b      	str	r3, [r1, #8]
 8006458:	e005      	b.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800645a:	4b0b      	ldr	r3, [pc, #44]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	4a0a      	ldr	r2, [pc, #40]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006460:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006464:	6093      	str	r3, [r2, #8]
 8006466:	4b08      	ldr	r3, [pc, #32]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006468:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006472:	4905      	ldr	r1, [pc, #20]	@ (8006488 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006474:	4313      	orrs	r3, r2
 8006476:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	3718      	adds	r7, #24
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	42470068 	.word	0x42470068
 8006488:	40023800 	.word	0x40023800
 800648c:	40007000 	.word	0x40007000
 8006490:	42470e40 	.word	0x42470e40

08006494 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006494:	b480      	push	{r7}
 8006496:	b087      	sub	sp, #28
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800649c:	2300      	movs	r3, #0
 800649e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80064a0:	2300      	movs	r3, #0
 80064a2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80064a4:	2300      	movs	r3, #0
 80064a6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80064a8:	2300      	movs	r3, #0
 80064aa:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d13f      	bne.n	8006532 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80064b2:	4b24      	ldr	r3, [pc, #144]	@ (8006544 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80064ba:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d006      	beq.n	80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80064c8:	d12f      	bne.n	800652a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80064ca:	4b1f      	ldr	r3, [pc, #124]	@ (8006548 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80064cc:	617b      	str	r3, [r7, #20]
          break;
 80064ce:	e02f      	b.n	8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80064d0:	4b1c      	ldr	r3, [pc, #112]	@ (8006544 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80064d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80064dc:	d108      	bne.n	80064f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80064de:	4b19      	ldr	r3, [pc, #100]	@ (8006544 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80064e6:	4a19      	ldr	r2, [pc, #100]	@ (800654c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80064e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ec:	613b      	str	r3, [r7, #16]
 80064ee:	e007      	b.n	8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80064f0:	4b14      	ldr	r3, [pc, #80]	@ (8006544 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80064f8:	4a15      	ldr	r2, [pc, #84]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80064fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80064fe:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006500:	4b10      	ldr	r3, [pc, #64]	@ (8006544 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006502:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006506:	099b      	lsrs	r3, r3, #6
 8006508:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	fb02 f303 	mul.w	r3, r2, r3
 8006512:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006514:	4b0b      	ldr	r3, [pc, #44]	@ (8006544 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006516:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800651a:	0f1b      	lsrs	r3, r3, #28
 800651c:	f003 0307 	and.w	r3, r3, #7
 8006520:	68ba      	ldr	r2, [r7, #8]
 8006522:	fbb2 f3f3 	udiv	r3, r2, r3
 8006526:	617b      	str	r3, [r7, #20]
          break;
 8006528:	e002      	b.n	8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 800652a:	2300      	movs	r3, #0
 800652c:	617b      	str	r3, [r7, #20]
          break;
 800652e:	bf00      	nop
        }
      }
      break;
 8006530:	e000      	b.n	8006534 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8006532:	bf00      	nop
    }
  }
  return frequency;
 8006534:	697b      	ldr	r3, [r7, #20]
}
 8006536:	4618      	mov	r0, r3
 8006538:	371c      	adds	r7, #28
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr
 8006542:	bf00      	nop
 8006544:	40023800 	.word	0x40023800
 8006548:	00bb8000 	.word	0x00bb8000
 800654c:	007a1200 	.word	0x007a1200
 8006550:	00f42400 	.word	0x00f42400

08006554 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b082      	sub	sp, #8
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d101      	bne.n	8006566 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	e07b      	b.n	800665e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800656a:	2b00      	cmp	r3, #0
 800656c:	d108      	bne.n	8006580 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006576:	d009      	beq.n	800658c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2200      	movs	r2, #0
 800657c:	61da      	str	r2, [r3, #28]
 800657e:	e005      	b.n	800658c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006598:	b2db      	uxtb	r3, r3
 800659a:	2b00      	cmp	r3, #0
 800659c:	d106      	bne.n	80065ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f7fa fecc 	bl	8001344 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2202      	movs	r2, #2
 80065b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80065c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80065d4:	431a      	orrs	r2, r3
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065de:	431a      	orrs	r2, r3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	691b      	ldr	r3, [r3, #16]
 80065e4:	f003 0302 	and.w	r3, r3, #2
 80065e8:	431a      	orrs	r2, r3
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	695b      	ldr	r3, [r3, #20]
 80065ee:	f003 0301 	and.w	r3, r3, #1
 80065f2:	431a      	orrs	r2, r3
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	699b      	ldr	r3, [r3, #24]
 80065f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80065fc:	431a      	orrs	r2, r3
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	69db      	ldr	r3, [r3, #28]
 8006602:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006606:	431a      	orrs	r2, r3
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6a1b      	ldr	r3, [r3, #32]
 800660c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006610:	ea42 0103 	orr.w	r1, r2, r3
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006618:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	430a      	orrs	r2, r1
 8006622:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	699b      	ldr	r3, [r3, #24]
 8006628:	0c1b      	lsrs	r3, r3, #16
 800662a:	f003 0104 	and.w	r1, r3, #4
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006632:	f003 0210 	and.w	r2, r3, #16
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	430a      	orrs	r2, r1
 800663c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	69da      	ldr	r2, [r3, #28]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800664c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2200      	movs	r2, #0
 8006652:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2201      	movs	r2, #1
 8006658:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800665c:	2300      	movs	r3, #0
}
 800665e:	4618      	mov	r0, r3
 8006660:	3708      	adds	r7, #8
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}

08006666 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006666:	b580      	push	{r7, lr}
 8006668:	b082      	sub	sp, #8
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d101      	bne.n	8006678 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	e041      	b.n	80066fc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800667e:	b2db      	uxtb	r3, r3
 8006680:	2b00      	cmp	r3, #0
 8006682:	d106      	bne.n	8006692 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f7fa fea1 	bl	80013d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2202      	movs	r2, #2
 8006696:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	3304      	adds	r3, #4
 80066a2:	4619      	mov	r1, r3
 80066a4:	4610      	mov	r0, r2
 80066a6:	f000 fad9 	bl	8006c5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2201      	movs	r2, #1
 80066ae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2201      	movs	r2, #1
 80066b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2201      	movs	r2, #1
 80066be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2201      	movs	r2, #1
 80066c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2201      	movs	r2, #1
 80066ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2201      	movs	r2, #1
 80066d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2201      	movs	r2, #1
 80066de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2201      	movs	r2, #1
 80066e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2201      	movs	r2, #1
 80066ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2201      	movs	r2, #1
 80066f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80066fa:	2300      	movs	r3, #0
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3708      	adds	r7, #8
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b082      	sub	sp, #8
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d101      	bne.n	8006716 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	e041      	b.n	800679a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800671c:	b2db      	uxtb	r3, r3
 800671e:	2b00      	cmp	r3, #0
 8006720:	d106      	bne.n	8006730 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 f839 	bl	80067a2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2202      	movs	r2, #2
 8006734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	3304      	adds	r3, #4
 8006740:	4619      	mov	r1, r3
 8006742:	4610      	mov	r0, r2
 8006744:	f000 fa8a 	bl	8006c5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3708      	adds	r7, #8
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}

080067a2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80067a2:	b480      	push	{r7}
 80067a4:	b083      	sub	sp, #12
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80067aa:	bf00      	nop
 80067ac:	370c      	adds	r7, #12
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr
	...

080067b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d109      	bne.n	80067dc <HAL_TIM_PWM_Start+0x24>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	bf14      	ite	ne
 80067d4:	2301      	movne	r3, #1
 80067d6:	2300      	moveq	r3, #0
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	e022      	b.n	8006822 <HAL_TIM_PWM_Start+0x6a>
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	2b04      	cmp	r3, #4
 80067e0:	d109      	bne.n	80067f6 <HAL_TIM_PWM_Start+0x3e>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	bf14      	ite	ne
 80067ee:	2301      	movne	r3, #1
 80067f0:	2300      	moveq	r3, #0
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	e015      	b.n	8006822 <HAL_TIM_PWM_Start+0x6a>
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	2b08      	cmp	r3, #8
 80067fa:	d109      	bne.n	8006810 <HAL_TIM_PWM_Start+0x58>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006802:	b2db      	uxtb	r3, r3
 8006804:	2b01      	cmp	r3, #1
 8006806:	bf14      	ite	ne
 8006808:	2301      	movne	r3, #1
 800680a:	2300      	moveq	r3, #0
 800680c:	b2db      	uxtb	r3, r3
 800680e:	e008      	b.n	8006822 <HAL_TIM_PWM_Start+0x6a>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006816:	b2db      	uxtb	r3, r3
 8006818:	2b01      	cmp	r3, #1
 800681a:	bf14      	ite	ne
 800681c:	2301      	movne	r3, #1
 800681e:	2300      	moveq	r3, #0
 8006820:	b2db      	uxtb	r3, r3
 8006822:	2b00      	cmp	r3, #0
 8006824:	d001      	beq.n	800682a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e07c      	b.n	8006924 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d104      	bne.n	800683a <HAL_TIM_PWM_Start+0x82>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2202      	movs	r2, #2
 8006834:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006838:	e013      	b.n	8006862 <HAL_TIM_PWM_Start+0xaa>
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	2b04      	cmp	r3, #4
 800683e:	d104      	bne.n	800684a <HAL_TIM_PWM_Start+0x92>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2202      	movs	r2, #2
 8006844:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006848:	e00b      	b.n	8006862 <HAL_TIM_PWM_Start+0xaa>
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	2b08      	cmp	r3, #8
 800684e:	d104      	bne.n	800685a <HAL_TIM_PWM_Start+0xa2>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2202      	movs	r2, #2
 8006854:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006858:	e003      	b.n	8006862 <HAL_TIM_PWM_Start+0xaa>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2202      	movs	r2, #2
 800685e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	2201      	movs	r2, #1
 8006868:	6839      	ldr	r1, [r7, #0]
 800686a:	4618      	mov	r0, r3
 800686c:	f000 fce6 	bl	800723c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a2d      	ldr	r2, [pc, #180]	@ (800692c <HAL_TIM_PWM_Start+0x174>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d004      	beq.n	8006884 <HAL_TIM_PWM_Start+0xcc>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a2c      	ldr	r2, [pc, #176]	@ (8006930 <HAL_TIM_PWM_Start+0x178>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d101      	bne.n	8006888 <HAL_TIM_PWM_Start+0xd0>
 8006884:	2301      	movs	r3, #1
 8006886:	e000      	b.n	800688a <HAL_TIM_PWM_Start+0xd2>
 8006888:	2300      	movs	r3, #0
 800688a:	2b00      	cmp	r3, #0
 800688c:	d007      	beq.n	800689e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800689c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a22      	ldr	r2, [pc, #136]	@ (800692c <HAL_TIM_PWM_Start+0x174>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d022      	beq.n	80068ee <HAL_TIM_PWM_Start+0x136>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068b0:	d01d      	beq.n	80068ee <HAL_TIM_PWM_Start+0x136>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a1f      	ldr	r2, [pc, #124]	@ (8006934 <HAL_TIM_PWM_Start+0x17c>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d018      	beq.n	80068ee <HAL_TIM_PWM_Start+0x136>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a1d      	ldr	r2, [pc, #116]	@ (8006938 <HAL_TIM_PWM_Start+0x180>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d013      	beq.n	80068ee <HAL_TIM_PWM_Start+0x136>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a1c      	ldr	r2, [pc, #112]	@ (800693c <HAL_TIM_PWM_Start+0x184>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d00e      	beq.n	80068ee <HAL_TIM_PWM_Start+0x136>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a16      	ldr	r2, [pc, #88]	@ (8006930 <HAL_TIM_PWM_Start+0x178>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d009      	beq.n	80068ee <HAL_TIM_PWM_Start+0x136>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a18      	ldr	r2, [pc, #96]	@ (8006940 <HAL_TIM_PWM_Start+0x188>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d004      	beq.n	80068ee <HAL_TIM_PWM_Start+0x136>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a16      	ldr	r2, [pc, #88]	@ (8006944 <HAL_TIM_PWM_Start+0x18c>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d111      	bne.n	8006912 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	f003 0307 	and.w	r3, r3, #7
 80068f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2b06      	cmp	r3, #6
 80068fe:	d010      	beq.n	8006922 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f042 0201 	orr.w	r2, r2, #1
 800690e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006910:	e007      	b.n	8006922 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f042 0201 	orr.w	r2, r2, #1
 8006920:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006922:	2300      	movs	r3, #0
}
 8006924:	4618      	mov	r0, r3
 8006926:	3710      	adds	r7, #16
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}
 800692c:	40010000 	.word	0x40010000
 8006930:	40010400 	.word	0x40010400
 8006934:	40000400 	.word	0x40000400
 8006938:	40000800 	.word	0x40000800
 800693c:	40000c00 	.word	0x40000c00
 8006940:	40014000 	.word	0x40014000
 8006944:	40001800 	.word	0x40001800

08006948 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b086      	sub	sp, #24
 800694c:	af00      	add	r7, sp, #0
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	60b9      	str	r1, [r7, #8]
 8006952:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006954:	2300      	movs	r3, #0
 8006956:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800695e:	2b01      	cmp	r3, #1
 8006960:	d101      	bne.n	8006966 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006962:	2302      	movs	r3, #2
 8006964:	e0ae      	b.n	8006ac4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2201      	movs	r2, #1
 800696a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2b0c      	cmp	r3, #12
 8006972:	f200 809f 	bhi.w	8006ab4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006976:	a201      	add	r2, pc, #4	@ (adr r2, 800697c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800697c:	080069b1 	.word	0x080069b1
 8006980:	08006ab5 	.word	0x08006ab5
 8006984:	08006ab5 	.word	0x08006ab5
 8006988:	08006ab5 	.word	0x08006ab5
 800698c:	080069f1 	.word	0x080069f1
 8006990:	08006ab5 	.word	0x08006ab5
 8006994:	08006ab5 	.word	0x08006ab5
 8006998:	08006ab5 	.word	0x08006ab5
 800699c:	08006a33 	.word	0x08006a33
 80069a0:	08006ab5 	.word	0x08006ab5
 80069a4:	08006ab5 	.word	0x08006ab5
 80069a8:	08006ab5 	.word	0x08006ab5
 80069ac:	08006a73 	.word	0x08006a73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	68b9      	ldr	r1, [r7, #8]
 80069b6:	4618      	mov	r0, r3
 80069b8:	f000 f9f6 	bl	8006da8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	699a      	ldr	r2, [r3, #24]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f042 0208 	orr.w	r2, r2, #8
 80069ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	699a      	ldr	r2, [r3, #24]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f022 0204 	bic.w	r2, r2, #4
 80069da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	6999      	ldr	r1, [r3, #24]
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	691a      	ldr	r2, [r3, #16]
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	430a      	orrs	r2, r1
 80069ec:	619a      	str	r2, [r3, #24]
      break;
 80069ee:	e064      	b.n	8006aba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	68b9      	ldr	r1, [r7, #8]
 80069f6:	4618      	mov	r0, r3
 80069f8:	f000 fa46 	bl	8006e88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	699a      	ldr	r2, [r3, #24]
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	699a      	ldr	r2, [r3, #24]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	6999      	ldr	r1, [r3, #24]
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	021a      	lsls	r2, r3, #8
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	430a      	orrs	r2, r1
 8006a2e:	619a      	str	r2, [r3, #24]
      break;
 8006a30:	e043      	b.n	8006aba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	68b9      	ldr	r1, [r7, #8]
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f000 fa9b 	bl	8006f74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	69da      	ldr	r2, [r3, #28]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f042 0208 	orr.w	r2, r2, #8
 8006a4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	69da      	ldr	r2, [r3, #28]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f022 0204 	bic.w	r2, r2, #4
 8006a5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	69d9      	ldr	r1, [r3, #28]
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	691a      	ldr	r2, [r3, #16]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	430a      	orrs	r2, r1
 8006a6e:	61da      	str	r2, [r3, #28]
      break;
 8006a70:	e023      	b.n	8006aba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	68b9      	ldr	r1, [r7, #8]
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f000 faef 	bl	800705c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	69da      	ldr	r2, [r3, #28]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	69da      	ldr	r2, [r3, #28]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	69d9      	ldr	r1, [r3, #28]
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	691b      	ldr	r3, [r3, #16]
 8006aa8:	021a      	lsls	r2, r3, #8
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	430a      	orrs	r2, r1
 8006ab0:	61da      	str	r2, [r3, #28]
      break;
 8006ab2:	e002      	b.n	8006aba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	75fb      	strb	r3, [r7, #23]
      break;
 8006ab8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2200      	movs	r2, #0
 8006abe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006ac2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3718      	adds	r7, #24
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d101      	bne.n	8006ae8 <HAL_TIM_ConfigClockSource+0x1c>
 8006ae4:	2302      	movs	r3, #2
 8006ae6:	e0b4      	b.n	8006c52 <HAL_TIM_ConfigClockSource+0x186>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2202      	movs	r2, #2
 8006af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006b06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006b0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	68ba      	ldr	r2, [r7, #8]
 8006b16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b20:	d03e      	beq.n	8006ba0 <HAL_TIM_ConfigClockSource+0xd4>
 8006b22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b26:	f200 8087 	bhi.w	8006c38 <HAL_TIM_ConfigClockSource+0x16c>
 8006b2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b2e:	f000 8086 	beq.w	8006c3e <HAL_TIM_ConfigClockSource+0x172>
 8006b32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b36:	d87f      	bhi.n	8006c38 <HAL_TIM_ConfigClockSource+0x16c>
 8006b38:	2b70      	cmp	r3, #112	@ 0x70
 8006b3a:	d01a      	beq.n	8006b72 <HAL_TIM_ConfigClockSource+0xa6>
 8006b3c:	2b70      	cmp	r3, #112	@ 0x70
 8006b3e:	d87b      	bhi.n	8006c38 <HAL_TIM_ConfigClockSource+0x16c>
 8006b40:	2b60      	cmp	r3, #96	@ 0x60
 8006b42:	d050      	beq.n	8006be6 <HAL_TIM_ConfigClockSource+0x11a>
 8006b44:	2b60      	cmp	r3, #96	@ 0x60
 8006b46:	d877      	bhi.n	8006c38 <HAL_TIM_ConfigClockSource+0x16c>
 8006b48:	2b50      	cmp	r3, #80	@ 0x50
 8006b4a:	d03c      	beq.n	8006bc6 <HAL_TIM_ConfigClockSource+0xfa>
 8006b4c:	2b50      	cmp	r3, #80	@ 0x50
 8006b4e:	d873      	bhi.n	8006c38 <HAL_TIM_ConfigClockSource+0x16c>
 8006b50:	2b40      	cmp	r3, #64	@ 0x40
 8006b52:	d058      	beq.n	8006c06 <HAL_TIM_ConfigClockSource+0x13a>
 8006b54:	2b40      	cmp	r3, #64	@ 0x40
 8006b56:	d86f      	bhi.n	8006c38 <HAL_TIM_ConfigClockSource+0x16c>
 8006b58:	2b30      	cmp	r3, #48	@ 0x30
 8006b5a:	d064      	beq.n	8006c26 <HAL_TIM_ConfigClockSource+0x15a>
 8006b5c:	2b30      	cmp	r3, #48	@ 0x30
 8006b5e:	d86b      	bhi.n	8006c38 <HAL_TIM_ConfigClockSource+0x16c>
 8006b60:	2b20      	cmp	r3, #32
 8006b62:	d060      	beq.n	8006c26 <HAL_TIM_ConfigClockSource+0x15a>
 8006b64:	2b20      	cmp	r3, #32
 8006b66:	d867      	bhi.n	8006c38 <HAL_TIM_ConfigClockSource+0x16c>
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d05c      	beq.n	8006c26 <HAL_TIM_ConfigClockSource+0x15a>
 8006b6c:	2b10      	cmp	r3, #16
 8006b6e:	d05a      	beq.n	8006c26 <HAL_TIM_ConfigClockSource+0x15a>
 8006b70:	e062      	b.n	8006c38 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b82:	f000 fb3b 	bl	80071fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006b94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	68ba      	ldr	r2, [r7, #8]
 8006b9c:	609a      	str	r2, [r3, #8]
      break;
 8006b9e:	e04f      	b.n	8006c40 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006bb0:	f000 fb24 	bl	80071fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	689a      	ldr	r2, [r3, #8]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006bc2:	609a      	str	r2, [r3, #8]
      break;
 8006bc4:	e03c      	b.n	8006c40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	f000 fa98 	bl	8007108 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	2150      	movs	r1, #80	@ 0x50
 8006bde:	4618      	mov	r0, r3
 8006be0:	f000 faf1 	bl	80071c6 <TIM_ITRx_SetConfig>
      break;
 8006be4:	e02c      	b.n	8006c40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	f000 fab7 	bl	8007166 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2160      	movs	r1, #96	@ 0x60
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f000 fae1 	bl	80071c6 <TIM_ITRx_SetConfig>
      break;
 8006c04:	e01c      	b.n	8006c40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c12:	461a      	mov	r2, r3
 8006c14:	f000 fa78 	bl	8007108 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	2140      	movs	r1, #64	@ 0x40
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f000 fad1 	bl	80071c6 <TIM_ITRx_SetConfig>
      break;
 8006c24:	e00c      	b.n	8006c40 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4619      	mov	r1, r3
 8006c30:	4610      	mov	r0, r2
 8006c32:	f000 fac8 	bl	80071c6 <TIM_ITRx_SetConfig>
      break;
 8006c36:	e003      	b.n	8006c40 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	73fb      	strb	r3, [r7, #15]
      break;
 8006c3c:	e000      	b.n	8006c40 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006c3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3710      	adds	r7, #16
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
	...

08006c5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b085      	sub	sp, #20
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4a43      	ldr	r2, [pc, #268]	@ (8006d7c <TIM_Base_SetConfig+0x120>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d013      	beq.n	8006c9c <TIM_Base_SetConfig+0x40>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c7a:	d00f      	beq.n	8006c9c <TIM_Base_SetConfig+0x40>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	4a40      	ldr	r2, [pc, #256]	@ (8006d80 <TIM_Base_SetConfig+0x124>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d00b      	beq.n	8006c9c <TIM_Base_SetConfig+0x40>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	4a3f      	ldr	r2, [pc, #252]	@ (8006d84 <TIM_Base_SetConfig+0x128>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d007      	beq.n	8006c9c <TIM_Base_SetConfig+0x40>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	4a3e      	ldr	r2, [pc, #248]	@ (8006d88 <TIM_Base_SetConfig+0x12c>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d003      	beq.n	8006c9c <TIM_Base_SetConfig+0x40>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	4a3d      	ldr	r2, [pc, #244]	@ (8006d8c <TIM_Base_SetConfig+0x130>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d108      	bne.n	8006cae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ca2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	68fa      	ldr	r2, [r7, #12]
 8006caa:	4313      	orrs	r3, r2
 8006cac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	4a32      	ldr	r2, [pc, #200]	@ (8006d7c <TIM_Base_SetConfig+0x120>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d02b      	beq.n	8006d0e <TIM_Base_SetConfig+0xb2>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cbc:	d027      	beq.n	8006d0e <TIM_Base_SetConfig+0xb2>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	4a2f      	ldr	r2, [pc, #188]	@ (8006d80 <TIM_Base_SetConfig+0x124>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d023      	beq.n	8006d0e <TIM_Base_SetConfig+0xb2>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	4a2e      	ldr	r2, [pc, #184]	@ (8006d84 <TIM_Base_SetConfig+0x128>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d01f      	beq.n	8006d0e <TIM_Base_SetConfig+0xb2>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	4a2d      	ldr	r2, [pc, #180]	@ (8006d88 <TIM_Base_SetConfig+0x12c>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d01b      	beq.n	8006d0e <TIM_Base_SetConfig+0xb2>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4a2c      	ldr	r2, [pc, #176]	@ (8006d8c <TIM_Base_SetConfig+0x130>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d017      	beq.n	8006d0e <TIM_Base_SetConfig+0xb2>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4a2b      	ldr	r2, [pc, #172]	@ (8006d90 <TIM_Base_SetConfig+0x134>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d013      	beq.n	8006d0e <TIM_Base_SetConfig+0xb2>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	4a2a      	ldr	r2, [pc, #168]	@ (8006d94 <TIM_Base_SetConfig+0x138>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d00f      	beq.n	8006d0e <TIM_Base_SetConfig+0xb2>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	4a29      	ldr	r2, [pc, #164]	@ (8006d98 <TIM_Base_SetConfig+0x13c>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d00b      	beq.n	8006d0e <TIM_Base_SetConfig+0xb2>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	4a28      	ldr	r2, [pc, #160]	@ (8006d9c <TIM_Base_SetConfig+0x140>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d007      	beq.n	8006d0e <TIM_Base_SetConfig+0xb2>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	4a27      	ldr	r2, [pc, #156]	@ (8006da0 <TIM_Base_SetConfig+0x144>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d003      	beq.n	8006d0e <TIM_Base_SetConfig+0xb2>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	4a26      	ldr	r2, [pc, #152]	@ (8006da4 <TIM_Base_SetConfig+0x148>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d108      	bne.n	8006d20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	68fa      	ldr	r2, [r7, #12]
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	695b      	ldr	r3, [r3, #20]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	689a      	ldr	r2, [r3, #8]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4a0e      	ldr	r2, [pc, #56]	@ (8006d7c <TIM_Base_SetConfig+0x120>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d003      	beq.n	8006d4e <TIM_Base_SetConfig+0xf2>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	4a10      	ldr	r2, [pc, #64]	@ (8006d8c <TIM_Base_SetConfig+0x130>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d103      	bne.n	8006d56 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	691a      	ldr	r2, [r3, #16]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f043 0204 	orr.w	r2, r3, #4
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2201      	movs	r2, #1
 8006d66:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	68fa      	ldr	r2, [r7, #12]
 8006d6c:	601a      	str	r2, [r3, #0]
}
 8006d6e:	bf00      	nop
 8006d70:	3714      	adds	r7, #20
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr
 8006d7a:	bf00      	nop
 8006d7c:	40010000 	.word	0x40010000
 8006d80:	40000400 	.word	0x40000400
 8006d84:	40000800 	.word	0x40000800
 8006d88:	40000c00 	.word	0x40000c00
 8006d8c:	40010400 	.word	0x40010400
 8006d90:	40014000 	.word	0x40014000
 8006d94:	40014400 	.word	0x40014400
 8006d98:	40014800 	.word	0x40014800
 8006d9c:	40001800 	.word	0x40001800
 8006da0:	40001c00 	.word	0x40001c00
 8006da4:	40002000 	.word	0x40002000

08006da8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b087      	sub	sp, #28
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6a1b      	ldr	r3, [r3, #32]
 8006db6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6a1b      	ldr	r3, [r3, #32]
 8006dbc:	f023 0201 	bic.w	r2, r3, #1
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	699b      	ldr	r3, [r3, #24]
 8006dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f023 0303 	bic.w	r3, r3, #3
 8006dde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	68fa      	ldr	r2, [r7, #12]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	f023 0302 	bic.w	r3, r3, #2
 8006df0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	697a      	ldr	r2, [r7, #20]
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4a20      	ldr	r2, [pc, #128]	@ (8006e80 <TIM_OC1_SetConfig+0xd8>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d003      	beq.n	8006e0c <TIM_OC1_SetConfig+0x64>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	4a1f      	ldr	r2, [pc, #124]	@ (8006e84 <TIM_OC1_SetConfig+0xdc>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d10c      	bne.n	8006e26 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	f023 0308 	bic.w	r3, r3, #8
 8006e12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	697a      	ldr	r2, [r7, #20]
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	f023 0304 	bic.w	r3, r3, #4
 8006e24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	4a15      	ldr	r2, [pc, #84]	@ (8006e80 <TIM_OC1_SetConfig+0xd8>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d003      	beq.n	8006e36 <TIM_OC1_SetConfig+0x8e>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	4a14      	ldr	r2, [pc, #80]	@ (8006e84 <TIM_OC1_SetConfig+0xdc>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d111      	bne.n	8006e5a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006e44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	695b      	ldr	r3, [r3, #20]
 8006e4a:	693a      	ldr	r2, [r7, #16]
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	699b      	ldr	r3, [r3, #24]
 8006e54:	693a      	ldr	r2, [r7, #16]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	693a      	ldr	r2, [r7, #16]
 8006e5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	68fa      	ldr	r2, [r7, #12]
 8006e64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	685a      	ldr	r2, [r3, #4]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	697a      	ldr	r2, [r7, #20]
 8006e72:	621a      	str	r2, [r3, #32]
}
 8006e74:	bf00      	nop
 8006e76:	371c      	adds	r7, #28
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr
 8006e80:	40010000 	.word	0x40010000
 8006e84:	40010400 	.word	0x40010400

08006e88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b087      	sub	sp, #28
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6a1b      	ldr	r3, [r3, #32]
 8006e96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6a1b      	ldr	r3, [r3, #32]
 8006e9c:	f023 0210 	bic.w	r2, r3, #16
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	699b      	ldr	r3, [r3, #24]
 8006eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006eb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ebe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	021b      	lsls	r3, r3, #8
 8006ec6:	68fa      	ldr	r2, [r7, #12]
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	f023 0320 	bic.w	r3, r3, #32
 8006ed2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	011b      	lsls	r3, r3, #4
 8006eda:	697a      	ldr	r2, [r7, #20]
 8006edc:	4313      	orrs	r3, r2
 8006ede:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	4a22      	ldr	r2, [pc, #136]	@ (8006f6c <TIM_OC2_SetConfig+0xe4>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d003      	beq.n	8006ef0 <TIM_OC2_SetConfig+0x68>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	4a21      	ldr	r2, [pc, #132]	@ (8006f70 <TIM_OC2_SetConfig+0xe8>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d10d      	bne.n	8006f0c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ef6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	011b      	lsls	r3, r3, #4
 8006efe:	697a      	ldr	r2, [r7, #20]
 8006f00:	4313      	orrs	r3, r2
 8006f02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f0a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	4a17      	ldr	r2, [pc, #92]	@ (8006f6c <TIM_OC2_SetConfig+0xe4>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d003      	beq.n	8006f1c <TIM_OC2_SetConfig+0x94>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	4a16      	ldr	r2, [pc, #88]	@ (8006f70 <TIM_OC2_SetConfig+0xe8>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d113      	bne.n	8006f44 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006f22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006f2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	695b      	ldr	r3, [r3, #20]
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	693a      	ldr	r2, [r7, #16]
 8006f34:	4313      	orrs	r3, r2
 8006f36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	699b      	ldr	r3, [r3, #24]
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	693a      	ldr	r2, [r7, #16]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	693a      	ldr	r2, [r7, #16]
 8006f48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	68fa      	ldr	r2, [r7, #12]
 8006f4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	685a      	ldr	r2, [r3, #4]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	697a      	ldr	r2, [r7, #20]
 8006f5c:	621a      	str	r2, [r3, #32]
}
 8006f5e:	bf00      	nop
 8006f60:	371c      	adds	r7, #28
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop
 8006f6c:	40010000 	.word	0x40010000
 8006f70:	40010400 	.word	0x40010400

08006f74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b087      	sub	sp, #28
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6a1b      	ldr	r3, [r3, #32]
 8006f82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6a1b      	ldr	r3, [r3, #32]
 8006f88:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	69db      	ldr	r3, [r3, #28]
 8006f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f023 0303 	bic.w	r3, r3, #3
 8006faa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	68fa      	ldr	r2, [r7, #12]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006fbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	021b      	lsls	r3, r3, #8
 8006fc4:	697a      	ldr	r2, [r7, #20]
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	4a21      	ldr	r2, [pc, #132]	@ (8007054 <TIM_OC3_SetConfig+0xe0>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d003      	beq.n	8006fda <TIM_OC3_SetConfig+0x66>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	4a20      	ldr	r2, [pc, #128]	@ (8007058 <TIM_OC3_SetConfig+0xe4>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d10d      	bne.n	8006ff6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006fe0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	021b      	lsls	r3, r3, #8
 8006fe8:	697a      	ldr	r2, [r7, #20]
 8006fea:	4313      	orrs	r3, r2
 8006fec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006ff4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	4a16      	ldr	r2, [pc, #88]	@ (8007054 <TIM_OC3_SetConfig+0xe0>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d003      	beq.n	8007006 <TIM_OC3_SetConfig+0x92>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	4a15      	ldr	r2, [pc, #84]	@ (8007058 <TIM_OC3_SetConfig+0xe4>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d113      	bne.n	800702e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800700c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007014:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	695b      	ldr	r3, [r3, #20]
 800701a:	011b      	lsls	r3, r3, #4
 800701c:	693a      	ldr	r2, [r7, #16]
 800701e:	4313      	orrs	r3, r2
 8007020:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	699b      	ldr	r3, [r3, #24]
 8007026:	011b      	lsls	r3, r3, #4
 8007028:	693a      	ldr	r2, [r7, #16]
 800702a:	4313      	orrs	r3, r2
 800702c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	693a      	ldr	r2, [r7, #16]
 8007032:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	68fa      	ldr	r2, [r7, #12]
 8007038:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	685a      	ldr	r2, [r3, #4]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	697a      	ldr	r2, [r7, #20]
 8007046:	621a      	str	r2, [r3, #32]
}
 8007048:	bf00      	nop
 800704a:	371c      	adds	r7, #28
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr
 8007054:	40010000 	.word	0x40010000
 8007058:	40010400 	.word	0x40010400

0800705c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800705c:	b480      	push	{r7}
 800705e:	b087      	sub	sp, #28
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6a1b      	ldr	r3, [r3, #32]
 800706a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6a1b      	ldr	r3, [r3, #32]
 8007070:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	69db      	ldr	r3, [r3, #28]
 8007082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800708a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007092:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	021b      	lsls	r3, r3, #8
 800709a:	68fa      	ldr	r2, [r7, #12]
 800709c:	4313      	orrs	r3, r2
 800709e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80070a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	031b      	lsls	r3, r3, #12
 80070ae:	693a      	ldr	r2, [r7, #16]
 80070b0:	4313      	orrs	r3, r2
 80070b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	4a12      	ldr	r2, [pc, #72]	@ (8007100 <TIM_OC4_SetConfig+0xa4>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d003      	beq.n	80070c4 <TIM_OC4_SetConfig+0x68>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	4a11      	ldr	r2, [pc, #68]	@ (8007104 <TIM_OC4_SetConfig+0xa8>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d109      	bne.n	80070d8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80070ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	695b      	ldr	r3, [r3, #20]
 80070d0:	019b      	lsls	r3, r3, #6
 80070d2:	697a      	ldr	r2, [r7, #20]
 80070d4:	4313      	orrs	r3, r2
 80070d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	697a      	ldr	r2, [r7, #20]
 80070dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	68fa      	ldr	r2, [r7, #12]
 80070e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	685a      	ldr	r2, [r3, #4]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	693a      	ldr	r2, [r7, #16]
 80070f0:	621a      	str	r2, [r3, #32]
}
 80070f2:	bf00      	nop
 80070f4:	371c      	adds	r7, #28
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr
 80070fe:	bf00      	nop
 8007100:	40010000 	.word	0x40010000
 8007104:	40010400 	.word	0x40010400

08007108 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007108:	b480      	push	{r7}
 800710a:	b087      	sub	sp, #28
 800710c:	af00      	add	r7, sp, #0
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6a1b      	ldr	r3, [r3, #32]
 8007118:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	6a1b      	ldr	r3, [r3, #32]
 800711e:	f023 0201 	bic.w	r2, r3, #1
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	699b      	ldr	r3, [r3, #24]
 800712a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007132:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	011b      	lsls	r3, r3, #4
 8007138:	693a      	ldr	r2, [r7, #16]
 800713a:	4313      	orrs	r3, r2
 800713c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	f023 030a 	bic.w	r3, r3, #10
 8007144:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007146:	697a      	ldr	r2, [r7, #20]
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	4313      	orrs	r3, r2
 800714c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	693a      	ldr	r2, [r7, #16]
 8007152:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	697a      	ldr	r2, [r7, #20]
 8007158:	621a      	str	r2, [r3, #32]
}
 800715a:	bf00      	nop
 800715c:	371c      	adds	r7, #28
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr

08007166 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007166:	b480      	push	{r7}
 8007168:	b087      	sub	sp, #28
 800716a:	af00      	add	r7, sp, #0
 800716c:	60f8      	str	r0, [r7, #12]
 800716e:	60b9      	str	r1, [r7, #8]
 8007170:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	6a1b      	ldr	r3, [r3, #32]
 8007176:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	6a1b      	ldr	r3, [r3, #32]
 800717c:	f023 0210 	bic.w	r2, r3, #16
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	699b      	ldr	r3, [r3, #24]
 8007188:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007190:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	031b      	lsls	r3, r3, #12
 8007196:	693a      	ldr	r2, [r7, #16]
 8007198:	4313      	orrs	r3, r2
 800719a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80071a2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	011b      	lsls	r3, r3, #4
 80071a8:	697a      	ldr	r2, [r7, #20]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	693a      	ldr	r2, [r7, #16]
 80071b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	697a      	ldr	r2, [r7, #20]
 80071b8:	621a      	str	r2, [r3, #32]
}
 80071ba:	bf00      	nop
 80071bc:	371c      	adds	r7, #28
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr

080071c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80071c6:	b480      	push	{r7}
 80071c8:	b085      	sub	sp, #20
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	6078      	str	r0, [r7, #4]
 80071ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80071de:	683a      	ldr	r2, [r7, #0]
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	4313      	orrs	r3, r2
 80071e4:	f043 0307 	orr.w	r3, r3, #7
 80071e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	68fa      	ldr	r2, [r7, #12]
 80071ee:	609a      	str	r2, [r3, #8]
}
 80071f0:	bf00      	nop
 80071f2:	3714      	adds	r7, #20
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr

080071fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b087      	sub	sp, #28
 8007200:	af00      	add	r7, sp, #0
 8007202:	60f8      	str	r0, [r7, #12]
 8007204:	60b9      	str	r1, [r7, #8]
 8007206:	607a      	str	r2, [r7, #4]
 8007208:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007216:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	021a      	lsls	r2, r3, #8
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	431a      	orrs	r2, r3
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	4313      	orrs	r3, r2
 8007224:	697a      	ldr	r2, [r7, #20]
 8007226:	4313      	orrs	r3, r2
 8007228:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	697a      	ldr	r2, [r7, #20]
 800722e:	609a      	str	r2, [r3, #8]
}
 8007230:	bf00      	nop
 8007232:	371c      	adds	r7, #28
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr

0800723c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800723c:	b480      	push	{r7}
 800723e:	b087      	sub	sp, #28
 8007240:	af00      	add	r7, sp, #0
 8007242:	60f8      	str	r0, [r7, #12]
 8007244:	60b9      	str	r1, [r7, #8]
 8007246:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	f003 031f 	and.w	r3, r3, #31
 800724e:	2201      	movs	r2, #1
 8007250:	fa02 f303 	lsl.w	r3, r2, r3
 8007254:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	6a1a      	ldr	r2, [r3, #32]
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	43db      	mvns	r3, r3
 800725e:	401a      	ands	r2, r3
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	6a1a      	ldr	r2, [r3, #32]
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	f003 031f 	and.w	r3, r3, #31
 800726e:	6879      	ldr	r1, [r7, #4]
 8007270:	fa01 f303 	lsl.w	r3, r1, r3
 8007274:	431a      	orrs	r2, r3
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	621a      	str	r2, [r3, #32]
}
 800727a:	bf00      	nop
 800727c:	371c      	adds	r7, #28
 800727e:	46bd      	mov	sp, r7
 8007280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007284:	4770      	bx	lr
	...

08007288 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007288:	b480      	push	{r7}
 800728a:	b085      	sub	sp, #20
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007298:	2b01      	cmp	r3, #1
 800729a:	d101      	bne.n	80072a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800729c:	2302      	movs	r3, #2
 800729e:	e05a      	b.n	8007356 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2201      	movs	r2, #1
 80072a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2202      	movs	r2, #2
 80072ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	68fa      	ldr	r2, [r7, #12]
 80072ce:	4313      	orrs	r3, r2
 80072d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	68fa      	ldr	r2, [r7, #12]
 80072d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a21      	ldr	r2, [pc, #132]	@ (8007364 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d022      	beq.n	800732a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072ec:	d01d      	beq.n	800732a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a1d      	ldr	r2, [pc, #116]	@ (8007368 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d018      	beq.n	800732a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a1b      	ldr	r2, [pc, #108]	@ (800736c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d013      	beq.n	800732a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a1a      	ldr	r2, [pc, #104]	@ (8007370 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d00e      	beq.n	800732a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a18      	ldr	r2, [pc, #96]	@ (8007374 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d009      	beq.n	800732a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a17      	ldr	r2, [pc, #92]	@ (8007378 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d004      	beq.n	800732a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a15      	ldr	r2, [pc, #84]	@ (800737c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d10c      	bne.n	8007344 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007330:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	68ba      	ldr	r2, [r7, #8]
 8007338:	4313      	orrs	r3, r2
 800733a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	68ba      	ldr	r2, [r7, #8]
 8007342:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2201      	movs	r2, #1
 8007348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2200      	movs	r2, #0
 8007350:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007354:	2300      	movs	r3, #0
}
 8007356:	4618      	mov	r0, r3
 8007358:	3714      	adds	r7, #20
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr
 8007362:	bf00      	nop
 8007364:	40010000 	.word	0x40010000
 8007368:	40000400 	.word	0x40000400
 800736c:	40000800 	.word	0x40000800
 8007370:	40000c00 	.word	0x40000c00
 8007374:	40010400 	.word	0x40010400
 8007378:	40014000 	.word	0x40014000
 800737c:	40001800 	.word	0x40001800

08007380 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007380:	b084      	sub	sp, #16
 8007382:	b580      	push	{r7, lr}
 8007384:	b084      	sub	sp, #16
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
 800738a:	f107 001c 	add.w	r0, r7, #28
 800738e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007392:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007396:	2b01      	cmp	r3, #1
 8007398:	d123      	bne.n	80073e2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800739e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80073ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80073c2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d105      	bne.n	80073d6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	68db      	ldr	r3, [r3, #12]
 80073ce:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 f9dc 	bl	8007794 <USB_CoreReset>
 80073dc:	4603      	mov	r3, r0
 80073de:	73fb      	strb	r3, [r7, #15]
 80073e0:	e01b      	b.n	800741a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	68db      	ldr	r3, [r3, #12]
 80073e6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 f9d0 	bl	8007794 <USB_CoreReset>
 80073f4:	4603      	mov	r3, r0
 80073f6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80073f8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d106      	bne.n	800740e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007404:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	639a      	str	r2, [r3, #56]	@ 0x38
 800740c:	e005      	b.n	800741a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007412:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800741a:	7fbb      	ldrb	r3, [r7, #30]
 800741c:	2b01      	cmp	r3, #1
 800741e:	d10b      	bne.n	8007438 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	f043 0206 	orr.w	r2, r3, #6
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	689b      	ldr	r3, [r3, #8]
 8007430:	f043 0220 	orr.w	r2, r3, #32
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007438:	7bfb      	ldrb	r3, [r7, #15]
}
 800743a:	4618      	mov	r0, r3
 800743c:	3710      	adds	r7, #16
 800743e:	46bd      	mov	sp, r7
 8007440:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007444:	b004      	add	sp, #16
 8007446:	4770      	bx	lr

08007448 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	f043 0201 	orr.w	r2, r3, #1
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800745c:	2300      	movs	r3, #0
}
 800745e:	4618      	mov	r0, r3
 8007460:	370c      	adds	r7, #12
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr

0800746a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800746a:	b480      	push	{r7}
 800746c:	b083      	sub	sp, #12
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	f023 0201 	bic.w	r2, r3, #1
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800747e:	2300      	movs	r3, #0
}
 8007480:	4618      	mov	r0, r3
 8007482:	370c      	adds	r7, #12
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr

0800748c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	460b      	mov	r3, r1
 8007496:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007498:	2300      	movs	r3, #0
 800749a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	68db      	ldr	r3, [r3, #12]
 80074a0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80074a8:	78fb      	ldrb	r3, [r7, #3]
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d115      	bne.n	80074da <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	68db      	ldr	r3, [r3, #12]
 80074b2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80074ba:	200a      	movs	r0, #10
 80074bc:	f7fa f90e 	bl	80016dc <HAL_Delay>
      ms += 10U;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	330a      	adds	r3, #10
 80074c4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 f956 	bl	8007778 <USB_GetMode>
 80074cc:	4603      	mov	r3, r0
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d01e      	beq.n	8007510 <USB_SetCurrentMode+0x84>
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2bc7      	cmp	r3, #199	@ 0xc7
 80074d6:	d9f0      	bls.n	80074ba <USB_SetCurrentMode+0x2e>
 80074d8:	e01a      	b.n	8007510 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80074da:	78fb      	ldrb	r3, [r7, #3]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d115      	bne.n	800750c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	68db      	ldr	r3, [r3, #12]
 80074e4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80074ec:	200a      	movs	r0, #10
 80074ee:	f7fa f8f5 	bl	80016dc <HAL_Delay>
      ms += 10U;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	330a      	adds	r3, #10
 80074f6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 f93d 	bl	8007778 <USB_GetMode>
 80074fe:	4603      	mov	r3, r0
 8007500:	2b00      	cmp	r3, #0
 8007502:	d005      	beq.n	8007510 <USB_SetCurrentMode+0x84>
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2bc7      	cmp	r3, #199	@ 0xc7
 8007508:	d9f0      	bls.n	80074ec <USB_SetCurrentMode+0x60>
 800750a:	e001      	b.n	8007510 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800750c:	2301      	movs	r3, #1
 800750e:	e005      	b.n	800751c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2bc8      	cmp	r3, #200	@ 0xc8
 8007514:	d101      	bne.n	800751a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007516:	2301      	movs	r3, #1
 8007518:	e000      	b.n	800751c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800751a:	2300      	movs	r3, #0
}
 800751c:	4618      	mov	r0, r3
 800751e:	3710      	adds	r7, #16
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007524:	b480      	push	{r7}
 8007526:	b085      	sub	sp, #20
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800752e:	2300      	movs	r3, #0
 8007530:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	3301      	adds	r3, #1
 8007536:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800753e:	d901      	bls.n	8007544 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007540:	2303      	movs	r3, #3
 8007542:	e01b      	b.n	800757c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	691b      	ldr	r3, [r3, #16]
 8007548:	2b00      	cmp	r3, #0
 800754a:	daf2      	bge.n	8007532 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800754c:	2300      	movs	r3, #0
 800754e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	019b      	lsls	r3, r3, #6
 8007554:	f043 0220 	orr.w	r2, r3, #32
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	3301      	adds	r3, #1
 8007560:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007568:	d901      	bls.n	800756e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800756a:	2303      	movs	r3, #3
 800756c:	e006      	b.n	800757c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	691b      	ldr	r3, [r3, #16]
 8007572:	f003 0320 	and.w	r3, r3, #32
 8007576:	2b20      	cmp	r3, #32
 8007578:	d0f0      	beq.n	800755c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800757a:	2300      	movs	r3, #0
}
 800757c:	4618      	mov	r0, r3
 800757e:	3714      	adds	r7, #20
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr

08007588 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007588:	b480      	push	{r7}
 800758a:	b085      	sub	sp, #20
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007590:	2300      	movs	r3, #0
 8007592:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	3301      	adds	r3, #1
 8007598:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80075a0:	d901      	bls.n	80075a6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80075a2:	2303      	movs	r3, #3
 80075a4:	e018      	b.n	80075d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	691b      	ldr	r3, [r3, #16]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	daf2      	bge.n	8007594 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80075ae:	2300      	movs	r3, #0
 80075b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2210      	movs	r2, #16
 80075b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	3301      	adds	r3, #1
 80075bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80075c4:	d901      	bls.n	80075ca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80075c6:	2303      	movs	r3, #3
 80075c8:	e006      	b.n	80075d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	691b      	ldr	r3, [r3, #16]
 80075ce:	f003 0310 	and.w	r3, r3, #16
 80075d2:	2b10      	cmp	r3, #16
 80075d4:	d0f0      	beq.n	80075b8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80075d6:	2300      	movs	r3, #0
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3714      	adds	r7, #20
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr

080075e4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b089      	sub	sp, #36	@ 0x24
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	60f8      	str	r0, [r7, #12]
 80075ec:	60b9      	str	r1, [r7, #8]
 80075ee:	4611      	mov	r1, r2
 80075f0:	461a      	mov	r2, r3
 80075f2:	460b      	mov	r3, r1
 80075f4:	71fb      	strb	r3, [r7, #7]
 80075f6:	4613      	mov	r3, r2
 80075f8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007602:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007606:	2b00      	cmp	r3, #0
 8007608:	d123      	bne.n	8007652 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800760a:	88bb      	ldrh	r3, [r7, #4]
 800760c:	3303      	adds	r3, #3
 800760e:	089b      	lsrs	r3, r3, #2
 8007610:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007612:	2300      	movs	r3, #0
 8007614:	61bb      	str	r3, [r7, #24]
 8007616:	e018      	b.n	800764a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007618:	79fb      	ldrb	r3, [r7, #7]
 800761a:	031a      	lsls	r2, r3, #12
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	4413      	add	r3, r2
 8007620:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007624:	461a      	mov	r2, r3
 8007626:	69fb      	ldr	r3, [r7, #28]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800762c:	69fb      	ldr	r3, [r7, #28]
 800762e:	3301      	adds	r3, #1
 8007630:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007632:	69fb      	ldr	r3, [r7, #28]
 8007634:	3301      	adds	r3, #1
 8007636:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007638:	69fb      	ldr	r3, [r7, #28]
 800763a:	3301      	adds	r3, #1
 800763c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800763e:	69fb      	ldr	r3, [r7, #28]
 8007640:	3301      	adds	r3, #1
 8007642:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007644:	69bb      	ldr	r3, [r7, #24]
 8007646:	3301      	adds	r3, #1
 8007648:	61bb      	str	r3, [r7, #24]
 800764a:	69ba      	ldr	r2, [r7, #24]
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	429a      	cmp	r2, r3
 8007650:	d3e2      	bcc.n	8007618 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007652:	2300      	movs	r3, #0
}
 8007654:	4618      	mov	r0, r3
 8007656:	3724      	adds	r7, #36	@ 0x24
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr

08007660 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007660:	b480      	push	{r7}
 8007662:	b08b      	sub	sp, #44	@ 0x2c
 8007664:	af00      	add	r7, sp, #0
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	60b9      	str	r1, [r7, #8]
 800766a:	4613      	mov	r3, r2
 800766c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007676:	88fb      	ldrh	r3, [r7, #6]
 8007678:	089b      	lsrs	r3, r3, #2
 800767a:	b29b      	uxth	r3, r3
 800767c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800767e:	88fb      	ldrh	r3, [r7, #6]
 8007680:	f003 0303 	and.w	r3, r3, #3
 8007684:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007686:	2300      	movs	r3, #0
 8007688:	623b      	str	r3, [r7, #32]
 800768a:	e014      	b.n	80076b6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800768c:	69bb      	ldr	r3, [r7, #24]
 800768e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007692:	681a      	ldr	r2, [r3, #0]
 8007694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007696:	601a      	str	r2, [r3, #0]
    pDest++;
 8007698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800769a:	3301      	adds	r3, #1
 800769c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800769e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a0:	3301      	adds	r3, #1
 80076a2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80076a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a6:	3301      	adds	r3, #1
 80076a8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80076aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ac:	3301      	adds	r3, #1
 80076ae:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80076b0:	6a3b      	ldr	r3, [r7, #32]
 80076b2:	3301      	adds	r3, #1
 80076b4:	623b      	str	r3, [r7, #32]
 80076b6:	6a3a      	ldr	r2, [r7, #32]
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d3e6      	bcc.n	800768c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80076be:	8bfb      	ldrh	r3, [r7, #30]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d01e      	beq.n	8007702 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80076c4:	2300      	movs	r3, #0
 80076c6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80076c8:	69bb      	ldr	r3, [r7, #24]
 80076ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076ce:	461a      	mov	r2, r3
 80076d0:	f107 0310 	add.w	r3, r7, #16
 80076d4:	6812      	ldr	r2, [r2, #0]
 80076d6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80076d8:	693a      	ldr	r2, [r7, #16]
 80076da:	6a3b      	ldr	r3, [r7, #32]
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	00db      	lsls	r3, r3, #3
 80076e0:	fa22 f303 	lsr.w	r3, r2, r3
 80076e4:	b2da      	uxtb	r2, r3
 80076e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076e8:	701a      	strb	r2, [r3, #0]
      i++;
 80076ea:	6a3b      	ldr	r3, [r7, #32]
 80076ec:	3301      	adds	r3, #1
 80076ee:	623b      	str	r3, [r7, #32]
      pDest++;
 80076f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076f2:	3301      	adds	r3, #1
 80076f4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80076f6:	8bfb      	ldrh	r3, [r7, #30]
 80076f8:	3b01      	subs	r3, #1
 80076fa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80076fc:	8bfb      	ldrh	r3, [r7, #30]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d1ea      	bne.n	80076d8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007704:	4618      	mov	r0, r3
 8007706:	372c      	adds	r7, #44	@ 0x2c
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr

08007710 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007710:	b480      	push	{r7}
 8007712:	b085      	sub	sp, #20
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	695b      	ldr	r3, [r3, #20]
 800771c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	699b      	ldr	r3, [r3, #24]
 8007722:	68fa      	ldr	r2, [r7, #12]
 8007724:	4013      	ands	r3, r2
 8007726:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007728:	68fb      	ldr	r3, [r7, #12]
}
 800772a:	4618      	mov	r0, r3
 800772c:	3714      	adds	r7, #20
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr

08007736 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8007736:	b480      	push	{r7}
 8007738:	b085      	sub	sp, #20
 800773a:	af00      	add	r7, sp, #0
 800773c:	6078      	str	r0, [r7, #4]
 800773e:	460b      	mov	r3, r1
 8007740:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8007746:	78fb      	ldrb	r3, [r7, #3]
 8007748:	015a      	lsls	r2, r3, #5
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	4413      	add	r3, r2
 800774e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8007756:	78fb      	ldrb	r3, [r7, #3]
 8007758:	015a      	lsls	r2, r3, #5
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	4413      	add	r3, r2
 800775e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007762:	68db      	ldr	r3, [r3, #12]
 8007764:	68ba      	ldr	r2, [r7, #8]
 8007766:	4013      	ands	r3, r2
 8007768:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800776a:	68bb      	ldr	r3, [r7, #8]
}
 800776c:	4618      	mov	r0, r3
 800776e:	3714      	adds	r7, #20
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr

08007778 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007778:	b480      	push	{r7}
 800777a:	b083      	sub	sp, #12
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	695b      	ldr	r3, [r3, #20]
 8007784:	f003 0301 	and.w	r3, r3, #1
}
 8007788:	4618      	mov	r0, r3
 800778a:	370c      	adds	r7, #12
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr

08007794 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007794:	b480      	push	{r7}
 8007796:	b085      	sub	sp, #20
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800779c:	2300      	movs	r3, #0
 800779e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	3301      	adds	r3, #1
 80077a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80077ac:	d901      	bls.n	80077b2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80077ae:	2303      	movs	r3, #3
 80077b0:	e022      	b.n	80077f8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	691b      	ldr	r3, [r3, #16]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	daf2      	bge.n	80077a0 <USB_CoreReset+0xc>

  count = 10U;
 80077ba:	230a      	movs	r3, #10
 80077bc:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80077be:	e002      	b.n	80077c6 <USB_CoreReset+0x32>
  {
    count--;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	3b01      	subs	r3, #1
 80077c4:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d1f9      	bne.n	80077c0 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	691b      	ldr	r3, [r3, #16]
 80077d0:	f043 0201 	orr.w	r2, r3, #1
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	3301      	adds	r3, #1
 80077dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80077e4:	d901      	bls.n	80077ea <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80077e6:	2303      	movs	r3, #3
 80077e8:	e006      	b.n	80077f8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	691b      	ldr	r3, [r3, #16]
 80077ee:	f003 0301 	and.w	r3, r3, #1
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d0f0      	beq.n	80077d8 <USB_CoreReset+0x44>

  return HAL_OK;
 80077f6:	2300      	movs	r3, #0
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3714      	adds	r7, #20
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007804:	b084      	sub	sp, #16
 8007806:	b580      	push	{r7, lr}
 8007808:	b086      	sub	sp, #24
 800780a:	af00      	add	r7, sp, #0
 800780c:	6078      	str	r0, [r7, #4]
 800780e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007812:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007816:	2300      	movs	r3, #0
 8007818:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007824:	461a      	mov	r2, r3
 8007826:	2300      	movs	r3, #0
 8007828:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800782e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800783a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007846:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	68db      	ldr	r3, [r3, #12]
 8007852:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007856:	2b00      	cmp	r3, #0
 8007858:	d119      	bne.n	800788e <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800785a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800785e:	2b01      	cmp	r3, #1
 8007860:	d10a      	bne.n	8007878 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	68fa      	ldr	r2, [r7, #12]
 800786c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007870:	f043 0304 	orr.w	r3, r3, #4
 8007874:	6013      	str	r3, [r2, #0]
 8007876:	e014      	b.n	80078a2 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	68fa      	ldr	r2, [r7, #12]
 8007882:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007886:	f023 0304 	bic.w	r3, r3, #4
 800788a:	6013      	str	r3, [r2, #0]
 800788c:	e009      	b.n	80078a2 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	68fa      	ldr	r2, [r7, #12]
 8007898:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800789c:	f023 0304 	bic.w	r3, r3, #4
 80078a0:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80078a2:	2110      	movs	r1, #16
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f7ff fe3d 	bl	8007524 <USB_FlushTxFifo>
 80078aa:	4603      	mov	r3, r0
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d001      	beq.n	80078b4 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80078b0:	2301      	movs	r3, #1
 80078b2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f7ff fe67 	bl	8007588 <USB_FlushRxFifo>
 80078ba:	4603      	mov	r3, r0
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d001      	beq.n	80078c4 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80078c0:	2301      	movs	r3, #1
 80078c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80078c4:	2300      	movs	r3, #0
 80078c6:	613b      	str	r3, [r7, #16]
 80078c8:	e015      	b.n	80078f6 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	015a      	lsls	r2, r3, #5
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	4413      	add	r3, r2
 80078d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078d6:	461a      	mov	r2, r3
 80078d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80078dc:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	015a      	lsls	r2, r3, #5
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	4413      	add	r3, r2
 80078e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078ea:	461a      	mov	r2, r3
 80078ec:	2300      	movs	r3, #0
 80078ee:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	3301      	adds	r3, #1
 80078f4:	613b      	str	r3, [r7, #16]
 80078f6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80078fa:	461a      	mov	r2, r3
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	4293      	cmp	r3, r2
 8007900:	d3e3      	bcc.n	80078ca <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800790e:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	4a18      	ldr	r2, [pc, #96]	@ (8007974 <USB_HostInit+0x170>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d10b      	bne.n	8007930 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800791e:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	4a15      	ldr	r2, [pc, #84]	@ (8007978 <USB_HostInit+0x174>)
 8007924:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	4a14      	ldr	r2, [pc, #80]	@ (800797c <USB_HostInit+0x178>)
 800792a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800792e:	e009      	b.n	8007944 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2280      	movs	r2, #128	@ 0x80
 8007934:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	4a11      	ldr	r2, [pc, #68]	@ (8007980 <USB_HostInit+0x17c>)
 800793a:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	4a11      	ldr	r2, [pc, #68]	@ (8007984 <USB_HostInit+0x180>)
 8007940:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007944:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007948:	2b00      	cmp	r3, #0
 800794a:	d105      	bne.n	8007958 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	699b      	ldr	r3, [r3, #24]
 8007950:	f043 0210 	orr.w	r2, r3, #16
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	699a      	ldr	r2, [r3, #24]
 800795c:	4b0a      	ldr	r3, [pc, #40]	@ (8007988 <USB_HostInit+0x184>)
 800795e:	4313      	orrs	r3, r2
 8007960:	687a      	ldr	r2, [r7, #4]
 8007962:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007964:	7dfb      	ldrb	r3, [r7, #23]
}
 8007966:	4618      	mov	r0, r3
 8007968:	3718      	adds	r7, #24
 800796a:	46bd      	mov	sp, r7
 800796c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007970:	b004      	add	sp, #16
 8007972:	4770      	bx	lr
 8007974:	40040000 	.word	0x40040000
 8007978:	01000200 	.word	0x01000200
 800797c:	00e00300 	.word	0x00e00300
 8007980:	00600080 	.word	0x00600080
 8007984:	004000e0 	.word	0x004000e0
 8007988:	a3200008 	.word	0xa3200008

0800798c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800798c:	b480      	push	{r7}
 800798e:	b085      	sub	sp, #20
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	460b      	mov	r3, r1
 8007996:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	68fa      	ldr	r2, [r7, #12]
 80079a6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80079aa:	f023 0303 	bic.w	r3, r3, #3
 80079ae:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80079b6:	681a      	ldr	r2, [r3, #0]
 80079b8:	78fb      	ldrb	r3, [r7, #3]
 80079ba:	f003 0303 	and.w	r3, r3, #3
 80079be:	68f9      	ldr	r1, [r7, #12]
 80079c0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80079c4:	4313      	orrs	r3, r2
 80079c6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80079c8:	78fb      	ldrb	r3, [r7, #3]
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d107      	bne.n	80079de <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80079d4:	461a      	mov	r2, r3
 80079d6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80079da:	6053      	str	r3, [r2, #4]
 80079dc:	e00c      	b.n	80079f8 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80079de:	78fb      	ldrb	r3, [r7, #3]
 80079e0:	2b02      	cmp	r3, #2
 80079e2:	d107      	bne.n	80079f4 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80079ea:	461a      	mov	r2, r3
 80079ec:	f241 7370 	movw	r3, #6000	@ 0x1770
 80079f0:	6053      	str	r3, [r2, #4]
 80079f2:	e001      	b.n	80079f8 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80079f4:	2301      	movs	r3, #1
 80079f6:	e000      	b.n	80079fa <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80079f8:	2300      	movs	r3, #0
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3714      	adds	r7, #20
 80079fe:	46bd      	mov	sp, r7
 8007a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a04:	4770      	bx	lr

08007a06 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8007a06:	b580      	push	{r7, lr}
 8007a08:	b084      	sub	sp, #16
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007a12:	2300      	movs	r3, #0
 8007a14:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007a26:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	68fa      	ldr	r2, [r7, #12]
 8007a2c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007a30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a34:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007a36:	2064      	movs	r0, #100	@ 0x64
 8007a38:	f7f9 fe50 	bl	80016dc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	68fa      	ldr	r2, [r7, #12]
 8007a40:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007a44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a48:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007a4a:	200a      	movs	r0, #10
 8007a4c:	f7f9 fe46 	bl	80016dc <HAL_Delay>

  return HAL_OK;
 8007a50:	2300      	movs	r3, #0
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3710      	adds	r7, #16
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}

08007a5a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007a5a:	b480      	push	{r7}
 8007a5c:	b085      	sub	sp, #20
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
 8007a62:	460b      	mov	r3, r1
 8007a64:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007a7e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d109      	bne.n	8007a9e <USB_DriveVbus+0x44>
 8007a8a:	78fb      	ldrb	r3, [r7, #3]
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d106      	bne.n	8007a9e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	68fa      	ldr	r2, [r7, #12]
 8007a94:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007a98:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007a9c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007aa4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007aa8:	d109      	bne.n	8007abe <USB_DriveVbus+0x64>
 8007aaa:	78fb      	ldrb	r3, [r7, #3]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d106      	bne.n	8007abe <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	68fa      	ldr	r2, [r7, #12]
 8007ab4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007ab8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007abc:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007abe:	2300      	movs	r3, #0
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3714      	adds	r7, #20
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr

08007acc <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b085      	sub	sp, #20
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	0c5b      	lsrs	r3, r3, #17
 8007aea:	f003 0303 	and.w	r3, r3, #3
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3714      	adds	r7, #20
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr

08007afa <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8007afa:	b480      	push	{r7}
 8007afc:	b085      	sub	sp, #20
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	b29b      	uxth	r3, r3
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3714      	adds	r7, #20
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr

08007b1c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b088      	sub	sp, #32
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	4608      	mov	r0, r1
 8007b26:	4611      	mov	r1, r2
 8007b28:	461a      	mov	r2, r3
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	70fb      	strb	r3, [r7, #3]
 8007b2e:	460b      	mov	r3, r1
 8007b30:	70bb      	strb	r3, [r7, #2]
 8007b32:	4613      	mov	r3, r2
 8007b34:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007b36:	2300      	movs	r3, #0
 8007b38:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8007b3e:	78fb      	ldrb	r3, [r7, #3]
 8007b40:	015a      	lsls	r2, r3, #5
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	4413      	add	r3, r2
 8007b46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007b50:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007b52:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007b56:	2b03      	cmp	r3, #3
 8007b58:	d87c      	bhi.n	8007c54 <USB_HC_Init+0x138>
 8007b5a:	a201      	add	r2, pc, #4	@ (adr r2, 8007b60 <USB_HC_Init+0x44>)
 8007b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b60:	08007b71 	.word	0x08007b71
 8007b64:	08007c17 	.word	0x08007c17
 8007b68:	08007b71 	.word	0x08007b71
 8007b6c:	08007bd9 	.word	0x08007bd9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007b70:	78fb      	ldrb	r3, [r7, #3]
 8007b72:	015a      	lsls	r2, r3, #5
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	4413      	add	r3, r2
 8007b78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	f240 439d 	movw	r3, #1181	@ 0x49d
 8007b82:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007b84:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	da10      	bge.n	8007bae <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007b8c:	78fb      	ldrb	r3, [r7, #3]
 8007b8e:	015a      	lsls	r2, r3, #5
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	4413      	add	r3, r2
 8007b94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b98:	68db      	ldr	r3, [r3, #12]
 8007b9a:	78fa      	ldrb	r2, [r7, #3]
 8007b9c:	0151      	lsls	r1, r2, #5
 8007b9e:	693a      	ldr	r2, [r7, #16]
 8007ba0:	440a      	add	r2, r1
 8007ba2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ba6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007baa:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8007bac:	e055      	b.n	8007c5a <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	4a6f      	ldr	r2, [pc, #444]	@ (8007d70 <USB_HC_Init+0x254>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d151      	bne.n	8007c5a <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007bb6:	78fb      	ldrb	r3, [r7, #3]
 8007bb8:	015a      	lsls	r2, r3, #5
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	4413      	add	r3, r2
 8007bbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bc2:	68db      	ldr	r3, [r3, #12]
 8007bc4:	78fa      	ldrb	r2, [r7, #3]
 8007bc6:	0151      	lsls	r1, r2, #5
 8007bc8:	693a      	ldr	r2, [r7, #16]
 8007bca:	440a      	add	r2, r1
 8007bcc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007bd0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007bd4:	60d3      	str	r3, [r2, #12]
      break;
 8007bd6:	e040      	b.n	8007c5a <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007bd8:	78fb      	ldrb	r3, [r7, #3]
 8007bda:	015a      	lsls	r2, r3, #5
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	4413      	add	r3, r2
 8007be0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007be4:	461a      	mov	r2, r3
 8007be6:	f240 639d 	movw	r3, #1693	@ 0x69d
 8007bea:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007bec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	da34      	bge.n	8007c5e <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007bf4:	78fb      	ldrb	r3, [r7, #3]
 8007bf6:	015a      	lsls	r2, r3, #5
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	4413      	add	r3, r2
 8007bfc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c00:	68db      	ldr	r3, [r3, #12]
 8007c02:	78fa      	ldrb	r2, [r7, #3]
 8007c04:	0151      	lsls	r1, r2, #5
 8007c06:	693a      	ldr	r2, [r7, #16]
 8007c08:	440a      	add	r2, r1
 8007c0a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c12:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007c14:	e023      	b.n	8007c5e <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007c16:	78fb      	ldrb	r3, [r7, #3]
 8007c18:	015a      	lsls	r2, r3, #5
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	4413      	add	r3, r2
 8007c1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c22:	461a      	mov	r2, r3
 8007c24:	f240 2325 	movw	r3, #549	@ 0x225
 8007c28:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007c2a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	da17      	bge.n	8007c62 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007c32:	78fb      	ldrb	r3, [r7, #3]
 8007c34:	015a      	lsls	r2, r3, #5
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	4413      	add	r3, r2
 8007c3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c3e:	68db      	ldr	r3, [r3, #12]
 8007c40:	78fa      	ldrb	r2, [r7, #3]
 8007c42:	0151      	lsls	r1, r2, #5
 8007c44:	693a      	ldr	r2, [r7, #16]
 8007c46:	440a      	add	r2, r1
 8007c48:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c4c:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8007c50:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007c52:	e006      	b.n	8007c62 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8007c54:	2301      	movs	r3, #1
 8007c56:	77fb      	strb	r3, [r7, #31]
      break;
 8007c58:	e004      	b.n	8007c64 <USB_HC_Init+0x148>
      break;
 8007c5a:	bf00      	nop
 8007c5c:	e002      	b.n	8007c64 <USB_HC_Init+0x148>
      break;
 8007c5e:	bf00      	nop
 8007c60:	e000      	b.n	8007c64 <USB_HC_Init+0x148>
      break;
 8007c62:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007c64:	78fb      	ldrb	r3, [r7, #3]
 8007c66:	015a      	lsls	r2, r3, #5
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	4413      	add	r3, r2
 8007c6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c70:	461a      	mov	r2, r3
 8007c72:	2300      	movs	r3, #0
 8007c74:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007c76:	78fb      	ldrb	r3, [r7, #3]
 8007c78:	015a      	lsls	r2, r3, #5
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	4413      	add	r3, r2
 8007c7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c82:	68db      	ldr	r3, [r3, #12]
 8007c84:	78fa      	ldrb	r2, [r7, #3]
 8007c86:	0151      	lsls	r1, r2, #5
 8007c88:	693a      	ldr	r2, [r7, #16]
 8007c8a:	440a      	add	r2, r1
 8007c8c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c90:	f043 0302 	orr.w	r3, r3, #2
 8007c94:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007c9c:	699a      	ldr	r2, [r3, #24]
 8007c9e:	78fb      	ldrb	r3, [r7, #3]
 8007ca0:	f003 030f 	and.w	r3, r3, #15
 8007ca4:	2101      	movs	r1, #1
 8007ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8007caa:	6939      	ldr	r1, [r7, #16]
 8007cac:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	699b      	ldr	r3, [r3, #24]
 8007cb8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007cc0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	da03      	bge.n	8007cd0 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007cc8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ccc:	61bb      	str	r3, [r7, #24]
 8007cce:	e001      	b.n	8007cd4 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f7ff fef9 	bl	8007acc <USB_GetHostSpeed>
 8007cda:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007cdc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007ce0:	2b02      	cmp	r3, #2
 8007ce2:	d106      	bne.n	8007cf2 <USB_HC_Init+0x1d6>
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2b02      	cmp	r3, #2
 8007ce8:	d003      	beq.n	8007cf2 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007cea:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007cee:	617b      	str	r3, [r7, #20]
 8007cf0:	e001      	b.n	8007cf6 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007cf6:	787b      	ldrb	r3, [r7, #1]
 8007cf8:	059b      	lsls	r3, r3, #22
 8007cfa:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007cfe:	78bb      	ldrb	r3, [r7, #2]
 8007d00:	02db      	lsls	r3, r3, #11
 8007d02:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007d06:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007d08:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007d0c:	049b      	lsls	r3, r3, #18
 8007d0e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007d12:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8007d14:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8007d16:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007d1a:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007d1c:	69bb      	ldr	r3, [r7, #24]
 8007d1e:	431a      	orrs	r2, r3
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007d24:	78fa      	ldrb	r2, [r7, #3]
 8007d26:	0151      	lsls	r1, r2, #5
 8007d28:	693a      	ldr	r2, [r7, #16]
 8007d2a:	440a      	add	r2, r1
 8007d2c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007d30:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007d34:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007d36:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007d3a:	2b03      	cmp	r3, #3
 8007d3c:	d003      	beq.n	8007d46 <USB_HC_Init+0x22a>
 8007d3e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007d42:	2b01      	cmp	r3, #1
 8007d44:	d10f      	bne.n	8007d66 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007d46:	78fb      	ldrb	r3, [r7, #3]
 8007d48:	015a      	lsls	r2, r3, #5
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	4413      	add	r3, r2
 8007d4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	78fa      	ldrb	r2, [r7, #3]
 8007d56:	0151      	lsls	r1, r2, #5
 8007d58:	693a      	ldr	r2, [r7, #16]
 8007d5a:	440a      	add	r2, r1
 8007d5c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d60:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007d64:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007d66:	7ffb      	ldrb	r3, [r7, #31]
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3720      	adds	r7, #32
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}
 8007d70:	40040000 	.word	0x40040000

08007d74 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b08c      	sub	sp, #48	@ 0x30
 8007d78:	af02      	add	r7, sp, #8
 8007d7a:	60f8      	str	r0, [r7, #12]
 8007d7c:	60b9      	str	r1, [r7, #8]
 8007d7e:	4613      	mov	r3, r2
 8007d80:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	785b      	ldrb	r3, [r3, #1]
 8007d8a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8007d8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007d90:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	4a5d      	ldr	r2, [pc, #372]	@ (8007f0c <USB_HC_StartXfer+0x198>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d12f      	bne.n	8007dfa <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8007d9a:	79fb      	ldrb	r3, [r7, #7]
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d11c      	bne.n	8007dda <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	7c9b      	ldrb	r3, [r3, #18]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d003      	beq.n	8007db0 <USB_HC_StartXfer+0x3c>
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	7c9b      	ldrb	r3, [r3, #18]
 8007dac:	2b02      	cmp	r3, #2
 8007dae:	d124      	bne.n	8007dfa <USB_HC_StartXfer+0x86>
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	799b      	ldrb	r3, [r3, #6]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d120      	bne.n	8007dfa <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007db8:	69fb      	ldr	r3, [r7, #28]
 8007dba:	015a      	lsls	r2, r3, #5
 8007dbc:	6a3b      	ldr	r3, [r7, #32]
 8007dbe:	4413      	add	r3, r2
 8007dc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007dc4:	68db      	ldr	r3, [r3, #12]
 8007dc6:	69fa      	ldr	r2, [r7, #28]
 8007dc8:	0151      	lsls	r1, r2, #5
 8007dca:	6a3a      	ldr	r2, [r7, #32]
 8007dcc:	440a      	add	r2, r1
 8007dce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007dd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007dd6:	60d3      	str	r3, [r2, #12]
 8007dd8:	e00f      	b.n	8007dfa <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	791b      	ldrb	r3, [r3, #4]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d10b      	bne.n	8007dfa <USB_HC_StartXfer+0x86>
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	795b      	ldrb	r3, [r3, #5]
 8007de6:	2b01      	cmp	r3, #1
 8007de8:	d107      	bne.n	8007dfa <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	785b      	ldrb	r3, [r3, #1]
 8007dee:	4619      	mov	r1, r3
 8007df0:	68f8      	ldr	r0, [r7, #12]
 8007df2:	f000 fb6b 	bl	80084cc <USB_DoPing>
        return HAL_OK;
 8007df6:	2300      	movs	r3, #0
 8007df8:	e232      	b.n	8008260 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	799b      	ldrb	r3, [r3, #6]
 8007dfe:	2b01      	cmp	r3, #1
 8007e00:	d158      	bne.n	8007eb4 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8007e02:	2301      	movs	r3, #1
 8007e04:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	78db      	ldrb	r3, [r3, #3]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d007      	beq.n	8007e1e <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007e0e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007e10:	68ba      	ldr	r2, [r7, #8]
 8007e12:	8a92      	ldrh	r2, [r2, #20]
 8007e14:	fb03 f202 	mul.w	r2, r3, r2
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	61da      	str	r2, [r3, #28]
 8007e1c:	e07c      	b.n	8007f18 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	7c9b      	ldrb	r3, [r3, #18]
 8007e22:	2b01      	cmp	r3, #1
 8007e24:	d130      	bne.n	8007e88 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	6a1b      	ldr	r3, [r3, #32]
 8007e2a:	2bbc      	cmp	r3, #188	@ 0xbc
 8007e2c:	d918      	bls.n	8007e60 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	8a9b      	ldrh	r3, [r3, #20]
 8007e32:	461a      	mov	r2, r3
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	69da      	ldr	r2, [r3, #28]
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	68db      	ldr	r3, [r3, #12]
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d003      	beq.n	8007e50 <USB_HC_StartXfer+0xdc>
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	68db      	ldr	r3, [r3, #12]
 8007e4c:	2b02      	cmp	r3, #2
 8007e4e:	d103      	bne.n	8007e58 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	2202      	movs	r2, #2
 8007e54:	60da      	str	r2, [r3, #12]
 8007e56:	e05f      	b.n	8007f18 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	60da      	str	r2, [r3, #12]
 8007e5e:	e05b      	b.n	8007f18 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	6a1a      	ldr	r2, [r3, #32]
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	68db      	ldr	r3, [r3, #12]
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d007      	beq.n	8007e80 <USB_HC_StartXfer+0x10c>
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	68db      	ldr	r3, [r3, #12]
 8007e74:	2b02      	cmp	r3, #2
 8007e76:	d003      	beq.n	8007e80 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	2204      	movs	r2, #4
 8007e7c:	60da      	str	r2, [r3, #12]
 8007e7e:	e04b      	b.n	8007f18 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	2203      	movs	r2, #3
 8007e84:	60da      	str	r2, [r3, #12]
 8007e86:	e047      	b.n	8007f18 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8007e88:	79fb      	ldrb	r3, [r7, #7]
 8007e8a:	2b01      	cmp	r3, #1
 8007e8c:	d10d      	bne.n	8007eaa <USB_HC_StartXfer+0x136>
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	6a1b      	ldr	r3, [r3, #32]
 8007e92:	68ba      	ldr	r2, [r7, #8]
 8007e94:	8a92      	ldrh	r2, [r2, #20]
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d907      	bls.n	8007eaa <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007e9a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007e9c:	68ba      	ldr	r2, [r7, #8]
 8007e9e:	8a92      	ldrh	r2, [r2, #20]
 8007ea0:	fb03 f202 	mul.w	r2, r3, r2
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	61da      	str	r2, [r3, #28]
 8007ea8:	e036      	b.n	8007f18 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	6a1a      	ldr	r2, [r3, #32]
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	61da      	str	r2, [r3, #28]
 8007eb2:	e031      	b.n	8007f18 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	6a1b      	ldr	r3, [r3, #32]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d018      	beq.n	8007eee <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	6a1b      	ldr	r3, [r3, #32]
 8007ec0:	68ba      	ldr	r2, [r7, #8]
 8007ec2:	8a92      	ldrh	r2, [r2, #20]
 8007ec4:	4413      	add	r3, r2
 8007ec6:	3b01      	subs	r3, #1
 8007ec8:	68ba      	ldr	r2, [r7, #8]
 8007eca:	8a92      	ldrh	r2, [r2, #20]
 8007ecc:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ed0:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8007ed2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8007ed4:	8b7b      	ldrh	r3, [r7, #26]
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d90b      	bls.n	8007ef2 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8007eda:	8b7b      	ldrh	r3, [r7, #26]
 8007edc:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007ede:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007ee0:	68ba      	ldr	r2, [r7, #8]
 8007ee2:	8a92      	ldrh	r2, [r2, #20]
 8007ee4:	fb03 f202 	mul.w	r2, r3, r2
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	61da      	str	r2, [r3, #28]
 8007eec:	e001      	b.n	8007ef2 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	78db      	ldrb	r3, [r3, #3]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d00a      	beq.n	8007f10 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007efa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007efc:	68ba      	ldr	r2, [r7, #8]
 8007efe:	8a92      	ldrh	r2, [r2, #20]
 8007f00:	fb03 f202 	mul.w	r2, r3, r2
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	61da      	str	r2, [r3, #28]
 8007f08:	e006      	b.n	8007f18 <USB_HC_StartXfer+0x1a4>
 8007f0a:	bf00      	nop
 8007f0c:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	6a1a      	ldr	r2, [r3, #32]
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	69db      	ldr	r3, [r3, #28]
 8007f1c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007f20:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007f22:	04d9      	lsls	r1, r3, #19
 8007f24:	4ba3      	ldr	r3, [pc, #652]	@ (80081b4 <USB_HC_StartXfer+0x440>)
 8007f26:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007f28:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	7d9b      	ldrb	r3, [r3, #22]
 8007f2e:	075b      	lsls	r3, r3, #29
 8007f30:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007f34:	69f9      	ldr	r1, [r7, #28]
 8007f36:	0148      	lsls	r0, r1, #5
 8007f38:	6a39      	ldr	r1, [r7, #32]
 8007f3a:	4401      	add	r1, r0
 8007f3c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007f40:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007f42:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007f44:	79fb      	ldrb	r3, [r7, #7]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d009      	beq.n	8007f5e <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	6999      	ldr	r1, [r3, #24]
 8007f4e:	69fb      	ldr	r3, [r7, #28]
 8007f50:	015a      	lsls	r2, r3, #5
 8007f52:	6a3b      	ldr	r3, [r7, #32]
 8007f54:	4413      	add	r3, r2
 8007f56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f5a:	460a      	mov	r2, r1
 8007f5c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007f5e:	6a3b      	ldr	r3, [r7, #32]
 8007f60:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	f003 0301 	and.w	r3, r3, #1
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	bf0c      	ite	eq
 8007f6e:	2301      	moveq	r3, #1
 8007f70:	2300      	movne	r3, #0
 8007f72:	b2db      	uxtb	r3, r3
 8007f74:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007f76:	69fb      	ldr	r3, [r7, #28]
 8007f78:	015a      	lsls	r2, r3, #5
 8007f7a:	6a3b      	ldr	r3, [r7, #32]
 8007f7c:	4413      	add	r3, r2
 8007f7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	69fa      	ldr	r2, [r7, #28]
 8007f86:	0151      	lsls	r1, r2, #5
 8007f88:	6a3a      	ldr	r2, [r7, #32]
 8007f8a:	440a      	add	r2, r1
 8007f8c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f90:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007f94:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007f96:	69fb      	ldr	r3, [r7, #28]
 8007f98:	015a      	lsls	r2, r3, #5
 8007f9a:	6a3b      	ldr	r3, [r7, #32]
 8007f9c:	4413      	add	r3, r2
 8007f9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	7e7b      	ldrb	r3, [r7, #25]
 8007fa6:	075b      	lsls	r3, r3, #29
 8007fa8:	69f9      	ldr	r1, [r7, #28]
 8007faa:	0148      	lsls	r0, r1, #5
 8007fac:	6a39      	ldr	r1, [r7, #32]
 8007fae:	4401      	add	r1, r0
 8007fb0:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	799b      	ldrb	r3, [r3, #6]
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	f040 80c3 	bne.w	8008148 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	7c5b      	ldrb	r3, [r3, #17]
 8007fc6:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007fc8:	68ba      	ldr	r2, [r7, #8]
 8007fca:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	69fa      	ldr	r2, [r7, #28]
 8007fd0:	0151      	lsls	r1, r2, #5
 8007fd2:	6a3a      	ldr	r2, [r7, #32]
 8007fd4:	440a      	add	r2, r1
 8007fd6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007fda:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007fde:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8007fe0:	69fb      	ldr	r3, [r7, #28]
 8007fe2:	015a      	lsls	r2, r3, #5
 8007fe4:	6a3b      	ldr	r3, [r7, #32]
 8007fe6:	4413      	add	r3, r2
 8007fe8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fec:	68db      	ldr	r3, [r3, #12]
 8007fee:	69fa      	ldr	r2, [r7, #28]
 8007ff0:	0151      	lsls	r1, r2, #5
 8007ff2:	6a3a      	ldr	r2, [r7, #32]
 8007ff4:	440a      	add	r2, r1
 8007ff6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ffa:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007ffe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	79db      	ldrb	r3, [r3, #7]
 8008004:	2b01      	cmp	r3, #1
 8008006:	d123      	bne.n	8008050 <USB_HC_StartXfer+0x2dc>
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	78db      	ldrb	r3, [r3, #3]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d11f      	bne.n	8008050 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008010:	69fb      	ldr	r3, [r7, #28]
 8008012:	015a      	lsls	r2, r3, #5
 8008014:	6a3b      	ldr	r3, [r7, #32]
 8008016:	4413      	add	r3, r2
 8008018:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	69fa      	ldr	r2, [r7, #28]
 8008020:	0151      	lsls	r1, r2, #5
 8008022:	6a3a      	ldr	r2, [r7, #32]
 8008024:	440a      	add	r2, r1
 8008026:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800802a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800802e:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8008030:	69fb      	ldr	r3, [r7, #28]
 8008032:	015a      	lsls	r2, r3, #5
 8008034:	6a3b      	ldr	r3, [r7, #32]
 8008036:	4413      	add	r3, r2
 8008038:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800803c:	68db      	ldr	r3, [r3, #12]
 800803e:	69fa      	ldr	r2, [r7, #28]
 8008040:	0151      	lsls	r1, r2, #5
 8008042:	6a3a      	ldr	r2, [r7, #32]
 8008044:	440a      	add	r2, r1
 8008046:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800804a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800804e:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	7c9b      	ldrb	r3, [r3, #18]
 8008054:	2b01      	cmp	r3, #1
 8008056:	d003      	beq.n	8008060 <USB_HC_StartXfer+0x2ec>
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	7c9b      	ldrb	r3, [r3, #18]
 800805c:	2b03      	cmp	r3, #3
 800805e:	d117      	bne.n	8008090 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008064:	2b01      	cmp	r3, #1
 8008066:	d113      	bne.n	8008090 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	78db      	ldrb	r3, [r3, #3]
 800806c:	2b01      	cmp	r3, #1
 800806e:	d10f      	bne.n	8008090 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008070:	69fb      	ldr	r3, [r7, #28]
 8008072:	015a      	lsls	r2, r3, #5
 8008074:	6a3b      	ldr	r3, [r7, #32]
 8008076:	4413      	add	r3, r2
 8008078:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	69fa      	ldr	r2, [r7, #28]
 8008080:	0151      	lsls	r1, r2, #5
 8008082:	6a3a      	ldr	r2, [r7, #32]
 8008084:	440a      	add	r2, r1
 8008086:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800808a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800808e:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	7c9b      	ldrb	r3, [r3, #18]
 8008094:	2b01      	cmp	r3, #1
 8008096:	d162      	bne.n	800815e <USB_HC_StartXfer+0x3ea>
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	78db      	ldrb	r3, [r3, #3]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d15e      	bne.n	800815e <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	68db      	ldr	r3, [r3, #12]
 80080a4:	3b01      	subs	r3, #1
 80080a6:	2b03      	cmp	r3, #3
 80080a8:	d858      	bhi.n	800815c <USB_HC_StartXfer+0x3e8>
 80080aa:	a201      	add	r2, pc, #4	@ (adr r2, 80080b0 <USB_HC_StartXfer+0x33c>)
 80080ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080b0:	080080c1 	.word	0x080080c1
 80080b4:	080080e3 	.word	0x080080e3
 80080b8:	08008105 	.word	0x08008105
 80080bc:	08008127 	.word	0x08008127
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 80080c0:	69fb      	ldr	r3, [r7, #28]
 80080c2:	015a      	lsls	r2, r3, #5
 80080c4:	6a3b      	ldr	r3, [r7, #32]
 80080c6:	4413      	add	r3, r2
 80080c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	69fa      	ldr	r2, [r7, #28]
 80080d0:	0151      	lsls	r1, r2, #5
 80080d2:	6a3a      	ldr	r2, [r7, #32]
 80080d4:	440a      	add	r2, r1
 80080d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80080da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80080de:	6053      	str	r3, [r2, #4]
          break;
 80080e0:	e03d      	b.n	800815e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80080e2:	69fb      	ldr	r3, [r7, #28]
 80080e4:	015a      	lsls	r2, r3, #5
 80080e6:	6a3b      	ldr	r3, [r7, #32]
 80080e8:	4413      	add	r3, r2
 80080ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	69fa      	ldr	r2, [r7, #28]
 80080f2:	0151      	lsls	r1, r2, #5
 80080f4:	6a3a      	ldr	r2, [r7, #32]
 80080f6:	440a      	add	r2, r1
 80080f8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80080fc:	f043 030e 	orr.w	r3, r3, #14
 8008100:	6053      	str	r3, [r2, #4]
          break;
 8008102:	e02c      	b.n	800815e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8008104:	69fb      	ldr	r3, [r7, #28]
 8008106:	015a      	lsls	r2, r3, #5
 8008108:	6a3b      	ldr	r3, [r7, #32]
 800810a:	4413      	add	r3, r2
 800810c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	69fa      	ldr	r2, [r7, #28]
 8008114:	0151      	lsls	r1, r2, #5
 8008116:	6a3a      	ldr	r2, [r7, #32]
 8008118:	440a      	add	r2, r1
 800811a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800811e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008122:	6053      	str	r3, [r2, #4]
          break;
 8008124:	e01b      	b.n	800815e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8008126:	69fb      	ldr	r3, [r7, #28]
 8008128:	015a      	lsls	r2, r3, #5
 800812a:	6a3b      	ldr	r3, [r7, #32]
 800812c:	4413      	add	r3, r2
 800812e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	69fa      	ldr	r2, [r7, #28]
 8008136:	0151      	lsls	r1, r2, #5
 8008138:	6a3a      	ldr	r2, [r7, #32]
 800813a:	440a      	add	r2, r1
 800813c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008140:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008144:	6053      	str	r3, [r2, #4]
          break;
 8008146:	e00a      	b.n	800815e <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008148:	69fb      	ldr	r3, [r7, #28]
 800814a:	015a      	lsls	r2, r3, #5
 800814c:	6a3b      	ldr	r3, [r7, #32]
 800814e:	4413      	add	r3, r2
 8008150:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008154:	461a      	mov	r2, r3
 8008156:	2300      	movs	r3, #0
 8008158:	6053      	str	r3, [r2, #4]
 800815a:	e000      	b.n	800815e <USB_HC_StartXfer+0x3ea>
          break;
 800815c:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800815e:	69fb      	ldr	r3, [r7, #28]
 8008160:	015a      	lsls	r2, r3, #5
 8008162:	6a3b      	ldr	r3, [r7, #32]
 8008164:	4413      	add	r3, r2
 8008166:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008174:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	78db      	ldrb	r3, [r3, #3]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d004      	beq.n	8008188 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008184:	613b      	str	r3, [r7, #16]
 8008186:	e003      	b.n	8008190 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800818e:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008196:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008198:	69fb      	ldr	r3, [r7, #28]
 800819a:	015a      	lsls	r2, r3, #5
 800819c:	6a3b      	ldr	r3, [r7, #32]
 800819e:	4413      	add	r3, r2
 80081a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081a4:	461a      	mov	r2, r3
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80081aa:	79fb      	ldrb	r3, [r7, #7]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d003      	beq.n	80081b8 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 80081b0:	2300      	movs	r3, #0
 80081b2:	e055      	b.n	8008260 <USB_HC_StartXfer+0x4ec>
 80081b4:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	78db      	ldrb	r3, [r3, #3]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d14e      	bne.n	800825e <USB_HC_StartXfer+0x4ea>
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	6a1b      	ldr	r3, [r3, #32]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d04a      	beq.n	800825e <USB_HC_StartXfer+0x4ea>
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	79db      	ldrb	r3, [r3, #7]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d146      	bne.n	800825e <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	7c9b      	ldrb	r3, [r3, #18]
 80081d4:	2b03      	cmp	r3, #3
 80081d6:	d831      	bhi.n	800823c <USB_HC_StartXfer+0x4c8>
 80081d8:	a201      	add	r2, pc, #4	@ (adr r2, 80081e0 <USB_HC_StartXfer+0x46c>)
 80081da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081de:	bf00      	nop
 80081e0:	080081f1 	.word	0x080081f1
 80081e4:	08008215 	.word	0x08008215
 80081e8:	080081f1 	.word	0x080081f1
 80081ec:	08008215 	.word	0x08008215
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	6a1b      	ldr	r3, [r3, #32]
 80081f4:	3303      	adds	r3, #3
 80081f6:	089b      	lsrs	r3, r3, #2
 80081f8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80081fa:	8afa      	ldrh	r2, [r7, #22]
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008200:	b29b      	uxth	r3, r3
 8008202:	429a      	cmp	r2, r3
 8008204:	d91c      	bls.n	8008240 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	699b      	ldr	r3, [r3, #24]
 800820a:	f043 0220 	orr.w	r2, r3, #32
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	619a      	str	r2, [r3, #24]
        }
        break;
 8008212:	e015      	b.n	8008240 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	6a1b      	ldr	r3, [r3, #32]
 8008218:	3303      	adds	r3, #3
 800821a:	089b      	lsrs	r3, r3, #2
 800821c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800821e:	8afa      	ldrh	r2, [r7, #22]
 8008220:	6a3b      	ldr	r3, [r7, #32]
 8008222:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008226:	691b      	ldr	r3, [r3, #16]
 8008228:	b29b      	uxth	r3, r3
 800822a:	429a      	cmp	r2, r3
 800822c:	d90a      	bls.n	8008244 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	699b      	ldr	r3, [r3, #24]
 8008232:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	619a      	str	r2, [r3, #24]
        }
        break;
 800823a:	e003      	b.n	8008244 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800823c:	bf00      	nop
 800823e:	e002      	b.n	8008246 <USB_HC_StartXfer+0x4d2>
        break;
 8008240:	bf00      	nop
 8008242:	e000      	b.n	8008246 <USB_HC_StartXfer+0x4d2>
        break;
 8008244:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	6999      	ldr	r1, [r3, #24]
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	785a      	ldrb	r2, [r3, #1]
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	6a1b      	ldr	r3, [r3, #32]
 8008252:	b29b      	uxth	r3, r3
 8008254:	2000      	movs	r0, #0
 8008256:	9000      	str	r0, [sp, #0]
 8008258:	68f8      	ldr	r0, [r7, #12]
 800825a:	f7ff f9c3 	bl	80075e4 <USB_WritePacket>
  }

  return HAL_OK;
 800825e:	2300      	movs	r3, #0
}
 8008260:	4618      	mov	r0, r3
 8008262:	3728      	adds	r7, #40	@ 0x28
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008268:	b480      	push	{r7}
 800826a:	b085      	sub	sp, #20
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800827a:	695b      	ldr	r3, [r3, #20]
 800827c:	b29b      	uxth	r3, r3
}
 800827e:	4618      	mov	r0, r3
 8008280:	3714      	adds	r7, #20
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr

0800828a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800828a:	b480      	push	{r7}
 800828c:	b089      	sub	sp, #36	@ 0x24
 800828e:	af00      	add	r7, sp, #0
 8008290:	6078      	str	r0, [r7, #4]
 8008292:	460b      	mov	r3, r1
 8008294:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800829a:	78fb      	ldrb	r3, [r7, #3]
 800829c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800829e:	2300      	movs	r3, #0
 80082a0:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80082a2:	69bb      	ldr	r3, [r7, #24]
 80082a4:	015a      	lsls	r2, r3, #5
 80082a6:	69fb      	ldr	r3, [r7, #28]
 80082a8:	4413      	add	r3, r2
 80082aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	0c9b      	lsrs	r3, r3, #18
 80082b2:	f003 0303 	and.w	r3, r3, #3
 80082b6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80082b8:	69bb      	ldr	r3, [r7, #24]
 80082ba:	015a      	lsls	r2, r3, #5
 80082bc:	69fb      	ldr	r3, [r7, #28]
 80082be:	4413      	add	r3, r2
 80082c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	0fdb      	lsrs	r3, r3, #31
 80082c8:	f003 0301 	and.w	r3, r3, #1
 80082cc:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80082ce:	69bb      	ldr	r3, [r7, #24]
 80082d0:	015a      	lsls	r2, r3, #5
 80082d2:	69fb      	ldr	r3, [r7, #28]
 80082d4:	4413      	add	r3, r2
 80082d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	0fdb      	lsrs	r3, r3, #31
 80082de:	f003 0301 	and.w	r3, r3, #1
 80082e2:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	689b      	ldr	r3, [r3, #8]
 80082e8:	f003 0320 	and.w	r3, r3, #32
 80082ec:	2b20      	cmp	r3, #32
 80082ee:	d10d      	bne.n	800830c <USB_HC_Halt+0x82>
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d10a      	bne.n	800830c <USB_HC_Halt+0x82>
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d005      	beq.n	8008308 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	2b01      	cmp	r3, #1
 8008300:	d002      	beq.n	8008308 <USB_HC_Halt+0x7e>
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	2b03      	cmp	r3, #3
 8008306:	d101      	bne.n	800830c <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8008308:	2300      	movs	r3, #0
 800830a:	e0d8      	b.n	80084be <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d002      	beq.n	8008318 <USB_HC_Halt+0x8e>
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	2b02      	cmp	r3, #2
 8008316:	d173      	bne.n	8008400 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008318:	69bb      	ldr	r3, [r7, #24]
 800831a:	015a      	lsls	r2, r3, #5
 800831c:	69fb      	ldr	r3, [r7, #28]
 800831e:	4413      	add	r3, r2
 8008320:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	69ba      	ldr	r2, [r7, #24]
 8008328:	0151      	lsls	r1, r2, #5
 800832a:	69fa      	ldr	r2, [r7, #28]
 800832c:	440a      	add	r2, r1
 800832e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008332:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008336:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	689b      	ldr	r3, [r3, #8]
 800833c:	f003 0320 	and.w	r3, r3, #32
 8008340:	2b00      	cmp	r3, #0
 8008342:	d14a      	bne.n	80083da <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008348:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800834c:	2b00      	cmp	r3, #0
 800834e:	d133      	bne.n	80083b8 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008350:	69bb      	ldr	r3, [r7, #24]
 8008352:	015a      	lsls	r2, r3, #5
 8008354:	69fb      	ldr	r3, [r7, #28]
 8008356:	4413      	add	r3, r2
 8008358:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	69ba      	ldr	r2, [r7, #24]
 8008360:	0151      	lsls	r1, r2, #5
 8008362:	69fa      	ldr	r2, [r7, #28]
 8008364:	440a      	add	r2, r1
 8008366:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800836a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800836e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008370:	69bb      	ldr	r3, [r7, #24]
 8008372:	015a      	lsls	r2, r3, #5
 8008374:	69fb      	ldr	r3, [r7, #28]
 8008376:	4413      	add	r3, r2
 8008378:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	69ba      	ldr	r2, [r7, #24]
 8008380:	0151      	lsls	r1, r2, #5
 8008382:	69fa      	ldr	r2, [r7, #28]
 8008384:	440a      	add	r2, r1
 8008386:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800838a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800838e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	3301      	adds	r3, #1
 8008394:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800839c:	d82e      	bhi.n	80083fc <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800839e:	69bb      	ldr	r3, [r7, #24]
 80083a0:	015a      	lsls	r2, r3, #5
 80083a2:	69fb      	ldr	r3, [r7, #28]
 80083a4:	4413      	add	r3, r2
 80083a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80083b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80083b4:	d0ec      	beq.n	8008390 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80083b6:	e081      	b.n	80084bc <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80083b8:	69bb      	ldr	r3, [r7, #24]
 80083ba:	015a      	lsls	r2, r3, #5
 80083bc:	69fb      	ldr	r3, [r7, #28]
 80083be:	4413      	add	r3, r2
 80083c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	69ba      	ldr	r2, [r7, #24]
 80083c8:	0151      	lsls	r1, r2, #5
 80083ca:	69fa      	ldr	r2, [r7, #28]
 80083cc:	440a      	add	r2, r1
 80083ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80083d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80083d6:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80083d8:	e070      	b.n	80084bc <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80083da:	69bb      	ldr	r3, [r7, #24]
 80083dc:	015a      	lsls	r2, r3, #5
 80083de:	69fb      	ldr	r3, [r7, #28]
 80083e0:	4413      	add	r3, r2
 80083e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	69ba      	ldr	r2, [r7, #24]
 80083ea:	0151      	lsls	r1, r2, #5
 80083ec:	69fa      	ldr	r2, [r7, #28]
 80083ee:	440a      	add	r2, r1
 80083f0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80083f4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80083f8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80083fa:	e05f      	b.n	80084bc <USB_HC_Halt+0x232>
            break;
 80083fc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80083fe:	e05d      	b.n	80084bc <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008400:	69bb      	ldr	r3, [r7, #24]
 8008402:	015a      	lsls	r2, r3, #5
 8008404:	69fb      	ldr	r3, [r7, #28]
 8008406:	4413      	add	r3, r2
 8008408:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	69ba      	ldr	r2, [r7, #24]
 8008410:	0151      	lsls	r1, r2, #5
 8008412:	69fa      	ldr	r2, [r7, #28]
 8008414:	440a      	add	r2, r1
 8008416:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800841a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800841e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008420:	69fb      	ldr	r3, [r7, #28]
 8008422:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008426:	691b      	ldr	r3, [r3, #16]
 8008428:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800842c:	2b00      	cmp	r3, #0
 800842e:	d133      	bne.n	8008498 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008430:	69bb      	ldr	r3, [r7, #24]
 8008432:	015a      	lsls	r2, r3, #5
 8008434:	69fb      	ldr	r3, [r7, #28]
 8008436:	4413      	add	r3, r2
 8008438:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	69ba      	ldr	r2, [r7, #24]
 8008440:	0151      	lsls	r1, r2, #5
 8008442:	69fa      	ldr	r2, [r7, #28]
 8008444:	440a      	add	r2, r1
 8008446:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800844a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800844e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008450:	69bb      	ldr	r3, [r7, #24]
 8008452:	015a      	lsls	r2, r3, #5
 8008454:	69fb      	ldr	r3, [r7, #28]
 8008456:	4413      	add	r3, r2
 8008458:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	69ba      	ldr	r2, [r7, #24]
 8008460:	0151      	lsls	r1, r2, #5
 8008462:	69fa      	ldr	r2, [r7, #28]
 8008464:	440a      	add	r2, r1
 8008466:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800846a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800846e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	3301      	adds	r3, #1
 8008474:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800847c:	d81d      	bhi.n	80084ba <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800847e:	69bb      	ldr	r3, [r7, #24]
 8008480:	015a      	lsls	r2, r3, #5
 8008482:	69fb      	ldr	r3, [r7, #28]
 8008484:	4413      	add	r3, r2
 8008486:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008490:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008494:	d0ec      	beq.n	8008470 <USB_HC_Halt+0x1e6>
 8008496:	e011      	b.n	80084bc <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008498:	69bb      	ldr	r3, [r7, #24]
 800849a:	015a      	lsls	r2, r3, #5
 800849c:	69fb      	ldr	r3, [r7, #28]
 800849e:	4413      	add	r3, r2
 80084a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	69ba      	ldr	r2, [r7, #24]
 80084a8:	0151      	lsls	r1, r2, #5
 80084aa:	69fa      	ldr	r2, [r7, #28]
 80084ac:	440a      	add	r2, r1
 80084ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80084b2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80084b6:	6013      	str	r3, [r2, #0]
 80084b8:	e000      	b.n	80084bc <USB_HC_Halt+0x232>
          break;
 80084ba:	bf00      	nop
    }
  }

  return HAL_OK;
 80084bc:	2300      	movs	r3, #0
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3724      	adds	r7, #36	@ 0x24
 80084c2:	46bd      	mov	sp, r7
 80084c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c8:	4770      	bx	lr
	...

080084cc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b087      	sub	sp, #28
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	460b      	mov	r3, r1
 80084d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80084dc:	78fb      	ldrb	r3, [r7, #3]
 80084de:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80084e0:	2301      	movs	r3, #1
 80084e2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	04da      	lsls	r2, r3, #19
 80084e8:	4b15      	ldr	r3, [pc, #84]	@ (8008540 <USB_DoPing+0x74>)
 80084ea:	4013      	ands	r3, r2
 80084ec:	693a      	ldr	r2, [r7, #16]
 80084ee:	0151      	lsls	r1, r2, #5
 80084f0:	697a      	ldr	r2, [r7, #20]
 80084f2:	440a      	add	r2, r1
 80084f4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80084f8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80084fc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	015a      	lsls	r2, r3, #5
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	4413      	add	r3, r2
 8008506:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008514:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800851c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	015a      	lsls	r2, r3, #5
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	4413      	add	r3, r2
 8008526:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800852a:	461a      	mov	r2, r3
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008530:	2300      	movs	r3, #0
}
 8008532:	4618      	mov	r0, r3
 8008534:	371c      	adds	r7, #28
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr
 800853e:	bf00      	nop
 8008540:	1ff80000 	.word	0x1ff80000

08008544 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b088      	sub	sp, #32
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800854c:	2300      	movs	r3, #0
 800854e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008554:	2300      	movs	r3, #0
 8008556:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f7fe ff86 	bl	800746a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800855e:	2110      	movs	r1, #16
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f7fe ffdf 	bl	8007524 <USB_FlushTxFifo>
 8008566:	4603      	mov	r3, r0
 8008568:	2b00      	cmp	r3, #0
 800856a:	d001      	beq.n	8008570 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800856c:	2301      	movs	r3, #1
 800856e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f7ff f809 	bl	8007588 <USB_FlushRxFifo>
 8008576:	4603      	mov	r3, r0
 8008578:	2b00      	cmp	r3, #0
 800857a:	d001      	beq.n	8008580 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800857c:	2301      	movs	r3, #1
 800857e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008580:	2300      	movs	r3, #0
 8008582:	61bb      	str	r3, [r7, #24]
 8008584:	e01f      	b.n	80085c6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008586:	69bb      	ldr	r3, [r7, #24]
 8008588:	015a      	lsls	r2, r3, #5
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	4413      	add	r3, r2
 800858e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800859c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80085a4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80085ac:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80085ae:	69bb      	ldr	r3, [r7, #24]
 80085b0:	015a      	lsls	r2, r3, #5
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	4413      	add	r3, r2
 80085b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085ba:	461a      	mov	r2, r3
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80085c0:	69bb      	ldr	r3, [r7, #24]
 80085c2:	3301      	adds	r3, #1
 80085c4:	61bb      	str	r3, [r7, #24]
 80085c6:	69bb      	ldr	r3, [r7, #24]
 80085c8:	2b0f      	cmp	r3, #15
 80085ca:	d9dc      	bls.n	8008586 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80085cc:	2300      	movs	r3, #0
 80085ce:	61bb      	str	r3, [r7, #24]
 80085d0:	e034      	b.n	800863c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80085d2:	69bb      	ldr	r3, [r7, #24]
 80085d4:	015a      	lsls	r2, r3, #5
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	4413      	add	r3, r2
 80085da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80085e8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80085f0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80085f8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80085fa:	69bb      	ldr	r3, [r7, #24]
 80085fc:	015a      	lsls	r2, r3, #5
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	4413      	add	r3, r2
 8008602:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008606:	461a      	mov	r2, r3
 8008608:	693b      	ldr	r3, [r7, #16]
 800860a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	3301      	adds	r3, #1
 8008610:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008618:	d80c      	bhi.n	8008634 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800861a:	69bb      	ldr	r3, [r7, #24]
 800861c:	015a      	lsls	r2, r3, #5
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	4413      	add	r3, r2
 8008622:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800862c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008630:	d0ec      	beq.n	800860c <USB_StopHost+0xc8>
 8008632:	e000      	b.n	8008636 <USB_StopHost+0xf2>
        break;
 8008634:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008636:	69bb      	ldr	r3, [r7, #24]
 8008638:	3301      	adds	r3, #1
 800863a:	61bb      	str	r3, [r7, #24]
 800863c:	69bb      	ldr	r3, [r7, #24]
 800863e:	2b0f      	cmp	r3, #15
 8008640:	d9c7      	bls.n	80085d2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008648:	461a      	mov	r2, r3
 800864a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800864e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008656:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f7fe fef5 	bl	8007448 <USB_EnableGlobalInt>

  return ret;
 800865e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008660:	4618      	mov	r0, r3
 8008662:	3720      	adds	r7, #32
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}

08008668 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008668:	b590      	push	{r4, r7, lr}
 800866a:	b089      	sub	sp, #36	@ 0x24
 800866c:	af04      	add	r7, sp, #16
 800866e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008670:	2301      	movs	r3, #1
 8008672:	2202      	movs	r2, #2
 8008674:	2102      	movs	r1, #2
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f000 fc83 	bl	8008f82 <USBH_FindInterface>
 800867c:	4603      	mov	r3, r0
 800867e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008680:	7bfb      	ldrb	r3, [r7, #15]
 8008682:	2bff      	cmp	r3, #255	@ 0xff
 8008684:	d002      	beq.n	800868c <USBH_CDC_InterfaceInit+0x24>
 8008686:	7bfb      	ldrb	r3, [r7, #15]
 8008688:	2b01      	cmp	r3, #1
 800868a:	d901      	bls.n	8008690 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800868c:	2302      	movs	r3, #2
 800868e:	e13d      	b.n	800890c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008690:	7bfb      	ldrb	r3, [r7, #15]
 8008692:	4619      	mov	r1, r3
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f000 fc58 	bl	8008f4a <USBH_SelectInterface>
 800869a:	4603      	mov	r3, r0
 800869c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800869e:	7bbb      	ldrb	r3, [r7, #14]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d001      	beq.n	80086a8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80086a4:	2302      	movs	r3, #2
 80086a6:	e131      	b.n	800890c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 80086ae:	2050      	movs	r0, #80	@ 0x50
 80086b0:	f002 fb6a 	bl	800ad88 <malloc>
 80086b4:	4603      	mov	r3, r0
 80086b6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80086be:	69db      	ldr	r3, [r3, #28]
 80086c0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d101      	bne.n	80086cc <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80086c8:	2302      	movs	r3, #2
 80086ca:	e11f      	b.n	800890c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80086cc:	2250      	movs	r2, #80	@ 0x50
 80086ce:	2100      	movs	r1, #0
 80086d0:	68b8      	ldr	r0, [r7, #8]
 80086d2:	f002 fc17 	bl	800af04 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80086d6:	7bfb      	ldrb	r3, [r7, #15]
 80086d8:	687a      	ldr	r2, [r7, #4]
 80086da:	211a      	movs	r1, #26
 80086dc:	fb01 f303 	mul.w	r3, r1, r3
 80086e0:	4413      	add	r3, r2
 80086e2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80086e6:	781b      	ldrb	r3, [r3, #0]
 80086e8:	b25b      	sxtb	r3, r3
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	da15      	bge.n	800871a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80086ee:	7bfb      	ldrb	r3, [r7, #15]
 80086f0:	687a      	ldr	r2, [r7, #4]
 80086f2:	211a      	movs	r1, #26
 80086f4:	fb01 f303 	mul.w	r3, r1, r3
 80086f8:	4413      	add	r3, r2
 80086fa:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80086fe:	781a      	ldrb	r2, [r3, #0]
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008704:	7bfb      	ldrb	r3, [r7, #15]
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	211a      	movs	r1, #26
 800870a:	fb01 f303 	mul.w	r3, r1, r3
 800870e:	4413      	add	r3, r2
 8008710:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008714:	881a      	ldrh	r2, [r3, #0]
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	785b      	ldrb	r3, [r3, #1]
 800871e:	4619      	mov	r1, r3
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f001 ffc4 	bl	800a6ae <USBH_AllocPipe>
 8008726:	4603      	mov	r3, r0
 8008728:	461a      	mov	r2, r3
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	7819      	ldrb	r1, [r3, #0]
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	7858      	ldrb	r0, [r3, #1]
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008742:	68ba      	ldr	r2, [r7, #8]
 8008744:	8952      	ldrh	r2, [r2, #10]
 8008746:	9202      	str	r2, [sp, #8]
 8008748:	2203      	movs	r2, #3
 800874a:	9201      	str	r2, [sp, #4]
 800874c:	9300      	str	r3, [sp, #0]
 800874e:	4623      	mov	r3, r4
 8008750:	4602      	mov	r2, r0
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f001 ff7c 	bl	800a650 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	781b      	ldrb	r3, [r3, #0]
 800875c:	2200      	movs	r2, #0
 800875e:	4619      	mov	r1, r3
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f002 fa8b 	bl	800ac7c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008766:	2300      	movs	r3, #0
 8008768:	2200      	movs	r2, #0
 800876a:	210a      	movs	r1, #10
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f000 fc08 	bl	8008f82 <USBH_FindInterface>
 8008772:	4603      	mov	r3, r0
 8008774:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008776:	7bfb      	ldrb	r3, [r7, #15]
 8008778:	2bff      	cmp	r3, #255	@ 0xff
 800877a:	d002      	beq.n	8008782 <USBH_CDC_InterfaceInit+0x11a>
 800877c:	7bfb      	ldrb	r3, [r7, #15]
 800877e:	2b01      	cmp	r3, #1
 8008780:	d901      	bls.n	8008786 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008782:	2302      	movs	r3, #2
 8008784:	e0c2      	b.n	800890c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008786:	7bfb      	ldrb	r3, [r7, #15]
 8008788:	687a      	ldr	r2, [r7, #4]
 800878a:	211a      	movs	r1, #26
 800878c:	fb01 f303 	mul.w	r3, r1, r3
 8008790:	4413      	add	r3, r2
 8008792:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008796:	781b      	ldrb	r3, [r3, #0]
 8008798:	b25b      	sxtb	r3, r3
 800879a:	2b00      	cmp	r3, #0
 800879c:	da16      	bge.n	80087cc <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800879e:	7bfb      	ldrb	r3, [r7, #15]
 80087a0:	687a      	ldr	r2, [r7, #4]
 80087a2:	211a      	movs	r1, #26
 80087a4:	fb01 f303 	mul.w	r3, r1, r3
 80087a8:	4413      	add	r3, r2
 80087aa:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80087ae:	781a      	ldrb	r2, [r3, #0]
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80087b4:	7bfb      	ldrb	r3, [r7, #15]
 80087b6:	687a      	ldr	r2, [r7, #4]
 80087b8:	211a      	movs	r1, #26
 80087ba:	fb01 f303 	mul.w	r3, r1, r3
 80087be:	4413      	add	r3, r2
 80087c0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80087c4:	881a      	ldrh	r2, [r3, #0]
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	835a      	strh	r2, [r3, #26]
 80087ca:	e015      	b.n	80087f8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80087cc:	7bfb      	ldrb	r3, [r7, #15]
 80087ce:	687a      	ldr	r2, [r7, #4]
 80087d0:	211a      	movs	r1, #26
 80087d2:	fb01 f303 	mul.w	r3, r1, r3
 80087d6:	4413      	add	r3, r2
 80087d8:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80087dc:	781a      	ldrb	r2, [r3, #0]
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80087e2:	7bfb      	ldrb	r3, [r7, #15]
 80087e4:	687a      	ldr	r2, [r7, #4]
 80087e6:	211a      	movs	r1, #26
 80087e8:	fb01 f303 	mul.w	r3, r1, r3
 80087ec:	4413      	add	r3, r2
 80087ee:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80087f2:	881a      	ldrh	r2, [r3, #0]
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80087f8:	7bfb      	ldrb	r3, [r7, #15]
 80087fa:	687a      	ldr	r2, [r7, #4]
 80087fc:	211a      	movs	r1, #26
 80087fe:	fb01 f303 	mul.w	r3, r1, r3
 8008802:	4413      	add	r3, r2
 8008804:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008808:	781b      	ldrb	r3, [r3, #0]
 800880a:	b25b      	sxtb	r3, r3
 800880c:	2b00      	cmp	r3, #0
 800880e:	da16      	bge.n	800883e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008810:	7bfb      	ldrb	r3, [r7, #15]
 8008812:	687a      	ldr	r2, [r7, #4]
 8008814:	211a      	movs	r1, #26
 8008816:	fb01 f303 	mul.w	r3, r1, r3
 800881a:	4413      	add	r3, r2
 800881c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008820:	781a      	ldrb	r2, [r3, #0]
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008826:	7bfb      	ldrb	r3, [r7, #15]
 8008828:	687a      	ldr	r2, [r7, #4]
 800882a:	211a      	movs	r1, #26
 800882c:	fb01 f303 	mul.w	r3, r1, r3
 8008830:	4413      	add	r3, r2
 8008832:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008836:	881a      	ldrh	r2, [r3, #0]
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	835a      	strh	r2, [r3, #26]
 800883c:	e015      	b.n	800886a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800883e:	7bfb      	ldrb	r3, [r7, #15]
 8008840:	687a      	ldr	r2, [r7, #4]
 8008842:	211a      	movs	r1, #26
 8008844:	fb01 f303 	mul.w	r3, r1, r3
 8008848:	4413      	add	r3, r2
 800884a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800884e:	781a      	ldrb	r2, [r3, #0]
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008854:	7bfb      	ldrb	r3, [r7, #15]
 8008856:	687a      	ldr	r2, [r7, #4]
 8008858:	211a      	movs	r1, #26
 800885a:	fb01 f303 	mul.w	r3, r1, r3
 800885e:	4413      	add	r3, r2
 8008860:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008864:	881a      	ldrh	r2, [r3, #0]
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	7b9b      	ldrb	r3, [r3, #14]
 800886e:	4619      	mov	r1, r3
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f001 ff1c 	bl	800a6ae <USBH_AllocPipe>
 8008876:	4603      	mov	r3, r0
 8008878:	461a      	mov	r2, r3
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	7bdb      	ldrb	r3, [r3, #15]
 8008882:	4619      	mov	r1, r3
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f001 ff12 	bl	800a6ae <USBH_AllocPipe>
 800888a:	4603      	mov	r3, r0
 800888c:	461a      	mov	r2, r3
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	7b59      	ldrb	r1, [r3, #13]
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	7b98      	ldrb	r0, [r3, #14]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80088a6:	68ba      	ldr	r2, [r7, #8]
 80088a8:	8b12      	ldrh	r2, [r2, #24]
 80088aa:	9202      	str	r2, [sp, #8]
 80088ac:	2202      	movs	r2, #2
 80088ae:	9201      	str	r2, [sp, #4]
 80088b0:	9300      	str	r3, [sp, #0]
 80088b2:	4623      	mov	r3, r4
 80088b4:	4602      	mov	r2, r0
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f001 feca 	bl	800a650 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	7b19      	ldrb	r1, [r3, #12]
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	7bd8      	ldrb	r0, [r3, #15]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80088d0:	68ba      	ldr	r2, [r7, #8]
 80088d2:	8b52      	ldrh	r2, [r2, #26]
 80088d4:	9202      	str	r2, [sp, #8]
 80088d6:	2202      	movs	r2, #2
 80088d8:	9201      	str	r2, [sp, #4]
 80088da:	9300      	str	r3, [sp, #0]
 80088dc:	4623      	mov	r3, r4
 80088de:	4602      	mov	r2, r0
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f001 feb5 	bl	800a650 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	2200      	movs	r2, #0
 80088ea:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	7b5b      	ldrb	r3, [r3, #13]
 80088f2:	2200      	movs	r2, #0
 80088f4:	4619      	mov	r1, r3
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f002 f9c0 	bl	800ac7c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	7b1b      	ldrb	r3, [r3, #12]
 8008900:	2200      	movs	r2, #0
 8008902:	4619      	mov	r1, r3
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f002 f9b9 	bl	800ac7c <USBH_LL_SetToggle>

  return USBH_OK;
 800890a:	2300      	movs	r3, #0
}
 800890c:	4618      	mov	r0, r3
 800890e:	3714      	adds	r7, #20
 8008910:	46bd      	mov	sp, r7
 8008912:	bd90      	pop	{r4, r7, pc}

08008914 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b084      	sub	sp, #16
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008922:	69db      	ldr	r3, [r3, #28]
 8008924:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d00e      	beq.n	800894c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	781b      	ldrb	r3, [r3, #0]
 8008932:	4619      	mov	r1, r3
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f001 feaa 	bl	800a68e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	781b      	ldrb	r3, [r3, #0]
 800893e:	4619      	mov	r1, r3
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f001 fed5 	bl	800a6f0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2200      	movs	r2, #0
 800894a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	7b1b      	ldrb	r3, [r3, #12]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d00e      	beq.n	8008972 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	7b1b      	ldrb	r3, [r3, #12]
 8008958:	4619      	mov	r1, r3
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f001 fe97 	bl	800a68e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	7b1b      	ldrb	r3, [r3, #12]
 8008964:	4619      	mov	r1, r3
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f001 fec2 	bl	800a6f0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	2200      	movs	r2, #0
 8008970:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	7b5b      	ldrb	r3, [r3, #13]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d00e      	beq.n	8008998 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	7b5b      	ldrb	r3, [r3, #13]
 800897e:	4619      	mov	r1, r3
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f001 fe84 	bl	800a68e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	7b5b      	ldrb	r3, [r3, #13]
 800898a:	4619      	mov	r1, r3
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f001 feaf 	bl	800a6f0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2200      	movs	r2, #0
 8008996:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800899e:	69db      	ldr	r3, [r3, #28]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d00b      	beq.n	80089bc <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80089aa:	69db      	ldr	r3, [r3, #28]
 80089ac:	4618      	mov	r0, r3
 80089ae:	f002 f9f3 	bl	800ad98 <free>
    phost->pActiveClass->pData = 0U;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80089b8:	2200      	movs	r2, #0
 80089ba:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80089bc:	2300      	movs	r3, #0
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3710      	adds	r7, #16
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}

080089c6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80089c6:	b580      	push	{r7, lr}
 80089c8:	b084      	sub	sp, #16
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80089d4:	69db      	ldr	r3, [r3, #28]
 80089d6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	3340      	adds	r3, #64	@ 0x40
 80089dc:	4619      	mov	r1, r3
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f000 f8b1 	bl	8008b46 <GetLineCoding>
 80089e4:	4603      	mov	r3, r0
 80089e6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80089e8:	7afb      	ldrb	r3, [r7, #11]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d105      	bne.n	80089fa <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80089f4:	2102      	movs	r1, #2
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80089fa:	7afb      	ldrb	r3, [r7, #11]
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	3710      	adds	r7, #16
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}

08008a04 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b084      	sub	sp, #16
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008a10:	2300      	movs	r3, #0
 8008a12:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008a1a:	69db      	ldr	r3, [r3, #28]
 8008a1c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8008a24:	2b04      	cmp	r3, #4
 8008a26:	d877      	bhi.n	8008b18 <USBH_CDC_Process+0x114>
 8008a28:	a201      	add	r2, pc, #4	@ (adr r2, 8008a30 <USBH_CDC_Process+0x2c>)
 8008a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a2e:	bf00      	nop
 8008a30:	08008a45 	.word	0x08008a45
 8008a34:	08008a4b 	.word	0x08008a4b
 8008a38:	08008a7b 	.word	0x08008a7b
 8008a3c:	08008aef 	.word	0x08008aef
 8008a40:	08008afd 	.word	0x08008afd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008a44:	2300      	movs	r3, #0
 8008a46:	73fb      	strb	r3, [r7, #15]
      break;
 8008a48:	e06d      	b.n	8008b26 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a4e:	4619      	mov	r1, r3
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f000 f897 	bl	8008b84 <SetLineCoding>
 8008a56:	4603      	mov	r3, r0
 8008a58:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008a5a:	7bbb      	ldrb	r3, [r7, #14]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d104      	bne.n	8008a6a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	2202      	movs	r2, #2
 8008a64:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008a68:	e058      	b.n	8008b1c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008a6a:	7bbb      	ldrb	r3, [r7, #14]
 8008a6c:	2b01      	cmp	r3, #1
 8008a6e:	d055      	beq.n	8008b1c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	2204      	movs	r2, #4
 8008a74:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008a78:	e050      	b.n	8008b1c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	3340      	adds	r3, #64	@ 0x40
 8008a7e:	4619      	mov	r1, r3
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f000 f860 	bl	8008b46 <GetLineCoding>
 8008a86:	4603      	mov	r3, r0
 8008a88:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008a8a:	7bbb      	ldrb	r3, [r7, #14]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d126      	bne.n	8008ade <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	2200      	movs	r2, #0
 8008a94:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008aa2:	791b      	ldrb	r3, [r3, #4]
 8008aa4:	429a      	cmp	r2, r3
 8008aa6:	d13b      	bne.n	8008b20 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ab2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d133      	bne.n	8008b20 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ac2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	d12b      	bne.n	8008b20 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ad0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008ad2:	429a      	cmp	r2, r3
 8008ad4:	d124      	bne.n	8008b20 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f000 f958 	bl	8008d8c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008adc:	e020      	b.n	8008b20 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008ade:	7bbb      	ldrb	r3, [r7, #14]
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	d01d      	beq.n	8008b20 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	2204      	movs	r2, #4
 8008ae8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008aec:	e018      	b.n	8008b20 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 f867 	bl	8008bc2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f000 f8da 	bl	8008cae <CDC_ProcessReception>
      break;
 8008afa:	e014      	b.n	8008b26 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008afc:	2100      	movs	r1, #0
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f001 f81e 	bl	8009b40 <USBH_ClrFeature>
 8008b04:	4603      	mov	r3, r0
 8008b06:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008b08:	7bbb      	ldrb	r3, [r7, #14]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d10a      	bne.n	8008b24 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	2200      	movs	r2, #0
 8008b12:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8008b16:	e005      	b.n	8008b24 <USBH_CDC_Process+0x120>

    default:
      break;
 8008b18:	bf00      	nop
 8008b1a:	e004      	b.n	8008b26 <USBH_CDC_Process+0x122>
      break;
 8008b1c:	bf00      	nop
 8008b1e:	e002      	b.n	8008b26 <USBH_CDC_Process+0x122>
      break;
 8008b20:	bf00      	nop
 8008b22:	e000      	b.n	8008b26 <USBH_CDC_Process+0x122>
      break;
 8008b24:	bf00      	nop

  }

  return status;
 8008b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3710      	adds	r7, #16
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b083      	sub	sp, #12
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008b38:	2300      	movs	r3, #0
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	370c      	adds	r7, #12
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b44:	4770      	bx	lr

08008b46 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008b46:	b580      	push	{r7, lr}
 8008b48:	b082      	sub	sp, #8
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	6078      	str	r0, [r7, #4]
 8008b4e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	22a1      	movs	r2, #161	@ 0xa1
 8008b54:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2221      	movs	r2, #33	@ 0x21
 8008b5a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2200      	movs	r2, #0
 8008b66:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2207      	movs	r2, #7
 8008b6c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	2207      	movs	r2, #7
 8008b72:	4619      	mov	r1, r3
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f001 fb17 	bl	800a1a8 <USBH_CtlReq>
 8008b7a:	4603      	mov	r3, r0
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3708      	adds	r7, #8
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b082      	sub	sp, #8
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2221      	movs	r2, #33	@ 0x21
 8008b92:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2220      	movs	r2, #32
 8008b98:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2207      	movs	r2, #7
 8008baa:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	2207      	movs	r2, #7
 8008bb0:	4619      	mov	r1, r3
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f001 faf8 	bl	800a1a8 <USBH_CtlReq>
 8008bb8:	4603      	mov	r3, r0
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3708      	adds	r7, #8
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}

08008bc2 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008bc2:	b580      	push	{r7, lr}
 8008bc4:	b086      	sub	sp, #24
 8008bc6:	af02      	add	r7, sp, #8
 8008bc8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008bd0:	69db      	ldr	r3, [r3, #28]
 8008bd2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8008bde:	2b01      	cmp	r3, #1
 8008be0:	d002      	beq.n	8008be8 <CDC_ProcessTransmission+0x26>
 8008be2:	2b02      	cmp	r3, #2
 8008be4:	d023      	beq.n	8008c2e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008be6:	e05e      	b.n	8008ca6 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bec:	68fa      	ldr	r2, [r7, #12]
 8008bee:	8b12      	ldrh	r2, [r2, #24]
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d90b      	bls.n	8008c0c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	69d9      	ldr	r1, [r3, #28]
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	8b1a      	ldrh	r2, [r3, #24]
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	7b5b      	ldrb	r3, [r3, #13]
 8008c00:	2001      	movs	r0, #1
 8008c02:	9000      	str	r0, [sp, #0]
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f001 fce0 	bl	800a5ca <USBH_BulkSendData>
 8008c0a:	e00b      	b.n	8008c24 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8008c14:	b29a      	uxth	r2, r3
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	7b5b      	ldrb	r3, [r3, #13]
 8008c1a:	2001      	movs	r0, #1
 8008c1c:	9000      	str	r0, [sp, #0]
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f001 fcd3 	bl	800a5ca <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	2202      	movs	r2, #2
 8008c28:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008c2c:	e03b      	b.n	8008ca6 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	7b5b      	ldrb	r3, [r3, #13]
 8008c32:	4619      	mov	r1, r3
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f001 fff7 	bl	800ac28 <USBH_LL_GetURBState>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8008c3e:	7afb      	ldrb	r3, [r7, #11]
 8008c40:	2b01      	cmp	r3, #1
 8008c42:	d128      	bne.n	8008c96 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c48:	68fa      	ldr	r2, [r7, #12]
 8008c4a:	8b12      	ldrh	r2, [r2, #24]
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d90e      	bls.n	8008c6e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c54:	68fa      	ldr	r2, [r7, #12]
 8008c56:	8b12      	ldrh	r2, [r2, #24]
 8008c58:	1a9a      	subs	r2, r3, r2
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	69db      	ldr	r3, [r3, #28]
 8008c62:	68fa      	ldr	r2, [r7, #12]
 8008c64:	8b12      	ldrh	r2, [r2, #24]
 8008c66:	441a      	add	r2, r3
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	61da      	str	r2, [r3, #28]
 8008c6c:	e002      	b.n	8008c74 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2200      	movs	r2, #0
 8008c72:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d004      	beq.n	8008c86 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2201      	movs	r2, #1
 8008c80:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008c84:	e00e      	b.n	8008ca4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f000 f868 	bl	8008d64 <USBH_CDC_TransmitCallback>
      break;
 8008c94:	e006      	b.n	8008ca4 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8008c96:	7afb      	ldrb	r3, [r7, #11]
 8008c98:	2b02      	cmp	r3, #2
 8008c9a:	d103      	bne.n	8008ca4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008ca4:	bf00      	nop
  }
}
 8008ca6:	bf00      	nop
 8008ca8:	3710      	adds	r7, #16
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}

08008cae <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008cae:	b580      	push	{r7, lr}
 8008cb0:	b086      	sub	sp, #24
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008cbc:	69db      	ldr	r3, [r3, #28]
 8008cbe:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8008cca:	2b03      	cmp	r3, #3
 8008ccc:	d002      	beq.n	8008cd4 <CDC_ProcessReception+0x26>
 8008cce:	2b04      	cmp	r3, #4
 8008cd0:	d00e      	beq.n	8008cf0 <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 8008cd2:	e043      	b.n	8008d5c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	6a19      	ldr	r1, [r3, #32]
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	8b5a      	ldrh	r2, [r3, #26]
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	7b1b      	ldrb	r3, [r3, #12]
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f001 fc97 	bl	800a614 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	2204      	movs	r2, #4
 8008cea:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8008cee:	e035      	b.n	8008d5c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	7b1b      	ldrb	r3, [r3, #12]
 8008cf4:	4619      	mov	r1, r3
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f001 ff96 	bl	800ac28 <USBH_LL_GetURBState>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008d00:	7cfb      	ldrb	r3, [r7, #19]
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	d129      	bne.n	8008d5a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	7b1b      	ldrb	r3, [r3, #12]
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f001 fef9 	bl	800ab04 <USBH_LL_GetLastXferSize>
 8008d12:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d18:	68fa      	ldr	r2, [r7, #12]
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d016      	beq.n	8008d4c <CDC_ProcessReception+0x9e>
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	8b5b      	ldrh	r3, [r3, #26]
 8008d22:	461a      	mov	r2, r3
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d110      	bne.n	8008d4c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	1ad2      	subs	r2, r2, r3
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	6a1a      	ldr	r2, [r3, #32]
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	441a      	add	r2, r3
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	2203      	movs	r2, #3
 8008d46:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8008d4a:	e006      	b.n	8008d5a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008d4c:	697b      	ldr	r3, [r7, #20]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f000 f80f 	bl	8008d78 <USBH_CDC_ReceiveCallback>
      break;
 8008d5a:	bf00      	nop
  }
}
 8008d5c:	bf00      	nop
 8008d5e:	3718      	adds	r7, #24
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b083      	sub	sp, #12
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008d6c:	bf00      	nop
 8008d6e:	370c      	adds	r7, #12
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr

08008d78 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b083      	sub	sp, #12
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008d80:	bf00      	nop
 8008d82:	370c      	adds	r7, #12
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	4770      	bx	lr

08008d8c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b083      	sub	sp, #12
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008d94:	bf00      	nop
 8008d96:	370c      	adds	r7, #12
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr

08008da0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b084      	sub	sp, #16
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	60f8      	str	r0, [r7, #12]
 8008da8:	60b9      	str	r1, [r7, #8]
 8008daa:	4613      	mov	r3, r2
 8008dac:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d101      	bne.n	8008db8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008db4:	2302      	movs	r3, #2
 8008db6:	e029      	b.n	8008e0c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	79fa      	ldrb	r2, [r7, #7]
 8008dbc:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008dd0:	68f8      	ldr	r0, [r7, #12]
 8008dd2:	f000 f81f 	bl	8008e14 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2200      	movs	r2, #0
 8008de2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2200      	movs	r2, #0
 8008dea:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2200      	movs	r2, #0
 8008df2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d003      	beq.n	8008e04 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	68ba      	ldr	r2, [r7, #8]
 8008e00:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008e04:	68f8      	ldr	r0, [r7, #12]
 8008e06:	f001 fdc9 	bl	800a99c <USBH_LL_Init>

  return USBH_OK;
 8008e0a:	2300      	movs	r3, #0
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3710      	adds	r7, #16
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}

08008e14 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b084      	sub	sp, #16
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	60fb      	str	r3, [r7, #12]
 8008e20:	e009      	b.n	8008e36 <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 8008e22:	687a      	ldr	r2, [r7, #4]
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	33e0      	adds	r3, #224	@ 0xe0
 8008e28:	009b      	lsls	r3, r3, #2
 8008e2a:	4413      	add	r3, r2
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	3301      	adds	r3, #1
 8008e34:	60fb      	str	r3, [r7, #12]
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	2b0f      	cmp	r3, #15
 8008e3a:	d9f2      	bls.n	8008e22 <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	60fb      	str	r3, [r7, #12]
 8008e40:	e009      	b.n	8008e56 <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 8008e42:	687a      	ldr	r2, [r7, #4]
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	4413      	add	r3, r2
 8008e48:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	3301      	adds	r3, #1
 8008e54:	60fb      	str	r3, [r7, #12]
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e5c:	d3f1      	bcc.n	8008e42 <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2200      	movs	r2, #0
 8008e62:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2200      	movs	r2, #0
 8008e68:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2201      	movs	r2, #1
 8008e6e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2200      	movs	r2, #0
 8008e74:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2240      	movs	r2, #64	@ 0x40
 8008e82:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2200      	movs	r2, #0
 8008e88:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2201      	movs	r2, #1
 8008e96:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	331c      	adds	r3, #28
 8008eae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008eb2:	2100      	movs	r1, #0
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f002 f825 	bl	800af04 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008ec0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008ec4:	2100      	movs	r1, #0
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f002 f81c 	bl	800af04 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008ed2:	2212      	movs	r2, #18
 8008ed4:	2100      	movs	r1, #0
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f002 f814 	bl	800af04 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008ee2:	223e      	movs	r2, #62	@ 0x3e
 8008ee4:	2100      	movs	r1, #0
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f002 f80c 	bl	800af04 <memset>

  return USBH_OK;
 8008eec:	2300      	movs	r3, #0
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3710      	adds	r7, #16
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}

08008ef6 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008ef6:	b480      	push	{r7}
 8008ef8:	b085      	sub	sp, #20
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	6078      	str	r0, [r7, #4]
 8008efe:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008f00:	2300      	movs	r3, #0
 8008f02:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d016      	beq.n	8008f38 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d10e      	bne.n	8008f32 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008f1a:	1c59      	adds	r1, r3, #1
 8008f1c:	687a      	ldr	r2, [r7, #4]
 8008f1e:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8008f22:	687a      	ldr	r2, [r7, #4]
 8008f24:	33de      	adds	r3, #222	@ 0xde
 8008f26:	6839      	ldr	r1, [r7, #0]
 8008f28:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	73fb      	strb	r3, [r7, #15]
 8008f30:	e004      	b.n	8008f3c <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008f32:	2302      	movs	r3, #2
 8008f34:	73fb      	strb	r3, [r7, #15]
 8008f36:	e001      	b.n	8008f3c <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008f38:	2302      	movs	r3, #2
 8008f3a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3714      	adds	r7, #20
 8008f42:	46bd      	mov	sp, r7
 8008f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f48:	4770      	bx	lr

08008f4a <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008f4a:	b480      	push	{r7}
 8008f4c:	b085      	sub	sp, #20
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	6078      	str	r0, [r7, #4]
 8008f52:	460b      	mov	r3, r1
 8008f54:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008f56:	2300      	movs	r3, #0
 8008f58:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8008f60:	78fa      	ldrb	r2, [r7, #3]
 8008f62:	429a      	cmp	r2, r3
 8008f64:	d204      	bcs.n	8008f70 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	78fa      	ldrb	r2, [r7, #3]
 8008f6a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8008f6e:	e001      	b.n	8008f74 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008f70:	2302      	movs	r3, #2
 8008f72:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3714      	adds	r7, #20
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr

08008f82 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008f82:	b480      	push	{r7}
 8008f84:	b087      	sub	sp, #28
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	6078      	str	r0, [r7, #4]
 8008f8a:	4608      	mov	r0, r1
 8008f8c:	4611      	mov	r1, r2
 8008f8e:	461a      	mov	r2, r3
 8008f90:	4603      	mov	r3, r0
 8008f92:	70fb      	strb	r3, [r7, #3]
 8008f94:	460b      	mov	r3, r1
 8008f96:	70bb      	strb	r3, [r7, #2]
 8008f98:	4613      	mov	r3, r2
 8008f9a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008faa:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008fac:	e025      	b.n	8008ffa <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008fae:	7dfb      	ldrb	r3, [r7, #23]
 8008fb0:	221a      	movs	r2, #26
 8008fb2:	fb02 f303 	mul.w	r3, r2, r3
 8008fb6:	3308      	adds	r3, #8
 8008fb8:	68fa      	ldr	r2, [r7, #12]
 8008fba:	4413      	add	r3, r2
 8008fbc:	3302      	adds	r3, #2
 8008fbe:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	795b      	ldrb	r3, [r3, #5]
 8008fc4:	78fa      	ldrb	r2, [r7, #3]
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	d002      	beq.n	8008fd0 <USBH_FindInterface+0x4e>
 8008fca:	78fb      	ldrb	r3, [r7, #3]
 8008fcc:	2bff      	cmp	r3, #255	@ 0xff
 8008fce:	d111      	bne.n	8008ff4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008fd4:	78ba      	ldrb	r2, [r7, #2]
 8008fd6:	429a      	cmp	r2, r3
 8008fd8:	d002      	beq.n	8008fe0 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008fda:	78bb      	ldrb	r3, [r7, #2]
 8008fdc:	2bff      	cmp	r3, #255	@ 0xff
 8008fde:	d109      	bne.n	8008ff4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008fe4:	787a      	ldrb	r2, [r7, #1]
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d002      	beq.n	8008ff0 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008fea:	787b      	ldrb	r3, [r7, #1]
 8008fec:	2bff      	cmp	r3, #255	@ 0xff
 8008fee:	d101      	bne.n	8008ff4 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008ff0:	7dfb      	ldrb	r3, [r7, #23]
 8008ff2:	e006      	b.n	8009002 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008ff4:	7dfb      	ldrb	r3, [r7, #23]
 8008ff6:	3301      	adds	r3, #1
 8008ff8:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008ffa:	7dfb      	ldrb	r3, [r7, #23]
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	d9d6      	bls.n	8008fae <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009000:	23ff      	movs	r3, #255	@ 0xff
}
 8009002:	4618      	mov	r0, r3
 8009004:	371c      	adds	r7, #28
 8009006:	46bd      	mov	sp, r7
 8009008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900c:	4770      	bx	lr

0800900e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800900e:	b580      	push	{r7, lr}
 8009010:	b082      	sub	sp, #8
 8009012:	af00      	add	r7, sp, #0
 8009014:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f001 fcfc 	bl	800aa14 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800901c:	2101      	movs	r1, #1
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f001 fe15 	bl	800ac4e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009024:	2300      	movs	r3, #0
}
 8009026:	4618      	mov	r0, r3
 8009028:	3708      	adds	r7, #8
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}
	...

08009030 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b088      	sub	sp, #32
 8009034:	af04      	add	r7, sp, #16
 8009036:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009038:	2302      	movs	r3, #2
 800903a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800903c:	2300      	movs	r3, #0
 800903e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8009046:	b2db      	uxtb	r3, r3
 8009048:	2b01      	cmp	r3, #1
 800904a:	d102      	bne.n	8009052 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2203      	movs	r2, #3
 8009050:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	781b      	ldrb	r3, [r3, #0]
 8009056:	b2db      	uxtb	r3, r3
 8009058:	2b0b      	cmp	r3, #11
 800905a:	f200 81bc 	bhi.w	80093d6 <USBH_Process+0x3a6>
 800905e:	a201      	add	r2, pc, #4	@ (adr r2, 8009064 <USBH_Process+0x34>)
 8009060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009064:	08009095 	.word	0x08009095
 8009068:	080090c7 	.word	0x080090c7
 800906c:	08009131 	.word	0x08009131
 8009070:	08009371 	.word	0x08009371
 8009074:	080093d7 	.word	0x080093d7
 8009078:	080091d1 	.word	0x080091d1
 800907c:	08009317 	.word	0x08009317
 8009080:	08009207 	.word	0x08009207
 8009084:	08009227 	.word	0x08009227
 8009088:	08009245 	.word	0x08009245
 800908c:	08009289 	.word	0x08009289
 8009090:	08009359 	.word	0x08009359
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800909a:	b2db      	uxtb	r3, r3
 800909c:	2b00      	cmp	r3, #0
 800909e:	f000 819c 	beq.w	80093da <USBH_Process+0x3aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2201      	movs	r2, #1
 80090a6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80090a8:	20c8      	movs	r0, #200	@ 0xc8
 80090aa:	f001 fe1a 	bl	800ace2 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f001 fd0d 	bl	800aace <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2200      	movs	r2, #0
 80090b8:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2200      	movs	r2, #0
 80090c0:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 80090c4:	e189      	b.n	80093da <USBH_Process+0x3aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 80090cc:	b2db      	uxtb	r3, r3
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	d107      	bne.n	80090e2 <USBH_Process+0xb2>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2200      	movs	r2, #0
 80090d6:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2202      	movs	r2, #2
 80090de:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 80090e0:	e18a      	b.n	80093f8 <USBH_Process+0x3c8>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80090e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80090ec:	d914      	bls.n	8009118 <USBH_Process+0xe8>
          phost->device.RstCnt++;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80090f4:	3301      	adds	r3, #1
 80090f6:	b2da      	uxtb	r2, r3
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8009104:	2b03      	cmp	r3, #3
 8009106:	d903      	bls.n	8009110 <USBH_Process+0xe0>
            phost->gState = HOST_ABORT_STATE;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	220d      	movs	r2, #13
 800910c:	701a      	strb	r2, [r3, #0]
      break;
 800910e:	e173      	b.n	80093f8 <USBH_Process+0x3c8>
            phost->gState = HOST_IDLE;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2200      	movs	r2, #0
 8009114:	701a      	strb	r2, [r3, #0]
      break;
 8009116:	e16f      	b.n	80093f8 <USBH_Process+0x3c8>
          phost->Timeout += 10U;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800911e:	f103 020a 	add.w	r2, r3, #10
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8009128:	200a      	movs	r0, #10
 800912a:	f001 fdda 	bl	800ace2 <USBH_Delay>
      break;
 800912e:	e163      	b.n	80093f8 <USBH_Process+0x3c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009136:	2b00      	cmp	r3, #0
 8009138:	d005      	beq.n	8009146 <USBH_Process+0x116>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009140:	2104      	movs	r1, #4
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009146:	2064      	movs	r0, #100	@ 0x64
 8009148:	f001 fdcb 	bl	800ace2 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f001 fc97 	bl	800aa80 <USBH_LL_GetSpeed>
 8009152:	4603      	mov	r3, r0
 8009154:	461a      	mov	r2, r3
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2205      	movs	r2, #5
 8009160:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009162:	2100      	movs	r1, #0
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f001 faa2 	bl	800a6ae <USBH_AllocPipe>
 800916a:	4603      	mov	r3, r0
 800916c:	461a      	mov	r2, r3
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009172:	2180      	movs	r1, #128	@ 0x80
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f001 fa9a 	bl	800a6ae <USBH_AllocPipe>
 800917a:	4603      	mov	r3, r0
 800917c:	461a      	mov	r2, r3
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	7919      	ldrb	r1, [r3, #4]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009192:	687a      	ldr	r2, [r7, #4]
 8009194:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009196:	9202      	str	r2, [sp, #8]
 8009198:	2200      	movs	r2, #0
 800919a:	9201      	str	r2, [sp, #4]
 800919c:	9300      	str	r3, [sp, #0]
 800919e:	4603      	mov	r3, r0
 80091a0:	2280      	movs	r2, #128	@ 0x80
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	f001 fa54 	bl	800a650 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	7959      	ldrb	r1, [r3, #5]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80091b8:	687a      	ldr	r2, [r7, #4]
 80091ba:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80091bc:	9202      	str	r2, [sp, #8]
 80091be:	2200      	movs	r2, #0
 80091c0:	9201      	str	r2, [sp, #4]
 80091c2:	9300      	str	r3, [sp, #0]
 80091c4:	4603      	mov	r3, r0
 80091c6:	2200      	movs	r2, #0
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f001 fa41 	bl	800a650 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 80091ce:	e113      	b.n	80093f8 <USBH_Process+0x3c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f000 f917 	bl	8009404 <USBH_HandleEnum>
 80091d6:	4603      	mov	r3, r0
 80091d8:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80091da:	7bbb      	ldrb	r3, [r7, #14]
 80091dc:	b2db      	uxtb	r3, r3
 80091de:	2b00      	cmp	r3, #0
 80091e0:	f040 80fd 	bne.w	80093de <USBH_Process+0x3ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2200      	movs	r2, #0
 80091e8:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 80091f2:	2b01      	cmp	r3, #1
 80091f4:	d103      	bne.n	80091fe <USBH_Process+0x1ce>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2208      	movs	r2, #8
 80091fa:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 80091fc:	e0ef      	b.n	80093de <USBH_Process+0x3ae>
          phost->gState = HOST_INPUT;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2207      	movs	r2, #7
 8009202:	701a      	strb	r2, [r3, #0]
      break;
 8009204:	e0eb      	b.n	80093de <USBH_Process+0x3ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800920c:	2b00      	cmp	r3, #0
 800920e:	f000 80e8 	beq.w	80093e2 <USBH_Process+0x3b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009218:	2101      	movs	r1, #1
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2208      	movs	r2, #8
 8009222:	701a      	strb	r2, [r3, #0]
#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 8009224:	e0dd      	b.n	80093e2 <USBH_Process+0x3b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800922c:	4619      	mov	r1, r3
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f000 fc3f 	bl	8009ab2 <USBH_SetCfg>
 8009234:	4603      	mov	r3, r0
 8009236:	2b00      	cmp	r3, #0
 8009238:	f040 80d5 	bne.w	80093e6 <USBH_Process+0x3b6>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2209      	movs	r2, #9
 8009240:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009242:	e0d0      	b.n	80093e6 <USBH_Process+0x3b6>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800924a:	f003 0320 	and.w	r3, r3, #32
 800924e:	2b00      	cmp	r3, #0
 8009250:	d016      	beq.n	8009280 <USBH_Process+0x250>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8009252:	2101      	movs	r1, #1
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f000 fc4f 	bl	8009af8 <USBH_SetFeature>
 800925a:	4603      	mov	r3, r0
 800925c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800925e:	7bbb      	ldrb	r3, [r7, #14]
 8009260:	b2db      	uxtb	r3, r3
 8009262:	2b00      	cmp	r3, #0
 8009264:	d103      	bne.n	800926e <USBH_Process+0x23e>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	220a      	movs	r2, #10
 800926a:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800926c:	e0bd      	b.n	80093ea <USBH_Process+0x3ba>
        else if (status == USBH_NOT_SUPPORTED)
 800926e:	7bbb      	ldrb	r3, [r7, #14]
 8009270:	b2db      	uxtb	r3, r3
 8009272:	2b03      	cmp	r3, #3
 8009274:	f040 80b9 	bne.w	80093ea <USBH_Process+0x3ba>
          phost->gState = HOST_CHECK_CLASS;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	220a      	movs	r2, #10
 800927c:	701a      	strb	r2, [r3, #0]
      break;
 800927e:	e0b4      	b.n	80093ea <USBH_Process+0x3ba>
        phost->gState = HOST_CHECK_CLASS;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	220a      	movs	r2, #10
 8009284:	701a      	strb	r2, [r3, #0]
      break;
 8009286:	e0b0      	b.n	80093ea <USBH_Process+0x3ba>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800928e:	2b00      	cmp	r3, #0
 8009290:	f000 80ad 	beq.w	80093ee <USBH_Process+0x3be>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2200      	movs	r2, #0
 8009298:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800929c:	2300      	movs	r3, #0
 800929e:	73fb      	strb	r3, [r7, #15]
 80092a0:	e016      	b.n	80092d0 <USBH_Process+0x2a0>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80092a2:	7bfa      	ldrb	r2, [r7, #15]
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	32de      	adds	r2, #222	@ 0xde
 80092a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092ac:	791a      	ldrb	r2, [r3, #4]
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 80092b4:	429a      	cmp	r2, r3
 80092b6:	d108      	bne.n	80092ca <USBH_Process+0x29a>
          {
            phost->pActiveClass = phost->pClass[idx];
 80092b8:	7bfa      	ldrb	r2, [r7, #15]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	32de      	adds	r2, #222	@ 0xde
 80092be:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 80092c8:	e005      	b.n	80092d6 <USBH_Process+0x2a6>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80092ca:	7bfb      	ldrb	r3, [r7, #15]
 80092cc:	3301      	adds	r3, #1
 80092ce:	73fb      	strb	r3, [r7, #15]
 80092d0:	7bfb      	ldrb	r3, [r7, #15]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d0e5      	beq.n	80092a2 <USBH_Process+0x272>
          }
        }

        if (phost->pActiveClass != NULL)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d016      	beq.n	800930e <USBH_Process+0x2de>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80092e6:	689b      	ldr	r3, [r3, #8]
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	4798      	blx	r3
 80092ec:	4603      	mov	r3, r0
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d109      	bne.n	8009306 <USBH_Process+0x2d6>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2206      	movs	r2, #6
 80092f6:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80092fe:	2103      	movs	r1, #3
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	4798      	blx	r3
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009304:	e073      	b.n	80093ee <USBH_Process+0x3be>
            phost->gState = HOST_ABORT_STATE;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	220d      	movs	r2, #13
 800930a:	701a      	strb	r2, [r3, #0]
      break;
 800930c:	e06f      	b.n	80093ee <USBH_Process+0x3be>
          phost->gState = HOST_ABORT_STATE;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	220d      	movs	r2, #13
 8009312:	701a      	strb	r2, [r3, #0]
      break;
 8009314:	e06b      	b.n	80093ee <USBH_Process+0x3be>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800931c:	2b00      	cmp	r3, #0
 800931e:	d017      	beq.n	8009350 <USBH_Process+0x320>
      {
        status = phost->pActiveClass->Requests(phost);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009326:	691b      	ldr	r3, [r3, #16]
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	4798      	blx	r3
 800932c:	4603      	mov	r3, r0
 800932e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009330:	7bbb      	ldrb	r3, [r7, #14]
 8009332:	b2db      	uxtb	r3, r3
 8009334:	2b00      	cmp	r3, #0
 8009336:	d103      	bne.n	8009340 <USBH_Process+0x310>
        {
          phost->gState = HOST_CLASS;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	220b      	movs	r2, #11
 800933c:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 800933e:	e058      	b.n	80093f2 <USBH_Process+0x3c2>
        else if (status == USBH_FAIL)
 8009340:	7bbb      	ldrb	r3, [r7, #14]
 8009342:	b2db      	uxtb	r3, r3
 8009344:	2b02      	cmp	r3, #2
 8009346:	d154      	bne.n	80093f2 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	220d      	movs	r2, #13
 800934c:	701a      	strb	r2, [r3, #0]
      break;
 800934e:	e050      	b.n	80093f2 <USBH_Process+0x3c2>
        phost->gState = HOST_ABORT_STATE;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	220d      	movs	r2, #13
 8009354:	701a      	strb	r2, [r3, #0]
      break;
 8009356:	e04c      	b.n	80093f2 <USBH_Process+0x3c2>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800935e:	2b00      	cmp	r3, #0
 8009360:	d049      	beq.n	80093f6 <USBH_Process+0x3c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009368:	695b      	ldr	r3, [r3, #20]
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	4798      	blx	r3
      }
      break;
 800936e:	e042      	b.n	80093f6 <USBH_Process+0x3c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2200      	movs	r2, #0
 8009374:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f7ff fd4b 	bl	8008e14 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009384:	2b00      	cmp	r3, #0
 8009386:	d009      	beq.n	800939c <USBH_Process+0x36c>
      {
        phost->pActiveClass->DeInit(phost);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800938e:	68db      	ldr	r3, [r3, #12]
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2200      	movs	r2, #0
 8009398:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d005      	beq.n	80093b2 <USBH_Process+0x382>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80093ac:	2105      	movs	r1, #5
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 80093b8:	b2db      	uxtb	r3, r3
 80093ba:	2b01      	cmp	r3, #1
 80093bc:	d107      	bne.n	80093ce <USBH_Process+0x39e>
      {
        phost->device.is_ReEnumerated = 0U;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2200      	movs	r2, #0
 80093c2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f7ff fe21 	bl	800900e <USBH_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 80093cc:	e014      	b.n	80093f8 <USBH_Process+0x3c8>
        (void)USBH_LL_Start(phost);
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f001 fb20 	bl	800aa14 <USBH_LL_Start>
      break;
 80093d4:	e010      	b.n	80093f8 <USBH_Process+0x3c8>

    case HOST_ABORT_STATE:
    default :
      break;
 80093d6:	bf00      	nop
 80093d8:	e00e      	b.n	80093f8 <USBH_Process+0x3c8>
      break;
 80093da:	bf00      	nop
 80093dc:	e00c      	b.n	80093f8 <USBH_Process+0x3c8>
      break;
 80093de:	bf00      	nop
 80093e0:	e00a      	b.n	80093f8 <USBH_Process+0x3c8>
    break;
 80093e2:	bf00      	nop
 80093e4:	e008      	b.n	80093f8 <USBH_Process+0x3c8>
      break;
 80093e6:	bf00      	nop
 80093e8:	e006      	b.n	80093f8 <USBH_Process+0x3c8>
      break;
 80093ea:	bf00      	nop
 80093ec:	e004      	b.n	80093f8 <USBH_Process+0x3c8>
      break;
 80093ee:	bf00      	nop
 80093f0:	e002      	b.n	80093f8 <USBH_Process+0x3c8>
      break;
 80093f2:	bf00      	nop
 80093f4:	e000      	b.n	80093f8 <USBH_Process+0x3c8>
      break;
 80093f6:	bf00      	nop
  }
  return USBH_OK;
 80093f8:	2300      	movs	r3, #0
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	3710      	adds	r7, #16
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}
 8009402:	bf00      	nop

08009404 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b088      	sub	sp, #32
 8009408:	af04      	add	r7, sp, #16
 800940a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800940c:	2301      	movs	r3, #1
 800940e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009410:	2301      	movs	r3, #1
 8009412:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	785b      	ldrb	r3, [r3, #1]
 8009418:	2b07      	cmp	r3, #7
 800941a:	f200 81bd 	bhi.w	8009798 <USBH_HandleEnum+0x394>
 800941e:	a201      	add	r2, pc, #4	@ (adr r2, 8009424 <USBH_HandleEnum+0x20>)
 8009420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009424:	08009445 	.word	0x08009445
 8009428:	080094ff 	.word	0x080094ff
 800942c:	08009569 	.word	0x08009569
 8009430:	080095f3 	.word	0x080095f3
 8009434:	0800965d 	.word	0x0800965d
 8009438:	080096cd 	.word	0x080096cd
 800943c:	08009713 	.word	0x08009713
 8009440:	08009759 	.word	0x08009759
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009444:	2108      	movs	r1, #8
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f000 fa50 	bl	80098ec <USBH_Get_DevDesc>
 800944c:	4603      	mov	r3, r0
 800944e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009450:	7bbb      	ldrb	r3, [r7, #14]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d12e      	bne.n	80094b4 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2201      	movs	r2, #1
 8009464:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	7919      	ldrb	r1, [r3, #4]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009476:	687a      	ldr	r2, [r7, #4]
 8009478:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800947a:	9202      	str	r2, [sp, #8]
 800947c:	2200      	movs	r2, #0
 800947e:	9201      	str	r2, [sp, #4]
 8009480:	9300      	str	r3, [sp, #0]
 8009482:	4603      	mov	r3, r0
 8009484:	2280      	movs	r2, #128	@ 0x80
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f001 f8e2 	bl	800a650 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	7959      	ldrb	r1, [r3, #5]
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800949c:	687a      	ldr	r2, [r7, #4]
 800949e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80094a0:	9202      	str	r2, [sp, #8]
 80094a2:	2200      	movs	r2, #0
 80094a4:	9201      	str	r2, [sp, #4]
 80094a6:	9300      	str	r3, [sp, #0]
 80094a8:	4603      	mov	r3, r0
 80094aa:	2200      	movs	r2, #0
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f001 f8cf 	bl	800a650 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80094b2:	e173      	b.n	800979c <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80094b4:	7bbb      	ldrb	r3, [r7, #14]
 80094b6:	2b03      	cmp	r3, #3
 80094b8:	f040 8170 	bne.w	800979c <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80094c2:	3301      	adds	r3, #1
 80094c4:	b2da      	uxtb	r2, r3
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80094d2:	2b03      	cmp	r3, #3
 80094d4:	d903      	bls.n	80094de <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	220d      	movs	r2, #13
 80094da:	701a      	strb	r2, [r3, #0]
      break;
 80094dc:	e15e      	b.n	800979c <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	795b      	ldrb	r3, [r3, #5]
 80094e2:	4619      	mov	r1, r3
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f001 f903 	bl	800a6f0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	791b      	ldrb	r3, [r3, #4]
 80094ee:	4619      	mov	r1, r3
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f001 f8fd 	bl	800a6f0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2200      	movs	r2, #0
 80094fa:	701a      	strb	r2, [r3, #0]
      break;
 80094fc:	e14e      	b.n	800979c <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80094fe:	2112      	movs	r1, #18
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f000 f9f3 	bl	80098ec <USBH_Get_DevDesc>
 8009506:	4603      	mov	r3, r0
 8009508:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800950a:	7bbb      	ldrb	r3, [r7, #14]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d103      	bne.n	8009518 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2202      	movs	r2, #2
 8009514:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009516:	e143      	b.n	80097a0 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009518:	7bbb      	ldrb	r3, [r7, #14]
 800951a:	2b03      	cmp	r3, #3
 800951c:	f040 8140 	bne.w	80097a0 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009526:	3301      	adds	r3, #1
 8009528:	b2da      	uxtb	r2, r3
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009536:	2b03      	cmp	r3, #3
 8009538:	d903      	bls.n	8009542 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	220d      	movs	r2, #13
 800953e:	701a      	strb	r2, [r3, #0]
      break;
 8009540:	e12e      	b.n	80097a0 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	795b      	ldrb	r3, [r3, #5]
 8009546:	4619      	mov	r1, r3
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f001 f8d1 	bl	800a6f0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	791b      	ldrb	r3, [r3, #4]
 8009552:	4619      	mov	r1, r3
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f001 f8cb 	bl	800a6f0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2200      	movs	r2, #0
 800955e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2200      	movs	r2, #0
 8009564:	701a      	strb	r2, [r3, #0]
      break;
 8009566:	e11b      	b.n	80097a0 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009568:	2101      	movs	r1, #1
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f000 fa7d 	bl	8009a6a <USBH_SetAddress>
 8009570:	4603      	mov	r3, r0
 8009572:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009574:	7bbb      	ldrb	r3, [r7, #14]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d130      	bne.n	80095dc <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800957a:	2002      	movs	r0, #2
 800957c:	f001 fbb1 	bl	800ace2 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2201      	movs	r2, #1
 8009584:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2203      	movs	r2, #3
 800958c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	7919      	ldrb	r1, [r3, #4]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800959e:	687a      	ldr	r2, [r7, #4]
 80095a0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80095a2:	9202      	str	r2, [sp, #8]
 80095a4:	2200      	movs	r2, #0
 80095a6:	9201      	str	r2, [sp, #4]
 80095a8:	9300      	str	r3, [sp, #0]
 80095aa:	4603      	mov	r3, r0
 80095ac:	2280      	movs	r2, #128	@ 0x80
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f001 f84e 	bl	800a650 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	7959      	ldrb	r1, [r3, #5]
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80095c4:	687a      	ldr	r2, [r7, #4]
 80095c6:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80095c8:	9202      	str	r2, [sp, #8]
 80095ca:	2200      	movs	r2, #0
 80095cc:	9201      	str	r2, [sp, #4]
 80095ce:	9300      	str	r3, [sp, #0]
 80095d0:	4603      	mov	r3, r0
 80095d2:	2200      	movs	r2, #0
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f001 f83b 	bl	800a650 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80095da:	e0e3      	b.n	80097a4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80095dc:	7bbb      	ldrb	r3, [r7, #14]
 80095de:	2b03      	cmp	r3, #3
 80095e0:	f040 80e0 	bne.w	80097a4 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	220d      	movs	r2, #13
 80095e8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2200      	movs	r2, #0
 80095ee:	705a      	strb	r2, [r3, #1]
      break;
 80095f0:	e0d8      	b.n	80097a4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80095f2:	2109      	movs	r1, #9
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f000 f9a5 	bl	8009944 <USBH_Get_CfgDesc>
 80095fa:	4603      	mov	r3, r0
 80095fc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80095fe:	7bbb      	ldrb	r3, [r7, #14]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d103      	bne.n	800960c <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2204      	movs	r2, #4
 8009608:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800960a:	e0cd      	b.n	80097a8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800960c:	7bbb      	ldrb	r3, [r7, #14]
 800960e:	2b03      	cmp	r3, #3
 8009610:	f040 80ca 	bne.w	80097a8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800961a:	3301      	adds	r3, #1
 800961c:	b2da      	uxtb	r2, r3
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800962a:	2b03      	cmp	r3, #3
 800962c:	d903      	bls.n	8009636 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	220d      	movs	r2, #13
 8009632:	701a      	strb	r2, [r3, #0]
      break;
 8009634:	e0b8      	b.n	80097a8 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	795b      	ldrb	r3, [r3, #5]
 800963a:	4619      	mov	r1, r3
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f001 f857 	bl	800a6f0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	791b      	ldrb	r3, [r3, #4]
 8009646:	4619      	mov	r1, r3
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f001 f851 	bl	800a6f0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2200      	movs	r2, #0
 8009652:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2200      	movs	r2, #0
 8009658:	701a      	strb	r2, [r3, #0]
      break;
 800965a:	e0a5      	b.n	80097a8 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8009662:	4619      	mov	r1, r3
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f000 f96d 	bl	8009944 <USBH_Get_CfgDesc>
 800966a:	4603      	mov	r3, r0
 800966c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800966e:	7bbb      	ldrb	r3, [r7, #14]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d103      	bne.n	800967c <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2205      	movs	r2, #5
 8009678:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800967a:	e097      	b.n	80097ac <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800967c:	7bbb      	ldrb	r3, [r7, #14]
 800967e:	2b03      	cmp	r3, #3
 8009680:	f040 8094 	bne.w	80097ac <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800968a:	3301      	adds	r3, #1
 800968c:	b2da      	uxtb	r2, r3
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800969a:	2b03      	cmp	r3, #3
 800969c:	d903      	bls.n	80096a6 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	220d      	movs	r2, #13
 80096a2:	701a      	strb	r2, [r3, #0]
      break;
 80096a4:	e082      	b.n	80097ac <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	795b      	ldrb	r3, [r3, #5]
 80096aa:	4619      	mov	r1, r3
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f001 f81f 	bl	800a6f0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	791b      	ldrb	r3, [r3, #4]
 80096b6:	4619      	mov	r1, r3
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f001 f819 	bl	800a6f0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2200      	movs	r2, #0
 80096c2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2200      	movs	r2, #0
 80096c8:	701a      	strb	r2, [r3, #0]
      break;
 80096ca:	e06f      	b.n	80097ac <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d019      	beq.n	800970a <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80096e2:	23ff      	movs	r3, #255	@ 0xff
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f000 f957 	bl	8009998 <USBH_Get_StringDesc>
 80096ea:	4603      	mov	r3, r0
 80096ec:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80096ee:	7bbb      	ldrb	r3, [r7, #14]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d103      	bne.n	80096fc <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2206      	movs	r2, #6
 80096f8:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 80096fa:	e059      	b.n	80097b0 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80096fc:	7bbb      	ldrb	r3, [r7, #14]
 80096fe:	2b03      	cmp	r3, #3
 8009700:	d156      	bne.n	80097b0 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2206      	movs	r2, #6
 8009706:	705a      	strb	r2, [r3, #1]
      break;
 8009708:	e052      	b.n	80097b0 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2206      	movs	r2, #6
 800970e:	705a      	strb	r2, [r3, #1]
      break;
 8009710:	e04e      	b.n	80097b0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8009718:	2b00      	cmp	r3, #0
 800971a:	d019      	beq.n	8009750 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009728:	23ff      	movs	r3, #255	@ 0xff
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f000 f934 	bl	8009998 <USBH_Get_StringDesc>
 8009730:	4603      	mov	r3, r0
 8009732:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009734:	7bbb      	ldrb	r3, [r7, #14]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d103      	bne.n	8009742 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2207      	movs	r2, #7
 800973e:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8009740:	e038      	b.n	80097b4 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009742:	7bbb      	ldrb	r3, [r7, #14]
 8009744:	2b03      	cmp	r3, #3
 8009746:	d135      	bne.n	80097b4 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2207      	movs	r2, #7
 800974c:	705a      	strb	r2, [r3, #1]
      break;
 800974e:	e031      	b.n	80097b4 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2207      	movs	r2, #7
 8009754:	705a      	strb	r2, [r3, #1]
      break;
 8009756:	e02d      	b.n	80097b4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800975e:	2b00      	cmp	r3, #0
 8009760:	d017      	beq.n	8009792 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800976e:	23ff      	movs	r3, #255	@ 0xff
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f000 f911 	bl	8009998 <USBH_Get_StringDesc>
 8009776:	4603      	mov	r3, r0
 8009778:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800977a:	7bbb      	ldrb	r3, [r7, #14]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d102      	bne.n	8009786 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009780:	2300      	movs	r3, #0
 8009782:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009784:	e018      	b.n	80097b8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009786:	7bbb      	ldrb	r3, [r7, #14]
 8009788:	2b03      	cmp	r3, #3
 800978a:	d115      	bne.n	80097b8 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800978c:	2300      	movs	r3, #0
 800978e:	73fb      	strb	r3, [r7, #15]
      break;
 8009790:	e012      	b.n	80097b8 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8009792:	2300      	movs	r3, #0
 8009794:	73fb      	strb	r3, [r7, #15]
      break;
 8009796:	e00f      	b.n	80097b8 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8009798:	bf00      	nop
 800979a:	e00e      	b.n	80097ba <USBH_HandleEnum+0x3b6>
      break;
 800979c:	bf00      	nop
 800979e:	e00c      	b.n	80097ba <USBH_HandleEnum+0x3b6>
      break;
 80097a0:	bf00      	nop
 80097a2:	e00a      	b.n	80097ba <USBH_HandleEnum+0x3b6>
      break;
 80097a4:	bf00      	nop
 80097a6:	e008      	b.n	80097ba <USBH_HandleEnum+0x3b6>
      break;
 80097a8:	bf00      	nop
 80097aa:	e006      	b.n	80097ba <USBH_HandleEnum+0x3b6>
      break;
 80097ac:	bf00      	nop
 80097ae:	e004      	b.n	80097ba <USBH_HandleEnum+0x3b6>
      break;
 80097b0:	bf00      	nop
 80097b2:	e002      	b.n	80097ba <USBH_HandleEnum+0x3b6>
      break;
 80097b4:	bf00      	nop
 80097b6:	e000      	b.n	80097ba <USBH_HandleEnum+0x3b6>
      break;
 80097b8:	bf00      	nop
  }
  return Status;
 80097ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3710      	adds	r7, #16
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}

080097c4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80097c4:	b480      	push	{r7}
 80097c6:	b083      	sub	sp, #12
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
 80097cc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	683a      	ldr	r2, [r7, #0]
 80097d2:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 80097d6:	bf00      	nop
 80097d8:	370c      	adds	r7, #12
 80097da:	46bd      	mov	sp, r7
 80097dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e0:	4770      	bx	lr

080097e2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80097e2:	b580      	push	{r7, lr}
 80097e4:	b082      	sub	sp, #8
 80097e6:	af00      	add	r7, sp, #0
 80097e8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80097f0:	1c5a      	adds	r2, r3, #1
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f000 f804 	bl	8009806 <USBH_HandleSof>
}
 80097fe:	bf00      	nop
 8009800:	3708      	adds	r7, #8
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}

08009806 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009806:	b580      	push	{r7, lr}
 8009808:	b082      	sub	sp, #8
 800980a:	af00      	add	r7, sp, #0
 800980c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	781b      	ldrb	r3, [r3, #0]
 8009812:	b2db      	uxtb	r3, r3
 8009814:	2b0b      	cmp	r3, #11
 8009816:	d10a      	bne.n	800982e <USBH_HandleSof+0x28>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800981e:	2b00      	cmp	r3, #0
 8009820:	d005      	beq.n	800982e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009828:	699b      	ldr	r3, [r3, #24]
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	4798      	blx	r3
  }
}
 800982e:	bf00      	nop
 8009830:	3708      	adds	r7, #8
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}

08009836 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009836:	b480      	push	{r7}
 8009838:	b083      	sub	sp, #12
 800983a:	af00      	add	r7, sp, #0
 800983c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2201      	movs	r2, #1
 8009842:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
 8009846:	bf00      	nop
}
 8009848:	370c      	adds	r7, #12
 800984a:	46bd      	mov	sp, r7
 800984c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009850:	4770      	bx	lr

08009852 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009852:	b480      	push	{r7}
 8009854:	b083      	sub	sp, #12
 8009856:	af00      	add	r7, sp, #0
 8009858:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2200      	movs	r2, #0
 800985e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2201      	movs	r2, #1
 8009866:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 800986a:	bf00      	nop
}
 800986c:	370c      	adds	r7, #12
 800986e:	46bd      	mov	sp, r7
 8009870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009874:	4770      	bx	lr

08009876 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009876:	b480      	push	{r7}
 8009878:	b083      	sub	sp, #12
 800987a:	af00      	add	r7, sp, #0
 800987c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2201      	movs	r2, #1
 8009882:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2200      	movs	r2, #0
 800988a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2200      	movs	r2, #0
 8009892:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8009896:	2300      	movs	r3, #0
}
 8009898:	4618      	mov	r0, r3
 800989a:	370c      	adds	r7, #12
 800989c:	46bd      	mov	sp, r7
 800989e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a2:	4770      	bx	lr

080098a4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b082      	sub	sp, #8
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2201      	movs	r2, #1
 80098b0:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2200      	movs	r2, #0
 80098b8:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2200      	movs	r2, #0
 80098c0:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	f001 f8c0 	bl	800aa4a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	791b      	ldrb	r3, [r3, #4]
 80098ce:	4619      	mov	r1, r3
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f000 ff0d 	bl	800a6f0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	795b      	ldrb	r3, [r3, #5]
 80098da:	4619      	mov	r1, r3
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f000 ff07 	bl	800a6f0 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 80098e2:	2300      	movs	r3, #0
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3708      	adds	r7, #8
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}

080098ec <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b086      	sub	sp, #24
 80098f0:	af02      	add	r7, sp, #8
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	460b      	mov	r3, r1
 80098f6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 80098f8:	887b      	ldrh	r3, [r7, #2]
 80098fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098fe:	d901      	bls.n	8009904 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009900:	2303      	movs	r3, #3
 8009902:	e01b      	b.n	800993c <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800990a:	887b      	ldrh	r3, [r7, #2]
 800990c:	9300      	str	r3, [sp, #0]
 800990e:	4613      	mov	r3, r2
 8009910:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009914:	2100      	movs	r1, #0
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f000 f872 	bl	8009a00 <USBH_GetDescriptor>
 800991c:	4603      	mov	r3, r0
 800991e:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8009920:	7bfb      	ldrb	r3, [r7, #15]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d109      	bne.n	800993a <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800992c:	887a      	ldrh	r2, [r7, #2]
 800992e:	4619      	mov	r1, r3
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f000 f929 	bl	8009b88 <USBH_ParseDevDesc>
 8009936:	4603      	mov	r3, r0
 8009938:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800993a:	7bfb      	ldrb	r3, [r7, #15]
}
 800993c:	4618      	mov	r0, r3
 800993e:	3710      	adds	r7, #16
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}

08009944 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b086      	sub	sp, #24
 8009948:	af02      	add	r7, sp, #8
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	460b      	mov	r3, r1
 800994e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	331c      	adds	r3, #28
 8009954:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8009956:	887b      	ldrh	r3, [r7, #2]
 8009958:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800995c:	d901      	bls.n	8009962 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800995e:	2303      	movs	r3, #3
 8009960:	e016      	b.n	8009990 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009962:	887b      	ldrh	r3, [r7, #2]
 8009964:	9300      	str	r3, [sp, #0]
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800996c:	2100      	movs	r1, #0
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f000 f846 	bl	8009a00 <USBH_GetDescriptor>
 8009974:	4603      	mov	r3, r0
 8009976:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009978:	7bfb      	ldrb	r3, [r7, #15]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d107      	bne.n	800998e <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800997e:	887b      	ldrh	r3, [r7, #2]
 8009980:	461a      	mov	r2, r3
 8009982:	68b9      	ldr	r1, [r7, #8]
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f000 f9af 	bl	8009ce8 <USBH_ParseCfgDesc>
 800998a:	4603      	mov	r3, r0
 800998c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800998e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009990:	4618      	mov	r0, r3
 8009992:	3710      	adds	r7, #16
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}

08009998 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b088      	sub	sp, #32
 800999c:	af02      	add	r7, sp, #8
 800999e:	60f8      	str	r0, [r7, #12]
 80099a0:	607a      	str	r2, [r7, #4]
 80099a2:	461a      	mov	r2, r3
 80099a4:	460b      	mov	r3, r1
 80099a6:	72fb      	strb	r3, [r7, #11]
 80099a8:	4613      	mov	r3, r2
 80099aa:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 80099ac:	893b      	ldrh	r3, [r7, #8]
 80099ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80099b2:	d802      	bhi.n	80099ba <USBH_Get_StringDesc+0x22>
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d101      	bne.n	80099be <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80099ba:	2303      	movs	r3, #3
 80099bc:	e01c      	b.n	80099f8 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 80099be:	7afb      	ldrb	r3, [r7, #11]
 80099c0:	b29b      	uxth	r3, r3
 80099c2:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80099c6:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80099ce:	893b      	ldrh	r3, [r7, #8]
 80099d0:	9300      	str	r3, [sp, #0]
 80099d2:	460b      	mov	r3, r1
 80099d4:	2100      	movs	r1, #0
 80099d6:	68f8      	ldr	r0, [r7, #12]
 80099d8:	f000 f812 	bl	8009a00 <USBH_GetDescriptor>
 80099dc:	4603      	mov	r3, r0
 80099de:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80099e0:	7dfb      	ldrb	r3, [r7, #23]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d107      	bne.n	80099f6 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80099ec:	893a      	ldrh	r2, [r7, #8]
 80099ee:	6879      	ldr	r1, [r7, #4]
 80099f0:	4618      	mov	r0, r3
 80099f2:	f000 fb8c 	bl	800a10e <USBH_ParseStringDesc>
  }

  return status;
 80099f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3718      	adds	r7, #24
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}

08009a00 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b084      	sub	sp, #16
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	60f8      	str	r0, [r7, #12]
 8009a08:	607b      	str	r3, [r7, #4]
 8009a0a:	460b      	mov	r3, r1
 8009a0c:	72fb      	strb	r3, [r7, #11]
 8009a0e:	4613      	mov	r3, r2
 8009a10:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	789b      	ldrb	r3, [r3, #2]
 8009a16:	2b01      	cmp	r3, #1
 8009a18:	d11c      	bne.n	8009a54 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009a1a:	7afb      	ldrb	r3, [r7, #11]
 8009a1c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009a20:	b2da      	uxtb	r2, r3
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	2206      	movs	r2, #6
 8009a2a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	893a      	ldrh	r2, [r7, #8]
 8009a30:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009a32:	893b      	ldrh	r3, [r7, #8]
 8009a34:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009a38:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009a3c:	d104      	bne.n	8009a48 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	f240 4209 	movw	r2, #1033	@ 0x409
 8009a44:	829a      	strh	r2, [r3, #20]
 8009a46:	e002      	b.n	8009a4e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	8b3a      	ldrh	r2, [r7, #24]
 8009a52:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009a54:	8b3b      	ldrh	r3, [r7, #24]
 8009a56:	461a      	mov	r2, r3
 8009a58:	6879      	ldr	r1, [r7, #4]
 8009a5a:	68f8      	ldr	r0, [r7, #12]
 8009a5c:	f000 fba4 	bl	800a1a8 <USBH_CtlReq>
 8009a60:	4603      	mov	r3, r0
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3710      	adds	r7, #16
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}

08009a6a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009a6a:	b580      	push	{r7, lr}
 8009a6c:	b082      	sub	sp, #8
 8009a6e:	af00      	add	r7, sp, #0
 8009a70:	6078      	str	r0, [r7, #4]
 8009a72:	460b      	mov	r3, r1
 8009a74:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	789b      	ldrb	r3, [r3, #2]
 8009a7a:	2b01      	cmp	r3, #1
 8009a7c:	d10f      	bne.n	8009a9e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2200      	movs	r2, #0
 8009a82:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2205      	movs	r2, #5
 8009a88:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009a8a:	78fb      	ldrb	r3, [r7, #3]
 8009a8c:	b29a      	uxth	r2, r3
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2200      	movs	r2, #0
 8009a96:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	2100      	movs	r1, #0
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	f000 fb80 	bl	800a1a8 <USBH_CtlReq>
 8009aa8:	4603      	mov	r3, r0
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3708      	adds	r7, #8
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}

08009ab2 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009ab2:	b580      	push	{r7, lr}
 8009ab4:	b082      	sub	sp, #8
 8009ab6:	af00      	add	r7, sp, #0
 8009ab8:	6078      	str	r0, [r7, #4]
 8009aba:	460b      	mov	r3, r1
 8009abc:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	789b      	ldrb	r3, [r3, #2]
 8009ac2:	2b01      	cmp	r3, #1
 8009ac4:	d10e      	bne.n	8009ae4 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2200      	movs	r2, #0
 8009aca:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2209      	movs	r2, #9
 8009ad0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	887a      	ldrh	r2, [r7, #2]
 8009ad6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2200      	movs	r2, #0
 8009adc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	2100      	movs	r1, #0
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f000 fb5d 	bl	800a1a8 <USBH_CtlReq>
 8009aee:	4603      	mov	r3, r0
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	3708      	adds	r7, #8
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}

08009af8 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b082      	sub	sp, #8
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
 8009b00:	460b      	mov	r3, r1
 8009b02:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	789b      	ldrb	r3, [r3, #2]
 8009b08:	2b01      	cmp	r3, #1
 8009b0a:	d10f      	bne.n	8009b2c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2203      	movs	r2, #3
 8009b16:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009b18:	78fb      	ldrb	r3, [r7, #3]
 8009b1a:	b29a      	uxth	r2, r3
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2200      	movs	r2, #0
 8009b24:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2200      	movs	r2, #0
 8009b2a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	2100      	movs	r1, #0
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f000 fb39 	bl	800a1a8 <USBH_CtlReq>
 8009b36:	4603      	mov	r3, r0
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	3708      	adds	r7, #8
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}

08009b40 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b082      	sub	sp, #8
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
 8009b48:	460b      	mov	r3, r1
 8009b4a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	789b      	ldrb	r3, [r3, #2]
 8009b50:	2b01      	cmp	r3, #1
 8009b52:	d10f      	bne.n	8009b74 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2202      	movs	r2, #2
 8009b58:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2201      	movs	r2, #1
 8009b5e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2200      	movs	r2, #0
 8009b64:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009b66:	78fb      	ldrb	r3, [r7, #3]
 8009b68:	b29a      	uxth	r2, r3
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2200      	movs	r2, #0
 8009b72:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009b74:	2200      	movs	r2, #0
 8009b76:	2100      	movs	r1, #0
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f000 fb15 	bl	800a1a8 <USBH_CtlReq>
 8009b7e:	4603      	mov	r3, r0
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	3708      	adds	r7, #8
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}

08009b88 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b087      	sub	sp, #28
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	60f8      	str	r0, [r7, #12]
 8009b90:	60b9      	str	r1, [r7, #8]
 8009b92:	4613      	mov	r3, r2
 8009b94:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8009b9c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d101      	bne.n	8009bac <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8009ba8:	2302      	movs	r3, #2
 8009baa:	e094      	b.n	8009cd6 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	781a      	ldrb	r2, [r3, #0]
 8009bb0:	693b      	ldr	r3, [r7, #16]
 8009bb2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	785a      	ldrb	r2, [r3, #1]
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	3302      	adds	r3, #2
 8009bc0:	781b      	ldrb	r3, [r3, #0]
 8009bc2:	461a      	mov	r2, r3
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	3303      	adds	r3, #3
 8009bc8:	781b      	ldrb	r3, [r3, #0]
 8009bca:	021b      	lsls	r3, r3, #8
 8009bcc:	b29b      	uxth	r3, r3
 8009bce:	4313      	orrs	r3, r2
 8009bd0:	b29a      	uxth	r2, r3
 8009bd2:	693b      	ldr	r3, [r7, #16]
 8009bd4:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	791a      	ldrb	r2, [r3, #4]
 8009bda:	693b      	ldr	r3, [r7, #16]
 8009bdc:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	795a      	ldrb	r2, [r3, #5]
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	799a      	ldrb	r2, [r3, #6]
 8009bea:	693b      	ldr	r3, [r7, #16]
 8009bec:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	79da      	ldrb	r2, [r3, #7]
 8009bf2:	693b      	ldr	r3, [r7, #16]
 8009bf4:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d004      	beq.n	8009c0a <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009c06:	2b01      	cmp	r3, #1
 8009c08:	d11b      	bne.n	8009c42 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8009c0a:	693b      	ldr	r3, [r7, #16]
 8009c0c:	79db      	ldrb	r3, [r3, #7]
 8009c0e:	2b20      	cmp	r3, #32
 8009c10:	dc0f      	bgt.n	8009c32 <USBH_ParseDevDesc+0xaa>
 8009c12:	2b08      	cmp	r3, #8
 8009c14:	db0f      	blt.n	8009c36 <USBH_ParseDevDesc+0xae>
 8009c16:	3b08      	subs	r3, #8
 8009c18:	4a32      	ldr	r2, [pc, #200]	@ (8009ce4 <USBH_ParseDevDesc+0x15c>)
 8009c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8009c1e:	f003 0301 	and.w	r3, r3, #1
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	bf14      	ite	ne
 8009c26:	2301      	movne	r3, #1
 8009c28:	2300      	moveq	r3, #0
 8009c2a:	b2db      	uxtb	r3, r3
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d106      	bne.n	8009c3e <USBH_ParseDevDesc+0xb6>
 8009c30:	e001      	b.n	8009c36 <USBH_ParseDevDesc+0xae>
 8009c32:	2b40      	cmp	r3, #64	@ 0x40
 8009c34:	d003      	beq.n	8009c3e <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8009c36:	693b      	ldr	r3, [r7, #16]
 8009c38:	2208      	movs	r2, #8
 8009c3a:	71da      	strb	r2, [r3, #7]
        break;
 8009c3c:	e000      	b.n	8009c40 <USBH_ParseDevDesc+0xb8>
        break;
 8009c3e:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8009c40:	e00e      	b.n	8009c60 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009c48:	2b02      	cmp	r3, #2
 8009c4a:	d107      	bne.n	8009c5c <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8009c4c:	693b      	ldr	r3, [r7, #16]
 8009c4e:	79db      	ldrb	r3, [r3, #7]
 8009c50:	2b08      	cmp	r3, #8
 8009c52:	d005      	beq.n	8009c60 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8009c54:	693b      	ldr	r3, [r7, #16]
 8009c56:	2208      	movs	r2, #8
 8009c58:	71da      	strb	r2, [r3, #7]
 8009c5a:	e001      	b.n	8009c60 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009c5c:	2303      	movs	r3, #3
 8009c5e:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8009c60:	88fb      	ldrh	r3, [r7, #6]
 8009c62:	2b08      	cmp	r3, #8
 8009c64:	d936      	bls.n	8009cd4 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	3308      	adds	r3, #8
 8009c6a:	781b      	ldrb	r3, [r3, #0]
 8009c6c:	461a      	mov	r2, r3
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	3309      	adds	r3, #9
 8009c72:	781b      	ldrb	r3, [r3, #0]
 8009c74:	021b      	lsls	r3, r3, #8
 8009c76:	b29b      	uxth	r3, r3
 8009c78:	4313      	orrs	r3, r2
 8009c7a:	b29a      	uxth	r2, r3
 8009c7c:	693b      	ldr	r3, [r7, #16]
 8009c7e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	330a      	adds	r3, #10
 8009c84:	781b      	ldrb	r3, [r3, #0]
 8009c86:	461a      	mov	r2, r3
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	330b      	adds	r3, #11
 8009c8c:	781b      	ldrb	r3, [r3, #0]
 8009c8e:	021b      	lsls	r3, r3, #8
 8009c90:	b29b      	uxth	r3, r3
 8009c92:	4313      	orrs	r3, r2
 8009c94:	b29a      	uxth	r2, r3
 8009c96:	693b      	ldr	r3, [r7, #16]
 8009c98:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	330c      	adds	r3, #12
 8009c9e:	781b      	ldrb	r3, [r3, #0]
 8009ca0:	461a      	mov	r2, r3
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	330d      	adds	r3, #13
 8009ca6:	781b      	ldrb	r3, [r3, #0]
 8009ca8:	021b      	lsls	r3, r3, #8
 8009caa:	b29b      	uxth	r3, r3
 8009cac:	4313      	orrs	r3, r2
 8009cae:	b29a      	uxth	r2, r3
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	7b9a      	ldrb	r2, [r3, #14]
 8009cb8:	693b      	ldr	r3, [r7, #16]
 8009cba:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	7bda      	ldrb	r2, [r3, #15]
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	7c1a      	ldrb	r2, [r3, #16]
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	7c5a      	ldrb	r2, [r3, #17]
 8009cd0:	693b      	ldr	r3, [r7, #16]
 8009cd2:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8009cd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	371c      	adds	r7, #28
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce0:	4770      	bx	lr
 8009ce2:	bf00      	nop
 8009ce4:	01000101 	.word	0x01000101

08009ce8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b08c      	sub	sp, #48	@ 0x30
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	60f8      	str	r0, [r7, #12]
 8009cf0:	60b9      	str	r1, [r7, #8]
 8009cf2:	4613      	mov	r3, r2
 8009cf4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009cfc:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009d04:	2300      	movs	r3, #0
 8009d06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d101      	bne.n	8009d1a <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8009d16:	2302      	movs	r3, #2
 8009d18:	e0de      	b.n	8009ed8 <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8009d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d20:	781b      	ldrb	r3, [r3, #0]
 8009d22:	2b09      	cmp	r3, #9
 8009d24:	d002      	beq.n	8009d2c <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8009d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d28:	2209      	movs	r2, #9
 8009d2a:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	781a      	ldrb	r2, [r3, #0]
 8009d30:	6a3b      	ldr	r3, [r7, #32]
 8009d32:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	785a      	ldrb	r2, [r3, #1]
 8009d38:	6a3b      	ldr	r3, [r7, #32]
 8009d3a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	3302      	adds	r3, #2
 8009d40:	781b      	ldrb	r3, [r3, #0]
 8009d42:	461a      	mov	r2, r3
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	3303      	adds	r3, #3
 8009d48:	781b      	ldrb	r3, [r3, #0]
 8009d4a:	021b      	lsls	r3, r3, #8
 8009d4c:	b29b      	uxth	r3, r3
 8009d4e:	4313      	orrs	r3, r2
 8009d50:	b29b      	uxth	r3, r3
 8009d52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d56:	bf28      	it	cs
 8009d58:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8009d5c:	b29a      	uxth	r2, r3
 8009d5e:	6a3b      	ldr	r3, [r7, #32]
 8009d60:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	791a      	ldrb	r2, [r3, #4]
 8009d66:	6a3b      	ldr	r3, [r7, #32]
 8009d68:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	795a      	ldrb	r2, [r3, #5]
 8009d6e:	6a3b      	ldr	r3, [r7, #32]
 8009d70:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	799a      	ldrb	r2, [r3, #6]
 8009d76:	6a3b      	ldr	r3, [r7, #32]
 8009d78:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	79da      	ldrb	r2, [r3, #7]
 8009d7e:	6a3b      	ldr	r3, [r7, #32]
 8009d80:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	7a1a      	ldrb	r2, [r3, #8]
 8009d86:	6a3b      	ldr	r3, [r7, #32]
 8009d88:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009d8a:	88fb      	ldrh	r3, [r7, #6]
 8009d8c:	2b09      	cmp	r3, #9
 8009d8e:	f240 80a1 	bls.w	8009ed4 <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 8009d92:	2309      	movs	r3, #9
 8009d94:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009d96:	2300      	movs	r3, #0
 8009d98:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009d9a:	e085      	b.n	8009ea8 <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009d9c:	f107 0316 	add.w	r3, r7, #22
 8009da0:	4619      	mov	r1, r3
 8009da2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009da4:	f000 f9e6 	bl	800a174 <USBH_GetNextDesc>
 8009da8:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8009daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dac:	785b      	ldrb	r3, [r3, #1]
 8009dae:	2b04      	cmp	r3, #4
 8009db0:	d17a      	bne.n	8009ea8 <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8009db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009db4:	781b      	ldrb	r3, [r3, #0]
 8009db6:	2b09      	cmp	r3, #9
 8009db8:	d002      	beq.n	8009dc0 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8009dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dbc:	2209      	movs	r2, #9
 8009dbe:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009dc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009dc4:	221a      	movs	r2, #26
 8009dc6:	fb02 f303 	mul.w	r3, r2, r3
 8009dca:	3308      	adds	r3, #8
 8009dcc:	6a3a      	ldr	r2, [r7, #32]
 8009dce:	4413      	add	r3, r2
 8009dd0:	3302      	adds	r3, #2
 8009dd2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009dd4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009dd6:	69f8      	ldr	r0, [r7, #28]
 8009dd8:	f000 f882 	bl	8009ee0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009ddc:	2300      	movs	r3, #0
 8009dde:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8009de2:	2300      	movs	r3, #0
 8009de4:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009de6:	e043      	b.n	8009e70 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009de8:	f107 0316 	add.w	r3, r7, #22
 8009dec:	4619      	mov	r1, r3
 8009dee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009df0:	f000 f9c0 	bl	800a174 <USBH_GetNextDesc>
 8009df4:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009df8:	785b      	ldrb	r3, [r3, #1]
 8009dfa:	2b05      	cmp	r3, #5
 8009dfc:	d138      	bne.n	8009e70 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8009dfe:	69fb      	ldr	r3, [r7, #28]
 8009e00:	795b      	ldrb	r3, [r3, #5]
 8009e02:	2b01      	cmp	r3, #1
 8009e04:	d113      	bne.n	8009e2e <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009e06:	69fb      	ldr	r3, [r7, #28]
 8009e08:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8009e0a:	2b02      	cmp	r3, #2
 8009e0c:	d003      	beq.n	8009e16 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009e0e:	69fb      	ldr	r3, [r7, #28]
 8009e10:	799b      	ldrb	r3, [r3, #6]
 8009e12:	2b03      	cmp	r3, #3
 8009e14:	d10b      	bne.n	8009e2e <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009e16:	69fb      	ldr	r3, [r7, #28]
 8009e18:	79db      	ldrb	r3, [r3, #7]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d10b      	bne.n	8009e36 <USBH_ParseCfgDesc+0x14e>
 8009e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e20:	781b      	ldrb	r3, [r3, #0]
 8009e22:	2b09      	cmp	r3, #9
 8009e24:	d007      	beq.n	8009e36 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8009e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e28:	2209      	movs	r2, #9
 8009e2a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009e2c:	e003      	b.n	8009e36 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8009e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e30:	2207      	movs	r2, #7
 8009e32:	701a      	strb	r2, [r3, #0]
 8009e34:	e000      	b.n	8009e38 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009e36:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009e38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009e3c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009e40:	3201      	adds	r2, #1
 8009e42:	00d2      	lsls	r2, r2, #3
 8009e44:	211a      	movs	r1, #26
 8009e46:	fb01 f303 	mul.w	r3, r1, r3
 8009e4a:	4413      	add	r3, r2
 8009e4c:	3308      	adds	r3, #8
 8009e4e:	6a3a      	ldr	r2, [r7, #32]
 8009e50:	4413      	add	r3, r2
 8009e52:	3304      	adds	r3, #4
 8009e54:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8009e56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009e58:	69b9      	ldr	r1, [r7, #24]
 8009e5a:	68f8      	ldr	r0, [r7, #12]
 8009e5c:	f000 f86f 	bl	8009f3e <USBH_ParseEPDesc>
 8009e60:	4603      	mov	r3, r0
 8009e62:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8009e66:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009e6a:	3301      	adds	r3, #1
 8009e6c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009e70:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009e74:	2b01      	cmp	r3, #1
 8009e76:	d80a      	bhi.n	8009e8e <USBH_ParseCfgDesc+0x1a6>
 8009e78:	69fb      	ldr	r3, [r7, #28]
 8009e7a:	791b      	ldrb	r3, [r3, #4]
 8009e7c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009e80:	429a      	cmp	r2, r3
 8009e82:	d204      	bcs.n	8009e8e <USBH_ParseCfgDesc+0x1a6>
 8009e84:	6a3b      	ldr	r3, [r7, #32]
 8009e86:	885a      	ldrh	r2, [r3, #2]
 8009e88:	8afb      	ldrh	r3, [r7, #22]
 8009e8a:	429a      	cmp	r2, r3
 8009e8c:	d8ac      	bhi.n	8009de8 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8009e8e:	69fb      	ldr	r3, [r7, #28]
 8009e90:	791b      	ldrb	r3, [r3, #4]
 8009e92:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009e96:	429a      	cmp	r2, r3
 8009e98:	d201      	bcs.n	8009e9e <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 8009e9a:	2303      	movs	r3, #3
 8009e9c:	e01c      	b.n	8009ed8 <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 8009e9e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009ea2:	3301      	adds	r3, #1
 8009ea4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009ea8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009eac:	2b01      	cmp	r3, #1
 8009eae:	d805      	bhi.n	8009ebc <USBH_ParseCfgDesc+0x1d4>
 8009eb0:	6a3b      	ldr	r3, [r7, #32]
 8009eb2:	885a      	ldrh	r2, [r3, #2]
 8009eb4:	8afb      	ldrh	r3, [r7, #22]
 8009eb6:	429a      	cmp	r2, r3
 8009eb8:	f63f af70 	bhi.w	8009d9c <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8009ebc:	6a3b      	ldr	r3, [r7, #32]
 8009ebe:	791b      	ldrb	r3, [r3, #4]
 8009ec0:	2b02      	cmp	r3, #2
 8009ec2:	bf28      	it	cs
 8009ec4:	2302      	movcs	r3, #2
 8009ec6:	b2db      	uxtb	r3, r3
 8009ec8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009ecc:	429a      	cmp	r2, r3
 8009ece:	d201      	bcs.n	8009ed4 <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 8009ed0:	2303      	movs	r3, #3
 8009ed2:	e001      	b.n	8009ed8 <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 8009ed4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	3730      	adds	r7, #48	@ 0x30
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}

08009ee0 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b083      	sub	sp, #12
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
 8009ee8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	781a      	ldrb	r2, [r3, #0]
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	785a      	ldrb	r2, [r3, #1]
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	789a      	ldrb	r2, [r3, #2]
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	78da      	ldrb	r2, [r3, #3]
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	791a      	ldrb	r2, [r3, #4]
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	795a      	ldrb	r2, [r3, #5]
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	799a      	ldrb	r2, [r3, #6]
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	79da      	ldrb	r2, [r3, #7]
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	7a1a      	ldrb	r2, [r3, #8]
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	721a      	strb	r2, [r3, #8]
}
 8009f32:	bf00      	nop
 8009f34:	370c      	adds	r7, #12
 8009f36:	46bd      	mov	sp, r7
 8009f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3c:	4770      	bx	lr

08009f3e <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8009f3e:	b480      	push	{r7}
 8009f40:	b087      	sub	sp, #28
 8009f42:	af00      	add	r7, sp, #0
 8009f44:	60f8      	str	r0, [r7, #12]
 8009f46:	60b9      	str	r1, [r7, #8]
 8009f48:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	781a      	ldrb	r2, [r3, #0]
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	785a      	ldrb	r2, [r3, #1]
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	789a      	ldrb	r2, [r3, #2]
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	78da      	ldrb	r2, [r3, #3]
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	3304      	adds	r3, #4
 8009f72:	781b      	ldrb	r3, [r3, #0]
 8009f74:	461a      	mov	r2, r3
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	3305      	adds	r3, #5
 8009f7a:	781b      	ldrb	r3, [r3, #0]
 8009f7c:	021b      	lsls	r3, r3, #8
 8009f7e:	b29b      	uxth	r3, r3
 8009f80:	4313      	orrs	r3, r2
 8009f82:	b29a      	uxth	r2, r3
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	799a      	ldrb	r2, [r3, #6]
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	889b      	ldrh	r3, [r3, #4]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d009      	beq.n	8009fac <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009f9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009fa0:	d804      	bhi.n	8009fac <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009fa6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009faa:	d901      	bls.n	8009fb0 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8009fac:	2303      	movs	r3, #3
 8009fae:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d136      	bne.n	800a028 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	78db      	ldrb	r3, [r3, #3]
 8009fbe:	f003 0303 	and.w	r3, r3, #3
 8009fc2:	2b02      	cmp	r3, #2
 8009fc4:	d108      	bne.n	8009fd8 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	889b      	ldrh	r3, [r3, #4]
 8009fca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009fce:	f240 8097 	bls.w	800a100 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009fd2:	2303      	movs	r3, #3
 8009fd4:	75fb      	strb	r3, [r7, #23]
 8009fd6:	e093      	b.n	800a100 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	78db      	ldrb	r3, [r3, #3]
 8009fdc:	f003 0303 	and.w	r3, r3, #3
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d107      	bne.n	8009ff4 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	889b      	ldrh	r3, [r3, #4]
 8009fe8:	2b40      	cmp	r3, #64	@ 0x40
 8009fea:	f240 8089 	bls.w	800a100 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009fee:	2303      	movs	r3, #3
 8009ff0:	75fb      	strb	r3, [r7, #23]
 8009ff2:	e085      	b.n	800a100 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	78db      	ldrb	r3, [r3, #3]
 8009ff8:	f003 0303 	and.w	r3, r3, #3
 8009ffc:	2b01      	cmp	r3, #1
 8009ffe:	d005      	beq.n	800a00c <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	78db      	ldrb	r3, [r3, #3]
 800a004:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a008:	2b03      	cmp	r3, #3
 800a00a:	d10a      	bne.n	800a022 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	799b      	ldrb	r3, [r3, #6]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d003      	beq.n	800a01c <USBH_ParseEPDesc+0xde>
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	799b      	ldrb	r3, [r3, #6]
 800a018:	2b10      	cmp	r3, #16
 800a01a:	d970      	bls.n	800a0fe <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800a01c:	2303      	movs	r3, #3
 800a01e:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a020:	e06d      	b.n	800a0fe <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a022:	2303      	movs	r3, #3
 800a024:	75fb      	strb	r3, [r7, #23]
 800a026:	e06b      	b.n	800a100 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a02e:	2b01      	cmp	r3, #1
 800a030:	d13c      	bne.n	800a0ac <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	78db      	ldrb	r3, [r3, #3]
 800a036:	f003 0303 	and.w	r3, r3, #3
 800a03a:	2b02      	cmp	r3, #2
 800a03c:	d005      	beq.n	800a04a <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	78db      	ldrb	r3, [r3, #3]
 800a042:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a046:	2b00      	cmp	r3, #0
 800a048:	d106      	bne.n	800a058 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	889b      	ldrh	r3, [r3, #4]
 800a04e:	2b40      	cmp	r3, #64	@ 0x40
 800a050:	d956      	bls.n	800a100 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a052:	2303      	movs	r3, #3
 800a054:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a056:	e053      	b.n	800a100 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	78db      	ldrb	r3, [r3, #3]
 800a05c:	f003 0303 	and.w	r3, r3, #3
 800a060:	2b01      	cmp	r3, #1
 800a062:	d10e      	bne.n	800a082 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	799b      	ldrb	r3, [r3, #6]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d007      	beq.n	800a07c <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800a070:	2b10      	cmp	r3, #16
 800a072:	d803      	bhi.n	800a07c <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800a078:	2b40      	cmp	r3, #64	@ 0x40
 800a07a:	d941      	bls.n	800a100 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a07c:	2303      	movs	r3, #3
 800a07e:	75fb      	strb	r3, [r7, #23]
 800a080:	e03e      	b.n	800a100 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	78db      	ldrb	r3, [r3, #3]
 800a086:	f003 0303 	and.w	r3, r3, #3
 800a08a:	2b03      	cmp	r3, #3
 800a08c:	d10b      	bne.n	800a0a6 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	799b      	ldrb	r3, [r3, #6]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d004      	beq.n	800a0a0 <USBH_ParseEPDesc+0x162>
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	889b      	ldrh	r3, [r3, #4]
 800a09a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a09e:	d32f      	bcc.n	800a100 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a0a0:	2303      	movs	r3, #3
 800a0a2:	75fb      	strb	r3, [r7, #23]
 800a0a4:	e02c      	b.n	800a100 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a0a6:	2303      	movs	r3, #3
 800a0a8:	75fb      	strb	r3, [r7, #23]
 800a0aa:	e029      	b.n	800a100 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a0b2:	2b02      	cmp	r3, #2
 800a0b4:	d120      	bne.n	800a0f8 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	78db      	ldrb	r3, [r3, #3]
 800a0ba:	f003 0303 	and.w	r3, r3, #3
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d106      	bne.n	800a0d0 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	889b      	ldrh	r3, [r3, #4]
 800a0c6:	2b08      	cmp	r3, #8
 800a0c8:	d01a      	beq.n	800a100 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a0ca:	2303      	movs	r3, #3
 800a0cc:	75fb      	strb	r3, [r7, #23]
 800a0ce:	e017      	b.n	800a100 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	78db      	ldrb	r3, [r3, #3]
 800a0d4:	f003 0303 	and.w	r3, r3, #3
 800a0d8:	2b03      	cmp	r3, #3
 800a0da:	d10a      	bne.n	800a0f2 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	799b      	ldrb	r3, [r3, #6]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d003      	beq.n	800a0ec <USBH_ParseEPDesc+0x1ae>
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	889b      	ldrh	r3, [r3, #4]
 800a0e8:	2b08      	cmp	r3, #8
 800a0ea:	d909      	bls.n	800a100 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a0ec:	2303      	movs	r3, #3
 800a0ee:	75fb      	strb	r3, [r7, #23]
 800a0f0:	e006      	b.n	800a100 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a0f2:	2303      	movs	r3, #3
 800a0f4:	75fb      	strb	r3, [r7, #23]
 800a0f6:	e003      	b.n	800a100 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a0f8:	2303      	movs	r3, #3
 800a0fa:	75fb      	strb	r3, [r7, #23]
 800a0fc:	e000      	b.n	800a100 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a0fe:	bf00      	nop
  }

  return status;
 800a100:	7dfb      	ldrb	r3, [r7, #23]
}
 800a102:	4618      	mov	r0, r3
 800a104:	371c      	adds	r7, #28
 800a106:	46bd      	mov	sp, r7
 800a108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10c:	4770      	bx	lr

0800a10e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a10e:	b480      	push	{r7}
 800a110:	b087      	sub	sp, #28
 800a112:	af00      	add	r7, sp, #0
 800a114:	60f8      	str	r0, [r7, #12]
 800a116:	60b9      	str	r1, [r7, #8]
 800a118:	4613      	mov	r3, r2
 800a11a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	3301      	adds	r3, #1
 800a120:	781b      	ldrb	r3, [r3, #0]
 800a122:	2b03      	cmp	r3, #3
 800a124:	d120      	bne.n	800a168 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	781b      	ldrb	r3, [r3, #0]
 800a12a:	1e9a      	subs	r2, r3, #2
 800a12c:	88fb      	ldrh	r3, [r7, #6]
 800a12e:	4293      	cmp	r3, r2
 800a130:	bf28      	it	cs
 800a132:	4613      	movcs	r3, r2
 800a134:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	3302      	adds	r3, #2
 800a13a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a13c:	2300      	movs	r3, #0
 800a13e:	82fb      	strh	r3, [r7, #22]
 800a140:	e00b      	b.n	800a15a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a142:	8afb      	ldrh	r3, [r7, #22]
 800a144:	68fa      	ldr	r2, [r7, #12]
 800a146:	4413      	add	r3, r2
 800a148:	781a      	ldrb	r2, [r3, #0]
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a14e:	68bb      	ldr	r3, [r7, #8]
 800a150:	3301      	adds	r3, #1
 800a152:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a154:	8afb      	ldrh	r3, [r7, #22]
 800a156:	3302      	adds	r3, #2
 800a158:	82fb      	strh	r3, [r7, #22]
 800a15a:	8afa      	ldrh	r2, [r7, #22]
 800a15c:	8abb      	ldrh	r3, [r7, #20]
 800a15e:	429a      	cmp	r2, r3
 800a160:	d3ef      	bcc.n	800a142 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	2200      	movs	r2, #0
 800a166:	701a      	strb	r2, [r3, #0]
  }
}
 800a168:	bf00      	nop
 800a16a:	371c      	adds	r7, #28
 800a16c:	46bd      	mov	sp, r7
 800a16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a172:	4770      	bx	lr

0800a174 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a174:	b480      	push	{r7}
 800a176:	b085      	sub	sp, #20
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
 800a17c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	881b      	ldrh	r3, [r3, #0]
 800a182:	687a      	ldr	r2, [r7, #4]
 800a184:	7812      	ldrb	r2, [r2, #0]
 800a186:	4413      	add	r3, r2
 800a188:	b29a      	uxth	r2, r3
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	781b      	ldrb	r3, [r3, #0]
 800a192:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	4413      	add	r3, r2
 800a198:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a19a:	68fb      	ldr	r3, [r7, #12]
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	3714      	adds	r7, #20
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a6:	4770      	bx	lr

0800a1a8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b086      	sub	sp, #24
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	60f8      	str	r0, [r7, #12]
 800a1b0:	60b9      	str	r1, [r7, #8]
 800a1b2:	4613      	mov	r3, r2
 800a1b4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	789b      	ldrb	r3, [r3, #2]
 800a1be:	2b01      	cmp	r3, #1
 800a1c0:	d002      	beq.n	800a1c8 <USBH_CtlReq+0x20>
 800a1c2:	2b02      	cmp	r3, #2
 800a1c4:	d00f      	beq.n	800a1e6 <USBH_CtlReq+0x3e>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 800a1c6:	e027      	b.n	800a218 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	68ba      	ldr	r2, [r7, #8]
 800a1cc:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	88fa      	ldrh	r2, [r7, #6]
 800a1d2:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	2201      	movs	r2, #1
 800a1d8:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	2202      	movs	r2, #2
 800a1de:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	75fb      	strb	r3, [r7, #23]
      break;
 800a1e4:	e018      	b.n	800a218 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a1e6:	68f8      	ldr	r0, [r7, #12]
 800a1e8:	f000 f81c 	bl	800a224 <USBH_HandleControl>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a1f0:	7dfb      	ldrb	r3, [r7, #23]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d002      	beq.n	800a1fc <USBH_CtlReq+0x54>
 800a1f6:	7dfb      	ldrb	r3, [r7, #23]
 800a1f8:	2b03      	cmp	r3, #3
 800a1fa:	d106      	bne.n	800a20a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	2201      	movs	r2, #1
 800a200:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	2200      	movs	r2, #0
 800a206:	761a      	strb	r2, [r3, #24]
      break;
 800a208:	e005      	b.n	800a216 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a20a:	7dfb      	ldrb	r3, [r7, #23]
 800a20c:	2b02      	cmp	r3, #2
 800a20e:	d102      	bne.n	800a216 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	2201      	movs	r2, #1
 800a214:	709a      	strb	r2, [r3, #2]
      break;
 800a216:	bf00      	nop
  }
  return status;
 800a218:	7dfb      	ldrb	r3, [r7, #23]
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3718      	adds	r7, #24
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}
	...

0800a224 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b086      	sub	sp, #24
 800a228:	af02      	add	r7, sp, #8
 800a22a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a22c:	2301      	movs	r3, #1
 800a22e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a230:	2300      	movs	r3, #0
 800a232:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	7e1b      	ldrb	r3, [r3, #24]
 800a238:	3b01      	subs	r3, #1
 800a23a:	2b0a      	cmp	r3, #10
 800a23c:	f200 8157 	bhi.w	800a4ee <USBH_HandleControl+0x2ca>
 800a240:	a201      	add	r2, pc, #4	@ (adr r2, 800a248 <USBH_HandleControl+0x24>)
 800a242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a246:	bf00      	nop
 800a248:	0800a275 	.word	0x0800a275
 800a24c:	0800a28f 	.word	0x0800a28f
 800a250:	0800a2f9 	.word	0x0800a2f9
 800a254:	0800a31f 	.word	0x0800a31f
 800a258:	0800a359 	.word	0x0800a359
 800a25c:	0800a383 	.word	0x0800a383
 800a260:	0800a3d5 	.word	0x0800a3d5
 800a264:	0800a3f7 	.word	0x0800a3f7
 800a268:	0800a433 	.word	0x0800a433
 800a26c:	0800a459 	.word	0x0800a459
 800a270:	0800a497 	.word	0x0800a497
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f103 0110 	add.w	r1, r3, #16
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	795b      	ldrb	r3, [r3, #5]
 800a27e:	461a      	mov	r2, r3
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f000 f945 	bl	800a510 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2202      	movs	r2, #2
 800a28a:	761a      	strb	r2, [r3, #24]
      break;
 800a28c:	e13a      	b.n	800a504 <USBH_HandleControl+0x2e0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	795b      	ldrb	r3, [r3, #5]
 800a292:	4619      	mov	r1, r3
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f000 fcc7 	bl	800ac28 <USBH_LL_GetURBState>
 800a29a:	4603      	mov	r3, r0
 800a29c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a29e:	7bbb      	ldrb	r3, [r7, #14]
 800a2a0:	2b01      	cmp	r3, #1
 800a2a2:	d11e      	bne.n	800a2e2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	7c1b      	ldrb	r3, [r3, #16]
 800a2a8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a2ac:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	8adb      	ldrh	r3, [r3, #22]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d00a      	beq.n	800a2cc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a2b6:	7b7b      	ldrb	r3, [r7, #13]
 800a2b8:	2b80      	cmp	r3, #128	@ 0x80
 800a2ba:	d103      	bne.n	800a2c4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2203      	movs	r2, #3
 800a2c0:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800a2c2:	e116      	b.n	800a4f2 <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_DATA_OUT;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2205      	movs	r2, #5
 800a2c8:	761a      	strb	r2, [r3, #24]
      break;
 800a2ca:	e112      	b.n	800a4f2 <USBH_HandleControl+0x2ce>
          if (direction == USB_D2H)
 800a2cc:	7b7b      	ldrb	r3, [r7, #13]
 800a2ce:	2b80      	cmp	r3, #128	@ 0x80
 800a2d0:	d103      	bne.n	800a2da <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2209      	movs	r2, #9
 800a2d6:	761a      	strb	r2, [r3, #24]
      break;
 800a2d8:	e10b      	b.n	800a4f2 <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_STATUS_IN;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2207      	movs	r2, #7
 800a2de:	761a      	strb	r2, [r3, #24]
      break;
 800a2e0:	e107      	b.n	800a4f2 <USBH_HandleControl+0x2ce>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a2e2:	7bbb      	ldrb	r3, [r7, #14]
 800a2e4:	2b04      	cmp	r3, #4
 800a2e6:	d003      	beq.n	800a2f0 <USBH_HandleControl+0xcc>
 800a2e8:	7bbb      	ldrb	r3, [r7, #14]
 800a2ea:	2b02      	cmp	r3, #2
 800a2ec:	f040 8101 	bne.w	800a4f2 <USBH_HandleControl+0x2ce>
          phost->Control.state = CTRL_ERROR;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	220b      	movs	r2, #11
 800a2f4:	761a      	strb	r2, [r3, #24]
      break;
 800a2f6:	e0fc      	b.n	800a4f2 <USBH_HandleControl+0x2ce>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a2fe:	b29a      	uxth	r2, r3
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6899      	ldr	r1, [r3, #8]
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	899a      	ldrh	r2, [r3, #12]
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	791b      	ldrb	r3, [r3, #4]
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f000 f93c 	bl	800a58e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2204      	movs	r2, #4
 800a31a:	761a      	strb	r2, [r3, #24]
      break;
 800a31c:	e0f2      	b.n	800a504 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	791b      	ldrb	r3, [r3, #4]
 800a322:	4619      	mov	r1, r3
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f000 fc7f 	bl	800ac28 <USBH_LL_GetURBState>
 800a32a:	4603      	mov	r3, r0
 800a32c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a32e:	7bbb      	ldrb	r3, [r7, #14]
 800a330:	2b01      	cmp	r3, #1
 800a332:	d103      	bne.n	800a33c <USBH_HandleControl+0x118>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2209      	movs	r2, #9
 800a338:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800a33a:	e0dc      	b.n	800a4f6 <USBH_HandleControl+0x2d2>
      else if (URB_Status == USBH_URB_STALL)
 800a33c:	7bbb      	ldrb	r3, [r7, #14]
 800a33e:	2b05      	cmp	r3, #5
 800a340:	d102      	bne.n	800a348 <USBH_HandleControl+0x124>
        status = USBH_NOT_SUPPORTED;
 800a342:	2303      	movs	r3, #3
 800a344:	73fb      	strb	r3, [r7, #15]
      break;
 800a346:	e0d6      	b.n	800a4f6 <USBH_HandleControl+0x2d2>
        if (URB_Status == USBH_URB_ERROR)
 800a348:	7bbb      	ldrb	r3, [r7, #14]
 800a34a:	2b04      	cmp	r3, #4
 800a34c:	f040 80d3 	bne.w	800a4f6 <USBH_HandleControl+0x2d2>
          phost->Control.state = CTRL_ERROR;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	220b      	movs	r2, #11
 800a354:	761a      	strb	r2, [r3, #24]
      break;
 800a356:	e0ce      	b.n	800a4f6 <USBH_HandleControl+0x2d2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	6899      	ldr	r1, [r3, #8]
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	899a      	ldrh	r2, [r3, #12]
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	795b      	ldrb	r3, [r3, #5]
 800a364:	2001      	movs	r0, #1
 800a366:	9000      	str	r0, [sp, #0]
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f000 f8eb 	bl	800a544 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a374:	b29a      	uxth	r2, r3
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2206      	movs	r2, #6
 800a37e:	761a      	strb	r2, [r3, #24]
      break;
 800a380:	e0c0      	b.n	800a504 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	795b      	ldrb	r3, [r3, #5]
 800a386:	4619      	mov	r1, r3
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	f000 fc4d 	bl	800ac28 <USBH_LL_GetURBState>
 800a38e:	4603      	mov	r3, r0
 800a390:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a392:	7bbb      	ldrb	r3, [r7, #14]
 800a394:	2b01      	cmp	r3, #1
 800a396:	d103      	bne.n	800a3a0 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2207      	movs	r2, #7
 800a39c:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800a39e:	e0ac      	b.n	800a4fa <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_STALL)
 800a3a0:	7bbb      	ldrb	r3, [r7, #14]
 800a3a2:	2b05      	cmp	r3, #5
 800a3a4:	d105      	bne.n	800a3b2 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	220c      	movs	r2, #12
 800a3aa:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a3ac:	2303      	movs	r3, #3
 800a3ae:	73fb      	strb	r3, [r7, #15]
      break;
 800a3b0:	e0a3      	b.n	800a4fa <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a3b2:	7bbb      	ldrb	r3, [r7, #14]
 800a3b4:	2b02      	cmp	r3, #2
 800a3b6:	d103      	bne.n	800a3c0 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2205      	movs	r2, #5
 800a3bc:	761a      	strb	r2, [r3, #24]
      break;
 800a3be:	e09c      	b.n	800a4fa <USBH_HandleControl+0x2d6>
        if (URB_Status == USBH_URB_ERROR)
 800a3c0:	7bbb      	ldrb	r3, [r7, #14]
 800a3c2:	2b04      	cmp	r3, #4
 800a3c4:	f040 8099 	bne.w	800a4fa <USBH_HandleControl+0x2d6>
          phost->Control.state = CTRL_ERROR;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	220b      	movs	r2, #11
 800a3cc:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a3ce:	2302      	movs	r3, #2
 800a3d0:	73fb      	strb	r3, [r7, #15]
      break;
 800a3d2:	e092      	b.n	800a4fa <USBH_HandleControl+0x2d6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	791b      	ldrb	r3, [r3, #4]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	2100      	movs	r1, #0
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f000 f8d6 	bl	800a58e <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a3e8:	b29a      	uxth	r2, r3
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2208      	movs	r2, #8
 800a3f2:	761a      	strb	r2, [r3, #24]

      break;
 800a3f4:	e086      	b.n	800a504 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	791b      	ldrb	r3, [r3, #4]
 800a3fa:	4619      	mov	r1, r3
 800a3fc:	6878      	ldr	r0, [r7, #4]
 800a3fe:	f000 fc13 	bl	800ac28 <USBH_LL_GetURBState>
 800a402:	4603      	mov	r3, r0
 800a404:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a406:	7bbb      	ldrb	r3, [r7, #14]
 800a408:	2b01      	cmp	r3, #1
 800a40a:	d105      	bne.n	800a418 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	220d      	movs	r2, #13
 800a410:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a412:	2300      	movs	r3, #0
 800a414:	73fb      	strb	r3, [r7, #15]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800a416:	e072      	b.n	800a4fe <USBH_HandleControl+0x2da>
      else if (URB_Status == USBH_URB_ERROR)
 800a418:	7bbb      	ldrb	r3, [r7, #14]
 800a41a:	2b04      	cmp	r3, #4
 800a41c:	d103      	bne.n	800a426 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	220b      	movs	r2, #11
 800a422:	761a      	strb	r2, [r3, #24]
      break;
 800a424:	e06b      	b.n	800a4fe <USBH_HandleControl+0x2da>
        if (URB_Status == USBH_URB_STALL)
 800a426:	7bbb      	ldrb	r3, [r7, #14]
 800a428:	2b05      	cmp	r3, #5
 800a42a:	d168      	bne.n	800a4fe <USBH_HandleControl+0x2da>
          status = USBH_NOT_SUPPORTED;
 800a42c:	2303      	movs	r3, #3
 800a42e:	73fb      	strb	r3, [r7, #15]
      break;
 800a430:	e065      	b.n	800a4fe <USBH_HandleControl+0x2da>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	795b      	ldrb	r3, [r3, #5]
 800a436:	2201      	movs	r2, #1
 800a438:	9200      	str	r2, [sp, #0]
 800a43a:	2200      	movs	r2, #0
 800a43c:	2100      	movs	r1, #0
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f000 f880 	bl	800a544 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a44a:	b29a      	uxth	r2, r3
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	220a      	movs	r2, #10
 800a454:	761a      	strb	r2, [r3, #24]
      break;
 800a456:	e055      	b.n	800a504 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	795b      	ldrb	r3, [r3, #5]
 800a45c:	4619      	mov	r1, r3
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f000 fbe2 	bl	800ac28 <USBH_LL_GetURBState>
 800a464:	4603      	mov	r3, r0
 800a466:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a468:	7bbb      	ldrb	r3, [r7, #14]
 800a46a:	2b01      	cmp	r3, #1
 800a46c:	d105      	bne.n	800a47a <USBH_HandleControl+0x256>
      {
        status = USBH_OK;
 800a46e:	2300      	movs	r3, #0
 800a470:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	220d      	movs	r2, #13
 800a476:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800a478:	e043      	b.n	800a502 <USBH_HandleControl+0x2de>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a47a:	7bbb      	ldrb	r3, [r7, #14]
 800a47c:	2b02      	cmp	r3, #2
 800a47e:	d103      	bne.n	800a488 <USBH_HandleControl+0x264>
        phost->Control.state = CTRL_STATUS_OUT;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2209      	movs	r2, #9
 800a484:	761a      	strb	r2, [r3, #24]
      break;
 800a486:	e03c      	b.n	800a502 <USBH_HandleControl+0x2de>
        if (URB_Status == USBH_URB_ERROR)
 800a488:	7bbb      	ldrb	r3, [r7, #14]
 800a48a:	2b04      	cmp	r3, #4
 800a48c:	d139      	bne.n	800a502 <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	220b      	movs	r2, #11
 800a492:	761a      	strb	r2, [r3, #24]
      break;
 800a494:	e035      	b.n	800a502 <USBH_HandleControl+0x2de>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	7e5b      	ldrb	r3, [r3, #25]
 800a49a:	3301      	adds	r3, #1
 800a49c:	b2da      	uxtb	r2, r3
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	765a      	strb	r2, [r3, #25]
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	7e5b      	ldrb	r3, [r3, #25]
 800a4a6:	2b02      	cmp	r3, #2
 800a4a8:	d806      	bhi.n	800a4b8 <USBH_HandleControl+0x294>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2201      	movs	r2, #1
 800a4ae:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2201      	movs	r2, #1
 800a4b4:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a4b6:	e025      	b.n	800a504 <USBH_HandleControl+0x2e0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a4be:	2106      	movs	r1, #6
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	795b      	ldrb	r3, [r3, #5]
 800a4ce:	4619      	mov	r1, r3
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	f000 f90d 	bl	800a6f0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	791b      	ldrb	r3, [r3, #4]
 800a4da:	4619      	mov	r1, r3
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f000 f907 	bl	800a6f0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a4e8:	2302      	movs	r3, #2
 800a4ea:	73fb      	strb	r3, [r7, #15]
      break;
 800a4ec:	e00a      	b.n	800a504 <USBH_HandleControl+0x2e0>

    default:
      break;
 800a4ee:	bf00      	nop
 800a4f0:	e008      	b.n	800a504 <USBH_HandleControl+0x2e0>
      break;
 800a4f2:	bf00      	nop
 800a4f4:	e006      	b.n	800a504 <USBH_HandleControl+0x2e0>
      break;
 800a4f6:	bf00      	nop
 800a4f8:	e004      	b.n	800a504 <USBH_HandleControl+0x2e0>
      break;
 800a4fa:	bf00      	nop
 800a4fc:	e002      	b.n	800a504 <USBH_HandleControl+0x2e0>
      break;
 800a4fe:	bf00      	nop
 800a500:	e000      	b.n	800a504 <USBH_HandleControl+0x2e0>
      break;
 800a502:	bf00      	nop
  }

  return status;
 800a504:	7bfb      	ldrb	r3, [r7, #15]
}
 800a506:	4618      	mov	r0, r3
 800a508:	3710      	adds	r7, #16
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}
 800a50e:	bf00      	nop

0800a510 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b088      	sub	sp, #32
 800a514:	af04      	add	r7, sp, #16
 800a516:	60f8      	str	r0, [r7, #12]
 800a518:	60b9      	str	r1, [r7, #8]
 800a51a:	4613      	mov	r3, r2
 800a51c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a51e:	79f9      	ldrb	r1, [r7, #7]
 800a520:	2300      	movs	r3, #0
 800a522:	9303      	str	r3, [sp, #12]
 800a524:	2308      	movs	r3, #8
 800a526:	9302      	str	r3, [sp, #8]
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	9301      	str	r3, [sp, #4]
 800a52c:	2300      	movs	r3, #0
 800a52e:	9300      	str	r3, [sp, #0]
 800a530:	2300      	movs	r3, #0
 800a532:	2200      	movs	r2, #0
 800a534:	68f8      	ldr	r0, [r7, #12]
 800a536:	f000 fb46 	bl	800abc6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a53a:	2300      	movs	r3, #0
}
 800a53c:	4618      	mov	r0, r3
 800a53e:	3710      	adds	r7, #16
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}

0800a544 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b088      	sub	sp, #32
 800a548:	af04      	add	r7, sp, #16
 800a54a:	60f8      	str	r0, [r7, #12]
 800a54c:	60b9      	str	r1, [r7, #8]
 800a54e:	4611      	mov	r1, r2
 800a550:	461a      	mov	r2, r3
 800a552:	460b      	mov	r3, r1
 800a554:	80fb      	strh	r3, [r7, #6]
 800a556:	4613      	mov	r3, r2
 800a558:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a560:	2b00      	cmp	r3, #0
 800a562:	d001      	beq.n	800a568 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a564:	2300      	movs	r3, #0
 800a566:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a568:	7979      	ldrb	r1, [r7, #5]
 800a56a:	7e3b      	ldrb	r3, [r7, #24]
 800a56c:	9303      	str	r3, [sp, #12]
 800a56e:	88fb      	ldrh	r3, [r7, #6]
 800a570:	9302      	str	r3, [sp, #8]
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	9301      	str	r3, [sp, #4]
 800a576:	2301      	movs	r3, #1
 800a578:	9300      	str	r3, [sp, #0]
 800a57a:	2300      	movs	r3, #0
 800a57c:	2200      	movs	r2, #0
 800a57e:	68f8      	ldr	r0, [r7, #12]
 800a580:	f000 fb21 	bl	800abc6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a584:	2300      	movs	r3, #0
}
 800a586:	4618      	mov	r0, r3
 800a588:	3710      	adds	r7, #16
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}

0800a58e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a58e:	b580      	push	{r7, lr}
 800a590:	b088      	sub	sp, #32
 800a592:	af04      	add	r7, sp, #16
 800a594:	60f8      	str	r0, [r7, #12]
 800a596:	60b9      	str	r1, [r7, #8]
 800a598:	4611      	mov	r1, r2
 800a59a:	461a      	mov	r2, r3
 800a59c:	460b      	mov	r3, r1
 800a59e:	80fb      	strh	r3, [r7, #6]
 800a5a0:	4613      	mov	r3, r2
 800a5a2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a5a4:	7979      	ldrb	r1, [r7, #5]
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	9303      	str	r3, [sp, #12]
 800a5aa:	88fb      	ldrh	r3, [r7, #6]
 800a5ac:	9302      	str	r3, [sp, #8]
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	9301      	str	r3, [sp, #4]
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	9300      	str	r3, [sp, #0]
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	2201      	movs	r2, #1
 800a5ba:	68f8      	ldr	r0, [r7, #12]
 800a5bc:	f000 fb03 	bl	800abc6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a5c0:	2300      	movs	r3, #0

}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3710      	adds	r7, #16
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}

0800a5ca <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a5ca:	b580      	push	{r7, lr}
 800a5cc:	b088      	sub	sp, #32
 800a5ce:	af04      	add	r7, sp, #16
 800a5d0:	60f8      	str	r0, [r7, #12]
 800a5d2:	60b9      	str	r1, [r7, #8]
 800a5d4:	4611      	mov	r1, r2
 800a5d6:	461a      	mov	r2, r3
 800a5d8:	460b      	mov	r3, r1
 800a5da:	80fb      	strh	r3, [r7, #6]
 800a5dc:	4613      	mov	r3, r2
 800a5de:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d001      	beq.n	800a5ee <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a5ee:	7979      	ldrb	r1, [r7, #5]
 800a5f0:	7e3b      	ldrb	r3, [r7, #24]
 800a5f2:	9303      	str	r3, [sp, #12]
 800a5f4:	88fb      	ldrh	r3, [r7, #6]
 800a5f6:	9302      	str	r3, [sp, #8]
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	9301      	str	r3, [sp, #4]
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	9300      	str	r3, [sp, #0]
 800a600:	2302      	movs	r3, #2
 800a602:	2200      	movs	r2, #0
 800a604:	68f8      	ldr	r0, [r7, #12]
 800a606:	f000 fade 	bl	800abc6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a60a:	2300      	movs	r3, #0
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3710      	adds	r7, #16
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}

0800a614 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b088      	sub	sp, #32
 800a618:	af04      	add	r7, sp, #16
 800a61a:	60f8      	str	r0, [r7, #12]
 800a61c:	60b9      	str	r1, [r7, #8]
 800a61e:	4611      	mov	r1, r2
 800a620:	461a      	mov	r2, r3
 800a622:	460b      	mov	r3, r1
 800a624:	80fb      	strh	r3, [r7, #6]
 800a626:	4613      	mov	r3, r2
 800a628:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a62a:	7979      	ldrb	r1, [r7, #5]
 800a62c:	2300      	movs	r3, #0
 800a62e:	9303      	str	r3, [sp, #12]
 800a630:	88fb      	ldrh	r3, [r7, #6]
 800a632:	9302      	str	r3, [sp, #8]
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	9301      	str	r3, [sp, #4]
 800a638:	2301      	movs	r3, #1
 800a63a:	9300      	str	r3, [sp, #0]
 800a63c:	2302      	movs	r3, #2
 800a63e:	2201      	movs	r2, #1
 800a640:	68f8      	ldr	r0, [r7, #12]
 800a642:	f000 fac0 	bl	800abc6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a646:	2300      	movs	r3, #0
}
 800a648:	4618      	mov	r0, r3
 800a64a:	3710      	adds	r7, #16
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}

0800a650 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b086      	sub	sp, #24
 800a654:	af04      	add	r7, sp, #16
 800a656:	6078      	str	r0, [r7, #4]
 800a658:	4608      	mov	r0, r1
 800a65a:	4611      	mov	r1, r2
 800a65c:	461a      	mov	r2, r3
 800a65e:	4603      	mov	r3, r0
 800a660:	70fb      	strb	r3, [r7, #3]
 800a662:	460b      	mov	r3, r1
 800a664:	70bb      	strb	r3, [r7, #2]
 800a666:	4613      	mov	r3, r2
 800a668:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a66a:	7878      	ldrb	r0, [r7, #1]
 800a66c:	78ba      	ldrb	r2, [r7, #2]
 800a66e:	78f9      	ldrb	r1, [r7, #3]
 800a670:	8b3b      	ldrh	r3, [r7, #24]
 800a672:	9302      	str	r3, [sp, #8]
 800a674:	7d3b      	ldrb	r3, [r7, #20]
 800a676:	9301      	str	r3, [sp, #4]
 800a678:	7c3b      	ldrb	r3, [r7, #16]
 800a67a:	9300      	str	r3, [sp, #0]
 800a67c:	4603      	mov	r3, r0
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f000 fa53 	bl	800ab2a <USBH_LL_OpenPipe>

  return USBH_OK;
 800a684:	2300      	movs	r3, #0
}
 800a686:	4618      	mov	r0, r3
 800a688:	3708      	adds	r7, #8
 800a68a:	46bd      	mov	sp, r7
 800a68c:	bd80      	pop	{r7, pc}

0800a68e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a68e:	b580      	push	{r7, lr}
 800a690:	b082      	sub	sp, #8
 800a692:	af00      	add	r7, sp, #0
 800a694:	6078      	str	r0, [r7, #4]
 800a696:	460b      	mov	r3, r1
 800a698:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a69a:	78fb      	ldrb	r3, [r7, #3]
 800a69c:	4619      	mov	r1, r3
 800a69e:	6878      	ldr	r0, [r7, #4]
 800a6a0:	f000 fa72 	bl	800ab88 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a6a4:	2300      	movs	r3, #0
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	3708      	adds	r7, #8
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}

0800a6ae <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a6ae:	b580      	push	{r7, lr}
 800a6b0:	b084      	sub	sp, #16
 800a6b2:	af00      	add	r7, sp, #0
 800a6b4:	6078      	str	r0, [r7, #4]
 800a6b6:	460b      	mov	r3, r1
 800a6b8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	f000 f836 	bl	800a72c <USBH_GetFreePipe>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a6c4:	89fb      	ldrh	r3, [r7, #14]
 800a6c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a6ca:	4293      	cmp	r3, r2
 800a6cc:	d00a      	beq.n	800a6e4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a6ce:	78fa      	ldrb	r2, [r7, #3]
 800a6d0:	89fb      	ldrh	r3, [r7, #14]
 800a6d2:	f003 030f 	and.w	r3, r3, #15
 800a6d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a6da:	6879      	ldr	r1, [r7, #4]
 800a6dc:	33e0      	adds	r3, #224	@ 0xe0
 800a6de:	009b      	lsls	r3, r3, #2
 800a6e0:	440b      	add	r3, r1
 800a6e2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a6e4:	89fb      	ldrh	r3, [r7, #14]
 800a6e6:	b2db      	uxtb	r3, r3
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	3710      	adds	r7, #16
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}

0800a6f0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b083      	sub	sp, #12
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
 800a6f8:	460b      	mov	r3, r1
 800a6fa:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a6fc:	78fb      	ldrb	r3, [r7, #3]
 800a6fe:	2b0f      	cmp	r3, #15
 800a700:	d80d      	bhi.n	800a71e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a702:	78fb      	ldrb	r3, [r7, #3]
 800a704:	687a      	ldr	r2, [r7, #4]
 800a706:	33e0      	adds	r3, #224	@ 0xe0
 800a708:	009b      	lsls	r3, r3, #2
 800a70a:	4413      	add	r3, r2
 800a70c:	685a      	ldr	r2, [r3, #4]
 800a70e:	78fb      	ldrb	r3, [r7, #3]
 800a710:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a714:	6879      	ldr	r1, [r7, #4]
 800a716:	33e0      	adds	r3, #224	@ 0xe0
 800a718:	009b      	lsls	r3, r3, #2
 800a71a:	440b      	add	r3, r1
 800a71c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a71e:	2300      	movs	r3, #0
}
 800a720:	4618      	mov	r0, r3
 800a722:	370c      	adds	r7, #12
 800a724:	46bd      	mov	sp, r7
 800a726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72a:	4770      	bx	lr

0800a72c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a72c:	b480      	push	{r7}
 800a72e:	b085      	sub	sp, #20
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a734:	2300      	movs	r3, #0
 800a736:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a738:	2300      	movs	r3, #0
 800a73a:	73fb      	strb	r3, [r7, #15]
 800a73c:	e00f      	b.n	800a75e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a73e:	7bfb      	ldrb	r3, [r7, #15]
 800a740:	687a      	ldr	r2, [r7, #4]
 800a742:	33e0      	adds	r3, #224	@ 0xe0
 800a744:	009b      	lsls	r3, r3, #2
 800a746:	4413      	add	r3, r2
 800a748:	685b      	ldr	r3, [r3, #4]
 800a74a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d102      	bne.n	800a758 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a752:	7bfb      	ldrb	r3, [r7, #15]
 800a754:	b29b      	uxth	r3, r3
 800a756:	e007      	b.n	800a768 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a758:	7bfb      	ldrb	r3, [r7, #15]
 800a75a:	3301      	adds	r3, #1
 800a75c:	73fb      	strb	r3, [r7, #15]
 800a75e:	7bfb      	ldrb	r3, [r7, #15]
 800a760:	2b0f      	cmp	r3, #15
 800a762:	d9ec      	bls.n	800a73e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a764:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800a768:	4618      	mov	r0, r3
 800a76a:	3714      	adds	r7, #20
 800a76c:	46bd      	mov	sp, r7
 800a76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a772:	4770      	bx	lr

0800a774 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a778:	2201      	movs	r2, #1
 800a77a:	490e      	ldr	r1, [pc, #56]	@ (800a7b4 <MX_USB_HOST_Init+0x40>)
 800a77c:	480e      	ldr	r0, [pc, #56]	@ (800a7b8 <MX_USB_HOST_Init+0x44>)
 800a77e:	f7fe fb0f 	bl	8008da0 <USBH_Init>
 800a782:	4603      	mov	r3, r0
 800a784:	2b00      	cmp	r3, #0
 800a786:	d001      	beq.n	800a78c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a788:	f7f6 fc6e 	bl	8001068 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a78c:	490b      	ldr	r1, [pc, #44]	@ (800a7bc <MX_USB_HOST_Init+0x48>)
 800a78e:	480a      	ldr	r0, [pc, #40]	@ (800a7b8 <MX_USB_HOST_Init+0x44>)
 800a790:	f7fe fbb1 	bl	8008ef6 <USBH_RegisterClass>
 800a794:	4603      	mov	r3, r0
 800a796:	2b00      	cmp	r3, #0
 800a798:	d001      	beq.n	800a79e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a79a:	f7f6 fc65 	bl	8001068 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a79e:	4806      	ldr	r0, [pc, #24]	@ (800a7b8 <MX_USB_HOST_Init+0x44>)
 800a7a0:	f7fe fc35 	bl	800900e <USBH_Start>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d001      	beq.n	800a7ae <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a7aa:	f7f6 fc5d 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a7ae:	bf00      	nop
 800a7b0:	bd80      	pop	{r7, pc}
 800a7b2:	bf00      	nop
 800a7b4:	0800a7d5 	.word	0x0800a7d5
 800a7b8:	20000430 	.word	0x20000430
 800a7bc:	2000001c 	.word	0x2000001c

0800a7c0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a7c4:	4802      	ldr	r0, [pc, #8]	@ (800a7d0 <MX_USB_HOST_Process+0x10>)
 800a7c6:	f7fe fc33 	bl	8009030 <USBH_Process>
}
 800a7ca:	bf00      	nop
 800a7cc:	bd80      	pop	{r7, pc}
 800a7ce:	bf00      	nop
 800a7d0:	20000430 	.word	0x20000430

0800a7d4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b083      	sub	sp, #12
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
 800a7dc:	460b      	mov	r3, r1
 800a7de:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a7e0:	78fb      	ldrb	r3, [r7, #3]
 800a7e2:	3b01      	subs	r3, #1
 800a7e4:	2b04      	cmp	r3, #4
 800a7e6:	d819      	bhi.n	800a81c <USBH_UserProcess+0x48>
 800a7e8:	a201      	add	r2, pc, #4	@ (adr r2, 800a7f0 <USBH_UserProcess+0x1c>)
 800a7ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7ee:	bf00      	nop
 800a7f0:	0800a81d 	.word	0x0800a81d
 800a7f4:	0800a80d 	.word	0x0800a80d
 800a7f8:	0800a81d 	.word	0x0800a81d
 800a7fc:	0800a815 	.word	0x0800a815
 800a800:	0800a805 	.word	0x0800a805
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a804:	4b09      	ldr	r3, [pc, #36]	@ (800a82c <USBH_UserProcess+0x58>)
 800a806:	2203      	movs	r2, #3
 800a808:	701a      	strb	r2, [r3, #0]
  break;
 800a80a:	e008      	b.n	800a81e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a80c:	4b07      	ldr	r3, [pc, #28]	@ (800a82c <USBH_UserProcess+0x58>)
 800a80e:	2202      	movs	r2, #2
 800a810:	701a      	strb	r2, [r3, #0]
  break;
 800a812:	e004      	b.n	800a81e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a814:	4b05      	ldr	r3, [pc, #20]	@ (800a82c <USBH_UserProcess+0x58>)
 800a816:	2201      	movs	r2, #1
 800a818:	701a      	strb	r2, [r3, #0]
  break;
 800a81a:	e000      	b.n	800a81e <USBH_UserProcess+0x4a>

  default:
  break;
 800a81c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a81e:	bf00      	nop
 800a820:	370c      	adds	r7, #12
 800a822:	46bd      	mov	sp, r7
 800a824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a828:	4770      	bx	lr
 800a82a:	bf00      	nop
 800a82c:	20000808 	.word	0x20000808

0800a830 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b08a      	sub	sp, #40	@ 0x28
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a838:	f107 0314 	add.w	r3, r7, #20
 800a83c:	2200      	movs	r2, #0
 800a83e:	601a      	str	r2, [r3, #0]
 800a840:	605a      	str	r2, [r3, #4]
 800a842:	609a      	str	r2, [r3, #8]
 800a844:	60da      	str	r2, [r3, #12]
 800a846:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a850:	d147      	bne.n	800a8e2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a852:	2300      	movs	r3, #0
 800a854:	613b      	str	r3, [r7, #16]
 800a856:	4b25      	ldr	r3, [pc, #148]	@ (800a8ec <HAL_HCD_MspInit+0xbc>)
 800a858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a85a:	4a24      	ldr	r2, [pc, #144]	@ (800a8ec <HAL_HCD_MspInit+0xbc>)
 800a85c:	f043 0301 	orr.w	r3, r3, #1
 800a860:	6313      	str	r3, [r2, #48]	@ 0x30
 800a862:	4b22      	ldr	r3, [pc, #136]	@ (800a8ec <HAL_HCD_MspInit+0xbc>)
 800a864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a866:	f003 0301 	and.w	r3, r3, #1
 800a86a:	613b      	str	r3, [r7, #16]
 800a86c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a86e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a872:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a874:	2300      	movs	r3, #0
 800a876:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a878:	2300      	movs	r3, #0
 800a87a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a87c:	f107 0314 	add.w	r3, r7, #20
 800a880:	4619      	mov	r1, r3
 800a882:	481b      	ldr	r0, [pc, #108]	@ (800a8f0 <HAL_HCD_MspInit+0xc0>)
 800a884:	f7f7 ffd2 	bl	800282c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a888:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800a88c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a88e:	2302      	movs	r3, #2
 800a890:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a892:	2300      	movs	r3, #0
 800a894:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a896:	2300      	movs	r3, #0
 800a898:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a89a:	230a      	movs	r3, #10
 800a89c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a89e:	f107 0314 	add.w	r3, r7, #20
 800a8a2:	4619      	mov	r1, r3
 800a8a4:	4812      	ldr	r0, [pc, #72]	@ (800a8f0 <HAL_HCD_MspInit+0xc0>)
 800a8a6:	f7f7 ffc1 	bl	800282c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a8aa:	4b10      	ldr	r3, [pc, #64]	@ (800a8ec <HAL_HCD_MspInit+0xbc>)
 800a8ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8ae:	4a0f      	ldr	r2, [pc, #60]	@ (800a8ec <HAL_HCD_MspInit+0xbc>)
 800a8b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a8b4:	6353      	str	r3, [r2, #52]	@ 0x34
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	60fb      	str	r3, [r7, #12]
 800a8ba:	4b0c      	ldr	r3, [pc, #48]	@ (800a8ec <HAL_HCD_MspInit+0xbc>)
 800a8bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a8be:	4a0b      	ldr	r2, [pc, #44]	@ (800a8ec <HAL_HCD_MspInit+0xbc>)
 800a8c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a8c4:	6453      	str	r3, [r2, #68]	@ 0x44
 800a8c6:	4b09      	ldr	r3, [pc, #36]	@ (800a8ec <HAL_HCD_MspInit+0xbc>)
 800a8c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a8ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a8ce:	60fb      	str	r3, [r7, #12]
 800a8d0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	2100      	movs	r1, #0
 800a8d6:	2043      	movs	r0, #67	@ 0x43
 800a8d8:	f7f7 fc01 	bl	80020de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a8dc:	2043      	movs	r0, #67	@ 0x43
 800a8de:	f7f7 fc1a 	bl	8002116 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a8e2:	bf00      	nop
 800a8e4:	3728      	adds	r7, #40	@ 0x28
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}
 800a8ea:	bf00      	nop
 800a8ec:	40023800 	.word	0x40023800
 800a8f0:	40020000 	.word	0x40020000

0800a8f4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b082      	sub	sp, #8
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a902:	4618      	mov	r0, r3
 800a904:	f7fe ff6d 	bl	80097e2 <USBH_LL_IncTimer>
}
 800a908:	bf00      	nop
 800a90a:	3708      	adds	r7, #8
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}

0800a910 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b082      	sub	sp, #8
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a91e:	4618      	mov	r0, r3
 800a920:	f7fe ffa9 	bl	8009876 <USBH_LL_Connect>
}
 800a924:	bf00      	nop
 800a926:	3708      	adds	r7, #8
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd80      	pop	{r7, pc}

0800a92c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b082      	sub	sp, #8
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a93a:	4618      	mov	r0, r3
 800a93c:	f7fe ffb2 	bl	80098a4 <USBH_LL_Disconnect>
}
 800a940:	bf00      	nop
 800a942:	3708      	adds	r7, #8
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}

0800a948 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a948:	b480      	push	{r7}
 800a94a:	b083      	sub	sp, #12
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
 800a950:	460b      	mov	r3, r1
 800a952:	70fb      	strb	r3, [r7, #3]
 800a954:	4613      	mov	r3, r2
 800a956:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a958:	bf00      	nop
 800a95a:	370c      	adds	r7, #12
 800a95c:	46bd      	mov	sp, r7
 800a95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a962:	4770      	bx	lr

0800a964 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b082      	sub	sp, #8
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a972:	4618      	mov	r0, r3
 800a974:	f7fe ff5f 	bl	8009836 <USBH_LL_PortEnabled>
}
 800a978:	bf00      	nop
 800a97a:	3708      	adds	r7, #8
 800a97c:	46bd      	mov	sp, r7
 800a97e:	bd80      	pop	{r7, pc}

0800a980 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b082      	sub	sp, #8
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a98e:	4618      	mov	r0, r3
 800a990:	f7fe ff5f 	bl	8009852 <USBH_LL_PortDisabled>
}
 800a994:	bf00      	nop
 800a996:	3708      	adds	r7, #8
 800a998:	46bd      	mov	sp, r7
 800a99a:	bd80      	pop	{r7, pc}

0800a99c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b082      	sub	sp, #8
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a9aa:	2b01      	cmp	r3, #1
 800a9ac:	d12a      	bne.n	800aa04 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a9ae:	4a18      	ldr	r2, [pc, #96]	@ (800aa10 <USBH_LL_Init+0x74>)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	4a15      	ldr	r2, [pc, #84]	@ (800aa10 <USBH_LL_Init+0x74>)
 800a9ba:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a9be:	4b14      	ldr	r3, [pc, #80]	@ (800aa10 <USBH_LL_Init+0x74>)
 800a9c0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a9c4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a9c6:	4b12      	ldr	r3, [pc, #72]	@ (800aa10 <USBH_LL_Init+0x74>)
 800a9c8:	2208      	movs	r2, #8
 800a9ca:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a9cc:	4b10      	ldr	r3, [pc, #64]	@ (800aa10 <USBH_LL_Init+0x74>)
 800a9ce:	2201      	movs	r2, #1
 800a9d0:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a9d2:	4b0f      	ldr	r3, [pc, #60]	@ (800aa10 <USBH_LL_Init+0x74>)
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a9d8:	4b0d      	ldr	r3, [pc, #52]	@ (800aa10 <USBH_LL_Init+0x74>)
 800a9da:	2202      	movs	r2, #2
 800a9dc:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a9de:	4b0c      	ldr	r3, [pc, #48]	@ (800aa10 <USBH_LL_Init+0x74>)
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a9e4:	480a      	ldr	r0, [pc, #40]	@ (800aa10 <USBH_LL_Init+0x74>)
 800a9e6:	f7f8 f8d6 	bl	8002b96 <HAL_HCD_Init>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d001      	beq.n	800a9f4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a9f0:	f7f6 fb3a 	bl	8001068 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a9f4:	4806      	ldr	r0, [pc, #24]	@ (800aa10 <USBH_LL_Init+0x74>)
 800a9f6:	f7f8 fd37 	bl	8003468 <HAL_HCD_GetCurrentFrame>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	4619      	mov	r1, r3
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	f7fe fee0 	bl	80097c4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800aa04:	2300      	movs	r3, #0
}
 800aa06:	4618      	mov	r0, r3
 800aa08:	3708      	adds	r7, #8
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd80      	pop	{r7, pc}
 800aa0e:	bf00      	nop
 800aa10:	2000080c 	.word	0x2000080c

0800aa14 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b084      	sub	sp, #16
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aa20:	2300      	movs	r3, #0
 800aa22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f7f8 fca4 	bl	8003378 <HAL_HCD_Start>
 800aa30:	4603      	mov	r3, r0
 800aa32:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800aa34:	7bfb      	ldrb	r3, [r7, #15]
 800aa36:	4618      	mov	r0, r3
 800aa38:	f000 f95e 	bl	800acf8 <USBH_Get_USB_Status>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa40:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	3710      	adds	r7, #16
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}

0800aa4a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800aa4a:	b580      	push	{r7, lr}
 800aa4c:	b084      	sub	sp, #16
 800aa4e:	af00      	add	r7, sp, #0
 800aa50:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa52:	2300      	movs	r3, #0
 800aa54:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aa56:	2300      	movs	r3, #0
 800aa58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800aa60:	4618      	mov	r0, r3
 800aa62:	f7f8 fcac 	bl	80033be <HAL_HCD_Stop>
 800aa66:	4603      	mov	r3, r0
 800aa68:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800aa6a:	7bfb      	ldrb	r3, [r7, #15]
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f000 f943 	bl	800acf8 <USBH_Get_USB_Status>
 800aa72:	4603      	mov	r3, r0
 800aa74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa76:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa78:	4618      	mov	r0, r3
 800aa7a:	3710      	adds	r7, #16
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	bd80      	pop	{r7, pc}

0800aa80 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b084      	sub	sp, #16
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800aa88:	2301      	movs	r3, #1
 800aa8a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800aa92:	4618      	mov	r0, r3
 800aa94:	f7f8 fcf6 	bl	8003484 <HAL_HCD_GetCurrentSpeed>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	2b02      	cmp	r3, #2
 800aa9c:	d00c      	beq.n	800aab8 <USBH_LL_GetSpeed+0x38>
 800aa9e:	2b02      	cmp	r3, #2
 800aaa0:	d80d      	bhi.n	800aabe <USBH_LL_GetSpeed+0x3e>
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d002      	beq.n	800aaac <USBH_LL_GetSpeed+0x2c>
 800aaa6:	2b01      	cmp	r3, #1
 800aaa8:	d003      	beq.n	800aab2 <USBH_LL_GetSpeed+0x32>
 800aaaa:	e008      	b.n	800aabe <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800aaac:	2300      	movs	r3, #0
 800aaae:	73fb      	strb	r3, [r7, #15]
    break;
 800aab0:	e008      	b.n	800aac4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800aab2:	2301      	movs	r3, #1
 800aab4:	73fb      	strb	r3, [r7, #15]
    break;
 800aab6:	e005      	b.n	800aac4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800aab8:	2302      	movs	r3, #2
 800aaba:	73fb      	strb	r3, [r7, #15]
    break;
 800aabc:	e002      	b.n	800aac4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800aabe:	2301      	movs	r3, #1
 800aac0:	73fb      	strb	r3, [r7, #15]
    break;
 800aac2:	bf00      	nop
  }
  return  speed;
 800aac4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	3710      	adds	r7, #16
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}

0800aace <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800aace:	b580      	push	{r7, lr}
 800aad0:	b084      	sub	sp, #16
 800aad2:	af00      	add	r7, sp, #0
 800aad4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aad6:	2300      	movs	r3, #0
 800aad8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aada:	2300      	movs	r3, #0
 800aadc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800aae4:	4618      	mov	r0, r3
 800aae6:	f7f8 fc87 	bl	80033f8 <HAL_HCD_ResetPort>
 800aaea:	4603      	mov	r3, r0
 800aaec:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800aaee:	7bfb      	ldrb	r3, [r7, #15]
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	f000 f901 	bl	800acf8 <USBH_Get_USB_Status>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aafa:	7bbb      	ldrb	r3, [r7, #14]
}
 800aafc:	4618      	mov	r0, r3
 800aafe:	3710      	adds	r7, #16
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}

0800ab04 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b082      	sub	sp, #8
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
 800ab0c:	460b      	mov	r3, r1
 800ab0e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ab16:	78fa      	ldrb	r2, [r7, #3]
 800ab18:	4611      	mov	r1, r2
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f7f8 fc8f 	bl	800343e <HAL_HCD_HC_GetXferCount>
 800ab20:	4603      	mov	r3, r0
}
 800ab22:	4618      	mov	r0, r3
 800ab24:	3708      	adds	r7, #8
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bd80      	pop	{r7, pc}

0800ab2a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ab2a:	b590      	push	{r4, r7, lr}
 800ab2c:	b089      	sub	sp, #36	@ 0x24
 800ab2e:	af04      	add	r7, sp, #16
 800ab30:	6078      	str	r0, [r7, #4]
 800ab32:	4608      	mov	r0, r1
 800ab34:	4611      	mov	r1, r2
 800ab36:	461a      	mov	r2, r3
 800ab38:	4603      	mov	r3, r0
 800ab3a:	70fb      	strb	r3, [r7, #3]
 800ab3c:	460b      	mov	r3, r1
 800ab3e:	70bb      	strb	r3, [r7, #2]
 800ab40:	4613      	mov	r3, r2
 800ab42:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab44:	2300      	movs	r3, #0
 800ab46:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ab48:	2300      	movs	r3, #0
 800ab4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800ab52:	787c      	ldrb	r4, [r7, #1]
 800ab54:	78ba      	ldrb	r2, [r7, #2]
 800ab56:	78f9      	ldrb	r1, [r7, #3]
 800ab58:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ab5a:	9302      	str	r3, [sp, #8]
 800ab5c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ab60:	9301      	str	r3, [sp, #4]
 800ab62:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ab66:	9300      	str	r3, [sp, #0]
 800ab68:	4623      	mov	r3, r4
 800ab6a:	f7f8 f87b 	bl	8002c64 <HAL_HCD_HC_Init>
 800ab6e:	4603      	mov	r3, r0
 800ab70:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ab72:	7bfb      	ldrb	r3, [r7, #15]
 800ab74:	4618      	mov	r0, r3
 800ab76:	f000 f8bf 	bl	800acf8 <USBH_Get_USB_Status>
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab7e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab80:	4618      	mov	r0, r3
 800ab82:	3714      	adds	r7, #20
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd90      	pop	{r4, r7, pc}

0800ab88 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b084      	sub	sp, #16
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
 800ab90:	460b      	mov	r3, r1
 800ab92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab94:	2300      	movs	r3, #0
 800ab96:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ab98:	2300      	movs	r3, #0
 800ab9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800aba2:	78fa      	ldrb	r2, [r7, #3]
 800aba4:	4611      	mov	r1, r2
 800aba6:	4618      	mov	r0, r3
 800aba8:	f7f8 f914 	bl	8002dd4 <HAL_HCD_HC_Halt>
 800abac:	4603      	mov	r3, r0
 800abae:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800abb0:	7bfb      	ldrb	r3, [r7, #15]
 800abb2:	4618      	mov	r0, r3
 800abb4:	f000 f8a0 	bl	800acf8 <USBH_Get_USB_Status>
 800abb8:	4603      	mov	r3, r0
 800abba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800abbc:	7bbb      	ldrb	r3, [r7, #14]
}
 800abbe:	4618      	mov	r0, r3
 800abc0:	3710      	adds	r7, #16
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd80      	pop	{r7, pc}

0800abc6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800abc6:	b590      	push	{r4, r7, lr}
 800abc8:	b089      	sub	sp, #36	@ 0x24
 800abca:	af04      	add	r7, sp, #16
 800abcc:	6078      	str	r0, [r7, #4]
 800abce:	4608      	mov	r0, r1
 800abd0:	4611      	mov	r1, r2
 800abd2:	461a      	mov	r2, r3
 800abd4:	4603      	mov	r3, r0
 800abd6:	70fb      	strb	r3, [r7, #3]
 800abd8:	460b      	mov	r3, r1
 800abda:	70bb      	strb	r3, [r7, #2]
 800abdc:	4613      	mov	r3, r2
 800abde:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abe0:	2300      	movs	r3, #0
 800abe2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800abe4:	2300      	movs	r3, #0
 800abe6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800abee:	787c      	ldrb	r4, [r7, #1]
 800abf0:	78ba      	ldrb	r2, [r7, #2]
 800abf2:	78f9      	ldrb	r1, [r7, #3]
 800abf4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800abf8:	9303      	str	r3, [sp, #12]
 800abfa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800abfc:	9302      	str	r3, [sp, #8]
 800abfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac00:	9301      	str	r3, [sp, #4]
 800ac02:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ac06:	9300      	str	r3, [sp, #0]
 800ac08:	4623      	mov	r3, r4
 800ac0a:	f7f8 f907 	bl	8002e1c <HAL_HCD_HC_SubmitRequest>
 800ac0e:	4603      	mov	r3, r0
 800ac10:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800ac12:	7bfb      	ldrb	r3, [r7, #15]
 800ac14:	4618      	mov	r0, r3
 800ac16:	f000 f86f 	bl	800acf8 <USBH_Get_USB_Status>
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac1e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac20:	4618      	mov	r0, r3
 800ac22:	3714      	adds	r7, #20
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd90      	pop	{r4, r7, pc}

0800ac28 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b082      	sub	sp, #8
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
 800ac30:	460b      	mov	r3, r1
 800ac32:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ac3a:	78fa      	ldrb	r2, [r7, #3]
 800ac3c:	4611      	mov	r1, r2
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f7f8 fbe8 	bl	8003414 <HAL_HCD_HC_GetURBState>
 800ac44:	4603      	mov	r3, r0
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	3708      	adds	r7, #8
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}

0800ac4e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ac4e:	b580      	push	{r7, lr}
 800ac50:	b082      	sub	sp, #8
 800ac52:	af00      	add	r7, sp, #0
 800ac54:	6078      	str	r0, [r7, #4]
 800ac56:	460b      	mov	r3, r1
 800ac58:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800ac60:	2b01      	cmp	r3, #1
 800ac62:	d103      	bne.n	800ac6c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800ac64:	78fb      	ldrb	r3, [r7, #3]
 800ac66:	4618      	mov	r0, r3
 800ac68:	f000 f872 	bl	800ad50 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800ac6c:	20c8      	movs	r0, #200	@ 0xc8
 800ac6e:	f7f6 fd35 	bl	80016dc <HAL_Delay>
  return USBH_OK;
 800ac72:	2300      	movs	r3, #0
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	3708      	adds	r7, #8
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}

0800ac7c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800ac7c:	b480      	push	{r7}
 800ac7e:	b085      	sub	sp, #20
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
 800ac84:	460b      	mov	r3, r1
 800ac86:	70fb      	strb	r3, [r7, #3]
 800ac88:	4613      	mov	r3, r2
 800ac8a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ac92:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800ac94:	78fa      	ldrb	r2, [r7, #3]
 800ac96:	68f9      	ldr	r1, [r7, #12]
 800ac98:	4613      	mov	r3, r2
 800ac9a:	011b      	lsls	r3, r3, #4
 800ac9c:	1a9b      	subs	r3, r3, r2
 800ac9e:	009b      	lsls	r3, r3, #2
 800aca0:	440b      	add	r3, r1
 800aca2:	3317      	adds	r3, #23
 800aca4:	781b      	ldrb	r3, [r3, #0]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d00a      	beq.n	800acc0 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800acaa:	78fa      	ldrb	r2, [r7, #3]
 800acac:	68f9      	ldr	r1, [r7, #12]
 800acae:	4613      	mov	r3, r2
 800acb0:	011b      	lsls	r3, r3, #4
 800acb2:	1a9b      	subs	r3, r3, r2
 800acb4:	009b      	lsls	r3, r3, #2
 800acb6:	440b      	add	r3, r1
 800acb8:	333c      	adds	r3, #60	@ 0x3c
 800acba:	78ba      	ldrb	r2, [r7, #2]
 800acbc:	701a      	strb	r2, [r3, #0]
 800acbe:	e009      	b.n	800acd4 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800acc0:	78fa      	ldrb	r2, [r7, #3]
 800acc2:	68f9      	ldr	r1, [r7, #12]
 800acc4:	4613      	mov	r3, r2
 800acc6:	011b      	lsls	r3, r3, #4
 800acc8:	1a9b      	subs	r3, r3, r2
 800acca:	009b      	lsls	r3, r3, #2
 800accc:	440b      	add	r3, r1
 800acce:	333d      	adds	r3, #61	@ 0x3d
 800acd0:	78ba      	ldrb	r2, [r7, #2]
 800acd2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800acd4:	2300      	movs	r3, #0
}
 800acd6:	4618      	mov	r0, r3
 800acd8:	3714      	adds	r7, #20
 800acda:	46bd      	mov	sp, r7
 800acdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace0:	4770      	bx	lr

0800ace2 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800ace2:	b580      	push	{r7, lr}
 800ace4:	b082      	sub	sp, #8
 800ace6:	af00      	add	r7, sp, #0
 800ace8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f7f6 fcf6 	bl	80016dc <HAL_Delay>
}
 800acf0:	bf00      	nop
 800acf2:	3708      	adds	r7, #8
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}

0800acf8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800acf8:	b480      	push	{r7}
 800acfa:	b085      	sub	sp, #20
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	4603      	mov	r3, r0
 800ad00:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ad02:	2300      	movs	r3, #0
 800ad04:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ad06:	79fb      	ldrb	r3, [r7, #7]
 800ad08:	2b03      	cmp	r3, #3
 800ad0a:	d817      	bhi.n	800ad3c <USBH_Get_USB_Status+0x44>
 800ad0c:	a201      	add	r2, pc, #4	@ (adr r2, 800ad14 <USBH_Get_USB_Status+0x1c>)
 800ad0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad12:	bf00      	nop
 800ad14:	0800ad25 	.word	0x0800ad25
 800ad18:	0800ad2b 	.word	0x0800ad2b
 800ad1c:	0800ad31 	.word	0x0800ad31
 800ad20:	0800ad37 	.word	0x0800ad37
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800ad24:	2300      	movs	r3, #0
 800ad26:	73fb      	strb	r3, [r7, #15]
    break;
 800ad28:	e00b      	b.n	800ad42 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800ad2a:	2302      	movs	r3, #2
 800ad2c:	73fb      	strb	r3, [r7, #15]
    break;
 800ad2e:	e008      	b.n	800ad42 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800ad30:	2301      	movs	r3, #1
 800ad32:	73fb      	strb	r3, [r7, #15]
    break;
 800ad34:	e005      	b.n	800ad42 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ad36:	2302      	movs	r3, #2
 800ad38:	73fb      	strb	r3, [r7, #15]
    break;
 800ad3a:	e002      	b.n	800ad42 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800ad3c:	2302      	movs	r3, #2
 800ad3e:	73fb      	strb	r3, [r7, #15]
    break;
 800ad40:	bf00      	nop
  }
  return usb_status;
 800ad42:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	3714      	adds	r7, #20
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4e:	4770      	bx	lr

0800ad50 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b084      	sub	sp, #16
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	4603      	mov	r3, r0
 800ad58:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800ad5a:	79fb      	ldrb	r3, [r7, #7]
 800ad5c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800ad5e:	79fb      	ldrb	r3, [r7, #7]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d102      	bne.n	800ad6a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800ad64:	2300      	movs	r3, #0
 800ad66:	73fb      	strb	r3, [r7, #15]
 800ad68:	e001      	b.n	800ad6e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800ad6e:	7bfb      	ldrb	r3, [r7, #15]
 800ad70:	461a      	mov	r2, r3
 800ad72:	2101      	movs	r1, #1
 800ad74:	4803      	ldr	r0, [pc, #12]	@ (800ad84 <MX_DriverVbusFS+0x34>)
 800ad76:	f7f7 fef5 	bl	8002b64 <HAL_GPIO_WritePin>
}
 800ad7a:	bf00      	nop
 800ad7c:	3710      	adds	r7, #16
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bd80      	pop	{r7, pc}
 800ad82:	bf00      	nop
 800ad84:	40020800 	.word	0x40020800

0800ad88 <malloc>:
 800ad88:	4b02      	ldr	r3, [pc, #8]	@ (800ad94 <malloc+0xc>)
 800ad8a:	4601      	mov	r1, r0
 800ad8c:	6818      	ldr	r0, [r3, #0]
 800ad8e:	f000 b82d 	b.w	800adec <_malloc_r>
 800ad92:	bf00      	nop
 800ad94:	2000003c 	.word	0x2000003c

0800ad98 <free>:
 800ad98:	4b02      	ldr	r3, [pc, #8]	@ (800ada4 <free+0xc>)
 800ad9a:	4601      	mov	r1, r0
 800ad9c:	6818      	ldr	r0, [r3, #0]
 800ad9e:	f000 b8f5 	b.w	800af8c <_free_r>
 800ada2:	bf00      	nop
 800ada4:	2000003c 	.word	0x2000003c

0800ada8 <sbrk_aligned>:
 800ada8:	b570      	push	{r4, r5, r6, lr}
 800adaa:	4e0f      	ldr	r6, [pc, #60]	@ (800ade8 <sbrk_aligned+0x40>)
 800adac:	460c      	mov	r4, r1
 800adae:	6831      	ldr	r1, [r6, #0]
 800adb0:	4605      	mov	r5, r0
 800adb2:	b911      	cbnz	r1, 800adba <sbrk_aligned+0x12>
 800adb4:	f000 f8ae 	bl	800af14 <_sbrk_r>
 800adb8:	6030      	str	r0, [r6, #0]
 800adba:	4621      	mov	r1, r4
 800adbc:	4628      	mov	r0, r5
 800adbe:	f000 f8a9 	bl	800af14 <_sbrk_r>
 800adc2:	1c43      	adds	r3, r0, #1
 800adc4:	d103      	bne.n	800adce <sbrk_aligned+0x26>
 800adc6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800adca:	4620      	mov	r0, r4
 800adcc:	bd70      	pop	{r4, r5, r6, pc}
 800adce:	1cc4      	adds	r4, r0, #3
 800add0:	f024 0403 	bic.w	r4, r4, #3
 800add4:	42a0      	cmp	r0, r4
 800add6:	d0f8      	beq.n	800adca <sbrk_aligned+0x22>
 800add8:	1a21      	subs	r1, r4, r0
 800adda:	4628      	mov	r0, r5
 800addc:	f000 f89a 	bl	800af14 <_sbrk_r>
 800ade0:	3001      	adds	r0, #1
 800ade2:	d1f2      	bne.n	800adca <sbrk_aligned+0x22>
 800ade4:	e7ef      	b.n	800adc6 <sbrk_aligned+0x1e>
 800ade6:	bf00      	nop
 800ade8:	20000bec 	.word	0x20000bec

0800adec <_malloc_r>:
 800adec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adf0:	1ccd      	adds	r5, r1, #3
 800adf2:	f025 0503 	bic.w	r5, r5, #3
 800adf6:	3508      	adds	r5, #8
 800adf8:	2d0c      	cmp	r5, #12
 800adfa:	bf38      	it	cc
 800adfc:	250c      	movcc	r5, #12
 800adfe:	2d00      	cmp	r5, #0
 800ae00:	4606      	mov	r6, r0
 800ae02:	db01      	blt.n	800ae08 <_malloc_r+0x1c>
 800ae04:	42a9      	cmp	r1, r5
 800ae06:	d904      	bls.n	800ae12 <_malloc_r+0x26>
 800ae08:	230c      	movs	r3, #12
 800ae0a:	6033      	str	r3, [r6, #0]
 800ae0c:	2000      	movs	r0, #0
 800ae0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aee8 <_malloc_r+0xfc>
 800ae16:	f000 f869 	bl	800aeec <__malloc_lock>
 800ae1a:	f8d8 3000 	ldr.w	r3, [r8]
 800ae1e:	461c      	mov	r4, r3
 800ae20:	bb44      	cbnz	r4, 800ae74 <_malloc_r+0x88>
 800ae22:	4629      	mov	r1, r5
 800ae24:	4630      	mov	r0, r6
 800ae26:	f7ff ffbf 	bl	800ada8 <sbrk_aligned>
 800ae2a:	1c43      	adds	r3, r0, #1
 800ae2c:	4604      	mov	r4, r0
 800ae2e:	d158      	bne.n	800aee2 <_malloc_r+0xf6>
 800ae30:	f8d8 4000 	ldr.w	r4, [r8]
 800ae34:	4627      	mov	r7, r4
 800ae36:	2f00      	cmp	r7, #0
 800ae38:	d143      	bne.n	800aec2 <_malloc_r+0xd6>
 800ae3a:	2c00      	cmp	r4, #0
 800ae3c:	d04b      	beq.n	800aed6 <_malloc_r+0xea>
 800ae3e:	6823      	ldr	r3, [r4, #0]
 800ae40:	4639      	mov	r1, r7
 800ae42:	4630      	mov	r0, r6
 800ae44:	eb04 0903 	add.w	r9, r4, r3
 800ae48:	f000 f864 	bl	800af14 <_sbrk_r>
 800ae4c:	4581      	cmp	r9, r0
 800ae4e:	d142      	bne.n	800aed6 <_malloc_r+0xea>
 800ae50:	6821      	ldr	r1, [r4, #0]
 800ae52:	1a6d      	subs	r5, r5, r1
 800ae54:	4629      	mov	r1, r5
 800ae56:	4630      	mov	r0, r6
 800ae58:	f7ff ffa6 	bl	800ada8 <sbrk_aligned>
 800ae5c:	3001      	adds	r0, #1
 800ae5e:	d03a      	beq.n	800aed6 <_malloc_r+0xea>
 800ae60:	6823      	ldr	r3, [r4, #0]
 800ae62:	442b      	add	r3, r5
 800ae64:	6023      	str	r3, [r4, #0]
 800ae66:	f8d8 3000 	ldr.w	r3, [r8]
 800ae6a:	685a      	ldr	r2, [r3, #4]
 800ae6c:	bb62      	cbnz	r2, 800aec8 <_malloc_r+0xdc>
 800ae6e:	f8c8 7000 	str.w	r7, [r8]
 800ae72:	e00f      	b.n	800ae94 <_malloc_r+0xa8>
 800ae74:	6822      	ldr	r2, [r4, #0]
 800ae76:	1b52      	subs	r2, r2, r5
 800ae78:	d420      	bmi.n	800aebc <_malloc_r+0xd0>
 800ae7a:	2a0b      	cmp	r2, #11
 800ae7c:	d917      	bls.n	800aeae <_malloc_r+0xc2>
 800ae7e:	1961      	adds	r1, r4, r5
 800ae80:	42a3      	cmp	r3, r4
 800ae82:	6025      	str	r5, [r4, #0]
 800ae84:	bf18      	it	ne
 800ae86:	6059      	strne	r1, [r3, #4]
 800ae88:	6863      	ldr	r3, [r4, #4]
 800ae8a:	bf08      	it	eq
 800ae8c:	f8c8 1000 	streq.w	r1, [r8]
 800ae90:	5162      	str	r2, [r4, r5]
 800ae92:	604b      	str	r3, [r1, #4]
 800ae94:	4630      	mov	r0, r6
 800ae96:	f000 f82f 	bl	800aef8 <__malloc_unlock>
 800ae9a:	f104 000b 	add.w	r0, r4, #11
 800ae9e:	1d23      	adds	r3, r4, #4
 800aea0:	f020 0007 	bic.w	r0, r0, #7
 800aea4:	1ac2      	subs	r2, r0, r3
 800aea6:	bf1c      	itt	ne
 800aea8:	1a1b      	subne	r3, r3, r0
 800aeaa:	50a3      	strne	r3, [r4, r2]
 800aeac:	e7af      	b.n	800ae0e <_malloc_r+0x22>
 800aeae:	6862      	ldr	r2, [r4, #4]
 800aeb0:	42a3      	cmp	r3, r4
 800aeb2:	bf0c      	ite	eq
 800aeb4:	f8c8 2000 	streq.w	r2, [r8]
 800aeb8:	605a      	strne	r2, [r3, #4]
 800aeba:	e7eb      	b.n	800ae94 <_malloc_r+0xa8>
 800aebc:	4623      	mov	r3, r4
 800aebe:	6864      	ldr	r4, [r4, #4]
 800aec0:	e7ae      	b.n	800ae20 <_malloc_r+0x34>
 800aec2:	463c      	mov	r4, r7
 800aec4:	687f      	ldr	r7, [r7, #4]
 800aec6:	e7b6      	b.n	800ae36 <_malloc_r+0x4a>
 800aec8:	461a      	mov	r2, r3
 800aeca:	685b      	ldr	r3, [r3, #4]
 800aecc:	42a3      	cmp	r3, r4
 800aece:	d1fb      	bne.n	800aec8 <_malloc_r+0xdc>
 800aed0:	2300      	movs	r3, #0
 800aed2:	6053      	str	r3, [r2, #4]
 800aed4:	e7de      	b.n	800ae94 <_malloc_r+0xa8>
 800aed6:	230c      	movs	r3, #12
 800aed8:	6033      	str	r3, [r6, #0]
 800aeda:	4630      	mov	r0, r6
 800aedc:	f000 f80c 	bl	800aef8 <__malloc_unlock>
 800aee0:	e794      	b.n	800ae0c <_malloc_r+0x20>
 800aee2:	6005      	str	r5, [r0, #0]
 800aee4:	e7d6      	b.n	800ae94 <_malloc_r+0xa8>
 800aee6:	bf00      	nop
 800aee8:	20000bf0 	.word	0x20000bf0

0800aeec <__malloc_lock>:
 800aeec:	4801      	ldr	r0, [pc, #4]	@ (800aef4 <__malloc_lock+0x8>)
 800aeee:	f000 b84b 	b.w	800af88 <__retarget_lock_acquire_recursive>
 800aef2:	bf00      	nop
 800aef4:	20000d2c 	.word	0x20000d2c

0800aef8 <__malloc_unlock>:
 800aef8:	4801      	ldr	r0, [pc, #4]	@ (800af00 <__malloc_unlock+0x8>)
 800aefa:	f000 b846 	b.w	800af8a <__retarget_lock_release_recursive>
 800aefe:	bf00      	nop
 800af00:	20000d2c 	.word	0x20000d2c

0800af04 <memset>:
 800af04:	4402      	add	r2, r0
 800af06:	4603      	mov	r3, r0
 800af08:	4293      	cmp	r3, r2
 800af0a:	d100      	bne.n	800af0e <memset+0xa>
 800af0c:	4770      	bx	lr
 800af0e:	f803 1b01 	strb.w	r1, [r3], #1
 800af12:	e7f9      	b.n	800af08 <memset+0x4>

0800af14 <_sbrk_r>:
 800af14:	b538      	push	{r3, r4, r5, lr}
 800af16:	4d06      	ldr	r5, [pc, #24]	@ (800af30 <_sbrk_r+0x1c>)
 800af18:	2300      	movs	r3, #0
 800af1a:	4604      	mov	r4, r0
 800af1c:	4608      	mov	r0, r1
 800af1e:	602b      	str	r3, [r5, #0]
 800af20:	f7f6 faf8 	bl	8001514 <_sbrk>
 800af24:	1c43      	adds	r3, r0, #1
 800af26:	d102      	bne.n	800af2e <_sbrk_r+0x1a>
 800af28:	682b      	ldr	r3, [r5, #0]
 800af2a:	b103      	cbz	r3, 800af2e <_sbrk_r+0x1a>
 800af2c:	6023      	str	r3, [r4, #0]
 800af2e:	bd38      	pop	{r3, r4, r5, pc}
 800af30:	20000d30 	.word	0x20000d30

0800af34 <__errno>:
 800af34:	4b01      	ldr	r3, [pc, #4]	@ (800af3c <__errno+0x8>)
 800af36:	6818      	ldr	r0, [r3, #0]
 800af38:	4770      	bx	lr
 800af3a:	bf00      	nop
 800af3c:	2000003c 	.word	0x2000003c

0800af40 <__libc_init_array>:
 800af40:	b570      	push	{r4, r5, r6, lr}
 800af42:	4d0d      	ldr	r5, [pc, #52]	@ (800af78 <__libc_init_array+0x38>)
 800af44:	4c0d      	ldr	r4, [pc, #52]	@ (800af7c <__libc_init_array+0x3c>)
 800af46:	1b64      	subs	r4, r4, r5
 800af48:	10a4      	asrs	r4, r4, #2
 800af4a:	2600      	movs	r6, #0
 800af4c:	42a6      	cmp	r6, r4
 800af4e:	d109      	bne.n	800af64 <__libc_init_array+0x24>
 800af50:	4d0b      	ldr	r5, [pc, #44]	@ (800af80 <__libc_init_array+0x40>)
 800af52:	4c0c      	ldr	r4, [pc, #48]	@ (800af84 <__libc_init_array+0x44>)
 800af54:	f000 f864 	bl	800b020 <_init>
 800af58:	1b64      	subs	r4, r4, r5
 800af5a:	10a4      	asrs	r4, r4, #2
 800af5c:	2600      	movs	r6, #0
 800af5e:	42a6      	cmp	r6, r4
 800af60:	d105      	bne.n	800af6e <__libc_init_array+0x2e>
 800af62:	bd70      	pop	{r4, r5, r6, pc}
 800af64:	f855 3b04 	ldr.w	r3, [r5], #4
 800af68:	4798      	blx	r3
 800af6a:	3601      	adds	r6, #1
 800af6c:	e7ee      	b.n	800af4c <__libc_init_array+0xc>
 800af6e:	f855 3b04 	ldr.w	r3, [r5], #4
 800af72:	4798      	blx	r3
 800af74:	3601      	adds	r6, #1
 800af76:	e7f2      	b.n	800af5e <__libc_init_array+0x1e>
 800af78:	0800b064 	.word	0x0800b064
 800af7c:	0800b064 	.word	0x0800b064
 800af80:	0800b064 	.word	0x0800b064
 800af84:	0800b068 	.word	0x0800b068

0800af88 <__retarget_lock_acquire_recursive>:
 800af88:	4770      	bx	lr

0800af8a <__retarget_lock_release_recursive>:
 800af8a:	4770      	bx	lr

0800af8c <_free_r>:
 800af8c:	b538      	push	{r3, r4, r5, lr}
 800af8e:	4605      	mov	r5, r0
 800af90:	2900      	cmp	r1, #0
 800af92:	d041      	beq.n	800b018 <_free_r+0x8c>
 800af94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af98:	1f0c      	subs	r4, r1, #4
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	bfb8      	it	lt
 800af9e:	18e4      	addlt	r4, r4, r3
 800afa0:	f7ff ffa4 	bl	800aeec <__malloc_lock>
 800afa4:	4a1d      	ldr	r2, [pc, #116]	@ (800b01c <_free_r+0x90>)
 800afa6:	6813      	ldr	r3, [r2, #0]
 800afa8:	b933      	cbnz	r3, 800afb8 <_free_r+0x2c>
 800afaa:	6063      	str	r3, [r4, #4]
 800afac:	6014      	str	r4, [r2, #0]
 800afae:	4628      	mov	r0, r5
 800afb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800afb4:	f7ff bfa0 	b.w	800aef8 <__malloc_unlock>
 800afb8:	42a3      	cmp	r3, r4
 800afba:	d908      	bls.n	800afce <_free_r+0x42>
 800afbc:	6820      	ldr	r0, [r4, #0]
 800afbe:	1821      	adds	r1, r4, r0
 800afc0:	428b      	cmp	r3, r1
 800afc2:	bf01      	itttt	eq
 800afc4:	6819      	ldreq	r1, [r3, #0]
 800afc6:	685b      	ldreq	r3, [r3, #4]
 800afc8:	1809      	addeq	r1, r1, r0
 800afca:	6021      	streq	r1, [r4, #0]
 800afcc:	e7ed      	b.n	800afaa <_free_r+0x1e>
 800afce:	461a      	mov	r2, r3
 800afd0:	685b      	ldr	r3, [r3, #4]
 800afd2:	b10b      	cbz	r3, 800afd8 <_free_r+0x4c>
 800afd4:	42a3      	cmp	r3, r4
 800afd6:	d9fa      	bls.n	800afce <_free_r+0x42>
 800afd8:	6811      	ldr	r1, [r2, #0]
 800afda:	1850      	adds	r0, r2, r1
 800afdc:	42a0      	cmp	r0, r4
 800afde:	d10b      	bne.n	800aff8 <_free_r+0x6c>
 800afe0:	6820      	ldr	r0, [r4, #0]
 800afe2:	4401      	add	r1, r0
 800afe4:	1850      	adds	r0, r2, r1
 800afe6:	4283      	cmp	r3, r0
 800afe8:	6011      	str	r1, [r2, #0]
 800afea:	d1e0      	bne.n	800afae <_free_r+0x22>
 800afec:	6818      	ldr	r0, [r3, #0]
 800afee:	685b      	ldr	r3, [r3, #4]
 800aff0:	6053      	str	r3, [r2, #4]
 800aff2:	4408      	add	r0, r1
 800aff4:	6010      	str	r0, [r2, #0]
 800aff6:	e7da      	b.n	800afae <_free_r+0x22>
 800aff8:	d902      	bls.n	800b000 <_free_r+0x74>
 800affa:	230c      	movs	r3, #12
 800affc:	602b      	str	r3, [r5, #0]
 800affe:	e7d6      	b.n	800afae <_free_r+0x22>
 800b000:	6820      	ldr	r0, [r4, #0]
 800b002:	1821      	adds	r1, r4, r0
 800b004:	428b      	cmp	r3, r1
 800b006:	bf04      	itt	eq
 800b008:	6819      	ldreq	r1, [r3, #0]
 800b00a:	685b      	ldreq	r3, [r3, #4]
 800b00c:	6063      	str	r3, [r4, #4]
 800b00e:	bf04      	itt	eq
 800b010:	1809      	addeq	r1, r1, r0
 800b012:	6021      	streq	r1, [r4, #0]
 800b014:	6054      	str	r4, [r2, #4]
 800b016:	e7ca      	b.n	800afae <_free_r+0x22>
 800b018:	bd38      	pop	{r3, r4, r5, pc}
 800b01a:	bf00      	nop
 800b01c:	20000bf0 	.word	0x20000bf0

0800b020 <_init>:
 800b020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b022:	bf00      	nop
 800b024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b026:	bc08      	pop	{r3}
 800b028:	469e      	mov	lr, r3
 800b02a:	4770      	bx	lr

0800b02c <_fini>:
 800b02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b02e:	bf00      	nop
 800b030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b032:	bc08      	pop	{r3}
 800b034:	469e      	mov	lr, r3
 800b036:	4770      	bx	lr
