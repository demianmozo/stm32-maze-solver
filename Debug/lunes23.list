
lunes23.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf84  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  0800c114  0800c114  0000d114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c198  0800c198  0000e098  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c198  0800c198  0000d198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c1a0  0800c1a0  0000e098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c1a0  0800c1a0  0000d1a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c1a4  0800c1a4  0000d1a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  0800c1a8  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e098  2**0
                  CONTENTS
 10 .bss          00000d5c  20000098  20000098  0000e098  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000df4  20000df4  0000e098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ea39  00000000  00000000  0000e0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004973  00000000  00000000  0002cb01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a08  00000000  00000000  00031478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001434  00000000  00000000  00032e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000273b1  00000000  00000000  000342b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023258  00000000  00000000  0005b665  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1f9f  00000000  00000000  0007e8bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0016085c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000732c  00000000  00000000  001608a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000003e  00000000  00000000  00167bcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c0fc 	.word	0x0800c0fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	0800c0fc 	.word	0x0800c0fc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <antirebote>:
/**
 * @brief Función genérica de antirebote para cualquier pin GPIO
 * @ingroup ANTIREBOTE
 */
bool antirebote(GPIO_TypeDef *puerto, uint16_t pin)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	460b      	mov	r3, r1
 80005b6:	807b      	strh	r3, [r7, #2]
        ultimas_lecturas[16]; // Para hasta 16 pines distintos uso un array, god
    static uint8_t inicializado[16] = {
        0}; // se inicializan en cero solo la 1era vez que llamas la funcion

    // Calcular el índice del pin a partir de la máscara (posición del bit)
    uint8_t index = 0;
 80005b8:	2300      	movs	r3, #0
 80005ba:	73fb      	strb	r3, [r7, #15]
    uint16_t mask = pin;
 80005bc:	887b      	ldrh	r3, [r7, #2]
 80005be:	81bb      	strh	r3, [r7, #12]
    while (mask > 1)
 80005c0:	e005      	b.n	80005ce <antirebote+0x22>
    {
        mask >>= 1; // Desplazar a la derecha el bit
 80005c2:	89bb      	ldrh	r3, [r7, #12]
 80005c4:	085b      	lsrs	r3, r3, #1
 80005c6:	81bb      	strh	r3, [r7, #12]
        index++;    // Contar cuántos desplazamientos hicimos
 80005c8:	7bfb      	ldrb	r3, [r7, #15]
 80005ca:	3301      	adds	r3, #1
 80005cc:	73fb      	strb	r3, [r7, #15]
    while (mask > 1)
 80005ce:	89bb      	ldrh	r3, [r7, #12]
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	d8f6      	bhi.n	80005c2 <antirebote+0x16>
    }

    GPIO_PinState lectura1, lectura2;
    bool pulsado = false;
 80005d4:	2300      	movs	r3, #0
 80005d6:	72fb      	strb	r3, [r7, #11]

    // Leer el estado actual del pin
    lectura1 =
        HAL_GPIO_ReadPin(puerto, pin); //  xq puerto es el puntero al pueertooo
 80005d8:	887b      	ldrh	r3, [r7, #2]
 80005da:	4619      	mov	r1, r3
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f003 f8ff 	bl	80037e0 <HAL_GPIO_ReadPin>
 80005e2:	4603      	mov	r3, r0
 80005e4:	72bb      	strb	r3, [r7, #10]

    // Si no se había inicializado antes, guardar lectura inicial y salir
    if (!inicializado[index])
 80005e6:	7bfb      	ldrb	r3, [r7, #15]
 80005e8:	4a17      	ldr	r2, [pc, #92]	@ (8000648 <antirebote+0x9c>)
 80005ea:	5cd3      	ldrb	r3, [r2, r3]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d109      	bne.n	8000604 <antirebote+0x58>
    { // se ejecuta solo la primera vez que se llama a
      // la función para ese pin.
        ultimas_lecturas[index] = lectura1;
 80005f0:	7bfb      	ldrb	r3, [r7, #15]
 80005f2:	4916      	ldr	r1, [pc, #88]	@ (800064c <antirebote+0xa0>)
 80005f4:	7aba      	ldrb	r2, [r7, #10]
 80005f6:	54ca      	strb	r2, [r1, r3]
        inicializado[index] = 1;
 80005f8:	7bfb      	ldrb	r3, [r7, #15]
 80005fa:	4a13      	ldr	r2, [pc, #76]	@ (8000648 <antirebote+0x9c>)
 80005fc:	2101      	movs	r1, #1
 80005fe:	54d1      	strb	r1, [r2, r3]
        return false;
 8000600:	2300      	movs	r3, #0
 8000602:	e01d      	b.n	8000640 <antirebote+0x94>
    }

    // Si detectamos un cambio respecto a la última lectura válida
    if (lectura1 != ultimas_lecturas[index])
 8000604:	7bfb      	ldrb	r3, [r7, #15]
 8000606:	4a11      	ldr	r2, [pc, #68]	@ (800064c <antirebote+0xa0>)
 8000608:	5cd3      	ldrb	r3, [r2, r3]
 800060a:	7aba      	ldrb	r2, [r7, #10]
 800060c:	429a      	cmp	r2, r3
 800060e:	d016      	beq.n	800063e <antirebote+0x92>
    {
        HAL_Delay(TREBOTES); // Esperar para filtrar rebotes
 8000610:	2032      	movs	r0, #50	@ 0x32
 8000612:	f001 fe6f 	bl	80022f4 <HAL_Delay>

        // Leer el pin otra vez para confirmar que la lectura es estable
        lectura2 = HAL_GPIO_ReadPin(puerto, pin);
 8000616:	887b      	ldrh	r3, [r7, #2]
 8000618:	4619      	mov	r1, r3
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f003 f8e0 	bl	80037e0 <HAL_GPIO_ReadPin>
 8000620:	4603      	mov	r3, r0
 8000622:	727b      	strb	r3, [r7, #9]

        // Si la segunda lectura coincide con la primera, es válida
        if (lectura1 == lectura2)
 8000624:	7aba      	ldrb	r2, [r7, #10]
 8000626:	7a7b      	ldrb	r3, [r7, #9]
 8000628:	429a      	cmp	r2, r3
 800062a:	d108      	bne.n	800063e <antirebote+0x92>
        {
            ultimas_lecturas[index] = lectura2; // Guardar lectura válida
 800062c:	7bfb      	ldrb	r3, [r7, #15]
 800062e:	4907      	ldr	r1, [pc, #28]	@ (800064c <antirebote+0xa0>)
 8000630:	7a7a      	ldrb	r2, [r7, #9]
 8000632:	54ca      	strb	r2, [r1, r3]

            // Detectar si el botón fue presionado (activo en bajo)
            if (lectura2 == GPIO_PIN_RESET)
 8000634:	7a7b      	ldrb	r3, [r7, #9]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d101      	bne.n	800063e <antirebote+0x92>
            {
                pulsado = true;
 800063a:	2301      	movs	r3, #1
 800063c:	72fb      	strb	r3, [r7, #11]
            }
        }
    }

    return pulsado;
 800063e:	7afb      	ldrb	r3, [r7, #11]
 8000640:	4618      	mov	r0, r3
 8000642:	3710      	adds	r7, #16
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	200000b4 	.word	0x200000b4
 800064c:	200000c4 	.word	0x200000c4

08000650 <HAL_ADC_ConvHalfCpltCallback>:

bool calibrado = false;

// Interrupciones DMA
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
    promediar_sensores(&dma_buffer[0]);
 8000658:	4803      	ldr	r0, [pc, #12]	@ (8000668 <HAL_ADC_ConvHalfCpltCallback+0x18>)
 800065a:	f000 f815 	bl	8000688 <promediar_sensores>
}
 800065e:	bf00      	nop
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000334 	.word	0x20000334

0800066c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
    promediar_sensores(&dma_buffer[BUFFER_MINIMO]);
 8000674:	4803      	ldr	r0, [pc, #12]	@ (8000684 <HAL_ADC_ConvCpltCallback+0x18>)
 8000676:	f000 f807 	bl	8000688 <promediar_sensores>
}
 800067a:	bf00      	nop
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	200003fc 	.word	0x200003fc

08000688 <promediar_sensores>:

// Función promediar se ejecuta constantemente en DMA
void promediar_sensores(uint16_t *buffer)
{
 8000688:	b480      	push	{r7}
 800068a:	b087      	sub	sp, #28
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
    uint32_t izq_sum = 0, der_sum = 0;
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]
 8000694:	2300      	movs	r3, #0
 8000696:	613b      	str	r3, [r7, #16]

    // Canal 8 (derecho), Canal 9 (izquierdo)
    for (int i = 0; i < MUESTRAS; ++i)
 8000698:	2300      	movs	r3, #0
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	e012      	b.n	80006c4 <promediar_sensores+0x3c>
    {
        der_sum += buffer[0]; // Canal 8 (PB0)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	881b      	ldrh	r3, [r3, #0]
 80006a2:	461a      	mov	r2, r3
 80006a4:	693b      	ldr	r3, [r7, #16]
 80006a6:	4413      	add	r3, r2
 80006a8:	613b      	str	r3, [r7, #16]
        izq_sum += buffer[1]; // Canal 9 (PB1)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	3302      	adds	r3, #2
 80006ae:	881b      	ldrh	r3, [r3, #0]
 80006b0:	461a      	mov	r2, r3
 80006b2:	697b      	ldr	r3, [r7, #20]
 80006b4:	4413      	add	r3, r2
 80006b6:	617b      	str	r3, [r7, #20]
        buffer += 2;          // Avanza 2 posiciones
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	3304      	adds	r3, #4
 80006bc:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < MUESTRAS; ++i)
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	3301      	adds	r3, #1
 80006c2:	60fb      	str	r3, [r7, #12]
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	2b13      	cmp	r3, #19
 80006c8:	dde9      	ble.n	800069e <promediar_sensores+0x16>
    }

    sensor_der_avg = der_sum / MUESTRAS;
 80006ca:	693b      	ldr	r3, [r7, #16]
 80006cc:	4a0a      	ldr	r2, [pc, #40]	@ (80006f8 <promediar_sensores+0x70>)
 80006ce:	fba2 2303 	umull	r2, r3, r2, r3
 80006d2:	091b      	lsrs	r3, r3, #4
 80006d4:	b29a      	uxth	r2, r3
 80006d6:	4b09      	ldr	r3, [pc, #36]	@ (80006fc <promediar_sensores+0x74>)
 80006d8:	801a      	strh	r2, [r3, #0]
    sensor_izq_avg = izq_sum / MUESTRAS;
 80006da:	697b      	ldr	r3, [r7, #20]
 80006dc:	4a06      	ldr	r2, [pc, #24]	@ (80006f8 <promediar_sensores+0x70>)
 80006de:	fba2 2303 	umull	r2, r3, r2, r3
 80006e2:	091b      	lsrs	r3, r3, #4
 80006e4:	b29a      	uxth	r2, r3
 80006e6:	4b06      	ldr	r3, [pc, #24]	@ (8000700 <promediar_sensores+0x78>)
 80006e8:	801a      	strh	r2, [r3, #0]
}
 80006ea:	bf00      	nop
 80006ec:	371c      	adds	r7, #28
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	cccccccd 	.word	0xcccccccd
 80006fc:	200000d6 	.word	0x200000d6
 8000700:	200000d4 	.word	0x200000d4

08000704 <auto_calibracion>:

// Auto-calibración
void auto_calibracion(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
    HAL_Delay(1000);
 8000708:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800070c:	f001 fdf2 	bl	80022f4 <HAL_Delay>

    // Medición 1: CERCA DE PARED DERECHA
    HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET); // Naranja
 8000710:	2201      	movs	r2, #1
 8000712:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000716:	4835      	ldr	r0, [pc, #212]	@ (80007ec <auto_calibracion+0xe8>)
 8000718:	f003 f87a 	bl	8003810 <HAL_GPIO_WritePin>
    HAL_Delay(3000);                                         // Tiempo para posicionar cerca de pared derecha
 800071c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000720:	f001 fde8 	bl	80022f4 <HAL_Delay>

    der_cerca = sensor_der_avg;
 8000724:	4b32      	ldr	r3, [pc, #200]	@ (80007f0 <auto_calibracion+0xec>)
 8000726:	881a      	ldrh	r2, [r3, #0]
 8000728:	4b32      	ldr	r3, [pc, #200]	@ (80007f4 <auto_calibracion+0xf0>)
 800072a:	801a      	strh	r2, [r3, #0]

    // Medición 2: CERCA DE PARED IZQUIERDA
    HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 800072c:	2200      	movs	r2, #0
 800072e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000732:	482e      	ldr	r0, [pc, #184]	@ (80007ec <auto_calibracion+0xe8>)
 8000734:	f003 f86c 	bl	8003810 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET); // Rojo
 8000738:	2201      	movs	r2, #1
 800073a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800073e:	482b      	ldr	r0, [pc, #172]	@ (80007ec <auto_calibracion+0xe8>)
 8000740:	f003 f866 	bl	8003810 <HAL_GPIO_WritePin>
    HAL_Delay(3000);                                         // Tiempo para posicionar cerca de pared izquierda
 8000744:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000748:	f001 fdd4 	bl	80022f4 <HAL_Delay>

    izq_cerca = sensor_izq_avg;
 800074c:	4b2a      	ldr	r3, [pc, #168]	@ (80007f8 <auto_calibracion+0xf4>)
 800074e:	881a      	ldrh	r2, [r3, #0]
 8000750:	4b2a      	ldr	r3, [pc, #168]	@ (80007fc <auto_calibracion+0xf8>)
 8000752:	801a      	strh	r2, [r3, #0]

    // Medición 3: CENTRADO EN PASILLO
    HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 8000754:	2200      	movs	r2, #0
 8000756:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800075a:	4824      	ldr	r0, [pc, #144]	@ (80007ec <auto_calibracion+0xe8>)
 800075c:	f003 f858 	bl	8003810 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_SET); // Azul
 8000760:	2201      	movs	r2, #1
 8000762:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000766:	4821      	ldr	r0, [pc, #132]	@ (80007ec <auto_calibracion+0xe8>)
 8000768:	f003 f852 	bl	8003810 <HAL_GPIO_WritePin>
    HAL_Delay(3000);                                         // Tiempo para centrar
 800076c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000770:	f001 fdc0 	bl	80022f4 <HAL_Delay>

    izq_lejos = sensor_izq_avg;
 8000774:	4b20      	ldr	r3, [pc, #128]	@ (80007f8 <auto_calibracion+0xf4>)
 8000776:	881a      	ldrh	r2, [r3, #0]
 8000778:	4b21      	ldr	r3, [pc, #132]	@ (8000800 <auto_calibracion+0xfc>)
 800077a:	801a      	strh	r2, [r3, #0]
    der_lejos = sensor_der_avg;
 800077c:	4b1c      	ldr	r3, [pc, #112]	@ (80007f0 <auto_calibracion+0xec>)
 800077e:	881a      	ldrh	r2, [r3, #0]
 8000780:	4b20      	ldr	r3, [pc, #128]	@ (8000804 <auto_calibracion+0x100>)
 8000782:	801a      	strh	r2, [r3, #0]

    // Calcular valores medios
    izq_centrado = (izq_cerca + izq_lejos) / 2;
 8000784:	4b1d      	ldr	r3, [pc, #116]	@ (80007fc <auto_calibracion+0xf8>)
 8000786:	881b      	ldrh	r3, [r3, #0]
 8000788:	461a      	mov	r2, r3
 800078a:	4b1d      	ldr	r3, [pc, #116]	@ (8000800 <auto_calibracion+0xfc>)
 800078c:	881b      	ldrh	r3, [r3, #0]
 800078e:	4413      	add	r3, r2
 8000790:	0fda      	lsrs	r2, r3, #31
 8000792:	4413      	add	r3, r2
 8000794:	105b      	asrs	r3, r3, #1
 8000796:	b29a      	uxth	r2, r3
 8000798:	4b1b      	ldr	r3, [pc, #108]	@ (8000808 <auto_calibracion+0x104>)
 800079a:	801a      	strh	r2, [r3, #0]
    der_centrado = (der_cerca + der_lejos) / 2;
 800079c:	4b15      	ldr	r3, [pc, #84]	@ (80007f4 <auto_calibracion+0xf0>)
 800079e:	881b      	ldrh	r3, [r3, #0]
 80007a0:	461a      	mov	r2, r3
 80007a2:	4b18      	ldr	r3, [pc, #96]	@ (8000804 <auto_calibracion+0x100>)
 80007a4:	881b      	ldrh	r3, [r3, #0]
 80007a6:	4413      	add	r3, r2
 80007a8:	0fda      	lsrs	r2, r3, #31
 80007aa:	4413      	add	r3, r2
 80007ac:	105b      	asrs	r3, r3, #1
 80007ae:	b29a      	uxth	r2, r3
 80007b0:	4b16      	ldr	r3, [pc, #88]	@ (800080c <auto_calibracion+0x108>)
 80007b2:	801a      	strh	r2, [r3, #0]

    // Calibración completa
    HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 80007b4:	2200      	movs	r2, #0
 80007b6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007ba:	480c      	ldr	r0, [pc, #48]	@ (80007ec <auto_calibracion+0xe8>)
 80007bc:	f003 f828 	bl	8003810 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET); // Verde
 80007c0:	2201      	movs	r2, #1
 80007c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007c6:	4809      	ldr	r0, [pc, #36]	@ (80007ec <auto_calibracion+0xe8>)
 80007c8:	f003 f822 	bl	8003810 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 80007cc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007d0:	f001 fd90 	bl	80022f4 <HAL_Delay>
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80007d4:	2200      	movs	r2, #0
 80007d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007da:	4804      	ldr	r0, [pc, #16]	@ (80007ec <auto_calibracion+0xe8>)
 80007dc:	f003 f818 	bl	8003810 <HAL_GPIO_WritePin>

    calibrado = true;
 80007e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000810 <auto_calibracion+0x10c>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	701a      	strb	r2, [r3, #0]
}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40020c00 	.word	0x40020c00
 80007f0:	200000d6 	.word	0x200000d6
 80007f4:	20000006 	.word	0x20000006
 80007f8:	200000d4 	.word	0x200000d4
 80007fc:	20000000 	.word	0x20000000
 8000800:	20000002 	.word	0x20000002
 8000804:	20000008 	.word	0x20000008
 8000808:	20000004 	.word	0x20000004
 800080c:	2000000a 	.word	0x2000000a
 8000810:	200000d8 	.word	0x200000d8

08000814 <controlar_linea_recta>:

// Control de línea recta
void controlar_linea_recta(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
    if (!calibrado)
 800081a:	4b29      	ldr	r3, [pc, #164]	@ (80008c0 <controlar_linea_recta+0xac>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	f083 0301 	eor.w	r3, r3, #1
 8000822:	b2db      	uxtb	r3, r3
 8000824:	2b00      	cmp	r3, #0
 8000826:	d140      	bne.n	80008aa <controlar_linea_recta+0x96>
        return;

    // Verificar flags AL INICIO
    if (flag_linea_detectada || flag_muro_detectado)
 8000828:	4b26      	ldr	r3, [pc, #152]	@ (80008c4 <controlar_linea_recta+0xb0>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	b2db      	uxtb	r3, r3
 800082e:	2b00      	cmp	r3, #0
 8000830:	d13d      	bne.n	80008ae <controlar_linea_recta+0x9a>
 8000832:	4b25      	ldr	r3, [pc, #148]	@ (80008c8 <controlar_linea_recta+0xb4>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	b2db      	uxtb	r3, r3
 8000838:	2b00      	cmp	r3, #0
 800083a:	d138      	bne.n	80008ae <controlar_linea_recta+0x9a>
        return;

    // Determinar posición relativa
    bool muy_cerca_izq = (sensor_izq_avg < izq_cerca + 3);
 800083c:	4b23      	ldr	r3, [pc, #140]	@ (80008cc <controlar_linea_recta+0xb8>)
 800083e:	881b      	ldrh	r3, [r3, #0]
 8000840:	3302      	adds	r3, #2
 8000842:	4a23      	ldr	r2, [pc, #140]	@ (80008d0 <controlar_linea_recta+0xbc>)
 8000844:	8812      	ldrh	r2, [r2, #0]
 8000846:	4293      	cmp	r3, r2
 8000848:	bfac      	ite	ge
 800084a:	2301      	movge	r3, #1
 800084c:	2300      	movlt	r3, #0
 800084e:	71fb      	strb	r3, [r7, #7]
    bool muy_cerca_der = (sensor_der_avg < der_cerca + 3);
 8000850:	4b20      	ldr	r3, [pc, #128]	@ (80008d4 <controlar_linea_recta+0xc0>)
 8000852:	881b      	ldrh	r3, [r3, #0]
 8000854:	3302      	adds	r3, #2
 8000856:	4a20      	ldr	r2, [pc, #128]	@ (80008d8 <controlar_linea_recta+0xc4>)
 8000858:	8812      	ldrh	r2, [r2, #0]
 800085a:	4293      	cmp	r3, r2
 800085c:	bfac      	ite	ge
 800085e:	2301      	movge	r3, #1
 8000860:	2300      	movlt	r3, #0
 8000862:	71bb      	strb	r3, [r7, #6]

    if (muy_cerca_izq)
 8000864:	79fb      	ldrb	r3, [r7, #7]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d00c      	beq.n	8000884 <controlar_linea_recta+0x70>
    {
        // Verificar flags durante ejecución
        if (flag_linea_detectada || flag_muro_detectado)
 800086a:	4b16      	ldr	r3, [pc, #88]	@ (80008c4 <controlar_linea_recta+0xb0>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	b2db      	uxtb	r3, r3
 8000870:	2b00      	cmp	r3, #0
 8000872:	d11e      	bne.n	80008b2 <controlar_linea_recta+0x9e>
 8000874:	4b14      	ldr	r3, [pc, #80]	@ (80008c8 <controlar_linea_recta+0xb4>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	b2db      	uxtb	r3, r3
 800087a:	2b00      	cmp	r3, #0
 800087c:	d119      	bne.n	80008b2 <controlar_linea_recta+0x9e>
        {
            return;
        }
        correccion_derecha(); // Alejarse de pared izquierda
 800087e:	f000 f9d5 	bl	8000c2c <correccion_derecha>
 8000882:	e019      	b.n	80008b8 <controlar_linea_recta+0xa4>
    }
    else if (muy_cerca_der)
 8000884:	79bb      	ldrb	r3, [r7, #6]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d00c      	beq.n	80008a4 <controlar_linea_recta+0x90>
    {
        // Verificar flags durante ejecución
        if (flag_linea_detectada || flag_muro_detectado)
 800088a:	4b0e      	ldr	r3, [pc, #56]	@ (80008c4 <controlar_linea_recta+0xb0>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	b2db      	uxtb	r3, r3
 8000890:	2b00      	cmp	r3, #0
 8000892:	d110      	bne.n	80008b6 <controlar_linea_recta+0xa2>
 8000894:	4b0c      	ldr	r3, [pc, #48]	@ (80008c8 <controlar_linea_recta+0xb4>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	b2db      	uxtb	r3, r3
 800089a:	2b00      	cmp	r3, #0
 800089c:	d10b      	bne.n	80008b6 <controlar_linea_recta+0xa2>
        {
            return;
        }
        correccion_izquierda(); // Alejarse de pared derecha
 800089e:	f000 f997 	bl	8000bd0 <correccion_izquierda>
 80008a2:	e009      	b.n	80008b8 <controlar_linea_recta+0xa4>
    }
    else
    {
        avanza(); // Ir recto si está centrado
 80008a4:	f000 f8c6 	bl	8000a34 <avanza>
 80008a8:	e006      	b.n	80008b8 <controlar_linea_recta+0xa4>
        return;
 80008aa:	bf00      	nop
 80008ac:	e004      	b.n	80008b8 <controlar_linea_recta+0xa4>
        return;
 80008ae:	bf00      	nop
 80008b0:	e002      	b.n	80008b8 <controlar_linea_recta+0xa4>
            return;
 80008b2:	bf00      	nop
 80008b4:	e000      	b.n	80008b8 <controlar_linea_recta+0xa4>
            return;
 80008b6:	bf00      	nop
    }
}
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	200000d8 	.word	0x200000d8
 80008c4:	200004c4 	.word	0x200004c4
 80008c8:	200004c5 	.word	0x200004c5
 80008cc:	20000000 	.word	0x20000000
 80008d0:	200000d4 	.word	0x200000d4
 80008d4:	20000006 	.word	0x20000006
 80008d8:	200000d6 	.word	0x200000d6

080008dc <activar_modo_sprint>:
uint16_t velocidad_actual_der = VELOCIDAD_AVANCE_DER;
uint16_t velocidad_giro_actual_izq = VELOCIDAD_GIRO_IZQ;
uint16_t velocidad_giro_actual_der = VELOCIDAD_GIRO_DER;

void activar_modo_sprint(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
    velocidad_actual_izq = VELOCIDAD_SPRINT_IZQ;
 80008e0:	4b06      	ldr	r3, [pc, #24]	@ (80008fc <activar_modo_sprint+0x20>)
 80008e2:	f44f 7261 	mov.w	r2, #900	@ 0x384
 80008e6:	801a      	strh	r2, [r3, #0]
    velocidad_actual_der = VELOCIDAD_SPRINT_DER;
 80008e8:	4b05      	ldr	r3, [pc, #20]	@ (8000900 <activar_modo_sprint+0x24>)
 80008ea:	f44f 7261 	mov.w	r2, #900	@ 0x384
 80008ee:	801a      	strh	r2, [r3, #0]
}
 80008f0:	bf00      	nop
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	2000000c 	.word	0x2000000c
 8000900:	2000000e 	.word	0x2000000e

08000904 <control_motor_init>:

/**
 * @brief Inicializa el control de motores
 */
void control_motor_init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
    // Iniciar PWM en ambos canales
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // Motor izquierdo (PC8)
 8000908:	2108      	movs	r1, #8
 800090a:	4805      	ldr	r0, [pc, #20]	@ (8000920 <control_motor_init+0x1c>)
 800090c:	f005 fff4 	bl	80068f8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // Motor derecho (PC9)
 8000910:	210c      	movs	r1, #12
 8000912:	4803      	ldr	r0, [pc, #12]	@ (8000920 <control_motor_init+0x1c>)
 8000914:	f005 fff0 	bl	80068f8 <HAL_TIM_PWM_Start>

    // comienza yendo para adelante
    avanza();
 8000918:	f000 f88c 	bl	8000a34 <avanza>
}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}
 8000920:	200002a0 	.word	0x200002a0

08000924 <set_motor_izq>:
 * @brief Configura motor izquierdo
 * @param estado: MOTOR_AVANCE, MOTOR_RETROCESO o MOTOR_FRENADO
 * @param pwm: Valor PWM (0-1000)
 */
void set_motor_izq(motor_estado_t estado, uint16_t pwm)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	460a      	mov	r2, r1
 800092e:	71fb      	strb	r3, [r7, #7]
 8000930:	4613      	mov	r3, r2
 8000932:	80bb      	strh	r3, [r7, #4]
    switch (estado)
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d002      	beq.n	8000940 <set_motor_izq+0x1c>
 800093a:	2b01      	cmp	r3, #1
 800093c:	d00d      	beq.n	800095a <set_motor_izq+0x36>
 800093e:	e019      	b.n	8000974 <set_motor_izq+0x50>
    {
    case MOTOR_AVANCE:
        HAL_GPIO_WritePin(MI0_GPIO_Port, MI0_Pin, GPIO_PIN_SET);   // MI0 = 1
 8000940:	2201      	movs	r2, #1
 8000942:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000946:	4817      	ldr	r0, [pc, #92]	@ (80009a4 <set_motor_izq+0x80>)
 8000948:	f002 ff62 	bl	8003810 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MI1_GPIO_Port, MI1_Pin, GPIO_PIN_RESET); // MI1 = 0
 800094c:	2200      	movs	r2, #0
 800094e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000952:	4814      	ldr	r0, [pc, #80]	@ (80009a4 <set_motor_izq+0x80>)
 8000954:	f002 ff5c 	bl	8003810 <HAL_GPIO_WritePin>
        break;
 8000958:	e01b      	b.n	8000992 <set_motor_izq+0x6e>

    case MOTOR_RETROCESO:
        HAL_GPIO_WritePin(MI0_GPIO_Port, MI0_Pin, GPIO_PIN_RESET); // MI0 = 0
 800095a:	2200      	movs	r2, #0
 800095c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000960:	4810      	ldr	r0, [pc, #64]	@ (80009a4 <set_motor_izq+0x80>)
 8000962:	f002 ff55 	bl	8003810 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MI1_GPIO_Port, MI1_Pin, GPIO_PIN_SET);   // MI1 = 1
 8000966:	2201      	movs	r2, #1
 8000968:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800096c:	480d      	ldr	r0, [pc, #52]	@ (80009a4 <set_motor_izq+0x80>)
 800096e:	f002 ff4f 	bl	8003810 <HAL_GPIO_WritePin>
        break;
 8000972:	e00e      	b.n	8000992 <set_motor_izq+0x6e>

    case MOTOR_FRENADO:
    default:
        HAL_GPIO_WritePin(MI0_GPIO_Port, MI0_Pin, GPIO_PIN_RESET); // MI0 = 0
 8000974:	2200      	movs	r2, #0
 8000976:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800097a:	480a      	ldr	r0, [pc, #40]	@ (80009a4 <set_motor_izq+0x80>)
 800097c:	f002 ff48 	bl	8003810 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MI1_GPIO_Port, MI1_Pin, GPIO_PIN_RESET); // MI1 = 0
 8000980:	2200      	movs	r2, #0
 8000982:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000986:	4807      	ldr	r0, [pc, #28]	@ (80009a4 <set_motor_izq+0x80>)
 8000988:	f002 ff42 	bl	8003810 <HAL_GPIO_WritePin>
        pwm = 0;                                                   // Forzar PWM a 0 en frenado
 800098c:	2300      	movs	r3, #0
 800098e:	80bb      	strh	r3, [r7, #4]
        break;
 8000990:	bf00      	nop
    }

    // Establecer PWM, aca le definimos la velocidad
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pwm);
 8000992:	4b05      	ldr	r3, [pc, #20]	@ (80009a8 <set_motor_izq+0x84>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	88ba      	ldrh	r2, [r7, #4]
 8000998:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40020400 	.word	0x40020400
 80009a8:	200002a0 	.word	0x200002a0

080009ac <set_motor_der>:
 * @brief Configura motor derecho
 * @param estado: MOTOR_AVANCE, MOTOR_RETROCESO o MOTOR_FRENADO
 * @param pwm: Valor PWM (0-1000)
 */
void set_motor_der(motor_estado_t estado, uint16_t pwm)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	460a      	mov	r2, r1
 80009b6:	71fb      	strb	r3, [r7, #7]
 80009b8:	4613      	mov	r3, r2
 80009ba:	80bb      	strh	r3, [r7, #4]
    switch (estado)
 80009bc:	79fb      	ldrb	r3, [r7, #7]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d002      	beq.n	80009c8 <set_motor_der+0x1c>
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d00d      	beq.n	80009e2 <set_motor_der+0x36>
 80009c6:	e019      	b.n	80009fc <set_motor_der+0x50>
    {
    case MOTOR_AVANCE:
        HAL_GPIO_WritePin(MD0_GPIO_Port, MD0_Pin, GPIO_PIN_SET);   // MD0 = 1
 80009c8:	2201      	movs	r2, #1
 80009ca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009ce:	4817      	ldr	r0, [pc, #92]	@ (8000a2c <set_motor_der+0x80>)
 80009d0:	f002 ff1e 	bl	8003810 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MD1_GPIO_Port, MD1_Pin, GPIO_PIN_RESET); // MD1 = 0
 80009d4:	2200      	movs	r2, #0
 80009d6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009da:	4814      	ldr	r0, [pc, #80]	@ (8000a2c <set_motor_der+0x80>)
 80009dc:	f002 ff18 	bl	8003810 <HAL_GPIO_WritePin>
        break;
 80009e0:	e01b      	b.n	8000a1a <set_motor_der+0x6e>

    case MOTOR_RETROCESO:
        HAL_GPIO_WritePin(MD0_GPIO_Port, MD0_Pin, GPIO_PIN_RESET); // MD0 = 0
 80009e2:	2200      	movs	r2, #0
 80009e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009e8:	4810      	ldr	r0, [pc, #64]	@ (8000a2c <set_motor_der+0x80>)
 80009ea:	f002 ff11 	bl	8003810 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MD1_GPIO_Port, MD1_Pin, GPIO_PIN_SET);   // MD1 = 1
 80009ee:	2201      	movs	r2, #1
 80009f0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009f4:	480d      	ldr	r0, [pc, #52]	@ (8000a2c <set_motor_der+0x80>)
 80009f6:	f002 ff0b 	bl	8003810 <HAL_GPIO_WritePin>
        break;
 80009fa:	e00e      	b.n	8000a1a <set_motor_der+0x6e>

    case MOTOR_FRENADO:
    default:
        HAL_GPIO_WritePin(MD0_GPIO_Port, MD0_Pin, GPIO_PIN_RESET); // MD0 = 0
 80009fc:	2200      	movs	r2, #0
 80009fe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a02:	480a      	ldr	r0, [pc, #40]	@ (8000a2c <set_motor_der+0x80>)
 8000a04:	f002 ff04 	bl	8003810 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MD1_GPIO_Port, MD1_Pin, GPIO_PIN_RESET); // MD1 = 0
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a0e:	4807      	ldr	r0, [pc, #28]	@ (8000a2c <set_motor_der+0x80>)
 8000a10:	f002 fefe 	bl	8003810 <HAL_GPIO_WritePin>
        pwm = 0;                                                   // Forzar PWM a 0 en frenado
 8000a14:	2300      	movs	r3, #0
 8000a16:	80bb      	strh	r3, [r7, #4]
        break;
 8000a18:	bf00      	nop
    }

    // Establecer VELOCIDAD
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, pwm);
 8000a1a:	4b05      	ldr	r3, [pc, #20]	@ (8000a30 <set_motor_der+0x84>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	88ba      	ldrh	r2, [r7, #4]
 8000a20:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40020400 	.word	0x40020400
 8000a30:	200002a0 	.word	0x200002a0

08000a34 <avanza>:

/**
 * @brief Avanza con ambos motores al 70% de velocidad
 */
void avanza(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
    set_motor_izq(MOTOR_AVANCE, velocidad_actual_izq);
 8000a38:	4b06      	ldr	r3, [pc, #24]	@ (8000a54 <avanza+0x20>)
 8000a3a:	881b      	ldrh	r3, [r3, #0]
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	2000      	movs	r0, #0
 8000a40:	f7ff ff70 	bl	8000924 <set_motor_izq>
    set_motor_der(MOTOR_AVANCE, velocidad_actual_der);
 8000a44:	4b04      	ldr	r3, [pc, #16]	@ (8000a58 <avanza+0x24>)
 8000a46:	881b      	ldrh	r3, [r3, #0]
 8000a48:	4619      	mov	r1, r3
 8000a4a:	2000      	movs	r0, #0
 8000a4c:	f7ff ffae 	bl	80009ac <set_motor_der>
}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	2000000c 	.word	0x2000000c
 8000a58:	2000000e 	.word	0x2000000e

08000a5c <gira90izq>:
/**
 * @brief Gira 90 grados a la izquierda y luego continúa avanzando
 * Motor izq retrocede, motor der avanza al 100%
 */
brujula gira90izq(brujula sentido)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	71fb      	strb	r3, [r7, #7]
    set_motor_izq(MOTOR_RETROCESO, velocidad_giro_actual_izq);
 8000a66:	4b18      	ldr	r3, [pc, #96]	@ (8000ac8 <gira90izq+0x6c>)
 8000a68:	881b      	ldrh	r3, [r3, #0]
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	2001      	movs	r0, #1
 8000a6e:	f7ff ff59 	bl	8000924 <set_motor_izq>
    set_motor_der(MOTOR_AVANCE, velocidad_giro_actual_der);
 8000a72:	4b16      	ldr	r3, [pc, #88]	@ (8000acc <gira90izq+0x70>)
 8000a74:	881b      	ldrh	r3, [r3, #0]
 8000a76:	4619      	mov	r1, r3
 8000a78:	2000      	movs	r0, #0
 8000a7a:	f7ff ff97 	bl	80009ac <set_motor_der>

    HAL_Delay(TIEMPO_GIRO_90);
 8000a7e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a82:	f001 fc37 	bl	80022f4 <HAL_Delay>
    switch (sentido)
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	2b03      	cmp	r3, #3
 8000a8a:	d817      	bhi.n	8000abc <gira90izq+0x60>
 8000a8c:	a201      	add	r2, pc, #4	@ (adr r2, 8000a94 <gira90izq+0x38>)
 8000a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a92:	bf00      	nop
 8000a94:	08000aa5 	.word	0x08000aa5
 8000a98:	08000aab 	.word	0x08000aab
 8000a9c:	08000ab1 	.word	0x08000ab1
 8000aa0:	08000ab7 	.word	0x08000ab7
    {
    case norte:
        sentido = oeste;
 8000aa4:	2303      	movs	r3, #3
 8000aa6:	71fb      	strb	r3, [r7, #7]
        break;
 8000aa8:	e008      	b.n	8000abc <gira90izq+0x60>

    case este:
        sentido = norte;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	71fb      	strb	r3, [r7, #7]
        break;
 8000aae:	e005      	b.n	8000abc <gira90izq+0x60>

    case sur:
        sentido = este;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	71fb      	strb	r3, [r7, #7]
        break;
 8000ab4:	e002      	b.n	8000abc <gira90izq+0x60>

    case oeste:
        sentido = sur;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	71fb      	strb	r3, [r7, #7]
        break;
 8000aba:	bf00      	nop
    }

    // Después del giro, continuar avanzando
    //avanza();
    return sentido;
 8000abc:	79fb      	ldrb	r3, [r7, #7]
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20000010 	.word	0x20000010
 8000acc:	20000012 	.word	0x20000012

08000ad0 <gira90der>:
/**
 * @brief Gira 90 grados a la derecha y luego continúa avanzando
 * Motor der retrocede, motor izq avanza al 100%
 */
brujula gira90der(brujula sentido)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	71fb      	strb	r3, [r7, #7]
    set_motor_izq(MOTOR_AVANCE, velocidad_giro_actual_izq);
 8000ada:	4b18      	ldr	r3, [pc, #96]	@ (8000b3c <gira90der+0x6c>)
 8000adc:	881b      	ldrh	r3, [r3, #0]
 8000ade:	4619      	mov	r1, r3
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	f7ff ff1f 	bl	8000924 <set_motor_izq>
    set_motor_der(MOTOR_RETROCESO, velocidad_giro_actual_der);
 8000ae6:	4b16      	ldr	r3, [pc, #88]	@ (8000b40 <gira90der+0x70>)
 8000ae8:	881b      	ldrh	r3, [r3, #0]
 8000aea:	4619      	mov	r1, r3
 8000aec:	2001      	movs	r0, #1
 8000aee:	f7ff ff5d 	bl	80009ac <set_motor_der>

    HAL_Delay(TIEMPO_GIRO_90);
 8000af2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000af6:	f001 fbfd 	bl	80022f4 <HAL_Delay>
    switch (sentido)
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	2b03      	cmp	r3, #3
 8000afe:	d817      	bhi.n	8000b30 <gira90der+0x60>
 8000b00:	a201      	add	r2, pc, #4	@ (adr r2, 8000b08 <gira90der+0x38>)
 8000b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b06:	bf00      	nop
 8000b08:	08000b19 	.word	0x08000b19
 8000b0c:	08000b1f 	.word	0x08000b1f
 8000b10:	08000b25 	.word	0x08000b25
 8000b14:	08000b2b 	.word	0x08000b2b
    {
    case norte:
        sentido = este;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	71fb      	strb	r3, [r7, #7]
        break;
 8000b1c:	e008      	b.n	8000b30 <gira90der+0x60>

    case este:
        sentido = sur;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	71fb      	strb	r3, [r7, #7]
        break;
 8000b22:	e005      	b.n	8000b30 <gira90der+0x60>

    case sur:
        sentido = oeste;
 8000b24:	2303      	movs	r3, #3
 8000b26:	71fb      	strb	r3, [r7, #7]
        break;
 8000b28:	e002      	b.n	8000b30 <gira90der+0x60>

    case oeste:
        sentido = norte;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	71fb      	strb	r3, [r7, #7]
        break;
 8000b2e:	bf00      	nop
    }

    // Después del giro, continuar avanzando
    //avanza();
    return sentido;
 8000b30:	79fb      	ldrb	r3, [r7, #7]
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000010 	.word	0x20000010
 8000b40:	20000012 	.word	0x20000012

08000b44 <gira180>:
/**
 * @brief Gira 180 grados y luego continúa avanzando
 * Motor der retrocede, motor izq avanza al 100%
 */
brujula gira180(brujula sentido)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	71fb      	strb	r3, [r7, #7]
    set_motor_izq(MOTOR_AVANCE, velocidad_giro_actual_izq);
 8000b4e:	4b18      	ldr	r3, [pc, #96]	@ (8000bb0 <gira180+0x6c>)
 8000b50:	881b      	ldrh	r3, [r3, #0]
 8000b52:	4619      	mov	r1, r3
 8000b54:	2000      	movs	r0, #0
 8000b56:	f7ff fee5 	bl	8000924 <set_motor_izq>
    set_motor_der(MOTOR_RETROCESO, velocidad_giro_actual_der);
 8000b5a:	4b16      	ldr	r3, [pc, #88]	@ (8000bb4 <gira180+0x70>)
 8000b5c:	881b      	ldrh	r3, [r3, #0]
 8000b5e:	4619      	mov	r1, r3
 8000b60:	2001      	movs	r0, #1
 8000b62:	f7ff ff23 	bl	80009ac <set_motor_der>

    HAL_Delay(TIEMPO_GIRO_180);
 8000b66:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b6a:	f001 fbc3 	bl	80022f4 <HAL_Delay>
    switch (sentido)
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	2b03      	cmp	r3, #3
 8000b72:	d817      	bhi.n	8000ba4 <gira180+0x60>
 8000b74:	a201      	add	r2, pc, #4	@ (adr r2, 8000b7c <gira180+0x38>)
 8000b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b7a:	bf00      	nop
 8000b7c:	08000b8d 	.word	0x08000b8d
 8000b80:	08000b93 	.word	0x08000b93
 8000b84:	08000b99 	.word	0x08000b99
 8000b88:	08000b9f 	.word	0x08000b9f
    {
    case norte:
        sentido = sur;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	71fb      	strb	r3, [r7, #7]
        break;
 8000b90:	e008      	b.n	8000ba4 <gira180+0x60>

    case este:
        sentido = oeste;
 8000b92:	2303      	movs	r3, #3
 8000b94:	71fb      	strb	r3, [r7, #7]
        break;
 8000b96:	e005      	b.n	8000ba4 <gira180+0x60>

    case sur:
        sentido = norte;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	71fb      	strb	r3, [r7, #7]
        break;
 8000b9c:	e002      	b.n	8000ba4 <gira180+0x60>

    case oeste:
        sentido = este;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	71fb      	strb	r3, [r7, #7]
        break;
 8000ba2:	bf00      	nop
    }

    // Después del giro, continuar avanzando
    //avanza();
    return sentido;
 8000ba4:	79fb      	ldrb	r3, [r7, #7]
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	20000010 	.word	0x20000010
 8000bb4:	20000012 	.word	0x20000012

08000bb8 <termino>:

/**
 * @brief Detiene ambos motores (cuando ganemos)
 */
void termino(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
    set_motor_izq(MOTOR_FRENADO, 0);
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	2002      	movs	r0, #2
 8000bc0:	f7ff feb0 	bl	8000924 <set_motor_izq>
    set_motor_der(MOTOR_FRENADO, 0);
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	2002      	movs	r0, #2
 8000bc8:	f7ff fef0 	bl	80009ac <set_motor_der>
}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <correccion_izquierda>:

void correccion_izquierda(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0

    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 100); // Motor izq más lento
 8000bd6:	4b12      	ldr	r3, [pc, #72]	@ (8000c20 <correccion_izquierda+0x50>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	2264      	movs	r2, #100	@ 0x64
 8000bdc:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 700); // Motor der normal
 8000bde:	4b10      	ldr	r3, [pc, #64]	@ (8000c20 <correccion_izquierda+0x50>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 8000be6:	641a      	str	r2, [r3, #64]	@ 0x40
     for (int i = 0; i < 10; i++)                       // 10 ciclos de 10 ms = 100 ms de corrección
 8000be8:	2300      	movs	r3, #0
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	e00f      	b.n	8000c0e <correccion_izquierda+0x3e>
    {
        if (flag_linea_detectada || flag_muro_detectado)
 8000bee:	4b0d      	ldr	r3, [pc, #52]	@ (8000c24 <correccion_izquierda+0x54>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d10e      	bne.n	8000c16 <correccion_izquierda+0x46>
 8000bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8000c28 <correccion_izquierda+0x58>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d109      	bne.n	8000c16 <correccion_izquierda+0x46>
            return; // Salir si hay algo urgente

        HAL_Delay(10);
 8000c02:	200a      	movs	r0, #10
 8000c04:	f001 fb76 	bl	80022f4 <HAL_Delay>
     for (int i = 0; i < 10; i++)                       // 10 ciclos de 10 ms = 100 ms de corrección
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	607b      	str	r3, [r7, #4]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2b09      	cmp	r3, #9
 8000c12:	ddec      	ble.n	8000bee <correccion_izquierda+0x1e>
 8000c14:	e000      	b.n	8000c18 <correccion_izquierda+0x48>
            return; // Salir si hay algo urgente
 8000c16:	bf00      	nop
    } 
}
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	200002a0 	.word	0x200002a0
 8000c24:	200004c4 	.word	0x200004c4
 8000c28:	200004c5 	.word	0x200004c5

08000c2c <correccion_derecha>:

void correccion_derecha(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 700); // Motor izq normal
 8000c32:	4b12      	ldr	r3, [pc, #72]	@ (8000c7c <correccion_derecha+0x50>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 8000c3a:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 100); // Motor der más lento
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c7c <correccion_derecha+0x50>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2264      	movs	r2, #100	@ 0x64
 8000c42:	641a      	str	r2, [r3, #64]	@ 0x40
     for (int i = 0; i < 10; i++)                       // 10 ciclos de 10 ms = 100 ms de corrección
 8000c44:	2300      	movs	r3, #0
 8000c46:	607b      	str	r3, [r7, #4]
 8000c48:	e00f      	b.n	8000c6a <correccion_derecha+0x3e>
    {
        if (flag_linea_detectada || flag_muro_detectado)
 8000c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c80 <correccion_derecha+0x54>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d10e      	bne.n	8000c72 <correccion_derecha+0x46>
 8000c54:	4b0b      	ldr	r3, [pc, #44]	@ (8000c84 <correccion_derecha+0x58>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d109      	bne.n	8000c72 <correccion_derecha+0x46>
            return; // Salir si hay algo urgente

        HAL_Delay(10);
 8000c5e:	200a      	movs	r0, #10
 8000c60:	f001 fb48 	bl	80022f4 <HAL_Delay>
     for (int i = 0; i < 10; i++)                       // 10 ciclos de 10 ms = 100 ms de corrección
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	3301      	adds	r3, #1
 8000c68:	607b      	str	r3, [r7, #4]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2b09      	cmp	r3, #9
 8000c6e:	ddec      	ble.n	8000c4a <correccion_derecha+0x1e>
 8000c70:	e000      	b.n	8000c74 <correccion_derecha+0x48>
            return; // Salir si hay algo urgente
 8000c72:	bf00      	nop
    } 
}
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	200002a0 	.word	0x200002a0
 8000c80:	200004c4 	.word	0x200004c4
 8000c84:	200004c5 	.word	0x200004c5

08000c88 <laberinto_get_peso>:
    // La meta tiene peso 0
    laberinto[POSICION_META_FILA - 1][POSICION_META_COLUMNA - 1].peso = 0;
}

uint8_t laberinto_get_peso(uint8_t fila, uint8_t columna)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	460a      	mov	r2, r1
 8000c92:	71fb      	strb	r3, [r7, #7]
 8000c94:	4613      	mov	r3, r2
 8000c96:	71bb      	strb	r3, [r7, #6]
    if (!laberinto_posicion_valida(fila, columna))
 8000c98:	79ba      	ldrb	r2, [r7, #6]
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	4611      	mov	r1, r2
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f000 f996 	bl	8000fd0 <laberinto_posicion_valida>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	f083 0301 	eor.w	r3, r3, #1
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <laberinto_get_peso+0x2c>
    {
        return PESO_MAXIMO;
 8000cb0:	23ff      	movs	r3, #255	@ 0xff
 8000cb2:	e00f      	b.n	8000cd4 <laberinto_get_peso+0x4c>
    }

    return laberinto[fila - 1][columna - 1].peso;
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	1e59      	subs	r1, r3, #1
 8000cb8:	79bb      	ldrb	r3, [r7, #6]
 8000cba:	3b01      	subs	r3, #1
 8000cbc:	4807      	ldr	r0, [pc, #28]	@ (8000cdc <laberinto_get_peso+0x54>)
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	00d2      	lsls	r2, r2, #3
 8000cc2:	1ad2      	subs	r2, r2, r3
 8000cc4:	460b      	mov	r3, r1
 8000cc6:	00db      	lsls	r3, r3, #3
 8000cc8:	1a5b      	subs	r3, r3, r1
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	4413      	add	r3, r2
 8000cce:	4403      	add	r3, r0
 8000cd0:	3302      	adds	r3, #2
 8000cd2:	781b      	ldrb	r3, [r3, #0]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	200000dc 	.word	0x200000dc

08000ce0 <laberinto_set_muro>:

void laberinto_set_muro(uint8_t fila, uint8_t columna, brujula direccion)
{
 8000ce0:	b590      	push	{r4, r7, lr}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	71fb      	strb	r3, [r7, #7]
 8000cea:	460b      	mov	r3, r1
 8000cec:	71bb      	strb	r3, [r7, #6]
 8000cee:	4613      	mov	r3, r2
 8000cf0:	717b      	strb	r3, [r7, #5]
    if (!laberinto_posicion_valida(fila, columna))
 8000cf2:	79ba      	ldrb	r2, [r7, #6]
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	4611      	mov	r1, r2
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f000 f969 	bl	8000fd0 <laberinto_posicion_valida>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	f083 0301 	eor.w	r3, r3, #1
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d146      	bne.n	8000d98 <laberinto_set_muro+0xb8>
    {
        return;
    }

    // Marcar muro en casilla actual
    laberinto[fila - 1][columna - 1].muros[direccion] = true;
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	1e59      	subs	r1, r3, #1
 8000d0e:	79bb      	ldrb	r3, [r7, #6]
 8000d10:	3b01      	subs	r3, #1
 8000d12:	7978      	ldrb	r0, [r7, #5]
 8000d14:	4c22      	ldr	r4, [pc, #136]	@ (8000da0 <laberinto_set_muro+0xc0>)
 8000d16:	461a      	mov	r2, r3
 8000d18:	00d2      	lsls	r2, r2, #3
 8000d1a:	1ad2      	subs	r2, r2, r3
 8000d1c:	460b      	mov	r3, r1
 8000d1e:	00db      	lsls	r3, r3, #3
 8000d20:	1a5b      	subs	r3, r3, r1
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	4413      	add	r3, r2
 8000d26:	4423      	add	r3, r4
 8000d28:	4403      	add	r3, r0
 8000d2a:	3303      	adds	r3, #3
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	701a      	strb	r2, [r3, #0]

    // Marcar muro en casilla adyacente (si existe)
    posicion_t pos_adyacente = laberinto_get_posicion_adyacente(
        (posicion_t){fila, columna}, direccion);
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	723b      	strb	r3, [r7, #8]
 8000d34:	79bb      	ldrb	r3, [r7, #6]
 8000d36:	727b      	strb	r3, [r7, #9]
    posicion_t pos_adyacente = laberinto_get_posicion_adyacente(
 8000d38:	797b      	ldrb	r3, [r7, #5]
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	68b8      	ldr	r0, [r7, #8]
 8000d3e:	f000 f90d 	bl	8000f5c <laberinto_get_posicion_adyacente>
 8000d42:	4603      	mov	r3, r0
 8000d44:	81bb      	strh	r3, [r7, #12]

    if (laberinto_posicion_valida(pos_adyacente.fila, pos_adyacente.columna))
 8000d46:	7b3b      	ldrb	r3, [r7, #12]
 8000d48:	7b7a      	ldrb	r2, [r7, #13]
 8000d4a:	4611      	mov	r1, r2
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f000 f93f 	bl	8000fd0 <laberinto_posicion_valida>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d01c      	beq.n	8000d92 <laberinto_set_muro+0xb2>
    {
        // Dirección opuesta
        brujula direccion_opuesta = (direccion + 2) % 4;
 8000d58:	797b      	ldrb	r3, [r7, #5]
 8000d5a:	3302      	adds	r3, #2
 8000d5c:	425a      	negs	r2, r3
 8000d5e:	f003 0303 	and.w	r3, r3, #3
 8000d62:	f002 0203 	and.w	r2, r2, #3
 8000d66:	bf58      	it	pl
 8000d68:	4253      	negpl	r3, r2
 8000d6a:	73fb      	strb	r3, [r7, #15]
        laberinto[pos_adyacente.fila - 1][pos_adyacente.columna - 1].muros[direccion_opuesta] = true;
 8000d6c:	7b3b      	ldrb	r3, [r7, #12]
 8000d6e:	1e59      	subs	r1, r3, #1
 8000d70:	7b7b      	ldrb	r3, [r7, #13]
 8000d72:	3b01      	subs	r3, #1
 8000d74:	7bf8      	ldrb	r0, [r7, #15]
 8000d76:	4c0a      	ldr	r4, [pc, #40]	@ (8000da0 <laberinto_set_muro+0xc0>)
 8000d78:	461a      	mov	r2, r3
 8000d7a:	00d2      	lsls	r2, r2, #3
 8000d7c:	1ad2      	subs	r2, r2, r3
 8000d7e:	460b      	mov	r3, r1
 8000d80:	00db      	lsls	r3, r3, #3
 8000d82:	1a5b      	subs	r3, r3, r1
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	4413      	add	r3, r2
 8000d88:	4423      	add	r3, r4
 8000d8a:	4403      	add	r3, r0
 8000d8c:	3303      	adds	r3, #3
 8000d8e:	2201      	movs	r2, #1
 8000d90:	701a      	strb	r2, [r3, #0]
    }

    // Recalcular pesos después de agregar muro
    laberinto_recalcular_pesos();
 8000d92:	f000 f807 	bl	8000da4 <laberinto_recalcular_pesos>
 8000d96:	e000      	b.n	8000d9a <laberinto_set_muro+0xba>
        return;
 8000d98:	bf00      	nop
}
 8000d9a:	3714      	adds	r7, #20
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd90      	pop	{r4, r7, pc}
 8000da0:	200000dc 	.word	0x200000dc

08000da4 <laberinto_recalcular_pesos>:

void laberinto_recalcular_pesos(void)
{
 8000da4:	b590      	push	{r4, r7, lr}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
    bool cambio_detectado = true;
 8000daa:	2301      	movs	r3, #1
 8000dac:	73fb      	strb	r3, [r7, #15]
    uint8_t iteraciones = 0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	73bb      	strb	r3, [r7, #14]
    const uint8_t MAX_ITERACIONES = 20; // Evitar bucles infinitos Protección contra boludos
 8000db2:	2314      	movs	r3, #20
 8000db4:	727b      	strb	r3, [r7, #9]

    // Algoritmo Flood Fill iterativo
    while (cambio_detectado && iteraciones < MAX_ITERACIONES)
 8000db6:	e092      	b.n	8000ede <laberinto_recalcular_pesos+0x13a>
    {
        cambio_detectado = false;
 8000db8:	2300      	movs	r3, #0
 8000dba:	73fb      	strb	r3, [r7, #15]
        iteraciones++;
 8000dbc:	7bbb      	ldrb	r3, [r7, #14]
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	73bb      	strb	r3, [r7, #14]

        for (uint8_t fila = 1; fila <= TAMAÑO_LABERINTO; fila++) // se propaga desde (1,1) hacia afuera
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	737b      	strb	r3, [r7, #13]
 8000dc6:	e086      	b.n	8000ed6 <laberinto_recalcular_pesos+0x132>
        {
            for (uint8_t columna = 1; columna <= TAMAÑO_LABERINTO; columna++)
 8000dc8:	2301      	movs	r3, #1
 8000dca:	733b      	strb	r3, [r7, #12]
 8000dcc:	e07c      	b.n	8000ec8 <laberinto_recalcular_pesos+0x124>
            {

                // No recalcular la meta
                if (fila == POSICION_META_FILA && columna == POSICION_META_COLUMNA)
 8000dce:	7b7b      	ldrb	r3, [r7, #13]
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d102      	bne.n	8000dda <laberinto_recalcular_pesos+0x36>
 8000dd4:	7b3b      	ldrb	r3, [r7, #12]
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d072      	beq.n	8000ec0 <laberinto_recalcular_pesos+0x11c>
                {
                    continue;
                }

                uint8_t peso_minimo = PESO_MAXIMO;
 8000dda:	23ff      	movs	r3, #255	@ 0xff
 8000ddc:	72fb      	strb	r3, [r7, #11]

                // Verificar todas las direcciones adyacentes
                for (brujula dir = norte; dir <= oeste; dir++)
 8000dde:	2300      	movs	r3, #0
 8000de0:	72bb      	strb	r3, [r7, #10]
 8000de2:	e03a      	b.n	8000e5a <laberinto_recalcular_pesos+0xb6>
                {

                    // Saltar si hay muro en esta dirección
                    if (laberinto[fila - 1][columna - 1].muros[dir])
 8000de4:	7b7b      	ldrb	r3, [r7, #13]
 8000de6:	1e59      	subs	r1, r3, #1
 8000de8:	7b3b      	ldrb	r3, [r7, #12]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	7ab8      	ldrb	r0, [r7, #10]
 8000dee:	4c42      	ldr	r4, [pc, #264]	@ (8000ef8 <laberinto_recalcular_pesos+0x154>)
 8000df0:	461a      	mov	r2, r3
 8000df2:	00d2      	lsls	r2, r2, #3
 8000df4:	1ad2      	subs	r2, r2, r3
 8000df6:	460b      	mov	r3, r1
 8000df8:	00db      	lsls	r3, r3, #3
 8000dfa:	1a5b      	subs	r3, r3, r1
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	4413      	add	r3, r2
 8000e00:	4423      	add	r3, r4
 8000e02:	4403      	add	r3, r0
 8000e04:	3303      	adds	r3, #3
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d122      	bne.n	8000e52 <laberinto_recalcular_pesos+0xae>
                    {
                        continue;
                    }

                    posicion_t pos_adyacente = laberinto_get_posicion_adyacente(
                        (posicion_t){fila, columna}, dir);
 8000e0c:	7b7b      	ldrb	r3, [r7, #13]
 8000e0e:	703b      	strb	r3, [r7, #0]
 8000e10:	7b3b      	ldrb	r3, [r7, #12]
 8000e12:	707b      	strb	r3, [r7, #1]
                    posicion_t pos_adyacente = laberinto_get_posicion_adyacente(
 8000e14:	7abb      	ldrb	r3, [r7, #10]
 8000e16:	4619      	mov	r1, r3
 8000e18:	6838      	ldr	r0, [r7, #0]
 8000e1a:	f000 f89f 	bl	8000f5c <laberinto_get_posicion_adyacente>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	80bb      	strh	r3, [r7, #4]

                    if (laberinto_posicion_valida(pos_adyacente.fila, pos_adyacente.columna))
 8000e22:	793b      	ldrb	r3, [r7, #4]
 8000e24:	797a      	ldrb	r2, [r7, #5]
 8000e26:	4611      	mov	r1, r2
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f000 f8d1 	bl	8000fd0 <laberinto_posicion_valida>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d00f      	beq.n	8000e54 <laberinto_recalcular_pesos+0xb0>
                    {
                        uint8_t peso_adyacente = laberinto_get_peso(
 8000e34:	793b      	ldrb	r3, [r7, #4]
 8000e36:	797a      	ldrb	r2, [r7, #5]
 8000e38:	4611      	mov	r1, r2
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff ff24 	bl	8000c88 <laberinto_get_peso>
 8000e40:	4603      	mov	r3, r0
 8000e42:	71fb      	strb	r3, [r7, #7]
                            pos_adyacente.fila, pos_adyacente.columna);

                        if (peso_adyacente < peso_minimo)
 8000e44:	79fa      	ldrb	r2, [r7, #7]
 8000e46:	7afb      	ldrb	r3, [r7, #11]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d203      	bcs.n	8000e54 <laberinto_recalcular_pesos+0xb0>
                        {
                            peso_minimo = peso_adyacente;
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	72fb      	strb	r3, [r7, #11]
 8000e50:	e000      	b.n	8000e54 <laberinto_recalcular_pesos+0xb0>
                        continue;
 8000e52:	bf00      	nop
                for (brujula dir = norte; dir <= oeste; dir++)
 8000e54:	7abb      	ldrb	r3, [r7, #10]
 8000e56:	3301      	adds	r3, #1
 8000e58:	72bb      	strb	r3, [r7, #10]
 8000e5a:	7abb      	ldrb	r3, [r7, #10]
 8000e5c:	2b03      	cmp	r3, #3
 8000e5e:	d9c1      	bls.n	8000de4 <laberinto_recalcular_pesos+0x40>
                        }
                    }
                }

                // Nuevo peso = menor peso adyacente + 1
                uint8_t nuevo_peso = (peso_minimo == PESO_MAXIMO) ? PESO_MAXIMO : peso_minimo + 1;
 8000e60:	7afb      	ldrb	r3, [r7, #11]
 8000e62:	2bff      	cmp	r3, #255	@ 0xff
 8000e64:	d003      	beq.n	8000e6e <laberinto_recalcular_pesos+0xca>
 8000e66:	7afb      	ldrb	r3, [r7, #11]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	e000      	b.n	8000e70 <laberinto_recalcular_pesos+0xcc>
 8000e6e:	23ff      	movs	r3, #255	@ 0xff
 8000e70:	723b      	strb	r3, [r7, #8]

                // Actualizar si hay cambio
                if (nuevo_peso != laberinto[fila - 1][columna - 1].peso)
 8000e72:	7b7b      	ldrb	r3, [r7, #13]
 8000e74:	1e59      	subs	r1, r3, #1
 8000e76:	7b3b      	ldrb	r3, [r7, #12]
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	481f      	ldr	r0, [pc, #124]	@ (8000ef8 <laberinto_recalcular_pesos+0x154>)
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	00d2      	lsls	r2, r2, #3
 8000e80:	1ad2      	subs	r2, r2, r3
 8000e82:	460b      	mov	r3, r1
 8000e84:	00db      	lsls	r3, r3, #3
 8000e86:	1a5b      	subs	r3, r3, r1
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	4413      	add	r3, r2
 8000e8c:	4403      	add	r3, r0
 8000e8e:	3302      	adds	r3, #2
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	7a3a      	ldrb	r2, [r7, #8]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d014      	beq.n	8000ec2 <laberinto_recalcular_pesos+0x11e>
                {
                    laberinto[fila - 1][columna - 1].peso = nuevo_peso;
 8000e98:	7b7b      	ldrb	r3, [r7, #13]
 8000e9a:	1e59      	subs	r1, r3, #1
 8000e9c:	7b3b      	ldrb	r3, [r7, #12]
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	4815      	ldr	r0, [pc, #84]	@ (8000ef8 <laberinto_recalcular_pesos+0x154>)
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	00d2      	lsls	r2, r2, #3
 8000ea6:	1ad2      	subs	r2, r2, r3
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	00db      	lsls	r3, r3, #3
 8000eac:	1a5b      	subs	r3, r3, r1
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	4413      	add	r3, r2
 8000eb2:	4403      	add	r3, r0
 8000eb4:	3302      	adds	r3, #2
 8000eb6:	7a3a      	ldrb	r2, [r7, #8]
 8000eb8:	701a      	strb	r2, [r3, #0]
                    cambio_detectado = true;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	73fb      	strb	r3, [r7, #15]
 8000ebe:	e000      	b.n	8000ec2 <laberinto_recalcular_pesos+0x11e>
                    continue;
 8000ec0:	bf00      	nop
            for (uint8_t columna = 1; columna <= TAMAÑO_LABERINTO; columna++)
 8000ec2:	7b3b      	ldrb	r3, [r7, #12]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	733b      	strb	r3, [r7, #12]
 8000ec8:	7b3b      	ldrb	r3, [r7, #12]
 8000eca:	2b04      	cmp	r3, #4
 8000ecc:	f67f af7f 	bls.w	8000dce <laberinto_recalcular_pesos+0x2a>
        for (uint8_t fila = 1; fila <= TAMAÑO_LABERINTO; fila++) // se propaga desde (1,1) hacia afuera
 8000ed0:	7b7b      	ldrb	r3, [r7, #13]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	737b      	strb	r3, [r7, #13]
 8000ed6:	7b7b      	ldrb	r3, [r7, #13]
 8000ed8:	2b04      	cmp	r3, #4
 8000eda:	f67f af75 	bls.w	8000dc8 <laberinto_recalcular_pesos+0x24>
    while (cambio_detectado && iteraciones < MAX_ITERACIONES)
 8000ede:	7bfb      	ldrb	r3, [r7, #15]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d004      	beq.n	8000eee <laberinto_recalcular_pesos+0x14a>
 8000ee4:	7bba      	ldrb	r2, [r7, #14]
 8000ee6:	7a7b      	ldrb	r3, [r7, #9]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	f4ff af65 	bcc.w	8000db8 <laberinto_recalcular_pesos+0x14>
                }
            }
        }
    }
}
 8000eee:	bf00      	nop
 8000ef0:	3714      	adds	r7, #20
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd90      	pop	{r4, r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	200000dc 	.word	0x200000dc

08000efc <laberinto_hay_muro>:

bool laberinto_hay_muro(uint8_t fila, uint8_t columna, brujula direccion)
{
 8000efc:	b590      	push	{r4, r7, lr}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	71fb      	strb	r3, [r7, #7]
 8000f06:	460b      	mov	r3, r1
 8000f08:	71bb      	strb	r3, [r7, #6]
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	717b      	strb	r3, [r7, #5]
    if (!laberinto_posicion_valida(fila, columna))
 8000f0e:	79ba      	ldrb	r2, [r7, #6]
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	4611      	mov	r1, r2
 8000f14:	4618      	mov	r0, r3
 8000f16:	f000 f85b 	bl	8000fd0 <laberinto_posicion_valida>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	f083 0301 	eor.w	r3, r3, #1
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <laberinto_hay_muro+0x2e>
    {
        return true; // Considerar bordes como muros
 8000f26:	2301      	movs	r3, #1
 8000f28:	e011      	b.n	8000f4e <laberinto_hay_muro+0x52>
    }

    return laberinto[fila - 1][columna - 1].muros[direccion];
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	1e59      	subs	r1, r3, #1
 8000f2e:	79bb      	ldrb	r3, [r7, #6]
 8000f30:	3b01      	subs	r3, #1
 8000f32:	7978      	ldrb	r0, [r7, #5]
 8000f34:	4c08      	ldr	r4, [pc, #32]	@ (8000f58 <laberinto_hay_muro+0x5c>)
 8000f36:	461a      	mov	r2, r3
 8000f38:	00d2      	lsls	r2, r2, #3
 8000f3a:	1ad2      	subs	r2, r2, r3
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	00db      	lsls	r3, r3, #3
 8000f40:	1a5b      	subs	r3, r3, r1
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	4413      	add	r3, r2
 8000f46:	4423      	add	r3, r4
 8000f48:	4403      	add	r3, r0
 8000f4a:	3303      	adds	r3, #3
 8000f4c:	781b      	ldrb	r3, [r3, #0]
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd90      	pop	{r4, r7, pc}
 8000f56:	bf00      	nop
 8000f58:	200000dc 	.word	0x200000dc

08000f5c <laberinto_get_posicion_adyacente>:

posicion_t laberinto_get_posicion_adyacente(posicion_t pos_actual, brujula direccion)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	80b8      	strh	r0, [r7, #4]
 8000f64:	460b      	mov	r3, r1
 8000f66:	70fb      	strb	r3, [r7, #3]
    posicion_t nueva_pos = pos_actual;
 8000f68:	88bb      	ldrh	r3, [r7, #4]
 8000f6a:	813b      	strh	r3, [r7, #8]

    switch (direccion)
 8000f6c:	78fb      	ldrb	r3, [r7, #3]
 8000f6e:	2b03      	cmp	r3, #3
 8000f70:	d81e      	bhi.n	8000fb0 <laberinto_get_posicion_adyacente+0x54>
 8000f72:	a201      	add	r2, pc, #4	@ (adr r2, 8000f78 <laberinto_get_posicion_adyacente+0x1c>)
 8000f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f78:	08000f89 	.word	0x08000f89
 8000f7c:	08000f93 	.word	0x08000f93
 8000f80:	08000f9d 	.word	0x08000f9d
 8000f84:	08000fa7 	.word	0x08000fa7
    {
    case norte:
        nueva_pos.fila = pos_actual.fila - 1;
 8000f88:	793b      	ldrb	r3, [r7, #4]
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	723b      	strb	r3, [r7, #8]
        break;
 8000f90:	e00e      	b.n	8000fb0 <laberinto_get_posicion_adyacente+0x54>
    case este:
        nueva_pos.columna = pos_actual.columna + 1;
 8000f92:	797b      	ldrb	r3, [r7, #5]
 8000f94:	3301      	adds	r3, #1
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	727b      	strb	r3, [r7, #9]
        break;
 8000f9a:	e009      	b.n	8000fb0 <laberinto_get_posicion_adyacente+0x54>
    case sur:
        nueva_pos.fila = pos_actual.fila + 1;
 8000f9c:	793b      	ldrb	r3, [r7, #4]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	723b      	strb	r3, [r7, #8]
        break;
 8000fa4:	e004      	b.n	8000fb0 <laberinto_get_posicion_adyacente+0x54>
    case oeste:
        nueva_pos.columna = pos_actual.columna - 1;
 8000fa6:	797b      	ldrb	r3, [r7, #5]
 8000fa8:	3b01      	subs	r3, #1
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	727b      	strb	r3, [r7, #9]
        break;
 8000fae:	bf00      	nop
    }

    return nueva_pos;
 8000fb0:	893b      	ldrh	r3, [r7, #8]
 8000fb2:	81bb      	strh	r3, [r7, #12]
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	7b3a      	ldrb	r2, [r7, #12]
 8000fb8:	f362 0307 	bfi	r3, r2, #0, #8
 8000fbc:	7b7a      	ldrb	r2, [r7, #13]
 8000fbe:	f362 230f 	bfi	r3, r2, #8, #8
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3714      	adds	r7, #20
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop

08000fd0 <laberinto_posicion_valida>:

bool laberinto_posicion_valida(uint8_t fila, uint8_t columna)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	460a      	mov	r2, r1
 8000fda:	71fb      	strb	r3, [r7, #7]
 8000fdc:	4613      	mov	r3, r2
 8000fde:	71bb      	strb	r3, [r7, #6]
    return (fila >= 1 && fila <= TAMAÑO_LABERINTO &&
            columna >= 1 && columna <= TAMAÑO_LABERINTO);
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d00a      	beq.n	8000ffc <laberinto_posicion_valida+0x2c>
    return (fila >= 1 && fila <= TAMAÑO_LABERINTO &&
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	2b04      	cmp	r3, #4
 8000fea:	d807      	bhi.n	8000ffc <laberinto_posicion_valida+0x2c>
 8000fec:	79bb      	ldrb	r3, [r7, #6]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d004      	beq.n	8000ffc <laberinto_posicion_valida+0x2c>
            columna >= 1 && columna <= TAMAÑO_LABERINTO);
 8000ff2:	79bb      	ldrb	r3, [r7, #6]
 8000ff4:	2b04      	cmp	r3, #4
 8000ff6:	d801      	bhi.n	8000ffc <laberinto_posicion_valida+0x2c>
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e000      	b.n	8000ffe <laberinto_posicion_valida+0x2e>
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	b2db      	uxtb	r3, r3
 8001004:	4618      	mov	r0, r3
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001014:	f001 f8fc 	bl	8002210 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001018:	f000 f84c 	bl	80010b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800101c:	f000 fa44 	bl	80014a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001020:	f000 fa22 	bl	8001468 <MX_DMA_Init>
  MX_I2C1_Init();
 8001024:	f000 f910 	bl	8001248 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001028:	f000 f93c 	bl	80012a4 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800102c:	f00a f8ac 	bl	800b188 <MX_USB_HOST_Init>
  MX_ADC1_Init();
 8001030:	f000 f8aa 	bl	8001188 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001034:	f000 f96c 	bl	8001310 <MX_TIM3_Init>
  MX_UART5_Init();
 8001038:	f000 f9ec 	bl	8001414 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  // Inicializar ADC con DMA primero
  	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) dma_buffer, BUFFER_TOTAL);
 800103c:	22c8      	movs	r2, #200	@ 0xc8
 800103e:	4918      	ldr	r1, [pc, #96]	@ (80010a0 <main+0x90>)
 8001040:	4818      	ldr	r0, [pc, #96]	@ (80010a4 <main+0x94>)
 8001042:	f001 f9bf 	bl	80023c4 <HAL_ADC_Start_DMA>

  	// Auto-calibración (sin motores activos)
  	auto_calibracion();
 8001046:	f7ff fb5d 	bl	8000704 <auto_calibracion>
  	// Inicializar el módulo de motores
  	control_motor_init();
 800104a:	f7ff fc5b 	bl	8000904 <control_motor_init>
  	//inicializar la uart
      Inicializar_UART();
 800104e:	f001 f88b 	bl	8002168 <Inicializar_UART>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001052:	f00a f8bf 	bl	800b1d4 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    if (!terminado) {
 8001056:	4b14      	ldr	r3, [pc, #80]	@ (80010a8 <main+0x98>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	f083 0301 	eor.w	r3, r3, #1
 800105e:	b2db      	uxtb	r3, r3
 8001060:	2b00      	cmp	r3, #0
 8001062:	d018      	beq.n	8001096 <main+0x86>
    			// PROCESAR FLAGS CON PRIORIDAD: LÍNEA > MURO

    			if (flag_linea_detectada) {
 8001064:	4b11      	ldr	r3, [pc, #68]	@ (80010ac <main+0x9c>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	b2db      	uxtb	r3, r3
 800106a:	2b00      	cmp	r3, #0
 800106c:	d005      	beq.n	800107a <main+0x6a>
    				flag_linea_detectada = false; // Clear flag PRIMERO
 800106e:	4b0f      	ldr	r3, [pc, #60]	@ (80010ac <main+0x9c>)
 8001070:	2200      	movs	r2, #0
 8001072:	701a      	strb	r2, [r3, #0]
    				chequeolinea();               // Ejecutar función completa
 8001074:	f000 fb98 	bl	80017a8 <chequeolinea>
 8001078:	e00f      	b.n	800109a <main+0x8a>
    			} else if (flag_muro_detectado) {     // else if = prioridad a línea
 800107a:	4b0d      	ldr	r3, [pc, #52]	@ (80010b0 <main+0xa0>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	b2db      	uxtb	r3, r3
 8001080:	2b00      	cmp	r3, #0
 8001082:	d005      	beq.n	8001090 <main+0x80>
    				flag_muro_detectado = false; // Clear flag PRIMERO
 8001084:	4b0a      	ldr	r3, [pc, #40]	@ (80010b0 <main+0xa0>)
 8001086:	2200      	movs	r2, #0
 8001088:	701a      	strb	r2, [r3, #0]
    				chequeomuro();               // Ejecutar función completa
 800108a:	f000 fbf1 	bl	8001870 <chequeomuro>
 800108e:	e004      	b.n	800109a <main+0x8a>
    			} else {
    				// Solo ejecutar control de línea recta si NO hay interrupciones pendientes
    				controlar_linea_recta();
 8001090:	f7ff fbc0 	bl	8000814 <controlar_linea_recta>
 8001094:	e001      	b.n	800109a <main+0x8a>
    			}
    		} else {
    			termino();
 8001096:	f7ff fd8f 	bl	8000bb8 <termino>
    		}
    		reset_posicion_pushbutton(); // ⚡ I AM SPEED button
 800109a:	f000 fc1f 	bl	80018dc <reset_posicion_pushbutton>
    MX_USB_HOST_Process();
 800109e:	e7d8      	b.n	8001052 <main+0x42>
 80010a0:	20000334 	.word	0x20000334
 80010a4:	2000014c 	.word	0x2000014c
 80010a8:	20000331 	.word	0x20000331
 80010ac:	200004c4 	.word	0x200004c4
 80010b0:	200004c5 	.word	0x200004c5

080010b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b094      	sub	sp, #80	@ 0x50
 80010b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ba:	f107 0320 	add.w	r3, r7, #32
 80010be:	2230      	movs	r2, #48	@ 0x30
 80010c0:	2100      	movs	r1, #0
 80010c2:	4618      	mov	r0, r3
 80010c4:	f00a fc4a 	bl	800b95c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c8:	f107 030c 	add.w	r3, r7, #12
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d8:	2300      	movs	r3, #0
 80010da:	60bb      	str	r3, [r7, #8]
 80010dc:	4b28      	ldr	r3, [pc, #160]	@ (8001180 <SystemClock_Config+0xcc>)
 80010de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e0:	4a27      	ldr	r2, [pc, #156]	@ (8001180 <SystemClock_Config+0xcc>)
 80010e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80010e8:	4b25      	ldr	r3, [pc, #148]	@ (8001180 <SystemClock_Config+0xcc>)
 80010ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010f4:	2300      	movs	r3, #0
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	4b22      	ldr	r3, [pc, #136]	@ (8001184 <SystemClock_Config+0xd0>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a21      	ldr	r2, [pc, #132]	@ (8001184 <SystemClock_Config+0xd0>)
 80010fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001102:	6013      	str	r3, [r2, #0]
 8001104:	4b1f      	ldr	r3, [pc, #124]	@ (8001184 <SystemClock_Config+0xd0>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800110c:	607b      	str	r3, [r7, #4]
 800110e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001110:	2301      	movs	r3, #1
 8001112:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001114:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001118:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800111a:	2302      	movs	r3, #2
 800111c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800111e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001122:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001124:	2308      	movs	r3, #8
 8001126:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001128:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800112c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800112e:	2302      	movs	r3, #2
 8001130:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001132:	2307      	movs	r3, #7
 8001134:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001136:	f107 0320 	add.w	r3, r7, #32
 800113a:	4618      	mov	r0, r3
 800113c:	f004 fe12 	bl	8005d64 <HAL_RCC_OscConfig>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001146:	f000 fc5f 	bl	8001a08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800114a:	230f      	movs	r3, #15
 800114c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800114e:	2302      	movs	r3, #2
 8001150:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001152:	2300      	movs	r3, #0
 8001154:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001156:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800115a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800115c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001160:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001162:	f107 030c 	add.w	r3, r7, #12
 8001166:	2105      	movs	r1, #5
 8001168:	4618      	mov	r0, r3
 800116a:	f005 f873 	bl	8006254 <HAL_RCC_ClockConfig>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001174:	f000 fc48 	bl	8001a08 <Error_Handler>
  }
}
 8001178:	bf00      	nop
 800117a:	3750      	adds	r7, #80	@ 0x50
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40023800 	.word	0x40023800
 8001184:	40007000 	.word	0x40007000

08001188 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800118e:	463b      	mov	r3, r7
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800119a:	4b28      	ldr	r3, [pc, #160]	@ (800123c <MX_ADC1_Init+0xb4>)
 800119c:	4a28      	ldr	r2, [pc, #160]	@ (8001240 <MX_ADC1_Init+0xb8>)
 800119e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80011a0:	4b26      	ldr	r3, [pc, #152]	@ (800123c <MX_ADC1_Init+0xb4>)
 80011a2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80011a6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011a8:	4b24      	ldr	r3, [pc, #144]	@ (800123c <MX_ADC1_Init+0xb4>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80011ae:	4b23      	ldr	r3, [pc, #140]	@ (800123c <MX_ADC1_Init+0xb4>)
 80011b0:	2201      	movs	r2, #1
 80011b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011b4:	4b21      	ldr	r3, [pc, #132]	@ (800123c <MX_ADC1_Init+0xb4>)
 80011b6:	2201      	movs	r2, #1
 80011b8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011ba:	4b20      	ldr	r3, [pc, #128]	@ (800123c <MX_ADC1_Init+0xb4>)
 80011bc:	2200      	movs	r2, #0
 80011be:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011c2:	4b1e      	ldr	r3, [pc, #120]	@ (800123c <MX_ADC1_Init+0xb4>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011c8:	4b1c      	ldr	r3, [pc, #112]	@ (800123c <MX_ADC1_Init+0xb4>)
 80011ca:	4a1e      	ldr	r2, [pc, #120]	@ (8001244 <MX_ADC1_Init+0xbc>)
 80011cc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011ce:	4b1b      	ldr	r3, [pc, #108]	@ (800123c <MX_ADC1_Init+0xb4>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80011d4:	4b19      	ldr	r3, [pc, #100]	@ (800123c <MX_ADC1_Init+0xb4>)
 80011d6:	2202      	movs	r2, #2
 80011d8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80011da:	4b18      	ldr	r3, [pc, #96]	@ (800123c <MX_ADC1_Init+0xb4>)
 80011dc:	2201      	movs	r2, #1
 80011de:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80011e2:	4b16      	ldr	r3, [pc, #88]	@ (800123c <MX_ADC1_Init+0xb4>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011e8:	4814      	ldr	r0, [pc, #80]	@ (800123c <MX_ADC1_Init+0xb4>)
 80011ea:	f001 f8a7 	bl	800233c <HAL_ADC_Init>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80011f4:	f000 fc08 	bl	8001a08 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80011f8:	2308      	movs	r3, #8
 80011fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011fc:	2301      	movs	r3, #1
 80011fe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8001200:	2305      	movs	r3, #5
 8001202:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001204:	463b      	mov	r3, r7
 8001206:	4619      	mov	r1, r3
 8001208:	480c      	ldr	r0, [pc, #48]	@ (800123c <MX_ADC1_Init+0xb4>)
 800120a:	f001 f9f9 	bl	8002600 <HAL_ADC_ConfigChannel>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001214:	f000 fbf8 	bl	8001a08 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001218:	2309      	movs	r3, #9
 800121a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800121c:	2302      	movs	r3, #2
 800121e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001220:	463b      	mov	r3, r7
 8001222:	4619      	mov	r1, r3
 8001224:	4805      	ldr	r0, [pc, #20]	@ (800123c <MX_ADC1_Init+0xb4>)
 8001226:	f001 f9eb 	bl	8002600 <HAL_ADC_ConfigChannel>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001230:	f000 fbea 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001234:	bf00      	nop
 8001236:	3710      	adds	r7, #16
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	2000014c 	.word	0x2000014c
 8001240:	40012000 	.word	0x40012000
 8001244:	0f000001 	.word	0x0f000001

08001248 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800124c:	4b12      	ldr	r3, [pc, #72]	@ (8001298 <MX_I2C1_Init+0x50>)
 800124e:	4a13      	ldr	r2, [pc, #76]	@ (800129c <MX_I2C1_Init+0x54>)
 8001250:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001252:	4b11      	ldr	r3, [pc, #68]	@ (8001298 <MX_I2C1_Init+0x50>)
 8001254:	4a12      	ldr	r2, [pc, #72]	@ (80012a0 <MX_I2C1_Init+0x58>)
 8001256:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001258:	4b0f      	ldr	r3, [pc, #60]	@ (8001298 <MX_I2C1_Init+0x50>)
 800125a:	2200      	movs	r2, #0
 800125c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800125e:	4b0e      	ldr	r3, [pc, #56]	@ (8001298 <MX_I2C1_Init+0x50>)
 8001260:	2200      	movs	r2, #0
 8001262:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001264:	4b0c      	ldr	r3, [pc, #48]	@ (8001298 <MX_I2C1_Init+0x50>)
 8001266:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800126a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800126c:	4b0a      	ldr	r3, [pc, #40]	@ (8001298 <MX_I2C1_Init+0x50>)
 800126e:	2200      	movs	r2, #0
 8001270:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001272:	4b09      	ldr	r3, [pc, #36]	@ (8001298 <MX_I2C1_Init+0x50>)
 8001274:	2200      	movs	r2, #0
 8001276:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001278:	4b07      	ldr	r3, [pc, #28]	@ (8001298 <MX_I2C1_Init+0x50>)
 800127a:	2200      	movs	r2, #0
 800127c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800127e:	4b06      	ldr	r3, [pc, #24]	@ (8001298 <MX_I2C1_Init+0x50>)
 8001280:	2200      	movs	r2, #0
 8001282:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001284:	4804      	ldr	r0, [pc, #16]	@ (8001298 <MX_I2C1_Init+0x50>)
 8001286:	f004 fc29 	bl	8005adc <HAL_I2C_Init>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001290:	f000 fbba 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001294:	bf00      	nop
 8001296:	bd80      	pop	{r7, pc}
 8001298:	200001f4 	.word	0x200001f4
 800129c:	40005400 	.word	0x40005400
 80012a0:	000186a0 	.word	0x000186a0

080012a4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012a8:	4b17      	ldr	r3, [pc, #92]	@ (8001308 <MX_SPI1_Init+0x64>)
 80012aa:	4a18      	ldr	r2, [pc, #96]	@ (800130c <MX_SPI1_Init+0x68>)
 80012ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012ae:	4b16      	ldr	r3, [pc, #88]	@ (8001308 <MX_SPI1_Init+0x64>)
 80012b0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80012b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012b6:	4b14      	ldr	r3, [pc, #80]	@ (8001308 <MX_SPI1_Init+0x64>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012bc:	4b12      	ldr	r3, [pc, #72]	@ (8001308 <MX_SPI1_Init+0x64>)
 80012be:	2200      	movs	r2, #0
 80012c0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012c2:	4b11      	ldr	r3, [pc, #68]	@ (8001308 <MX_SPI1_Init+0x64>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001308 <MX_SPI1_Init+0x64>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001308 <MX_SPI1_Init+0x64>)
 80012d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012d4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001308 <MX_SPI1_Init+0x64>)
 80012d8:	2200      	movs	r2, #0
 80012da:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001308 <MX_SPI1_Init+0x64>)
 80012de:	2200      	movs	r2, #0
 80012e0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012e2:	4b09      	ldr	r3, [pc, #36]	@ (8001308 <MX_SPI1_Init+0x64>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012e8:	4b07      	ldr	r3, [pc, #28]	@ (8001308 <MX_SPI1_Init+0x64>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012ee:	4b06      	ldr	r3, [pc, #24]	@ (8001308 <MX_SPI1_Init+0x64>)
 80012f0:	220a      	movs	r2, #10
 80012f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012f4:	4804      	ldr	r0, [pc, #16]	@ (8001308 <MX_SPI1_Init+0x64>)
 80012f6:	f005 f9cd 	bl	8006694 <HAL_SPI_Init>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001300:	f000 fb82 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001304:	bf00      	nop
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20000248 	.word	0x20000248
 800130c:	40013000 	.word	0x40013000

08001310 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08e      	sub	sp, #56	@ 0x38
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001316:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]
 8001322:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001324:	f107 0320 	add.w	r3, r7, #32
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800132e:	1d3b      	adds	r3, r7, #4
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	611a      	str	r2, [r3, #16]
 800133c:	615a      	str	r2, [r3, #20]
 800133e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001340:	4b32      	ldr	r3, [pc, #200]	@ (800140c <MX_TIM3_Init+0xfc>)
 8001342:	4a33      	ldr	r2, [pc, #204]	@ (8001410 <MX_TIM3_Init+0x100>)
 8001344:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8001346:	4b31      	ldr	r3, [pc, #196]	@ (800140c <MX_TIM3_Init+0xfc>)
 8001348:	2253      	movs	r2, #83	@ 0x53
 800134a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800134c:	4b2f      	ldr	r3, [pc, #188]	@ (800140c <MX_TIM3_Init+0xfc>)
 800134e:	2200      	movs	r2, #0
 8001350:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001352:	4b2e      	ldr	r3, [pc, #184]	@ (800140c <MX_TIM3_Init+0xfc>)
 8001354:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001358:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800135a:	4b2c      	ldr	r3, [pc, #176]	@ (800140c <MX_TIM3_Init+0xfc>)
 800135c:	2200      	movs	r2, #0
 800135e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001360:	4b2a      	ldr	r3, [pc, #168]	@ (800140c <MX_TIM3_Init+0xfc>)
 8001362:	2200      	movs	r2, #0
 8001364:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001366:	4829      	ldr	r0, [pc, #164]	@ (800140c <MX_TIM3_Init+0xfc>)
 8001368:	f005 fa1d 	bl	80067a6 <HAL_TIM_Base_Init>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001372:	f000 fb49 	bl	8001a08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001376:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800137a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800137c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001380:	4619      	mov	r1, r3
 8001382:	4822      	ldr	r0, [pc, #136]	@ (800140c <MX_TIM3_Init+0xfc>)
 8001384:	f005 fc42 	bl	8006c0c <HAL_TIM_ConfigClockSource>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800138e:	f000 fb3b 	bl	8001a08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001392:	481e      	ldr	r0, [pc, #120]	@ (800140c <MX_TIM3_Init+0xfc>)
 8001394:	f005 fa56 	bl	8006844 <HAL_TIM_PWM_Init>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800139e:	f000 fb33 	bl	8001a08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013a2:	2300      	movs	r3, #0
 80013a4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a6:	2300      	movs	r3, #0
 80013a8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013aa:	f107 0320 	add.w	r3, r7, #32
 80013ae:	4619      	mov	r1, r3
 80013b0:	4816      	ldr	r0, [pc, #88]	@ (800140c <MX_TIM3_Init+0xfc>)
 80013b2:	f006 f809 	bl	80073c8 <HAL_TIMEx_MasterConfigSynchronization>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80013bc:	f000 fb24 	bl	8001a08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013c0:	2360      	movs	r3, #96	@ 0x60
 80013c2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013c8:	2300      	movs	r3, #0
 80013ca:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	2208      	movs	r2, #8
 80013d4:	4619      	mov	r1, r3
 80013d6:	480d      	ldr	r0, [pc, #52]	@ (800140c <MX_TIM3_Init+0xfc>)
 80013d8:	f005 fb56 	bl	8006a88 <HAL_TIM_PWM_ConfigChannel>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80013e2:	f000 fb11 	bl	8001a08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013e6:	1d3b      	adds	r3, r7, #4
 80013e8:	220c      	movs	r2, #12
 80013ea:	4619      	mov	r1, r3
 80013ec:	4807      	ldr	r0, [pc, #28]	@ (800140c <MX_TIM3_Init+0xfc>)
 80013ee:	f005 fb4b 	bl	8006a88 <HAL_TIM_PWM_ConfigChannel>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80013f8:	f000 fb06 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80013fc:	4803      	ldr	r0, [pc, #12]	@ (800140c <MX_TIM3_Init+0xfc>)
 80013fe:	f000 fd5b 	bl	8001eb8 <HAL_TIM_MspPostInit>

}
 8001402:	bf00      	nop
 8001404:	3738      	adds	r7, #56	@ 0x38
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	200002a0 	.word	0x200002a0
 8001410:	40000400 	.word	0x40000400

08001414 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001418:	4b11      	ldr	r3, [pc, #68]	@ (8001460 <MX_UART5_Init+0x4c>)
 800141a:	4a12      	ldr	r2, [pc, #72]	@ (8001464 <MX_UART5_Init+0x50>)
 800141c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800141e:	4b10      	ldr	r3, [pc, #64]	@ (8001460 <MX_UART5_Init+0x4c>)
 8001420:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001424:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001426:	4b0e      	ldr	r3, [pc, #56]	@ (8001460 <MX_UART5_Init+0x4c>)
 8001428:	2200      	movs	r2, #0
 800142a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800142c:	4b0c      	ldr	r3, [pc, #48]	@ (8001460 <MX_UART5_Init+0x4c>)
 800142e:	2200      	movs	r2, #0
 8001430:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001432:	4b0b      	ldr	r3, [pc, #44]	@ (8001460 <MX_UART5_Init+0x4c>)
 8001434:	2200      	movs	r2, #0
 8001436:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001438:	4b09      	ldr	r3, [pc, #36]	@ (8001460 <MX_UART5_Init+0x4c>)
 800143a:	220c      	movs	r2, #12
 800143c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800143e:	4b08      	ldr	r3, [pc, #32]	@ (8001460 <MX_UART5_Init+0x4c>)
 8001440:	2200      	movs	r2, #0
 8001442:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001444:	4b06      	ldr	r3, [pc, #24]	@ (8001460 <MX_UART5_Init+0x4c>)
 8001446:	2200      	movs	r2, #0
 8001448:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800144a:	4805      	ldr	r0, [pc, #20]	@ (8001460 <MX_UART5_Init+0x4c>)
 800144c:	f006 f838 	bl	80074c0 <HAL_UART_Init>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001456:	f000 fad7 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	200002e8 	.word	0x200002e8
 8001464:	40005000 	.word	0x40005000

08001468 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	607b      	str	r3, [r7, #4]
 8001472:	4b0c      	ldr	r3, [pc, #48]	@ (80014a4 <MX_DMA_Init+0x3c>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001476:	4a0b      	ldr	r2, [pc, #44]	@ (80014a4 <MX_DMA_Init+0x3c>)
 8001478:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800147c:	6313      	str	r3, [r2, #48]	@ 0x30
 800147e:	4b09      	ldr	r3, [pc, #36]	@ (80014a4 <MX_DMA_Init+0x3c>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001482:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001486:	607b      	str	r3, [r7, #4]
 8001488:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800148a:	2200      	movs	r2, #0
 800148c:	2100      	movs	r1, #0
 800148e:	2038      	movs	r0, #56	@ 0x38
 8001490:	f001 fc55 	bl	8002d3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001494:	2038      	movs	r0, #56	@ 0x38
 8001496:	f001 fc6e 	bl	8002d76 <HAL_NVIC_EnableIRQ>

}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40023800 	.word	0x40023800

080014a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08c      	sub	sp, #48	@ 0x30
 80014ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ae:	f107 031c 	add.w	r3, r7, #28
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	60da      	str	r2, [r3, #12]
 80014bc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	61bb      	str	r3, [r7, #24]
 80014c2:	4b97      	ldr	r3, [pc, #604]	@ (8001720 <MX_GPIO_Init+0x278>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c6:	4a96      	ldr	r2, [pc, #600]	@ (8001720 <MX_GPIO_Init+0x278>)
 80014c8:	f043 0310 	orr.w	r3, r3, #16
 80014cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ce:	4b94      	ldr	r3, [pc, #592]	@ (8001720 <MX_GPIO_Init+0x278>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d2:	f003 0310 	and.w	r3, r3, #16
 80014d6:	61bb      	str	r3, [r7, #24]
 80014d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	617b      	str	r3, [r7, #20]
 80014de:	4b90      	ldr	r3, [pc, #576]	@ (8001720 <MX_GPIO_Init+0x278>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e2:	4a8f      	ldr	r2, [pc, #572]	@ (8001720 <MX_GPIO_Init+0x278>)
 80014e4:	f043 0304 	orr.w	r3, r3, #4
 80014e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ea:	4b8d      	ldr	r3, [pc, #564]	@ (8001720 <MX_GPIO_Init+0x278>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ee:	f003 0304 	and.w	r3, r3, #4
 80014f2:	617b      	str	r3, [r7, #20]
 80014f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	613b      	str	r3, [r7, #16]
 80014fa:	4b89      	ldr	r3, [pc, #548]	@ (8001720 <MX_GPIO_Init+0x278>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fe:	4a88      	ldr	r2, [pc, #544]	@ (8001720 <MX_GPIO_Init+0x278>)
 8001500:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001504:	6313      	str	r3, [r2, #48]	@ 0x30
 8001506:	4b86      	ldr	r3, [pc, #536]	@ (8001720 <MX_GPIO_Init+0x278>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800150e:	613b      	str	r3, [r7, #16]
 8001510:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	4b82      	ldr	r3, [pc, #520]	@ (8001720 <MX_GPIO_Init+0x278>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151a:	4a81      	ldr	r2, [pc, #516]	@ (8001720 <MX_GPIO_Init+0x278>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	6313      	str	r3, [r2, #48]	@ 0x30
 8001522:	4b7f      	ldr	r3, [pc, #508]	@ (8001720 <MX_GPIO_Init+0x278>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	4b7b      	ldr	r3, [pc, #492]	@ (8001720 <MX_GPIO_Init+0x278>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001536:	4a7a      	ldr	r2, [pc, #488]	@ (8001720 <MX_GPIO_Init+0x278>)
 8001538:	f043 0302 	orr.w	r3, r3, #2
 800153c:	6313      	str	r3, [r2, #48]	@ 0x30
 800153e:	4b78      	ldr	r3, [pc, #480]	@ (8001720 <MX_GPIO_Init+0x278>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	607b      	str	r3, [r7, #4]
 800154e:	4b74      	ldr	r3, [pc, #464]	@ (8001720 <MX_GPIO_Init+0x278>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001552:	4a73      	ldr	r2, [pc, #460]	@ (8001720 <MX_GPIO_Init+0x278>)
 8001554:	f043 0308 	orr.w	r3, r3, #8
 8001558:	6313      	str	r3, [r2, #48]	@ 0x30
 800155a:	4b71      	ldr	r3, [pc, #452]	@ (8001720 <MX_GPIO_Init+0x278>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155e:	f003 0308 	and.w	r3, r3, #8
 8001562:	607b      	str	r3, [r7, #4]
 8001564:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001566:	2200      	movs	r2, #0
 8001568:	2108      	movs	r1, #8
 800156a:	486e      	ldr	r0, [pc, #440]	@ (8001724 <MX_GPIO_Init+0x27c>)
 800156c:	f002 f950 	bl	8003810 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001570:	2201      	movs	r2, #1
 8001572:	2101      	movs	r1, #1
 8001574:	486c      	ldr	r0, [pc, #432]	@ (8001728 <MX_GPIO_Init+0x280>)
 8001576:	f002 f94b 	bl	8003810 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MI0_Pin|MI1_Pin|MD0_Pin|MD1_Pin, GPIO_PIN_RESET);
 800157a:	2200      	movs	r2, #0
 800157c:	f44f 41f0 	mov.w	r1, #30720	@ 0x7800
 8001580:	486a      	ldr	r0, [pc, #424]	@ (800172c <MX_GPIO_Init+0x284>)
 8001582:	f002 f945 	bl	8003810 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001586:	2200      	movs	r2, #0
 8001588:	f24f 0110 	movw	r1, #61456	@ 0xf010
 800158c:	4868      	ldr	r0, [pc, #416]	@ (8001730 <MX_GPIO_Init+0x288>)
 800158e:	f002 f93f 	bl	8003810 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001592:	2308      	movs	r3, #8
 8001594:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001596:	2301      	movs	r3, #1
 8001598:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159e:	2300      	movs	r3, #0
 80015a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80015a2:	f107 031c 	add.w	r3, r7, #28
 80015a6:	4619      	mov	r1, r3
 80015a8:	485e      	ldr	r0, [pc, #376]	@ (8001724 <MX_GPIO_Init+0x27c>)
 80015aa:	f001 ff7d 	bl	80034a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80015ae:	2301      	movs	r3, #1
 80015b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b2:	2301      	movs	r3, #1
 80015b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ba:	2300      	movs	r3, #0
 80015bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80015be:	f107 031c 	add.w	r3, r7, #28
 80015c2:	4619      	mov	r1, r3
 80015c4:	4858      	ldr	r0, [pc, #352]	@ (8001728 <MX_GPIO_Init+0x280>)
 80015c6:	f001 ff6f 	bl	80034a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80015ca:	2308      	movs	r3, #8
 80015cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ce:	2302      	movs	r3, #2
 80015d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d6:	2300      	movs	r3, #0
 80015d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015da:	2305      	movs	r3, #5
 80015dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80015de:	f107 031c 	add.w	r3, r7, #28
 80015e2:	4619      	mov	r1, r3
 80015e4:	4850      	ldr	r0, [pc, #320]	@ (8001728 <MX_GPIO_Init+0x280>)
 80015e6:	f001 ff5f 	bl	80034a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : i_am_speed_Pin */
  GPIO_InitStruct.Pin = i_am_speed_Pin;
 80015ea:	2301      	movs	r3, #1
 80015ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ee:	2300      	movs	r3, #0
 80015f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(i_am_speed_GPIO_Port, &GPIO_InitStruct);
 80015f6:	f107 031c 	add.w	r3, r7, #28
 80015fa:	4619      	mov	r1, r3
 80015fc:	484d      	ldr	r0, [pc, #308]	@ (8001734 <MX_GPIO_Init+0x28c>)
 80015fe:	f001 ff53 	bl	80034a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001602:	2310      	movs	r3, #16
 8001604:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001606:	2302      	movs	r3, #2
 8001608:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160e:	2300      	movs	r3, #0
 8001610:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001612:	2306      	movs	r3, #6
 8001614:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001616:	f107 031c 	add.w	r3, r7, #28
 800161a:	4619      	mov	r1, r3
 800161c:	4845      	ldr	r0, [pc, #276]	@ (8001734 <MX_GPIO_Init+0x28c>)
 800161e:	f001 ff43 	bl	80034a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001622:	2304      	movs	r3, #4
 8001624:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001626:	2300      	movs	r3, #0
 8001628:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800162e:	f107 031c 	add.w	r3, r7, #28
 8001632:	4619      	mov	r1, r3
 8001634:	483d      	ldr	r0, [pc, #244]	@ (800172c <MX_GPIO_Init+0x284>)
 8001636:	f001 ff37 	bl	80034a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800163a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800163e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001640:	2302      	movs	r3, #2
 8001642:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001644:	2300      	movs	r3, #0
 8001646:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001648:	2300      	movs	r3, #0
 800164a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800164c:	2305      	movs	r3, #5
 800164e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001650:	f107 031c 	add.w	r3, r7, #28
 8001654:	4619      	mov	r1, r3
 8001656:	4835      	ldr	r0, [pc, #212]	@ (800172c <MX_GPIO_Init+0x284>)
 8001658:	f001 ff26 	bl	80034a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MI0_Pin MI1_Pin MD0_Pin MD1_Pin */
  GPIO_InitStruct.Pin = MI0_Pin|MI1_Pin|MD0_Pin|MD1_Pin;
 800165c:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 8001660:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001662:	2301      	movs	r3, #1
 8001664:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166a:	2300      	movs	r3, #0
 800166c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800166e:	f107 031c 	add.w	r3, r7, #28
 8001672:	4619      	mov	r1, r3
 8001674:	482d      	ldr	r0, [pc, #180]	@ (800172c <MX_GPIO_Init+0x284>)
 8001676:	f001 ff17 	bl	80034a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800167a:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800167e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001680:	2301      	movs	r3, #1
 8001682:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001684:	2300      	movs	r3, #0
 8001686:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001688:	2300      	movs	r3, #0
 800168a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800168c:	f107 031c 	add.w	r3, r7, #28
 8001690:	4619      	mov	r1, r3
 8001692:	4827      	ldr	r0, [pc, #156]	@ (8001730 <MX_GPIO_Init+0x288>)
 8001694:	f001 ff08 	bl	80034a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : WallSensor_Pin LineSensor_Pin */
  GPIO_InitStruct.Pin = WallSensor_Pin|LineSensor_Pin;
 8001698:	23c0      	movs	r3, #192	@ 0xc0
 800169a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800169c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80016a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016a6:	f107 031c 	add.w	r3, r7, #28
 80016aa:	4619      	mov	r1, r3
 80016ac:	481e      	ldr	r0, [pc, #120]	@ (8001728 <MX_GPIO_Init+0x280>)
 80016ae:	f001 fefb 	bl	80034a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_SCK_Pin */
  GPIO_InitStruct.Pin = I2S3_SCK_Pin;
 80016b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b8:	2302      	movs	r3, #2
 80016ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c0:	2300      	movs	r3, #0
 80016c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80016c4:	2306      	movs	r3, #6
 80016c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_SCK_GPIO_Port, &GPIO_InitStruct);
 80016c8:	f107 031c 	add.w	r3, r7, #28
 80016cc:	4619      	mov	r1, r3
 80016ce:	4816      	ldr	r0, [pc, #88]	@ (8001728 <MX_GPIO_Init+0x280>)
 80016d0:	f001 feea 	bl	80034a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80016d4:	2320      	movs	r3, #32
 80016d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016d8:	2300      	movs	r3, #0
 80016da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80016e0:	f107 031c 	add.w	r3, r7, #28
 80016e4:	4619      	mov	r1, r3
 80016e6:	4812      	ldr	r0, [pc, #72]	@ (8001730 <MX_GPIO_Init+0x288>)
 80016e8:	f001 fede 	bl	80034a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80016ec:	2302      	movs	r3, #2
 80016ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80016f0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80016f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80016fa:	f107 031c 	add.w	r3, r7, #28
 80016fe:	4619      	mov	r1, r3
 8001700:	4808      	ldr	r0, [pc, #32]	@ (8001724 <MX_GPIO_Init+0x27c>)
 8001702:	f001 fed1 	bl	80034a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001706:	2200      	movs	r2, #0
 8001708:	2100      	movs	r1, #0
 800170a:	2017      	movs	r0, #23
 800170c:	f001 fb17 	bl	8002d3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001710:	2017      	movs	r0, #23
 8001712:	f001 fb30 	bl	8002d76 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001716:	bf00      	nop
 8001718:	3730      	adds	r7, #48	@ 0x30
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40023800 	.word	0x40023800
 8001724:	40021000 	.word	0x40021000
 8001728:	40020800 	.word	0x40020800
 800172c:	40020400 	.word	0x40020400
 8001730:	40020c00 	.word	0x40020c00
 8001734:	40020000 	.word	0x40020000

08001738 <actualizar_posicion>:

/* USER CODE BEGIN 4 */
// FUNCION QUE ACTUALIZA LA POSICION CADA VEZ QUE SE CRUZA UNA LINEA
	void actualizar_posicion(uint8_t *fila, uint8_t *columna, brujula sentido) {
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	4613      	mov	r3, r2
 8001744:	71fb      	strb	r3, [r7, #7]
		switch (sentido) {
 8001746:	79fb      	ldrb	r3, [r7, #7]
 8001748:	2b03      	cmp	r3, #3
 800174a:	d827      	bhi.n	800179c <actualizar_posicion+0x64>
 800174c:	a201      	add	r2, pc, #4	@ (adr r2, 8001754 <actualizar_posicion+0x1c>)
 800174e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001752:	bf00      	nop
 8001754:	08001765 	.word	0x08001765
 8001758:	08001773 	.word	0x08001773
 800175c:	08001781 	.word	0x08001781
 8001760:	0800178f 	.word	0x0800178f
		case norte:
			(*fila)--;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	3b01      	subs	r3, #1
 800176a:	b2da      	uxtb	r2, r3
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	701a      	strb	r2, [r3, #0]
			break;
 8001770:	e014      	b.n	800179c <actualizar_posicion+0x64>
		case este:
			(*columna)++;
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	3301      	adds	r3, #1
 8001778:	b2da      	uxtb	r2, r3
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	701a      	strb	r2, [r3, #0]
			break;
 800177e:	e00d      	b.n	800179c <actualizar_posicion+0x64>
		case sur:
			(*fila)++;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	3301      	adds	r3, #1
 8001786:	b2da      	uxtb	r2, r3
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	701a      	strb	r2, [r3, #0]
			break;
 800178c:	e006      	b.n	800179c <actualizar_posicion+0x64>
		case oeste:
			(*columna)--;
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	3b01      	subs	r3, #1
 8001794:	b2da      	uxtb	r2, r3
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	701a      	strb	r2, [r3, #0]
			break;
 800179a:	bf00      	nop
		}
	}
 800179c:	bf00      	nop
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <chequeolinea>:

// FUNCION CHEQUEO LINEA
	void chequeolinea(void) {
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
		// if (antirebote(LineSensor_GPIO_Port, LineSensor_Pin))
		// {
		// RETARDO DE UNOS MS
		HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 80017ae:	2017      	movs	r0, #23
 80017b0:	f001 faef 	bl	8002d92 <HAL_NVIC_DisableIRQ>
		HAL_Delay(TIEMPO_AVANCE_LINEA); // por si es sprint o no
 80017b4:	4b26      	ldr	r3, [pc, #152]	@ (8001850 <chequeolinea+0xa8>)
 80017b6:	881b      	ldrh	r3, [r3, #0]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f000 fd9b 	bl	80022f4 <HAL_Delay>

		// Actualizar posición
		actualizar_posicion(&fila_actual, &columna_actual, sentido_actual);
 80017be:	4b25      	ldr	r3, [pc, #148]	@ (8001854 <chequeolinea+0xac>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	461a      	mov	r2, r3
 80017c4:	4924      	ldr	r1, [pc, #144]	@ (8001858 <chequeolinea+0xb0>)
 80017c6:	4825      	ldr	r0, [pc, #148]	@ (800185c <chequeolinea+0xb4>)
 80017c8:	f7ff ffb6 	bl	8001738 <actualizar_posicion>
		//enviar posicion por uart
		//revisar que es lo que tiene que enviar
 		sprintf(mensaje, "%d,%d", fila_actual, columna_actual);
 80017cc:	4b23      	ldr	r3, [pc, #140]	@ (800185c <chequeolinea+0xb4>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	461a      	mov	r2, r3
 80017d2:	4b21      	ldr	r3, [pc, #132]	@ (8001858 <chequeolinea+0xb0>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	4922      	ldr	r1, [pc, #136]	@ (8001860 <chequeolinea+0xb8>)
 80017d8:	4822      	ldr	r0, [pc, #136]	@ (8001864 <chequeolinea+0xbc>)
 80017da:	f00a f89d 	bl	800b918 <siprintf>
      	Transmision();
 80017de:	f000 fca3 	bl	8002128 <Transmision>

		// terminó?
		if (fila_actual == 1 && columna_actual == 1) {
 80017e2:	4b1e      	ldr	r3, [pc, #120]	@ (800185c <chequeolinea+0xb4>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d114      	bne.n	8001814 <chequeolinea+0x6c>
 80017ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001858 <chequeolinea+0xb0>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d110      	bne.n	8001814 <chequeolinea+0x6c>
			termino();
 80017f2:	f7ff f9e1 	bl	8000bb8 <termino>
			terminado = true;
 80017f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001868 <chequeolinea+0xc0>)
 80017f8:	2201      	movs	r2, #1
 80017fa:	701a      	strb	r2, [r3, #0]
			strcpy(mensaje, "Finalizado");
 80017fc:	4a19      	ldr	r2, [pc, #100]	@ (8001864 <chequeolinea+0xbc>)
 80017fe:	4b1b      	ldr	r3, [pc, #108]	@ (800186c <chequeolinea+0xc4>)
 8001800:	cb03      	ldmia	r3!, {r0, r1}
 8001802:	6010      	str	r0, [r2, #0]
 8001804:	6051      	str	r1, [r2, #4]
 8001806:	8819      	ldrh	r1, [r3, #0]
 8001808:	789b      	ldrb	r3, [r3, #2]
 800180a:	8111      	strh	r1, [r2, #8]
 800180c:	7293      	strb	r3, [r2, #10]
    		Transmision();
 800180e:	f000 fc8b 	bl	8002128 <Transmision>
			return;
 8001812:	e019      	b.n	8001848 <chequeolinea+0xa0>
		}

		// Calcular y ejecutar
		brujula sentido_deseado = calcular_mejor_direccion(fila_actual,
 8001814:	4b11      	ldr	r3, [pc, #68]	@ (800185c <chequeolinea+0xb4>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	4a0f      	ldr	r2, [pc, #60]	@ (8001858 <chequeolinea+0xb0>)
 800181a:	7812      	ldrb	r2, [r2, #0]
 800181c:	4611      	mov	r1, r2
 800181e:	4618      	mov	r0, r3
 8001820:	f000 f8f8 	bl	8001a14 <calcular_mejor_direccion>
 8001824:	4603      	mov	r3, r0
 8001826:	71fb      	strb	r3, [r7, #7]
				columna_actual); // funcion definida en navegacion.h
		sentido_actual = ejecutar_movimiento(sentido_actual, sentido_deseado); // funcion definida en navegacion.h
 8001828:	4b0a      	ldr	r3, [pc, #40]	@ (8001854 <chequeolinea+0xac>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	79fa      	ldrb	r2, [r7, #7]
 800182e:	4611      	mov	r1, r2
 8001830:	4618      	mov	r0, r3
 8001832:	f000 f9b1 	bl	8001b98 <ejecutar_movimiento>
 8001836:	4603      	mov	r3, r0
 8001838:	461a      	mov	r2, r3
 800183a:	4b06      	ldr	r3, [pc, #24]	@ (8001854 <chequeolinea+0xac>)
 800183c:	701a      	strb	r2, [r3, #0]
		avanza();
 800183e:	f7ff f8f9 	bl	8000a34 <avanza>
		HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001842:	2017      	movs	r0, #23
 8001844:	f001 fa97 	bl	8002d76 <HAL_NVIC_EnableIRQ>
		//}
	}
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20000016 	.word	0x20000016
 8001854:	20000330 	.word	0x20000330
 8001858:	20000015 	.word	0x20000015
 800185c:	20000014 	.word	0x20000014
 8001860:	0800c114 	.word	0x0800c114
 8001864:	200004cc 	.word	0x200004cc
 8001868:	20000331 	.word	0x20000331
 800186c:	0800c11c 	.word	0x0800c11c

08001870 <chequeomuro>:

// FUNCION CHEQUEO MURO
	void chequeomuro(void) {
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
		HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8001876:	2017      	movs	r0, #23
 8001878:	f001 fa8b 	bl	8002d92 <HAL_NVIC_DisableIRQ>
		// if (antirebote(WallSensor_GPIO_Port, WallSensor_Pin))

		// 1. Registrar el muro detectado
		laberinto_set_muro(fila_actual, columna_actual, sentido_actual);
 800187c:	4b14      	ldr	r3, [pc, #80]	@ (80018d0 <chequeomuro+0x60>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	4a14      	ldr	r2, [pc, #80]	@ (80018d4 <chequeomuro+0x64>)
 8001882:	7811      	ldrb	r1, [r2, #0]
 8001884:	4a14      	ldr	r2, [pc, #80]	@ (80018d8 <chequeomuro+0x68>)
 8001886:	7812      	ldrb	r2, [r2, #0]
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff fa29 	bl	8000ce0 <laberinto_set_muro>

		// 2. Recalcular todos los pesos con el nuevo muro
		laberinto_recalcular_pesos();
 800188e:	f7ff fa89 	bl	8000da4 <laberinto_recalcular_pesos>

		// 3. Calcular nueva mejor dirección
		brujula sentido_deseado = calcular_mejor_direccion(fila_actual,
 8001892:	4b0f      	ldr	r3, [pc, #60]	@ (80018d0 <chequeomuro+0x60>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	4a0f      	ldr	r2, [pc, #60]	@ (80018d4 <chequeomuro+0x64>)
 8001898:	7812      	ldrb	r2, [r2, #0]
 800189a:	4611      	mov	r1, r2
 800189c:	4618      	mov	r0, r3
 800189e:	f000 f8b9 	bl	8001a14 <calcular_mejor_direccion>
 80018a2:	4603      	mov	r3, r0
 80018a4:	71fb      	strb	r3, [r7, #7]
				columna_actual);

		// 4. Ejecutar movimiento LO QUE HIZO EL COLO YA ACTUALIZA EL SENTIDO ACTUAL SOLO
		sentido_actual = ejecutar_movimiento(sentido_actual, sentido_deseado);
 80018a6:	4b0c      	ldr	r3, [pc, #48]	@ (80018d8 <chequeomuro+0x68>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	79fa      	ldrb	r2, [r7, #7]
 80018ac:	4611      	mov	r1, r2
 80018ae:	4618      	mov	r0, r3
 80018b0:	f000 f972 	bl	8001b98 <ejecutar_movimiento>
 80018b4:	4603      	mov	r3, r0
 80018b6:	461a      	mov	r2, r3
 80018b8:	4b07      	ldr	r3, [pc, #28]	@ (80018d8 <chequeomuro+0x68>)
 80018ba:	701a      	strb	r2, [r3, #0]
		avanza();
 80018bc:	f7ff f8ba 	bl	8000a34 <avanza>
		HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80018c0:	2017      	movs	r0, #23
 80018c2:	f001 fa58 	bl	8002d76 <HAL_NVIC_EnableIRQ>
	}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20000014 	.word	0x20000014
 80018d4:	20000015 	.word	0x20000015
 80018d8:	20000330 	.word	0x20000330

080018dc <reset_posicion_pushbutton>:

// VELOCIDAD
	void reset_posicion_pushbutton(void) {
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
		if (antirebote(i_am_speed_GPIO_Port, i_am_speed_Pin)) {
 80018e0:	2101      	movs	r1, #1
 80018e2:	4817      	ldr	r0, [pc, #92]	@ (8001940 <reset_posicion_pushbutton+0x64>)
 80018e4:	f7fe fe62 	bl	80005ac <antirebote>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d025      	beq.n	800193a <reset_posicion_pushbutton+0x5e>
			HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 80018ee:	2017      	movs	r0, #23
 80018f0:	f001 fa4f 	bl	8002d92 <HAL_NVIC_DisableIRQ>

			// Resetear posición
			fila_actual = 4;
 80018f4:	4b13      	ldr	r3, [pc, #76]	@ (8001944 <reset_posicion_pushbutton+0x68>)
 80018f6:	2204      	movs	r2, #4
 80018f8:	701a      	strb	r2, [r3, #0]
			columna_actual = 4;
 80018fa:	4b13      	ldr	r3, [pc, #76]	@ (8001948 <reset_posicion_pushbutton+0x6c>)
 80018fc:	2204      	movs	r2, #4
 80018fe:	701a      	strb	r2, [r3, #0]
			sentido_actual = norte;
 8001900:	4b12      	ldr	r3, [pc, #72]	@ (800194c <reset_posicion_pushbutton+0x70>)
 8001902:	2200      	movs	r2, #0
 8001904:	701a      	strb	r2, [r3, #0]
			terminado = false;
 8001906:	4b12      	ldr	r3, [pc, #72]	@ (8001950 <reset_posicion_pushbutton+0x74>)
 8001908:	2200      	movs	r2, #0
 800190a:	701a      	strb	r2, [r3, #0]

			// ⚡ I AM SPEED!
			activar_modo_sprint();     // Esta función está en control_motor.c
 800190c:	f7fe ffe6 	bl	80008dc <activar_modo_sprint>
			TIEMPO_AVANCE_LINEA = 400; // Reducir tiempo de avance a 400 ms
 8001910:	4b10      	ldr	r3, [pc, #64]	@ (8001954 <reset_posicion_pushbutton+0x78>)
 8001912:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001916:	801a      	strh	r2, [r3, #0]

			flag_linea_detectada = false;
 8001918:	4b0f      	ldr	r3, [pc, #60]	@ (8001958 <reset_posicion_pushbutton+0x7c>)
 800191a:	2200      	movs	r2, #0
 800191c:	701a      	strb	r2, [r3, #0]
			flag_muro_detectado = false;
 800191e:	4b0f      	ldr	r3, [pc, #60]	@ (800195c <reset_posicion_pushbutton+0x80>)
 8001920:	2200      	movs	r2, #0
 8001922:	701a      	strb	r2, [r3, #0]

			// Resetear estados de sensores
			ultimo_estado_linea = true;
 8001924:	4b0e      	ldr	r3, [pc, #56]	@ (8001960 <reset_posicion_pushbutton+0x84>)
 8001926:	2201      	movs	r2, #1
 8001928:	701a      	strb	r2, [r3, #0]
			ultimo_estado_muro = true;
 800192a:	4b0e      	ldr	r3, [pc, #56]	@ (8001964 <reset_posicion_pushbutton+0x88>)
 800192c:	2201      	movs	r2, #1
 800192e:	701a      	strb	r2, [r3, #0]

			avanza();
 8001930:	f7ff f880 	bl	8000a34 <avanza>
			// Reactivar interrupciones
			HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001934:	2017      	movs	r0, #23
 8001936:	f001 fa1e 	bl	8002d76 <HAL_NVIC_EnableIRQ>
		}
	}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40020000 	.word	0x40020000
 8001944:	20000014 	.word	0x20000014
 8001948:	20000015 	.word	0x20000015
 800194c:	20000330 	.word	0x20000330
 8001950:	20000331 	.word	0x20000331
 8001954:	20000016 	.word	0x20000016
 8001958:	200004c4 	.word	0x200004c4
 800195c:	200004c5 	.word	0x200004c5
 8001960:	20000018 	.word	0x20000018
 8001964:	20000019 	.word	0x20000019

08001968 <HAL_GPIO_EXTI_Callback>:

// ATENCION A LA INTERRUPCION
	void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	80fb      	strh	r3, [r7, #6]
		if (GPIO_Pin == LineSensor_Pin) {
 8001972:	88fb      	ldrh	r3, [r7, #6]
 8001974:	2b80      	cmp	r3, #128	@ 0x80
 8001976:	d11b      	bne.n	80019b0 <HAL_GPIO_EXTI_Callback+0x48>
			// Leer estado actual del sensor
			bool estado_actual = HAL_GPIO_ReadPin(LineSensor_GPIO_Port,
 8001978:	2180      	movs	r1, #128	@ 0x80
 800197a:	481e      	ldr	r0, [pc, #120]	@ (80019f4 <HAL_GPIO_EXTI_Callback+0x8c>)
 800197c:	f001 ff30 	bl	80037e0 <HAL_GPIO_ReadPin>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	bf14      	ite	ne
 8001986:	2301      	movne	r3, #1
 8001988:	2300      	moveq	r3, #0
 800198a:	73bb      	strb	r3, [r7, #14]
					LineSensor_Pin);

			// Solo activar flag si hubo transición HIGH → LOW
			if (ultimo_estado_linea == true && estado_actual == false) {
 800198c:	4b1a      	ldr	r3, [pc, #104]	@ (80019f8 <HAL_GPIO_EXTI_Callback+0x90>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	b2db      	uxtb	r3, r3
 8001992:	2b00      	cmp	r3, #0
 8001994:	d008      	beq.n	80019a8 <HAL_GPIO_EXTI_Callback+0x40>
 8001996:	7bbb      	ldrb	r3, [r7, #14]
 8001998:	f083 0301 	eor.w	r3, r3, #1
 800199c:	b2db      	uxtb	r3, r3
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d002      	beq.n	80019a8 <HAL_GPIO_EXTI_Callback+0x40>
				flag_linea_detectada = true;
 80019a2:	4b16      	ldr	r3, [pc, #88]	@ (80019fc <HAL_GPIO_EXTI_Callback+0x94>)
 80019a4:	2201      	movs	r2, #1
 80019a6:	701a      	strb	r2, [r3, #0]
			}

			// Actualizar último estado
			ultimo_estado_linea = estado_actual;
 80019a8:	4a13      	ldr	r2, [pc, #76]	@ (80019f8 <HAL_GPIO_EXTI_Callback+0x90>)
 80019aa:	7bbb      	ldrb	r3, [r7, #14]
 80019ac:	7013      	strb	r3, [r2, #0]
			}

			// Actualizar último estado
			ultimo_estado_muro = estado_actual;
		}
	}
 80019ae:	e01d      	b.n	80019ec <HAL_GPIO_EXTI_Callback+0x84>
		} else if (GPIO_Pin == WallSensor_Pin) {
 80019b0:	88fb      	ldrh	r3, [r7, #6]
 80019b2:	2b40      	cmp	r3, #64	@ 0x40
 80019b4:	d11a      	bne.n	80019ec <HAL_GPIO_EXTI_Callback+0x84>
			bool estado_actual = HAL_GPIO_ReadPin(WallSensor_GPIO_Port,
 80019b6:	2140      	movs	r1, #64	@ 0x40
 80019b8:	480e      	ldr	r0, [pc, #56]	@ (80019f4 <HAL_GPIO_EXTI_Callback+0x8c>)
 80019ba:	f001 ff11 	bl	80037e0 <HAL_GPIO_ReadPin>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	bf14      	ite	ne
 80019c4:	2301      	movne	r3, #1
 80019c6:	2300      	moveq	r3, #0
 80019c8:	73fb      	strb	r3, [r7, #15]
			if (ultimo_estado_muro == true && estado_actual == false) {
 80019ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001a00 <HAL_GPIO_EXTI_Callback+0x98>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d008      	beq.n	80019e6 <HAL_GPIO_EXTI_Callback+0x7e>
 80019d4:	7bfb      	ldrb	r3, [r7, #15]
 80019d6:	f083 0301 	eor.w	r3, r3, #1
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d002      	beq.n	80019e6 <HAL_GPIO_EXTI_Callback+0x7e>
				flag_muro_detectado = true;
 80019e0:	4b08      	ldr	r3, [pc, #32]	@ (8001a04 <HAL_GPIO_EXTI_Callback+0x9c>)
 80019e2:	2201      	movs	r2, #1
 80019e4:	701a      	strb	r2, [r3, #0]
			ultimo_estado_muro = estado_actual;
 80019e6:	4a06      	ldr	r2, [pc, #24]	@ (8001a00 <HAL_GPIO_EXTI_Callback+0x98>)
 80019e8:	7bfb      	ldrb	r3, [r7, #15]
 80019ea:	7013      	strb	r3, [r2, #0]
	}
 80019ec:	bf00      	nop
 80019ee:	3710      	adds	r7, #16
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40020800 	.word	0x40020800
 80019f8:	20000018 	.word	0x20000018
 80019fc:	200004c4 	.word	0x200004c4
 8001a00:	20000019 	.word	0x20000019
 8001a04:	200004c5 	.word	0x200004c5

08001a08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a0c:	b672      	cpsid	i
}
 8001a0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a10:	bf00      	nop
 8001a12:	e7fd      	b.n	8001a10 <Error_Handler+0x8>

08001a14 <calcular_mejor_direccion>:
 */

#include "navegacion.h"

brujula calcular_mejor_direccion(uint8_t fila_actual, uint8_t columna_actual) // nos devuelve direccion en TIPO BRUJULA gracias colo
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b08c      	sub	sp, #48	@ 0x30
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	460a      	mov	r2, r1
 8001a1e:	71fb      	strb	r3, [r7, #7]
 8001a20:	4613      	mov	r3, r2
 8001a22:	71bb      	strb	r3, [r7, #6]
    uint8_t peso_minimo = PESO_MAXIMO;
 8001a24:	23ff      	movs	r3, #255	@ 0xff
 8001a26:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    brujula mejor_direccion = norte; // Dirección por defecto
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    bool direccion_valida_encontrada = false;
 8001a30:	2300      	movs	r3, #0
 8001a32:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

    // Para dar preferencia a oeste y norte que llevan hacia la meta (1,1)
    // Primero oeste, luego norte, luego sur, luego este
    static const brujula orden_eval[] = {oeste, norte, sur, este};

    for (int i = 0; i < 4; i++)
 8001a36:	2300      	movs	r3, #0
 8001a38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a3a:	e04f      	b.n	8001adc <calcular_mejor_direccion+0xc8>
    {
        brujula direccion = orden_eval[i];
 8001a3c:	4a55      	ldr	r2, [pc, #340]	@ (8001b94 <calcular_mejor_direccion+0x180>)
 8001a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a40:	4413      	add	r3, r2
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

        // 1. ¿Hay muro en esta dirección?
        if (laberinto_hay_muro(fila_actual, columna_actual, direccion))
 8001a48:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8001a4c:	79b9      	ldrb	r1, [r7, #6]
 8001a4e:	79fb      	ldrb	r3, [r7, #7]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff fa53 	bl	8000efc <laberinto_hay_muro>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d139      	bne.n	8001ad0 <calcular_mejor_direccion+0xbc>
            continue; // Saltar si hay muro
        }

        // 2. Obtener posición adyacente
        posicion_t pos_adyacente = laberinto_get_posicion_adyacente(
            (posicion_t){fila_actual, columna_actual}, direccion);
 8001a5c:	79fb      	ldrb	r3, [r7, #7]
 8001a5e:	763b      	strb	r3, [r7, #24]
 8001a60:	79bb      	ldrb	r3, [r7, #6]
 8001a62:	767b      	strb	r3, [r7, #25]
        posicion_t pos_adyacente = laberinto_get_posicion_adyacente(
 8001a64:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001a68:	4619      	mov	r1, r3
 8001a6a:	69b8      	ldr	r0, [r7, #24]
 8001a6c:	f7ff fa76 	bl	8000f5c <laberinto_get_posicion_adyacente>
 8001a70:	4603      	mov	r3, r0
 8001a72:	83bb      	strh	r3, [r7, #28]

        // 3. ¿Es válida? (no salirse del laberinto)
        if (!laberinto_posicion_valida(pos_adyacente.fila, pos_adyacente.columna))
 8001a74:	7f3b      	ldrb	r3, [r7, #28]
 8001a76:	7f7a      	ldrb	r2, [r7, #29]
 8001a78:	4611      	mov	r1, r2
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff faa8 	bl	8000fd0 <laberinto_posicion_valida>
 8001a80:	4603      	mov	r3, r0
 8001a82:	f083 0301 	eor.w	r3, r3, #1
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d123      	bne.n	8001ad4 <calcular_mejor_direccion+0xc0>
        {
            continue; // Saltar si está fuera del laberinto
        }

        // 4. Obtener peso de la casilla adyacente
        uint8_t peso_adyacente = laberinto_get_peso(pos_adyacente.fila, pos_adyacente.columna);
 8001a8c:	7f3b      	ldrb	r3, [r7, #28]
 8001a8e:	7f7a      	ldrb	r2, [r7, #29]
 8001a90:	4611      	mov	r1, r2
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff f8f8 	bl	8000c88 <laberinto_get_peso>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

        // 5. ¿Es el mejor peso hasta ahora? O primera dirección válida encontrada
        if (!direccion_valida_encontrada || peso_adyacente < peso_minimo)
 8001a9e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001aa2:	f083 0301 	eor.w	r3, r3, #1
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d105      	bne.n	8001ab8 <calcular_mejor_direccion+0xa4>
 8001aac:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8001ab0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d20e      	bcs.n	8001ad6 <calcular_mejor_direccion+0xc2>
        {
            peso_minimo = peso_adyacente;
 8001ab8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001abc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            mejor_direccion = direccion;
 8001ac0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001ac4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            direccion_valida_encontrada = true;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8001ace:	e002      	b.n	8001ad6 <calcular_mejor_direccion+0xc2>
            continue; // Saltar si hay muro
 8001ad0:	bf00      	nop
 8001ad2:	e000      	b.n	8001ad6 <calcular_mejor_direccion+0xc2>
            continue; // Saltar si está fuera del laberinto
 8001ad4:	bf00      	nop
    for (int i = 0; i < 4; i++)
 8001ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ad8:	3301      	adds	r3, #1
 8001ada:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ade:	2b03      	cmp	r3, #3
 8001ae0:	ddac      	ble.n	8001a3c <calcular_mejor_direccion+0x28>
        }
    }

    // Verificación final de seguridad: asegurarnos que la dirección elegida es válida
    if (direccion_valida_encontrada)
 8001ae2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d04d      	beq.n	8001b86 <calcular_mejor_direccion+0x172>
    {
        posicion_t pos_siguiente = laberinto_get_posicion_adyacente(
            (posicion_t){fila_actual, columna_actual}, mejor_direccion);
 8001aea:	79fb      	ldrb	r3, [r7, #7]
 8001aec:	743b      	strb	r3, [r7, #16]
 8001aee:	79bb      	ldrb	r3, [r7, #6]
 8001af0:	747b      	strb	r3, [r7, #17]
        posicion_t pos_siguiente = laberinto_get_posicion_adyacente(
 8001af2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001af6:	4619      	mov	r1, r3
 8001af8:	6938      	ldr	r0, [r7, #16]
 8001afa:	f7ff fa2f 	bl	8000f5c <laberinto_get_posicion_adyacente>
 8001afe:	4603      	mov	r3, r0
 8001b00:	82bb      	strh	r3, [r7, #20]

        // Doble verificación para asegurarnos que no nos salimos del laberinto
        if (!laberinto_posicion_valida(pos_siguiente.fila, pos_siguiente.columna))
 8001b02:	7d3b      	ldrb	r3, [r7, #20]
 8001b04:	7d7a      	ldrb	r2, [r7, #21]
 8001b06:	4611      	mov	r1, r2
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff fa61 	bl	8000fd0 <laberinto_posicion_valida>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	f083 0301 	eor.w	r3, r3, #1
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d035      	beq.n	8001b86 <calcular_mejor_direccion+0x172>
        {
            // Algo salió mal, buscar cualquier dirección válida
            for (int i = 0; i < 4; i++)
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b1e:	e02f      	b.n	8001b80 <calcular_mejor_direccion+0x16c>
            {
                brujula dir_alternativa = orden_eval[i];
 8001b20:	4a1c      	ldr	r2, [pc, #112]	@ (8001b94 <calcular_mejor_direccion+0x180>)
 8001b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b24:	4413      	add	r3, r2
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                pos_siguiente = laberinto_get_posicion_adyacente(
                    (posicion_t){fila_actual, columna_actual}, dir_alternativa);
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
 8001b2e:	733b      	strb	r3, [r7, #12]
 8001b30:	79bb      	ldrb	r3, [r7, #6]
 8001b32:	737b      	strb	r3, [r7, #13]
                pos_siguiente = laberinto_get_posicion_adyacente(
 8001b34:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001b38:	4619      	mov	r1, r3
 8001b3a:	68f8      	ldr	r0, [r7, #12]
 8001b3c:	f7ff fa0e 	bl	8000f5c <laberinto_get_posicion_adyacente>
 8001b40:	4603      	mov	r3, r0
 8001b42:	82bb      	strh	r3, [r7, #20]

                if (laberinto_posicion_valida(pos_siguiente.fila, pos_siguiente.columna) &&
 8001b44:	7d3b      	ldrb	r3, [r7, #20]
 8001b46:	7d7a      	ldrb	r2, [r7, #21]
 8001b48:	4611      	mov	r1, r2
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff fa40 	bl	8000fd0 <laberinto_posicion_valida>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d011      	beq.n	8001b7a <calcular_mejor_direccion+0x166>
                    !laberinto_hay_muro(fila_actual, columna_actual, dir_alternativa))
 8001b56:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001b5a:	79b9      	ldrb	r1, [r7, #6]
 8001b5c:	79fb      	ldrb	r3, [r7, #7]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff f9cc 	bl	8000efc <laberinto_hay_muro>
 8001b64:	4603      	mov	r3, r0
 8001b66:	f083 0301 	eor.w	r3, r3, #1
 8001b6a:	b2db      	uxtb	r3, r3
                if (laberinto_posicion_valida(pos_siguiente.fila, pos_siguiente.columna) &&
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d004      	beq.n	8001b7a <calcular_mejor_direccion+0x166>
                {
                    mejor_direccion = dir_alternativa;
 8001b70:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001b74:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8001b78:	e005      	b.n	8001b86 <calcular_mejor_direccion+0x172>
            for (int i = 0; i < 4; i++)
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b82:	2b03      	cmp	r3, #3
 8001b84:	ddcc      	ble.n	8001b20 <calcular_mejor_direccion+0x10c>
                }
            }
        }
    }

    return mejor_direccion;
 8001b86:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3730      	adds	r7, #48	@ 0x30
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	0800c140 	.word	0x0800c140

08001b98 <ejecutar_movimiento>:

brujula ejecutar_movimiento(brujula sentido_actual, brujula sentido_deseado)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	460a      	mov	r2, r1
 8001ba2:	71fb      	strb	r3, [r7, #7]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	71bb      	strb	r3, [r7, #6]
    // ¿Ya está orientado correctamente?
    if (sentido_actual == sentido_deseado)
 8001ba8:	79fa      	ldrb	r2, [r7, #7]
 8001baa:	79bb      	ldrb	r3, [r7, #6]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d101      	bne.n	8001bb4 <ejecutar_movimiento+0x1c>
    {
        // avanza(); // Solo avanzar
        return sentido_actual;
 8001bb0:	79fb      	ldrb	r3, [r7, #7]
 8001bb2:	e02b      	b.n	8001c0c <ejecutar_movimiento+0x74>
    }

    // Calcular diferencia usando aritmética xq es un tipo brujula
    // norte=0, este=1, sur=2, oeste=3
    int diferencia = (sentido_deseado - sentido_actual + 4) % 4;
 8001bb4:	79ba      	ldrb	r2, [r7, #6]
 8001bb6:	79fb      	ldrb	r3, [r7, #7]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	3304      	adds	r3, #4
 8001bbc:	425a      	negs	r2, r3
 8001bbe:	f003 0303 	and.w	r3, r3, #3
 8001bc2:	f002 0203 	and.w	r2, r2, #3
 8001bc6:	bf58      	it	pl
 8001bc8:	4253      	negpl	r3, r2
 8001bca:	60fb      	str	r3, [r7, #12]

    switch (diferencia)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2b03      	cmp	r3, #3
 8001bd0:	d015      	beq.n	8001bfe <ejecutar_movimiento+0x66>
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2b03      	cmp	r3, #3
 8001bd6:	dc18      	bgt.n	8001c0a <ejecutar_movimiento+0x72>
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d003      	beq.n	8001be6 <ejecutar_movimiento+0x4e>
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d006      	beq.n	8001bf2 <ejecutar_movimiento+0x5a>
 8001be4:	e011      	b.n	8001c0a <ejecutar_movimiento+0x72>
    {
    case 1: // Girar 90° a la derecha
        return gira90der(sentido_actual);
 8001be6:	79fb      	ldrb	r3, [r7, #7]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7fe ff71 	bl	8000ad0 <gira90der>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	e00c      	b.n	8001c0c <ejecutar_movimiento+0x74>

    case 2: // Girar 180° (media vuelta)
        return gira180(sentido_actual);
 8001bf2:	79fb      	ldrb	r3, [r7, #7]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7fe ffa5 	bl	8000b44 <gira180>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	e006      	b.n	8001c0c <ejecutar_movimiento+0x74>

    case 3: // Girar 90° a la izquierda
        return gira90izq(sentido_actual);
 8001bfe:	79fb      	ldrb	r3, [r7, #7]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7fe ff2b 	bl	8000a5c <gira90izq>
 8001c06:	4603      	mov	r3, r0
 8001c08:	e000      	b.n	8001c0c <ejecutar_movimiento+0x74>

    default: // No debería pasar (caso 0) pero pola dice que siempre se pone default
        // avanza();
        return sentido_actual;
 8001c0a:	79fb      	ldrb	r3, [r7, #7]
    }
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	607b      	str	r3, [r7, #4]
 8001c1e:	4b10      	ldr	r3, [pc, #64]	@ (8001c60 <HAL_MspInit+0x4c>)
 8001c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c22:	4a0f      	ldr	r2, [pc, #60]	@ (8001c60 <HAL_MspInit+0x4c>)
 8001c24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c28:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8001c60 <HAL_MspInit+0x4c>)
 8001c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c32:	607b      	str	r3, [r7, #4]
 8001c34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	603b      	str	r3, [r7, #0]
 8001c3a:	4b09      	ldr	r3, [pc, #36]	@ (8001c60 <HAL_MspInit+0x4c>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3e:	4a08      	ldr	r2, [pc, #32]	@ (8001c60 <HAL_MspInit+0x4c>)
 8001c40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c44:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c46:	4b06      	ldr	r3, [pc, #24]	@ (8001c60 <HAL_MspInit+0x4c>)
 8001c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c4e:	603b      	str	r3, [r7, #0]
 8001c50:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001c52:	2007      	movs	r0, #7
 8001c54:	f001 f868 	bl	8002d28 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c58:	bf00      	nop
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40023800 	.word	0x40023800

08001c64 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b08a      	sub	sp, #40	@ 0x28
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6c:	f107 0314 	add.w	r3, r7, #20
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]
 8001c78:	60da      	str	r2, [r3, #12]
 8001c7a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a2f      	ldr	r2, [pc, #188]	@ (8001d40 <HAL_ADC_MspInit+0xdc>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d157      	bne.n	8001d36 <HAL_ADC_MspInit+0xd2>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	613b      	str	r3, [r7, #16]
 8001c8a:	4b2e      	ldr	r3, [pc, #184]	@ (8001d44 <HAL_ADC_MspInit+0xe0>)
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c8e:	4a2d      	ldr	r2, [pc, #180]	@ (8001d44 <HAL_ADC_MspInit+0xe0>)
 8001c90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c94:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c96:	4b2b      	ldr	r3, [pc, #172]	@ (8001d44 <HAL_ADC_MspInit+0xe0>)
 8001c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c9e:	613b      	str	r3, [r7, #16]
 8001ca0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	4b27      	ldr	r3, [pc, #156]	@ (8001d44 <HAL_ADC_MspInit+0xe0>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001caa:	4a26      	ldr	r2, [pc, #152]	@ (8001d44 <HAL_ADC_MspInit+0xe0>)
 8001cac:	f043 0302 	orr.w	r3, r3, #2
 8001cb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cb2:	4b24      	ldr	r3, [pc, #144]	@ (8001d44 <HAL_ADC_MspInit+0xe0>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = RightSensor_Pin|LeftSensor_Pin;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cca:	f107 0314 	add.w	r3, r7, #20
 8001cce:	4619      	mov	r1, r3
 8001cd0:	481d      	ldr	r0, [pc, #116]	@ (8001d48 <HAL_ADC_MspInit+0xe4>)
 8001cd2:	f001 fbe9 	bl	80034a8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001cd6:	4b1d      	ldr	r3, [pc, #116]	@ (8001d4c <HAL_ADC_MspInit+0xe8>)
 8001cd8:	4a1d      	ldr	r2, [pc, #116]	@ (8001d50 <HAL_ADC_MspInit+0xec>)
 8001cda:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001cdc:	4b1b      	ldr	r3, [pc, #108]	@ (8001d4c <HAL_ADC_MspInit+0xe8>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ce2:	4b1a      	ldr	r3, [pc, #104]	@ (8001d4c <HAL_ADC_MspInit+0xe8>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ce8:	4b18      	ldr	r3, [pc, #96]	@ (8001d4c <HAL_ADC_MspInit+0xe8>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001cee:	4b17      	ldr	r3, [pc, #92]	@ (8001d4c <HAL_ADC_MspInit+0xe8>)
 8001cf0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001cf4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001cf6:	4b15      	ldr	r3, [pc, #84]	@ (8001d4c <HAL_ADC_MspInit+0xe8>)
 8001cf8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001cfc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001cfe:	4b13      	ldr	r3, [pc, #76]	@ (8001d4c <HAL_ADC_MspInit+0xe8>)
 8001d00:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d04:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001d06:	4b11      	ldr	r3, [pc, #68]	@ (8001d4c <HAL_ADC_MspInit+0xe8>)
 8001d08:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d0c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001d0e:	4b0f      	ldr	r3, [pc, #60]	@ (8001d4c <HAL_ADC_MspInit+0xe8>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d14:	4b0d      	ldr	r3, [pc, #52]	@ (8001d4c <HAL_ADC_MspInit+0xe8>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001d1a:	480c      	ldr	r0, [pc, #48]	@ (8001d4c <HAL_ADC_MspInit+0xe8>)
 8001d1c:	f001 f854 	bl	8002dc8 <HAL_DMA_Init>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001d26:	f7ff fe6f 	bl	8001a08 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a07      	ldr	r2, [pc, #28]	@ (8001d4c <HAL_ADC_MspInit+0xe8>)
 8001d2e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001d30:	4a06      	ldr	r2, [pc, #24]	@ (8001d4c <HAL_ADC_MspInit+0xe8>)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001d36:	bf00      	nop
 8001d38:	3728      	adds	r7, #40	@ 0x28
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40012000 	.word	0x40012000
 8001d44:	40023800 	.word	0x40023800
 8001d48:	40020400 	.word	0x40020400
 8001d4c:	20000194 	.word	0x20000194
 8001d50:	40026410 	.word	0x40026410

08001d54 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08a      	sub	sp, #40	@ 0x28
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5c:	f107 0314 	add.w	r3, r7, #20
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	60da      	str	r2, [r3, #12]
 8001d6a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a19      	ldr	r2, [pc, #100]	@ (8001dd8 <HAL_I2C_MspInit+0x84>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d12c      	bne.n	8001dd0 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	613b      	str	r3, [r7, #16]
 8001d7a:	4b18      	ldr	r3, [pc, #96]	@ (8001ddc <HAL_I2C_MspInit+0x88>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7e:	4a17      	ldr	r2, [pc, #92]	@ (8001ddc <HAL_I2C_MspInit+0x88>)
 8001d80:	f043 0302 	orr.w	r3, r3, #2
 8001d84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d86:	4b15      	ldr	r3, [pc, #84]	@ (8001ddc <HAL_I2C_MspInit+0x88>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	613b      	str	r3, [r7, #16]
 8001d90:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001d92:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001d96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d98:	2312      	movs	r3, #18
 8001d9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da0:	2300      	movs	r3, #0
 8001da2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001da4:	2304      	movs	r3, #4
 8001da6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da8:	f107 0314 	add.w	r3, r7, #20
 8001dac:	4619      	mov	r1, r3
 8001dae:	480c      	ldr	r0, [pc, #48]	@ (8001de0 <HAL_I2C_MspInit+0x8c>)
 8001db0:	f001 fb7a 	bl	80034a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001db4:	2300      	movs	r3, #0
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	4b08      	ldr	r3, [pc, #32]	@ (8001ddc <HAL_I2C_MspInit+0x88>)
 8001dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dbc:	4a07      	ldr	r2, [pc, #28]	@ (8001ddc <HAL_I2C_MspInit+0x88>)
 8001dbe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001dc2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dc4:	4b05      	ldr	r3, [pc, #20]	@ (8001ddc <HAL_I2C_MspInit+0x88>)
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dcc:	60fb      	str	r3, [r7, #12]
 8001dce:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001dd0:	bf00      	nop
 8001dd2:	3728      	adds	r7, #40	@ 0x28
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40005400 	.word	0x40005400
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	40020400 	.word	0x40020400

08001de4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b08a      	sub	sp, #40	@ 0x28
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dec:	f107 0314 	add.w	r3, r7, #20
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	609a      	str	r2, [r3, #8]
 8001df8:	60da      	str	r2, [r3, #12]
 8001dfa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a19      	ldr	r2, [pc, #100]	@ (8001e68 <HAL_SPI_MspInit+0x84>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d12b      	bne.n	8001e5e <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	613b      	str	r3, [r7, #16]
 8001e0a:	4b18      	ldr	r3, [pc, #96]	@ (8001e6c <HAL_SPI_MspInit+0x88>)
 8001e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e0e:	4a17      	ldr	r2, [pc, #92]	@ (8001e6c <HAL_SPI_MspInit+0x88>)
 8001e10:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e14:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e16:	4b15      	ldr	r3, [pc, #84]	@ (8001e6c <HAL_SPI_MspInit+0x88>)
 8001e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e1e:	613b      	str	r3, [r7, #16]
 8001e20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	4b11      	ldr	r3, [pc, #68]	@ (8001e6c <HAL_SPI_MspInit+0x88>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2a:	4a10      	ldr	r2, [pc, #64]	@ (8001e6c <HAL_SPI_MspInit+0x88>)
 8001e2c:	f043 0301 	orr.w	r3, r3, #1
 8001e30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e32:	4b0e      	ldr	r3, [pc, #56]	@ (8001e6c <HAL_SPI_MspInit+0x88>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001e3e:	23e0      	movs	r3, #224	@ 0xe0
 8001e40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e42:	2302      	movs	r3, #2
 8001e44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e46:	2300      	movs	r3, #0
 8001e48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e4e:	2305      	movs	r3, #5
 8001e50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e52:	f107 0314 	add.w	r3, r7, #20
 8001e56:	4619      	mov	r1, r3
 8001e58:	4805      	ldr	r0, [pc, #20]	@ (8001e70 <HAL_SPI_MspInit+0x8c>)
 8001e5a:	f001 fb25 	bl	80034a8 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001e5e:	bf00      	nop
 8001e60:	3728      	adds	r7, #40	@ 0x28
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40013000 	.word	0x40013000
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	40020000 	.word	0x40020000

08001e74 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a0b      	ldr	r2, [pc, #44]	@ (8001eb0 <HAL_TIM_Base_MspInit+0x3c>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d10d      	bne.n	8001ea2 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	60fb      	str	r3, [r7, #12]
 8001e8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001eb4 <HAL_TIM_Base_MspInit+0x40>)
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8e:	4a09      	ldr	r2, [pc, #36]	@ (8001eb4 <HAL_TIM_Base_MspInit+0x40>)
 8001e90:	f043 0302 	orr.w	r3, r3, #2
 8001e94:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e96:	4b07      	ldr	r3, [pc, #28]	@ (8001eb4 <HAL_TIM_Base_MspInit+0x40>)
 8001e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001ea2:	bf00      	nop
 8001ea4:	3714      	adds	r7, #20
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	40000400 	.word	0x40000400
 8001eb4:	40023800 	.word	0x40023800

08001eb8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b088      	sub	sp, #32
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec0:	f107 030c 	add.w	r3, r7, #12
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	605a      	str	r2, [r3, #4]
 8001eca:	609a      	str	r2, [r3, #8]
 8001ecc:	60da      	str	r2, [r3, #12]
 8001ece:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a12      	ldr	r2, [pc, #72]	@ (8001f20 <HAL_TIM_MspPostInit+0x68>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d11e      	bne.n	8001f18 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	60bb      	str	r3, [r7, #8]
 8001ede:	4b11      	ldr	r3, [pc, #68]	@ (8001f24 <HAL_TIM_MspPostInit+0x6c>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee2:	4a10      	ldr	r2, [pc, #64]	@ (8001f24 <HAL_TIM_MspPostInit+0x6c>)
 8001ee4:	f043 0304 	orr.w	r3, r3, #4
 8001ee8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eea:	4b0e      	ldr	r3, [pc, #56]	@ (8001f24 <HAL_TIM_MspPostInit+0x6c>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eee:	f003 0304 	and.w	r3, r3, #4
 8001ef2:	60bb      	str	r3, [r7, #8]
 8001ef4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = Vel_I_Pin|Vel_D_Pin;
 8001ef6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001efa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efc:	2302      	movs	r3, #2
 8001efe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f00:	2300      	movs	r3, #0
 8001f02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f04:	2300      	movs	r3, #0
 8001f06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f08:	2302      	movs	r3, #2
 8001f0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f0c:	f107 030c 	add.w	r3, r7, #12
 8001f10:	4619      	mov	r1, r3
 8001f12:	4805      	ldr	r0, [pc, #20]	@ (8001f28 <HAL_TIM_MspPostInit+0x70>)
 8001f14:	f001 fac8 	bl	80034a8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001f18:	bf00      	nop
 8001f1a:	3720      	adds	r7, #32
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40000400 	.word	0x40000400
 8001f24:	40023800 	.word	0x40023800
 8001f28:	40020800 	.word	0x40020800

08001f2c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b08a      	sub	sp, #40	@ 0x28
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f34:	f107 0314 	add.w	r3, r7, #20
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
 8001f40:	60da      	str	r2, [r3, #12]
 8001f42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a28      	ldr	r2, [pc, #160]	@ (8001fec <HAL_UART_MspInit+0xc0>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d14a      	bne.n	8001fe4 <HAL_UART_MspInit+0xb8>
  {
    /* USER CODE BEGIN UART5_MspInit 0 */

    /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	613b      	str	r3, [r7, #16]
 8001f52:	4b27      	ldr	r3, [pc, #156]	@ (8001ff0 <HAL_UART_MspInit+0xc4>)
 8001f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f56:	4a26      	ldr	r2, [pc, #152]	@ (8001ff0 <HAL_UART_MspInit+0xc4>)
 8001f58:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001f5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f5e:	4b24      	ldr	r3, [pc, #144]	@ (8001ff0 <HAL_UART_MspInit+0xc4>)
 8001f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f66:	613b      	str	r3, [r7, #16]
 8001f68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	60fb      	str	r3, [r7, #12]
 8001f6e:	4b20      	ldr	r3, [pc, #128]	@ (8001ff0 <HAL_UART_MspInit+0xc4>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f72:	4a1f      	ldr	r2, [pc, #124]	@ (8001ff0 <HAL_UART_MspInit+0xc4>)
 8001f74:	f043 0304 	orr.w	r3, r3, #4
 8001f78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f7a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ff0 <HAL_UART_MspInit+0xc4>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7e:	f003 0304 	and.w	r3, r3, #4
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f86:	2300      	movs	r3, #0
 8001f88:	60bb      	str	r3, [r7, #8]
 8001f8a:	4b19      	ldr	r3, [pc, #100]	@ (8001ff0 <HAL_UART_MspInit+0xc4>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8e:	4a18      	ldr	r2, [pc, #96]	@ (8001ff0 <HAL_UART_MspInit+0xc4>)
 8001f90:	f043 0308 	orr.w	r3, r3, #8
 8001f94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f96:	4b16      	ldr	r3, [pc, #88]	@ (8001ff0 <HAL_UART_MspInit+0xc4>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9a:	f003 0308 	and.w	r3, r3, #8
 8001f9e:	60bb      	str	r3, [r7, #8]
 8001fa0:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001fa2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa8:	2302      	movs	r3, #2
 8001faa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fac:	2300      	movs	r3, #0
 8001fae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001fb4:	2308      	movs	r3, #8
 8001fb6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fb8:	f107 0314 	add.w	r3, r7, #20
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	480d      	ldr	r0, [pc, #52]	@ (8001ff4 <HAL_UART_MspInit+0xc8>)
 8001fc0:	f001 fa72 	bl	80034a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001fc4:	2304      	movs	r3, #4
 8001fc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc8:	2302      	movs	r3, #2
 8001fca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001fd4:	2308      	movs	r3, #8
 8001fd6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fd8:	f107 0314 	add.w	r3, r7, #20
 8001fdc:	4619      	mov	r1, r3
 8001fde:	4806      	ldr	r0, [pc, #24]	@ (8001ff8 <HAL_UART_MspInit+0xcc>)
 8001fe0:	f001 fa62 	bl	80034a8 <HAL_GPIO_Init>

    /* USER CODE END UART5_MspInit 1 */

  }

}
 8001fe4:	bf00      	nop
 8001fe6:	3728      	adds	r7, #40	@ 0x28
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40005000 	.word	0x40005000
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	40020800 	.word	0x40020800
 8001ff8:	40020c00 	.word	0x40020c00

08001ffc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002000:	bf00      	nop
 8002002:	e7fd      	b.n	8002000 <NMI_Handler+0x4>

08002004 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002008:	bf00      	nop
 800200a:	e7fd      	b.n	8002008 <HardFault_Handler+0x4>

0800200c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002010:	bf00      	nop
 8002012:	e7fd      	b.n	8002010 <MemManage_Handler+0x4>

08002014 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002018:	bf00      	nop
 800201a:	e7fd      	b.n	8002018 <BusFault_Handler+0x4>

0800201c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002020:	bf00      	nop
 8002022:	e7fd      	b.n	8002020 <UsageFault_Handler+0x4>

08002024 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002028:	bf00      	nop
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002032:	b480      	push	{r7}
 8002034:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002036:	bf00      	nop
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002044:	bf00      	nop
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002052:	f000 f92f 	bl	80022b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}

0800205a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(WallSensor_Pin);
 800205e:	2040      	movs	r0, #64	@ 0x40
 8002060:	f001 fbf0 	bl	8003844 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LineSensor_Pin);
 8002064:	2080      	movs	r0, #128	@ 0x80
 8002066:	f001 fbed 	bl	8003844 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800206a:	bf00      	nop
 800206c:	bd80      	pop	{r7, pc}
	...

08002070 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002074:	4802      	ldr	r0, [pc, #8]	@ (8002080 <DMA2_Stream0_IRQHandler+0x10>)
 8002076:	f000 ffad 	bl	8002fd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800207a:	bf00      	nop
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	20000194 	.word	0x20000194

08002084 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002088:	4802      	ldr	r0, [pc, #8]	@ (8002094 <OTG_FS_IRQHandler+0x10>)
 800208a:	f001 fed3 	bl	8003e34 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	200008cc 	.word	0x200008cc

08002098 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020a0:	4a14      	ldr	r2, [pc, #80]	@ (80020f4 <_sbrk+0x5c>)
 80020a2:	4b15      	ldr	r3, [pc, #84]	@ (80020f8 <_sbrk+0x60>)
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020ac:	4b13      	ldr	r3, [pc, #76]	@ (80020fc <_sbrk+0x64>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d102      	bne.n	80020ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020b4:	4b11      	ldr	r3, [pc, #68]	@ (80020fc <_sbrk+0x64>)
 80020b6:	4a12      	ldr	r2, [pc, #72]	@ (8002100 <_sbrk+0x68>)
 80020b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020ba:	4b10      	ldr	r3, [pc, #64]	@ (80020fc <_sbrk+0x64>)
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4413      	add	r3, r2
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d207      	bcs.n	80020d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020c8:	f009 fc60 	bl	800b98c <__errno>
 80020cc:	4603      	mov	r3, r0
 80020ce:	220c      	movs	r2, #12
 80020d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020d2:	f04f 33ff 	mov.w	r3, #4294967295
 80020d6:	e009      	b.n	80020ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020d8:	4b08      	ldr	r3, [pc, #32]	@ (80020fc <_sbrk+0x64>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020de:	4b07      	ldr	r3, [pc, #28]	@ (80020fc <_sbrk+0x64>)
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4413      	add	r3, r2
 80020e6:	4a05      	ldr	r2, [pc, #20]	@ (80020fc <_sbrk+0x64>)
 80020e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020ea:	68fb      	ldr	r3, [r7, #12]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3718      	adds	r7, #24
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	20020000 	.word	0x20020000
 80020f8:	00000400 	.word	0x00000400
 80020fc:	200004c8 	.word	0x200004c8
 8002100:	20000df8 	.word	0x20000df8

08002104 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002108:	4b06      	ldr	r3, [pc, #24]	@ (8002124 <SystemInit+0x20>)
 800210a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800210e:	4a05      	ldr	r2, [pc, #20]	@ (8002124 <SystemInit+0x20>)
 8002110:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002114:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002118:	bf00      	nop
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	e000ed00 	.word	0xe000ed00

08002128 <Transmision>:

char mensaje[16];
const uint8_t delay = 50;
uint8_t buffer[16];

void Transmision(void) {
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
    strcat(mensaje, "\r\n");
 800212c:	480b      	ldr	r0, [pc, #44]	@ (800215c <Transmision+0x34>)
 800212e:	f7fe f84f 	bl	80001d0 <strlen>
 8002132:	4603      	mov	r3, r0
 8002134:	461a      	mov	r2, r3
 8002136:	4b09      	ldr	r3, [pc, #36]	@ (800215c <Transmision+0x34>)
 8002138:	4413      	add	r3, r2
 800213a:	4a09      	ldr	r2, [pc, #36]	@ (8002160 <Transmision+0x38>)
 800213c:	8811      	ldrh	r1, [r2, #0]
 800213e:	7892      	ldrb	r2, [r2, #2]
 8002140:	8019      	strh	r1, [r3, #0]
 8002142:	709a      	strb	r2, [r3, #2]
    HAL_UART_Transmit(&huart5, (uint8_t*) mensaje, strlen(mensaje), delay);
 8002144:	4805      	ldr	r0, [pc, #20]	@ (800215c <Transmision+0x34>)
 8002146:	f7fe f843 	bl	80001d0 <strlen>
 800214a:	4603      	mov	r3, r0
 800214c:	b29a      	uxth	r2, r3
 800214e:	2332      	movs	r3, #50	@ 0x32
 8002150:	4902      	ldr	r1, [pc, #8]	@ (800215c <Transmision+0x34>)
 8002152:	4804      	ldr	r0, [pc, #16]	@ (8002164 <Transmision+0x3c>)
 8002154:	f005 fa04 	bl	8007560 <HAL_UART_Transmit>
}
 8002158:	bf00      	nop
 800215a:	bd80      	pop	{r7, pc}
 800215c:	200004cc 	.word	0x200004cc
 8002160:	0800c128 	.word	0x0800c128
 8002164:	200002e8 	.word	0x200002e8

08002168 <Inicializar_UART>:

void Inicializar_UART(void) {
 8002168:	b598      	push	{r3, r4, r7, lr}
 800216a:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart5, buffer, sizeof(buffer));
 800216c:	2210      	movs	r2, #16
 800216e:	490f      	ldr	r1, [pc, #60]	@ (80021ac <Inicializar_UART+0x44>)
 8002170:	480f      	ldr	r0, [pc, #60]	@ (80021b0 <Inicializar_UART+0x48>)
 8002172:	f005 fa80 	bl	8007676 <HAL_UART_Receive_IT>
    mensaje[0]='\r';
 8002176:	4b0f      	ldr	r3, [pc, #60]	@ (80021b4 <Inicializar_UART+0x4c>)
 8002178:	220d      	movs	r2, #13
 800217a:	701a      	strb	r2, [r3, #0]
    mensaje[1]='\n';
 800217c:	4b0d      	ldr	r3, [pc, #52]	@ (80021b4 <Inicializar_UART+0x4c>)
 800217e:	220a      	movs	r2, #10
 8002180:	705a      	strb	r2, [r3, #1]
    mensaje[2]='\0';
 8002182:	4b0c      	ldr	r3, [pc, #48]	@ (80021b4 <Inicializar_UART+0x4c>)
 8002184:	2200      	movs	r2, #0
 8002186:	709a      	strb	r2, [r3, #2]
    Transmision();
 8002188:	f7ff ffce 	bl	8002128 <Transmision>
    strcpy(mensaje, "UART conectada");
 800218c:	4a09      	ldr	r2, [pc, #36]	@ (80021b4 <Inicializar_UART+0x4c>)
 800218e:	4b0a      	ldr	r3, [pc, #40]	@ (80021b8 <Inicializar_UART+0x50>)
 8002190:	4614      	mov	r4, r2
 8002192:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002194:	c407      	stmia	r4!, {r0, r1, r2}
 8002196:	8023      	strh	r3, [r4, #0]
 8002198:	3402      	adds	r4, #2
 800219a:	0c1b      	lsrs	r3, r3, #16
 800219c:	7023      	strb	r3, [r4, #0]
    Transmision();
 800219e:	f7ff ffc3 	bl	8002128 <Transmision>
    mensaje[0]='\0';
 80021a2:	4b04      	ldr	r3, [pc, #16]	@ (80021b4 <Inicializar_UART+0x4c>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	701a      	strb	r2, [r3, #0]

}
 80021a8:	bf00      	nop
 80021aa:	bd98      	pop	{r3, r4, r7, pc}
 80021ac:	200004dc 	.word	0x200004dc
 80021b0:	200002e8 	.word	0x200002e8
 80021b4:	200004cc 	.word	0x200004cc
 80021b8:	0800c12c 	.word	0x0800c12c

080021bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80021bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021f4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80021c0:	f7ff ffa0 	bl	8002104 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021c4:	480c      	ldr	r0, [pc, #48]	@ (80021f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021c6:	490d      	ldr	r1, [pc, #52]	@ (80021fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002200 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021cc:	e002      	b.n	80021d4 <LoopCopyDataInit>

080021ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021d2:	3304      	adds	r3, #4

080021d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021d8:	d3f9      	bcc.n	80021ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021da:	4a0a      	ldr	r2, [pc, #40]	@ (8002204 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021dc:	4c0a      	ldr	r4, [pc, #40]	@ (8002208 <LoopFillZerobss+0x22>)
  movs r3, #0
 80021de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021e0:	e001      	b.n	80021e6 <LoopFillZerobss>

080021e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021e4:	3204      	adds	r2, #4

080021e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021e8:	d3fb      	bcc.n	80021e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021ea:	f009 fbd5 	bl	800b998 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021ee:	f7fe ff0f 	bl	8001010 <main>
  bx  lr    
 80021f2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80021f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021fc:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8002200:	0800c1a8 	.word	0x0800c1a8
  ldr r2, =_sbss
 8002204:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8002208:	20000df4 	.word	0x20000df4

0800220c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800220c:	e7fe      	b.n	800220c <ADC_IRQHandler>
	...

08002210 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002214:	4b0e      	ldr	r3, [pc, #56]	@ (8002250 <HAL_Init+0x40>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a0d      	ldr	r2, [pc, #52]	@ (8002250 <HAL_Init+0x40>)
 800221a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800221e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002220:	4b0b      	ldr	r3, [pc, #44]	@ (8002250 <HAL_Init+0x40>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a0a      	ldr	r2, [pc, #40]	@ (8002250 <HAL_Init+0x40>)
 8002226:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800222a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800222c:	4b08      	ldr	r3, [pc, #32]	@ (8002250 <HAL_Init+0x40>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a07      	ldr	r2, [pc, #28]	@ (8002250 <HAL_Init+0x40>)
 8002232:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002236:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002238:	2003      	movs	r0, #3
 800223a:	f000 fd75 	bl	8002d28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800223e:	2000      	movs	r0, #0
 8002240:	f000 f808 	bl	8002254 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002244:	f7ff fce6 	bl	8001c14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	40023c00 	.word	0x40023c00

08002254 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800225c:	4b12      	ldr	r3, [pc, #72]	@ (80022a8 <HAL_InitTick+0x54>)
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	4b12      	ldr	r3, [pc, #72]	@ (80022ac <HAL_InitTick+0x58>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	4619      	mov	r1, r3
 8002266:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800226a:	fbb3 f3f1 	udiv	r3, r3, r1
 800226e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002272:	4618      	mov	r0, r3
 8002274:	f000 fd9b 	bl	8002dae <HAL_SYSTICK_Config>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e00e      	b.n	80022a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2b0f      	cmp	r3, #15
 8002286:	d80a      	bhi.n	800229e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002288:	2200      	movs	r2, #0
 800228a:	6879      	ldr	r1, [r7, #4]
 800228c:	f04f 30ff 	mov.w	r0, #4294967295
 8002290:	f000 fd55 	bl	8002d3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002294:	4a06      	ldr	r2, [pc, #24]	@ (80022b0 <HAL_InitTick+0x5c>)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800229a:	2300      	movs	r3, #0
 800229c:	e000      	b.n	80022a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3708      	adds	r7, #8
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	2000001c 	.word	0x2000001c
 80022ac:	20000024 	.word	0x20000024
 80022b0:	20000020 	.word	0x20000020

080022b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022b8:	4b06      	ldr	r3, [pc, #24]	@ (80022d4 <HAL_IncTick+0x20>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	461a      	mov	r2, r3
 80022be:	4b06      	ldr	r3, [pc, #24]	@ (80022d8 <HAL_IncTick+0x24>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4413      	add	r3, r2
 80022c4:	4a04      	ldr	r2, [pc, #16]	@ (80022d8 <HAL_IncTick+0x24>)
 80022c6:	6013      	str	r3, [r2, #0]
}
 80022c8:	bf00      	nop
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	20000024 	.word	0x20000024
 80022d8:	200004ec 	.word	0x200004ec

080022dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  return uwTick;
 80022e0:	4b03      	ldr	r3, [pc, #12]	@ (80022f0 <HAL_GetTick+0x14>)
 80022e2:	681b      	ldr	r3, [r3, #0]
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	200004ec 	.word	0x200004ec

080022f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022fc:	f7ff ffee 	bl	80022dc <HAL_GetTick>
 8002300:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800230c:	d005      	beq.n	800231a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800230e:	4b0a      	ldr	r3, [pc, #40]	@ (8002338 <HAL_Delay+0x44>)
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	461a      	mov	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	4413      	add	r3, r2
 8002318:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800231a:	bf00      	nop
 800231c:	f7ff ffde 	bl	80022dc <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	429a      	cmp	r2, r3
 800232a:	d8f7      	bhi.n	800231c <HAL_Delay+0x28>
  {
  }
}
 800232c:	bf00      	nop
 800232e:	bf00      	nop
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	20000024 	.word	0x20000024

0800233c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002344:	2300      	movs	r3, #0
 8002346:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e033      	b.n	80023ba <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002356:	2b00      	cmp	r3, #0
 8002358:	d109      	bne.n	800236e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f7ff fc82 	bl	8001c64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002372:	f003 0310 	and.w	r3, r3, #16
 8002376:	2b00      	cmp	r3, #0
 8002378:	d118      	bne.n	80023ac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002382:	f023 0302 	bic.w	r3, r3, #2
 8002386:	f043 0202 	orr.w	r2, r3, #2
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 fa58 	bl	8002844 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800239e:	f023 0303 	bic.w	r3, r3, #3
 80023a2:	f043 0201 	orr.w	r2, r3, #1
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	641a      	str	r2, [r3, #64]	@ 0x40
 80023aa:	e001      	b.n	80023b0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80023b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
	...

080023c4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b088      	sub	sp, #32
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80023d0:	2300      	movs	r3, #0
 80023d2:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023d4:	2300      	movs	r3, #0
 80023d6:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d101      	bne.n	80023e6 <HAL_ADC_Start_DMA+0x22>
 80023e2:	2302      	movs	r3, #2
 80023e4:	e0eb      	b.n	80025be <HAL_ADC_Start_DMA+0x1fa>
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2201      	movs	r2, #1
 80023ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f003 0301 	and.w	r3, r3, #1
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d018      	beq.n	800242e <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	689a      	ldr	r2, [r3, #8]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f042 0201 	orr.w	r2, r2, #1
 800240a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800240c:	4b6e      	ldr	r3, [pc, #440]	@ (80025c8 <HAL_ADC_Start_DMA+0x204>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a6e      	ldr	r2, [pc, #440]	@ (80025cc <HAL_ADC_Start_DMA+0x208>)
 8002412:	fba2 2303 	umull	r2, r3, r2, r3
 8002416:	0c9a      	lsrs	r2, r3, #18
 8002418:	4613      	mov	r3, r2
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	4413      	add	r3, r2
 800241e:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8002420:	e002      	b.n	8002428 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	3b01      	subs	r3, #1
 8002426:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1f9      	bne.n	8002422 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002438:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800243c:	d107      	bne.n	800244e <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	689a      	ldr	r2, [r3, #8]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800244c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	2b01      	cmp	r3, #1
 800245a:	f040 80a3 	bne.w	80025a4 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002462:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002466:	f023 0301 	bic.w	r3, r3, #1
 800246a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800247c:	2b00      	cmp	r3, #0
 800247e:	d007      	beq.n	8002490 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002484:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002488:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002494:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002498:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800249c:	d106      	bne.n	80024ac <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024a2:	f023 0206 	bic.w	r2, r3, #6
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	645a      	str	r2, [r3, #68]	@ 0x44
 80024aa:	e002      	b.n	80024b2 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2200      	movs	r2, #0
 80024b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024ba:	4b45      	ldr	r3, [pc, #276]	@ (80025d0 <HAL_ADC_Start_DMA+0x20c>)
 80024bc:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024c2:	4a44      	ldr	r2, [pc, #272]	@ (80025d4 <HAL_ADC_Start_DMA+0x210>)
 80024c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024ca:	4a43      	ldr	r2, [pc, #268]	@ (80025d8 <HAL_ADC_Start_DMA+0x214>)
 80024cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024d2:	4a42      	ldr	r2, [pc, #264]	@ (80025dc <HAL_ADC_Start_DMA+0x218>)
 80024d4:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80024de:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	685a      	ldr	r2, [r3, #4]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80024ee:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	689a      	ldr	r2, [r3, #8]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80024fe:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	334c      	adds	r3, #76	@ 0x4c
 800250a:	4619      	mov	r1, r3
 800250c:	68ba      	ldr	r2, [r7, #8]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f000 fd08 	bl	8002f24 <HAL_DMA_Start_IT>
 8002514:	4603      	mov	r3, r0
 8002516:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f003 031f 	and.w	r3, r3, #31
 8002520:	2b00      	cmp	r3, #0
 8002522:	d12a      	bne.n	800257a <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a2d      	ldr	r2, [pc, #180]	@ (80025e0 <HAL_ADC_Start_DMA+0x21c>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d015      	beq.n	800255a <HAL_ADC_Start_DMA+0x196>
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a2c      	ldr	r2, [pc, #176]	@ (80025e4 <HAL_ADC_Start_DMA+0x220>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d105      	bne.n	8002544 <HAL_ADC_Start_DMA+0x180>
 8002538:	4b25      	ldr	r3, [pc, #148]	@ (80025d0 <HAL_ADC_Start_DMA+0x20c>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f003 031f 	and.w	r3, r3, #31
 8002540:	2b00      	cmp	r3, #0
 8002542:	d00a      	beq.n	800255a <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a27      	ldr	r2, [pc, #156]	@ (80025e8 <HAL_ADC_Start_DMA+0x224>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d136      	bne.n	80025bc <HAL_ADC_Start_DMA+0x1f8>
 800254e:	4b20      	ldr	r3, [pc, #128]	@ (80025d0 <HAL_ADC_Start_DMA+0x20c>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f003 0310 	and.w	r3, r3, #16
 8002556:	2b00      	cmp	r3, #0
 8002558:	d130      	bne.n	80025bc <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d129      	bne.n	80025bc <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	689a      	ldr	r2, [r3, #8]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002576:	609a      	str	r2, [r3, #8]
 8002578:	e020      	b.n	80025bc <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a18      	ldr	r2, [pc, #96]	@ (80025e0 <HAL_ADC_Start_DMA+0x21c>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d11b      	bne.n	80025bc <HAL_ADC_Start_DMA+0x1f8>
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d114      	bne.n	80025bc <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	689a      	ldr	r2, [r3, #8]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80025a0:	609a      	str	r2, [r3, #8]
 80025a2:	e00b      	b.n	80025bc <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a8:	f043 0210 	orr.w	r2, r3, #16
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b4:	f043 0201 	orr.w	r2, r3, #1
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 80025bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3720      	adds	r7, #32
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	2000001c 	.word	0x2000001c
 80025cc:	431bde83 	.word	0x431bde83
 80025d0:	40012300 	.word	0x40012300
 80025d4:	08002a3d 	.word	0x08002a3d
 80025d8:	08002af7 	.word	0x08002af7
 80025dc:	08002b13 	.word	0x08002b13
 80025e0:	40012000 	.word	0x40012000
 80025e4:	40012100 	.word	0x40012100
 80025e8:	40012200 	.word	0x40012200

080025ec <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80025f4:	bf00      	nop
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800260a:	2300      	movs	r3, #0
 800260c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002614:	2b01      	cmp	r3, #1
 8002616:	d101      	bne.n	800261c <HAL_ADC_ConfigChannel+0x1c>
 8002618:	2302      	movs	r3, #2
 800261a:	e105      	b.n	8002828 <HAL_ADC_ConfigChannel+0x228>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2b09      	cmp	r3, #9
 800262a:	d925      	bls.n	8002678 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68d9      	ldr	r1, [r3, #12]
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	b29b      	uxth	r3, r3
 8002638:	461a      	mov	r2, r3
 800263a:	4613      	mov	r3, r2
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	4413      	add	r3, r2
 8002640:	3b1e      	subs	r3, #30
 8002642:	2207      	movs	r2, #7
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	43da      	mvns	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	400a      	ands	r2, r1
 8002650:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	68d9      	ldr	r1, [r3, #12]
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	689a      	ldr	r2, [r3, #8]
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	b29b      	uxth	r3, r3
 8002662:	4618      	mov	r0, r3
 8002664:	4603      	mov	r3, r0
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	4403      	add	r3, r0
 800266a:	3b1e      	subs	r3, #30
 800266c:	409a      	lsls	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	430a      	orrs	r2, r1
 8002674:	60da      	str	r2, [r3, #12]
 8002676:	e022      	b.n	80026be <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6919      	ldr	r1, [r3, #16]
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	b29b      	uxth	r3, r3
 8002684:	461a      	mov	r2, r3
 8002686:	4613      	mov	r3, r2
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	4413      	add	r3, r2
 800268c:	2207      	movs	r2, #7
 800268e:	fa02 f303 	lsl.w	r3, r2, r3
 8002692:	43da      	mvns	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	400a      	ands	r2, r1
 800269a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6919      	ldr	r1, [r3, #16]
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	689a      	ldr	r2, [r3, #8]
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	4618      	mov	r0, r3
 80026ae:	4603      	mov	r3, r0
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	4403      	add	r3, r0
 80026b4:	409a      	lsls	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	430a      	orrs	r2, r1
 80026bc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	2b06      	cmp	r3, #6
 80026c4:	d824      	bhi.n	8002710 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685a      	ldr	r2, [r3, #4]
 80026d0:	4613      	mov	r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4413      	add	r3, r2
 80026d6:	3b05      	subs	r3, #5
 80026d8:	221f      	movs	r2, #31
 80026da:	fa02 f303 	lsl.w	r3, r2, r3
 80026de:	43da      	mvns	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	400a      	ands	r2, r1
 80026e6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	4618      	mov	r0, r3
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685a      	ldr	r2, [r3, #4]
 80026fa:	4613      	mov	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	4413      	add	r3, r2
 8002700:	3b05      	subs	r3, #5
 8002702:	fa00 f203 	lsl.w	r2, r0, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	430a      	orrs	r2, r1
 800270c:	635a      	str	r2, [r3, #52]	@ 0x34
 800270e:	e04c      	b.n	80027aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	2b0c      	cmp	r3, #12
 8002716:	d824      	bhi.n	8002762 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685a      	ldr	r2, [r3, #4]
 8002722:	4613      	mov	r3, r2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	4413      	add	r3, r2
 8002728:	3b23      	subs	r3, #35	@ 0x23
 800272a:	221f      	movs	r2, #31
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	43da      	mvns	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	400a      	ands	r2, r1
 8002738:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	b29b      	uxth	r3, r3
 8002746:	4618      	mov	r0, r3
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685a      	ldr	r2, [r3, #4]
 800274c:	4613      	mov	r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	4413      	add	r3, r2
 8002752:	3b23      	subs	r3, #35	@ 0x23
 8002754:	fa00 f203 	lsl.w	r2, r0, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	430a      	orrs	r2, r1
 800275e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002760:	e023      	b.n	80027aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	4613      	mov	r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	4413      	add	r3, r2
 8002772:	3b41      	subs	r3, #65	@ 0x41
 8002774:	221f      	movs	r2, #31
 8002776:	fa02 f303 	lsl.w	r3, r2, r3
 800277a:	43da      	mvns	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	400a      	ands	r2, r1
 8002782:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	b29b      	uxth	r3, r3
 8002790:	4618      	mov	r0, r3
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685a      	ldr	r2, [r3, #4]
 8002796:	4613      	mov	r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	4413      	add	r3, r2
 800279c:	3b41      	subs	r3, #65	@ 0x41
 800279e:	fa00 f203 	lsl.w	r2, r0, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	430a      	orrs	r2, r1
 80027a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027aa:	4b22      	ldr	r3, [pc, #136]	@ (8002834 <HAL_ADC_ConfigChannel+0x234>)
 80027ac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a21      	ldr	r2, [pc, #132]	@ (8002838 <HAL_ADC_ConfigChannel+0x238>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d109      	bne.n	80027cc <HAL_ADC_ConfigChannel+0x1cc>
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2b12      	cmp	r3, #18
 80027be:	d105      	bne.n	80027cc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a19      	ldr	r2, [pc, #100]	@ (8002838 <HAL_ADC_ConfigChannel+0x238>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d123      	bne.n	800281e <HAL_ADC_ConfigChannel+0x21e>
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2b10      	cmp	r3, #16
 80027dc:	d003      	beq.n	80027e6 <HAL_ADC_ConfigChannel+0x1e6>
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2b11      	cmp	r3, #17
 80027e4:	d11b      	bne.n	800281e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2b10      	cmp	r3, #16
 80027f8:	d111      	bne.n	800281e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80027fa:	4b10      	ldr	r3, [pc, #64]	@ (800283c <HAL_ADC_ConfigChannel+0x23c>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a10      	ldr	r2, [pc, #64]	@ (8002840 <HAL_ADC_ConfigChannel+0x240>)
 8002800:	fba2 2303 	umull	r2, r3, r2, r3
 8002804:	0c9a      	lsrs	r2, r3, #18
 8002806:	4613      	mov	r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	4413      	add	r3, r2
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002810:	e002      	b.n	8002818 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	3b01      	subs	r3, #1
 8002816:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1f9      	bne.n	8002812 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3714      	adds	r7, #20
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr
 8002834:	40012300 	.word	0x40012300
 8002838:	40012000 	.word	0x40012000
 800283c:	2000001c 	.word	0x2000001c
 8002840:	431bde83 	.word	0x431bde83

08002844 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002844:	b480      	push	{r7}
 8002846:	b085      	sub	sp, #20
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800284c:	4b79      	ldr	r3, [pc, #484]	@ (8002a34 <ADC_Init+0x1f0>)
 800284e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	685a      	ldr	r2, [r3, #4]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	431a      	orrs	r2, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002878:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	6859      	ldr	r1, [r3, #4]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	021a      	lsls	r2, r3, #8
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	430a      	orrs	r2, r1
 800288c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	685a      	ldr	r2, [r3, #4]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800289c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	6859      	ldr	r1, [r3, #4]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	430a      	orrs	r2, r1
 80028ae:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	689a      	ldr	r2, [r3, #8]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	6899      	ldr	r1, [r3, #8]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	68da      	ldr	r2, [r3, #12]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	430a      	orrs	r2, r1
 80028d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028d6:	4a58      	ldr	r2, [pc, #352]	@ (8002a38 <ADC_Init+0x1f4>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d022      	beq.n	8002922 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	689a      	ldr	r2, [r3, #8]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80028ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	6899      	ldr	r1, [r3, #8]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	430a      	orrs	r2, r1
 80028fc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	689a      	ldr	r2, [r3, #8]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800290c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	6899      	ldr	r1, [r3, #8]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	430a      	orrs	r2, r1
 800291e:	609a      	str	r2, [r3, #8]
 8002920:	e00f      	b.n	8002942 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	689a      	ldr	r2, [r3, #8]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002930:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	689a      	ldr	r2, [r3, #8]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002940:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f022 0202 	bic.w	r2, r2, #2
 8002950:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	6899      	ldr	r1, [r3, #8]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	7e1b      	ldrb	r3, [r3, #24]
 800295c:	005a      	lsls	r2, r3, #1
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	430a      	orrs	r2, r1
 8002964:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f893 3020 	ldrb.w	r3, [r3, #32]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d01b      	beq.n	80029a8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	685a      	ldr	r2, [r3, #4]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800297e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	685a      	ldr	r2, [r3, #4]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800298e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	6859      	ldr	r1, [r3, #4]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800299a:	3b01      	subs	r3, #1
 800299c:	035a      	lsls	r2, r3, #13
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	430a      	orrs	r2, r1
 80029a4:	605a      	str	r2, [r3, #4]
 80029a6:	e007      	b.n	80029b8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	685a      	ldr	r2, [r3, #4]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029b6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80029c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	69db      	ldr	r3, [r3, #28]
 80029d2:	3b01      	subs	r3, #1
 80029d4:	051a      	lsls	r2, r3, #20
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	430a      	orrs	r2, r1
 80029dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80029ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	6899      	ldr	r1, [r3, #8]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80029fa:	025a      	lsls	r2, r3, #9
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	430a      	orrs	r2, r1
 8002a02:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	689a      	ldr	r2, [r3, #8]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	6899      	ldr	r1, [r3, #8]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	029a      	lsls	r2, r3, #10
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	430a      	orrs	r2, r1
 8002a26:	609a      	str	r2, [r3, #8]
}
 8002a28:	bf00      	nop
 8002a2a:	3714      	adds	r7, #20
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	40012300 	.word	0x40012300
 8002a38:	0f000001 	.word	0x0f000001

08002a3c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a48:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d13c      	bne.n	8002ad0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d12b      	bne.n	8002ac8 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d127      	bne.n	8002ac8 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a7e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d006      	beq.n	8002a94 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d119      	bne.n	8002ac8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	685a      	ldr	r2, [r3, #4]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f022 0220 	bic.w	r2, r2, #32
 8002aa2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d105      	bne.n	8002ac8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac0:	f043 0201 	orr.w	r2, r3, #1
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f7fd fdcf 	bl	800066c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002ace:	e00e      	b.n	8002aee <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad4:	f003 0310 	and.w	r3, r3, #16
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d003      	beq.n	8002ae4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002adc:	68f8      	ldr	r0, [r7, #12]
 8002ade:	f7ff fd85 	bl	80025ec <HAL_ADC_ErrorCallback>
}
 8002ae2:	e004      	b.n	8002aee <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ae8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	4798      	blx	r3
}
 8002aee:	bf00      	nop
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002af6:	b580      	push	{r7, lr}
 8002af8:	b084      	sub	sp, #16
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b02:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002b04:	68f8      	ldr	r0, [r7, #12]
 8002b06:	f7fd fda3 	bl	8000650 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b0a:	bf00      	nop
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b084      	sub	sp, #16
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b1e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2240      	movs	r2, #64	@ 0x40
 8002b24:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b2a:	f043 0204 	orr.w	r2, r3, #4
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	f7ff fd5a 	bl	80025ec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b38:	bf00      	nop
 8002b3a:	3710      	adds	r7, #16
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b085      	sub	sp, #20
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f003 0307 	and.w	r3, r3, #7
 8002b4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b50:	4b0c      	ldr	r3, [pc, #48]	@ (8002b84 <__NVIC_SetPriorityGrouping+0x44>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b56:	68ba      	ldr	r2, [r7, #8]
 8002b58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b72:	4a04      	ldr	r2, [pc, #16]	@ (8002b84 <__NVIC_SetPriorityGrouping+0x44>)
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	60d3      	str	r3, [r2, #12]
}
 8002b78:	bf00      	nop
 8002b7a:	3714      	adds	r7, #20
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr
 8002b84:	e000ed00 	.word	0xe000ed00

08002b88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b8c:	4b04      	ldr	r3, [pc, #16]	@ (8002ba0 <__NVIC_GetPriorityGrouping+0x18>)
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	0a1b      	lsrs	r3, r3, #8
 8002b92:	f003 0307 	and.w	r3, r3, #7
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr
 8002ba0:	e000ed00 	.word	0xe000ed00

08002ba4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	4603      	mov	r3, r0
 8002bac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	db0b      	blt.n	8002bce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bb6:	79fb      	ldrb	r3, [r7, #7]
 8002bb8:	f003 021f 	and.w	r2, r3, #31
 8002bbc:	4907      	ldr	r1, [pc, #28]	@ (8002bdc <__NVIC_EnableIRQ+0x38>)
 8002bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc2:	095b      	lsrs	r3, r3, #5
 8002bc4:	2001      	movs	r0, #1
 8002bc6:	fa00 f202 	lsl.w	r2, r0, r2
 8002bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002bce:	bf00      	nop
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	e000e100 	.word	0xe000e100

08002be0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	4603      	mov	r3, r0
 8002be8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	db12      	blt.n	8002c18 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bf2:	79fb      	ldrb	r3, [r7, #7]
 8002bf4:	f003 021f 	and.w	r2, r3, #31
 8002bf8:	490a      	ldr	r1, [pc, #40]	@ (8002c24 <__NVIC_DisableIRQ+0x44>)
 8002bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfe:	095b      	lsrs	r3, r3, #5
 8002c00:	2001      	movs	r0, #1
 8002c02:	fa00 f202 	lsl.w	r2, r0, r2
 8002c06:	3320      	adds	r3, #32
 8002c08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002c0c:	f3bf 8f4f 	dsb	sy
}
 8002c10:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002c12:	f3bf 8f6f 	isb	sy
}
 8002c16:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr
 8002c24:	e000e100 	.word	0xe000e100

08002c28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	4603      	mov	r3, r0
 8002c30:	6039      	str	r1, [r7, #0]
 8002c32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	db0a      	blt.n	8002c52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	b2da      	uxtb	r2, r3
 8002c40:	490c      	ldr	r1, [pc, #48]	@ (8002c74 <__NVIC_SetPriority+0x4c>)
 8002c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c46:	0112      	lsls	r2, r2, #4
 8002c48:	b2d2      	uxtb	r2, r2
 8002c4a:	440b      	add	r3, r1
 8002c4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c50:	e00a      	b.n	8002c68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	4908      	ldr	r1, [pc, #32]	@ (8002c78 <__NVIC_SetPriority+0x50>)
 8002c58:	79fb      	ldrb	r3, [r7, #7]
 8002c5a:	f003 030f 	and.w	r3, r3, #15
 8002c5e:	3b04      	subs	r3, #4
 8002c60:	0112      	lsls	r2, r2, #4
 8002c62:	b2d2      	uxtb	r2, r2
 8002c64:	440b      	add	r3, r1
 8002c66:	761a      	strb	r2, [r3, #24]
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr
 8002c74:	e000e100 	.word	0xe000e100
 8002c78:	e000ed00 	.word	0xe000ed00

08002c7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b089      	sub	sp, #36	@ 0x24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f003 0307 	and.w	r3, r3, #7
 8002c8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	f1c3 0307 	rsb	r3, r3, #7
 8002c96:	2b04      	cmp	r3, #4
 8002c98:	bf28      	it	cs
 8002c9a:	2304      	movcs	r3, #4
 8002c9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	3304      	adds	r3, #4
 8002ca2:	2b06      	cmp	r3, #6
 8002ca4:	d902      	bls.n	8002cac <NVIC_EncodePriority+0x30>
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	3b03      	subs	r3, #3
 8002caa:	e000      	b.n	8002cae <NVIC_EncodePriority+0x32>
 8002cac:	2300      	movs	r3, #0
 8002cae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cba:	43da      	mvns	r2, r3
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	401a      	ands	r2, r3
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cc4:	f04f 31ff 	mov.w	r1, #4294967295
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	fa01 f303 	lsl.w	r3, r1, r3
 8002cce:	43d9      	mvns	r1, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cd4:	4313      	orrs	r3, r2
         );
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3724      	adds	r7, #36	@ 0x24
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
	...

08002ce4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002cf4:	d301      	bcc.n	8002cfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e00f      	b.n	8002d1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cfa:	4a0a      	ldr	r2, [pc, #40]	@ (8002d24 <SysTick_Config+0x40>)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d02:	210f      	movs	r1, #15
 8002d04:	f04f 30ff 	mov.w	r0, #4294967295
 8002d08:	f7ff ff8e 	bl	8002c28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d0c:	4b05      	ldr	r3, [pc, #20]	@ (8002d24 <SysTick_Config+0x40>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d12:	4b04      	ldr	r3, [pc, #16]	@ (8002d24 <SysTick_Config+0x40>)
 8002d14:	2207      	movs	r2, #7
 8002d16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	e000e010 	.word	0xe000e010

08002d28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f7ff ff05 	bl	8002b40 <__NVIC_SetPriorityGrouping>
}
 8002d36:	bf00      	nop
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b086      	sub	sp, #24
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	4603      	mov	r3, r0
 8002d46:	60b9      	str	r1, [r7, #8]
 8002d48:	607a      	str	r2, [r7, #4]
 8002d4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d50:	f7ff ff1a 	bl	8002b88 <__NVIC_GetPriorityGrouping>
 8002d54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	68b9      	ldr	r1, [r7, #8]
 8002d5a:	6978      	ldr	r0, [r7, #20]
 8002d5c:	f7ff ff8e 	bl	8002c7c <NVIC_EncodePriority>
 8002d60:	4602      	mov	r2, r0
 8002d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d66:	4611      	mov	r1, r2
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7ff ff5d 	bl	8002c28 <__NVIC_SetPriority>
}
 8002d6e:	bf00      	nop
 8002d70:	3718      	adds	r7, #24
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b082      	sub	sp, #8
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7ff ff0d 	bl	8002ba4 <__NVIC_EnableIRQ>
}
 8002d8a:	bf00      	nop
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b082      	sub	sp, #8
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	4603      	mov	r3, r0
 8002d9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff ff1d 	bl	8002be0 <__NVIC_DisableIRQ>
}
 8002da6:	bf00      	nop
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b082      	sub	sp, #8
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f7ff ff94 	bl	8002ce4 <SysTick_Config>
 8002dbc:	4603      	mov	r3, r0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3708      	adds	r7, #8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
	...

08002dc8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b086      	sub	sp, #24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002dd4:	f7ff fa82 	bl	80022dc <HAL_GetTick>
 8002dd8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d101      	bne.n	8002de4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e099      	b.n	8002f18 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2202      	movs	r2, #2
 8002de8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f022 0201 	bic.w	r2, r2, #1
 8002e02:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e04:	e00f      	b.n	8002e26 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e06:	f7ff fa69 	bl	80022dc <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	2b05      	cmp	r3, #5
 8002e12:	d908      	bls.n	8002e26 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2220      	movs	r2, #32
 8002e18:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2203      	movs	r2, #3
 8002e1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e078      	b.n	8002f18 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0301 	and.w	r3, r3, #1
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1e8      	bne.n	8002e06 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e3c:	697a      	ldr	r2, [r7, #20]
 8002e3e:	4b38      	ldr	r3, [pc, #224]	@ (8002f20 <HAL_DMA_Init+0x158>)
 8002e40:	4013      	ands	r3, r2
 8002e42:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685a      	ldr	r2, [r3, #4]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e52:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e7c:	2b04      	cmp	r3, #4
 8002e7e:	d107      	bne.n	8002e90 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	697a      	ldr	r2, [r7, #20]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	697a      	ldr	r2, [r7, #20]
 8002e96:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	f023 0307 	bic.w	r3, r3, #7
 8002ea6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eac:	697a      	ldr	r2, [r7, #20]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb6:	2b04      	cmp	r3, #4
 8002eb8:	d117      	bne.n	8002eea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ebe:	697a      	ldr	r2, [r7, #20]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d00e      	beq.n	8002eea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f000 fa6f 	bl	80033b0 <DMA_CheckFifoParam>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d008      	beq.n	8002eea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2240      	movs	r2, #64	@ 0x40
 8002edc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e016      	b.n	8002f18 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 fa26 	bl	8003344 <DMA_CalcBaseAndBitshift>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f00:	223f      	movs	r2, #63	@ 0x3f
 8002f02:	409a      	lsls	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3718      	adds	r7, #24
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	f010803f 	.word	0xf010803f

08002f24 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b086      	sub	sp, #24
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
 8002f30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f32:	2300      	movs	r3, #0
 8002f34:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f3a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d101      	bne.n	8002f4a <HAL_DMA_Start_IT+0x26>
 8002f46:	2302      	movs	r3, #2
 8002f48:	e040      	b.n	8002fcc <HAL_DMA_Start_IT+0xa8>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d12f      	bne.n	8002fbe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2202      	movs	r2, #2
 8002f62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	68b9      	ldr	r1, [r7, #8]
 8002f72:	68f8      	ldr	r0, [r7, #12]
 8002f74:	f000 f9b8 	bl	80032e8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f7c:	223f      	movs	r2, #63	@ 0x3f
 8002f7e:	409a      	lsls	r2, r3
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f042 0216 	orr.w	r2, r2, #22
 8002f92:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d007      	beq.n	8002fac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f042 0208 	orr.w	r2, r2, #8
 8002faa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f042 0201 	orr.w	r2, r2, #1
 8002fba:	601a      	str	r2, [r3, #0]
 8002fbc:	e005      	b.n	8002fca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002fca:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3718      	adds	r7, #24
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b086      	sub	sp, #24
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002fe0:	4b8e      	ldr	r3, [pc, #568]	@ (800321c <HAL_DMA_IRQHandler+0x248>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a8e      	ldr	r2, [pc, #568]	@ (8003220 <HAL_DMA_IRQHandler+0x24c>)
 8002fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fea:	0a9b      	lsrs	r3, r3, #10
 8002fec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ff2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ffe:	2208      	movs	r2, #8
 8003000:	409a      	lsls	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	4013      	ands	r3, r2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d01a      	beq.n	8003040 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0304 	and.w	r3, r3, #4
 8003014:	2b00      	cmp	r3, #0
 8003016:	d013      	beq.n	8003040 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f022 0204 	bic.w	r2, r2, #4
 8003026:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800302c:	2208      	movs	r2, #8
 800302e:	409a      	lsls	r2, r3
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003038:	f043 0201 	orr.w	r2, r3, #1
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003044:	2201      	movs	r2, #1
 8003046:	409a      	lsls	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	4013      	ands	r3, r2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d012      	beq.n	8003076 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00b      	beq.n	8003076 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003062:	2201      	movs	r2, #1
 8003064:	409a      	lsls	r2, r3
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800306e:	f043 0202 	orr.w	r2, r3, #2
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800307a:	2204      	movs	r2, #4
 800307c:	409a      	lsls	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	4013      	ands	r3, r2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d012      	beq.n	80030ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00b      	beq.n	80030ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003098:	2204      	movs	r2, #4
 800309a:	409a      	lsls	r2, r3
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030a4:	f043 0204 	orr.w	r2, r3, #4
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030b0:	2210      	movs	r2, #16
 80030b2:	409a      	lsls	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	4013      	ands	r3, r2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d043      	beq.n	8003144 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0308 	and.w	r3, r3, #8
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d03c      	beq.n	8003144 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ce:	2210      	movs	r2, #16
 80030d0:	409a      	lsls	r2, r3
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d018      	beq.n	8003116 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d108      	bne.n	8003104 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d024      	beq.n	8003144 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	4798      	blx	r3
 8003102:	e01f      	b.n	8003144 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003108:	2b00      	cmp	r3, #0
 800310a:	d01b      	beq.n	8003144 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	4798      	blx	r3
 8003114:	e016      	b.n	8003144 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003120:	2b00      	cmp	r3, #0
 8003122:	d107      	bne.n	8003134 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f022 0208 	bic.w	r2, r2, #8
 8003132:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003138:	2b00      	cmp	r3, #0
 800313a:	d003      	beq.n	8003144 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003148:	2220      	movs	r2, #32
 800314a:	409a      	lsls	r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	4013      	ands	r3, r2
 8003150:	2b00      	cmp	r3, #0
 8003152:	f000 808f 	beq.w	8003274 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0310 	and.w	r3, r3, #16
 8003160:	2b00      	cmp	r3, #0
 8003162:	f000 8087 	beq.w	8003274 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800316a:	2220      	movs	r2, #32
 800316c:	409a      	lsls	r2, r3
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b05      	cmp	r3, #5
 800317c:	d136      	bne.n	80031ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f022 0216 	bic.w	r2, r2, #22
 800318c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	695a      	ldr	r2, [r3, #20]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800319c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d103      	bne.n	80031ae <HAL_DMA_IRQHandler+0x1da>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d007      	beq.n	80031be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f022 0208 	bic.w	r2, r2, #8
 80031bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031c2:	223f      	movs	r2, #63	@ 0x3f
 80031c4:	409a      	lsls	r2, r3
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2201      	movs	r2, #1
 80031ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d07e      	beq.n	80032e0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	4798      	blx	r3
        }
        return;
 80031ea:	e079      	b.n	80032e0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d01d      	beq.n	8003236 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d10d      	bne.n	8003224 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800320c:	2b00      	cmp	r3, #0
 800320e:	d031      	beq.n	8003274 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	4798      	blx	r3
 8003218:	e02c      	b.n	8003274 <HAL_DMA_IRQHandler+0x2a0>
 800321a:	bf00      	nop
 800321c:	2000001c 	.word	0x2000001c
 8003220:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003228:	2b00      	cmp	r3, #0
 800322a:	d023      	beq.n	8003274 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	4798      	blx	r3
 8003234:	e01e      	b.n	8003274 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003240:	2b00      	cmp	r3, #0
 8003242:	d10f      	bne.n	8003264 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f022 0210 	bic.w	r2, r2, #16
 8003252:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003268:	2b00      	cmp	r3, #0
 800326a:	d003      	beq.n	8003274 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003278:	2b00      	cmp	r3, #0
 800327a:	d032      	beq.n	80032e2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003280:	f003 0301 	and.w	r3, r3, #1
 8003284:	2b00      	cmp	r3, #0
 8003286:	d022      	beq.n	80032ce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2205      	movs	r2, #5
 800328c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f022 0201 	bic.w	r2, r2, #1
 800329e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	3301      	adds	r3, #1
 80032a4:	60bb      	str	r3, [r7, #8]
 80032a6:	697a      	ldr	r2, [r7, #20]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d307      	bcc.n	80032bc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1f2      	bne.n	80032a0 <HAL_DMA_IRQHandler+0x2cc>
 80032ba:	e000      	b.n	80032be <HAL_DMA_IRQHandler+0x2ea>
          break;
 80032bc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2201      	movs	r2, #1
 80032c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d005      	beq.n	80032e2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	4798      	blx	r3
 80032de:	e000      	b.n	80032e2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80032e0:	bf00      	nop
    }
  }
}
 80032e2:	3718      	adds	r7, #24
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]
 80032f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003304:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	683a      	ldr	r2, [r7, #0]
 800330c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	2b40      	cmp	r3, #64	@ 0x40
 8003314:	d108      	bne.n	8003328 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68ba      	ldr	r2, [r7, #8]
 8003324:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003326:	e007      	b.n	8003338 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68ba      	ldr	r2, [r7, #8]
 800332e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	60da      	str	r2, [r3, #12]
}
 8003338:	bf00      	nop
 800333a:	3714      	adds	r7, #20
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	b2db      	uxtb	r3, r3
 8003352:	3b10      	subs	r3, #16
 8003354:	4a14      	ldr	r2, [pc, #80]	@ (80033a8 <DMA_CalcBaseAndBitshift+0x64>)
 8003356:	fba2 2303 	umull	r2, r3, r2, r3
 800335a:	091b      	lsrs	r3, r3, #4
 800335c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800335e:	4a13      	ldr	r2, [pc, #76]	@ (80033ac <DMA_CalcBaseAndBitshift+0x68>)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	4413      	add	r3, r2
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	461a      	mov	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2b03      	cmp	r3, #3
 8003370:	d909      	bls.n	8003386 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800337a:	f023 0303 	bic.w	r3, r3, #3
 800337e:	1d1a      	adds	r2, r3, #4
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	659a      	str	r2, [r3, #88]	@ 0x58
 8003384:	e007      	b.n	8003396 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800338e:	f023 0303 	bic.w	r3, r3, #3
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800339a:	4618      	mov	r0, r3
 800339c:	3714      	adds	r7, #20
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	aaaaaaab 	.word	0xaaaaaaab
 80033ac:	0800c15c 	.word	0x0800c15c

080033b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033b8:	2300      	movs	r3, #0
 80033ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d11f      	bne.n	800340a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	2b03      	cmp	r3, #3
 80033ce:	d856      	bhi.n	800347e <DMA_CheckFifoParam+0xce>
 80033d0:	a201      	add	r2, pc, #4	@ (adr r2, 80033d8 <DMA_CheckFifoParam+0x28>)
 80033d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d6:	bf00      	nop
 80033d8:	080033e9 	.word	0x080033e9
 80033dc:	080033fb 	.word	0x080033fb
 80033e0:	080033e9 	.word	0x080033e9
 80033e4:	0800347f 	.word	0x0800347f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d046      	beq.n	8003482 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033f8:	e043      	b.n	8003482 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033fe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003402:	d140      	bne.n	8003486 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003408:	e03d      	b.n	8003486 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003412:	d121      	bne.n	8003458 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	2b03      	cmp	r3, #3
 8003418:	d837      	bhi.n	800348a <DMA_CheckFifoParam+0xda>
 800341a:	a201      	add	r2, pc, #4	@ (adr r2, 8003420 <DMA_CheckFifoParam+0x70>)
 800341c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003420:	08003431 	.word	0x08003431
 8003424:	08003437 	.word	0x08003437
 8003428:	08003431 	.word	0x08003431
 800342c:	08003449 	.word	0x08003449
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	73fb      	strb	r3, [r7, #15]
      break;
 8003434:	e030      	b.n	8003498 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800343a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d025      	beq.n	800348e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003446:	e022      	b.n	800348e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800344c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003450:	d11f      	bne.n	8003492 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003456:	e01c      	b.n	8003492 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	2b02      	cmp	r3, #2
 800345c:	d903      	bls.n	8003466 <DMA_CheckFifoParam+0xb6>
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	2b03      	cmp	r3, #3
 8003462:	d003      	beq.n	800346c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003464:	e018      	b.n	8003498 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	73fb      	strb	r3, [r7, #15]
      break;
 800346a:	e015      	b.n	8003498 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003470:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00e      	beq.n	8003496 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	73fb      	strb	r3, [r7, #15]
      break;
 800347c:	e00b      	b.n	8003496 <DMA_CheckFifoParam+0xe6>
      break;
 800347e:	bf00      	nop
 8003480:	e00a      	b.n	8003498 <DMA_CheckFifoParam+0xe8>
      break;
 8003482:	bf00      	nop
 8003484:	e008      	b.n	8003498 <DMA_CheckFifoParam+0xe8>
      break;
 8003486:	bf00      	nop
 8003488:	e006      	b.n	8003498 <DMA_CheckFifoParam+0xe8>
      break;
 800348a:	bf00      	nop
 800348c:	e004      	b.n	8003498 <DMA_CheckFifoParam+0xe8>
      break;
 800348e:	bf00      	nop
 8003490:	e002      	b.n	8003498 <DMA_CheckFifoParam+0xe8>
      break;   
 8003492:	bf00      	nop
 8003494:	e000      	b.n	8003498 <DMA_CheckFifoParam+0xe8>
      break;
 8003496:	bf00      	nop
    }
  } 
  
  return status; 
 8003498:	7bfb      	ldrb	r3, [r7, #15]
}
 800349a:	4618      	mov	r0, r3
 800349c:	3714      	adds	r7, #20
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop

080034a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b089      	sub	sp, #36	@ 0x24
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034b2:	2300      	movs	r3, #0
 80034b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80034b6:	2300      	movs	r3, #0
 80034b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80034ba:	2300      	movs	r3, #0
 80034bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034be:	2300      	movs	r3, #0
 80034c0:	61fb      	str	r3, [r7, #28]
 80034c2:	e16b      	b.n	800379c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80034c4:	2201      	movs	r2, #1
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	fa02 f303 	lsl.w	r3, r2, r3
 80034cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	4013      	ands	r3, r2
 80034d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	429a      	cmp	r2, r3
 80034de:	f040 815a 	bne.w	8003796 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f003 0303 	and.w	r3, r3, #3
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d005      	beq.n	80034fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d130      	bne.n	800355c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	005b      	lsls	r3, r3, #1
 8003504:	2203      	movs	r2, #3
 8003506:	fa02 f303 	lsl.w	r3, r2, r3
 800350a:	43db      	mvns	r3, r3
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	4013      	ands	r3, r2
 8003510:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	68da      	ldr	r2, [r3, #12]
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	fa02 f303 	lsl.w	r3, r2, r3
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	4313      	orrs	r3, r2
 8003522:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	69ba      	ldr	r2, [r7, #24]
 8003528:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003530:	2201      	movs	r2, #1
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	fa02 f303 	lsl.w	r3, r2, r3
 8003538:	43db      	mvns	r3, r3
 800353a:	69ba      	ldr	r2, [r7, #24]
 800353c:	4013      	ands	r3, r2
 800353e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	091b      	lsrs	r3, r3, #4
 8003546:	f003 0201 	and.w	r2, r3, #1
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	fa02 f303 	lsl.w	r3, r2, r3
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	4313      	orrs	r3, r2
 8003554:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f003 0303 	and.w	r3, r3, #3
 8003564:	2b03      	cmp	r3, #3
 8003566:	d017      	beq.n	8003598 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	005b      	lsls	r3, r3, #1
 8003572:	2203      	movs	r2, #3
 8003574:	fa02 f303 	lsl.w	r3, r2, r3
 8003578:	43db      	mvns	r3, r3
 800357a:	69ba      	ldr	r2, [r7, #24]
 800357c:	4013      	ands	r3, r2
 800357e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	fa02 f303 	lsl.w	r3, r2, r3
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	4313      	orrs	r3, r2
 8003590:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f003 0303 	and.w	r3, r3, #3
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d123      	bne.n	80035ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	08da      	lsrs	r2, r3, #3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	3208      	adds	r2, #8
 80035ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	f003 0307 	and.w	r3, r3, #7
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	220f      	movs	r2, #15
 80035bc:	fa02 f303 	lsl.w	r3, r2, r3
 80035c0:	43db      	mvns	r3, r3
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	4013      	ands	r3, r2
 80035c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	691a      	ldr	r2, [r3, #16]
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	f003 0307 	and.w	r3, r3, #7
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	fa02 f303 	lsl.w	r3, r2, r3
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	4313      	orrs	r3, r2
 80035dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	08da      	lsrs	r2, r3, #3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	3208      	adds	r2, #8
 80035e6:	69b9      	ldr	r1, [r7, #24]
 80035e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	005b      	lsls	r3, r3, #1
 80035f6:	2203      	movs	r2, #3
 80035f8:	fa02 f303 	lsl.w	r3, r2, r3
 80035fc:	43db      	mvns	r3, r3
 80035fe:	69ba      	ldr	r2, [r7, #24]
 8003600:	4013      	ands	r3, r2
 8003602:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f003 0203 	and.w	r2, r3, #3
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	005b      	lsls	r3, r3, #1
 8003610:	fa02 f303 	lsl.w	r3, r2, r3
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	4313      	orrs	r3, r2
 8003618:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003628:	2b00      	cmp	r3, #0
 800362a:	f000 80b4 	beq.w	8003796 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800362e:	2300      	movs	r3, #0
 8003630:	60fb      	str	r3, [r7, #12]
 8003632:	4b60      	ldr	r3, [pc, #384]	@ (80037b4 <HAL_GPIO_Init+0x30c>)
 8003634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003636:	4a5f      	ldr	r2, [pc, #380]	@ (80037b4 <HAL_GPIO_Init+0x30c>)
 8003638:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800363c:	6453      	str	r3, [r2, #68]	@ 0x44
 800363e:	4b5d      	ldr	r3, [pc, #372]	@ (80037b4 <HAL_GPIO_Init+0x30c>)
 8003640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003642:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003646:	60fb      	str	r3, [r7, #12]
 8003648:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800364a:	4a5b      	ldr	r2, [pc, #364]	@ (80037b8 <HAL_GPIO_Init+0x310>)
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	089b      	lsrs	r3, r3, #2
 8003650:	3302      	adds	r3, #2
 8003652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003656:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	f003 0303 	and.w	r3, r3, #3
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	220f      	movs	r2, #15
 8003662:	fa02 f303 	lsl.w	r3, r2, r3
 8003666:	43db      	mvns	r3, r3
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	4013      	ands	r3, r2
 800366c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a52      	ldr	r2, [pc, #328]	@ (80037bc <HAL_GPIO_Init+0x314>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d02b      	beq.n	80036ce <HAL_GPIO_Init+0x226>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a51      	ldr	r2, [pc, #324]	@ (80037c0 <HAL_GPIO_Init+0x318>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d025      	beq.n	80036ca <HAL_GPIO_Init+0x222>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a50      	ldr	r2, [pc, #320]	@ (80037c4 <HAL_GPIO_Init+0x31c>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d01f      	beq.n	80036c6 <HAL_GPIO_Init+0x21e>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a4f      	ldr	r2, [pc, #316]	@ (80037c8 <HAL_GPIO_Init+0x320>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d019      	beq.n	80036c2 <HAL_GPIO_Init+0x21a>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a4e      	ldr	r2, [pc, #312]	@ (80037cc <HAL_GPIO_Init+0x324>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d013      	beq.n	80036be <HAL_GPIO_Init+0x216>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a4d      	ldr	r2, [pc, #308]	@ (80037d0 <HAL_GPIO_Init+0x328>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d00d      	beq.n	80036ba <HAL_GPIO_Init+0x212>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a4c      	ldr	r2, [pc, #304]	@ (80037d4 <HAL_GPIO_Init+0x32c>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d007      	beq.n	80036b6 <HAL_GPIO_Init+0x20e>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a4b      	ldr	r2, [pc, #300]	@ (80037d8 <HAL_GPIO_Init+0x330>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d101      	bne.n	80036b2 <HAL_GPIO_Init+0x20a>
 80036ae:	2307      	movs	r3, #7
 80036b0:	e00e      	b.n	80036d0 <HAL_GPIO_Init+0x228>
 80036b2:	2308      	movs	r3, #8
 80036b4:	e00c      	b.n	80036d0 <HAL_GPIO_Init+0x228>
 80036b6:	2306      	movs	r3, #6
 80036b8:	e00a      	b.n	80036d0 <HAL_GPIO_Init+0x228>
 80036ba:	2305      	movs	r3, #5
 80036bc:	e008      	b.n	80036d0 <HAL_GPIO_Init+0x228>
 80036be:	2304      	movs	r3, #4
 80036c0:	e006      	b.n	80036d0 <HAL_GPIO_Init+0x228>
 80036c2:	2303      	movs	r3, #3
 80036c4:	e004      	b.n	80036d0 <HAL_GPIO_Init+0x228>
 80036c6:	2302      	movs	r3, #2
 80036c8:	e002      	b.n	80036d0 <HAL_GPIO_Init+0x228>
 80036ca:	2301      	movs	r3, #1
 80036cc:	e000      	b.n	80036d0 <HAL_GPIO_Init+0x228>
 80036ce:	2300      	movs	r3, #0
 80036d0:	69fa      	ldr	r2, [r7, #28]
 80036d2:	f002 0203 	and.w	r2, r2, #3
 80036d6:	0092      	lsls	r2, r2, #2
 80036d8:	4093      	lsls	r3, r2
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	4313      	orrs	r3, r2
 80036de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036e0:	4935      	ldr	r1, [pc, #212]	@ (80037b8 <HAL_GPIO_Init+0x310>)
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	089b      	lsrs	r3, r3, #2
 80036e6:	3302      	adds	r3, #2
 80036e8:	69ba      	ldr	r2, [r7, #24]
 80036ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036ee:	4b3b      	ldr	r3, [pc, #236]	@ (80037dc <HAL_GPIO_Init+0x334>)
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	43db      	mvns	r3, r3
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	4013      	ands	r3, r2
 80036fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d003      	beq.n	8003712 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800370a:	69ba      	ldr	r2, [r7, #24]
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	4313      	orrs	r3, r2
 8003710:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003712:	4a32      	ldr	r2, [pc, #200]	@ (80037dc <HAL_GPIO_Init+0x334>)
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003718:	4b30      	ldr	r3, [pc, #192]	@ (80037dc <HAL_GPIO_Init+0x334>)
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	43db      	mvns	r3, r3
 8003722:	69ba      	ldr	r2, [r7, #24]
 8003724:	4013      	ands	r3, r2
 8003726:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d003      	beq.n	800373c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	4313      	orrs	r3, r2
 800373a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800373c:	4a27      	ldr	r2, [pc, #156]	@ (80037dc <HAL_GPIO_Init+0x334>)
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003742:	4b26      	ldr	r3, [pc, #152]	@ (80037dc <HAL_GPIO_Init+0x334>)
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	43db      	mvns	r3, r3
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	4013      	ands	r3, r2
 8003750:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d003      	beq.n	8003766 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800375e:	69ba      	ldr	r2, [r7, #24]
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	4313      	orrs	r3, r2
 8003764:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003766:	4a1d      	ldr	r2, [pc, #116]	@ (80037dc <HAL_GPIO_Init+0x334>)
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800376c:	4b1b      	ldr	r3, [pc, #108]	@ (80037dc <HAL_GPIO_Init+0x334>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	43db      	mvns	r3, r3
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	4013      	ands	r3, r2
 800377a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d003      	beq.n	8003790 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003788:	69ba      	ldr	r2, [r7, #24]
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	4313      	orrs	r3, r2
 800378e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003790:	4a12      	ldr	r2, [pc, #72]	@ (80037dc <HAL_GPIO_Init+0x334>)
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	3301      	adds	r3, #1
 800379a:	61fb      	str	r3, [r7, #28]
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	2b0f      	cmp	r3, #15
 80037a0:	f67f ae90 	bls.w	80034c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037a4:	bf00      	nop
 80037a6:	bf00      	nop
 80037a8:	3724      	adds	r7, #36	@ 0x24
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	40023800 	.word	0x40023800
 80037b8:	40013800 	.word	0x40013800
 80037bc:	40020000 	.word	0x40020000
 80037c0:	40020400 	.word	0x40020400
 80037c4:	40020800 	.word	0x40020800
 80037c8:	40020c00 	.word	0x40020c00
 80037cc:	40021000 	.word	0x40021000
 80037d0:	40021400 	.word	0x40021400
 80037d4:	40021800 	.word	0x40021800
 80037d8:	40021c00 	.word	0x40021c00
 80037dc:	40013c00 	.word	0x40013c00

080037e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b085      	sub	sp, #20
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	460b      	mov	r3, r1
 80037ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	691a      	ldr	r2, [r3, #16]
 80037f0:	887b      	ldrh	r3, [r7, #2]
 80037f2:	4013      	ands	r3, r2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d002      	beq.n	80037fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80037f8:	2301      	movs	r3, #1
 80037fa:	73fb      	strb	r3, [r7, #15]
 80037fc:	e001      	b.n	8003802 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80037fe:	2300      	movs	r3, #0
 8003800:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003802:	7bfb      	ldrb	r3, [r7, #15]
}
 8003804:	4618      	mov	r0, r3
 8003806:	3714      	adds	r7, #20
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	460b      	mov	r3, r1
 800381a:	807b      	strh	r3, [r7, #2]
 800381c:	4613      	mov	r3, r2
 800381e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003820:	787b      	ldrb	r3, [r7, #1]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d003      	beq.n	800382e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003826:	887a      	ldrh	r2, [r7, #2]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800382c:	e003      	b.n	8003836 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800382e:	887b      	ldrh	r3, [r7, #2]
 8003830:	041a      	lsls	r2, r3, #16
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	619a      	str	r2, [r3, #24]
}
 8003836:	bf00      	nop
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
	...

08003844 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	4603      	mov	r3, r0
 800384c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800384e:	4b08      	ldr	r3, [pc, #32]	@ (8003870 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003850:	695a      	ldr	r2, [r3, #20]
 8003852:	88fb      	ldrh	r3, [r7, #6]
 8003854:	4013      	ands	r3, r2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d006      	beq.n	8003868 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800385a:	4a05      	ldr	r2, [pc, #20]	@ (8003870 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800385c:	88fb      	ldrh	r3, [r7, #6]
 800385e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003860:	88fb      	ldrh	r3, [r7, #6]
 8003862:	4618      	mov	r0, r3
 8003864:	f7fe f880 	bl	8001968 <HAL_GPIO_EXTI_Callback>
  }
}
 8003868:	bf00      	nop
 800386a:	3708      	adds	r7, #8
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	40013c00 	.word	0x40013c00

08003874 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b086      	sub	sp, #24
 8003878:	af02      	add	r7, sp, #8
 800387a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d101      	bne.n	8003886 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e059      	b.n	800393a <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8003892:	b2db      	uxtb	r3, r3
 8003894:	2b00      	cmp	r3, #0
 8003896:	d106      	bne.n	80038a6 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f007 fccf 	bl	800b244 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2203      	movs	r2, #3
 80038aa:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038b4:	d102      	bne.n	80038bc <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f004 fadc 	bl	8007e7e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6818      	ldr	r0, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	7c1a      	ldrb	r2, [r3, #16]
 80038ce:	f88d 2000 	strb.w	r2, [sp]
 80038d2:	3304      	adds	r3, #4
 80038d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038d6:	f004 fa5d 	bl	8007d94 <USB_CoreInit>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d005      	beq.n	80038ec <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2202      	movs	r2, #2
 80038e4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e026      	b.n	800393a <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2101      	movs	r1, #1
 80038f2:	4618      	mov	r0, r3
 80038f4:	f004 fad4 	bl	8007ea0 <USB_SetCurrentMode>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d005      	beq.n	800390a <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2202      	movs	r2, #2
 8003902:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e017      	b.n	800393a <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6818      	ldr	r0, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	7c1a      	ldrb	r2, [r3, #16]
 8003912:	f88d 2000 	strb.w	r2, [sp]
 8003916:	3304      	adds	r3, #4
 8003918:	cb0e      	ldmia	r3, {r1, r2, r3}
 800391a:	f004 fc7d 	bl	8008218 <USB_HostInit>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d005      	beq.n	8003930 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2202      	movs	r2, #2
 8003928:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e004      	b.n	800393a <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3710      	adds	r7, #16
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8003942:	b590      	push	{r4, r7, lr}
 8003944:	b08b      	sub	sp, #44	@ 0x2c
 8003946:	af04      	add	r7, sp, #16
 8003948:	6078      	str	r0, [r7, #4]
 800394a:	4608      	mov	r0, r1
 800394c:	4611      	mov	r1, r2
 800394e:	461a      	mov	r2, r3
 8003950:	4603      	mov	r3, r0
 8003952:	70fb      	strb	r3, [r7, #3]
 8003954:	460b      	mov	r3, r1
 8003956:	70bb      	strb	r3, [r7, #2]
 8003958:	4613      	mov	r3, r2
 800395a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800395c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800395e:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003966:	2b01      	cmp	r3, #1
 8003968:	d101      	bne.n	800396e <HAL_HCD_HC_Init+0x2c>
 800396a:	2302      	movs	r3, #2
 800396c:	e09d      	b.n	8003aaa <HAL_HCD_HC_Init+0x168>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2201      	movs	r2, #1
 8003972:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8003976:	78fa      	ldrb	r2, [r7, #3]
 8003978:	6879      	ldr	r1, [r7, #4]
 800397a:	4613      	mov	r3, r2
 800397c:	011b      	lsls	r3, r3, #4
 800397e:	1a9b      	subs	r3, r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	440b      	add	r3, r1
 8003984:	3319      	adds	r3, #25
 8003986:	2200      	movs	r2, #0
 8003988:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800398a:	78fa      	ldrb	r2, [r7, #3]
 800398c:	6879      	ldr	r1, [r7, #4]
 800398e:	4613      	mov	r3, r2
 8003990:	011b      	lsls	r3, r3, #4
 8003992:	1a9b      	subs	r3, r3, r2
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	440b      	add	r3, r1
 8003998:	3314      	adds	r3, #20
 800399a:	787a      	ldrb	r2, [r7, #1]
 800399c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800399e:	78fa      	ldrb	r2, [r7, #3]
 80039a0:	6879      	ldr	r1, [r7, #4]
 80039a2:	4613      	mov	r3, r2
 80039a4:	011b      	lsls	r3, r3, #4
 80039a6:	1a9b      	subs	r3, r3, r2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	440b      	add	r3, r1
 80039ac:	3315      	adds	r3, #21
 80039ae:	78fa      	ldrb	r2, [r7, #3]
 80039b0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80039b2:	78fa      	ldrb	r2, [r7, #3]
 80039b4:	6879      	ldr	r1, [r7, #4]
 80039b6:	4613      	mov	r3, r2
 80039b8:	011b      	lsls	r3, r3, #4
 80039ba:	1a9b      	subs	r3, r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	440b      	add	r3, r1
 80039c0:	3326      	adds	r3, #38	@ 0x26
 80039c2:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80039c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80039c8:	78fa      	ldrb	r2, [r7, #3]
 80039ca:	78bb      	ldrb	r3, [r7, #2]
 80039cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80039d0:	b2d8      	uxtb	r0, r3
 80039d2:	6879      	ldr	r1, [r7, #4]
 80039d4:	4613      	mov	r3, r2
 80039d6:	011b      	lsls	r3, r3, #4
 80039d8:	1a9b      	subs	r3, r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	440b      	add	r3, r1
 80039de:	3316      	adds	r3, #22
 80039e0:	4602      	mov	r2, r0
 80039e2:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80039e4:	78fb      	ldrb	r3, [r7, #3]
 80039e6:	4619      	mov	r1, r3
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 fbc7 	bl	800417c <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80039ee:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	da0a      	bge.n	8003a0c <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80039f6:	78fa      	ldrb	r2, [r7, #3]
 80039f8:	6879      	ldr	r1, [r7, #4]
 80039fa:	4613      	mov	r3, r2
 80039fc:	011b      	lsls	r3, r3, #4
 80039fe:	1a9b      	subs	r3, r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	440b      	add	r3, r1
 8003a04:	3317      	adds	r3, #23
 8003a06:	2201      	movs	r2, #1
 8003a08:	701a      	strb	r2, [r3, #0]
 8003a0a:	e009      	b.n	8003a20 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003a0c:	78fa      	ldrb	r2, [r7, #3]
 8003a0e:	6879      	ldr	r1, [r7, #4]
 8003a10:	4613      	mov	r3, r2
 8003a12:	011b      	lsls	r3, r3, #4
 8003a14:	1a9b      	subs	r3, r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	440b      	add	r3, r1
 8003a1a:	3317      	adds	r3, #23
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4618      	mov	r0, r3
 8003a26:	f004 fd5b 	bl	80084e0 <USB_GetHostSpeed>
 8003a2a:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8003a2c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d10b      	bne.n	8003a4c <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8003a34:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d107      	bne.n	8003a4c <HAL_HCD_HC_Init+0x10a>
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d104      	bne.n	8003a4c <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	2bbc      	cmp	r3, #188	@ 0xbc
 8003a46:	d901      	bls.n	8003a4c <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8003a48:	23bc      	movs	r3, #188	@ 0xbc
 8003a4a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8003a4c:	78fa      	ldrb	r2, [r7, #3]
 8003a4e:	6879      	ldr	r1, [r7, #4]
 8003a50:	4613      	mov	r3, r2
 8003a52:	011b      	lsls	r3, r3, #4
 8003a54:	1a9b      	subs	r3, r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	440b      	add	r3, r1
 8003a5a:	3318      	adds	r3, #24
 8003a5c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8003a60:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8003a62:	78fa      	ldrb	r2, [r7, #3]
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	b298      	uxth	r0, r3
 8003a68:	6879      	ldr	r1, [r7, #4]
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	011b      	lsls	r3, r3, #4
 8003a6e:	1a9b      	subs	r3, r3, r2
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	440b      	add	r3, r1
 8003a74:	3328      	adds	r3, #40	@ 0x28
 8003a76:	4602      	mov	r2, r0
 8003a78:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6818      	ldr	r0, [r3, #0]
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	787c      	ldrb	r4, [r7, #1]
 8003a84:	78ba      	ldrb	r2, [r7, #2]
 8003a86:	78f9      	ldrb	r1, [r7, #3]
 8003a88:	9302      	str	r3, [sp, #8]
 8003a8a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003a8e:	9301      	str	r3, [sp, #4]
 8003a90:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003a94:	9300      	str	r3, [sp, #0]
 8003a96:	4623      	mov	r3, r4
 8003a98:	f004 fd4a 	bl	8008530 <USB_HC_Init>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8003aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	371c      	adds	r7, #28
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd90      	pop	{r4, r7, pc}

08003ab2 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b084      	sub	sp, #16
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
 8003aba:	460b      	mov	r3, r1
 8003abc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d101      	bne.n	8003ad0 <HAL_HCD_HC_Halt+0x1e>
 8003acc:	2302      	movs	r3, #2
 8003ace:	e00f      	b.n	8003af0 <HAL_HCD_HC_Halt+0x3e>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	78fa      	ldrb	r2, [r7, #3]
 8003ade:	4611      	mov	r1, r2
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f005 f8dc 	bl	8008c9e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8003aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3710      	adds	r7, #16
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	4608      	mov	r0, r1
 8003b02:	4611      	mov	r1, r2
 8003b04:	461a      	mov	r2, r3
 8003b06:	4603      	mov	r3, r0
 8003b08:	70fb      	strb	r3, [r7, #3]
 8003b0a:	460b      	mov	r3, r1
 8003b0c:	70bb      	strb	r3, [r7, #2]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003b12:	78fa      	ldrb	r2, [r7, #3]
 8003b14:	6879      	ldr	r1, [r7, #4]
 8003b16:	4613      	mov	r3, r2
 8003b18:	011b      	lsls	r3, r3, #4
 8003b1a:	1a9b      	subs	r3, r3, r2
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	440b      	add	r3, r1
 8003b20:	3317      	adds	r3, #23
 8003b22:	78ba      	ldrb	r2, [r7, #2]
 8003b24:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003b26:	78fa      	ldrb	r2, [r7, #3]
 8003b28:	6879      	ldr	r1, [r7, #4]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	011b      	lsls	r3, r3, #4
 8003b2e:	1a9b      	subs	r3, r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	440b      	add	r3, r1
 8003b34:	3326      	adds	r3, #38	@ 0x26
 8003b36:	787a      	ldrb	r2, [r7, #1]
 8003b38:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003b3a:	7c3b      	ldrb	r3, [r7, #16]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d114      	bne.n	8003b6a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003b40:	78fa      	ldrb	r2, [r7, #3]
 8003b42:	6879      	ldr	r1, [r7, #4]
 8003b44:	4613      	mov	r3, r2
 8003b46:	011b      	lsls	r3, r3, #4
 8003b48:	1a9b      	subs	r3, r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	440b      	add	r3, r1
 8003b4e:	332a      	adds	r3, #42	@ 0x2a
 8003b50:	2203      	movs	r2, #3
 8003b52:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003b54:	78fa      	ldrb	r2, [r7, #3]
 8003b56:	6879      	ldr	r1, [r7, #4]
 8003b58:	4613      	mov	r3, r2
 8003b5a:	011b      	lsls	r3, r3, #4
 8003b5c:	1a9b      	subs	r3, r3, r2
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	440b      	add	r3, r1
 8003b62:	3319      	adds	r3, #25
 8003b64:	7f3a      	ldrb	r2, [r7, #28]
 8003b66:	701a      	strb	r2, [r3, #0]
 8003b68:	e009      	b.n	8003b7e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003b6a:	78fa      	ldrb	r2, [r7, #3]
 8003b6c:	6879      	ldr	r1, [r7, #4]
 8003b6e:	4613      	mov	r3, r2
 8003b70:	011b      	lsls	r3, r3, #4
 8003b72:	1a9b      	subs	r3, r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	440b      	add	r3, r1
 8003b78:	332a      	adds	r3, #42	@ 0x2a
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003b7e:	787b      	ldrb	r3, [r7, #1]
 8003b80:	2b03      	cmp	r3, #3
 8003b82:	f200 8102 	bhi.w	8003d8a <HAL_HCD_HC_SubmitRequest+0x292>
 8003b86:	a201      	add	r2, pc, #4	@ (adr r2, 8003b8c <HAL_HCD_HC_SubmitRequest+0x94>)
 8003b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b8c:	08003b9d 	.word	0x08003b9d
 8003b90:	08003d75 	.word	0x08003d75
 8003b94:	08003c61 	.word	0x08003c61
 8003b98:	08003ceb 	.word	0x08003ceb
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8003b9c:	7c3b      	ldrb	r3, [r7, #16]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	f040 80f5 	bne.w	8003d8e <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8003ba4:	78bb      	ldrb	r3, [r7, #2]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d12d      	bne.n	8003c06 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8003baa:	8b3b      	ldrh	r3, [r7, #24]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d109      	bne.n	8003bc4 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8003bb0:	78fa      	ldrb	r2, [r7, #3]
 8003bb2:	6879      	ldr	r1, [r7, #4]
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	011b      	lsls	r3, r3, #4
 8003bb8:	1a9b      	subs	r3, r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	440b      	add	r3, r1
 8003bbe:	333d      	adds	r3, #61	@ 0x3d
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8003bc4:	78fa      	ldrb	r2, [r7, #3]
 8003bc6:	6879      	ldr	r1, [r7, #4]
 8003bc8:	4613      	mov	r3, r2
 8003bca:	011b      	lsls	r3, r3, #4
 8003bcc:	1a9b      	subs	r3, r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	440b      	add	r3, r1
 8003bd2:	333d      	adds	r3, #61	@ 0x3d
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d10a      	bne.n	8003bf0 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003bda:	78fa      	ldrb	r2, [r7, #3]
 8003bdc:	6879      	ldr	r1, [r7, #4]
 8003bde:	4613      	mov	r3, r2
 8003be0:	011b      	lsls	r3, r3, #4
 8003be2:	1a9b      	subs	r3, r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	440b      	add	r3, r1
 8003be8:	332a      	adds	r3, #42	@ 0x2a
 8003bea:	2200      	movs	r2, #0
 8003bec:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8003bee:	e0ce      	b.n	8003d8e <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003bf0:	78fa      	ldrb	r2, [r7, #3]
 8003bf2:	6879      	ldr	r1, [r7, #4]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	011b      	lsls	r3, r3, #4
 8003bf8:	1a9b      	subs	r3, r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	440b      	add	r3, r1
 8003bfe:	332a      	adds	r3, #42	@ 0x2a
 8003c00:	2202      	movs	r2, #2
 8003c02:	701a      	strb	r2, [r3, #0]
      break;
 8003c04:	e0c3      	b.n	8003d8e <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8003c06:	78fa      	ldrb	r2, [r7, #3]
 8003c08:	6879      	ldr	r1, [r7, #4]
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	011b      	lsls	r3, r3, #4
 8003c0e:	1a9b      	subs	r3, r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	440b      	add	r3, r1
 8003c14:	331a      	adds	r3, #26
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	f040 80b8 	bne.w	8003d8e <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8003c1e:	78fa      	ldrb	r2, [r7, #3]
 8003c20:	6879      	ldr	r1, [r7, #4]
 8003c22:	4613      	mov	r3, r2
 8003c24:	011b      	lsls	r3, r3, #4
 8003c26:	1a9b      	subs	r3, r3, r2
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	440b      	add	r3, r1
 8003c2c:	333c      	adds	r3, #60	@ 0x3c
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d10a      	bne.n	8003c4a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003c34:	78fa      	ldrb	r2, [r7, #3]
 8003c36:	6879      	ldr	r1, [r7, #4]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	011b      	lsls	r3, r3, #4
 8003c3c:	1a9b      	subs	r3, r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	440b      	add	r3, r1
 8003c42:	332a      	adds	r3, #42	@ 0x2a
 8003c44:	2200      	movs	r2, #0
 8003c46:	701a      	strb	r2, [r3, #0]
      break;
 8003c48:	e0a1      	b.n	8003d8e <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003c4a:	78fa      	ldrb	r2, [r7, #3]
 8003c4c:	6879      	ldr	r1, [r7, #4]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	011b      	lsls	r3, r3, #4
 8003c52:	1a9b      	subs	r3, r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	440b      	add	r3, r1
 8003c58:	332a      	adds	r3, #42	@ 0x2a
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	701a      	strb	r2, [r3, #0]
      break;
 8003c5e:	e096      	b.n	8003d8e <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003c60:	78bb      	ldrb	r3, [r7, #2]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d120      	bne.n	8003ca8 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003c66:	78fa      	ldrb	r2, [r7, #3]
 8003c68:	6879      	ldr	r1, [r7, #4]
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	011b      	lsls	r3, r3, #4
 8003c6e:	1a9b      	subs	r3, r3, r2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	440b      	add	r3, r1
 8003c74:	333d      	adds	r3, #61	@ 0x3d
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d10a      	bne.n	8003c92 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003c7c:	78fa      	ldrb	r2, [r7, #3]
 8003c7e:	6879      	ldr	r1, [r7, #4]
 8003c80:	4613      	mov	r3, r2
 8003c82:	011b      	lsls	r3, r3, #4
 8003c84:	1a9b      	subs	r3, r3, r2
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	440b      	add	r3, r1
 8003c8a:	332a      	adds	r3, #42	@ 0x2a
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003c90:	e07e      	b.n	8003d90 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003c92:	78fa      	ldrb	r2, [r7, #3]
 8003c94:	6879      	ldr	r1, [r7, #4]
 8003c96:	4613      	mov	r3, r2
 8003c98:	011b      	lsls	r3, r3, #4
 8003c9a:	1a9b      	subs	r3, r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	440b      	add	r3, r1
 8003ca0:	332a      	adds	r3, #42	@ 0x2a
 8003ca2:	2202      	movs	r2, #2
 8003ca4:	701a      	strb	r2, [r3, #0]
      break;
 8003ca6:	e073      	b.n	8003d90 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003ca8:	78fa      	ldrb	r2, [r7, #3]
 8003caa:	6879      	ldr	r1, [r7, #4]
 8003cac:	4613      	mov	r3, r2
 8003cae:	011b      	lsls	r3, r3, #4
 8003cb0:	1a9b      	subs	r3, r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	440b      	add	r3, r1
 8003cb6:	333c      	adds	r3, #60	@ 0x3c
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d10a      	bne.n	8003cd4 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003cbe:	78fa      	ldrb	r2, [r7, #3]
 8003cc0:	6879      	ldr	r1, [r7, #4]
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	011b      	lsls	r3, r3, #4
 8003cc6:	1a9b      	subs	r3, r3, r2
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	440b      	add	r3, r1
 8003ccc:	332a      	adds	r3, #42	@ 0x2a
 8003cce:	2200      	movs	r2, #0
 8003cd0:	701a      	strb	r2, [r3, #0]
      break;
 8003cd2:	e05d      	b.n	8003d90 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003cd4:	78fa      	ldrb	r2, [r7, #3]
 8003cd6:	6879      	ldr	r1, [r7, #4]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	011b      	lsls	r3, r3, #4
 8003cdc:	1a9b      	subs	r3, r3, r2
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	440b      	add	r3, r1
 8003ce2:	332a      	adds	r3, #42	@ 0x2a
 8003ce4:	2202      	movs	r2, #2
 8003ce6:	701a      	strb	r2, [r3, #0]
      break;
 8003ce8:	e052      	b.n	8003d90 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003cea:	78bb      	ldrb	r3, [r7, #2]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d120      	bne.n	8003d32 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003cf0:	78fa      	ldrb	r2, [r7, #3]
 8003cf2:	6879      	ldr	r1, [r7, #4]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	011b      	lsls	r3, r3, #4
 8003cf8:	1a9b      	subs	r3, r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	440b      	add	r3, r1
 8003cfe:	333d      	adds	r3, #61	@ 0x3d
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d10a      	bne.n	8003d1c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003d06:	78fa      	ldrb	r2, [r7, #3]
 8003d08:	6879      	ldr	r1, [r7, #4]
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	011b      	lsls	r3, r3, #4
 8003d0e:	1a9b      	subs	r3, r3, r2
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	440b      	add	r3, r1
 8003d14:	332a      	adds	r3, #42	@ 0x2a
 8003d16:	2200      	movs	r2, #0
 8003d18:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003d1a:	e039      	b.n	8003d90 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003d1c:	78fa      	ldrb	r2, [r7, #3]
 8003d1e:	6879      	ldr	r1, [r7, #4]
 8003d20:	4613      	mov	r3, r2
 8003d22:	011b      	lsls	r3, r3, #4
 8003d24:	1a9b      	subs	r3, r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	440b      	add	r3, r1
 8003d2a:	332a      	adds	r3, #42	@ 0x2a
 8003d2c:	2202      	movs	r2, #2
 8003d2e:	701a      	strb	r2, [r3, #0]
      break;
 8003d30:	e02e      	b.n	8003d90 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003d32:	78fa      	ldrb	r2, [r7, #3]
 8003d34:	6879      	ldr	r1, [r7, #4]
 8003d36:	4613      	mov	r3, r2
 8003d38:	011b      	lsls	r3, r3, #4
 8003d3a:	1a9b      	subs	r3, r3, r2
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	440b      	add	r3, r1
 8003d40:	333c      	adds	r3, #60	@ 0x3c
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d10a      	bne.n	8003d5e <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003d48:	78fa      	ldrb	r2, [r7, #3]
 8003d4a:	6879      	ldr	r1, [r7, #4]
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	011b      	lsls	r3, r3, #4
 8003d50:	1a9b      	subs	r3, r3, r2
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	440b      	add	r3, r1
 8003d56:	332a      	adds	r3, #42	@ 0x2a
 8003d58:	2200      	movs	r2, #0
 8003d5a:	701a      	strb	r2, [r3, #0]
      break;
 8003d5c:	e018      	b.n	8003d90 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003d5e:	78fa      	ldrb	r2, [r7, #3]
 8003d60:	6879      	ldr	r1, [r7, #4]
 8003d62:	4613      	mov	r3, r2
 8003d64:	011b      	lsls	r3, r3, #4
 8003d66:	1a9b      	subs	r3, r3, r2
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	440b      	add	r3, r1
 8003d6c:	332a      	adds	r3, #42	@ 0x2a
 8003d6e:	2202      	movs	r2, #2
 8003d70:	701a      	strb	r2, [r3, #0]
      break;
 8003d72:	e00d      	b.n	8003d90 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003d74:	78fa      	ldrb	r2, [r7, #3]
 8003d76:	6879      	ldr	r1, [r7, #4]
 8003d78:	4613      	mov	r3, r2
 8003d7a:	011b      	lsls	r3, r3, #4
 8003d7c:	1a9b      	subs	r3, r3, r2
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	440b      	add	r3, r1
 8003d82:	332a      	adds	r3, #42	@ 0x2a
 8003d84:	2200      	movs	r2, #0
 8003d86:	701a      	strb	r2, [r3, #0]
      break;
 8003d88:	e002      	b.n	8003d90 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8003d8a:	bf00      	nop
 8003d8c:	e000      	b.n	8003d90 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8003d8e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003d90:	78fa      	ldrb	r2, [r7, #3]
 8003d92:	6879      	ldr	r1, [r7, #4]
 8003d94:	4613      	mov	r3, r2
 8003d96:	011b      	lsls	r3, r3, #4
 8003d98:	1a9b      	subs	r3, r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	440b      	add	r3, r1
 8003d9e:	332c      	adds	r3, #44	@ 0x2c
 8003da0:	697a      	ldr	r2, [r7, #20]
 8003da2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003da4:	78fa      	ldrb	r2, [r7, #3]
 8003da6:	8b39      	ldrh	r1, [r7, #24]
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	4613      	mov	r3, r2
 8003dac:	011b      	lsls	r3, r3, #4
 8003dae:	1a9b      	subs	r3, r3, r2
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	4403      	add	r3, r0
 8003db4:	3334      	adds	r3, #52	@ 0x34
 8003db6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003db8:	78fa      	ldrb	r2, [r7, #3]
 8003dba:	6879      	ldr	r1, [r7, #4]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	011b      	lsls	r3, r3, #4
 8003dc0:	1a9b      	subs	r3, r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	440b      	add	r3, r1
 8003dc6:	334c      	adds	r3, #76	@ 0x4c
 8003dc8:	2200      	movs	r2, #0
 8003dca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003dcc:	78fa      	ldrb	r2, [r7, #3]
 8003dce:	6879      	ldr	r1, [r7, #4]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	011b      	lsls	r3, r3, #4
 8003dd4:	1a9b      	subs	r3, r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	440b      	add	r3, r1
 8003dda:	3338      	adds	r3, #56	@ 0x38
 8003ddc:	2200      	movs	r2, #0
 8003dde:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003de0:	78fa      	ldrb	r2, [r7, #3]
 8003de2:	6879      	ldr	r1, [r7, #4]
 8003de4:	4613      	mov	r3, r2
 8003de6:	011b      	lsls	r3, r3, #4
 8003de8:	1a9b      	subs	r3, r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	440b      	add	r3, r1
 8003dee:	3315      	adds	r3, #21
 8003df0:	78fa      	ldrb	r2, [r7, #3]
 8003df2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003df4:	78fa      	ldrb	r2, [r7, #3]
 8003df6:	6879      	ldr	r1, [r7, #4]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	011b      	lsls	r3, r3, #4
 8003dfc:	1a9b      	subs	r3, r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	440b      	add	r3, r1
 8003e02:	334d      	adds	r3, #77	@ 0x4d
 8003e04:	2200      	movs	r2, #0
 8003e06:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6818      	ldr	r0, [r3, #0]
 8003e0c:	78fa      	ldrb	r2, [r7, #3]
 8003e0e:	4613      	mov	r3, r2
 8003e10:	011b      	lsls	r3, r3, #4
 8003e12:	1a9b      	subs	r3, r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	3310      	adds	r3, #16
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	1d19      	adds	r1, r3, #4
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	799b      	ldrb	r3, [r3, #6]
 8003e22:	461a      	mov	r2, r3
 8003e24:	f004 fcb0 	bl	8008788 <USB_HC_StartXfer>
 8003e28:	4603      	mov	r3, r0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3708      	adds	r7, #8
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop

08003e34 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b086      	sub	sp, #24
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f004 f99e 	bl	800818c <USB_GetMode>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	f040 80fb 	bne.w	800404e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f004 f961 	bl	8008124 <USB_ReadInterrupts>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	f000 80f1 	beq.w	800404c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f004 f958 	bl	8008124 <USB_ReadInterrupts>
 8003e74:	4603      	mov	r3, r0
 8003e76:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e7a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e7e:	d104      	bne.n	8003e8a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003e88:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f004 f948 	bl	8008124 <USB_ReadInterrupts>
 8003e94:	4603      	mov	r3, r0
 8003e96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e9e:	d104      	bne.n	8003eaa <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003ea8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f004 f938 	bl	8008124 <USB_ReadInterrupts>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003eba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ebe:	d104      	bne.n	8003eca <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003ec8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f004 f928 	bl	8008124 <USB_ReadInterrupts>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d103      	bne.n	8003ee6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2202      	movs	r2, #2
 8003ee4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f004 f91a 	bl	8008124 <USB_ReadInterrupts>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ef6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003efa:	d120      	bne.n	8003f3e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003f04:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d113      	bne.n	8003f3e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003f16:	2110      	movs	r1, #16
 8003f18:	6938      	ldr	r0, [r7, #16]
 8003f1a:	f004 f80d 	bl	8007f38 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003f1e:	6938      	ldr	r0, [r7, #16]
 8003f20:	f004 f83c 	bl	8007f9c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	7a5b      	ldrb	r3, [r3, #9]
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d105      	bne.n	8003f38 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2101      	movs	r1, #1
 8003f32:	4618      	mov	r0, r3
 8003f34:	f004 fa34 	bl	80083a0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f007 fa01 	bl	800b340 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f004 f8ee 	bl	8008124 <USB_ReadInterrupts>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f4e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f52:	d102      	bne.n	8003f5a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f001 fd4d 	bl	80059f4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f004 f8e0 	bl	8008124 <USB_ReadInterrupts>
 8003f64:	4603      	mov	r3, r0
 8003f66:	f003 0308 	and.w	r3, r3, #8
 8003f6a:	2b08      	cmp	r3, #8
 8003f6c:	d106      	bne.n	8003f7c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f007 f9ca 	bl	800b308 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2208      	movs	r2, #8
 8003f7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f004 f8cf 	bl	8008124 <USB_ReadInterrupts>
 8003f86:	4603      	mov	r3, r0
 8003f88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f8c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f90:	d139      	bne.n	8004006 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f004 fe70 	bl	8008c7c <USB_HC_ReadInterrupt>
 8003f9c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	617b      	str	r3, [r7, #20]
 8003fa2:	e025      	b.n	8003ff0 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	f003 030f 	and.w	r3, r3, #15
 8003faa:	68ba      	ldr	r2, [r7, #8]
 8003fac:	fa22 f303 	lsr.w	r3, r2, r3
 8003fb0:	f003 0301 	and.w	r3, r3, #1
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d018      	beq.n	8003fea <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	015a      	lsls	r2, r3, #5
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003fca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fce:	d106      	bne.n	8003fde <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 f905 	bl	80041e6 <HCD_HC_IN_IRQHandler>
 8003fdc:	e005      	b.n	8003fea <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f000 ff67 	bl	8004eb8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	3301      	adds	r3, #1
 8003fee:	617b      	str	r3, [r7, #20]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	795b      	ldrb	r3, [r3, #5]
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d3d3      	bcc.n	8003fa4 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004004:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4618      	mov	r0, r3
 800400c:	f004 f88a 	bl	8008124 <USB_ReadInterrupts>
 8004010:	4603      	mov	r3, r0
 8004012:	f003 0310 	and.w	r3, r3, #16
 8004016:	2b10      	cmp	r3, #16
 8004018:	d101      	bne.n	800401e <HAL_HCD_IRQHandler+0x1ea>
 800401a:	2301      	movs	r3, #1
 800401c:	e000      	b.n	8004020 <HAL_HCD_IRQHandler+0x1ec>
 800401e:	2300      	movs	r3, #0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d014      	beq.n	800404e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	699a      	ldr	r2, [r3, #24]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f022 0210 	bic.w	r2, r2, #16
 8004032:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f001 fbfe 	bl	8005836 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	699a      	ldr	r2, [r3, #24]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f042 0210 	orr.w	r2, r2, #16
 8004048:	619a      	str	r2, [r3, #24]
 800404a:	e000      	b.n	800404e <HAL_HCD_IRQHandler+0x21a>
      return;
 800404c:	bf00      	nop
    }
  }
}
 800404e:	3718      	adds	r7, #24
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004062:	2b01      	cmp	r3, #1
 8004064:	d101      	bne.n	800406a <HAL_HCD_Start+0x16>
 8004066:	2302      	movs	r3, #2
 8004068:	e013      	b.n	8004092 <HAL_HCD_Start+0x3e>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2201      	movs	r2, #1
 800406e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2101      	movs	r1, #1
 8004078:	4618      	mov	r0, r3
 800407a:	f004 f9f8 	bl	800846e <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4618      	mov	r0, r3
 8004084:	f003 feea 	bl	8007e5c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3708      	adds	r7, #8
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}

0800409a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800409a:	b580      	push	{r7, lr}
 800409c:	b082      	sub	sp, #8
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d101      	bne.n	80040b0 <HAL_HCD_Stop+0x16>
 80040ac:	2302      	movs	r3, #2
 80040ae:	e00d      	b.n	80040cc <HAL_HCD_Stop+0x32>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4618      	mov	r0, r3
 80040be:	f004 ff4b 	bl	8008f58 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3708      	adds	r7, #8
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4618      	mov	r0, r3
 80040e2:	f004 f99a 	bl	800841a <USB_ResetPort>
 80040e6:	4603      	mov	r3, r0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3708      	adds	r7, #8
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	460b      	mov	r3, r1
 80040fa:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80040fc:	78fa      	ldrb	r2, [r7, #3]
 80040fe:	6879      	ldr	r1, [r7, #4]
 8004100:	4613      	mov	r3, r2
 8004102:	011b      	lsls	r3, r3, #4
 8004104:	1a9b      	subs	r3, r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	440b      	add	r3, r1
 800410a:	334c      	adds	r3, #76	@ 0x4c
 800410c:	781b      	ldrb	r3, [r3, #0]
}
 800410e:	4618      	mov	r0, r3
 8004110:	370c      	adds	r7, #12
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr

0800411a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800411a:	b480      	push	{r7}
 800411c:	b083      	sub	sp, #12
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
 8004122:	460b      	mov	r3, r1
 8004124:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004126:	78fa      	ldrb	r2, [r7, #3]
 8004128:	6879      	ldr	r1, [r7, #4]
 800412a:	4613      	mov	r3, r2
 800412c:	011b      	lsls	r3, r3, #4
 800412e:	1a9b      	subs	r3, r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	440b      	add	r3, r1
 8004134:	3338      	adds	r3, #56	@ 0x38
 8004136:	681b      	ldr	r3, [r3, #0]
}
 8004138:	4618      	mov	r0, r3
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4618      	mov	r0, r3
 8004152:	f004 f9dc 	bl	800850e <USB_GetCurrentFrame>
 8004156:	4603      	mov	r3, r0
}
 8004158:	4618      	mov	r0, r3
 800415a:	3708      	adds	r7, #8
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4618      	mov	r0, r3
 800416e:	f004 f9b7 	bl	80084e0 <USB_GetHostSpeed>
 8004172:	4603      	mov	r3, r0
}
 8004174:	4618      	mov	r0, r3
 8004176:	3708      	adds	r7, #8
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	460b      	mov	r3, r1
 8004186:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8004188:	78fa      	ldrb	r2, [r7, #3]
 800418a:	6879      	ldr	r1, [r7, #4]
 800418c:	4613      	mov	r3, r2
 800418e:	011b      	lsls	r3, r3, #4
 8004190:	1a9b      	subs	r3, r3, r2
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	440b      	add	r3, r1
 8004196:	331a      	adds	r3, #26
 8004198:	2200      	movs	r2, #0
 800419a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 800419c:	78fa      	ldrb	r2, [r7, #3]
 800419e:	6879      	ldr	r1, [r7, #4]
 80041a0:	4613      	mov	r3, r2
 80041a2:	011b      	lsls	r3, r3, #4
 80041a4:	1a9b      	subs	r3, r3, r2
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	440b      	add	r3, r1
 80041aa:	331b      	adds	r3, #27
 80041ac:	2200      	movs	r2, #0
 80041ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80041b0:	78fa      	ldrb	r2, [r7, #3]
 80041b2:	6879      	ldr	r1, [r7, #4]
 80041b4:	4613      	mov	r3, r2
 80041b6:	011b      	lsls	r3, r3, #4
 80041b8:	1a9b      	subs	r3, r3, r2
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	440b      	add	r3, r1
 80041be:	3325      	adds	r3, #37	@ 0x25
 80041c0:	2200      	movs	r2, #0
 80041c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80041c4:	78fa      	ldrb	r2, [r7, #3]
 80041c6:	6879      	ldr	r1, [r7, #4]
 80041c8:	4613      	mov	r3, r2
 80041ca:	011b      	lsls	r3, r3, #4
 80041cc:	1a9b      	subs	r3, r3, r2
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	440b      	add	r3, r1
 80041d2:	3324      	adds	r3, #36	@ 0x24
 80041d4:	2200      	movs	r2, #0
 80041d6:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr

080041e6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b086      	sub	sp, #24
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
 80041ee:	460b      	mov	r3, r1
 80041f0:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	78fa      	ldrb	r2, [r7, #3]
 8004202:	4611      	mov	r1, r2
 8004204:	4618      	mov	r0, r3
 8004206:	f003 ffa0 	bl	800814a <USB_ReadChInterrupts>
 800420a:	4603      	mov	r3, r0
 800420c:	f003 0304 	and.w	r3, r3, #4
 8004210:	2b04      	cmp	r3, #4
 8004212:	d11a      	bne.n	800424a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004214:	78fb      	ldrb	r3, [r7, #3]
 8004216:	015a      	lsls	r2, r3, #5
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	4413      	add	r3, r2
 800421c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004220:	461a      	mov	r2, r3
 8004222:	2304      	movs	r3, #4
 8004224:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004226:	78fa      	ldrb	r2, [r7, #3]
 8004228:	6879      	ldr	r1, [r7, #4]
 800422a:	4613      	mov	r3, r2
 800422c:	011b      	lsls	r3, r3, #4
 800422e:	1a9b      	subs	r3, r3, r2
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	440b      	add	r3, r1
 8004234:	334d      	adds	r3, #77	@ 0x4d
 8004236:	2207      	movs	r2, #7
 8004238:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	78fa      	ldrb	r2, [r7, #3]
 8004240:	4611      	mov	r1, r2
 8004242:	4618      	mov	r0, r3
 8004244:	f004 fd2b 	bl	8008c9e <USB_HC_Halt>
 8004248:	e09e      	b.n	8004388 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	78fa      	ldrb	r2, [r7, #3]
 8004250:	4611      	mov	r1, r2
 8004252:	4618      	mov	r0, r3
 8004254:	f003 ff79 	bl	800814a <USB_ReadChInterrupts>
 8004258:	4603      	mov	r3, r0
 800425a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800425e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004262:	d11b      	bne.n	800429c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8004264:	78fb      	ldrb	r3, [r7, #3]
 8004266:	015a      	lsls	r2, r3, #5
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	4413      	add	r3, r2
 800426c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004270:	461a      	mov	r2, r3
 8004272:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004276:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8004278:	78fa      	ldrb	r2, [r7, #3]
 800427a:	6879      	ldr	r1, [r7, #4]
 800427c:	4613      	mov	r3, r2
 800427e:	011b      	lsls	r3, r3, #4
 8004280:	1a9b      	subs	r3, r3, r2
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	440b      	add	r3, r1
 8004286:	334d      	adds	r3, #77	@ 0x4d
 8004288:	2208      	movs	r2, #8
 800428a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	78fa      	ldrb	r2, [r7, #3]
 8004292:	4611      	mov	r1, r2
 8004294:	4618      	mov	r0, r3
 8004296:	f004 fd02 	bl	8008c9e <USB_HC_Halt>
 800429a:	e075      	b.n	8004388 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	78fa      	ldrb	r2, [r7, #3]
 80042a2:	4611      	mov	r1, r2
 80042a4:	4618      	mov	r0, r3
 80042a6:	f003 ff50 	bl	800814a <USB_ReadChInterrupts>
 80042aa:	4603      	mov	r3, r0
 80042ac:	f003 0308 	and.w	r3, r3, #8
 80042b0:	2b08      	cmp	r3, #8
 80042b2:	d11a      	bne.n	80042ea <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80042b4:	78fb      	ldrb	r3, [r7, #3]
 80042b6:	015a      	lsls	r2, r3, #5
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	4413      	add	r3, r2
 80042bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042c0:	461a      	mov	r2, r3
 80042c2:	2308      	movs	r3, #8
 80042c4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80042c6:	78fa      	ldrb	r2, [r7, #3]
 80042c8:	6879      	ldr	r1, [r7, #4]
 80042ca:	4613      	mov	r3, r2
 80042cc:	011b      	lsls	r3, r3, #4
 80042ce:	1a9b      	subs	r3, r3, r2
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	440b      	add	r3, r1
 80042d4:	334d      	adds	r3, #77	@ 0x4d
 80042d6:	2206      	movs	r2, #6
 80042d8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	78fa      	ldrb	r2, [r7, #3]
 80042e0:	4611      	mov	r1, r2
 80042e2:	4618      	mov	r0, r3
 80042e4:	f004 fcdb 	bl	8008c9e <USB_HC_Halt>
 80042e8:	e04e      	b.n	8004388 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	78fa      	ldrb	r2, [r7, #3]
 80042f0:	4611      	mov	r1, r2
 80042f2:	4618      	mov	r0, r3
 80042f4:	f003 ff29 	bl	800814a <USB_ReadChInterrupts>
 80042f8:	4603      	mov	r3, r0
 80042fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004302:	d11b      	bne.n	800433c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004304:	78fb      	ldrb	r3, [r7, #3]
 8004306:	015a      	lsls	r2, r3, #5
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	4413      	add	r3, r2
 800430c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004310:	461a      	mov	r2, r3
 8004312:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004316:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004318:	78fa      	ldrb	r2, [r7, #3]
 800431a:	6879      	ldr	r1, [r7, #4]
 800431c:	4613      	mov	r3, r2
 800431e:	011b      	lsls	r3, r3, #4
 8004320:	1a9b      	subs	r3, r3, r2
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	440b      	add	r3, r1
 8004326:	334d      	adds	r3, #77	@ 0x4d
 8004328:	2209      	movs	r2, #9
 800432a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	78fa      	ldrb	r2, [r7, #3]
 8004332:	4611      	mov	r1, r2
 8004334:	4618      	mov	r0, r3
 8004336:	f004 fcb2 	bl	8008c9e <USB_HC_Halt>
 800433a:	e025      	b.n	8004388 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	78fa      	ldrb	r2, [r7, #3]
 8004342:	4611      	mov	r1, r2
 8004344:	4618      	mov	r0, r3
 8004346:	f003 ff00 	bl	800814a <USB_ReadChInterrupts>
 800434a:	4603      	mov	r3, r0
 800434c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004350:	2b80      	cmp	r3, #128	@ 0x80
 8004352:	d119      	bne.n	8004388 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004354:	78fb      	ldrb	r3, [r7, #3]
 8004356:	015a      	lsls	r2, r3, #5
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	4413      	add	r3, r2
 800435c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004360:	461a      	mov	r2, r3
 8004362:	2380      	movs	r3, #128	@ 0x80
 8004364:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004366:	78fa      	ldrb	r2, [r7, #3]
 8004368:	6879      	ldr	r1, [r7, #4]
 800436a:	4613      	mov	r3, r2
 800436c:	011b      	lsls	r3, r3, #4
 800436e:	1a9b      	subs	r3, r3, r2
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	440b      	add	r3, r1
 8004374:	334d      	adds	r3, #77	@ 0x4d
 8004376:	2207      	movs	r2, #7
 8004378:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	78fa      	ldrb	r2, [r7, #3]
 8004380:	4611      	mov	r1, r2
 8004382:	4618      	mov	r0, r3
 8004384:	f004 fc8b 	bl	8008c9e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	78fa      	ldrb	r2, [r7, #3]
 800438e:	4611      	mov	r1, r2
 8004390:	4618      	mov	r0, r3
 8004392:	f003 feda 	bl	800814a <USB_ReadChInterrupts>
 8004396:	4603      	mov	r3, r0
 8004398:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800439c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043a0:	d112      	bne.n	80043c8 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	78fa      	ldrb	r2, [r7, #3]
 80043a8:	4611      	mov	r1, r2
 80043aa:	4618      	mov	r0, r3
 80043ac:	f004 fc77 	bl	8008c9e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80043b0:	78fb      	ldrb	r3, [r7, #3]
 80043b2:	015a      	lsls	r2, r3, #5
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	4413      	add	r3, r2
 80043b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043bc:	461a      	mov	r2, r3
 80043be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80043c2:	6093      	str	r3, [r2, #8]
 80043c4:	f000 bd75 	b.w	8004eb2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	78fa      	ldrb	r2, [r7, #3]
 80043ce:	4611      	mov	r1, r2
 80043d0:	4618      	mov	r0, r3
 80043d2:	f003 feba 	bl	800814a <USB_ReadChInterrupts>
 80043d6:	4603      	mov	r3, r0
 80043d8:	f003 0301 	and.w	r3, r3, #1
 80043dc:	2b01      	cmp	r3, #1
 80043de:	f040 8128 	bne.w	8004632 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80043e2:	78fb      	ldrb	r3, [r7, #3]
 80043e4:	015a      	lsls	r2, r3, #5
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	4413      	add	r3, r2
 80043ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043ee:	461a      	mov	r2, r3
 80043f0:	2320      	movs	r3, #32
 80043f2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80043f4:	78fa      	ldrb	r2, [r7, #3]
 80043f6:	6879      	ldr	r1, [r7, #4]
 80043f8:	4613      	mov	r3, r2
 80043fa:	011b      	lsls	r3, r3, #4
 80043fc:	1a9b      	subs	r3, r3, r2
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	440b      	add	r3, r1
 8004402:	331b      	adds	r3, #27
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d119      	bne.n	800443e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800440a:	78fa      	ldrb	r2, [r7, #3]
 800440c:	6879      	ldr	r1, [r7, #4]
 800440e:	4613      	mov	r3, r2
 8004410:	011b      	lsls	r3, r3, #4
 8004412:	1a9b      	subs	r3, r3, r2
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	440b      	add	r3, r1
 8004418:	331b      	adds	r3, #27
 800441a:	2200      	movs	r2, #0
 800441c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800441e:	78fb      	ldrb	r3, [r7, #3]
 8004420:	015a      	lsls	r2, r3, #5
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	4413      	add	r3, r2
 8004426:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	78fa      	ldrb	r2, [r7, #3]
 800442e:	0151      	lsls	r1, r2, #5
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	440a      	add	r2, r1
 8004434:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004438:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800443c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	799b      	ldrb	r3, [r3, #6]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d01b      	beq.n	800447e <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004446:	78fa      	ldrb	r2, [r7, #3]
 8004448:	6879      	ldr	r1, [r7, #4]
 800444a:	4613      	mov	r3, r2
 800444c:	011b      	lsls	r3, r3, #4
 800444e:	1a9b      	subs	r3, r3, r2
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	440b      	add	r3, r1
 8004454:	3330      	adds	r3, #48	@ 0x30
 8004456:	6819      	ldr	r1, [r3, #0]
 8004458:	78fb      	ldrb	r3, [r7, #3]
 800445a:	015a      	lsls	r2, r3, #5
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	4413      	add	r3, r2
 8004460:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800446a:	78fa      	ldrb	r2, [r7, #3]
 800446c:	1ac9      	subs	r1, r1, r3
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	4613      	mov	r3, r2
 8004472:	011b      	lsls	r3, r3, #4
 8004474:	1a9b      	subs	r3, r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	4403      	add	r3, r0
 800447a:	3338      	adds	r3, #56	@ 0x38
 800447c:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800447e:	78fa      	ldrb	r2, [r7, #3]
 8004480:	6879      	ldr	r1, [r7, #4]
 8004482:	4613      	mov	r3, r2
 8004484:	011b      	lsls	r3, r3, #4
 8004486:	1a9b      	subs	r3, r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	440b      	add	r3, r1
 800448c:	334d      	adds	r3, #77	@ 0x4d
 800448e:	2201      	movs	r2, #1
 8004490:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8004492:	78fa      	ldrb	r2, [r7, #3]
 8004494:	6879      	ldr	r1, [r7, #4]
 8004496:	4613      	mov	r3, r2
 8004498:	011b      	lsls	r3, r3, #4
 800449a:	1a9b      	subs	r3, r3, r2
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	440b      	add	r3, r1
 80044a0:	3344      	adds	r3, #68	@ 0x44
 80044a2:	2200      	movs	r2, #0
 80044a4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80044a6:	78fb      	ldrb	r3, [r7, #3]
 80044a8:	015a      	lsls	r2, r3, #5
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	4413      	add	r3, r2
 80044ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044b2:	461a      	mov	r2, r3
 80044b4:	2301      	movs	r3, #1
 80044b6:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80044b8:	78fa      	ldrb	r2, [r7, #3]
 80044ba:	6879      	ldr	r1, [r7, #4]
 80044bc:	4613      	mov	r3, r2
 80044be:	011b      	lsls	r3, r3, #4
 80044c0:	1a9b      	subs	r3, r3, r2
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	440b      	add	r3, r1
 80044c6:	3326      	adds	r3, #38	@ 0x26
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00a      	beq.n	80044e4 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80044ce:	78fa      	ldrb	r2, [r7, #3]
 80044d0:	6879      	ldr	r1, [r7, #4]
 80044d2:	4613      	mov	r3, r2
 80044d4:	011b      	lsls	r3, r3, #4
 80044d6:	1a9b      	subs	r3, r3, r2
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	440b      	add	r3, r1
 80044dc:	3326      	adds	r3, #38	@ 0x26
 80044de:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d110      	bne.n	8004506 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	78fa      	ldrb	r2, [r7, #3]
 80044ea:	4611      	mov	r1, r2
 80044ec:	4618      	mov	r0, r3
 80044ee:	f004 fbd6 	bl	8008c9e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80044f2:	78fb      	ldrb	r3, [r7, #3]
 80044f4:	015a      	lsls	r2, r3, #5
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	4413      	add	r3, r2
 80044fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044fe:	461a      	mov	r2, r3
 8004500:	2310      	movs	r3, #16
 8004502:	6093      	str	r3, [r2, #8]
 8004504:	e03d      	b.n	8004582 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004506:	78fa      	ldrb	r2, [r7, #3]
 8004508:	6879      	ldr	r1, [r7, #4]
 800450a:	4613      	mov	r3, r2
 800450c:	011b      	lsls	r3, r3, #4
 800450e:	1a9b      	subs	r3, r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	440b      	add	r3, r1
 8004514:	3326      	adds	r3, #38	@ 0x26
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	2b03      	cmp	r3, #3
 800451a:	d00a      	beq.n	8004532 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800451c:	78fa      	ldrb	r2, [r7, #3]
 800451e:	6879      	ldr	r1, [r7, #4]
 8004520:	4613      	mov	r3, r2
 8004522:	011b      	lsls	r3, r3, #4
 8004524:	1a9b      	subs	r3, r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	440b      	add	r3, r1
 800452a:	3326      	adds	r3, #38	@ 0x26
 800452c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800452e:	2b01      	cmp	r3, #1
 8004530:	d127      	bne.n	8004582 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004532:	78fb      	ldrb	r3, [r7, #3]
 8004534:	015a      	lsls	r2, r3, #5
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	4413      	add	r3, r2
 800453a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	78fa      	ldrb	r2, [r7, #3]
 8004542:	0151      	lsls	r1, r2, #5
 8004544:	693a      	ldr	r2, [r7, #16]
 8004546:	440a      	add	r2, r1
 8004548:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800454c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004550:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004552:	78fa      	ldrb	r2, [r7, #3]
 8004554:	6879      	ldr	r1, [r7, #4]
 8004556:	4613      	mov	r3, r2
 8004558:	011b      	lsls	r3, r3, #4
 800455a:	1a9b      	subs	r3, r3, r2
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	440b      	add	r3, r1
 8004560:	334c      	adds	r3, #76	@ 0x4c
 8004562:	2201      	movs	r2, #1
 8004564:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004566:	78fa      	ldrb	r2, [r7, #3]
 8004568:	6879      	ldr	r1, [r7, #4]
 800456a:	4613      	mov	r3, r2
 800456c:	011b      	lsls	r3, r3, #4
 800456e:	1a9b      	subs	r3, r3, r2
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	440b      	add	r3, r1
 8004574:	334c      	adds	r3, #76	@ 0x4c
 8004576:	781a      	ldrb	r2, [r3, #0]
 8004578:	78fb      	ldrb	r3, [r7, #3]
 800457a:	4619      	mov	r1, r3
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f006 feed 	bl	800b35c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	799b      	ldrb	r3, [r3, #6]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d13b      	bne.n	8004602 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800458a:	78fa      	ldrb	r2, [r7, #3]
 800458c:	6879      	ldr	r1, [r7, #4]
 800458e:	4613      	mov	r3, r2
 8004590:	011b      	lsls	r3, r3, #4
 8004592:	1a9b      	subs	r3, r3, r2
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	440b      	add	r3, r1
 8004598:	3338      	adds	r3, #56	@ 0x38
 800459a:	6819      	ldr	r1, [r3, #0]
 800459c:	78fa      	ldrb	r2, [r7, #3]
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	4613      	mov	r3, r2
 80045a2:	011b      	lsls	r3, r3, #4
 80045a4:	1a9b      	subs	r3, r3, r2
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	4403      	add	r3, r0
 80045aa:	3328      	adds	r3, #40	@ 0x28
 80045ac:	881b      	ldrh	r3, [r3, #0]
 80045ae:	440b      	add	r3, r1
 80045b0:	1e59      	subs	r1, r3, #1
 80045b2:	78fa      	ldrb	r2, [r7, #3]
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	4613      	mov	r3, r2
 80045b8:	011b      	lsls	r3, r3, #4
 80045ba:	1a9b      	subs	r3, r3, r2
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	4403      	add	r3, r0
 80045c0:	3328      	adds	r3, #40	@ 0x28
 80045c2:	881b      	ldrh	r3, [r3, #0]
 80045c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80045c8:	f003 0301 	and.w	r3, r3, #1
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	f000 8470 	beq.w	8004eb2 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80045d2:	78fa      	ldrb	r2, [r7, #3]
 80045d4:	6879      	ldr	r1, [r7, #4]
 80045d6:	4613      	mov	r3, r2
 80045d8:	011b      	lsls	r3, r3, #4
 80045da:	1a9b      	subs	r3, r3, r2
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	440b      	add	r3, r1
 80045e0:	333c      	adds	r3, #60	@ 0x3c
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	78fa      	ldrb	r2, [r7, #3]
 80045e6:	f083 0301 	eor.w	r3, r3, #1
 80045ea:	b2d8      	uxtb	r0, r3
 80045ec:	6879      	ldr	r1, [r7, #4]
 80045ee:	4613      	mov	r3, r2
 80045f0:	011b      	lsls	r3, r3, #4
 80045f2:	1a9b      	subs	r3, r3, r2
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	440b      	add	r3, r1
 80045f8:	333c      	adds	r3, #60	@ 0x3c
 80045fa:	4602      	mov	r2, r0
 80045fc:	701a      	strb	r2, [r3, #0]
 80045fe:	f000 bc58 	b.w	8004eb2 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8004602:	78fa      	ldrb	r2, [r7, #3]
 8004604:	6879      	ldr	r1, [r7, #4]
 8004606:	4613      	mov	r3, r2
 8004608:	011b      	lsls	r3, r3, #4
 800460a:	1a9b      	subs	r3, r3, r2
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	440b      	add	r3, r1
 8004610:	333c      	adds	r3, #60	@ 0x3c
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	78fa      	ldrb	r2, [r7, #3]
 8004616:	f083 0301 	eor.w	r3, r3, #1
 800461a:	b2d8      	uxtb	r0, r3
 800461c:	6879      	ldr	r1, [r7, #4]
 800461e:	4613      	mov	r3, r2
 8004620:	011b      	lsls	r3, r3, #4
 8004622:	1a9b      	subs	r3, r3, r2
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	440b      	add	r3, r1
 8004628:	333c      	adds	r3, #60	@ 0x3c
 800462a:	4602      	mov	r2, r0
 800462c:	701a      	strb	r2, [r3, #0]
 800462e:	f000 bc40 	b.w	8004eb2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	78fa      	ldrb	r2, [r7, #3]
 8004638:	4611      	mov	r1, r2
 800463a:	4618      	mov	r0, r3
 800463c:	f003 fd85 	bl	800814a <USB_ReadChInterrupts>
 8004640:	4603      	mov	r3, r0
 8004642:	f003 0320 	and.w	r3, r3, #32
 8004646:	2b20      	cmp	r3, #32
 8004648:	d131      	bne.n	80046ae <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800464a:	78fb      	ldrb	r3, [r7, #3]
 800464c:	015a      	lsls	r2, r3, #5
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	4413      	add	r3, r2
 8004652:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004656:	461a      	mov	r2, r3
 8004658:	2320      	movs	r3, #32
 800465a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800465c:	78fa      	ldrb	r2, [r7, #3]
 800465e:	6879      	ldr	r1, [r7, #4]
 8004660:	4613      	mov	r3, r2
 8004662:	011b      	lsls	r3, r3, #4
 8004664:	1a9b      	subs	r3, r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	440b      	add	r3, r1
 800466a:	331a      	adds	r3, #26
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	2b01      	cmp	r3, #1
 8004670:	f040 841f 	bne.w	8004eb2 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8004674:	78fa      	ldrb	r2, [r7, #3]
 8004676:	6879      	ldr	r1, [r7, #4]
 8004678:	4613      	mov	r3, r2
 800467a:	011b      	lsls	r3, r3, #4
 800467c:	1a9b      	subs	r3, r3, r2
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	440b      	add	r3, r1
 8004682:	331b      	adds	r3, #27
 8004684:	2201      	movs	r2, #1
 8004686:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004688:	78fa      	ldrb	r2, [r7, #3]
 800468a:	6879      	ldr	r1, [r7, #4]
 800468c:	4613      	mov	r3, r2
 800468e:	011b      	lsls	r3, r3, #4
 8004690:	1a9b      	subs	r3, r3, r2
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	440b      	add	r3, r1
 8004696:	334d      	adds	r3, #77	@ 0x4d
 8004698:	2203      	movs	r2, #3
 800469a:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	78fa      	ldrb	r2, [r7, #3]
 80046a2:	4611      	mov	r1, r2
 80046a4:	4618      	mov	r0, r3
 80046a6:	f004 fafa 	bl	8008c9e <USB_HC_Halt>
 80046aa:	f000 bc02 	b.w	8004eb2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	78fa      	ldrb	r2, [r7, #3]
 80046b4:	4611      	mov	r1, r2
 80046b6:	4618      	mov	r0, r3
 80046b8:	f003 fd47 	bl	800814a <USB_ReadChInterrupts>
 80046bc:	4603      	mov	r3, r0
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	f040 8305 	bne.w	8004cd2 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80046c8:	78fb      	ldrb	r3, [r7, #3]
 80046ca:	015a      	lsls	r2, r3, #5
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	4413      	add	r3, r2
 80046d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046d4:	461a      	mov	r2, r3
 80046d6:	2302      	movs	r3, #2
 80046d8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80046da:	78fa      	ldrb	r2, [r7, #3]
 80046dc:	6879      	ldr	r1, [r7, #4]
 80046de:	4613      	mov	r3, r2
 80046e0:	011b      	lsls	r3, r3, #4
 80046e2:	1a9b      	subs	r3, r3, r2
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	440b      	add	r3, r1
 80046e8:	334d      	adds	r3, #77	@ 0x4d
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d114      	bne.n	800471a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80046f0:	78fa      	ldrb	r2, [r7, #3]
 80046f2:	6879      	ldr	r1, [r7, #4]
 80046f4:	4613      	mov	r3, r2
 80046f6:	011b      	lsls	r3, r3, #4
 80046f8:	1a9b      	subs	r3, r3, r2
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	440b      	add	r3, r1
 80046fe:	334d      	adds	r3, #77	@ 0x4d
 8004700:	2202      	movs	r2, #2
 8004702:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004704:	78fa      	ldrb	r2, [r7, #3]
 8004706:	6879      	ldr	r1, [r7, #4]
 8004708:	4613      	mov	r3, r2
 800470a:	011b      	lsls	r3, r3, #4
 800470c:	1a9b      	subs	r3, r3, r2
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	440b      	add	r3, r1
 8004712:	334c      	adds	r3, #76	@ 0x4c
 8004714:	2201      	movs	r2, #1
 8004716:	701a      	strb	r2, [r3, #0]
 8004718:	e2cc      	b.n	8004cb4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800471a:	78fa      	ldrb	r2, [r7, #3]
 800471c:	6879      	ldr	r1, [r7, #4]
 800471e:	4613      	mov	r3, r2
 8004720:	011b      	lsls	r3, r3, #4
 8004722:	1a9b      	subs	r3, r3, r2
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	440b      	add	r3, r1
 8004728:	334d      	adds	r3, #77	@ 0x4d
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	2b06      	cmp	r3, #6
 800472e:	d114      	bne.n	800475a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004730:	78fa      	ldrb	r2, [r7, #3]
 8004732:	6879      	ldr	r1, [r7, #4]
 8004734:	4613      	mov	r3, r2
 8004736:	011b      	lsls	r3, r3, #4
 8004738:	1a9b      	subs	r3, r3, r2
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	440b      	add	r3, r1
 800473e:	334d      	adds	r3, #77	@ 0x4d
 8004740:	2202      	movs	r2, #2
 8004742:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8004744:	78fa      	ldrb	r2, [r7, #3]
 8004746:	6879      	ldr	r1, [r7, #4]
 8004748:	4613      	mov	r3, r2
 800474a:	011b      	lsls	r3, r3, #4
 800474c:	1a9b      	subs	r3, r3, r2
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	440b      	add	r3, r1
 8004752:	334c      	adds	r3, #76	@ 0x4c
 8004754:	2205      	movs	r2, #5
 8004756:	701a      	strb	r2, [r3, #0]
 8004758:	e2ac      	b.n	8004cb4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800475a:	78fa      	ldrb	r2, [r7, #3]
 800475c:	6879      	ldr	r1, [r7, #4]
 800475e:	4613      	mov	r3, r2
 8004760:	011b      	lsls	r3, r3, #4
 8004762:	1a9b      	subs	r3, r3, r2
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	440b      	add	r3, r1
 8004768:	334d      	adds	r3, #77	@ 0x4d
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	2b07      	cmp	r3, #7
 800476e:	d00b      	beq.n	8004788 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004770:	78fa      	ldrb	r2, [r7, #3]
 8004772:	6879      	ldr	r1, [r7, #4]
 8004774:	4613      	mov	r3, r2
 8004776:	011b      	lsls	r3, r3, #4
 8004778:	1a9b      	subs	r3, r3, r2
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	440b      	add	r3, r1
 800477e:	334d      	adds	r3, #77	@ 0x4d
 8004780:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004782:	2b09      	cmp	r3, #9
 8004784:	f040 80a6 	bne.w	80048d4 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004788:	78fa      	ldrb	r2, [r7, #3]
 800478a:	6879      	ldr	r1, [r7, #4]
 800478c:	4613      	mov	r3, r2
 800478e:	011b      	lsls	r3, r3, #4
 8004790:	1a9b      	subs	r3, r3, r2
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	440b      	add	r3, r1
 8004796:	334d      	adds	r3, #77	@ 0x4d
 8004798:	2202      	movs	r2, #2
 800479a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800479c:	78fa      	ldrb	r2, [r7, #3]
 800479e:	6879      	ldr	r1, [r7, #4]
 80047a0:	4613      	mov	r3, r2
 80047a2:	011b      	lsls	r3, r3, #4
 80047a4:	1a9b      	subs	r3, r3, r2
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	440b      	add	r3, r1
 80047aa:	3344      	adds	r3, #68	@ 0x44
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	1c59      	adds	r1, r3, #1
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	4613      	mov	r3, r2
 80047b4:	011b      	lsls	r3, r3, #4
 80047b6:	1a9b      	subs	r3, r3, r2
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	4403      	add	r3, r0
 80047bc:	3344      	adds	r3, #68	@ 0x44
 80047be:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80047c0:	78fa      	ldrb	r2, [r7, #3]
 80047c2:	6879      	ldr	r1, [r7, #4]
 80047c4:	4613      	mov	r3, r2
 80047c6:	011b      	lsls	r3, r3, #4
 80047c8:	1a9b      	subs	r3, r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	440b      	add	r3, r1
 80047ce:	3344      	adds	r3, #68	@ 0x44
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d943      	bls.n	800485e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80047d6:	78fa      	ldrb	r2, [r7, #3]
 80047d8:	6879      	ldr	r1, [r7, #4]
 80047da:	4613      	mov	r3, r2
 80047dc:	011b      	lsls	r3, r3, #4
 80047de:	1a9b      	subs	r3, r3, r2
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	440b      	add	r3, r1
 80047e4:	3344      	adds	r3, #68	@ 0x44
 80047e6:	2200      	movs	r2, #0
 80047e8:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80047ea:	78fa      	ldrb	r2, [r7, #3]
 80047ec:	6879      	ldr	r1, [r7, #4]
 80047ee:	4613      	mov	r3, r2
 80047f0:	011b      	lsls	r3, r3, #4
 80047f2:	1a9b      	subs	r3, r3, r2
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	440b      	add	r3, r1
 80047f8:	331a      	adds	r3, #26
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d123      	bne.n	8004848 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8004800:	78fa      	ldrb	r2, [r7, #3]
 8004802:	6879      	ldr	r1, [r7, #4]
 8004804:	4613      	mov	r3, r2
 8004806:	011b      	lsls	r3, r3, #4
 8004808:	1a9b      	subs	r3, r3, r2
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	440b      	add	r3, r1
 800480e:	331b      	adds	r3, #27
 8004810:	2200      	movs	r2, #0
 8004812:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8004814:	78fa      	ldrb	r2, [r7, #3]
 8004816:	6879      	ldr	r1, [r7, #4]
 8004818:	4613      	mov	r3, r2
 800481a:	011b      	lsls	r3, r3, #4
 800481c:	1a9b      	subs	r3, r3, r2
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	440b      	add	r3, r1
 8004822:	331c      	adds	r3, #28
 8004824:	2200      	movs	r2, #0
 8004826:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004828:	78fb      	ldrb	r3, [r7, #3]
 800482a:	015a      	lsls	r2, r3, #5
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	4413      	add	r3, r2
 8004830:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	78fa      	ldrb	r2, [r7, #3]
 8004838:	0151      	lsls	r1, r2, #5
 800483a:	693a      	ldr	r2, [r7, #16]
 800483c:	440a      	add	r2, r1
 800483e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004842:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004846:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004848:	78fa      	ldrb	r2, [r7, #3]
 800484a:	6879      	ldr	r1, [r7, #4]
 800484c:	4613      	mov	r3, r2
 800484e:	011b      	lsls	r3, r3, #4
 8004850:	1a9b      	subs	r3, r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	440b      	add	r3, r1
 8004856:	334c      	adds	r3, #76	@ 0x4c
 8004858:	2204      	movs	r2, #4
 800485a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800485c:	e229      	b.n	8004cb2 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800485e:	78fa      	ldrb	r2, [r7, #3]
 8004860:	6879      	ldr	r1, [r7, #4]
 8004862:	4613      	mov	r3, r2
 8004864:	011b      	lsls	r3, r3, #4
 8004866:	1a9b      	subs	r3, r3, r2
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	440b      	add	r3, r1
 800486c:	334c      	adds	r3, #76	@ 0x4c
 800486e:	2202      	movs	r2, #2
 8004870:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004872:	78fa      	ldrb	r2, [r7, #3]
 8004874:	6879      	ldr	r1, [r7, #4]
 8004876:	4613      	mov	r3, r2
 8004878:	011b      	lsls	r3, r3, #4
 800487a:	1a9b      	subs	r3, r3, r2
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	440b      	add	r3, r1
 8004880:	3326      	adds	r3, #38	@ 0x26
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00b      	beq.n	80048a0 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004888:	78fa      	ldrb	r2, [r7, #3]
 800488a:	6879      	ldr	r1, [r7, #4]
 800488c:	4613      	mov	r3, r2
 800488e:	011b      	lsls	r3, r3, #4
 8004890:	1a9b      	subs	r3, r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	440b      	add	r3, r1
 8004896:	3326      	adds	r3, #38	@ 0x26
 8004898:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800489a:	2b02      	cmp	r3, #2
 800489c:	f040 8209 	bne.w	8004cb2 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80048a0:	78fb      	ldrb	r3, [r7, #3]
 80048a2:	015a      	lsls	r2, r3, #5
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	4413      	add	r3, r2
 80048a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80048b6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80048be:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80048c0:	78fb      	ldrb	r3, [r7, #3]
 80048c2:	015a      	lsls	r2, r3, #5
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	4413      	add	r3, r2
 80048c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048cc:	461a      	mov	r2, r3
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80048d2:	e1ee      	b.n	8004cb2 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80048d4:	78fa      	ldrb	r2, [r7, #3]
 80048d6:	6879      	ldr	r1, [r7, #4]
 80048d8:	4613      	mov	r3, r2
 80048da:	011b      	lsls	r3, r3, #4
 80048dc:	1a9b      	subs	r3, r3, r2
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	440b      	add	r3, r1
 80048e2:	334d      	adds	r3, #77	@ 0x4d
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	2b05      	cmp	r3, #5
 80048e8:	f040 80c8 	bne.w	8004a7c <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80048ec:	78fa      	ldrb	r2, [r7, #3]
 80048ee:	6879      	ldr	r1, [r7, #4]
 80048f0:	4613      	mov	r3, r2
 80048f2:	011b      	lsls	r3, r3, #4
 80048f4:	1a9b      	subs	r3, r3, r2
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	440b      	add	r3, r1
 80048fa:	334d      	adds	r3, #77	@ 0x4d
 80048fc:	2202      	movs	r2, #2
 80048fe:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004900:	78fa      	ldrb	r2, [r7, #3]
 8004902:	6879      	ldr	r1, [r7, #4]
 8004904:	4613      	mov	r3, r2
 8004906:	011b      	lsls	r3, r3, #4
 8004908:	1a9b      	subs	r3, r3, r2
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	440b      	add	r3, r1
 800490e:	331b      	adds	r3, #27
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	2b01      	cmp	r3, #1
 8004914:	f040 81ce 	bne.w	8004cb4 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004918:	78fa      	ldrb	r2, [r7, #3]
 800491a:	6879      	ldr	r1, [r7, #4]
 800491c:	4613      	mov	r3, r2
 800491e:	011b      	lsls	r3, r3, #4
 8004920:	1a9b      	subs	r3, r3, r2
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	440b      	add	r3, r1
 8004926:	3326      	adds	r3, #38	@ 0x26
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	2b03      	cmp	r3, #3
 800492c:	d16b      	bne.n	8004a06 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800492e:	78fa      	ldrb	r2, [r7, #3]
 8004930:	6879      	ldr	r1, [r7, #4]
 8004932:	4613      	mov	r3, r2
 8004934:	011b      	lsls	r3, r3, #4
 8004936:	1a9b      	subs	r3, r3, r2
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	440b      	add	r3, r1
 800493c:	3348      	adds	r3, #72	@ 0x48
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	1c59      	adds	r1, r3, #1
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	4613      	mov	r3, r2
 8004946:	011b      	lsls	r3, r3, #4
 8004948:	1a9b      	subs	r3, r3, r2
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	4403      	add	r3, r0
 800494e:	3348      	adds	r3, #72	@ 0x48
 8004950:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8004952:	78fa      	ldrb	r2, [r7, #3]
 8004954:	6879      	ldr	r1, [r7, #4]
 8004956:	4613      	mov	r3, r2
 8004958:	011b      	lsls	r3, r3, #4
 800495a:	1a9b      	subs	r3, r3, r2
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	440b      	add	r3, r1
 8004960:	3348      	adds	r3, #72	@ 0x48
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2b02      	cmp	r3, #2
 8004966:	d943      	bls.n	80049f0 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8004968:	78fa      	ldrb	r2, [r7, #3]
 800496a:	6879      	ldr	r1, [r7, #4]
 800496c:	4613      	mov	r3, r2
 800496e:	011b      	lsls	r3, r3, #4
 8004970:	1a9b      	subs	r3, r3, r2
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	440b      	add	r3, r1
 8004976:	3348      	adds	r3, #72	@ 0x48
 8004978:	2200      	movs	r2, #0
 800497a:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800497c:	78fa      	ldrb	r2, [r7, #3]
 800497e:	6879      	ldr	r1, [r7, #4]
 8004980:	4613      	mov	r3, r2
 8004982:	011b      	lsls	r3, r3, #4
 8004984:	1a9b      	subs	r3, r3, r2
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	440b      	add	r3, r1
 800498a:	331b      	adds	r3, #27
 800498c:	2200      	movs	r2, #0
 800498e:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8004990:	78fa      	ldrb	r2, [r7, #3]
 8004992:	6879      	ldr	r1, [r7, #4]
 8004994:	4613      	mov	r3, r2
 8004996:	011b      	lsls	r3, r3, #4
 8004998:	1a9b      	subs	r3, r3, r2
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	440b      	add	r3, r1
 800499e:	3344      	adds	r3, #68	@ 0x44
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d809      	bhi.n	80049ba <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80049a6:	78fa      	ldrb	r2, [r7, #3]
 80049a8:	6879      	ldr	r1, [r7, #4]
 80049aa:	4613      	mov	r3, r2
 80049ac:	011b      	lsls	r3, r3, #4
 80049ae:	1a9b      	subs	r3, r3, r2
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	440b      	add	r3, r1
 80049b4:	331c      	adds	r3, #28
 80049b6:	2201      	movs	r2, #1
 80049b8:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80049ba:	78fb      	ldrb	r3, [r7, #3]
 80049bc:	015a      	lsls	r2, r3, #5
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	4413      	add	r3, r2
 80049c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	78fa      	ldrb	r2, [r7, #3]
 80049ca:	0151      	lsls	r1, r2, #5
 80049cc:	693a      	ldr	r2, [r7, #16]
 80049ce:	440a      	add	r2, r1
 80049d0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80049d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049d8:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80049da:	78fa      	ldrb	r2, [r7, #3]
 80049dc:	6879      	ldr	r1, [r7, #4]
 80049de:	4613      	mov	r3, r2
 80049e0:	011b      	lsls	r3, r3, #4
 80049e2:	1a9b      	subs	r3, r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	440b      	add	r3, r1
 80049e8:	334c      	adds	r3, #76	@ 0x4c
 80049ea:	2204      	movs	r2, #4
 80049ec:	701a      	strb	r2, [r3, #0]
 80049ee:	e014      	b.n	8004a1a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80049f0:	78fa      	ldrb	r2, [r7, #3]
 80049f2:	6879      	ldr	r1, [r7, #4]
 80049f4:	4613      	mov	r3, r2
 80049f6:	011b      	lsls	r3, r3, #4
 80049f8:	1a9b      	subs	r3, r3, r2
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	440b      	add	r3, r1
 80049fe:	334c      	adds	r3, #76	@ 0x4c
 8004a00:	2202      	movs	r2, #2
 8004a02:	701a      	strb	r2, [r3, #0]
 8004a04:	e009      	b.n	8004a1a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004a06:	78fa      	ldrb	r2, [r7, #3]
 8004a08:	6879      	ldr	r1, [r7, #4]
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	011b      	lsls	r3, r3, #4
 8004a0e:	1a9b      	subs	r3, r3, r2
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	440b      	add	r3, r1
 8004a14:	334c      	adds	r3, #76	@ 0x4c
 8004a16:	2202      	movs	r2, #2
 8004a18:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004a1a:	78fa      	ldrb	r2, [r7, #3]
 8004a1c:	6879      	ldr	r1, [r7, #4]
 8004a1e:	4613      	mov	r3, r2
 8004a20:	011b      	lsls	r3, r3, #4
 8004a22:	1a9b      	subs	r3, r3, r2
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	440b      	add	r3, r1
 8004a28:	3326      	adds	r3, #38	@ 0x26
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d00b      	beq.n	8004a48 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004a30:	78fa      	ldrb	r2, [r7, #3]
 8004a32:	6879      	ldr	r1, [r7, #4]
 8004a34:	4613      	mov	r3, r2
 8004a36:	011b      	lsls	r3, r3, #4
 8004a38:	1a9b      	subs	r3, r3, r2
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	440b      	add	r3, r1
 8004a3e:	3326      	adds	r3, #38	@ 0x26
 8004a40:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	f040 8136 	bne.w	8004cb4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004a48:	78fb      	ldrb	r3, [r7, #3]
 8004a4a:	015a      	lsls	r2, r3, #5
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	4413      	add	r3, r2
 8004a50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004a5e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004a66:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004a68:	78fb      	ldrb	r3, [r7, #3]
 8004a6a:	015a      	lsls	r2, r3, #5
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	4413      	add	r3, r2
 8004a70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a74:	461a      	mov	r2, r3
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6013      	str	r3, [r2, #0]
 8004a7a:	e11b      	b.n	8004cb4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004a7c:	78fa      	ldrb	r2, [r7, #3]
 8004a7e:	6879      	ldr	r1, [r7, #4]
 8004a80:	4613      	mov	r3, r2
 8004a82:	011b      	lsls	r3, r3, #4
 8004a84:	1a9b      	subs	r3, r3, r2
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	440b      	add	r3, r1
 8004a8a:	334d      	adds	r3, #77	@ 0x4d
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	2b03      	cmp	r3, #3
 8004a90:	f040 8081 	bne.w	8004b96 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004a94:	78fa      	ldrb	r2, [r7, #3]
 8004a96:	6879      	ldr	r1, [r7, #4]
 8004a98:	4613      	mov	r3, r2
 8004a9a:	011b      	lsls	r3, r3, #4
 8004a9c:	1a9b      	subs	r3, r3, r2
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	440b      	add	r3, r1
 8004aa2:	334d      	adds	r3, #77	@ 0x4d
 8004aa4:	2202      	movs	r2, #2
 8004aa6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004aa8:	78fa      	ldrb	r2, [r7, #3]
 8004aaa:	6879      	ldr	r1, [r7, #4]
 8004aac:	4613      	mov	r3, r2
 8004aae:	011b      	lsls	r3, r3, #4
 8004ab0:	1a9b      	subs	r3, r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	440b      	add	r3, r1
 8004ab6:	331b      	adds	r3, #27
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	f040 80fa 	bne.w	8004cb4 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004ac0:	78fa      	ldrb	r2, [r7, #3]
 8004ac2:	6879      	ldr	r1, [r7, #4]
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	011b      	lsls	r3, r3, #4
 8004ac8:	1a9b      	subs	r3, r3, r2
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	440b      	add	r3, r1
 8004ace:	334c      	adds	r3, #76	@ 0x4c
 8004ad0:	2202      	movs	r2, #2
 8004ad2:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8004ad4:	78fb      	ldrb	r3, [r7, #3]
 8004ad6:	015a      	lsls	r2, r3, #5
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	4413      	add	r3, r2
 8004adc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	78fa      	ldrb	r2, [r7, #3]
 8004ae4:	0151      	lsls	r1, r2, #5
 8004ae6:	693a      	ldr	r2, [r7, #16]
 8004ae8:	440a      	add	r2, r1
 8004aea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004aee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004af2:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8004af4:	78fb      	ldrb	r3, [r7, #3]
 8004af6:	015a      	lsls	r2, r3, #5
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	4413      	add	r3, r2
 8004afc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	78fa      	ldrb	r2, [r7, #3]
 8004b04:	0151      	lsls	r1, r2, #5
 8004b06:	693a      	ldr	r2, [r7, #16]
 8004b08:	440a      	add	r2, r1
 8004b0a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004b0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b12:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8004b14:	78fb      	ldrb	r3, [r7, #3]
 8004b16:	015a      	lsls	r2, r3, #5
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	78fa      	ldrb	r2, [r7, #3]
 8004b24:	0151      	lsls	r1, r2, #5
 8004b26:	693a      	ldr	r2, [r7, #16]
 8004b28:	440a      	add	r2, r1
 8004b2a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004b2e:	f023 0320 	bic.w	r3, r3, #32
 8004b32:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004b34:	78fa      	ldrb	r2, [r7, #3]
 8004b36:	6879      	ldr	r1, [r7, #4]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	011b      	lsls	r3, r3, #4
 8004b3c:	1a9b      	subs	r3, r3, r2
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	440b      	add	r3, r1
 8004b42:	3326      	adds	r3, #38	@ 0x26
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00b      	beq.n	8004b62 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004b4a:	78fa      	ldrb	r2, [r7, #3]
 8004b4c:	6879      	ldr	r1, [r7, #4]
 8004b4e:	4613      	mov	r3, r2
 8004b50:	011b      	lsls	r3, r3, #4
 8004b52:	1a9b      	subs	r3, r3, r2
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	440b      	add	r3, r1
 8004b58:	3326      	adds	r3, #38	@ 0x26
 8004b5a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	f040 80a9 	bne.w	8004cb4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004b62:	78fb      	ldrb	r3, [r7, #3]
 8004b64:	015a      	lsls	r2, r3, #5
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	4413      	add	r3, r2
 8004b6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004b78:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004b80:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004b82:	78fb      	ldrb	r3, [r7, #3]
 8004b84:	015a      	lsls	r2, r3, #5
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	4413      	add	r3, r2
 8004b8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b8e:	461a      	mov	r2, r3
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6013      	str	r3, [r2, #0]
 8004b94:	e08e      	b.n	8004cb4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004b96:	78fa      	ldrb	r2, [r7, #3]
 8004b98:	6879      	ldr	r1, [r7, #4]
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	011b      	lsls	r3, r3, #4
 8004b9e:	1a9b      	subs	r3, r3, r2
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	440b      	add	r3, r1
 8004ba4:	334d      	adds	r3, #77	@ 0x4d
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	2b04      	cmp	r3, #4
 8004baa:	d143      	bne.n	8004c34 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004bac:	78fa      	ldrb	r2, [r7, #3]
 8004bae:	6879      	ldr	r1, [r7, #4]
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	011b      	lsls	r3, r3, #4
 8004bb4:	1a9b      	subs	r3, r3, r2
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	440b      	add	r3, r1
 8004bba:	334d      	adds	r3, #77	@ 0x4d
 8004bbc:	2202      	movs	r2, #2
 8004bbe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004bc0:	78fa      	ldrb	r2, [r7, #3]
 8004bc2:	6879      	ldr	r1, [r7, #4]
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	011b      	lsls	r3, r3, #4
 8004bc8:	1a9b      	subs	r3, r3, r2
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	440b      	add	r3, r1
 8004bce:	334c      	adds	r3, #76	@ 0x4c
 8004bd0:	2202      	movs	r2, #2
 8004bd2:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004bd4:	78fa      	ldrb	r2, [r7, #3]
 8004bd6:	6879      	ldr	r1, [r7, #4]
 8004bd8:	4613      	mov	r3, r2
 8004bda:	011b      	lsls	r3, r3, #4
 8004bdc:	1a9b      	subs	r3, r3, r2
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	440b      	add	r3, r1
 8004be2:	3326      	adds	r3, #38	@ 0x26
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00a      	beq.n	8004c00 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004bea:	78fa      	ldrb	r2, [r7, #3]
 8004bec:	6879      	ldr	r1, [r7, #4]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	011b      	lsls	r3, r3, #4
 8004bf2:	1a9b      	subs	r3, r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	440b      	add	r3, r1
 8004bf8:	3326      	adds	r3, #38	@ 0x26
 8004bfa:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d159      	bne.n	8004cb4 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004c00:	78fb      	ldrb	r3, [r7, #3]
 8004c02:	015a      	lsls	r2, r3, #5
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	4413      	add	r3, r2
 8004c08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004c16:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004c1e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004c20:	78fb      	ldrb	r3, [r7, #3]
 8004c22:	015a      	lsls	r2, r3, #5
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	4413      	add	r3, r2
 8004c28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6013      	str	r3, [r2, #0]
 8004c32:	e03f      	b.n	8004cb4 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8004c34:	78fa      	ldrb	r2, [r7, #3]
 8004c36:	6879      	ldr	r1, [r7, #4]
 8004c38:	4613      	mov	r3, r2
 8004c3a:	011b      	lsls	r3, r3, #4
 8004c3c:	1a9b      	subs	r3, r3, r2
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	440b      	add	r3, r1
 8004c42:	334d      	adds	r3, #77	@ 0x4d
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	2b08      	cmp	r3, #8
 8004c48:	d126      	bne.n	8004c98 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004c4a:	78fa      	ldrb	r2, [r7, #3]
 8004c4c:	6879      	ldr	r1, [r7, #4]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	011b      	lsls	r3, r3, #4
 8004c52:	1a9b      	subs	r3, r3, r2
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	440b      	add	r3, r1
 8004c58:	334d      	adds	r3, #77	@ 0x4d
 8004c5a:	2202      	movs	r2, #2
 8004c5c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004c5e:	78fa      	ldrb	r2, [r7, #3]
 8004c60:	6879      	ldr	r1, [r7, #4]
 8004c62:	4613      	mov	r3, r2
 8004c64:	011b      	lsls	r3, r3, #4
 8004c66:	1a9b      	subs	r3, r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	440b      	add	r3, r1
 8004c6c:	3344      	adds	r3, #68	@ 0x44
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	1c59      	adds	r1, r3, #1
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	4613      	mov	r3, r2
 8004c76:	011b      	lsls	r3, r3, #4
 8004c78:	1a9b      	subs	r3, r3, r2
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	4403      	add	r3, r0
 8004c7e:	3344      	adds	r3, #68	@ 0x44
 8004c80:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8004c82:	78fa      	ldrb	r2, [r7, #3]
 8004c84:	6879      	ldr	r1, [r7, #4]
 8004c86:	4613      	mov	r3, r2
 8004c88:	011b      	lsls	r3, r3, #4
 8004c8a:	1a9b      	subs	r3, r3, r2
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	440b      	add	r3, r1
 8004c90:	334c      	adds	r3, #76	@ 0x4c
 8004c92:	2204      	movs	r2, #4
 8004c94:	701a      	strb	r2, [r3, #0]
 8004c96:	e00d      	b.n	8004cb4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8004c98:	78fa      	ldrb	r2, [r7, #3]
 8004c9a:	6879      	ldr	r1, [r7, #4]
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	011b      	lsls	r3, r3, #4
 8004ca0:	1a9b      	subs	r3, r3, r2
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	440b      	add	r3, r1
 8004ca6:	334d      	adds	r3, #77	@ 0x4d
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	f000 8100 	beq.w	8004eb0 <HCD_HC_IN_IRQHandler+0xcca>
 8004cb0:	e000      	b.n	8004cb4 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004cb2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004cb4:	78fa      	ldrb	r2, [r7, #3]
 8004cb6:	6879      	ldr	r1, [r7, #4]
 8004cb8:	4613      	mov	r3, r2
 8004cba:	011b      	lsls	r3, r3, #4
 8004cbc:	1a9b      	subs	r3, r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	440b      	add	r3, r1
 8004cc2:	334c      	adds	r3, #76	@ 0x4c
 8004cc4:	781a      	ldrb	r2, [r3, #0]
 8004cc6:	78fb      	ldrb	r3, [r7, #3]
 8004cc8:	4619      	mov	r1, r3
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f006 fb46 	bl	800b35c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004cd0:	e0ef      	b.n	8004eb2 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	78fa      	ldrb	r2, [r7, #3]
 8004cd8:	4611      	mov	r1, r2
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f003 fa35 	bl	800814a <USB_ReadChInterrupts>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ce6:	2b40      	cmp	r3, #64	@ 0x40
 8004ce8:	d12f      	bne.n	8004d4a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004cea:	78fb      	ldrb	r3, [r7, #3]
 8004cec:	015a      	lsls	r2, r3, #5
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	4413      	add	r3, r2
 8004cf2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	2340      	movs	r3, #64	@ 0x40
 8004cfa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004cfc:	78fa      	ldrb	r2, [r7, #3]
 8004cfe:	6879      	ldr	r1, [r7, #4]
 8004d00:	4613      	mov	r3, r2
 8004d02:	011b      	lsls	r3, r3, #4
 8004d04:	1a9b      	subs	r3, r3, r2
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	440b      	add	r3, r1
 8004d0a:	334d      	adds	r3, #77	@ 0x4d
 8004d0c:	2205      	movs	r2, #5
 8004d0e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004d10:	78fa      	ldrb	r2, [r7, #3]
 8004d12:	6879      	ldr	r1, [r7, #4]
 8004d14:	4613      	mov	r3, r2
 8004d16:	011b      	lsls	r3, r3, #4
 8004d18:	1a9b      	subs	r3, r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	440b      	add	r3, r1
 8004d1e:	331a      	adds	r3, #26
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d109      	bne.n	8004d3a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004d26:	78fa      	ldrb	r2, [r7, #3]
 8004d28:	6879      	ldr	r1, [r7, #4]
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	011b      	lsls	r3, r3, #4
 8004d2e:	1a9b      	subs	r3, r3, r2
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	440b      	add	r3, r1
 8004d34:	3344      	adds	r3, #68	@ 0x44
 8004d36:	2200      	movs	r2, #0
 8004d38:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	78fa      	ldrb	r2, [r7, #3]
 8004d40:	4611      	mov	r1, r2
 8004d42:	4618      	mov	r0, r3
 8004d44:	f003 ffab 	bl	8008c9e <USB_HC_Halt>
 8004d48:	e0b3      	b.n	8004eb2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	78fa      	ldrb	r2, [r7, #3]
 8004d50:	4611      	mov	r1, r2
 8004d52:	4618      	mov	r0, r3
 8004d54:	f003 f9f9 	bl	800814a <USB_ReadChInterrupts>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	f003 0310 	and.w	r3, r3, #16
 8004d5e:	2b10      	cmp	r3, #16
 8004d60:	f040 80a7 	bne.w	8004eb2 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004d64:	78fa      	ldrb	r2, [r7, #3]
 8004d66:	6879      	ldr	r1, [r7, #4]
 8004d68:	4613      	mov	r3, r2
 8004d6a:	011b      	lsls	r3, r3, #4
 8004d6c:	1a9b      	subs	r3, r3, r2
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	440b      	add	r3, r1
 8004d72:	3326      	adds	r3, #38	@ 0x26
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	2b03      	cmp	r3, #3
 8004d78:	d11b      	bne.n	8004db2 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004d7a:	78fa      	ldrb	r2, [r7, #3]
 8004d7c:	6879      	ldr	r1, [r7, #4]
 8004d7e:	4613      	mov	r3, r2
 8004d80:	011b      	lsls	r3, r3, #4
 8004d82:	1a9b      	subs	r3, r3, r2
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	440b      	add	r3, r1
 8004d88:	3344      	adds	r3, #68	@ 0x44
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8004d8e:	78fa      	ldrb	r2, [r7, #3]
 8004d90:	6879      	ldr	r1, [r7, #4]
 8004d92:	4613      	mov	r3, r2
 8004d94:	011b      	lsls	r3, r3, #4
 8004d96:	1a9b      	subs	r3, r3, r2
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	440b      	add	r3, r1
 8004d9c:	334d      	adds	r3, #77	@ 0x4d
 8004d9e:	2204      	movs	r2, #4
 8004da0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	78fa      	ldrb	r2, [r7, #3]
 8004da8:	4611      	mov	r1, r2
 8004daa:	4618      	mov	r0, r3
 8004dac:	f003 ff77 	bl	8008c9e <USB_HC_Halt>
 8004db0:	e03f      	b.n	8004e32 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004db2:	78fa      	ldrb	r2, [r7, #3]
 8004db4:	6879      	ldr	r1, [r7, #4]
 8004db6:	4613      	mov	r3, r2
 8004db8:	011b      	lsls	r3, r3, #4
 8004dba:	1a9b      	subs	r3, r3, r2
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	440b      	add	r3, r1
 8004dc0:	3326      	adds	r3, #38	@ 0x26
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d00a      	beq.n	8004dde <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004dc8:	78fa      	ldrb	r2, [r7, #3]
 8004dca:	6879      	ldr	r1, [r7, #4]
 8004dcc:	4613      	mov	r3, r2
 8004dce:	011b      	lsls	r3, r3, #4
 8004dd0:	1a9b      	subs	r3, r3, r2
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	440b      	add	r3, r1
 8004dd6:	3326      	adds	r3, #38	@ 0x26
 8004dd8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d129      	bne.n	8004e32 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004dde:	78fa      	ldrb	r2, [r7, #3]
 8004de0:	6879      	ldr	r1, [r7, #4]
 8004de2:	4613      	mov	r3, r2
 8004de4:	011b      	lsls	r3, r3, #4
 8004de6:	1a9b      	subs	r3, r3, r2
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	440b      	add	r3, r1
 8004dec:	3344      	adds	r3, #68	@ 0x44
 8004dee:	2200      	movs	r2, #0
 8004df0:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	799b      	ldrb	r3, [r3, #6]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00a      	beq.n	8004e10 <HCD_HC_IN_IRQHandler+0xc2a>
 8004dfa:	78fa      	ldrb	r2, [r7, #3]
 8004dfc:	6879      	ldr	r1, [r7, #4]
 8004dfe:	4613      	mov	r3, r2
 8004e00:	011b      	lsls	r3, r3, #4
 8004e02:	1a9b      	subs	r3, r3, r2
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	440b      	add	r3, r1
 8004e08:	331b      	adds	r3, #27
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d110      	bne.n	8004e32 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8004e10:	78fa      	ldrb	r2, [r7, #3]
 8004e12:	6879      	ldr	r1, [r7, #4]
 8004e14:	4613      	mov	r3, r2
 8004e16:	011b      	lsls	r3, r3, #4
 8004e18:	1a9b      	subs	r3, r3, r2
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	440b      	add	r3, r1
 8004e1e:	334d      	adds	r3, #77	@ 0x4d
 8004e20:	2204      	movs	r2, #4
 8004e22:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	78fa      	ldrb	r2, [r7, #3]
 8004e2a:	4611      	mov	r1, r2
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f003 ff36 	bl	8008c9e <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004e32:	78fa      	ldrb	r2, [r7, #3]
 8004e34:	6879      	ldr	r1, [r7, #4]
 8004e36:	4613      	mov	r3, r2
 8004e38:	011b      	lsls	r3, r3, #4
 8004e3a:	1a9b      	subs	r3, r3, r2
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	440b      	add	r3, r1
 8004e40:	331b      	adds	r3, #27
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d129      	bne.n	8004e9c <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004e48:	78fa      	ldrb	r2, [r7, #3]
 8004e4a:	6879      	ldr	r1, [r7, #4]
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	011b      	lsls	r3, r3, #4
 8004e50:	1a9b      	subs	r3, r3, r2
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	440b      	add	r3, r1
 8004e56:	331b      	adds	r3, #27
 8004e58:	2200      	movs	r2, #0
 8004e5a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004e5c:	78fb      	ldrb	r3, [r7, #3]
 8004e5e:	015a      	lsls	r2, r3, #5
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	4413      	add	r3, r2
 8004e64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	78fa      	ldrb	r2, [r7, #3]
 8004e6c:	0151      	lsls	r1, r2, #5
 8004e6e:	693a      	ldr	r2, [r7, #16]
 8004e70:	440a      	add	r2, r1
 8004e72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004e76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e7a:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8004e7c:	78fb      	ldrb	r3, [r7, #3]
 8004e7e:	015a      	lsls	r2, r3, #5
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	4413      	add	r3, r2
 8004e84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	78fa      	ldrb	r2, [r7, #3]
 8004e8c:	0151      	lsls	r1, r2, #5
 8004e8e:	693a      	ldr	r2, [r7, #16]
 8004e90:	440a      	add	r2, r1
 8004e92:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004e96:	f043 0320 	orr.w	r3, r3, #32
 8004e9a:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004e9c:	78fb      	ldrb	r3, [r7, #3]
 8004e9e:	015a      	lsls	r2, r3, #5
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	4413      	add	r3, r2
 8004ea4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	2310      	movs	r3, #16
 8004eac:	6093      	str	r3, [r2, #8]
 8004eae:	e000      	b.n	8004eb2 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8004eb0:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8004eb2:	3718      	adds	r7, #24
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b086      	sub	sp, #24
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	78fa      	ldrb	r2, [r7, #3]
 8004ed4:	4611      	mov	r1, r2
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f003 f937 	bl	800814a <USB_ReadChInterrupts>
 8004edc:	4603      	mov	r3, r0
 8004ede:	f003 0304 	and.w	r3, r3, #4
 8004ee2:	2b04      	cmp	r3, #4
 8004ee4:	d11b      	bne.n	8004f1e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004ee6:	78fb      	ldrb	r3, [r7, #3]
 8004ee8:	015a      	lsls	r2, r3, #5
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	4413      	add	r3, r2
 8004eee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	2304      	movs	r3, #4
 8004ef6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004ef8:	78fa      	ldrb	r2, [r7, #3]
 8004efa:	6879      	ldr	r1, [r7, #4]
 8004efc:	4613      	mov	r3, r2
 8004efe:	011b      	lsls	r3, r3, #4
 8004f00:	1a9b      	subs	r3, r3, r2
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	440b      	add	r3, r1
 8004f06:	334d      	adds	r3, #77	@ 0x4d
 8004f08:	2207      	movs	r2, #7
 8004f0a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	78fa      	ldrb	r2, [r7, #3]
 8004f12:	4611      	mov	r1, r2
 8004f14:	4618      	mov	r0, r3
 8004f16:	f003 fec2 	bl	8008c9e <USB_HC_Halt>
 8004f1a:	f000 bc89 	b.w	8005830 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	78fa      	ldrb	r2, [r7, #3]
 8004f24:	4611      	mov	r1, r2
 8004f26:	4618      	mov	r0, r3
 8004f28:	f003 f90f 	bl	800814a <USB_ReadChInterrupts>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	f003 0320 	and.w	r3, r3, #32
 8004f32:	2b20      	cmp	r3, #32
 8004f34:	f040 8082 	bne.w	800503c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004f38:	78fb      	ldrb	r3, [r7, #3]
 8004f3a:	015a      	lsls	r2, r3, #5
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	4413      	add	r3, r2
 8004f40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f44:	461a      	mov	r2, r3
 8004f46:	2320      	movs	r3, #32
 8004f48:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8004f4a:	78fa      	ldrb	r2, [r7, #3]
 8004f4c:	6879      	ldr	r1, [r7, #4]
 8004f4e:	4613      	mov	r3, r2
 8004f50:	011b      	lsls	r3, r3, #4
 8004f52:	1a9b      	subs	r3, r3, r2
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	440b      	add	r3, r1
 8004f58:	3319      	adds	r3, #25
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d124      	bne.n	8004faa <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8004f60:	78fa      	ldrb	r2, [r7, #3]
 8004f62:	6879      	ldr	r1, [r7, #4]
 8004f64:	4613      	mov	r3, r2
 8004f66:	011b      	lsls	r3, r3, #4
 8004f68:	1a9b      	subs	r3, r3, r2
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	440b      	add	r3, r1
 8004f6e:	3319      	adds	r3, #25
 8004f70:	2200      	movs	r2, #0
 8004f72:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004f74:	78fa      	ldrb	r2, [r7, #3]
 8004f76:	6879      	ldr	r1, [r7, #4]
 8004f78:	4613      	mov	r3, r2
 8004f7a:	011b      	lsls	r3, r3, #4
 8004f7c:	1a9b      	subs	r3, r3, r2
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	440b      	add	r3, r1
 8004f82:	334c      	adds	r3, #76	@ 0x4c
 8004f84:	2202      	movs	r2, #2
 8004f86:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004f88:	78fa      	ldrb	r2, [r7, #3]
 8004f8a:	6879      	ldr	r1, [r7, #4]
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	011b      	lsls	r3, r3, #4
 8004f90:	1a9b      	subs	r3, r3, r2
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	440b      	add	r3, r1
 8004f96:	334d      	adds	r3, #77	@ 0x4d
 8004f98:	2203      	movs	r2, #3
 8004f9a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	78fa      	ldrb	r2, [r7, #3]
 8004fa2:	4611      	mov	r1, r2
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f003 fe7a 	bl	8008c9e <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8004faa:	78fa      	ldrb	r2, [r7, #3]
 8004fac:	6879      	ldr	r1, [r7, #4]
 8004fae:	4613      	mov	r3, r2
 8004fb0:	011b      	lsls	r3, r3, #4
 8004fb2:	1a9b      	subs	r3, r3, r2
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	440b      	add	r3, r1
 8004fb8:	331a      	adds	r3, #26
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	f040 8437 	bne.w	8005830 <HCD_HC_OUT_IRQHandler+0x978>
 8004fc2:	78fa      	ldrb	r2, [r7, #3]
 8004fc4:	6879      	ldr	r1, [r7, #4]
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	011b      	lsls	r3, r3, #4
 8004fca:	1a9b      	subs	r3, r3, r2
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	440b      	add	r3, r1
 8004fd0:	331b      	adds	r3, #27
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	f040 842b 	bne.w	8005830 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8004fda:	78fa      	ldrb	r2, [r7, #3]
 8004fdc:	6879      	ldr	r1, [r7, #4]
 8004fde:	4613      	mov	r3, r2
 8004fe0:	011b      	lsls	r3, r3, #4
 8004fe2:	1a9b      	subs	r3, r3, r2
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	440b      	add	r3, r1
 8004fe8:	3326      	adds	r3, #38	@ 0x26
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d009      	beq.n	8005004 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004ff0:	78fa      	ldrb	r2, [r7, #3]
 8004ff2:	6879      	ldr	r1, [r7, #4]
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	011b      	lsls	r3, r3, #4
 8004ff8:	1a9b      	subs	r3, r3, r2
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	440b      	add	r3, r1
 8004ffe:	331b      	adds	r3, #27
 8005000:	2201      	movs	r2, #1
 8005002:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8005004:	78fa      	ldrb	r2, [r7, #3]
 8005006:	6879      	ldr	r1, [r7, #4]
 8005008:	4613      	mov	r3, r2
 800500a:	011b      	lsls	r3, r3, #4
 800500c:	1a9b      	subs	r3, r3, r2
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	440b      	add	r3, r1
 8005012:	334d      	adds	r3, #77	@ 0x4d
 8005014:	2203      	movs	r2, #3
 8005016:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	78fa      	ldrb	r2, [r7, #3]
 800501e:	4611      	mov	r1, r2
 8005020:	4618      	mov	r0, r3
 8005022:	f003 fe3c 	bl	8008c9e <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8005026:	78fa      	ldrb	r2, [r7, #3]
 8005028:	6879      	ldr	r1, [r7, #4]
 800502a:	4613      	mov	r3, r2
 800502c:	011b      	lsls	r3, r3, #4
 800502e:	1a9b      	subs	r3, r3, r2
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	440b      	add	r3, r1
 8005034:	3344      	adds	r3, #68	@ 0x44
 8005036:	2200      	movs	r2, #0
 8005038:	601a      	str	r2, [r3, #0]
 800503a:	e3f9      	b.n	8005830 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	78fa      	ldrb	r2, [r7, #3]
 8005042:	4611      	mov	r1, r2
 8005044:	4618      	mov	r0, r3
 8005046:	f003 f880 	bl	800814a <USB_ReadChInterrupts>
 800504a:	4603      	mov	r3, r0
 800504c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005050:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005054:	d111      	bne.n	800507a <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8005056:	78fb      	ldrb	r3, [r7, #3]
 8005058:	015a      	lsls	r2, r3, #5
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	4413      	add	r3, r2
 800505e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005062:	461a      	mov	r2, r3
 8005064:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005068:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	78fa      	ldrb	r2, [r7, #3]
 8005070:	4611      	mov	r1, r2
 8005072:	4618      	mov	r0, r3
 8005074:	f003 fe13 	bl	8008c9e <USB_HC_Halt>
 8005078:	e3da      	b.n	8005830 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	78fa      	ldrb	r2, [r7, #3]
 8005080:	4611      	mov	r1, r2
 8005082:	4618      	mov	r0, r3
 8005084:	f003 f861 	bl	800814a <USB_ReadChInterrupts>
 8005088:	4603      	mov	r3, r0
 800508a:	f003 0301 	and.w	r3, r3, #1
 800508e:	2b01      	cmp	r3, #1
 8005090:	d168      	bne.n	8005164 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8005092:	78fa      	ldrb	r2, [r7, #3]
 8005094:	6879      	ldr	r1, [r7, #4]
 8005096:	4613      	mov	r3, r2
 8005098:	011b      	lsls	r3, r3, #4
 800509a:	1a9b      	subs	r3, r3, r2
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	440b      	add	r3, r1
 80050a0:	3344      	adds	r3, #68	@ 0x44
 80050a2:	2200      	movs	r2, #0
 80050a4:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	78fa      	ldrb	r2, [r7, #3]
 80050ac:	4611      	mov	r1, r2
 80050ae:	4618      	mov	r0, r3
 80050b0:	f003 f84b 	bl	800814a <USB_ReadChInterrupts>
 80050b4:	4603      	mov	r3, r0
 80050b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050ba:	2b40      	cmp	r3, #64	@ 0x40
 80050bc:	d112      	bne.n	80050e4 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80050be:	78fa      	ldrb	r2, [r7, #3]
 80050c0:	6879      	ldr	r1, [r7, #4]
 80050c2:	4613      	mov	r3, r2
 80050c4:	011b      	lsls	r3, r3, #4
 80050c6:	1a9b      	subs	r3, r3, r2
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	440b      	add	r3, r1
 80050cc:	3319      	adds	r3, #25
 80050ce:	2201      	movs	r2, #1
 80050d0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80050d2:	78fb      	ldrb	r3, [r7, #3]
 80050d4:	015a      	lsls	r2, r3, #5
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	4413      	add	r3, r2
 80050da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050de:	461a      	mov	r2, r3
 80050e0:	2340      	movs	r3, #64	@ 0x40
 80050e2:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80050e4:	78fa      	ldrb	r2, [r7, #3]
 80050e6:	6879      	ldr	r1, [r7, #4]
 80050e8:	4613      	mov	r3, r2
 80050ea:	011b      	lsls	r3, r3, #4
 80050ec:	1a9b      	subs	r3, r3, r2
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	440b      	add	r3, r1
 80050f2:	331b      	adds	r3, #27
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d019      	beq.n	800512e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80050fa:	78fa      	ldrb	r2, [r7, #3]
 80050fc:	6879      	ldr	r1, [r7, #4]
 80050fe:	4613      	mov	r3, r2
 8005100:	011b      	lsls	r3, r3, #4
 8005102:	1a9b      	subs	r3, r3, r2
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	440b      	add	r3, r1
 8005108:	331b      	adds	r3, #27
 800510a:	2200      	movs	r2, #0
 800510c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800510e:	78fb      	ldrb	r3, [r7, #3]
 8005110:	015a      	lsls	r2, r3, #5
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	4413      	add	r3, r2
 8005116:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	78fa      	ldrb	r2, [r7, #3]
 800511e:	0151      	lsls	r1, r2, #5
 8005120:	693a      	ldr	r2, [r7, #16]
 8005122:	440a      	add	r2, r1
 8005124:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005128:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800512c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800512e:	78fb      	ldrb	r3, [r7, #3]
 8005130:	015a      	lsls	r2, r3, #5
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	4413      	add	r3, r2
 8005136:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800513a:	461a      	mov	r2, r3
 800513c:	2301      	movs	r3, #1
 800513e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8005140:	78fa      	ldrb	r2, [r7, #3]
 8005142:	6879      	ldr	r1, [r7, #4]
 8005144:	4613      	mov	r3, r2
 8005146:	011b      	lsls	r3, r3, #4
 8005148:	1a9b      	subs	r3, r3, r2
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	440b      	add	r3, r1
 800514e:	334d      	adds	r3, #77	@ 0x4d
 8005150:	2201      	movs	r2, #1
 8005152:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	78fa      	ldrb	r2, [r7, #3]
 800515a:	4611      	mov	r1, r2
 800515c:	4618      	mov	r0, r3
 800515e:	f003 fd9e 	bl	8008c9e <USB_HC_Halt>
 8005162:	e365      	b.n	8005830 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	78fa      	ldrb	r2, [r7, #3]
 800516a:	4611      	mov	r1, r2
 800516c:	4618      	mov	r0, r3
 800516e:	f002 ffec 	bl	800814a <USB_ReadChInterrupts>
 8005172:	4603      	mov	r3, r0
 8005174:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005178:	2b40      	cmp	r3, #64	@ 0x40
 800517a:	d139      	bne.n	80051f0 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800517c:	78fa      	ldrb	r2, [r7, #3]
 800517e:	6879      	ldr	r1, [r7, #4]
 8005180:	4613      	mov	r3, r2
 8005182:	011b      	lsls	r3, r3, #4
 8005184:	1a9b      	subs	r3, r3, r2
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	440b      	add	r3, r1
 800518a:	334d      	adds	r3, #77	@ 0x4d
 800518c:	2205      	movs	r2, #5
 800518e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8005190:	78fa      	ldrb	r2, [r7, #3]
 8005192:	6879      	ldr	r1, [r7, #4]
 8005194:	4613      	mov	r3, r2
 8005196:	011b      	lsls	r3, r3, #4
 8005198:	1a9b      	subs	r3, r3, r2
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	440b      	add	r3, r1
 800519e:	331a      	adds	r3, #26
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d109      	bne.n	80051ba <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80051a6:	78fa      	ldrb	r2, [r7, #3]
 80051a8:	6879      	ldr	r1, [r7, #4]
 80051aa:	4613      	mov	r3, r2
 80051ac:	011b      	lsls	r3, r3, #4
 80051ae:	1a9b      	subs	r3, r3, r2
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	440b      	add	r3, r1
 80051b4:	3319      	adds	r3, #25
 80051b6:	2201      	movs	r2, #1
 80051b8:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80051ba:	78fa      	ldrb	r2, [r7, #3]
 80051bc:	6879      	ldr	r1, [r7, #4]
 80051be:	4613      	mov	r3, r2
 80051c0:	011b      	lsls	r3, r3, #4
 80051c2:	1a9b      	subs	r3, r3, r2
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	440b      	add	r3, r1
 80051c8:	3344      	adds	r3, #68	@ 0x44
 80051ca:	2200      	movs	r2, #0
 80051cc:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	78fa      	ldrb	r2, [r7, #3]
 80051d4:	4611      	mov	r1, r2
 80051d6:	4618      	mov	r0, r3
 80051d8:	f003 fd61 	bl	8008c9e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80051dc:	78fb      	ldrb	r3, [r7, #3]
 80051de:	015a      	lsls	r2, r3, #5
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	4413      	add	r3, r2
 80051e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051e8:	461a      	mov	r2, r3
 80051ea:	2340      	movs	r3, #64	@ 0x40
 80051ec:	6093      	str	r3, [r2, #8]
 80051ee:	e31f      	b.n	8005830 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	78fa      	ldrb	r2, [r7, #3]
 80051f6:	4611      	mov	r1, r2
 80051f8:	4618      	mov	r0, r3
 80051fa:	f002 ffa6 	bl	800814a <USB_ReadChInterrupts>
 80051fe:	4603      	mov	r3, r0
 8005200:	f003 0308 	and.w	r3, r3, #8
 8005204:	2b08      	cmp	r3, #8
 8005206:	d11a      	bne.n	800523e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8005208:	78fb      	ldrb	r3, [r7, #3]
 800520a:	015a      	lsls	r2, r3, #5
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	4413      	add	r3, r2
 8005210:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005214:	461a      	mov	r2, r3
 8005216:	2308      	movs	r3, #8
 8005218:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800521a:	78fa      	ldrb	r2, [r7, #3]
 800521c:	6879      	ldr	r1, [r7, #4]
 800521e:	4613      	mov	r3, r2
 8005220:	011b      	lsls	r3, r3, #4
 8005222:	1a9b      	subs	r3, r3, r2
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	440b      	add	r3, r1
 8005228:	334d      	adds	r3, #77	@ 0x4d
 800522a:	2206      	movs	r2, #6
 800522c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	78fa      	ldrb	r2, [r7, #3]
 8005234:	4611      	mov	r1, r2
 8005236:	4618      	mov	r0, r3
 8005238:	f003 fd31 	bl	8008c9e <USB_HC_Halt>
 800523c:	e2f8      	b.n	8005830 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	78fa      	ldrb	r2, [r7, #3]
 8005244:	4611      	mov	r1, r2
 8005246:	4618      	mov	r0, r3
 8005248:	f002 ff7f 	bl	800814a <USB_ReadChInterrupts>
 800524c:	4603      	mov	r3, r0
 800524e:	f003 0310 	and.w	r3, r3, #16
 8005252:	2b10      	cmp	r3, #16
 8005254:	d144      	bne.n	80052e0 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8005256:	78fa      	ldrb	r2, [r7, #3]
 8005258:	6879      	ldr	r1, [r7, #4]
 800525a:	4613      	mov	r3, r2
 800525c:	011b      	lsls	r3, r3, #4
 800525e:	1a9b      	subs	r3, r3, r2
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	440b      	add	r3, r1
 8005264:	3344      	adds	r3, #68	@ 0x44
 8005266:	2200      	movs	r2, #0
 8005268:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800526a:	78fa      	ldrb	r2, [r7, #3]
 800526c:	6879      	ldr	r1, [r7, #4]
 800526e:	4613      	mov	r3, r2
 8005270:	011b      	lsls	r3, r3, #4
 8005272:	1a9b      	subs	r3, r3, r2
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	440b      	add	r3, r1
 8005278:	334d      	adds	r3, #77	@ 0x4d
 800527a:	2204      	movs	r2, #4
 800527c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800527e:	78fa      	ldrb	r2, [r7, #3]
 8005280:	6879      	ldr	r1, [r7, #4]
 8005282:	4613      	mov	r3, r2
 8005284:	011b      	lsls	r3, r3, #4
 8005286:	1a9b      	subs	r3, r3, r2
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	440b      	add	r3, r1
 800528c:	3319      	adds	r3, #25
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d114      	bne.n	80052be <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8005294:	78fa      	ldrb	r2, [r7, #3]
 8005296:	6879      	ldr	r1, [r7, #4]
 8005298:	4613      	mov	r3, r2
 800529a:	011b      	lsls	r3, r3, #4
 800529c:	1a9b      	subs	r3, r3, r2
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	440b      	add	r3, r1
 80052a2:	3318      	adds	r3, #24
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d109      	bne.n	80052be <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80052aa:	78fa      	ldrb	r2, [r7, #3]
 80052ac:	6879      	ldr	r1, [r7, #4]
 80052ae:	4613      	mov	r3, r2
 80052b0:	011b      	lsls	r3, r3, #4
 80052b2:	1a9b      	subs	r3, r3, r2
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	440b      	add	r3, r1
 80052b8:	3319      	adds	r3, #25
 80052ba:	2201      	movs	r2, #1
 80052bc:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	78fa      	ldrb	r2, [r7, #3]
 80052c4:	4611      	mov	r1, r2
 80052c6:	4618      	mov	r0, r3
 80052c8:	f003 fce9 	bl	8008c9e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80052cc:	78fb      	ldrb	r3, [r7, #3]
 80052ce:	015a      	lsls	r2, r3, #5
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	4413      	add	r3, r2
 80052d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052d8:	461a      	mov	r2, r3
 80052da:	2310      	movs	r3, #16
 80052dc:	6093      	str	r3, [r2, #8]
 80052de:	e2a7      	b.n	8005830 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	78fa      	ldrb	r2, [r7, #3]
 80052e6:	4611      	mov	r1, r2
 80052e8:	4618      	mov	r0, r3
 80052ea:	f002 ff2e 	bl	800814a <USB_ReadChInterrupts>
 80052ee:	4603      	mov	r3, r0
 80052f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052f4:	2b80      	cmp	r3, #128	@ 0x80
 80052f6:	f040 8083 	bne.w	8005400 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	799b      	ldrb	r3, [r3, #6]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d111      	bne.n	8005326 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8005302:	78fa      	ldrb	r2, [r7, #3]
 8005304:	6879      	ldr	r1, [r7, #4]
 8005306:	4613      	mov	r3, r2
 8005308:	011b      	lsls	r3, r3, #4
 800530a:	1a9b      	subs	r3, r3, r2
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	440b      	add	r3, r1
 8005310:	334d      	adds	r3, #77	@ 0x4d
 8005312:	2207      	movs	r2, #7
 8005314:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	78fa      	ldrb	r2, [r7, #3]
 800531c:	4611      	mov	r1, r2
 800531e:	4618      	mov	r0, r3
 8005320:	f003 fcbd 	bl	8008c9e <USB_HC_Halt>
 8005324:	e062      	b.n	80053ec <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8005326:	78fa      	ldrb	r2, [r7, #3]
 8005328:	6879      	ldr	r1, [r7, #4]
 800532a:	4613      	mov	r3, r2
 800532c:	011b      	lsls	r3, r3, #4
 800532e:	1a9b      	subs	r3, r3, r2
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	440b      	add	r3, r1
 8005334:	3344      	adds	r3, #68	@ 0x44
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	1c59      	adds	r1, r3, #1
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	4613      	mov	r3, r2
 800533e:	011b      	lsls	r3, r3, #4
 8005340:	1a9b      	subs	r3, r3, r2
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	4403      	add	r3, r0
 8005346:	3344      	adds	r3, #68	@ 0x44
 8005348:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800534a:	78fa      	ldrb	r2, [r7, #3]
 800534c:	6879      	ldr	r1, [r7, #4]
 800534e:	4613      	mov	r3, r2
 8005350:	011b      	lsls	r3, r3, #4
 8005352:	1a9b      	subs	r3, r3, r2
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	440b      	add	r3, r1
 8005358:	3344      	adds	r3, #68	@ 0x44
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2b02      	cmp	r3, #2
 800535e:	d922      	bls.n	80053a6 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005360:	78fa      	ldrb	r2, [r7, #3]
 8005362:	6879      	ldr	r1, [r7, #4]
 8005364:	4613      	mov	r3, r2
 8005366:	011b      	lsls	r3, r3, #4
 8005368:	1a9b      	subs	r3, r3, r2
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	440b      	add	r3, r1
 800536e:	3344      	adds	r3, #68	@ 0x44
 8005370:	2200      	movs	r2, #0
 8005372:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005374:	78fa      	ldrb	r2, [r7, #3]
 8005376:	6879      	ldr	r1, [r7, #4]
 8005378:	4613      	mov	r3, r2
 800537a:	011b      	lsls	r3, r3, #4
 800537c:	1a9b      	subs	r3, r3, r2
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	440b      	add	r3, r1
 8005382:	334c      	adds	r3, #76	@ 0x4c
 8005384:	2204      	movs	r2, #4
 8005386:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005388:	78fa      	ldrb	r2, [r7, #3]
 800538a:	6879      	ldr	r1, [r7, #4]
 800538c:	4613      	mov	r3, r2
 800538e:	011b      	lsls	r3, r3, #4
 8005390:	1a9b      	subs	r3, r3, r2
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	440b      	add	r3, r1
 8005396:	334c      	adds	r3, #76	@ 0x4c
 8005398:	781a      	ldrb	r2, [r3, #0]
 800539a:	78fb      	ldrb	r3, [r7, #3]
 800539c:	4619      	mov	r1, r3
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f005 ffdc 	bl	800b35c <HAL_HCD_HC_NotifyURBChange_Callback>
 80053a4:	e022      	b.n	80053ec <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80053a6:	78fa      	ldrb	r2, [r7, #3]
 80053a8:	6879      	ldr	r1, [r7, #4]
 80053aa:	4613      	mov	r3, r2
 80053ac:	011b      	lsls	r3, r3, #4
 80053ae:	1a9b      	subs	r3, r3, r2
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	440b      	add	r3, r1
 80053b4:	334c      	adds	r3, #76	@ 0x4c
 80053b6:	2202      	movs	r2, #2
 80053b8:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80053ba:	78fb      	ldrb	r3, [r7, #3]
 80053bc:	015a      	lsls	r2, r3, #5
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	4413      	add	r3, r2
 80053c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80053d0:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80053d8:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80053da:	78fb      	ldrb	r3, [r7, #3]
 80053dc:	015a      	lsls	r2, r3, #5
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	4413      	add	r3, r2
 80053e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053e6:	461a      	mov	r2, r3
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80053ec:	78fb      	ldrb	r3, [r7, #3]
 80053ee:	015a      	lsls	r2, r3, #5
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	4413      	add	r3, r2
 80053f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053f8:	461a      	mov	r2, r3
 80053fa:	2380      	movs	r3, #128	@ 0x80
 80053fc:	6093      	str	r3, [r2, #8]
 80053fe:	e217      	b.n	8005830 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	78fa      	ldrb	r2, [r7, #3]
 8005406:	4611      	mov	r1, r2
 8005408:	4618      	mov	r0, r3
 800540a:	f002 fe9e 	bl	800814a <USB_ReadChInterrupts>
 800540e:	4603      	mov	r3, r0
 8005410:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005414:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005418:	d11b      	bne.n	8005452 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800541a:	78fa      	ldrb	r2, [r7, #3]
 800541c:	6879      	ldr	r1, [r7, #4]
 800541e:	4613      	mov	r3, r2
 8005420:	011b      	lsls	r3, r3, #4
 8005422:	1a9b      	subs	r3, r3, r2
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	440b      	add	r3, r1
 8005428:	334d      	adds	r3, #77	@ 0x4d
 800542a:	2209      	movs	r2, #9
 800542c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	78fa      	ldrb	r2, [r7, #3]
 8005434:	4611      	mov	r1, r2
 8005436:	4618      	mov	r0, r3
 8005438:	f003 fc31 	bl	8008c9e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800543c:	78fb      	ldrb	r3, [r7, #3]
 800543e:	015a      	lsls	r2, r3, #5
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	4413      	add	r3, r2
 8005444:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005448:	461a      	mov	r2, r3
 800544a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800544e:	6093      	str	r3, [r2, #8]
 8005450:	e1ee      	b.n	8005830 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	78fa      	ldrb	r2, [r7, #3]
 8005458:	4611      	mov	r1, r2
 800545a:	4618      	mov	r0, r3
 800545c:	f002 fe75 	bl	800814a <USB_ReadChInterrupts>
 8005460:	4603      	mov	r3, r0
 8005462:	f003 0302 	and.w	r3, r3, #2
 8005466:	2b02      	cmp	r3, #2
 8005468:	f040 81df 	bne.w	800582a <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800546c:	78fb      	ldrb	r3, [r7, #3]
 800546e:	015a      	lsls	r2, r3, #5
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	4413      	add	r3, r2
 8005474:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005478:	461a      	mov	r2, r3
 800547a:	2302      	movs	r3, #2
 800547c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800547e:	78fa      	ldrb	r2, [r7, #3]
 8005480:	6879      	ldr	r1, [r7, #4]
 8005482:	4613      	mov	r3, r2
 8005484:	011b      	lsls	r3, r3, #4
 8005486:	1a9b      	subs	r3, r3, r2
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	440b      	add	r3, r1
 800548c:	334d      	adds	r3, #77	@ 0x4d
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	2b01      	cmp	r3, #1
 8005492:	f040 8093 	bne.w	80055bc <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005496:	78fa      	ldrb	r2, [r7, #3]
 8005498:	6879      	ldr	r1, [r7, #4]
 800549a:	4613      	mov	r3, r2
 800549c:	011b      	lsls	r3, r3, #4
 800549e:	1a9b      	subs	r3, r3, r2
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	440b      	add	r3, r1
 80054a4:	334d      	adds	r3, #77	@ 0x4d
 80054a6:	2202      	movs	r2, #2
 80054a8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80054aa:	78fa      	ldrb	r2, [r7, #3]
 80054ac:	6879      	ldr	r1, [r7, #4]
 80054ae:	4613      	mov	r3, r2
 80054b0:	011b      	lsls	r3, r3, #4
 80054b2:	1a9b      	subs	r3, r3, r2
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	440b      	add	r3, r1
 80054b8:	334c      	adds	r3, #76	@ 0x4c
 80054ba:	2201      	movs	r2, #1
 80054bc:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80054be:	78fa      	ldrb	r2, [r7, #3]
 80054c0:	6879      	ldr	r1, [r7, #4]
 80054c2:	4613      	mov	r3, r2
 80054c4:	011b      	lsls	r3, r3, #4
 80054c6:	1a9b      	subs	r3, r3, r2
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	440b      	add	r3, r1
 80054cc:	3326      	adds	r3, #38	@ 0x26
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	2b02      	cmp	r3, #2
 80054d2:	d00b      	beq.n	80054ec <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80054d4:	78fa      	ldrb	r2, [r7, #3]
 80054d6:	6879      	ldr	r1, [r7, #4]
 80054d8:	4613      	mov	r3, r2
 80054da:	011b      	lsls	r3, r3, #4
 80054dc:	1a9b      	subs	r3, r3, r2
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	440b      	add	r3, r1
 80054e2:	3326      	adds	r3, #38	@ 0x26
 80054e4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80054e6:	2b03      	cmp	r3, #3
 80054e8:	f040 8190 	bne.w	800580c <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	799b      	ldrb	r3, [r3, #6]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d115      	bne.n	8005520 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80054f4:	78fa      	ldrb	r2, [r7, #3]
 80054f6:	6879      	ldr	r1, [r7, #4]
 80054f8:	4613      	mov	r3, r2
 80054fa:	011b      	lsls	r3, r3, #4
 80054fc:	1a9b      	subs	r3, r3, r2
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	440b      	add	r3, r1
 8005502:	333d      	adds	r3, #61	@ 0x3d
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	78fa      	ldrb	r2, [r7, #3]
 8005508:	f083 0301 	eor.w	r3, r3, #1
 800550c:	b2d8      	uxtb	r0, r3
 800550e:	6879      	ldr	r1, [r7, #4]
 8005510:	4613      	mov	r3, r2
 8005512:	011b      	lsls	r3, r3, #4
 8005514:	1a9b      	subs	r3, r3, r2
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	440b      	add	r3, r1
 800551a:	333d      	adds	r3, #61	@ 0x3d
 800551c:	4602      	mov	r2, r0
 800551e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	799b      	ldrb	r3, [r3, #6]
 8005524:	2b01      	cmp	r3, #1
 8005526:	f040 8171 	bne.w	800580c <HCD_HC_OUT_IRQHandler+0x954>
 800552a:	78fa      	ldrb	r2, [r7, #3]
 800552c:	6879      	ldr	r1, [r7, #4]
 800552e:	4613      	mov	r3, r2
 8005530:	011b      	lsls	r3, r3, #4
 8005532:	1a9b      	subs	r3, r3, r2
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	440b      	add	r3, r1
 8005538:	3334      	adds	r3, #52	@ 0x34
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	f000 8165 	beq.w	800580c <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8005542:	78fa      	ldrb	r2, [r7, #3]
 8005544:	6879      	ldr	r1, [r7, #4]
 8005546:	4613      	mov	r3, r2
 8005548:	011b      	lsls	r3, r3, #4
 800554a:	1a9b      	subs	r3, r3, r2
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	440b      	add	r3, r1
 8005550:	3334      	adds	r3, #52	@ 0x34
 8005552:	6819      	ldr	r1, [r3, #0]
 8005554:	78fa      	ldrb	r2, [r7, #3]
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	4613      	mov	r3, r2
 800555a:	011b      	lsls	r3, r3, #4
 800555c:	1a9b      	subs	r3, r3, r2
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	4403      	add	r3, r0
 8005562:	3328      	adds	r3, #40	@ 0x28
 8005564:	881b      	ldrh	r3, [r3, #0]
 8005566:	440b      	add	r3, r1
 8005568:	1e59      	subs	r1, r3, #1
 800556a:	78fa      	ldrb	r2, [r7, #3]
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	4613      	mov	r3, r2
 8005570:	011b      	lsls	r3, r3, #4
 8005572:	1a9b      	subs	r3, r3, r2
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	4403      	add	r3, r0
 8005578:	3328      	adds	r3, #40	@ 0x28
 800557a:	881b      	ldrh	r3, [r3, #0]
 800557c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005580:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	f003 0301 	and.w	r3, r3, #1
 8005588:	2b00      	cmp	r3, #0
 800558a:	f000 813f 	beq.w	800580c <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800558e:	78fa      	ldrb	r2, [r7, #3]
 8005590:	6879      	ldr	r1, [r7, #4]
 8005592:	4613      	mov	r3, r2
 8005594:	011b      	lsls	r3, r3, #4
 8005596:	1a9b      	subs	r3, r3, r2
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	440b      	add	r3, r1
 800559c:	333d      	adds	r3, #61	@ 0x3d
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	78fa      	ldrb	r2, [r7, #3]
 80055a2:	f083 0301 	eor.w	r3, r3, #1
 80055a6:	b2d8      	uxtb	r0, r3
 80055a8:	6879      	ldr	r1, [r7, #4]
 80055aa:	4613      	mov	r3, r2
 80055ac:	011b      	lsls	r3, r3, #4
 80055ae:	1a9b      	subs	r3, r3, r2
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	440b      	add	r3, r1
 80055b4:	333d      	adds	r3, #61	@ 0x3d
 80055b6:	4602      	mov	r2, r0
 80055b8:	701a      	strb	r2, [r3, #0]
 80055ba:	e127      	b.n	800580c <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80055bc:	78fa      	ldrb	r2, [r7, #3]
 80055be:	6879      	ldr	r1, [r7, #4]
 80055c0:	4613      	mov	r3, r2
 80055c2:	011b      	lsls	r3, r3, #4
 80055c4:	1a9b      	subs	r3, r3, r2
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	440b      	add	r3, r1
 80055ca:	334d      	adds	r3, #77	@ 0x4d
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	2b03      	cmp	r3, #3
 80055d0:	d120      	bne.n	8005614 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80055d2:	78fa      	ldrb	r2, [r7, #3]
 80055d4:	6879      	ldr	r1, [r7, #4]
 80055d6:	4613      	mov	r3, r2
 80055d8:	011b      	lsls	r3, r3, #4
 80055da:	1a9b      	subs	r3, r3, r2
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	440b      	add	r3, r1
 80055e0:	334d      	adds	r3, #77	@ 0x4d
 80055e2:	2202      	movs	r2, #2
 80055e4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80055e6:	78fa      	ldrb	r2, [r7, #3]
 80055e8:	6879      	ldr	r1, [r7, #4]
 80055ea:	4613      	mov	r3, r2
 80055ec:	011b      	lsls	r3, r3, #4
 80055ee:	1a9b      	subs	r3, r3, r2
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	440b      	add	r3, r1
 80055f4:	331b      	adds	r3, #27
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	f040 8107 	bne.w	800580c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80055fe:	78fa      	ldrb	r2, [r7, #3]
 8005600:	6879      	ldr	r1, [r7, #4]
 8005602:	4613      	mov	r3, r2
 8005604:	011b      	lsls	r3, r3, #4
 8005606:	1a9b      	subs	r3, r3, r2
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	440b      	add	r3, r1
 800560c:	334c      	adds	r3, #76	@ 0x4c
 800560e:	2202      	movs	r2, #2
 8005610:	701a      	strb	r2, [r3, #0]
 8005612:	e0fb      	b.n	800580c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8005614:	78fa      	ldrb	r2, [r7, #3]
 8005616:	6879      	ldr	r1, [r7, #4]
 8005618:	4613      	mov	r3, r2
 800561a:	011b      	lsls	r3, r3, #4
 800561c:	1a9b      	subs	r3, r3, r2
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	440b      	add	r3, r1
 8005622:	334d      	adds	r3, #77	@ 0x4d
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	2b04      	cmp	r3, #4
 8005628:	d13a      	bne.n	80056a0 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800562a:	78fa      	ldrb	r2, [r7, #3]
 800562c:	6879      	ldr	r1, [r7, #4]
 800562e:	4613      	mov	r3, r2
 8005630:	011b      	lsls	r3, r3, #4
 8005632:	1a9b      	subs	r3, r3, r2
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	440b      	add	r3, r1
 8005638:	334d      	adds	r3, #77	@ 0x4d
 800563a:	2202      	movs	r2, #2
 800563c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800563e:	78fa      	ldrb	r2, [r7, #3]
 8005640:	6879      	ldr	r1, [r7, #4]
 8005642:	4613      	mov	r3, r2
 8005644:	011b      	lsls	r3, r3, #4
 8005646:	1a9b      	subs	r3, r3, r2
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	440b      	add	r3, r1
 800564c:	334c      	adds	r3, #76	@ 0x4c
 800564e:	2202      	movs	r2, #2
 8005650:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005652:	78fa      	ldrb	r2, [r7, #3]
 8005654:	6879      	ldr	r1, [r7, #4]
 8005656:	4613      	mov	r3, r2
 8005658:	011b      	lsls	r3, r3, #4
 800565a:	1a9b      	subs	r3, r3, r2
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	440b      	add	r3, r1
 8005660:	331b      	adds	r3, #27
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	2b01      	cmp	r3, #1
 8005666:	f040 80d1 	bne.w	800580c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800566a:	78fa      	ldrb	r2, [r7, #3]
 800566c:	6879      	ldr	r1, [r7, #4]
 800566e:	4613      	mov	r3, r2
 8005670:	011b      	lsls	r3, r3, #4
 8005672:	1a9b      	subs	r3, r3, r2
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	440b      	add	r3, r1
 8005678:	331b      	adds	r3, #27
 800567a:	2200      	movs	r2, #0
 800567c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800567e:	78fb      	ldrb	r3, [r7, #3]
 8005680:	015a      	lsls	r2, r3, #5
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	4413      	add	r3, r2
 8005686:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	78fa      	ldrb	r2, [r7, #3]
 800568e:	0151      	lsls	r1, r2, #5
 8005690:	693a      	ldr	r2, [r7, #16]
 8005692:	440a      	add	r2, r1
 8005694:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005698:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800569c:	6053      	str	r3, [r2, #4]
 800569e:	e0b5      	b.n	800580c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80056a0:	78fa      	ldrb	r2, [r7, #3]
 80056a2:	6879      	ldr	r1, [r7, #4]
 80056a4:	4613      	mov	r3, r2
 80056a6:	011b      	lsls	r3, r3, #4
 80056a8:	1a9b      	subs	r3, r3, r2
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	440b      	add	r3, r1
 80056ae:	334d      	adds	r3, #77	@ 0x4d
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	2b05      	cmp	r3, #5
 80056b4:	d114      	bne.n	80056e0 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80056b6:	78fa      	ldrb	r2, [r7, #3]
 80056b8:	6879      	ldr	r1, [r7, #4]
 80056ba:	4613      	mov	r3, r2
 80056bc:	011b      	lsls	r3, r3, #4
 80056be:	1a9b      	subs	r3, r3, r2
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	440b      	add	r3, r1
 80056c4:	334d      	adds	r3, #77	@ 0x4d
 80056c6:	2202      	movs	r2, #2
 80056c8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80056ca:	78fa      	ldrb	r2, [r7, #3]
 80056cc:	6879      	ldr	r1, [r7, #4]
 80056ce:	4613      	mov	r3, r2
 80056d0:	011b      	lsls	r3, r3, #4
 80056d2:	1a9b      	subs	r3, r3, r2
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	440b      	add	r3, r1
 80056d8:	334c      	adds	r3, #76	@ 0x4c
 80056da:	2202      	movs	r2, #2
 80056dc:	701a      	strb	r2, [r3, #0]
 80056de:	e095      	b.n	800580c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80056e0:	78fa      	ldrb	r2, [r7, #3]
 80056e2:	6879      	ldr	r1, [r7, #4]
 80056e4:	4613      	mov	r3, r2
 80056e6:	011b      	lsls	r3, r3, #4
 80056e8:	1a9b      	subs	r3, r3, r2
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	440b      	add	r3, r1
 80056ee:	334d      	adds	r3, #77	@ 0x4d
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	2b06      	cmp	r3, #6
 80056f4:	d114      	bne.n	8005720 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80056f6:	78fa      	ldrb	r2, [r7, #3]
 80056f8:	6879      	ldr	r1, [r7, #4]
 80056fa:	4613      	mov	r3, r2
 80056fc:	011b      	lsls	r3, r3, #4
 80056fe:	1a9b      	subs	r3, r3, r2
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	440b      	add	r3, r1
 8005704:	334d      	adds	r3, #77	@ 0x4d
 8005706:	2202      	movs	r2, #2
 8005708:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800570a:	78fa      	ldrb	r2, [r7, #3]
 800570c:	6879      	ldr	r1, [r7, #4]
 800570e:	4613      	mov	r3, r2
 8005710:	011b      	lsls	r3, r3, #4
 8005712:	1a9b      	subs	r3, r3, r2
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	440b      	add	r3, r1
 8005718:	334c      	adds	r3, #76	@ 0x4c
 800571a:	2205      	movs	r2, #5
 800571c:	701a      	strb	r2, [r3, #0]
 800571e:	e075      	b.n	800580c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005720:	78fa      	ldrb	r2, [r7, #3]
 8005722:	6879      	ldr	r1, [r7, #4]
 8005724:	4613      	mov	r3, r2
 8005726:	011b      	lsls	r3, r3, #4
 8005728:	1a9b      	subs	r3, r3, r2
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	440b      	add	r3, r1
 800572e:	334d      	adds	r3, #77	@ 0x4d
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	2b07      	cmp	r3, #7
 8005734:	d00a      	beq.n	800574c <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8005736:	78fa      	ldrb	r2, [r7, #3]
 8005738:	6879      	ldr	r1, [r7, #4]
 800573a:	4613      	mov	r3, r2
 800573c:	011b      	lsls	r3, r3, #4
 800573e:	1a9b      	subs	r3, r3, r2
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	440b      	add	r3, r1
 8005744:	334d      	adds	r3, #77	@ 0x4d
 8005746:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005748:	2b09      	cmp	r3, #9
 800574a:	d170      	bne.n	800582e <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800574c:	78fa      	ldrb	r2, [r7, #3]
 800574e:	6879      	ldr	r1, [r7, #4]
 8005750:	4613      	mov	r3, r2
 8005752:	011b      	lsls	r3, r3, #4
 8005754:	1a9b      	subs	r3, r3, r2
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	440b      	add	r3, r1
 800575a:	334d      	adds	r3, #77	@ 0x4d
 800575c:	2202      	movs	r2, #2
 800575e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005760:	78fa      	ldrb	r2, [r7, #3]
 8005762:	6879      	ldr	r1, [r7, #4]
 8005764:	4613      	mov	r3, r2
 8005766:	011b      	lsls	r3, r3, #4
 8005768:	1a9b      	subs	r3, r3, r2
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	440b      	add	r3, r1
 800576e:	3344      	adds	r3, #68	@ 0x44
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	1c59      	adds	r1, r3, #1
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	4613      	mov	r3, r2
 8005778:	011b      	lsls	r3, r3, #4
 800577a:	1a9b      	subs	r3, r3, r2
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	4403      	add	r3, r0
 8005780:	3344      	adds	r3, #68	@ 0x44
 8005782:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005784:	78fa      	ldrb	r2, [r7, #3]
 8005786:	6879      	ldr	r1, [r7, #4]
 8005788:	4613      	mov	r3, r2
 800578a:	011b      	lsls	r3, r3, #4
 800578c:	1a9b      	subs	r3, r3, r2
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	440b      	add	r3, r1
 8005792:	3344      	adds	r3, #68	@ 0x44
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2b02      	cmp	r3, #2
 8005798:	d914      	bls.n	80057c4 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800579a:	78fa      	ldrb	r2, [r7, #3]
 800579c:	6879      	ldr	r1, [r7, #4]
 800579e:	4613      	mov	r3, r2
 80057a0:	011b      	lsls	r3, r3, #4
 80057a2:	1a9b      	subs	r3, r3, r2
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	440b      	add	r3, r1
 80057a8:	3344      	adds	r3, #68	@ 0x44
 80057aa:	2200      	movs	r2, #0
 80057ac:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80057ae:	78fa      	ldrb	r2, [r7, #3]
 80057b0:	6879      	ldr	r1, [r7, #4]
 80057b2:	4613      	mov	r3, r2
 80057b4:	011b      	lsls	r3, r3, #4
 80057b6:	1a9b      	subs	r3, r3, r2
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	440b      	add	r3, r1
 80057bc:	334c      	adds	r3, #76	@ 0x4c
 80057be:	2204      	movs	r2, #4
 80057c0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80057c2:	e022      	b.n	800580a <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80057c4:	78fa      	ldrb	r2, [r7, #3]
 80057c6:	6879      	ldr	r1, [r7, #4]
 80057c8:	4613      	mov	r3, r2
 80057ca:	011b      	lsls	r3, r3, #4
 80057cc:	1a9b      	subs	r3, r3, r2
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	440b      	add	r3, r1
 80057d2:	334c      	adds	r3, #76	@ 0x4c
 80057d4:	2202      	movs	r2, #2
 80057d6:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80057d8:	78fb      	ldrb	r3, [r7, #3]
 80057da:	015a      	lsls	r2, r3, #5
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	4413      	add	r3, r2
 80057e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80057ee:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80057f6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80057f8:	78fb      	ldrb	r3, [r7, #3]
 80057fa:	015a      	lsls	r2, r3, #5
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	4413      	add	r3, r2
 8005800:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005804:	461a      	mov	r2, r3
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800580a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800580c:	78fa      	ldrb	r2, [r7, #3]
 800580e:	6879      	ldr	r1, [r7, #4]
 8005810:	4613      	mov	r3, r2
 8005812:	011b      	lsls	r3, r3, #4
 8005814:	1a9b      	subs	r3, r3, r2
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	440b      	add	r3, r1
 800581a:	334c      	adds	r3, #76	@ 0x4c
 800581c:	781a      	ldrb	r2, [r3, #0]
 800581e:	78fb      	ldrb	r3, [r7, #3]
 8005820:	4619      	mov	r1, r3
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f005 fd9a 	bl	800b35c <HAL_HCD_HC_NotifyURBChange_Callback>
 8005828:	e002      	b.n	8005830 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800582a:	bf00      	nop
 800582c:	e000      	b.n	8005830 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800582e:	bf00      	nop
  }
}
 8005830:	3718      	adds	r7, #24
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}

08005836 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005836:	b580      	push	{r7, lr}
 8005838:	b08a      	sub	sp, #40	@ 0x28
 800583a:	af00      	add	r7, sp, #0
 800583c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005846:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	6a1b      	ldr	r3, [r3, #32]
 800584e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	f003 030f 	and.w	r3, r3, #15
 8005856:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	0c5b      	lsrs	r3, r3, #17
 800585c:	f003 030f 	and.w	r3, r3, #15
 8005860:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	091b      	lsrs	r3, r3, #4
 8005866:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800586a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	2b02      	cmp	r3, #2
 8005870:	d004      	beq.n	800587c <HCD_RXQLVL_IRQHandler+0x46>
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	2b05      	cmp	r3, #5
 8005876:	f000 80b6 	beq.w	80059e6 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800587a:	e0b7      	b.n	80059ec <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	2b00      	cmp	r3, #0
 8005880:	f000 80b3 	beq.w	80059ea <HCD_RXQLVL_IRQHandler+0x1b4>
 8005884:	6879      	ldr	r1, [r7, #4]
 8005886:	69ba      	ldr	r2, [r7, #24]
 8005888:	4613      	mov	r3, r2
 800588a:	011b      	lsls	r3, r3, #4
 800588c:	1a9b      	subs	r3, r3, r2
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	440b      	add	r3, r1
 8005892:	332c      	adds	r3, #44	@ 0x2c
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	2b00      	cmp	r3, #0
 8005898:	f000 80a7 	beq.w	80059ea <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800589c:	6879      	ldr	r1, [r7, #4]
 800589e:	69ba      	ldr	r2, [r7, #24]
 80058a0:	4613      	mov	r3, r2
 80058a2:	011b      	lsls	r3, r3, #4
 80058a4:	1a9b      	subs	r3, r3, r2
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	440b      	add	r3, r1
 80058aa:	3338      	adds	r3, #56	@ 0x38
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	18d1      	adds	r1, r2, r3
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	69ba      	ldr	r2, [r7, #24]
 80058b6:	4613      	mov	r3, r2
 80058b8:	011b      	lsls	r3, r3, #4
 80058ba:	1a9b      	subs	r3, r3, r2
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	4403      	add	r3, r0
 80058c0:	3334      	adds	r3, #52	@ 0x34
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4299      	cmp	r1, r3
 80058c6:	f200 8083 	bhi.w	80059d0 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6818      	ldr	r0, [r3, #0]
 80058ce:	6879      	ldr	r1, [r7, #4]
 80058d0:	69ba      	ldr	r2, [r7, #24]
 80058d2:	4613      	mov	r3, r2
 80058d4:	011b      	lsls	r3, r3, #4
 80058d6:	1a9b      	subs	r3, r3, r2
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	440b      	add	r3, r1
 80058dc:	332c      	adds	r3, #44	@ 0x2c
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	693a      	ldr	r2, [r7, #16]
 80058e2:	b292      	uxth	r2, r2
 80058e4:	4619      	mov	r1, r3
 80058e6:	f002 fbc5 	bl	8008074 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80058ea:	6879      	ldr	r1, [r7, #4]
 80058ec:	69ba      	ldr	r2, [r7, #24]
 80058ee:	4613      	mov	r3, r2
 80058f0:	011b      	lsls	r3, r3, #4
 80058f2:	1a9b      	subs	r3, r3, r2
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	440b      	add	r3, r1
 80058f8:	332c      	adds	r3, #44	@ 0x2c
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	18d1      	adds	r1, r2, r3
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	69ba      	ldr	r2, [r7, #24]
 8005904:	4613      	mov	r3, r2
 8005906:	011b      	lsls	r3, r3, #4
 8005908:	1a9b      	subs	r3, r3, r2
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	4403      	add	r3, r0
 800590e:	332c      	adds	r3, #44	@ 0x2c
 8005910:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8005912:	6879      	ldr	r1, [r7, #4]
 8005914:	69ba      	ldr	r2, [r7, #24]
 8005916:	4613      	mov	r3, r2
 8005918:	011b      	lsls	r3, r3, #4
 800591a:	1a9b      	subs	r3, r3, r2
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	440b      	add	r3, r1
 8005920:	3338      	adds	r3, #56	@ 0x38
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	18d1      	adds	r1, r2, r3
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	69ba      	ldr	r2, [r7, #24]
 800592c:	4613      	mov	r3, r2
 800592e:	011b      	lsls	r3, r3, #4
 8005930:	1a9b      	subs	r3, r3, r2
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	4403      	add	r3, r0
 8005936:	3338      	adds	r3, #56	@ 0x38
 8005938:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	015a      	lsls	r2, r3, #5
 800593e:	6a3b      	ldr	r3, [r7, #32]
 8005940:	4413      	add	r3, r2
 8005942:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005946:	691b      	ldr	r3, [r3, #16]
 8005948:	0cdb      	lsrs	r3, r3, #19
 800594a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800594e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005950:	6879      	ldr	r1, [r7, #4]
 8005952:	69ba      	ldr	r2, [r7, #24]
 8005954:	4613      	mov	r3, r2
 8005956:	011b      	lsls	r3, r3, #4
 8005958:	1a9b      	subs	r3, r3, r2
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	440b      	add	r3, r1
 800595e:	3328      	adds	r3, #40	@ 0x28
 8005960:	881b      	ldrh	r3, [r3, #0]
 8005962:	461a      	mov	r2, r3
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	4293      	cmp	r3, r2
 8005968:	d13f      	bne.n	80059ea <HCD_RXQLVL_IRQHandler+0x1b4>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d03c      	beq.n	80059ea <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	015a      	lsls	r2, r3, #5
 8005974:	6a3b      	ldr	r3, [r7, #32]
 8005976:	4413      	add	r3, r2
 8005978:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005986:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800598e:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8005990:	69bb      	ldr	r3, [r7, #24]
 8005992:	015a      	lsls	r2, r3, #5
 8005994:	6a3b      	ldr	r3, [r7, #32]
 8005996:	4413      	add	r3, r2
 8005998:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800599c:	461a      	mov	r2, r3
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80059a2:	6879      	ldr	r1, [r7, #4]
 80059a4:	69ba      	ldr	r2, [r7, #24]
 80059a6:	4613      	mov	r3, r2
 80059a8:	011b      	lsls	r3, r3, #4
 80059aa:	1a9b      	subs	r3, r3, r2
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	440b      	add	r3, r1
 80059b0:	333c      	adds	r3, #60	@ 0x3c
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	f083 0301 	eor.w	r3, r3, #1
 80059b8:	b2d8      	uxtb	r0, r3
 80059ba:	6879      	ldr	r1, [r7, #4]
 80059bc:	69ba      	ldr	r2, [r7, #24]
 80059be:	4613      	mov	r3, r2
 80059c0:	011b      	lsls	r3, r3, #4
 80059c2:	1a9b      	subs	r3, r3, r2
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	440b      	add	r3, r1
 80059c8:	333c      	adds	r3, #60	@ 0x3c
 80059ca:	4602      	mov	r2, r0
 80059cc:	701a      	strb	r2, [r3, #0]
      break;
 80059ce:	e00c      	b.n	80059ea <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80059d0:	6879      	ldr	r1, [r7, #4]
 80059d2:	69ba      	ldr	r2, [r7, #24]
 80059d4:	4613      	mov	r3, r2
 80059d6:	011b      	lsls	r3, r3, #4
 80059d8:	1a9b      	subs	r3, r3, r2
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	440b      	add	r3, r1
 80059de:	334c      	adds	r3, #76	@ 0x4c
 80059e0:	2204      	movs	r2, #4
 80059e2:	701a      	strb	r2, [r3, #0]
      break;
 80059e4:	e001      	b.n	80059ea <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80059e6:	bf00      	nop
 80059e8:	e000      	b.n	80059ec <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80059ea:	bf00      	nop
  }
}
 80059ec:	bf00      	nop
 80059ee:	3728      	adds	r7, #40	@ 0x28
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b086      	sub	sp, #24
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005a20:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f003 0302 	and.w	r3, r3, #2
 8005a28:	2b02      	cmp	r3, #2
 8005a2a:	d10b      	bne.n	8005a44 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f003 0301 	and.w	r3, r3, #1
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d102      	bne.n	8005a3c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f005 fc74 	bl	800b324 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	f043 0302 	orr.w	r3, r3, #2
 8005a42:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f003 0308 	and.w	r3, r3, #8
 8005a4a:	2b08      	cmp	r3, #8
 8005a4c:	d132      	bne.n	8005ab4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	f043 0308 	orr.w	r3, r3, #8
 8005a54:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f003 0304 	and.w	r3, r3, #4
 8005a5c:	2b04      	cmp	r3, #4
 8005a5e:	d126      	bne.n	8005aae <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	7a5b      	ldrb	r3, [r3, #9]
 8005a64:	2b02      	cmp	r3, #2
 8005a66:	d113      	bne.n	8005a90 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8005a6e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005a72:	d106      	bne.n	8005a82 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2102      	movs	r1, #2
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f002 fc90 	bl	80083a0 <USB_InitFSLSPClkSel>
 8005a80:	e011      	b.n	8005aa6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2101      	movs	r1, #1
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f002 fc89 	bl	80083a0 <USB_InitFSLSPClkSel>
 8005a8e:	e00a      	b.n	8005aa6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	79db      	ldrb	r3, [r3, #7]
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d106      	bne.n	8005aa6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8005aa4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f005 fc66 	bl	800b378 <HAL_HCD_PortEnabled_Callback>
 8005aac:	e002      	b.n	8005ab4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f005 fc70 	bl	800b394 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f003 0320 	and.w	r3, r3, #32
 8005aba:	2b20      	cmp	r3, #32
 8005abc:	d103      	bne.n	8005ac6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	f043 0320 	orr.w	r3, r3, #32
 8005ac4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005acc:	461a      	mov	r2, r3
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	6013      	str	r3, [r2, #0]
}
 8005ad2:	bf00      	nop
 8005ad4:	3718      	adds	r7, #24
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
	...

08005adc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d101      	bne.n	8005aee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e12b      	b.n	8005d46 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d106      	bne.n	8005b08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f7fc f926 	bl	8001d54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2224      	movs	r2, #36	@ 0x24
 8005b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f022 0201 	bic.w	r2, r2, #1
 8005b1e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005b2e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005b3e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005b40:	f000 fd80 	bl	8006644 <HAL_RCC_GetPCLK1Freq>
 8005b44:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	4a81      	ldr	r2, [pc, #516]	@ (8005d50 <HAL_I2C_Init+0x274>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d807      	bhi.n	8005b60 <HAL_I2C_Init+0x84>
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	4a80      	ldr	r2, [pc, #512]	@ (8005d54 <HAL_I2C_Init+0x278>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	bf94      	ite	ls
 8005b58:	2301      	movls	r3, #1
 8005b5a:	2300      	movhi	r3, #0
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	e006      	b.n	8005b6e <HAL_I2C_Init+0x92>
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	4a7d      	ldr	r2, [pc, #500]	@ (8005d58 <HAL_I2C_Init+0x27c>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	bf94      	ite	ls
 8005b68:	2301      	movls	r3, #1
 8005b6a:	2300      	movhi	r3, #0
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d001      	beq.n	8005b76 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e0e7      	b.n	8005d46 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	4a78      	ldr	r2, [pc, #480]	@ (8005d5c <HAL_I2C_Init+0x280>)
 8005b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b7e:	0c9b      	lsrs	r3, r3, #18
 8005b80:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	68ba      	ldr	r2, [r7, #8]
 8005b92:	430a      	orrs	r2, r1
 8005b94:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	6a1b      	ldr	r3, [r3, #32]
 8005b9c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	4a6a      	ldr	r2, [pc, #424]	@ (8005d50 <HAL_I2C_Init+0x274>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d802      	bhi.n	8005bb0 <HAL_I2C_Init+0xd4>
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	3301      	adds	r3, #1
 8005bae:	e009      	b.n	8005bc4 <HAL_I2C_Init+0xe8>
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005bb6:	fb02 f303 	mul.w	r3, r2, r3
 8005bba:	4a69      	ldr	r2, [pc, #420]	@ (8005d60 <HAL_I2C_Init+0x284>)
 8005bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8005bc0:	099b      	lsrs	r3, r3, #6
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	6812      	ldr	r2, [r2, #0]
 8005bc8:	430b      	orrs	r3, r1
 8005bca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	69db      	ldr	r3, [r3, #28]
 8005bd2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005bd6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	495c      	ldr	r1, [pc, #368]	@ (8005d50 <HAL_I2C_Init+0x274>)
 8005be0:	428b      	cmp	r3, r1
 8005be2:	d819      	bhi.n	8005c18 <HAL_I2C_Init+0x13c>
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	1e59      	subs	r1, r3, #1
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	005b      	lsls	r3, r3, #1
 8005bee:	fbb1 f3f3 	udiv	r3, r1, r3
 8005bf2:	1c59      	adds	r1, r3, #1
 8005bf4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005bf8:	400b      	ands	r3, r1
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d00a      	beq.n	8005c14 <HAL_I2C_Init+0x138>
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	1e59      	subs	r1, r3, #1
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	005b      	lsls	r3, r3, #1
 8005c08:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c12:	e051      	b.n	8005cb8 <HAL_I2C_Init+0x1dc>
 8005c14:	2304      	movs	r3, #4
 8005c16:	e04f      	b.n	8005cb8 <HAL_I2C_Init+0x1dc>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d111      	bne.n	8005c44 <HAL_I2C_Init+0x168>
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	1e58      	subs	r0, r3, #1
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6859      	ldr	r1, [r3, #4]
 8005c28:	460b      	mov	r3, r1
 8005c2a:	005b      	lsls	r3, r3, #1
 8005c2c:	440b      	add	r3, r1
 8005c2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c32:	3301      	adds	r3, #1
 8005c34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	bf0c      	ite	eq
 8005c3c:	2301      	moveq	r3, #1
 8005c3e:	2300      	movne	r3, #0
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	e012      	b.n	8005c6a <HAL_I2C_Init+0x18e>
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	1e58      	subs	r0, r3, #1
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6859      	ldr	r1, [r3, #4]
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	440b      	add	r3, r1
 8005c52:	0099      	lsls	r1, r3, #2
 8005c54:	440b      	add	r3, r1
 8005c56:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	bf0c      	ite	eq
 8005c64:	2301      	moveq	r3, #1
 8005c66:	2300      	movne	r3, #0
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d001      	beq.n	8005c72 <HAL_I2C_Init+0x196>
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e022      	b.n	8005cb8 <HAL_I2C_Init+0x1dc>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d10e      	bne.n	8005c98 <HAL_I2C_Init+0x1bc>
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	1e58      	subs	r0, r3, #1
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6859      	ldr	r1, [r3, #4]
 8005c82:	460b      	mov	r3, r1
 8005c84:	005b      	lsls	r3, r3, #1
 8005c86:	440b      	add	r3, r1
 8005c88:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c96:	e00f      	b.n	8005cb8 <HAL_I2C_Init+0x1dc>
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	1e58      	subs	r0, r3, #1
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6859      	ldr	r1, [r3, #4]
 8005ca0:	460b      	mov	r3, r1
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	440b      	add	r3, r1
 8005ca6:	0099      	lsls	r1, r3, #2
 8005ca8:	440b      	add	r3, r1
 8005caa:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cae:	3301      	adds	r3, #1
 8005cb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cb4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005cb8:	6879      	ldr	r1, [r7, #4]
 8005cba:	6809      	ldr	r1, [r1, #0]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	69da      	ldr	r2, [r3, #28]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a1b      	ldr	r3, [r3, #32]
 8005cd2:	431a      	orrs	r2, r3
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	430a      	orrs	r2, r1
 8005cda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005ce6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	6911      	ldr	r1, [r2, #16]
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	68d2      	ldr	r2, [r2, #12]
 8005cf2:	4311      	orrs	r1, r2
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	6812      	ldr	r2, [r2, #0]
 8005cf8:	430b      	orrs	r3, r1
 8005cfa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	695a      	ldr	r2, [r3, #20]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	699b      	ldr	r3, [r3, #24]
 8005d0e:	431a      	orrs	r2, r3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	430a      	orrs	r2, r1
 8005d16:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f042 0201 	orr.w	r2, r2, #1
 8005d26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2220      	movs	r2, #32
 8005d32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3710      	adds	r7, #16
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	000186a0 	.word	0x000186a0
 8005d54:	001e847f 	.word	0x001e847f
 8005d58:	003d08ff 	.word	0x003d08ff
 8005d5c:	431bde83 	.word	0x431bde83
 8005d60:	10624dd3 	.word	0x10624dd3

08005d64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b086      	sub	sp, #24
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d101      	bne.n	8005d76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	e267      	b.n	8006246 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f003 0301 	and.w	r3, r3, #1
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d075      	beq.n	8005e6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005d82:	4b88      	ldr	r3, [pc, #544]	@ (8005fa4 <HAL_RCC_OscConfig+0x240>)
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	f003 030c 	and.w	r3, r3, #12
 8005d8a:	2b04      	cmp	r3, #4
 8005d8c:	d00c      	beq.n	8005da8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d8e:	4b85      	ldr	r3, [pc, #532]	@ (8005fa4 <HAL_RCC_OscConfig+0x240>)
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005d96:	2b08      	cmp	r3, #8
 8005d98:	d112      	bne.n	8005dc0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d9a:	4b82      	ldr	r3, [pc, #520]	@ (8005fa4 <HAL_RCC_OscConfig+0x240>)
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005da2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005da6:	d10b      	bne.n	8005dc0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005da8:	4b7e      	ldr	r3, [pc, #504]	@ (8005fa4 <HAL_RCC_OscConfig+0x240>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d05b      	beq.n	8005e6c <HAL_RCC_OscConfig+0x108>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d157      	bne.n	8005e6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e242      	b.n	8006246 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dc8:	d106      	bne.n	8005dd8 <HAL_RCC_OscConfig+0x74>
 8005dca:	4b76      	ldr	r3, [pc, #472]	@ (8005fa4 <HAL_RCC_OscConfig+0x240>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a75      	ldr	r2, [pc, #468]	@ (8005fa4 <HAL_RCC_OscConfig+0x240>)
 8005dd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005dd4:	6013      	str	r3, [r2, #0]
 8005dd6:	e01d      	b.n	8005e14 <HAL_RCC_OscConfig+0xb0>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005de0:	d10c      	bne.n	8005dfc <HAL_RCC_OscConfig+0x98>
 8005de2:	4b70      	ldr	r3, [pc, #448]	@ (8005fa4 <HAL_RCC_OscConfig+0x240>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a6f      	ldr	r2, [pc, #444]	@ (8005fa4 <HAL_RCC_OscConfig+0x240>)
 8005de8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005dec:	6013      	str	r3, [r2, #0]
 8005dee:	4b6d      	ldr	r3, [pc, #436]	@ (8005fa4 <HAL_RCC_OscConfig+0x240>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a6c      	ldr	r2, [pc, #432]	@ (8005fa4 <HAL_RCC_OscConfig+0x240>)
 8005df4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005df8:	6013      	str	r3, [r2, #0]
 8005dfa:	e00b      	b.n	8005e14 <HAL_RCC_OscConfig+0xb0>
 8005dfc:	4b69      	ldr	r3, [pc, #420]	@ (8005fa4 <HAL_RCC_OscConfig+0x240>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a68      	ldr	r2, [pc, #416]	@ (8005fa4 <HAL_RCC_OscConfig+0x240>)
 8005e02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e06:	6013      	str	r3, [r2, #0]
 8005e08:	4b66      	ldr	r3, [pc, #408]	@ (8005fa4 <HAL_RCC_OscConfig+0x240>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a65      	ldr	r2, [pc, #404]	@ (8005fa4 <HAL_RCC_OscConfig+0x240>)
 8005e0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d013      	beq.n	8005e44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e1c:	f7fc fa5e 	bl	80022dc <HAL_GetTick>
 8005e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e22:	e008      	b.n	8005e36 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e24:	f7fc fa5a 	bl	80022dc <HAL_GetTick>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	2b64      	cmp	r3, #100	@ 0x64
 8005e30:	d901      	bls.n	8005e36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e207      	b.n	8006246 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e36:	4b5b      	ldr	r3, [pc, #364]	@ (8005fa4 <HAL_RCC_OscConfig+0x240>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d0f0      	beq.n	8005e24 <HAL_RCC_OscConfig+0xc0>
 8005e42:	e014      	b.n	8005e6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e44:	f7fc fa4a 	bl	80022dc <HAL_GetTick>
 8005e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e4a:	e008      	b.n	8005e5e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e4c:	f7fc fa46 	bl	80022dc <HAL_GetTick>
 8005e50:	4602      	mov	r2, r0
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	1ad3      	subs	r3, r2, r3
 8005e56:	2b64      	cmp	r3, #100	@ 0x64
 8005e58:	d901      	bls.n	8005e5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	e1f3      	b.n	8006246 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e5e:	4b51      	ldr	r3, [pc, #324]	@ (8005fa4 <HAL_RCC_OscConfig+0x240>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d1f0      	bne.n	8005e4c <HAL_RCC_OscConfig+0xe8>
 8005e6a:	e000      	b.n	8005e6e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 0302 	and.w	r3, r3, #2
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d063      	beq.n	8005f42 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005e7a:	4b4a      	ldr	r3, [pc, #296]	@ (8005fa4 <HAL_RCC_OscConfig+0x240>)
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	f003 030c 	and.w	r3, r3, #12
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d00b      	beq.n	8005e9e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e86:	4b47      	ldr	r3, [pc, #284]	@ (8005fa4 <HAL_RCC_OscConfig+0x240>)
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005e8e:	2b08      	cmp	r3, #8
 8005e90:	d11c      	bne.n	8005ecc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e92:	4b44      	ldr	r3, [pc, #272]	@ (8005fa4 <HAL_RCC_OscConfig+0x240>)
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d116      	bne.n	8005ecc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e9e:	4b41      	ldr	r3, [pc, #260]	@ (8005fa4 <HAL_RCC_OscConfig+0x240>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 0302 	and.w	r3, r3, #2
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d005      	beq.n	8005eb6 <HAL_RCC_OscConfig+0x152>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d001      	beq.n	8005eb6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e1c7      	b.n	8006246 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005eb6:	4b3b      	ldr	r3, [pc, #236]	@ (8005fa4 <HAL_RCC_OscConfig+0x240>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	691b      	ldr	r3, [r3, #16]
 8005ec2:	00db      	lsls	r3, r3, #3
 8005ec4:	4937      	ldr	r1, [pc, #220]	@ (8005fa4 <HAL_RCC_OscConfig+0x240>)
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005eca:	e03a      	b.n	8005f42 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d020      	beq.n	8005f16 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ed4:	4b34      	ldr	r3, [pc, #208]	@ (8005fa8 <HAL_RCC_OscConfig+0x244>)
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eda:	f7fc f9ff 	bl	80022dc <HAL_GetTick>
 8005ede:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ee0:	e008      	b.n	8005ef4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ee2:	f7fc f9fb 	bl	80022dc <HAL_GetTick>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d901      	bls.n	8005ef4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	e1a8      	b.n	8006246 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ef4:	4b2b      	ldr	r3, [pc, #172]	@ (8005fa4 <HAL_RCC_OscConfig+0x240>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f003 0302 	and.w	r3, r3, #2
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d0f0      	beq.n	8005ee2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f00:	4b28      	ldr	r3, [pc, #160]	@ (8005fa4 <HAL_RCC_OscConfig+0x240>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	691b      	ldr	r3, [r3, #16]
 8005f0c:	00db      	lsls	r3, r3, #3
 8005f0e:	4925      	ldr	r1, [pc, #148]	@ (8005fa4 <HAL_RCC_OscConfig+0x240>)
 8005f10:	4313      	orrs	r3, r2
 8005f12:	600b      	str	r3, [r1, #0]
 8005f14:	e015      	b.n	8005f42 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f16:	4b24      	ldr	r3, [pc, #144]	@ (8005fa8 <HAL_RCC_OscConfig+0x244>)
 8005f18:	2200      	movs	r2, #0
 8005f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f1c:	f7fc f9de 	bl	80022dc <HAL_GetTick>
 8005f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f22:	e008      	b.n	8005f36 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f24:	f7fc f9da 	bl	80022dc <HAL_GetTick>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	1ad3      	subs	r3, r2, r3
 8005f2e:	2b02      	cmp	r3, #2
 8005f30:	d901      	bls.n	8005f36 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005f32:	2303      	movs	r3, #3
 8005f34:	e187      	b.n	8006246 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f36:	4b1b      	ldr	r3, [pc, #108]	@ (8005fa4 <HAL_RCC_OscConfig+0x240>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 0302 	and.w	r3, r3, #2
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d1f0      	bne.n	8005f24 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f003 0308 	and.w	r3, r3, #8
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d036      	beq.n	8005fbc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	695b      	ldr	r3, [r3, #20]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d016      	beq.n	8005f84 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f56:	4b15      	ldr	r3, [pc, #84]	@ (8005fac <HAL_RCC_OscConfig+0x248>)
 8005f58:	2201      	movs	r2, #1
 8005f5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f5c:	f7fc f9be 	bl	80022dc <HAL_GetTick>
 8005f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f62:	e008      	b.n	8005f76 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f64:	f7fc f9ba 	bl	80022dc <HAL_GetTick>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	1ad3      	subs	r3, r2, r3
 8005f6e:	2b02      	cmp	r3, #2
 8005f70:	d901      	bls.n	8005f76 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	e167      	b.n	8006246 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f76:	4b0b      	ldr	r3, [pc, #44]	@ (8005fa4 <HAL_RCC_OscConfig+0x240>)
 8005f78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f7a:	f003 0302 	and.w	r3, r3, #2
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d0f0      	beq.n	8005f64 <HAL_RCC_OscConfig+0x200>
 8005f82:	e01b      	b.n	8005fbc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f84:	4b09      	ldr	r3, [pc, #36]	@ (8005fac <HAL_RCC_OscConfig+0x248>)
 8005f86:	2200      	movs	r2, #0
 8005f88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f8a:	f7fc f9a7 	bl	80022dc <HAL_GetTick>
 8005f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f90:	e00e      	b.n	8005fb0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f92:	f7fc f9a3 	bl	80022dc <HAL_GetTick>
 8005f96:	4602      	mov	r2, r0
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	1ad3      	subs	r3, r2, r3
 8005f9c:	2b02      	cmp	r3, #2
 8005f9e:	d907      	bls.n	8005fb0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005fa0:	2303      	movs	r3, #3
 8005fa2:	e150      	b.n	8006246 <HAL_RCC_OscConfig+0x4e2>
 8005fa4:	40023800 	.word	0x40023800
 8005fa8:	42470000 	.word	0x42470000
 8005fac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fb0:	4b88      	ldr	r3, [pc, #544]	@ (80061d4 <HAL_RCC_OscConfig+0x470>)
 8005fb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fb4:	f003 0302 	and.w	r3, r3, #2
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d1ea      	bne.n	8005f92 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f003 0304 	and.w	r3, r3, #4
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	f000 8097 	beq.w	80060f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fce:	4b81      	ldr	r3, [pc, #516]	@ (80061d4 <HAL_RCC_OscConfig+0x470>)
 8005fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d10f      	bne.n	8005ffa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fda:	2300      	movs	r3, #0
 8005fdc:	60bb      	str	r3, [r7, #8]
 8005fde:	4b7d      	ldr	r3, [pc, #500]	@ (80061d4 <HAL_RCC_OscConfig+0x470>)
 8005fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fe2:	4a7c      	ldr	r2, [pc, #496]	@ (80061d4 <HAL_RCC_OscConfig+0x470>)
 8005fe4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005fe8:	6413      	str	r3, [r2, #64]	@ 0x40
 8005fea:	4b7a      	ldr	r3, [pc, #488]	@ (80061d4 <HAL_RCC_OscConfig+0x470>)
 8005fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ff2:	60bb      	str	r3, [r7, #8]
 8005ff4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ffa:	4b77      	ldr	r3, [pc, #476]	@ (80061d8 <HAL_RCC_OscConfig+0x474>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006002:	2b00      	cmp	r3, #0
 8006004:	d118      	bne.n	8006038 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006006:	4b74      	ldr	r3, [pc, #464]	@ (80061d8 <HAL_RCC_OscConfig+0x474>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a73      	ldr	r2, [pc, #460]	@ (80061d8 <HAL_RCC_OscConfig+0x474>)
 800600c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006010:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006012:	f7fc f963 	bl	80022dc <HAL_GetTick>
 8006016:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006018:	e008      	b.n	800602c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800601a:	f7fc f95f 	bl	80022dc <HAL_GetTick>
 800601e:	4602      	mov	r2, r0
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	1ad3      	subs	r3, r2, r3
 8006024:	2b02      	cmp	r3, #2
 8006026:	d901      	bls.n	800602c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006028:	2303      	movs	r3, #3
 800602a:	e10c      	b.n	8006246 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800602c:	4b6a      	ldr	r3, [pc, #424]	@ (80061d8 <HAL_RCC_OscConfig+0x474>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006034:	2b00      	cmp	r3, #0
 8006036:	d0f0      	beq.n	800601a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	2b01      	cmp	r3, #1
 800603e:	d106      	bne.n	800604e <HAL_RCC_OscConfig+0x2ea>
 8006040:	4b64      	ldr	r3, [pc, #400]	@ (80061d4 <HAL_RCC_OscConfig+0x470>)
 8006042:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006044:	4a63      	ldr	r2, [pc, #396]	@ (80061d4 <HAL_RCC_OscConfig+0x470>)
 8006046:	f043 0301 	orr.w	r3, r3, #1
 800604a:	6713      	str	r3, [r2, #112]	@ 0x70
 800604c:	e01c      	b.n	8006088 <HAL_RCC_OscConfig+0x324>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	2b05      	cmp	r3, #5
 8006054:	d10c      	bne.n	8006070 <HAL_RCC_OscConfig+0x30c>
 8006056:	4b5f      	ldr	r3, [pc, #380]	@ (80061d4 <HAL_RCC_OscConfig+0x470>)
 8006058:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800605a:	4a5e      	ldr	r2, [pc, #376]	@ (80061d4 <HAL_RCC_OscConfig+0x470>)
 800605c:	f043 0304 	orr.w	r3, r3, #4
 8006060:	6713      	str	r3, [r2, #112]	@ 0x70
 8006062:	4b5c      	ldr	r3, [pc, #368]	@ (80061d4 <HAL_RCC_OscConfig+0x470>)
 8006064:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006066:	4a5b      	ldr	r2, [pc, #364]	@ (80061d4 <HAL_RCC_OscConfig+0x470>)
 8006068:	f043 0301 	orr.w	r3, r3, #1
 800606c:	6713      	str	r3, [r2, #112]	@ 0x70
 800606e:	e00b      	b.n	8006088 <HAL_RCC_OscConfig+0x324>
 8006070:	4b58      	ldr	r3, [pc, #352]	@ (80061d4 <HAL_RCC_OscConfig+0x470>)
 8006072:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006074:	4a57      	ldr	r2, [pc, #348]	@ (80061d4 <HAL_RCC_OscConfig+0x470>)
 8006076:	f023 0301 	bic.w	r3, r3, #1
 800607a:	6713      	str	r3, [r2, #112]	@ 0x70
 800607c:	4b55      	ldr	r3, [pc, #340]	@ (80061d4 <HAL_RCC_OscConfig+0x470>)
 800607e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006080:	4a54      	ldr	r2, [pc, #336]	@ (80061d4 <HAL_RCC_OscConfig+0x470>)
 8006082:	f023 0304 	bic.w	r3, r3, #4
 8006086:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d015      	beq.n	80060bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006090:	f7fc f924 	bl	80022dc <HAL_GetTick>
 8006094:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006096:	e00a      	b.n	80060ae <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006098:	f7fc f920 	bl	80022dc <HAL_GetTick>
 800609c:	4602      	mov	r2, r0
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	1ad3      	subs	r3, r2, r3
 80060a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d901      	bls.n	80060ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80060aa:	2303      	movs	r3, #3
 80060ac:	e0cb      	b.n	8006246 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060ae:	4b49      	ldr	r3, [pc, #292]	@ (80061d4 <HAL_RCC_OscConfig+0x470>)
 80060b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060b2:	f003 0302 	and.w	r3, r3, #2
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d0ee      	beq.n	8006098 <HAL_RCC_OscConfig+0x334>
 80060ba:	e014      	b.n	80060e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060bc:	f7fc f90e 	bl	80022dc <HAL_GetTick>
 80060c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060c2:	e00a      	b.n	80060da <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060c4:	f7fc f90a 	bl	80022dc <HAL_GetTick>
 80060c8:	4602      	mov	r2, r0
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d901      	bls.n	80060da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80060d6:	2303      	movs	r3, #3
 80060d8:	e0b5      	b.n	8006246 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060da:	4b3e      	ldr	r3, [pc, #248]	@ (80061d4 <HAL_RCC_OscConfig+0x470>)
 80060dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060de:	f003 0302 	and.w	r3, r3, #2
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d1ee      	bne.n	80060c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80060e6:	7dfb      	ldrb	r3, [r7, #23]
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d105      	bne.n	80060f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060ec:	4b39      	ldr	r3, [pc, #228]	@ (80061d4 <HAL_RCC_OscConfig+0x470>)
 80060ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060f0:	4a38      	ldr	r2, [pc, #224]	@ (80061d4 <HAL_RCC_OscConfig+0x470>)
 80060f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80060f6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	699b      	ldr	r3, [r3, #24]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	f000 80a1 	beq.w	8006244 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006102:	4b34      	ldr	r3, [pc, #208]	@ (80061d4 <HAL_RCC_OscConfig+0x470>)
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	f003 030c 	and.w	r3, r3, #12
 800610a:	2b08      	cmp	r3, #8
 800610c:	d05c      	beq.n	80061c8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	699b      	ldr	r3, [r3, #24]
 8006112:	2b02      	cmp	r3, #2
 8006114:	d141      	bne.n	800619a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006116:	4b31      	ldr	r3, [pc, #196]	@ (80061dc <HAL_RCC_OscConfig+0x478>)
 8006118:	2200      	movs	r2, #0
 800611a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800611c:	f7fc f8de 	bl	80022dc <HAL_GetTick>
 8006120:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006122:	e008      	b.n	8006136 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006124:	f7fc f8da 	bl	80022dc <HAL_GetTick>
 8006128:	4602      	mov	r2, r0
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	1ad3      	subs	r3, r2, r3
 800612e:	2b02      	cmp	r3, #2
 8006130:	d901      	bls.n	8006136 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006132:	2303      	movs	r3, #3
 8006134:	e087      	b.n	8006246 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006136:	4b27      	ldr	r3, [pc, #156]	@ (80061d4 <HAL_RCC_OscConfig+0x470>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800613e:	2b00      	cmp	r3, #0
 8006140:	d1f0      	bne.n	8006124 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	69da      	ldr	r2, [r3, #28]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6a1b      	ldr	r3, [r3, #32]
 800614a:	431a      	orrs	r2, r3
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006150:	019b      	lsls	r3, r3, #6
 8006152:	431a      	orrs	r2, r3
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006158:	085b      	lsrs	r3, r3, #1
 800615a:	3b01      	subs	r3, #1
 800615c:	041b      	lsls	r3, r3, #16
 800615e:	431a      	orrs	r2, r3
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006164:	061b      	lsls	r3, r3, #24
 8006166:	491b      	ldr	r1, [pc, #108]	@ (80061d4 <HAL_RCC_OscConfig+0x470>)
 8006168:	4313      	orrs	r3, r2
 800616a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800616c:	4b1b      	ldr	r3, [pc, #108]	@ (80061dc <HAL_RCC_OscConfig+0x478>)
 800616e:	2201      	movs	r2, #1
 8006170:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006172:	f7fc f8b3 	bl	80022dc <HAL_GetTick>
 8006176:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006178:	e008      	b.n	800618c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800617a:	f7fc f8af 	bl	80022dc <HAL_GetTick>
 800617e:	4602      	mov	r2, r0
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	1ad3      	subs	r3, r2, r3
 8006184:	2b02      	cmp	r3, #2
 8006186:	d901      	bls.n	800618c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006188:	2303      	movs	r3, #3
 800618a:	e05c      	b.n	8006246 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800618c:	4b11      	ldr	r3, [pc, #68]	@ (80061d4 <HAL_RCC_OscConfig+0x470>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006194:	2b00      	cmp	r3, #0
 8006196:	d0f0      	beq.n	800617a <HAL_RCC_OscConfig+0x416>
 8006198:	e054      	b.n	8006244 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800619a:	4b10      	ldr	r3, [pc, #64]	@ (80061dc <HAL_RCC_OscConfig+0x478>)
 800619c:	2200      	movs	r2, #0
 800619e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061a0:	f7fc f89c 	bl	80022dc <HAL_GetTick>
 80061a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061a6:	e008      	b.n	80061ba <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061a8:	f7fc f898 	bl	80022dc <HAL_GetTick>
 80061ac:	4602      	mov	r2, r0
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	1ad3      	subs	r3, r2, r3
 80061b2:	2b02      	cmp	r3, #2
 80061b4:	d901      	bls.n	80061ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80061b6:	2303      	movs	r3, #3
 80061b8:	e045      	b.n	8006246 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061ba:	4b06      	ldr	r3, [pc, #24]	@ (80061d4 <HAL_RCC_OscConfig+0x470>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d1f0      	bne.n	80061a8 <HAL_RCC_OscConfig+0x444>
 80061c6:	e03d      	b.n	8006244 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	699b      	ldr	r3, [r3, #24]
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d107      	bne.n	80061e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	e038      	b.n	8006246 <HAL_RCC_OscConfig+0x4e2>
 80061d4:	40023800 	.word	0x40023800
 80061d8:	40007000 	.word	0x40007000
 80061dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80061e0:	4b1b      	ldr	r3, [pc, #108]	@ (8006250 <HAL_RCC_OscConfig+0x4ec>)
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	699b      	ldr	r3, [r3, #24]
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d028      	beq.n	8006240 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d121      	bne.n	8006240 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006206:	429a      	cmp	r2, r3
 8006208:	d11a      	bne.n	8006240 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006210:	4013      	ands	r3, r2
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006216:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006218:	4293      	cmp	r3, r2
 800621a:	d111      	bne.n	8006240 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006226:	085b      	lsrs	r3, r3, #1
 8006228:	3b01      	subs	r3, #1
 800622a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800622c:	429a      	cmp	r2, r3
 800622e:	d107      	bne.n	8006240 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800623a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800623c:	429a      	cmp	r2, r3
 800623e:	d001      	beq.n	8006244 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	e000      	b.n	8006246 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	3718      	adds	r7, #24
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	40023800 	.word	0x40023800

08006254 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d101      	bne.n	8006268 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	e0cc      	b.n	8006402 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006268:	4b68      	ldr	r3, [pc, #416]	@ (800640c <HAL_RCC_ClockConfig+0x1b8>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 0307 	and.w	r3, r3, #7
 8006270:	683a      	ldr	r2, [r7, #0]
 8006272:	429a      	cmp	r2, r3
 8006274:	d90c      	bls.n	8006290 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006276:	4b65      	ldr	r3, [pc, #404]	@ (800640c <HAL_RCC_ClockConfig+0x1b8>)
 8006278:	683a      	ldr	r2, [r7, #0]
 800627a:	b2d2      	uxtb	r2, r2
 800627c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800627e:	4b63      	ldr	r3, [pc, #396]	@ (800640c <HAL_RCC_ClockConfig+0x1b8>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f003 0307 	and.w	r3, r3, #7
 8006286:	683a      	ldr	r2, [r7, #0]
 8006288:	429a      	cmp	r2, r3
 800628a:	d001      	beq.n	8006290 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	e0b8      	b.n	8006402 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f003 0302 	and.w	r3, r3, #2
 8006298:	2b00      	cmp	r3, #0
 800629a:	d020      	beq.n	80062de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f003 0304 	and.w	r3, r3, #4
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d005      	beq.n	80062b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80062a8:	4b59      	ldr	r3, [pc, #356]	@ (8006410 <HAL_RCC_ClockConfig+0x1bc>)
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	4a58      	ldr	r2, [pc, #352]	@ (8006410 <HAL_RCC_ClockConfig+0x1bc>)
 80062ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80062b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f003 0308 	and.w	r3, r3, #8
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d005      	beq.n	80062cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80062c0:	4b53      	ldr	r3, [pc, #332]	@ (8006410 <HAL_RCC_ClockConfig+0x1bc>)
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	4a52      	ldr	r2, [pc, #328]	@ (8006410 <HAL_RCC_ClockConfig+0x1bc>)
 80062c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80062ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062cc:	4b50      	ldr	r3, [pc, #320]	@ (8006410 <HAL_RCC_ClockConfig+0x1bc>)
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	494d      	ldr	r1, [pc, #308]	@ (8006410 <HAL_RCC_ClockConfig+0x1bc>)
 80062da:	4313      	orrs	r3, r2
 80062dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f003 0301 	and.w	r3, r3, #1
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d044      	beq.n	8006374 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d107      	bne.n	8006302 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062f2:	4b47      	ldr	r3, [pc, #284]	@ (8006410 <HAL_RCC_ClockConfig+0x1bc>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d119      	bne.n	8006332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	e07f      	b.n	8006402 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	2b02      	cmp	r3, #2
 8006308:	d003      	beq.n	8006312 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800630e:	2b03      	cmp	r3, #3
 8006310:	d107      	bne.n	8006322 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006312:	4b3f      	ldr	r3, [pc, #252]	@ (8006410 <HAL_RCC_ClockConfig+0x1bc>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800631a:	2b00      	cmp	r3, #0
 800631c:	d109      	bne.n	8006332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e06f      	b.n	8006402 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006322:	4b3b      	ldr	r3, [pc, #236]	@ (8006410 <HAL_RCC_ClockConfig+0x1bc>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f003 0302 	and.w	r3, r3, #2
 800632a:	2b00      	cmp	r3, #0
 800632c:	d101      	bne.n	8006332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	e067      	b.n	8006402 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006332:	4b37      	ldr	r3, [pc, #220]	@ (8006410 <HAL_RCC_ClockConfig+0x1bc>)
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f023 0203 	bic.w	r2, r3, #3
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	4934      	ldr	r1, [pc, #208]	@ (8006410 <HAL_RCC_ClockConfig+0x1bc>)
 8006340:	4313      	orrs	r3, r2
 8006342:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006344:	f7fb ffca 	bl	80022dc <HAL_GetTick>
 8006348:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800634a:	e00a      	b.n	8006362 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800634c:	f7fb ffc6 	bl	80022dc <HAL_GetTick>
 8006350:	4602      	mov	r2, r0
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	f241 3288 	movw	r2, #5000	@ 0x1388
 800635a:	4293      	cmp	r3, r2
 800635c:	d901      	bls.n	8006362 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800635e:	2303      	movs	r3, #3
 8006360:	e04f      	b.n	8006402 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006362:	4b2b      	ldr	r3, [pc, #172]	@ (8006410 <HAL_RCC_ClockConfig+0x1bc>)
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	f003 020c 	and.w	r2, r3, #12
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	429a      	cmp	r2, r3
 8006372:	d1eb      	bne.n	800634c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006374:	4b25      	ldr	r3, [pc, #148]	@ (800640c <HAL_RCC_ClockConfig+0x1b8>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f003 0307 	and.w	r3, r3, #7
 800637c:	683a      	ldr	r2, [r7, #0]
 800637e:	429a      	cmp	r2, r3
 8006380:	d20c      	bcs.n	800639c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006382:	4b22      	ldr	r3, [pc, #136]	@ (800640c <HAL_RCC_ClockConfig+0x1b8>)
 8006384:	683a      	ldr	r2, [r7, #0]
 8006386:	b2d2      	uxtb	r2, r2
 8006388:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800638a:	4b20      	ldr	r3, [pc, #128]	@ (800640c <HAL_RCC_ClockConfig+0x1b8>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 0307 	and.w	r3, r3, #7
 8006392:	683a      	ldr	r2, [r7, #0]
 8006394:	429a      	cmp	r2, r3
 8006396:	d001      	beq.n	800639c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	e032      	b.n	8006402 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 0304 	and.w	r3, r3, #4
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d008      	beq.n	80063ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063a8:	4b19      	ldr	r3, [pc, #100]	@ (8006410 <HAL_RCC_ClockConfig+0x1bc>)
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	4916      	ldr	r1, [pc, #88]	@ (8006410 <HAL_RCC_ClockConfig+0x1bc>)
 80063b6:	4313      	orrs	r3, r2
 80063b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f003 0308 	and.w	r3, r3, #8
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d009      	beq.n	80063da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80063c6:	4b12      	ldr	r3, [pc, #72]	@ (8006410 <HAL_RCC_ClockConfig+0x1bc>)
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	00db      	lsls	r3, r3, #3
 80063d4:	490e      	ldr	r1, [pc, #56]	@ (8006410 <HAL_RCC_ClockConfig+0x1bc>)
 80063d6:	4313      	orrs	r3, r2
 80063d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80063da:	f000 f821 	bl	8006420 <HAL_RCC_GetSysClockFreq>
 80063de:	4602      	mov	r2, r0
 80063e0:	4b0b      	ldr	r3, [pc, #44]	@ (8006410 <HAL_RCC_ClockConfig+0x1bc>)
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	091b      	lsrs	r3, r3, #4
 80063e6:	f003 030f 	and.w	r3, r3, #15
 80063ea:	490a      	ldr	r1, [pc, #40]	@ (8006414 <HAL_RCC_ClockConfig+0x1c0>)
 80063ec:	5ccb      	ldrb	r3, [r1, r3]
 80063ee:	fa22 f303 	lsr.w	r3, r2, r3
 80063f2:	4a09      	ldr	r2, [pc, #36]	@ (8006418 <HAL_RCC_ClockConfig+0x1c4>)
 80063f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80063f6:	4b09      	ldr	r3, [pc, #36]	@ (800641c <HAL_RCC_ClockConfig+0x1c8>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4618      	mov	r0, r3
 80063fc:	f7fb ff2a 	bl	8002254 <HAL_InitTick>

  return HAL_OK;
 8006400:	2300      	movs	r3, #0
}
 8006402:	4618      	mov	r0, r3
 8006404:	3710      	adds	r7, #16
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
 800640a:	bf00      	nop
 800640c:	40023c00 	.word	0x40023c00
 8006410:	40023800 	.word	0x40023800
 8006414:	0800c144 	.word	0x0800c144
 8006418:	2000001c 	.word	0x2000001c
 800641c:	20000020 	.word	0x20000020

08006420 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006420:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006424:	b094      	sub	sp, #80	@ 0x50
 8006426:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006428:	2300      	movs	r3, #0
 800642a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800642c:	2300      	movs	r3, #0
 800642e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006430:	2300      	movs	r3, #0
 8006432:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006434:	2300      	movs	r3, #0
 8006436:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006438:	4b79      	ldr	r3, [pc, #484]	@ (8006620 <HAL_RCC_GetSysClockFreq+0x200>)
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	f003 030c 	and.w	r3, r3, #12
 8006440:	2b08      	cmp	r3, #8
 8006442:	d00d      	beq.n	8006460 <HAL_RCC_GetSysClockFreq+0x40>
 8006444:	2b08      	cmp	r3, #8
 8006446:	f200 80e1 	bhi.w	800660c <HAL_RCC_GetSysClockFreq+0x1ec>
 800644a:	2b00      	cmp	r3, #0
 800644c:	d002      	beq.n	8006454 <HAL_RCC_GetSysClockFreq+0x34>
 800644e:	2b04      	cmp	r3, #4
 8006450:	d003      	beq.n	800645a <HAL_RCC_GetSysClockFreq+0x3a>
 8006452:	e0db      	b.n	800660c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006454:	4b73      	ldr	r3, [pc, #460]	@ (8006624 <HAL_RCC_GetSysClockFreq+0x204>)
 8006456:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006458:	e0db      	b.n	8006612 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800645a:	4b73      	ldr	r3, [pc, #460]	@ (8006628 <HAL_RCC_GetSysClockFreq+0x208>)
 800645c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800645e:	e0d8      	b.n	8006612 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006460:	4b6f      	ldr	r3, [pc, #444]	@ (8006620 <HAL_RCC_GetSysClockFreq+0x200>)
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006468:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800646a:	4b6d      	ldr	r3, [pc, #436]	@ (8006620 <HAL_RCC_GetSysClockFreq+0x200>)
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006472:	2b00      	cmp	r3, #0
 8006474:	d063      	beq.n	800653e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006476:	4b6a      	ldr	r3, [pc, #424]	@ (8006620 <HAL_RCC_GetSysClockFreq+0x200>)
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	099b      	lsrs	r3, r3, #6
 800647c:	2200      	movs	r2, #0
 800647e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006480:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006484:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006488:	633b      	str	r3, [r7, #48]	@ 0x30
 800648a:	2300      	movs	r3, #0
 800648c:	637b      	str	r3, [r7, #52]	@ 0x34
 800648e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006492:	4622      	mov	r2, r4
 8006494:	462b      	mov	r3, r5
 8006496:	f04f 0000 	mov.w	r0, #0
 800649a:	f04f 0100 	mov.w	r1, #0
 800649e:	0159      	lsls	r1, r3, #5
 80064a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80064a4:	0150      	lsls	r0, r2, #5
 80064a6:	4602      	mov	r2, r0
 80064a8:	460b      	mov	r3, r1
 80064aa:	4621      	mov	r1, r4
 80064ac:	1a51      	subs	r1, r2, r1
 80064ae:	6139      	str	r1, [r7, #16]
 80064b0:	4629      	mov	r1, r5
 80064b2:	eb63 0301 	sbc.w	r3, r3, r1
 80064b6:	617b      	str	r3, [r7, #20]
 80064b8:	f04f 0200 	mov.w	r2, #0
 80064bc:	f04f 0300 	mov.w	r3, #0
 80064c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80064c4:	4659      	mov	r1, fp
 80064c6:	018b      	lsls	r3, r1, #6
 80064c8:	4651      	mov	r1, sl
 80064ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80064ce:	4651      	mov	r1, sl
 80064d0:	018a      	lsls	r2, r1, #6
 80064d2:	4651      	mov	r1, sl
 80064d4:	ebb2 0801 	subs.w	r8, r2, r1
 80064d8:	4659      	mov	r1, fp
 80064da:	eb63 0901 	sbc.w	r9, r3, r1
 80064de:	f04f 0200 	mov.w	r2, #0
 80064e2:	f04f 0300 	mov.w	r3, #0
 80064e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80064ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80064ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80064f2:	4690      	mov	r8, r2
 80064f4:	4699      	mov	r9, r3
 80064f6:	4623      	mov	r3, r4
 80064f8:	eb18 0303 	adds.w	r3, r8, r3
 80064fc:	60bb      	str	r3, [r7, #8]
 80064fe:	462b      	mov	r3, r5
 8006500:	eb49 0303 	adc.w	r3, r9, r3
 8006504:	60fb      	str	r3, [r7, #12]
 8006506:	f04f 0200 	mov.w	r2, #0
 800650a:	f04f 0300 	mov.w	r3, #0
 800650e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006512:	4629      	mov	r1, r5
 8006514:	024b      	lsls	r3, r1, #9
 8006516:	4621      	mov	r1, r4
 8006518:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800651c:	4621      	mov	r1, r4
 800651e:	024a      	lsls	r2, r1, #9
 8006520:	4610      	mov	r0, r2
 8006522:	4619      	mov	r1, r3
 8006524:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006526:	2200      	movs	r2, #0
 8006528:	62bb      	str	r3, [r7, #40]	@ 0x28
 800652a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800652c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006530:	f7f9 fea6 	bl	8000280 <__aeabi_uldivmod>
 8006534:	4602      	mov	r2, r0
 8006536:	460b      	mov	r3, r1
 8006538:	4613      	mov	r3, r2
 800653a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800653c:	e058      	b.n	80065f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800653e:	4b38      	ldr	r3, [pc, #224]	@ (8006620 <HAL_RCC_GetSysClockFreq+0x200>)
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	099b      	lsrs	r3, r3, #6
 8006544:	2200      	movs	r2, #0
 8006546:	4618      	mov	r0, r3
 8006548:	4611      	mov	r1, r2
 800654a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800654e:	623b      	str	r3, [r7, #32]
 8006550:	2300      	movs	r3, #0
 8006552:	627b      	str	r3, [r7, #36]	@ 0x24
 8006554:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006558:	4642      	mov	r2, r8
 800655a:	464b      	mov	r3, r9
 800655c:	f04f 0000 	mov.w	r0, #0
 8006560:	f04f 0100 	mov.w	r1, #0
 8006564:	0159      	lsls	r1, r3, #5
 8006566:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800656a:	0150      	lsls	r0, r2, #5
 800656c:	4602      	mov	r2, r0
 800656e:	460b      	mov	r3, r1
 8006570:	4641      	mov	r1, r8
 8006572:	ebb2 0a01 	subs.w	sl, r2, r1
 8006576:	4649      	mov	r1, r9
 8006578:	eb63 0b01 	sbc.w	fp, r3, r1
 800657c:	f04f 0200 	mov.w	r2, #0
 8006580:	f04f 0300 	mov.w	r3, #0
 8006584:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006588:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800658c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006590:	ebb2 040a 	subs.w	r4, r2, sl
 8006594:	eb63 050b 	sbc.w	r5, r3, fp
 8006598:	f04f 0200 	mov.w	r2, #0
 800659c:	f04f 0300 	mov.w	r3, #0
 80065a0:	00eb      	lsls	r3, r5, #3
 80065a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065a6:	00e2      	lsls	r2, r4, #3
 80065a8:	4614      	mov	r4, r2
 80065aa:	461d      	mov	r5, r3
 80065ac:	4643      	mov	r3, r8
 80065ae:	18e3      	adds	r3, r4, r3
 80065b0:	603b      	str	r3, [r7, #0]
 80065b2:	464b      	mov	r3, r9
 80065b4:	eb45 0303 	adc.w	r3, r5, r3
 80065b8:	607b      	str	r3, [r7, #4]
 80065ba:	f04f 0200 	mov.w	r2, #0
 80065be:	f04f 0300 	mov.w	r3, #0
 80065c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80065c6:	4629      	mov	r1, r5
 80065c8:	028b      	lsls	r3, r1, #10
 80065ca:	4621      	mov	r1, r4
 80065cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80065d0:	4621      	mov	r1, r4
 80065d2:	028a      	lsls	r2, r1, #10
 80065d4:	4610      	mov	r0, r2
 80065d6:	4619      	mov	r1, r3
 80065d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065da:	2200      	movs	r2, #0
 80065dc:	61bb      	str	r3, [r7, #24]
 80065de:	61fa      	str	r2, [r7, #28]
 80065e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80065e4:	f7f9 fe4c 	bl	8000280 <__aeabi_uldivmod>
 80065e8:	4602      	mov	r2, r0
 80065ea:	460b      	mov	r3, r1
 80065ec:	4613      	mov	r3, r2
 80065ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80065f0:	4b0b      	ldr	r3, [pc, #44]	@ (8006620 <HAL_RCC_GetSysClockFreq+0x200>)
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	0c1b      	lsrs	r3, r3, #16
 80065f6:	f003 0303 	and.w	r3, r3, #3
 80065fa:	3301      	adds	r3, #1
 80065fc:	005b      	lsls	r3, r3, #1
 80065fe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006600:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006602:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006604:	fbb2 f3f3 	udiv	r3, r2, r3
 8006608:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800660a:	e002      	b.n	8006612 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800660c:	4b05      	ldr	r3, [pc, #20]	@ (8006624 <HAL_RCC_GetSysClockFreq+0x204>)
 800660e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006610:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006612:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006614:	4618      	mov	r0, r3
 8006616:	3750      	adds	r7, #80	@ 0x50
 8006618:	46bd      	mov	sp, r7
 800661a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800661e:	bf00      	nop
 8006620:	40023800 	.word	0x40023800
 8006624:	00f42400 	.word	0x00f42400
 8006628:	007a1200 	.word	0x007a1200

0800662c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800662c:	b480      	push	{r7}
 800662e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006630:	4b03      	ldr	r3, [pc, #12]	@ (8006640 <HAL_RCC_GetHCLKFreq+0x14>)
 8006632:	681b      	ldr	r3, [r3, #0]
}
 8006634:	4618      	mov	r0, r3
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop
 8006640:	2000001c 	.word	0x2000001c

08006644 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006648:	f7ff fff0 	bl	800662c <HAL_RCC_GetHCLKFreq>
 800664c:	4602      	mov	r2, r0
 800664e:	4b05      	ldr	r3, [pc, #20]	@ (8006664 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	0a9b      	lsrs	r3, r3, #10
 8006654:	f003 0307 	and.w	r3, r3, #7
 8006658:	4903      	ldr	r1, [pc, #12]	@ (8006668 <HAL_RCC_GetPCLK1Freq+0x24>)
 800665a:	5ccb      	ldrb	r3, [r1, r3]
 800665c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006660:	4618      	mov	r0, r3
 8006662:	bd80      	pop	{r7, pc}
 8006664:	40023800 	.word	0x40023800
 8006668:	0800c154 	.word	0x0800c154

0800666c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006670:	f7ff ffdc 	bl	800662c <HAL_RCC_GetHCLKFreq>
 8006674:	4602      	mov	r2, r0
 8006676:	4b05      	ldr	r3, [pc, #20]	@ (800668c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	0b5b      	lsrs	r3, r3, #13
 800667c:	f003 0307 	and.w	r3, r3, #7
 8006680:	4903      	ldr	r1, [pc, #12]	@ (8006690 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006682:	5ccb      	ldrb	r3, [r1, r3]
 8006684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006688:	4618      	mov	r0, r3
 800668a:	bd80      	pop	{r7, pc}
 800668c:	40023800 	.word	0x40023800
 8006690:	0800c154 	.word	0x0800c154

08006694 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b082      	sub	sp, #8
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d101      	bne.n	80066a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e07b      	b.n	800679e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d108      	bne.n	80066c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80066b6:	d009      	beq.n	80066cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	61da      	str	r2, [r3, #28]
 80066be:	e005      	b.n	80066cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d106      	bne.n	80066ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f7fb fb7c 	bl	8001de4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2202      	movs	r2, #2
 80066f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006702:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006714:	431a      	orrs	r2, r3
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800671e:	431a      	orrs	r2, r3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	691b      	ldr	r3, [r3, #16]
 8006724:	f003 0302 	and.w	r3, r3, #2
 8006728:	431a      	orrs	r2, r3
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	695b      	ldr	r3, [r3, #20]
 800672e:	f003 0301 	and.w	r3, r3, #1
 8006732:	431a      	orrs	r2, r3
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	699b      	ldr	r3, [r3, #24]
 8006738:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800673c:	431a      	orrs	r2, r3
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	69db      	ldr	r3, [r3, #28]
 8006742:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006746:	431a      	orrs	r2, r3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6a1b      	ldr	r3, [r3, #32]
 800674c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006750:	ea42 0103 	orr.w	r1, r2, r3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006758:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	430a      	orrs	r2, r1
 8006762:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	699b      	ldr	r3, [r3, #24]
 8006768:	0c1b      	lsrs	r3, r3, #16
 800676a:	f003 0104 	and.w	r1, r3, #4
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006772:	f003 0210 	and.w	r2, r3, #16
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	430a      	orrs	r2, r1
 800677c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	69da      	ldr	r2, [r3, #28]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800678c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800679c:	2300      	movs	r3, #0
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3708      	adds	r7, #8
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}

080067a6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80067a6:	b580      	push	{r7, lr}
 80067a8:	b082      	sub	sp, #8
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d101      	bne.n	80067b8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	e041      	b.n	800683c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d106      	bne.n	80067d2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f7fb fb51 	bl	8001e74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2202      	movs	r2, #2
 80067d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	3304      	adds	r3, #4
 80067e2:	4619      	mov	r1, r3
 80067e4:	4610      	mov	r0, r2
 80067e6:	f000 fad9 	bl	8006d9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2201      	movs	r2, #1
 80067ee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2201      	movs	r2, #1
 80067f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2201      	movs	r2, #1
 80067fe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2201      	movs	r2, #1
 8006806:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2201      	movs	r2, #1
 800680e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2201      	movs	r2, #1
 8006816:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2201      	movs	r2, #1
 800681e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2201      	movs	r2, #1
 8006826:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2201      	movs	r2, #1
 800682e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2201      	movs	r2, #1
 8006836:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800683a:	2300      	movs	r3, #0
}
 800683c:	4618      	mov	r0, r3
 800683e:	3708      	adds	r7, #8
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d101      	bne.n	8006856 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	e041      	b.n	80068da <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800685c:	b2db      	uxtb	r3, r3
 800685e:	2b00      	cmp	r3, #0
 8006860:	d106      	bne.n	8006870 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 f839 	bl	80068e2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2202      	movs	r2, #2
 8006874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	3304      	adds	r3, #4
 8006880:	4619      	mov	r1, r3
 8006882:	4610      	mov	r0, r2
 8006884:	f000 fa8a 	bl	8006d9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2201      	movs	r2, #1
 800688c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2201      	movs	r2, #1
 80068d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80068d8:	2300      	movs	r3, #0
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3708      	adds	r7, #8
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}

080068e2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80068e2:	b480      	push	{r7}
 80068e4:	b083      	sub	sp, #12
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80068ea:	bf00      	nop
 80068ec:	370c      	adds	r7, #12
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr
	...

080068f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d109      	bne.n	800691c <HAL_TIM_PWM_Start+0x24>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800690e:	b2db      	uxtb	r3, r3
 8006910:	2b01      	cmp	r3, #1
 8006912:	bf14      	ite	ne
 8006914:	2301      	movne	r3, #1
 8006916:	2300      	moveq	r3, #0
 8006918:	b2db      	uxtb	r3, r3
 800691a:	e022      	b.n	8006962 <HAL_TIM_PWM_Start+0x6a>
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	2b04      	cmp	r3, #4
 8006920:	d109      	bne.n	8006936 <HAL_TIM_PWM_Start+0x3e>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006928:	b2db      	uxtb	r3, r3
 800692a:	2b01      	cmp	r3, #1
 800692c:	bf14      	ite	ne
 800692e:	2301      	movne	r3, #1
 8006930:	2300      	moveq	r3, #0
 8006932:	b2db      	uxtb	r3, r3
 8006934:	e015      	b.n	8006962 <HAL_TIM_PWM_Start+0x6a>
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	2b08      	cmp	r3, #8
 800693a:	d109      	bne.n	8006950 <HAL_TIM_PWM_Start+0x58>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006942:	b2db      	uxtb	r3, r3
 8006944:	2b01      	cmp	r3, #1
 8006946:	bf14      	ite	ne
 8006948:	2301      	movne	r3, #1
 800694a:	2300      	moveq	r3, #0
 800694c:	b2db      	uxtb	r3, r3
 800694e:	e008      	b.n	8006962 <HAL_TIM_PWM_Start+0x6a>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006956:	b2db      	uxtb	r3, r3
 8006958:	2b01      	cmp	r3, #1
 800695a:	bf14      	ite	ne
 800695c:	2301      	movne	r3, #1
 800695e:	2300      	moveq	r3, #0
 8006960:	b2db      	uxtb	r3, r3
 8006962:	2b00      	cmp	r3, #0
 8006964:	d001      	beq.n	800696a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	e07c      	b.n	8006a64 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d104      	bne.n	800697a <HAL_TIM_PWM_Start+0x82>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2202      	movs	r2, #2
 8006974:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006978:	e013      	b.n	80069a2 <HAL_TIM_PWM_Start+0xaa>
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	2b04      	cmp	r3, #4
 800697e:	d104      	bne.n	800698a <HAL_TIM_PWM_Start+0x92>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2202      	movs	r2, #2
 8006984:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006988:	e00b      	b.n	80069a2 <HAL_TIM_PWM_Start+0xaa>
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	2b08      	cmp	r3, #8
 800698e:	d104      	bne.n	800699a <HAL_TIM_PWM_Start+0xa2>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2202      	movs	r2, #2
 8006994:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006998:	e003      	b.n	80069a2 <HAL_TIM_PWM_Start+0xaa>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2202      	movs	r2, #2
 800699e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	2201      	movs	r2, #1
 80069a8:	6839      	ldr	r1, [r7, #0]
 80069aa:	4618      	mov	r0, r3
 80069ac:	f000 fce6 	bl	800737c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a2d      	ldr	r2, [pc, #180]	@ (8006a6c <HAL_TIM_PWM_Start+0x174>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d004      	beq.n	80069c4 <HAL_TIM_PWM_Start+0xcc>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a2c      	ldr	r2, [pc, #176]	@ (8006a70 <HAL_TIM_PWM_Start+0x178>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d101      	bne.n	80069c8 <HAL_TIM_PWM_Start+0xd0>
 80069c4:	2301      	movs	r3, #1
 80069c6:	e000      	b.n	80069ca <HAL_TIM_PWM_Start+0xd2>
 80069c8:	2300      	movs	r3, #0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d007      	beq.n	80069de <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80069dc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a22      	ldr	r2, [pc, #136]	@ (8006a6c <HAL_TIM_PWM_Start+0x174>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d022      	beq.n	8006a2e <HAL_TIM_PWM_Start+0x136>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069f0:	d01d      	beq.n	8006a2e <HAL_TIM_PWM_Start+0x136>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a1f      	ldr	r2, [pc, #124]	@ (8006a74 <HAL_TIM_PWM_Start+0x17c>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d018      	beq.n	8006a2e <HAL_TIM_PWM_Start+0x136>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a1d      	ldr	r2, [pc, #116]	@ (8006a78 <HAL_TIM_PWM_Start+0x180>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d013      	beq.n	8006a2e <HAL_TIM_PWM_Start+0x136>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a1c      	ldr	r2, [pc, #112]	@ (8006a7c <HAL_TIM_PWM_Start+0x184>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d00e      	beq.n	8006a2e <HAL_TIM_PWM_Start+0x136>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a16      	ldr	r2, [pc, #88]	@ (8006a70 <HAL_TIM_PWM_Start+0x178>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d009      	beq.n	8006a2e <HAL_TIM_PWM_Start+0x136>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a18      	ldr	r2, [pc, #96]	@ (8006a80 <HAL_TIM_PWM_Start+0x188>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d004      	beq.n	8006a2e <HAL_TIM_PWM_Start+0x136>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a16      	ldr	r2, [pc, #88]	@ (8006a84 <HAL_TIM_PWM_Start+0x18c>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d111      	bne.n	8006a52 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	f003 0307 	and.w	r3, r3, #7
 8006a38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2b06      	cmp	r3, #6
 8006a3e:	d010      	beq.n	8006a62 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f042 0201 	orr.w	r2, r2, #1
 8006a4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a50:	e007      	b.n	8006a62 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f042 0201 	orr.w	r2, r2, #1
 8006a60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a62:	2300      	movs	r3, #0
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3710      	adds	r7, #16
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}
 8006a6c:	40010000 	.word	0x40010000
 8006a70:	40010400 	.word	0x40010400
 8006a74:	40000400 	.word	0x40000400
 8006a78:	40000800 	.word	0x40000800
 8006a7c:	40000c00 	.word	0x40000c00
 8006a80:	40014000 	.word	0x40014000
 8006a84:	40001800 	.word	0x40001800

08006a88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b086      	sub	sp, #24
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	60f8      	str	r0, [r7, #12]
 8006a90:	60b9      	str	r1, [r7, #8]
 8006a92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a94:	2300      	movs	r3, #0
 8006a96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d101      	bne.n	8006aa6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006aa2:	2302      	movs	r3, #2
 8006aa4:	e0ae      	b.n	8006c04 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2b0c      	cmp	r3, #12
 8006ab2:	f200 809f 	bhi.w	8006bf4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006ab6:	a201      	add	r2, pc, #4	@ (adr r2, 8006abc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006abc:	08006af1 	.word	0x08006af1
 8006ac0:	08006bf5 	.word	0x08006bf5
 8006ac4:	08006bf5 	.word	0x08006bf5
 8006ac8:	08006bf5 	.word	0x08006bf5
 8006acc:	08006b31 	.word	0x08006b31
 8006ad0:	08006bf5 	.word	0x08006bf5
 8006ad4:	08006bf5 	.word	0x08006bf5
 8006ad8:	08006bf5 	.word	0x08006bf5
 8006adc:	08006b73 	.word	0x08006b73
 8006ae0:	08006bf5 	.word	0x08006bf5
 8006ae4:	08006bf5 	.word	0x08006bf5
 8006ae8:	08006bf5 	.word	0x08006bf5
 8006aec:	08006bb3 	.word	0x08006bb3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	68b9      	ldr	r1, [r7, #8]
 8006af6:	4618      	mov	r0, r3
 8006af8:	f000 f9f6 	bl	8006ee8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	699a      	ldr	r2, [r3, #24]
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f042 0208 	orr.w	r2, r2, #8
 8006b0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	699a      	ldr	r2, [r3, #24]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f022 0204 	bic.w	r2, r2, #4
 8006b1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	6999      	ldr	r1, [r3, #24]
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	691a      	ldr	r2, [r3, #16]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	430a      	orrs	r2, r1
 8006b2c:	619a      	str	r2, [r3, #24]
      break;
 8006b2e:	e064      	b.n	8006bfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	68b9      	ldr	r1, [r7, #8]
 8006b36:	4618      	mov	r0, r3
 8006b38:	f000 fa46 	bl	8006fc8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	699a      	ldr	r2, [r3, #24]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	699a      	ldr	r2, [r3, #24]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	6999      	ldr	r1, [r3, #24]
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	021a      	lsls	r2, r3, #8
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	430a      	orrs	r2, r1
 8006b6e:	619a      	str	r2, [r3, #24]
      break;
 8006b70:	e043      	b.n	8006bfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	68b9      	ldr	r1, [r7, #8]
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f000 fa9b 	bl	80070b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	69da      	ldr	r2, [r3, #28]
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f042 0208 	orr.w	r2, r2, #8
 8006b8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	69da      	ldr	r2, [r3, #28]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f022 0204 	bic.w	r2, r2, #4
 8006b9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	69d9      	ldr	r1, [r3, #28]
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	691a      	ldr	r2, [r3, #16]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	430a      	orrs	r2, r1
 8006bae:	61da      	str	r2, [r3, #28]
      break;
 8006bb0:	e023      	b.n	8006bfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	68b9      	ldr	r1, [r7, #8]
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f000 faef 	bl	800719c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	69da      	ldr	r2, [r3, #28]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006bcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	69da      	ldr	r2, [r3, #28]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006bdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	69d9      	ldr	r1, [r3, #28]
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	691b      	ldr	r3, [r3, #16]
 8006be8:	021a      	lsls	r2, r3, #8
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	430a      	orrs	r2, r1
 8006bf0:	61da      	str	r2, [r3, #28]
      break;
 8006bf2:	e002      	b.n	8006bfa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	75fb      	strb	r3, [r7, #23]
      break;
 8006bf8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006c02:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3718      	adds	r7, #24
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b084      	sub	sp, #16
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c16:	2300      	movs	r3, #0
 8006c18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d101      	bne.n	8006c28 <HAL_TIM_ConfigClockSource+0x1c>
 8006c24:	2302      	movs	r3, #2
 8006c26:	e0b4      	b.n	8006d92 <HAL_TIM_ConfigClockSource+0x186>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2202      	movs	r2, #2
 8006c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006c46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006c4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	68ba      	ldr	r2, [r7, #8]
 8006c56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c60:	d03e      	beq.n	8006ce0 <HAL_TIM_ConfigClockSource+0xd4>
 8006c62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c66:	f200 8087 	bhi.w	8006d78 <HAL_TIM_ConfigClockSource+0x16c>
 8006c6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c6e:	f000 8086 	beq.w	8006d7e <HAL_TIM_ConfigClockSource+0x172>
 8006c72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c76:	d87f      	bhi.n	8006d78 <HAL_TIM_ConfigClockSource+0x16c>
 8006c78:	2b70      	cmp	r3, #112	@ 0x70
 8006c7a:	d01a      	beq.n	8006cb2 <HAL_TIM_ConfigClockSource+0xa6>
 8006c7c:	2b70      	cmp	r3, #112	@ 0x70
 8006c7e:	d87b      	bhi.n	8006d78 <HAL_TIM_ConfigClockSource+0x16c>
 8006c80:	2b60      	cmp	r3, #96	@ 0x60
 8006c82:	d050      	beq.n	8006d26 <HAL_TIM_ConfigClockSource+0x11a>
 8006c84:	2b60      	cmp	r3, #96	@ 0x60
 8006c86:	d877      	bhi.n	8006d78 <HAL_TIM_ConfigClockSource+0x16c>
 8006c88:	2b50      	cmp	r3, #80	@ 0x50
 8006c8a:	d03c      	beq.n	8006d06 <HAL_TIM_ConfigClockSource+0xfa>
 8006c8c:	2b50      	cmp	r3, #80	@ 0x50
 8006c8e:	d873      	bhi.n	8006d78 <HAL_TIM_ConfigClockSource+0x16c>
 8006c90:	2b40      	cmp	r3, #64	@ 0x40
 8006c92:	d058      	beq.n	8006d46 <HAL_TIM_ConfigClockSource+0x13a>
 8006c94:	2b40      	cmp	r3, #64	@ 0x40
 8006c96:	d86f      	bhi.n	8006d78 <HAL_TIM_ConfigClockSource+0x16c>
 8006c98:	2b30      	cmp	r3, #48	@ 0x30
 8006c9a:	d064      	beq.n	8006d66 <HAL_TIM_ConfigClockSource+0x15a>
 8006c9c:	2b30      	cmp	r3, #48	@ 0x30
 8006c9e:	d86b      	bhi.n	8006d78 <HAL_TIM_ConfigClockSource+0x16c>
 8006ca0:	2b20      	cmp	r3, #32
 8006ca2:	d060      	beq.n	8006d66 <HAL_TIM_ConfigClockSource+0x15a>
 8006ca4:	2b20      	cmp	r3, #32
 8006ca6:	d867      	bhi.n	8006d78 <HAL_TIM_ConfigClockSource+0x16c>
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d05c      	beq.n	8006d66 <HAL_TIM_ConfigClockSource+0x15a>
 8006cac:	2b10      	cmp	r3, #16
 8006cae:	d05a      	beq.n	8006d66 <HAL_TIM_ConfigClockSource+0x15a>
 8006cb0:	e062      	b.n	8006d78 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006cc2:	f000 fb3b 	bl	800733c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006cd4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	68ba      	ldr	r2, [r7, #8]
 8006cdc:	609a      	str	r2, [r3, #8]
      break;
 8006cde:	e04f      	b.n	8006d80 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006cf0:	f000 fb24 	bl	800733c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	689a      	ldr	r2, [r3, #8]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006d02:	609a      	str	r2, [r3, #8]
      break;
 8006d04:	e03c      	b.n	8006d80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d12:	461a      	mov	r2, r3
 8006d14:	f000 fa98 	bl	8007248 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	2150      	movs	r1, #80	@ 0x50
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f000 faf1 	bl	8007306 <TIM_ITRx_SetConfig>
      break;
 8006d24:	e02c      	b.n	8006d80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d32:	461a      	mov	r2, r3
 8006d34:	f000 fab7 	bl	80072a6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	2160      	movs	r1, #96	@ 0x60
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f000 fae1 	bl	8007306 <TIM_ITRx_SetConfig>
      break;
 8006d44:	e01c      	b.n	8006d80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d52:	461a      	mov	r2, r3
 8006d54:	f000 fa78 	bl	8007248 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	2140      	movs	r1, #64	@ 0x40
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f000 fad1 	bl	8007306 <TIM_ITRx_SetConfig>
      break;
 8006d64:	e00c      	b.n	8006d80 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4619      	mov	r1, r3
 8006d70:	4610      	mov	r0, r2
 8006d72:	f000 fac8 	bl	8007306 <TIM_ITRx_SetConfig>
      break;
 8006d76:	e003      	b.n	8006d80 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	73fb      	strb	r3, [r7, #15]
      break;
 8006d7c:	e000      	b.n	8006d80 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006d7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2201      	movs	r2, #1
 8006d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3710      	adds	r7, #16
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}
	...

08006d9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b085      	sub	sp, #20
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	4a43      	ldr	r2, [pc, #268]	@ (8006ebc <TIM_Base_SetConfig+0x120>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d013      	beq.n	8006ddc <TIM_Base_SetConfig+0x40>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dba:	d00f      	beq.n	8006ddc <TIM_Base_SetConfig+0x40>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	4a40      	ldr	r2, [pc, #256]	@ (8006ec0 <TIM_Base_SetConfig+0x124>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d00b      	beq.n	8006ddc <TIM_Base_SetConfig+0x40>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	4a3f      	ldr	r2, [pc, #252]	@ (8006ec4 <TIM_Base_SetConfig+0x128>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d007      	beq.n	8006ddc <TIM_Base_SetConfig+0x40>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	4a3e      	ldr	r2, [pc, #248]	@ (8006ec8 <TIM_Base_SetConfig+0x12c>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d003      	beq.n	8006ddc <TIM_Base_SetConfig+0x40>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	4a3d      	ldr	r2, [pc, #244]	@ (8006ecc <TIM_Base_SetConfig+0x130>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d108      	bne.n	8006dee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006de2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	68fa      	ldr	r2, [r7, #12]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4a32      	ldr	r2, [pc, #200]	@ (8006ebc <TIM_Base_SetConfig+0x120>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d02b      	beq.n	8006e4e <TIM_Base_SetConfig+0xb2>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dfc:	d027      	beq.n	8006e4e <TIM_Base_SetConfig+0xb2>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	4a2f      	ldr	r2, [pc, #188]	@ (8006ec0 <TIM_Base_SetConfig+0x124>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d023      	beq.n	8006e4e <TIM_Base_SetConfig+0xb2>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	4a2e      	ldr	r2, [pc, #184]	@ (8006ec4 <TIM_Base_SetConfig+0x128>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d01f      	beq.n	8006e4e <TIM_Base_SetConfig+0xb2>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	4a2d      	ldr	r2, [pc, #180]	@ (8006ec8 <TIM_Base_SetConfig+0x12c>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d01b      	beq.n	8006e4e <TIM_Base_SetConfig+0xb2>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	4a2c      	ldr	r2, [pc, #176]	@ (8006ecc <TIM_Base_SetConfig+0x130>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d017      	beq.n	8006e4e <TIM_Base_SetConfig+0xb2>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	4a2b      	ldr	r2, [pc, #172]	@ (8006ed0 <TIM_Base_SetConfig+0x134>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d013      	beq.n	8006e4e <TIM_Base_SetConfig+0xb2>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	4a2a      	ldr	r2, [pc, #168]	@ (8006ed4 <TIM_Base_SetConfig+0x138>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d00f      	beq.n	8006e4e <TIM_Base_SetConfig+0xb2>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	4a29      	ldr	r2, [pc, #164]	@ (8006ed8 <TIM_Base_SetConfig+0x13c>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d00b      	beq.n	8006e4e <TIM_Base_SetConfig+0xb2>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	4a28      	ldr	r2, [pc, #160]	@ (8006edc <TIM_Base_SetConfig+0x140>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d007      	beq.n	8006e4e <TIM_Base_SetConfig+0xb2>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	4a27      	ldr	r2, [pc, #156]	@ (8006ee0 <TIM_Base_SetConfig+0x144>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d003      	beq.n	8006e4e <TIM_Base_SetConfig+0xb2>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	4a26      	ldr	r2, [pc, #152]	@ (8006ee4 <TIM_Base_SetConfig+0x148>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d108      	bne.n	8006e60 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	68db      	ldr	r3, [r3, #12]
 8006e5a:	68fa      	ldr	r2, [r7, #12]
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	695b      	ldr	r3, [r3, #20]
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	689a      	ldr	r2, [r3, #8]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	4a0e      	ldr	r2, [pc, #56]	@ (8006ebc <TIM_Base_SetConfig+0x120>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d003      	beq.n	8006e8e <TIM_Base_SetConfig+0xf2>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	4a10      	ldr	r2, [pc, #64]	@ (8006ecc <TIM_Base_SetConfig+0x130>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d103      	bne.n	8006e96 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	691a      	ldr	r2, [r3, #16]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f043 0204 	orr.w	r2, r3, #4
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	68fa      	ldr	r2, [r7, #12]
 8006eac:	601a      	str	r2, [r3, #0]
}
 8006eae:	bf00      	nop
 8006eb0:	3714      	adds	r7, #20
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr
 8006eba:	bf00      	nop
 8006ebc:	40010000 	.word	0x40010000
 8006ec0:	40000400 	.word	0x40000400
 8006ec4:	40000800 	.word	0x40000800
 8006ec8:	40000c00 	.word	0x40000c00
 8006ecc:	40010400 	.word	0x40010400
 8006ed0:	40014000 	.word	0x40014000
 8006ed4:	40014400 	.word	0x40014400
 8006ed8:	40014800 	.word	0x40014800
 8006edc:	40001800 	.word	0x40001800
 8006ee0:	40001c00 	.word	0x40001c00
 8006ee4:	40002000 	.word	0x40002000

08006ee8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b087      	sub	sp, #28
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6a1b      	ldr	r3, [r3, #32]
 8006ef6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6a1b      	ldr	r3, [r3, #32]
 8006efc:	f023 0201 	bic.w	r2, r3, #1
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	699b      	ldr	r3, [r3, #24]
 8006f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f023 0303 	bic.w	r3, r3, #3
 8006f1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	68fa      	ldr	r2, [r7, #12]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	f023 0302 	bic.w	r3, r3, #2
 8006f30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	697a      	ldr	r2, [r7, #20]
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	4a20      	ldr	r2, [pc, #128]	@ (8006fc0 <TIM_OC1_SetConfig+0xd8>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d003      	beq.n	8006f4c <TIM_OC1_SetConfig+0x64>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	4a1f      	ldr	r2, [pc, #124]	@ (8006fc4 <TIM_OC1_SetConfig+0xdc>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d10c      	bne.n	8006f66 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	f023 0308 	bic.w	r3, r3, #8
 8006f52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	68db      	ldr	r3, [r3, #12]
 8006f58:	697a      	ldr	r2, [r7, #20]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	f023 0304 	bic.w	r3, r3, #4
 8006f64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	4a15      	ldr	r2, [pc, #84]	@ (8006fc0 <TIM_OC1_SetConfig+0xd8>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d003      	beq.n	8006f76 <TIM_OC1_SetConfig+0x8e>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	4a14      	ldr	r2, [pc, #80]	@ (8006fc4 <TIM_OC1_SetConfig+0xdc>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d111      	bne.n	8006f9a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006f84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	695b      	ldr	r3, [r3, #20]
 8006f8a:	693a      	ldr	r2, [r7, #16]
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	699b      	ldr	r3, [r3, #24]
 8006f94:	693a      	ldr	r2, [r7, #16]
 8006f96:	4313      	orrs	r3, r2
 8006f98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	693a      	ldr	r2, [r7, #16]
 8006f9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	68fa      	ldr	r2, [r7, #12]
 8006fa4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	685a      	ldr	r2, [r3, #4]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	697a      	ldr	r2, [r7, #20]
 8006fb2:	621a      	str	r2, [r3, #32]
}
 8006fb4:	bf00      	nop
 8006fb6:	371c      	adds	r7, #28
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr
 8006fc0:	40010000 	.word	0x40010000
 8006fc4:	40010400 	.word	0x40010400

08006fc8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b087      	sub	sp, #28
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a1b      	ldr	r3, [r3, #32]
 8006fd6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6a1b      	ldr	r3, [r3, #32]
 8006fdc:	f023 0210 	bic.w	r2, r3, #16
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	699b      	ldr	r3, [r3, #24]
 8006fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ff6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ffe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	021b      	lsls	r3, r3, #8
 8007006:	68fa      	ldr	r2, [r7, #12]
 8007008:	4313      	orrs	r3, r2
 800700a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	f023 0320 	bic.w	r3, r3, #32
 8007012:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	011b      	lsls	r3, r3, #4
 800701a:	697a      	ldr	r2, [r7, #20]
 800701c:	4313      	orrs	r3, r2
 800701e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	4a22      	ldr	r2, [pc, #136]	@ (80070ac <TIM_OC2_SetConfig+0xe4>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d003      	beq.n	8007030 <TIM_OC2_SetConfig+0x68>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	4a21      	ldr	r2, [pc, #132]	@ (80070b0 <TIM_OC2_SetConfig+0xe8>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d10d      	bne.n	800704c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007036:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	68db      	ldr	r3, [r3, #12]
 800703c:	011b      	lsls	r3, r3, #4
 800703e:	697a      	ldr	r2, [r7, #20]
 8007040:	4313      	orrs	r3, r2
 8007042:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800704a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4a17      	ldr	r2, [pc, #92]	@ (80070ac <TIM_OC2_SetConfig+0xe4>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d003      	beq.n	800705c <TIM_OC2_SetConfig+0x94>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	4a16      	ldr	r2, [pc, #88]	@ (80070b0 <TIM_OC2_SetConfig+0xe8>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d113      	bne.n	8007084 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007062:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800706a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	695b      	ldr	r3, [r3, #20]
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	693a      	ldr	r2, [r7, #16]
 8007074:	4313      	orrs	r3, r2
 8007076:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	699b      	ldr	r3, [r3, #24]
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	693a      	ldr	r2, [r7, #16]
 8007080:	4313      	orrs	r3, r2
 8007082:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	693a      	ldr	r2, [r7, #16]
 8007088:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	68fa      	ldr	r2, [r7, #12]
 800708e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	685a      	ldr	r2, [r3, #4]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	697a      	ldr	r2, [r7, #20]
 800709c:	621a      	str	r2, [r3, #32]
}
 800709e:	bf00      	nop
 80070a0:	371c      	adds	r7, #28
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr
 80070aa:	bf00      	nop
 80070ac:	40010000 	.word	0x40010000
 80070b0:	40010400 	.word	0x40010400

080070b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b087      	sub	sp, #28
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6a1b      	ldr	r3, [r3, #32]
 80070c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6a1b      	ldr	r3, [r3, #32]
 80070c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	69db      	ldr	r3, [r3, #28]
 80070da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f023 0303 	bic.w	r3, r3, #3
 80070ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	68fa      	ldr	r2, [r7, #12]
 80070f2:	4313      	orrs	r3, r2
 80070f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80070fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	021b      	lsls	r3, r3, #8
 8007104:	697a      	ldr	r2, [r7, #20]
 8007106:	4313      	orrs	r3, r2
 8007108:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	4a21      	ldr	r2, [pc, #132]	@ (8007194 <TIM_OC3_SetConfig+0xe0>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d003      	beq.n	800711a <TIM_OC3_SetConfig+0x66>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	4a20      	ldr	r2, [pc, #128]	@ (8007198 <TIM_OC3_SetConfig+0xe4>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d10d      	bne.n	8007136 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007120:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	68db      	ldr	r3, [r3, #12]
 8007126:	021b      	lsls	r3, r3, #8
 8007128:	697a      	ldr	r2, [r7, #20]
 800712a:	4313      	orrs	r3, r2
 800712c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007134:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	4a16      	ldr	r2, [pc, #88]	@ (8007194 <TIM_OC3_SetConfig+0xe0>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d003      	beq.n	8007146 <TIM_OC3_SetConfig+0x92>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	4a15      	ldr	r2, [pc, #84]	@ (8007198 <TIM_OC3_SetConfig+0xe4>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d113      	bne.n	800716e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800714c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007154:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	695b      	ldr	r3, [r3, #20]
 800715a:	011b      	lsls	r3, r3, #4
 800715c:	693a      	ldr	r2, [r7, #16]
 800715e:	4313      	orrs	r3, r2
 8007160:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	699b      	ldr	r3, [r3, #24]
 8007166:	011b      	lsls	r3, r3, #4
 8007168:	693a      	ldr	r2, [r7, #16]
 800716a:	4313      	orrs	r3, r2
 800716c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	693a      	ldr	r2, [r7, #16]
 8007172:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	68fa      	ldr	r2, [r7, #12]
 8007178:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	685a      	ldr	r2, [r3, #4]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	697a      	ldr	r2, [r7, #20]
 8007186:	621a      	str	r2, [r3, #32]
}
 8007188:	bf00      	nop
 800718a:	371c      	adds	r7, #28
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr
 8007194:	40010000 	.word	0x40010000
 8007198:	40010400 	.word	0x40010400

0800719c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800719c:	b480      	push	{r7}
 800719e:	b087      	sub	sp, #28
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6a1b      	ldr	r3, [r3, #32]
 80071aa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6a1b      	ldr	r3, [r3, #32]
 80071b0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	69db      	ldr	r3, [r3, #28]
 80071c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	021b      	lsls	r3, r3, #8
 80071da:	68fa      	ldr	r2, [r7, #12]
 80071dc:	4313      	orrs	r3, r2
 80071de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80071e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	031b      	lsls	r3, r3, #12
 80071ee:	693a      	ldr	r2, [r7, #16]
 80071f0:	4313      	orrs	r3, r2
 80071f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	4a12      	ldr	r2, [pc, #72]	@ (8007240 <TIM_OC4_SetConfig+0xa4>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d003      	beq.n	8007204 <TIM_OC4_SetConfig+0x68>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	4a11      	ldr	r2, [pc, #68]	@ (8007244 <TIM_OC4_SetConfig+0xa8>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d109      	bne.n	8007218 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800720a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	695b      	ldr	r3, [r3, #20]
 8007210:	019b      	lsls	r3, r3, #6
 8007212:	697a      	ldr	r2, [r7, #20]
 8007214:	4313      	orrs	r3, r2
 8007216:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	697a      	ldr	r2, [r7, #20]
 800721c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	68fa      	ldr	r2, [r7, #12]
 8007222:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	685a      	ldr	r2, [r3, #4]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	693a      	ldr	r2, [r7, #16]
 8007230:	621a      	str	r2, [r3, #32]
}
 8007232:	bf00      	nop
 8007234:	371c      	adds	r7, #28
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr
 800723e:	bf00      	nop
 8007240:	40010000 	.word	0x40010000
 8007244:	40010400 	.word	0x40010400

08007248 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007248:	b480      	push	{r7}
 800724a:	b087      	sub	sp, #28
 800724c:	af00      	add	r7, sp, #0
 800724e:	60f8      	str	r0, [r7, #12]
 8007250:	60b9      	str	r1, [r7, #8]
 8007252:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	6a1b      	ldr	r3, [r3, #32]
 8007258:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	6a1b      	ldr	r3, [r3, #32]
 800725e:	f023 0201 	bic.w	r2, r3, #1
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	699b      	ldr	r3, [r3, #24]
 800726a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007272:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	011b      	lsls	r3, r3, #4
 8007278:	693a      	ldr	r2, [r7, #16]
 800727a:	4313      	orrs	r3, r2
 800727c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	f023 030a 	bic.w	r3, r3, #10
 8007284:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007286:	697a      	ldr	r2, [r7, #20]
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	4313      	orrs	r3, r2
 800728c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	693a      	ldr	r2, [r7, #16]
 8007292:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	697a      	ldr	r2, [r7, #20]
 8007298:	621a      	str	r2, [r3, #32]
}
 800729a:	bf00      	nop
 800729c:	371c      	adds	r7, #28
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr

080072a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072a6:	b480      	push	{r7}
 80072a8:	b087      	sub	sp, #28
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	60f8      	str	r0, [r7, #12]
 80072ae:	60b9      	str	r1, [r7, #8]
 80072b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	6a1b      	ldr	r3, [r3, #32]
 80072b6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	6a1b      	ldr	r3, [r3, #32]
 80072bc:	f023 0210 	bic.w	r2, r3, #16
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	699b      	ldr	r3, [r3, #24]
 80072c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80072d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	031b      	lsls	r3, r3, #12
 80072d6:	693a      	ldr	r2, [r7, #16]
 80072d8:	4313      	orrs	r3, r2
 80072da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80072e2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	011b      	lsls	r3, r3, #4
 80072e8:	697a      	ldr	r2, [r7, #20]
 80072ea:	4313      	orrs	r3, r2
 80072ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	693a      	ldr	r2, [r7, #16]
 80072f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	697a      	ldr	r2, [r7, #20]
 80072f8:	621a      	str	r2, [r3, #32]
}
 80072fa:	bf00      	nop
 80072fc:	371c      	adds	r7, #28
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr

08007306 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007306:	b480      	push	{r7}
 8007308:	b085      	sub	sp, #20
 800730a:	af00      	add	r7, sp, #0
 800730c:	6078      	str	r0, [r7, #4]
 800730e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800731c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800731e:	683a      	ldr	r2, [r7, #0]
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	4313      	orrs	r3, r2
 8007324:	f043 0307 	orr.w	r3, r3, #7
 8007328:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	68fa      	ldr	r2, [r7, #12]
 800732e:	609a      	str	r2, [r3, #8]
}
 8007330:	bf00      	nop
 8007332:	3714      	adds	r7, #20
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr

0800733c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800733c:	b480      	push	{r7}
 800733e:	b087      	sub	sp, #28
 8007340:	af00      	add	r7, sp, #0
 8007342:	60f8      	str	r0, [r7, #12]
 8007344:	60b9      	str	r1, [r7, #8]
 8007346:	607a      	str	r2, [r7, #4]
 8007348:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007356:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	021a      	lsls	r2, r3, #8
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	431a      	orrs	r2, r3
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	4313      	orrs	r3, r2
 8007364:	697a      	ldr	r2, [r7, #20]
 8007366:	4313      	orrs	r3, r2
 8007368:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	697a      	ldr	r2, [r7, #20]
 800736e:	609a      	str	r2, [r3, #8]
}
 8007370:	bf00      	nop
 8007372:	371c      	adds	r7, #28
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr

0800737c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800737c:	b480      	push	{r7}
 800737e:	b087      	sub	sp, #28
 8007380:	af00      	add	r7, sp, #0
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	f003 031f 	and.w	r3, r3, #31
 800738e:	2201      	movs	r2, #1
 8007390:	fa02 f303 	lsl.w	r3, r2, r3
 8007394:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	6a1a      	ldr	r2, [r3, #32]
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	43db      	mvns	r3, r3
 800739e:	401a      	ands	r2, r3
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	6a1a      	ldr	r2, [r3, #32]
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	f003 031f 	and.w	r3, r3, #31
 80073ae:	6879      	ldr	r1, [r7, #4]
 80073b0:	fa01 f303 	lsl.w	r3, r1, r3
 80073b4:	431a      	orrs	r2, r3
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	621a      	str	r2, [r3, #32]
}
 80073ba:	bf00      	nop
 80073bc:	371c      	adds	r7, #28
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr
	...

080073c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b085      	sub	sp, #20
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d101      	bne.n	80073e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80073dc:	2302      	movs	r3, #2
 80073de:	e05a      	b.n	8007496 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2201      	movs	r2, #1
 80073e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2202      	movs	r2, #2
 80073ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007406:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	68fa      	ldr	r2, [r7, #12]
 800740e:	4313      	orrs	r3, r2
 8007410:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	68fa      	ldr	r2, [r7, #12]
 8007418:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a21      	ldr	r2, [pc, #132]	@ (80074a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d022      	beq.n	800746a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800742c:	d01d      	beq.n	800746a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a1d      	ldr	r2, [pc, #116]	@ (80074a8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d018      	beq.n	800746a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a1b      	ldr	r2, [pc, #108]	@ (80074ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d013      	beq.n	800746a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a1a      	ldr	r2, [pc, #104]	@ (80074b0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d00e      	beq.n	800746a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a18      	ldr	r2, [pc, #96]	@ (80074b4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d009      	beq.n	800746a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a17      	ldr	r2, [pc, #92]	@ (80074b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d004      	beq.n	800746a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a15      	ldr	r2, [pc, #84]	@ (80074bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d10c      	bne.n	8007484 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007470:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	68ba      	ldr	r2, [r7, #8]
 8007478:	4313      	orrs	r3, r2
 800747a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	68ba      	ldr	r2, [r7, #8]
 8007482:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2201      	movs	r2, #1
 8007488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007494:	2300      	movs	r3, #0
}
 8007496:	4618      	mov	r0, r3
 8007498:	3714      	adds	r7, #20
 800749a:	46bd      	mov	sp, r7
 800749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a0:	4770      	bx	lr
 80074a2:	bf00      	nop
 80074a4:	40010000 	.word	0x40010000
 80074a8:	40000400 	.word	0x40000400
 80074ac:	40000800 	.word	0x40000800
 80074b0:	40000c00 	.word	0x40000c00
 80074b4:	40010400 	.word	0x40010400
 80074b8:	40014000 	.word	0x40014000
 80074bc:	40001800 	.word	0x40001800

080074c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b082      	sub	sp, #8
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d101      	bne.n	80074d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80074ce:	2301      	movs	r3, #1
 80074d0:	e042      	b.n	8007558 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074d8:	b2db      	uxtb	r3, r3
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d106      	bne.n	80074ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2200      	movs	r2, #0
 80074e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f7fa fd20 	bl	8001f2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2224      	movs	r2, #36	@ 0x24
 80074f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	68da      	ldr	r2, [r3, #12]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007502:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 f9d1 	bl	80078ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	691a      	ldr	r2, [r3, #16]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007518:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	695a      	ldr	r2, [r3, #20]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007528:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	68da      	ldr	r2, [r3, #12]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007538:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2200      	movs	r2, #0
 800753e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2220      	movs	r2, #32
 8007544:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2220      	movs	r2, #32
 800754c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007556:	2300      	movs	r3, #0
}
 8007558:	4618      	mov	r0, r3
 800755a:	3708      	adds	r7, #8
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b08a      	sub	sp, #40	@ 0x28
 8007564:	af02      	add	r7, sp, #8
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	603b      	str	r3, [r7, #0]
 800756c:	4613      	mov	r3, r2
 800756e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007570:	2300      	movs	r3, #0
 8007572:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800757a:	b2db      	uxtb	r3, r3
 800757c:	2b20      	cmp	r3, #32
 800757e:	d175      	bne.n	800766c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d002      	beq.n	800758c <HAL_UART_Transmit+0x2c>
 8007586:	88fb      	ldrh	r3, [r7, #6]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d101      	bne.n	8007590 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800758c:	2301      	movs	r3, #1
 800758e:	e06e      	b.n	800766e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2200      	movs	r2, #0
 8007594:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2221      	movs	r2, #33	@ 0x21
 800759a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800759e:	f7fa fe9d 	bl	80022dc <HAL_GetTick>
 80075a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	88fa      	ldrh	r2, [r7, #6]
 80075a8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	88fa      	ldrh	r2, [r7, #6]
 80075ae:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	689b      	ldr	r3, [r3, #8]
 80075b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075b8:	d108      	bne.n	80075cc <HAL_UART_Transmit+0x6c>
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	691b      	ldr	r3, [r3, #16]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d104      	bne.n	80075cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80075c2:	2300      	movs	r3, #0
 80075c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	61bb      	str	r3, [r7, #24]
 80075ca:	e003      	b.n	80075d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80075d0:	2300      	movs	r3, #0
 80075d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80075d4:	e02e      	b.n	8007634 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	9300      	str	r3, [sp, #0]
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	2200      	movs	r2, #0
 80075de:	2180      	movs	r1, #128	@ 0x80
 80075e0:	68f8      	ldr	r0, [r7, #12]
 80075e2:	f000 f86d 	bl	80076c0 <UART_WaitOnFlagUntilTimeout>
 80075e6:	4603      	mov	r3, r0
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d005      	beq.n	80075f8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2220      	movs	r2, #32
 80075f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80075f4:	2303      	movs	r3, #3
 80075f6:	e03a      	b.n	800766e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80075f8:	69fb      	ldr	r3, [r7, #28]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d10b      	bne.n	8007616 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80075fe:	69bb      	ldr	r3, [r7, #24]
 8007600:	881b      	ldrh	r3, [r3, #0]
 8007602:	461a      	mov	r2, r3
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800760c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800760e:	69bb      	ldr	r3, [r7, #24]
 8007610:	3302      	adds	r3, #2
 8007612:	61bb      	str	r3, [r7, #24]
 8007614:	e007      	b.n	8007626 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007616:	69fb      	ldr	r3, [r7, #28]
 8007618:	781a      	ldrb	r2, [r3, #0]
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007620:	69fb      	ldr	r3, [r7, #28]
 8007622:	3301      	adds	r3, #1
 8007624:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800762a:	b29b      	uxth	r3, r3
 800762c:	3b01      	subs	r3, #1
 800762e:	b29a      	uxth	r2, r3
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007638:	b29b      	uxth	r3, r3
 800763a:	2b00      	cmp	r3, #0
 800763c:	d1cb      	bne.n	80075d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	9300      	str	r3, [sp, #0]
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	2200      	movs	r2, #0
 8007646:	2140      	movs	r1, #64	@ 0x40
 8007648:	68f8      	ldr	r0, [r7, #12]
 800764a:	f000 f839 	bl	80076c0 <UART_WaitOnFlagUntilTimeout>
 800764e:	4603      	mov	r3, r0
 8007650:	2b00      	cmp	r3, #0
 8007652:	d005      	beq.n	8007660 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2220      	movs	r2, #32
 8007658:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800765c:	2303      	movs	r3, #3
 800765e:	e006      	b.n	800766e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2220      	movs	r2, #32
 8007664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007668:	2300      	movs	r3, #0
 800766a:	e000      	b.n	800766e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800766c:	2302      	movs	r3, #2
  }
}
 800766e:	4618      	mov	r0, r3
 8007670:	3720      	adds	r7, #32
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}

08007676 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007676:	b580      	push	{r7, lr}
 8007678:	b084      	sub	sp, #16
 800767a:	af00      	add	r7, sp, #0
 800767c:	60f8      	str	r0, [r7, #12]
 800767e:	60b9      	str	r1, [r7, #8]
 8007680:	4613      	mov	r3, r2
 8007682:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800768a:	b2db      	uxtb	r3, r3
 800768c:	2b20      	cmp	r3, #32
 800768e:	d112      	bne.n	80076b6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d002      	beq.n	800769c <HAL_UART_Receive_IT+0x26>
 8007696:	88fb      	ldrh	r3, [r7, #6]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d101      	bne.n	80076a0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	e00b      	b.n	80076b8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2200      	movs	r2, #0
 80076a4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80076a6:	88fb      	ldrh	r3, [r7, #6]
 80076a8:	461a      	mov	r2, r3
 80076aa:	68b9      	ldr	r1, [r7, #8]
 80076ac:	68f8      	ldr	r0, [r7, #12]
 80076ae:	f000 f860 	bl	8007772 <UART_Start_Receive_IT>
 80076b2:	4603      	mov	r3, r0
 80076b4:	e000      	b.n	80076b8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80076b6:	2302      	movs	r3, #2
  }
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3710      	adds	r7, #16
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}

080076c0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b086      	sub	sp, #24
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	60b9      	str	r1, [r7, #8]
 80076ca:	603b      	str	r3, [r7, #0]
 80076cc:	4613      	mov	r3, r2
 80076ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076d0:	e03b      	b.n	800774a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076d2:	6a3b      	ldr	r3, [r7, #32]
 80076d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076d8:	d037      	beq.n	800774a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076da:	f7fa fdff 	bl	80022dc <HAL_GetTick>
 80076de:	4602      	mov	r2, r0
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	1ad3      	subs	r3, r2, r3
 80076e4:	6a3a      	ldr	r2, [r7, #32]
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d302      	bcc.n	80076f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80076ea:	6a3b      	ldr	r3, [r7, #32]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d101      	bne.n	80076f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80076f0:	2303      	movs	r3, #3
 80076f2:	e03a      	b.n	800776a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	68db      	ldr	r3, [r3, #12]
 80076fa:	f003 0304 	and.w	r3, r3, #4
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d023      	beq.n	800774a <UART_WaitOnFlagUntilTimeout+0x8a>
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	2b80      	cmp	r3, #128	@ 0x80
 8007706:	d020      	beq.n	800774a <UART_WaitOnFlagUntilTimeout+0x8a>
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	2b40      	cmp	r3, #64	@ 0x40
 800770c:	d01d      	beq.n	800774a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f003 0308 	and.w	r3, r3, #8
 8007718:	2b08      	cmp	r3, #8
 800771a:	d116      	bne.n	800774a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800771c:	2300      	movs	r3, #0
 800771e:	617b      	str	r3, [r7, #20]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	617b      	str	r3, [r7, #20]
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	617b      	str	r3, [r7, #20]
 8007730:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007732:	68f8      	ldr	r0, [r7, #12]
 8007734:	f000 f857 	bl	80077e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2208      	movs	r2, #8
 800773c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2200      	movs	r2, #0
 8007742:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007746:	2301      	movs	r3, #1
 8007748:	e00f      	b.n	800776a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	4013      	ands	r3, r2
 8007754:	68ba      	ldr	r2, [r7, #8]
 8007756:	429a      	cmp	r2, r3
 8007758:	bf0c      	ite	eq
 800775a:	2301      	moveq	r3, #1
 800775c:	2300      	movne	r3, #0
 800775e:	b2db      	uxtb	r3, r3
 8007760:	461a      	mov	r2, r3
 8007762:	79fb      	ldrb	r3, [r7, #7]
 8007764:	429a      	cmp	r2, r3
 8007766:	d0b4      	beq.n	80076d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007768:	2300      	movs	r3, #0
}
 800776a:	4618      	mov	r0, r3
 800776c:	3718      	adds	r7, #24
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}

08007772 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007772:	b480      	push	{r7}
 8007774:	b085      	sub	sp, #20
 8007776:	af00      	add	r7, sp, #0
 8007778:	60f8      	str	r0, [r7, #12]
 800777a:	60b9      	str	r1, [r7, #8]
 800777c:	4613      	mov	r3, r2
 800777e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	68ba      	ldr	r2, [r7, #8]
 8007784:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	88fa      	ldrh	r2, [r7, #6]
 800778a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	88fa      	ldrh	r2, [r7, #6]
 8007790:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2200      	movs	r2, #0
 8007796:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2222      	movs	r2, #34	@ 0x22
 800779c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	691b      	ldr	r3, [r3, #16]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d007      	beq.n	80077b8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	68da      	ldr	r2, [r3, #12]
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80077b6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	695a      	ldr	r2, [r3, #20]
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f042 0201 	orr.w	r2, r2, #1
 80077c6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	68da      	ldr	r2, [r3, #12]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f042 0220 	orr.w	r2, r2, #32
 80077d6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80077d8:	2300      	movs	r3, #0
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3714      	adds	r7, #20
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr

080077e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80077e6:	b480      	push	{r7}
 80077e8:	b095      	sub	sp, #84	@ 0x54
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	330c      	adds	r3, #12
 80077f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077f8:	e853 3f00 	ldrex	r3, [r3]
 80077fc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80077fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007800:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007804:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	330c      	adds	r3, #12
 800780c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800780e:	643a      	str	r2, [r7, #64]	@ 0x40
 8007810:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007812:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007814:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007816:	e841 2300 	strex	r3, r2, [r1]
 800781a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800781c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800781e:	2b00      	cmp	r3, #0
 8007820:	d1e5      	bne.n	80077ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	3314      	adds	r3, #20
 8007828:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800782a:	6a3b      	ldr	r3, [r7, #32]
 800782c:	e853 3f00 	ldrex	r3, [r3]
 8007830:	61fb      	str	r3, [r7, #28]
   return(result);
 8007832:	69fb      	ldr	r3, [r7, #28]
 8007834:	f023 0301 	bic.w	r3, r3, #1
 8007838:	64bb      	str	r3, [r7, #72]	@ 0x48
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	3314      	adds	r3, #20
 8007840:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007842:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007844:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007846:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007848:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800784a:	e841 2300 	strex	r3, r2, [r1]
 800784e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007852:	2b00      	cmp	r3, #0
 8007854:	d1e5      	bne.n	8007822 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800785a:	2b01      	cmp	r3, #1
 800785c:	d119      	bne.n	8007892 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	330c      	adds	r3, #12
 8007864:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	e853 3f00 	ldrex	r3, [r3]
 800786c:	60bb      	str	r3, [r7, #8]
   return(result);
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	f023 0310 	bic.w	r3, r3, #16
 8007874:	647b      	str	r3, [r7, #68]	@ 0x44
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	330c      	adds	r3, #12
 800787c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800787e:	61ba      	str	r2, [r7, #24]
 8007880:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007882:	6979      	ldr	r1, [r7, #20]
 8007884:	69ba      	ldr	r2, [r7, #24]
 8007886:	e841 2300 	strex	r3, r2, [r1]
 800788a:	613b      	str	r3, [r7, #16]
   return(result);
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d1e5      	bne.n	800785e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2220      	movs	r2, #32
 8007896:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80078a0:	bf00      	nop
 80078a2:	3754      	adds	r7, #84	@ 0x54
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr

080078ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80078b0:	b0c0      	sub	sp, #256	@ 0x100
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	691b      	ldr	r3, [r3, #16]
 80078c0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80078c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078c8:	68d9      	ldr	r1, [r3, #12]
 80078ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	ea40 0301 	orr.w	r3, r0, r1
 80078d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80078d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078da:	689a      	ldr	r2, [r3, #8]
 80078dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078e0:	691b      	ldr	r3, [r3, #16]
 80078e2:	431a      	orrs	r2, r3
 80078e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078e8:	695b      	ldr	r3, [r3, #20]
 80078ea:	431a      	orrs	r2, r3
 80078ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078f0:	69db      	ldr	r3, [r3, #28]
 80078f2:	4313      	orrs	r3, r2
 80078f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80078f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	68db      	ldr	r3, [r3, #12]
 8007900:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007904:	f021 010c 	bic.w	r1, r1, #12
 8007908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800790c:	681a      	ldr	r2, [r3, #0]
 800790e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007912:	430b      	orrs	r3, r1
 8007914:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	695b      	ldr	r3, [r3, #20]
 800791e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007926:	6999      	ldr	r1, [r3, #24]
 8007928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800792c:	681a      	ldr	r2, [r3, #0]
 800792e:	ea40 0301 	orr.w	r3, r0, r1
 8007932:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	4b8f      	ldr	r3, [pc, #572]	@ (8007b78 <UART_SetConfig+0x2cc>)
 800793c:	429a      	cmp	r2, r3
 800793e:	d005      	beq.n	800794c <UART_SetConfig+0xa0>
 8007940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007944:	681a      	ldr	r2, [r3, #0]
 8007946:	4b8d      	ldr	r3, [pc, #564]	@ (8007b7c <UART_SetConfig+0x2d0>)
 8007948:	429a      	cmp	r2, r3
 800794a:	d104      	bne.n	8007956 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800794c:	f7fe fe8e 	bl	800666c <HAL_RCC_GetPCLK2Freq>
 8007950:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007954:	e003      	b.n	800795e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007956:	f7fe fe75 	bl	8006644 <HAL_RCC_GetPCLK1Freq>
 800795a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800795e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007962:	69db      	ldr	r3, [r3, #28]
 8007964:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007968:	f040 810c 	bne.w	8007b84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800796c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007970:	2200      	movs	r2, #0
 8007972:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007976:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800797a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800797e:	4622      	mov	r2, r4
 8007980:	462b      	mov	r3, r5
 8007982:	1891      	adds	r1, r2, r2
 8007984:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007986:	415b      	adcs	r3, r3
 8007988:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800798a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800798e:	4621      	mov	r1, r4
 8007990:	eb12 0801 	adds.w	r8, r2, r1
 8007994:	4629      	mov	r1, r5
 8007996:	eb43 0901 	adc.w	r9, r3, r1
 800799a:	f04f 0200 	mov.w	r2, #0
 800799e:	f04f 0300 	mov.w	r3, #0
 80079a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80079a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80079aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80079ae:	4690      	mov	r8, r2
 80079b0:	4699      	mov	r9, r3
 80079b2:	4623      	mov	r3, r4
 80079b4:	eb18 0303 	adds.w	r3, r8, r3
 80079b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80079bc:	462b      	mov	r3, r5
 80079be:	eb49 0303 	adc.w	r3, r9, r3
 80079c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80079c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	2200      	movs	r2, #0
 80079ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80079d2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80079d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80079da:	460b      	mov	r3, r1
 80079dc:	18db      	adds	r3, r3, r3
 80079de:	653b      	str	r3, [r7, #80]	@ 0x50
 80079e0:	4613      	mov	r3, r2
 80079e2:	eb42 0303 	adc.w	r3, r2, r3
 80079e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80079e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80079ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80079f0:	f7f8 fc46 	bl	8000280 <__aeabi_uldivmod>
 80079f4:	4602      	mov	r2, r0
 80079f6:	460b      	mov	r3, r1
 80079f8:	4b61      	ldr	r3, [pc, #388]	@ (8007b80 <UART_SetConfig+0x2d4>)
 80079fa:	fba3 2302 	umull	r2, r3, r3, r2
 80079fe:	095b      	lsrs	r3, r3, #5
 8007a00:	011c      	lsls	r4, r3, #4
 8007a02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a06:	2200      	movs	r2, #0
 8007a08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007a0c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007a10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007a14:	4642      	mov	r2, r8
 8007a16:	464b      	mov	r3, r9
 8007a18:	1891      	adds	r1, r2, r2
 8007a1a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007a1c:	415b      	adcs	r3, r3
 8007a1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007a24:	4641      	mov	r1, r8
 8007a26:	eb12 0a01 	adds.w	sl, r2, r1
 8007a2a:	4649      	mov	r1, r9
 8007a2c:	eb43 0b01 	adc.w	fp, r3, r1
 8007a30:	f04f 0200 	mov.w	r2, #0
 8007a34:	f04f 0300 	mov.w	r3, #0
 8007a38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007a3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007a40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a44:	4692      	mov	sl, r2
 8007a46:	469b      	mov	fp, r3
 8007a48:	4643      	mov	r3, r8
 8007a4a:	eb1a 0303 	adds.w	r3, sl, r3
 8007a4e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007a52:	464b      	mov	r3, r9
 8007a54:	eb4b 0303 	adc.w	r3, fp, r3
 8007a58:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007a68:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007a6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007a70:	460b      	mov	r3, r1
 8007a72:	18db      	adds	r3, r3, r3
 8007a74:	643b      	str	r3, [r7, #64]	@ 0x40
 8007a76:	4613      	mov	r3, r2
 8007a78:	eb42 0303 	adc.w	r3, r2, r3
 8007a7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007a82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007a86:	f7f8 fbfb 	bl	8000280 <__aeabi_uldivmod>
 8007a8a:	4602      	mov	r2, r0
 8007a8c:	460b      	mov	r3, r1
 8007a8e:	4611      	mov	r1, r2
 8007a90:	4b3b      	ldr	r3, [pc, #236]	@ (8007b80 <UART_SetConfig+0x2d4>)
 8007a92:	fba3 2301 	umull	r2, r3, r3, r1
 8007a96:	095b      	lsrs	r3, r3, #5
 8007a98:	2264      	movs	r2, #100	@ 0x64
 8007a9a:	fb02 f303 	mul.w	r3, r2, r3
 8007a9e:	1acb      	subs	r3, r1, r3
 8007aa0:	00db      	lsls	r3, r3, #3
 8007aa2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007aa6:	4b36      	ldr	r3, [pc, #216]	@ (8007b80 <UART_SetConfig+0x2d4>)
 8007aa8:	fba3 2302 	umull	r2, r3, r3, r2
 8007aac:	095b      	lsrs	r3, r3, #5
 8007aae:	005b      	lsls	r3, r3, #1
 8007ab0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007ab4:	441c      	add	r4, r3
 8007ab6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007aba:	2200      	movs	r2, #0
 8007abc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007ac0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007ac4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007ac8:	4642      	mov	r2, r8
 8007aca:	464b      	mov	r3, r9
 8007acc:	1891      	adds	r1, r2, r2
 8007ace:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007ad0:	415b      	adcs	r3, r3
 8007ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ad4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007ad8:	4641      	mov	r1, r8
 8007ada:	1851      	adds	r1, r2, r1
 8007adc:	6339      	str	r1, [r7, #48]	@ 0x30
 8007ade:	4649      	mov	r1, r9
 8007ae0:	414b      	adcs	r3, r1
 8007ae2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ae4:	f04f 0200 	mov.w	r2, #0
 8007ae8:	f04f 0300 	mov.w	r3, #0
 8007aec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007af0:	4659      	mov	r1, fp
 8007af2:	00cb      	lsls	r3, r1, #3
 8007af4:	4651      	mov	r1, sl
 8007af6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007afa:	4651      	mov	r1, sl
 8007afc:	00ca      	lsls	r2, r1, #3
 8007afe:	4610      	mov	r0, r2
 8007b00:	4619      	mov	r1, r3
 8007b02:	4603      	mov	r3, r0
 8007b04:	4642      	mov	r2, r8
 8007b06:	189b      	adds	r3, r3, r2
 8007b08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007b0c:	464b      	mov	r3, r9
 8007b0e:	460a      	mov	r2, r1
 8007b10:	eb42 0303 	adc.w	r3, r2, r3
 8007b14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007b24:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007b28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007b2c:	460b      	mov	r3, r1
 8007b2e:	18db      	adds	r3, r3, r3
 8007b30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007b32:	4613      	mov	r3, r2
 8007b34:	eb42 0303 	adc.w	r3, r2, r3
 8007b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007b3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007b3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007b42:	f7f8 fb9d 	bl	8000280 <__aeabi_uldivmod>
 8007b46:	4602      	mov	r2, r0
 8007b48:	460b      	mov	r3, r1
 8007b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8007b80 <UART_SetConfig+0x2d4>)
 8007b4c:	fba3 1302 	umull	r1, r3, r3, r2
 8007b50:	095b      	lsrs	r3, r3, #5
 8007b52:	2164      	movs	r1, #100	@ 0x64
 8007b54:	fb01 f303 	mul.w	r3, r1, r3
 8007b58:	1ad3      	subs	r3, r2, r3
 8007b5a:	00db      	lsls	r3, r3, #3
 8007b5c:	3332      	adds	r3, #50	@ 0x32
 8007b5e:	4a08      	ldr	r2, [pc, #32]	@ (8007b80 <UART_SetConfig+0x2d4>)
 8007b60:	fba2 2303 	umull	r2, r3, r2, r3
 8007b64:	095b      	lsrs	r3, r3, #5
 8007b66:	f003 0207 	and.w	r2, r3, #7
 8007b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4422      	add	r2, r4
 8007b72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007b74:	e106      	b.n	8007d84 <UART_SetConfig+0x4d8>
 8007b76:	bf00      	nop
 8007b78:	40011000 	.word	0x40011000
 8007b7c:	40011400 	.word	0x40011400
 8007b80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007b84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007b8e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007b92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007b96:	4642      	mov	r2, r8
 8007b98:	464b      	mov	r3, r9
 8007b9a:	1891      	adds	r1, r2, r2
 8007b9c:	6239      	str	r1, [r7, #32]
 8007b9e:	415b      	adcs	r3, r3
 8007ba0:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ba2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007ba6:	4641      	mov	r1, r8
 8007ba8:	1854      	adds	r4, r2, r1
 8007baa:	4649      	mov	r1, r9
 8007bac:	eb43 0501 	adc.w	r5, r3, r1
 8007bb0:	f04f 0200 	mov.w	r2, #0
 8007bb4:	f04f 0300 	mov.w	r3, #0
 8007bb8:	00eb      	lsls	r3, r5, #3
 8007bba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007bbe:	00e2      	lsls	r2, r4, #3
 8007bc0:	4614      	mov	r4, r2
 8007bc2:	461d      	mov	r5, r3
 8007bc4:	4643      	mov	r3, r8
 8007bc6:	18e3      	adds	r3, r4, r3
 8007bc8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007bcc:	464b      	mov	r3, r9
 8007bce:	eb45 0303 	adc.w	r3, r5, r3
 8007bd2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007be2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007be6:	f04f 0200 	mov.w	r2, #0
 8007bea:	f04f 0300 	mov.w	r3, #0
 8007bee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007bf2:	4629      	mov	r1, r5
 8007bf4:	008b      	lsls	r3, r1, #2
 8007bf6:	4621      	mov	r1, r4
 8007bf8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007bfc:	4621      	mov	r1, r4
 8007bfe:	008a      	lsls	r2, r1, #2
 8007c00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007c04:	f7f8 fb3c 	bl	8000280 <__aeabi_uldivmod>
 8007c08:	4602      	mov	r2, r0
 8007c0a:	460b      	mov	r3, r1
 8007c0c:	4b60      	ldr	r3, [pc, #384]	@ (8007d90 <UART_SetConfig+0x4e4>)
 8007c0e:	fba3 2302 	umull	r2, r3, r3, r2
 8007c12:	095b      	lsrs	r3, r3, #5
 8007c14:	011c      	lsls	r4, r3, #4
 8007c16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007c20:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007c24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007c28:	4642      	mov	r2, r8
 8007c2a:	464b      	mov	r3, r9
 8007c2c:	1891      	adds	r1, r2, r2
 8007c2e:	61b9      	str	r1, [r7, #24]
 8007c30:	415b      	adcs	r3, r3
 8007c32:	61fb      	str	r3, [r7, #28]
 8007c34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007c38:	4641      	mov	r1, r8
 8007c3a:	1851      	adds	r1, r2, r1
 8007c3c:	6139      	str	r1, [r7, #16]
 8007c3e:	4649      	mov	r1, r9
 8007c40:	414b      	adcs	r3, r1
 8007c42:	617b      	str	r3, [r7, #20]
 8007c44:	f04f 0200 	mov.w	r2, #0
 8007c48:	f04f 0300 	mov.w	r3, #0
 8007c4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007c50:	4659      	mov	r1, fp
 8007c52:	00cb      	lsls	r3, r1, #3
 8007c54:	4651      	mov	r1, sl
 8007c56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c5a:	4651      	mov	r1, sl
 8007c5c:	00ca      	lsls	r2, r1, #3
 8007c5e:	4610      	mov	r0, r2
 8007c60:	4619      	mov	r1, r3
 8007c62:	4603      	mov	r3, r0
 8007c64:	4642      	mov	r2, r8
 8007c66:	189b      	adds	r3, r3, r2
 8007c68:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007c6c:	464b      	mov	r3, r9
 8007c6e:	460a      	mov	r2, r1
 8007c70:	eb42 0303 	adc.w	r3, r2, r3
 8007c74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007c82:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007c84:	f04f 0200 	mov.w	r2, #0
 8007c88:	f04f 0300 	mov.w	r3, #0
 8007c8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007c90:	4649      	mov	r1, r9
 8007c92:	008b      	lsls	r3, r1, #2
 8007c94:	4641      	mov	r1, r8
 8007c96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c9a:	4641      	mov	r1, r8
 8007c9c:	008a      	lsls	r2, r1, #2
 8007c9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007ca2:	f7f8 faed 	bl	8000280 <__aeabi_uldivmod>
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	460b      	mov	r3, r1
 8007caa:	4611      	mov	r1, r2
 8007cac:	4b38      	ldr	r3, [pc, #224]	@ (8007d90 <UART_SetConfig+0x4e4>)
 8007cae:	fba3 2301 	umull	r2, r3, r3, r1
 8007cb2:	095b      	lsrs	r3, r3, #5
 8007cb4:	2264      	movs	r2, #100	@ 0x64
 8007cb6:	fb02 f303 	mul.w	r3, r2, r3
 8007cba:	1acb      	subs	r3, r1, r3
 8007cbc:	011b      	lsls	r3, r3, #4
 8007cbe:	3332      	adds	r3, #50	@ 0x32
 8007cc0:	4a33      	ldr	r2, [pc, #204]	@ (8007d90 <UART_SetConfig+0x4e4>)
 8007cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8007cc6:	095b      	lsrs	r3, r3, #5
 8007cc8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007ccc:	441c      	add	r4, r3
 8007cce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	673b      	str	r3, [r7, #112]	@ 0x70
 8007cd6:	677a      	str	r2, [r7, #116]	@ 0x74
 8007cd8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007cdc:	4642      	mov	r2, r8
 8007cde:	464b      	mov	r3, r9
 8007ce0:	1891      	adds	r1, r2, r2
 8007ce2:	60b9      	str	r1, [r7, #8]
 8007ce4:	415b      	adcs	r3, r3
 8007ce6:	60fb      	str	r3, [r7, #12]
 8007ce8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007cec:	4641      	mov	r1, r8
 8007cee:	1851      	adds	r1, r2, r1
 8007cf0:	6039      	str	r1, [r7, #0]
 8007cf2:	4649      	mov	r1, r9
 8007cf4:	414b      	adcs	r3, r1
 8007cf6:	607b      	str	r3, [r7, #4]
 8007cf8:	f04f 0200 	mov.w	r2, #0
 8007cfc:	f04f 0300 	mov.w	r3, #0
 8007d00:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007d04:	4659      	mov	r1, fp
 8007d06:	00cb      	lsls	r3, r1, #3
 8007d08:	4651      	mov	r1, sl
 8007d0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d0e:	4651      	mov	r1, sl
 8007d10:	00ca      	lsls	r2, r1, #3
 8007d12:	4610      	mov	r0, r2
 8007d14:	4619      	mov	r1, r3
 8007d16:	4603      	mov	r3, r0
 8007d18:	4642      	mov	r2, r8
 8007d1a:	189b      	adds	r3, r3, r2
 8007d1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007d1e:	464b      	mov	r3, r9
 8007d20:	460a      	mov	r2, r1
 8007d22:	eb42 0303 	adc.w	r3, r2, r3
 8007d26:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	663b      	str	r3, [r7, #96]	@ 0x60
 8007d32:	667a      	str	r2, [r7, #100]	@ 0x64
 8007d34:	f04f 0200 	mov.w	r2, #0
 8007d38:	f04f 0300 	mov.w	r3, #0
 8007d3c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007d40:	4649      	mov	r1, r9
 8007d42:	008b      	lsls	r3, r1, #2
 8007d44:	4641      	mov	r1, r8
 8007d46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d4a:	4641      	mov	r1, r8
 8007d4c:	008a      	lsls	r2, r1, #2
 8007d4e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007d52:	f7f8 fa95 	bl	8000280 <__aeabi_uldivmod>
 8007d56:	4602      	mov	r2, r0
 8007d58:	460b      	mov	r3, r1
 8007d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8007d90 <UART_SetConfig+0x4e4>)
 8007d5c:	fba3 1302 	umull	r1, r3, r3, r2
 8007d60:	095b      	lsrs	r3, r3, #5
 8007d62:	2164      	movs	r1, #100	@ 0x64
 8007d64:	fb01 f303 	mul.w	r3, r1, r3
 8007d68:	1ad3      	subs	r3, r2, r3
 8007d6a:	011b      	lsls	r3, r3, #4
 8007d6c:	3332      	adds	r3, #50	@ 0x32
 8007d6e:	4a08      	ldr	r2, [pc, #32]	@ (8007d90 <UART_SetConfig+0x4e4>)
 8007d70:	fba2 2303 	umull	r2, r3, r2, r3
 8007d74:	095b      	lsrs	r3, r3, #5
 8007d76:	f003 020f 	and.w	r2, r3, #15
 8007d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4422      	add	r2, r4
 8007d82:	609a      	str	r2, [r3, #8]
}
 8007d84:	bf00      	nop
 8007d86:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d90:	51eb851f 	.word	0x51eb851f

08007d94 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d94:	b084      	sub	sp, #16
 8007d96:	b580      	push	{r7, lr}
 8007d98:	b084      	sub	sp, #16
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
 8007d9e:	f107 001c 	add.w	r0, r7, #28
 8007da2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007da6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d123      	bne.n	8007df6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007db2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	68db      	ldr	r3, [r3, #12]
 8007dbe:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007dc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	68db      	ldr	r3, [r3, #12]
 8007dce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007dd6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007dda:	2b01      	cmp	r3, #1
 8007ddc:	d105      	bne.n	8007dea <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	68db      	ldr	r3, [r3, #12]
 8007de2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 f9dc 	bl	80081a8 <USB_CoreReset>
 8007df0:	4603      	mov	r3, r0
 8007df2:	73fb      	strb	r3, [r7, #15]
 8007df4:	e01b      	b.n	8007e2e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	68db      	ldr	r3, [r3, #12]
 8007dfa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f000 f9d0 	bl	80081a8 <USB_CoreReset>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007e0c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d106      	bne.n	8007e22 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e18:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	639a      	str	r2, [r3, #56]	@ 0x38
 8007e20:	e005      	b.n	8007e2e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e26:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007e2e:	7fbb      	ldrb	r3, [r7, #30]
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d10b      	bne.n	8007e4c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	689b      	ldr	r3, [r3, #8]
 8007e38:	f043 0206 	orr.w	r2, r3, #6
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	689b      	ldr	r3, [r3, #8]
 8007e44:	f043 0220 	orr.w	r2, r3, #32
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3710      	adds	r7, #16
 8007e52:	46bd      	mov	sp, r7
 8007e54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e58:	b004      	add	sp, #16
 8007e5a:	4770      	bx	lr

08007e5c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b083      	sub	sp, #12
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	689b      	ldr	r3, [r3, #8]
 8007e68:	f043 0201 	orr.w	r2, r3, #1
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007e70:	2300      	movs	r3, #0
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	370c      	adds	r7, #12
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr

08007e7e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e7e:	b480      	push	{r7}
 8007e80:	b083      	sub	sp, #12
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	f023 0201 	bic.w	r2, r3, #1
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007e92:	2300      	movs	r3, #0
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	370c      	adds	r7, #12
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr

08007ea0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b084      	sub	sp, #16
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	460b      	mov	r3, r1
 8007eaa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007eac:	2300      	movs	r3, #0
 8007eae:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	68db      	ldr	r3, [r3, #12]
 8007eb4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007ebc:	78fb      	ldrb	r3, [r7, #3]
 8007ebe:	2b01      	cmp	r3, #1
 8007ec0:	d115      	bne.n	8007eee <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	68db      	ldr	r3, [r3, #12]
 8007ec6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007ece:	200a      	movs	r0, #10
 8007ed0:	f7fa fa10 	bl	80022f4 <HAL_Delay>
      ms += 10U;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	330a      	adds	r3, #10
 8007ed8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 f956 	bl	800818c <USB_GetMode>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d01e      	beq.n	8007f24 <USB_SetCurrentMode+0x84>
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2bc7      	cmp	r3, #199	@ 0xc7
 8007eea:	d9f0      	bls.n	8007ece <USB_SetCurrentMode+0x2e>
 8007eec:	e01a      	b.n	8007f24 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007eee:	78fb      	ldrb	r3, [r7, #3]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d115      	bne.n	8007f20 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	68db      	ldr	r3, [r3, #12]
 8007ef8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007f00:	200a      	movs	r0, #10
 8007f02:	f7fa f9f7 	bl	80022f4 <HAL_Delay>
      ms += 10U;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	330a      	adds	r3, #10
 8007f0a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f000 f93d 	bl	800818c <USB_GetMode>
 8007f12:	4603      	mov	r3, r0
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d005      	beq.n	8007f24 <USB_SetCurrentMode+0x84>
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2bc7      	cmp	r3, #199	@ 0xc7
 8007f1c:	d9f0      	bls.n	8007f00 <USB_SetCurrentMode+0x60>
 8007f1e:	e001      	b.n	8007f24 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007f20:	2301      	movs	r3, #1
 8007f22:	e005      	b.n	8007f30 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2bc8      	cmp	r3, #200	@ 0xc8
 8007f28:	d101      	bne.n	8007f2e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	e000      	b.n	8007f30 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007f2e:	2300      	movs	r3, #0
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3710      	adds	r7, #16
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b085      	sub	sp, #20
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007f42:	2300      	movs	r3, #0
 8007f44:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	3301      	adds	r3, #1
 8007f4a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007f52:	d901      	bls.n	8007f58 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007f54:	2303      	movs	r3, #3
 8007f56:	e01b      	b.n	8007f90 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	691b      	ldr	r3, [r3, #16]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	daf2      	bge.n	8007f46 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007f60:	2300      	movs	r3, #0
 8007f62:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	019b      	lsls	r3, r3, #6
 8007f68:	f043 0220 	orr.w	r2, r3, #32
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	3301      	adds	r3, #1
 8007f74:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007f7c:	d901      	bls.n	8007f82 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007f7e:	2303      	movs	r3, #3
 8007f80:	e006      	b.n	8007f90 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	691b      	ldr	r3, [r3, #16]
 8007f86:	f003 0320 	and.w	r3, r3, #32
 8007f8a:	2b20      	cmp	r3, #32
 8007f8c:	d0f0      	beq.n	8007f70 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007f8e:	2300      	movs	r3, #0
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3714      	adds	r7, #20
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr

08007f9c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b085      	sub	sp, #20
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	3301      	adds	r3, #1
 8007fac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007fb4:	d901      	bls.n	8007fba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007fb6:	2303      	movs	r3, #3
 8007fb8:	e018      	b.n	8007fec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	691b      	ldr	r3, [r3, #16]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	daf2      	bge.n	8007fa8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2210      	movs	r2, #16
 8007fca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	3301      	adds	r3, #1
 8007fd0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007fd8:	d901      	bls.n	8007fde <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007fda:	2303      	movs	r3, #3
 8007fdc:	e006      	b.n	8007fec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	691b      	ldr	r3, [r3, #16]
 8007fe2:	f003 0310 	and.w	r3, r3, #16
 8007fe6:	2b10      	cmp	r3, #16
 8007fe8:	d0f0      	beq.n	8007fcc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007fea:	2300      	movs	r3, #0
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3714      	adds	r7, #20
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr

08007ff8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b089      	sub	sp, #36	@ 0x24
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	60f8      	str	r0, [r7, #12]
 8008000:	60b9      	str	r1, [r7, #8]
 8008002:	4611      	mov	r1, r2
 8008004:	461a      	mov	r2, r3
 8008006:	460b      	mov	r3, r1
 8008008:	71fb      	strb	r3, [r7, #7]
 800800a:	4613      	mov	r3, r2
 800800c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008016:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800801a:	2b00      	cmp	r3, #0
 800801c:	d123      	bne.n	8008066 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800801e:	88bb      	ldrh	r3, [r7, #4]
 8008020:	3303      	adds	r3, #3
 8008022:	089b      	lsrs	r3, r3, #2
 8008024:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008026:	2300      	movs	r3, #0
 8008028:	61bb      	str	r3, [r7, #24]
 800802a:	e018      	b.n	800805e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800802c:	79fb      	ldrb	r3, [r7, #7]
 800802e:	031a      	lsls	r2, r3, #12
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	4413      	add	r3, r2
 8008034:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008038:	461a      	mov	r2, r3
 800803a:	69fb      	ldr	r3, [r7, #28]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008040:	69fb      	ldr	r3, [r7, #28]
 8008042:	3301      	adds	r3, #1
 8008044:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008046:	69fb      	ldr	r3, [r7, #28]
 8008048:	3301      	adds	r3, #1
 800804a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800804c:	69fb      	ldr	r3, [r7, #28]
 800804e:	3301      	adds	r3, #1
 8008050:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008052:	69fb      	ldr	r3, [r7, #28]
 8008054:	3301      	adds	r3, #1
 8008056:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008058:	69bb      	ldr	r3, [r7, #24]
 800805a:	3301      	adds	r3, #1
 800805c:	61bb      	str	r3, [r7, #24]
 800805e:	69ba      	ldr	r2, [r7, #24]
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	429a      	cmp	r2, r3
 8008064:	d3e2      	bcc.n	800802c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008066:	2300      	movs	r3, #0
}
 8008068:	4618      	mov	r0, r3
 800806a:	3724      	adds	r7, #36	@ 0x24
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr

08008074 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008074:	b480      	push	{r7}
 8008076:	b08b      	sub	sp, #44	@ 0x2c
 8008078:	af00      	add	r7, sp, #0
 800807a:	60f8      	str	r0, [r7, #12]
 800807c:	60b9      	str	r1, [r7, #8]
 800807e:	4613      	mov	r3, r2
 8008080:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800808a:	88fb      	ldrh	r3, [r7, #6]
 800808c:	089b      	lsrs	r3, r3, #2
 800808e:	b29b      	uxth	r3, r3
 8008090:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008092:	88fb      	ldrh	r3, [r7, #6]
 8008094:	f003 0303 	and.w	r3, r3, #3
 8008098:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800809a:	2300      	movs	r3, #0
 800809c:	623b      	str	r3, [r7, #32]
 800809e:	e014      	b.n	80080ca <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80080a0:	69bb      	ldr	r3, [r7, #24]
 80080a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80080a6:	681a      	ldr	r2, [r3, #0]
 80080a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080aa:	601a      	str	r2, [r3, #0]
    pDest++;
 80080ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ae:	3301      	adds	r3, #1
 80080b0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80080b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080b4:	3301      	adds	r3, #1
 80080b6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80080b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ba:	3301      	adds	r3, #1
 80080bc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80080be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080c0:	3301      	adds	r3, #1
 80080c2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80080c4:	6a3b      	ldr	r3, [r7, #32]
 80080c6:	3301      	adds	r3, #1
 80080c8:	623b      	str	r3, [r7, #32]
 80080ca:	6a3a      	ldr	r2, [r7, #32]
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	429a      	cmp	r2, r3
 80080d0:	d3e6      	bcc.n	80080a0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80080d2:	8bfb      	ldrh	r3, [r7, #30]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d01e      	beq.n	8008116 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80080d8:	2300      	movs	r3, #0
 80080da:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80080dc:	69bb      	ldr	r3, [r7, #24]
 80080de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80080e2:	461a      	mov	r2, r3
 80080e4:	f107 0310 	add.w	r3, r7, #16
 80080e8:	6812      	ldr	r2, [r2, #0]
 80080ea:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80080ec:	693a      	ldr	r2, [r7, #16]
 80080ee:	6a3b      	ldr	r3, [r7, #32]
 80080f0:	b2db      	uxtb	r3, r3
 80080f2:	00db      	lsls	r3, r3, #3
 80080f4:	fa22 f303 	lsr.w	r3, r2, r3
 80080f8:	b2da      	uxtb	r2, r3
 80080fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080fc:	701a      	strb	r2, [r3, #0]
      i++;
 80080fe:	6a3b      	ldr	r3, [r7, #32]
 8008100:	3301      	adds	r3, #1
 8008102:	623b      	str	r3, [r7, #32]
      pDest++;
 8008104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008106:	3301      	adds	r3, #1
 8008108:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800810a:	8bfb      	ldrh	r3, [r7, #30]
 800810c:	3b01      	subs	r3, #1
 800810e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008110:	8bfb      	ldrh	r3, [r7, #30]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d1ea      	bne.n	80080ec <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008118:	4618      	mov	r0, r3
 800811a:	372c      	adds	r7, #44	@ 0x2c
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr

08008124 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008124:	b480      	push	{r7}
 8008126:	b085      	sub	sp, #20
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	695b      	ldr	r3, [r3, #20]
 8008130:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	699b      	ldr	r3, [r3, #24]
 8008136:	68fa      	ldr	r2, [r7, #12]
 8008138:	4013      	ands	r3, r2
 800813a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800813c:	68fb      	ldr	r3, [r7, #12]
}
 800813e:	4618      	mov	r0, r3
 8008140:	3714      	adds	r7, #20
 8008142:	46bd      	mov	sp, r7
 8008144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008148:	4770      	bx	lr

0800814a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800814a:	b480      	push	{r7}
 800814c:	b085      	sub	sp, #20
 800814e:	af00      	add	r7, sp, #0
 8008150:	6078      	str	r0, [r7, #4]
 8008152:	460b      	mov	r3, r1
 8008154:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800815a:	78fb      	ldrb	r3, [r7, #3]
 800815c:	015a      	lsls	r2, r3, #5
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	4413      	add	r3, r2
 8008162:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008166:	689b      	ldr	r3, [r3, #8]
 8008168:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800816a:	78fb      	ldrb	r3, [r7, #3]
 800816c:	015a      	lsls	r2, r3, #5
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	4413      	add	r3, r2
 8008172:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008176:	68db      	ldr	r3, [r3, #12]
 8008178:	68ba      	ldr	r2, [r7, #8]
 800817a:	4013      	ands	r3, r2
 800817c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800817e:	68bb      	ldr	r3, [r7, #8]
}
 8008180:	4618      	mov	r0, r3
 8008182:	3714      	adds	r7, #20
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr

0800818c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800818c:	b480      	push	{r7}
 800818e:	b083      	sub	sp, #12
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	695b      	ldr	r3, [r3, #20]
 8008198:	f003 0301 	and.w	r3, r3, #1
}
 800819c:	4618      	mov	r0, r3
 800819e:	370c      	adds	r7, #12
 80081a0:	46bd      	mov	sp, r7
 80081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a6:	4770      	bx	lr

080081a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b085      	sub	sp, #20
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80081b0:	2300      	movs	r3, #0
 80081b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	3301      	adds	r3, #1
 80081b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80081c0:	d901      	bls.n	80081c6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80081c2:	2303      	movs	r3, #3
 80081c4:	e022      	b.n	800820c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	691b      	ldr	r3, [r3, #16]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	daf2      	bge.n	80081b4 <USB_CoreReset+0xc>

  count = 10U;
 80081ce:	230a      	movs	r3, #10
 80081d0:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80081d2:	e002      	b.n	80081da <USB_CoreReset+0x32>
  {
    count--;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	3b01      	subs	r3, #1
 80081d8:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d1f9      	bne.n	80081d4 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	691b      	ldr	r3, [r3, #16]
 80081e4:	f043 0201 	orr.w	r2, r3, #1
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	3301      	adds	r3, #1
 80081f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80081f8:	d901      	bls.n	80081fe <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80081fa:	2303      	movs	r3, #3
 80081fc:	e006      	b.n	800820c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	691b      	ldr	r3, [r3, #16]
 8008202:	f003 0301 	and.w	r3, r3, #1
 8008206:	2b01      	cmp	r3, #1
 8008208:	d0f0      	beq.n	80081ec <USB_CoreReset+0x44>

  return HAL_OK;
 800820a:	2300      	movs	r3, #0
}
 800820c:	4618      	mov	r0, r3
 800820e:	3714      	adds	r7, #20
 8008210:	46bd      	mov	sp, r7
 8008212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008216:	4770      	bx	lr

08008218 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008218:	b084      	sub	sp, #16
 800821a:	b580      	push	{r7, lr}
 800821c:	b086      	sub	sp, #24
 800821e:	af00      	add	r7, sp, #0
 8008220:	6078      	str	r0, [r7, #4]
 8008222:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008226:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800822a:	2300      	movs	r3, #0
 800822c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008238:	461a      	mov	r2, r3
 800823a:	2300      	movs	r3, #0
 800823c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008242:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800824e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800825a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	68db      	ldr	r3, [r3, #12]
 8008266:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800826a:	2b00      	cmp	r3, #0
 800826c:	d119      	bne.n	80082a2 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800826e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008272:	2b01      	cmp	r3, #1
 8008274:	d10a      	bne.n	800828c <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	68fa      	ldr	r2, [r7, #12]
 8008280:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008284:	f043 0304 	orr.w	r3, r3, #4
 8008288:	6013      	str	r3, [r2, #0]
 800828a:	e014      	b.n	80082b6 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	68fa      	ldr	r2, [r7, #12]
 8008296:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800829a:	f023 0304 	bic.w	r3, r3, #4
 800829e:	6013      	str	r3, [r2, #0]
 80082a0:	e009      	b.n	80082b6 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	68fa      	ldr	r2, [r7, #12]
 80082ac:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80082b0:	f023 0304 	bic.w	r3, r3, #4
 80082b4:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80082b6:	2110      	movs	r1, #16
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f7ff fe3d 	bl	8007f38 <USB_FlushTxFifo>
 80082be:	4603      	mov	r3, r0
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d001      	beq.n	80082c8 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80082c4:	2301      	movs	r3, #1
 80082c6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f7ff fe67 	bl	8007f9c <USB_FlushRxFifo>
 80082ce:	4603      	mov	r3, r0
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d001      	beq.n	80082d8 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80082d4:	2301      	movs	r3, #1
 80082d6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80082d8:	2300      	movs	r3, #0
 80082da:	613b      	str	r3, [r7, #16]
 80082dc:	e015      	b.n	800830a <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	015a      	lsls	r2, r3, #5
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	4413      	add	r3, r2
 80082e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082ea:	461a      	mov	r2, r3
 80082ec:	f04f 33ff 	mov.w	r3, #4294967295
 80082f0:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	015a      	lsls	r2, r3, #5
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	4413      	add	r3, r2
 80082fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082fe:	461a      	mov	r2, r3
 8008300:	2300      	movs	r3, #0
 8008302:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	3301      	adds	r3, #1
 8008308:	613b      	str	r3, [r7, #16]
 800830a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800830e:	461a      	mov	r2, r3
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	4293      	cmp	r3, r2
 8008314:	d3e3      	bcc.n	80082de <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2200      	movs	r2, #0
 800831a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f04f 32ff 	mov.w	r2, #4294967295
 8008322:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	4a18      	ldr	r2, [pc, #96]	@ (8008388 <USB_HostInit+0x170>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d10b      	bne.n	8008344 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008332:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	4a15      	ldr	r2, [pc, #84]	@ (800838c <USB_HostInit+0x174>)
 8008338:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	4a14      	ldr	r2, [pc, #80]	@ (8008390 <USB_HostInit+0x178>)
 800833e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8008342:	e009      	b.n	8008358 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2280      	movs	r2, #128	@ 0x80
 8008348:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	4a11      	ldr	r2, [pc, #68]	@ (8008394 <USB_HostInit+0x17c>)
 800834e:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	4a11      	ldr	r2, [pc, #68]	@ (8008398 <USB_HostInit+0x180>)
 8008354:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008358:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800835c:	2b00      	cmp	r3, #0
 800835e:	d105      	bne.n	800836c <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	699b      	ldr	r3, [r3, #24]
 8008364:	f043 0210 	orr.w	r2, r3, #16
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	699a      	ldr	r2, [r3, #24]
 8008370:	4b0a      	ldr	r3, [pc, #40]	@ (800839c <USB_HostInit+0x184>)
 8008372:	4313      	orrs	r3, r2
 8008374:	687a      	ldr	r2, [r7, #4]
 8008376:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8008378:	7dfb      	ldrb	r3, [r7, #23]
}
 800837a:	4618      	mov	r0, r3
 800837c:	3718      	adds	r7, #24
 800837e:	46bd      	mov	sp, r7
 8008380:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008384:	b004      	add	sp, #16
 8008386:	4770      	bx	lr
 8008388:	40040000 	.word	0x40040000
 800838c:	01000200 	.word	0x01000200
 8008390:	00e00300 	.word	0x00e00300
 8008394:	00600080 	.word	0x00600080
 8008398:	004000e0 	.word	0x004000e0
 800839c:	a3200008 	.word	0xa3200008

080083a0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b085      	sub	sp, #20
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	460b      	mov	r3, r1
 80083aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	68fa      	ldr	r2, [r7, #12]
 80083ba:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80083be:	f023 0303 	bic.w	r3, r3, #3
 80083c2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80083ca:	681a      	ldr	r2, [r3, #0]
 80083cc:	78fb      	ldrb	r3, [r7, #3]
 80083ce:	f003 0303 	and.w	r3, r3, #3
 80083d2:	68f9      	ldr	r1, [r7, #12]
 80083d4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80083d8:	4313      	orrs	r3, r2
 80083da:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80083dc:	78fb      	ldrb	r3, [r7, #3]
 80083de:	2b01      	cmp	r3, #1
 80083e0:	d107      	bne.n	80083f2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80083e8:	461a      	mov	r2, r3
 80083ea:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80083ee:	6053      	str	r3, [r2, #4]
 80083f0:	e00c      	b.n	800840c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80083f2:	78fb      	ldrb	r3, [r7, #3]
 80083f4:	2b02      	cmp	r3, #2
 80083f6:	d107      	bne.n	8008408 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80083fe:	461a      	mov	r2, r3
 8008400:	f241 7370 	movw	r3, #6000	@ 0x1770
 8008404:	6053      	str	r3, [r2, #4]
 8008406:	e001      	b.n	800840c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8008408:	2301      	movs	r3, #1
 800840a:	e000      	b.n	800840e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800840c:	2300      	movs	r3, #0
}
 800840e:	4618      	mov	r0, r3
 8008410:	3714      	adds	r7, #20
 8008412:	46bd      	mov	sp, r7
 8008414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008418:	4770      	bx	lr

0800841a <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800841a:	b580      	push	{r7, lr}
 800841c:	b084      	sub	sp, #16
 800841e:	af00      	add	r7, sp, #0
 8008420:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008426:	2300      	movs	r3, #0
 8008428:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800843a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	68fa      	ldr	r2, [r7, #12]
 8008440:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008444:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008448:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800844a:	2064      	movs	r0, #100	@ 0x64
 800844c:	f7f9 ff52 	bl	80022f4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	68fa      	ldr	r2, [r7, #12]
 8008454:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008458:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800845c:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800845e:	200a      	movs	r0, #10
 8008460:	f7f9 ff48 	bl	80022f4 <HAL_Delay>

  return HAL_OK;
 8008464:	2300      	movs	r3, #0
}
 8008466:	4618      	mov	r0, r3
 8008468:	3710      	adds	r7, #16
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}

0800846e <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800846e:	b480      	push	{r7}
 8008470:	b085      	sub	sp, #20
 8008472:	af00      	add	r7, sp, #0
 8008474:	6078      	str	r0, [r7, #4]
 8008476:	460b      	mov	r3, r1
 8008478:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800847e:	2300      	movs	r3, #0
 8008480:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8008492:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800849a:	2b00      	cmp	r3, #0
 800849c:	d109      	bne.n	80084b2 <USB_DriveVbus+0x44>
 800849e:	78fb      	ldrb	r3, [r7, #3]
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	d106      	bne.n	80084b2 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	68fa      	ldr	r2, [r7, #12]
 80084a8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80084ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80084b0:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80084b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084bc:	d109      	bne.n	80084d2 <USB_DriveVbus+0x64>
 80084be:	78fb      	ldrb	r3, [r7, #3]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d106      	bne.n	80084d2 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	68fa      	ldr	r2, [r7, #12]
 80084c8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80084cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80084d0:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80084d2:	2300      	movs	r3, #0
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3714      	adds	r7, #20
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr

080084e0 <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b085      	sub	sp, #20
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80084ec:	2300      	movs	r3, #0
 80084ee:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	0c5b      	lsrs	r3, r3, #17
 80084fe:	f003 0303 	and.w	r3, r3, #3
}
 8008502:	4618      	mov	r0, r3
 8008504:	3714      	adds	r7, #20
 8008506:	46bd      	mov	sp, r7
 8008508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850c:	4770      	bx	lr

0800850e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800850e:	b480      	push	{r7}
 8008510:	b085      	sub	sp, #20
 8008512:	af00      	add	r7, sp, #0
 8008514:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008520:	689b      	ldr	r3, [r3, #8]
 8008522:	b29b      	uxth	r3, r3
}
 8008524:	4618      	mov	r0, r3
 8008526:	3714      	adds	r7, #20
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr

08008530 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b088      	sub	sp, #32
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	4608      	mov	r0, r1
 800853a:	4611      	mov	r1, r2
 800853c:	461a      	mov	r2, r3
 800853e:	4603      	mov	r3, r0
 8008540:	70fb      	strb	r3, [r7, #3]
 8008542:	460b      	mov	r3, r1
 8008544:	70bb      	strb	r3, [r7, #2]
 8008546:	4613      	mov	r3, r2
 8008548:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800854a:	2300      	movs	r3, #0
 800854c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8008552:	78fb      	ldrb	r3, [r7, #3]
 8008554:	015a      	lsls	r2, r3, #5
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	4413      	add	r3, r2
 800855a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800855e:	461a      	mov	r2, r3
 8008560:	f04f 33ff 	mov.w	r3, #4294967295
 8008564:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008566:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800856a:	2b03      	cmp	r3, #3
 800856c:	d87c      	bhi.n	8008668 <USB_HC_Init+0x138>
 800856e:	a201      	add	r2, pc, #4	@ (adr r2, 8008574 <USB_HC_Init+0x44>)
 8008570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008574:	08008585 	.word	0x08008585
 8008578:	0800862b 	.word	0x0800862b
 800857c:	08008585 	.word	0x08008585
 8008580:	080085ed 	.word	0x080085ed
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008584:	78fb      	ldrb	r3, [r7, #3]
 8008586:	015a      	lsls	r2, r3, #5
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	4413      	add	r3, r2
 800858c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008590:	461a      	mov	r2, r3
 8008592:	f240 439d 	movw	r3, #1181	@ 0x49d
 8008596:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008598:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800859c:	2b00      	cmp	r3, #0
 800859e:	da10      	bge.n	80085c2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80085a0:	78fb      	ldrb	r3, [r7, #3]
 80085a2:	015a      	lsls	r2, r3, #5
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	4413      	add	r3, r2
 80085a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085ac:	68db      	ldr	r3, [r3, #12]
 80085ae:	78fa      	ldrb	r2, [r7, #3]
 80085b0:	0151      	lsls	r1, r2, #5
 80085b2:	693a      	ldr	r2, [r7, #16]
 80085b4:	440a      	add	r2, r1
 80085b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80085ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80085be:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80085c0:	e055      	b.n	800866e <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	4a6f      	ldr	r2, [pc, #444]	@ (8008784 <USB_HC_Init+0x254>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d151      	bne.n	800866e <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80085ca:	78fb      	ldrb	r3, [r7, #3]
 80085cc:	015a      	lsls	r2, r3, #5
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	4413      	add	r3, r2
 80085d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085d6:	68db      	ldr	r3, [r3, #12]
 80085d8:	78fa      	ldrb	r2, [r7, #3]
 80085da:	0151      	lsls	r1, r2, #5
 80085dc:	693a      	ldr	r2, [r7, #16]
 80085de:	440a      	add	r2, r1
 80085e0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80085e4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80085e8:	60d3      	str	r3, [r2, #12]
      break;
 80085ea:	e040      	b.n	800866e <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80085ec:	78fb      	ldrb	r3, [r7, #3]
 80085ee:	015a      	lsls	r2, r3, #5
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	4413      	add	r3, r2
 80085f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085f8:	461a      	mov	r2, r3
 80085fa:	f240 639d 	movw	r3, #1693	@ 0x69d
 80085fe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008600:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008604:	2b00      	cmp	r3, #0
 8008606:	da34      	bge.n	8008672 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008608:	78fb      	ldrb	r3, [r7, #3]
 800860a:	015a      	lsls	r2, r3, #5
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	4413      	add	r3, r2
 8008610:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008614:	68db      	ldr	r3, [r3, #12]
 8008616:	78fa      	ldrb	r2, [r7, #3]
 8008618:	0151      	lsls	r1, r2, #5
 800861a:	693a      	ldr	r2, [r7, #16]
 800861c:	440a      	add	r2, r1
 800861e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008622:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008626:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008628:	e023      	b.n	8008672 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800862a:	78fb      	ldrb	r3, [r7, #3]
 800862c:	015a      	lsls	r2, r3, #5
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	4413      	add	r3, r2
 8008632:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008636:	461a      	mov	r2, r3
 8008638:	f240 2325 	movw	r3, #549	@ 0x225
 800863c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800863e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008642:	2b00      	cmp	r3, #0
 8008644:	da17      	bge.n	8008676 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008646:	78fb      	ldrb	r3, [r7, #3]
 8008648:	015a      	lsls	r2, r3, #5
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	4413      	add	r3, r2
 800864e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008652:	68db      	ldr	r3, [r3, #12]
 8008654:	78fa      	ldrb	r2, [r7, #3]
 8008656:	0151      	lsls	r1, r2, #5
 8008658:	693a      	ldr	r2, [r7, #16]
 800865a:	440a      	add	r2, r1
 800865c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008660:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8008664:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008666:	e006      	b.n	8008676 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8008668:	2301      	movs	r3, #1
 800866a:	77fb      	strb	r3, [r7, #31]
      break;
 800866c:	e004      	b.n	8008678 <USB_HC_Init+0x148>
      break;
 800866e:	bf00      	nop
 8008670:	e002      	b.n	8008678 <USB_HC_Init+0x148>
      break;
 8008672:	bf00      	nop
 8008674:	e000      	b.n	8008678 <USB_HC_Init+0x148>
      break;
 8008676:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008678:	78fb      	ldrb	r3, [r7, #3]
 800867a:	015a      	lsls	r2, r3, #5
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	4413      	add	r3, r2
 8008680:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008684:	461a      	mov	r2, r3
 8008686:	2300      	movs	r3, #0
 8008688:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800868a:	78fb      	ldrb	r3, [r7, #3]
 800868c:	015a      	lsls	r2, r3, #5
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	4413      	add	r3, r2
 8008692:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008696:	68db      	ldr	r3, [r3, #12]
 8008698:	78fa      	ldrb	r2, [r7, #3]
 800869a:	0151      	lsls	r1, r2, #5
 800869c:	693a      	ldr	r2, [r7, #16]
 800869e:	440a      	add	r2, r1
 80086a0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80086a4:	f043 0302 	orr.w	r3, r3, #2
 80086a8:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80086b0:	699a      	ldr	r2, [r3, #24]
 80086b2:	78fb      	ldrb	r3, [r7, #3]
 80086b4:	f003 030f 	and.w	r3, r3, #15
 80086b8:	2101      	movs	r1, #1
 80086ba:	fa01 f303 	lsl.w	r3, r1, r3
 80086be:	6939      	ldr	r1, [r7, #16]
 80086c0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80086c4:	4313      	orrs	r3, r2
 80086c6:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	699b      	ldr	r3, [r3, #24]
 80086cc:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80086d4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	da03      	bge.n	80086e4 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80086dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80086e0:	61bb      	str	r3, [r7, #24]
 80086e2:	e001      	b.n	80086e8 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 80086e4:	2300      	movs	r3, #0
 80086e6:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f7ff fef9 	bl	80084e0 <USB_GetHostSpeed>
 80086ee:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80086f0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80086f4:	2b02      	cmp	r3, #2
 80086f6:	d106      	bne.n	8008706 <USB_HC_Init+0x1d6>
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2b02      	cmp	r3, #2
 80086fc:	d003      	beq.n	8008706 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80086fe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8008702:	617b      	str	r3, [r7, #20]
 8008704:	e001      	b.n	800870a <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008706:	2300      	movs	r3, #0
 8008708:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800870a:	787b      	ldrb	r3, [r7, #1]
 800870c:	059b      	lsls	r3, r3, #22
 800870e:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008712:	78bb      	ldrb	r3, [r7, #2]
 8008714:	02db      	lsls	r3, r3, #11
 8008716:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800871a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800871c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008720:	049b      	lsls	r3, r3, #18
 8008722:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008726:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8008728:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800872a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800872e:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8008730:	69bb      	ldr	r3, [r7, #24]
 8008732:	431a      	orrs	r2, r3
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008738:	78fa      	ldrb	r2, [r7, #3]
 800873a:	0151      	lsls	r1, r2, #5
 800873c:	693a      	ldr	r2, [r7, #16]
 800873e:	440a      	add	r2, r1
 8008740:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8008744:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008748:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800874a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800874e:	2b03      	cmp	r3, #3
 8008750:	d003      	beq.n	800875a <USB_HC_Init+0x22a>
 8008752:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008756:	2b01      	cmp	r3, #1
 8008758:	d10f      	bne.n	800877a <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800875a:	78fb      	ldrb	r3, [r7, #3]
 800875c:	015a      	lsls	r2, r3, #5
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	4413      	add	r3, r2
 8008762:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	78fa      	ldrb	r2, [r7, #3]
 800876a:	0151      	lsls	r1, r2, #5
 800876c:	693a      	ldr	r2, [r7, #16]
 800876e:	440a      	add	r2, r1
 8008770:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008774:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008778:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800877a:	7ffb      	ldrb	r3, [r7, #31]
}
 800877c:	4618      	mov	r0, r3
 800877e:	3720      	adds	r7, #32
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}
 8008784:	40040000 	.word	0x40040000

08008788 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b08c      	sub	sp, #48	@ 0x30
 800878c:	af02      	add	r7, sp, #8
 800878e:	60f8      	str	r0, [r7, #12]
 8008790:	60b9      	str	r1, [r7, #8]
 8008792:	4613      	mov	r3, r2
 8008794:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	785b      	ldrb	r3, [r3, #1]
 800879e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80087a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80087a4:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	4a5d      	ldr	r2, [pc, #372]	@ (8008920 <USB_HC_StartXfer+0x198>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d12f      	bne.n	800880e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 80087ae:	79fb      	ldrb	r3, [r7, #7]
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	d11c      	bne.n	80087ee <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	7c9b      	ldrb	r3, [r3, #18]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d003      	beq.n	80087c4 <USB_HC_StartXfer+0x3c>
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	7c9b      	ldrb	r3, [r3, #18]
 80087c0:	2b02      	cmp	r3, #2
 80087c2:	d124      	bne.n	800880e <USB_HC_StartXfer+0x86>
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	799b      	ldrb	r3, [r3, #6]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d120      	bne.n	800880e <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80087cc:	69fb      	ldr	r3, [r7, #28]
 80087ce:	015a      	lsls	r2, r3, #5
 80087d0:	6a3b      	ldr	r3, [r7, #32]
 80087d2:	4413      	add	r3, r2
 80087d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087d8:	68db      	ldr	r3, [r3, #12]
 80087da:	69fa      	ldr	r2, [r7, #28]
 80087dc:	0151      	lsls	r1, r2, #5
 80087de:	6a3a      	ldr	r2, [r7, #32]
 80087e0:	440a      	add	r2, r1
 80087e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80087e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087ea:	60d3      	str	r3, [r2, #12]
 80087ec:	e00f      	b.n	800880e <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	791b      	ldrb	r3, [r3, #4]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d10b      	bne.n	800880e <USB_HC_StartXfer+0x86>
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	795b      	ldrb	r3, [r3, #5]
 80087fa:	2b01      	cmp	r3, #1
 80087fc:	d107      	bne.n	800880e <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	785b      	ldrb	r3, [r3, #1]
 8008802:	4619      	mov	r1, r3
 8008804:	68f8      	ldr	r0, [r7, #12]
 8008806:	f000 fb6b 	bl	8008ee0 <USB_DoPing>
        return HAL_OK;
 800880a:	2300      	movs	r3, #0
 800880c:	e232      	b.n	8008c74 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	799b      	ldrb	r3, [r3, #6]
 8008812:	2b01      	cmp	r3, #1
 8008814:	d158      	bne.n	80088c8 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8008816:	2301      	movs	r3, #1
 8008818:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	78db      	ldrb	r3, [r3, #3]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d007      	beq.n	8008832 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008822:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008824:	68ba      	ldr	r2, [r7, #8]
 8008826:	8a92      	ldrh	r2, [r2, #20]
 8008828:	fb03 f202 	mul.w	r2, r3, r2
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	61da      	str	r2, [r3, #28]
 8008830:	e07c      	b.n	800892c <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	7c9b      	ldrb	r3, [r3, #18]
 8008836:	2b01      	cmp	r3, #1
 8008838:	d130      	bne.n	800889c <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	6a1b      	ldr	r3, [r3, #32]
 800883e:	2bbc      	cmp	r3, #188	@ 0xbc
 8008840:	d918      	bls.n	8008874 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	8a9b      	ldrh	r3, [r3, #20]
 8008846:	461a      	mov	r2, r3
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	69da      	ldr	r2, [r3, #28]
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	68db      	ldr	r3, [r3, #12]
 8008858:	2b01      	cmp	r3, #1
 800885a:	d003      	beq.n	8008864 <USB_HC_StartXfer+0xdc>
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	68db      	ldr	r3, [r3, #12]
 8008860:	2b02      	cmp	r3, #2
 8008862:	d103      	bne.n	800886c <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	2202      	movs	r2, #2
 8008868:	60da      	str	r2, [r3, #12]
 800886a:	e05f      	b.n	800892c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	2201      	movs	r2, #1
 8008870:	60da      	str	r2, [r3, #12]
 8008872:	e05b      	b.n	800892c <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	6a1a      	ldr	r2, [r3, #32]
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	68db      	ldr	r3, [r3, #12]
 8008880:	2b01      	cmp	r3, #1
 8008882:	d007      	beq.n	8008894 <USB_HC_StartXfer+0x10c>
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	68db      	ldr	r3, [r3, #12]
 8008888:	2b02      	cmp	r3, #2
 800888a:	d003      	beq.n	8008894 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	2204      	movs	r2, #4
 8008890:	60da      	str	r2, [r3, #12]
 8008892:	e04b      	b.n	800892c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	2203      	movs	r2, #3
 8008898:	60da      	str	r2, [r3, #12]
 800889a:	e047      	b.n	800892c <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800889c:	79fb      	ldrb	r3, [r7, #7]
 800889e:	2b01      	cmp	r3, #1
 80088a0:	d10d      	bne.n	80088be <USB_HC_StartXfer+0x136>
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	6a1b      	ldr	r3, [r3, #32]
 80088a6:	68ba      	ldr	r2, [r7, #8]
 80088a8:	8a92      	ldrh	r2, [r2, #20]
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d907      	bls.n	80088be <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80088ae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80088b0:	68ba      	ldr	r2, [r7, #8]
 80088b2:	8a92      	ldrh	r2, [r2, #20]
 80088b4:	fb03 f202 	mul.w	r2, r3, r2
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	61da      	str	r2, [r3, #28]
 80088bc:	e036      	b.n	800892c <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	6a1a      	ldr	r2, [r3, #32]
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	61da      	str	r2, [r3, #28]
 80088c6:	e031      	b.n	800892c <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	6a1b      	ldr	r3, [r3, #32]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d018      	beq.n	8008902 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	6a1b      	ldr	r3, [r3, #32]
 80088d4:	68ba      	ldr	r2, [r7, #8]
 80088d6:	8a92      	ldrh	r2, [r2, #20]
 80088d8:	4413      	add	r3, r2
 80088da:	3b01      	subs	r3, #1
 80088dc:	68ba      	ldr	r2, [r7, #8]
 80088de:	8a92      	ldrh	r2, [r2, #20]
 80088e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80088e4:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 80088e6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80088e8:	8b7b      	ldrh	r3, [r7, #26]
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d90b      	bls.n	8008906 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 80088ee:	8b7b      	ldrh	r3, [r7, #26]
 80088f0:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80088f2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80088f4:	68ba      	ldr	r2, [r7, #8]
 80088f6:	8a92      	ldrh	r2, [r2, #20]
 80088f8:	fb03 f202 	mul.w	r2, r3, r2
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	61da      	str	r2, [r3, #28]
 8008900:	e001      	b.n	8008906 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8008902:	2301      	movs	r3, #1
 8008904:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	78db      	ldrb	r3, [r3, #3]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d00a      	beq.n	8008924 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800890e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008910:	68ba      	ldr	r2, [r7, #8]
 8008912:	8a92      	ldrh	r2, [r2, #20]
 8008914:	fb03 f202 	mul.w	r2, r3, r2
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	61da      	str	r2, [r3, #28]
 800891c:	e006      	b.n	800892c <USB_HC_StartXfer+0x1a4>
 800891e:	bf00      	nop
 8008920:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	6a1a      	ldr	r2, [r3, #32]
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	69db      	ldr	r3, [r3, #28]
 8008930:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008934:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008936:	04d9      	lsls	r1, r3, #19
 8008938:	4ba3      	ldr	r3, [pc, #652]	@ (8008bc8 <USB_HC_StartXfer+0x440>)
 800893a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800893c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	7d9b      	ldrb	r3, [r3, #22]
 8008942:	075b      	lsls	r3, r3, #29
 8008944:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008948:	69f9      	ldr	r1, [r7, #28]
 800894a:	0148      	lsls	r0, r1, #5
 800894c:	6a39      	ldr	r1, [r7, #32]
 800894e:	4401      	add	r1, r0
 8008950:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008954:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008956:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008958:	79fb      	ldrb	r3, [r7, #7]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d009      	beq.n	8008972 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	6999      	ldr	r1, [r3, #24]
 8008962:	69fb      	ldr	r3, [r7, #28]
 8008964:	015a      	lsls	r2, r3, #5
 8008966:	6a3b      	ldr	r3, [r7, #32]
 8008968:	4413      	add	r3, r2
 800896a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800896e:	460a      	mov	r2, r1
 8008970:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008972:	6a3b      	ldr	r3, [r7, #32]
 8008974:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008978:	689b      	ldr	r3, [r3, #8]
 800897a:	f003 0301 	and.w	r3, r3, #1
 800897e:	2b00      	cmp	r3, #0
 8008980:	bf0c      	ite	eq
 8008982:	2301      	moveq	r3, #1
 8008984:	2300      	movne	r3, #0
 8008986:	b2db      	uxtb	r3, r3
 8008988:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800898a:	69fb      	ldr	r3, [r7, #28]
 800898c:	015a      	lsls	r2, r3, #5
 800898e:	6a3b      	ldr	r3, [r7, #32]
 8008990:	4413      	add	r3, r2
 8008992:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	69fa      	ldr	r2, [r7, #28]
 800899a:	0151      	lsls	r1, r2, #5
 800899c:	6a3a      	ldr	r2, [r7, #32]
 800899e:	440a      	add	r2, r1
 80089a0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80089a4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80089a8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80089aa:	69fb      	ldr	r3, [r7, #28]
 80089ac:	015a      	lsls	r2, r3, #5
 80089ae:	6a3b      	ldr	r3, [r7, #32]
 80089b0:	4413      	add	r3, r2
 80089b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089b6:	681a      	ldr	r2, [r3, #0]
 80089b8:	7e7b      	ldrb	r3, [r7, #25]
 80089ba:	075b      	lsls	r3, r3, #29
 80089bc:	69f9      	ldr	r1, [r7, #28]
 80089be:	0148      	lsls	r0, r1, #5
 80089c0:	6a39      	ldr	r1, [r7, #32]
 80089c2:	4401      	add	r1, r0
 80089c4:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 80089c8:	4313      	orrs	r3, r2
 80089ca:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	799b      	ldrb	r3, [r3, #6]
 80089d0:	2b01      	cmp	r3, #1
 80089d2:	f040 80c3 	bne.w	8008b5c <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	7c5b      	ldrb	r3, [r3, #17]
 80089da:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80089dc:	68ba      	ldr	r2, [r7, #8]
 80089de:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80089e0:	4313      	orrs	r3, r2
 80089e2:	69fa      	ldr	r2, [r7, #28]
 80089e4:	0151      	lsls	r1, r2, #5
 80089e6:	6a3a      	ldr	r2, [r7, #32]
 80089e8:	440a      	add	r2, r1
 80089ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80089ee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80089f2:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80089f4:	69fb      	ldr	r3, [r7, #28]
 80089f6:	015a      	lsls	r2, r3, #5
 80089f8:	6a3b      	ldr	r3, [r7, #32]
 80089fa:	4413      	add	r3, r2
 80089fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a00:	68db      	ldr	r3, [r3, #12]
 8008a02:	69fa      	ldr	r2, [r7, #28]
 8008a04:	0151      	lsls	r1, r2, #5
 8008a06:	6a3a      	ldr	r2, [r7, #32]
 8008a08:	440a      	add	r2, r1
 8008a0a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008a0e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008a12:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	79db      	ldrb	r3, [r3, #7]
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	d123      	bne.n	8008a64 <USB_HC_StartXfer+0x2dc>
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	78db      	ldrb	r3, [r3, #3]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d11f      	bne.n	8008a64 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008a24:	69fb      	ldr	r3, [r7, #28]
 8008a26:	015a      	lsls	r2, r3, #5
 8008a28:	6a3b      	ldr	r3, [r7, #32]
 8008a2a:	4413      	add	r3, r2
 8008a2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	69fa      	ldr	r2, [r7, #28]
 8008a34:	0151      	lsls	r1, r2, #5
 8008a36:	6a3a      	ldr	r2, [r7, #32]
 8008a38:	440a      	add	r2, r1
 8008a3a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008a3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008a42:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8008a44:	69fb      	ldr	r3, [r7, #28]
 8008a46:	015a      	lsls	r2, r3, #5
 8008a48:	6a3b      	ldr	r3, [r7, #32]
 8008a4a:	4413      	add	r3, r2
 8008a4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a50:	68db      	ldr	r3, [r3, #12]
 8008a52:	69fa      	ldr	r2, [r7, #28]
 8008a54:	0151      	lsls	r1, r2, #5
 8008a56:	6a3a      	ldr	r2, [r7, #32]
 8008a58:	440a      	add	r2, r1
 8008a5a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008a5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a62:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	7c9b      	ldrb	r3, [r3, #18]
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	d003      	beq.n	8008a74 <USB_HC_StartXfer+0x2ec>
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	7c9b      	ldrb	r3, [r3, #18]
 8008a70:	2b03      	cmp	r3, #3
 8008a72:	d117      	bne.n	8008aa4 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008a78:	2b01      	cmp	r3, #1
 8008a7a:	d113      	bne.n	8008aa4 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	78db      	ldrb	r3, [r3, #3]
 8008a80:	2b01      	cmp	r3, #1
 8008a82:	d10f      	bne.n	8008aa4 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008a84:	69fb      	ldr	r3, [r7, #28]
 8008a86:	015a      	lsls	r2, r3, #5
 8008a88:	6a3b      	ldr	r3, [r7, #32]
 8008a8a:	4413      	add	r3, r2
 8008a8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	69fa      	ldr	r2, [r7, #28]
 8008a94:	0151      	lsls	r1, r2, #5
 8008a96:	6a3a      	ldr	r2, [r7, #32]
 8008a98:	440a      	add	r2, r1
 8008a9a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008a9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008aa2:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	7c9b      	ldrb	r3, [r3, #18]
 8008aa8:	2b01      	cmp	r3, #1
 8008aaa:	d162      	bne.n	8008b72 <USB_HC_StartXfer+0x3ea>
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	78db      	ldrb	r3, [r3, #3]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d15e      	bne.n	8008b72 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	68db      	ldr	r3, [r3, #12]
 8008ab8:	3b01      	subs	r3, #1
 8008aba:	2b03      	cmp	r3, #3
 8008abc:	d858      	bhi.n	8008b70 <USB_HC_StartXfer+0x3e8>
 8008abe:	a201      	add	r2, pc, #4	@ (adr r2, 8008ac4 <USB_HC_StartXfer+0x33c>)
 8008ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ac4:	08008ad5 	.word	0x08008ad5
 8008ac8:	08008af7 	.word	0x08008af7
 8008acc:	08008b19 	.word	0x08008b19
 8008ad0:	08008b3b 	.word	0x08008b3b
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8008ad4:	69fb      	ldr	r3, [r7, #28]
 8008ad6:	015a      	lsls	r2, r3, #5
 8008ad8:	6a3b      	ldr	r3, [r7, #32]
 8008ada:	4413      	add	r3, r2
 8008adc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	69fa      	ldr	r2, [r7, #28]
 8008ae4:	0151      	lsls	r1, r2, #5
 8008ae6:	6a3a      	ldr	r2, [r7, #32]
 8008ae8:	440a      	add	r2, r1
 8008aea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008aee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008af2:	6053      	str	r3, [r2, #4]
          break;
 8008af4:	e03d      	b.n	8008b72 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8008af6:	69fb      	ldr	r3, [r7, #28]
 8008af8:	015a      	lsls	r2, r3, #5
 8008afa:	6a3b      	ldr	r3, [r7, #32]
 8008afc:	4413      	add	r3, r2
 8008afe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b02:	685b      	ldr	r3, [r3, #4]
 8008b04:	69fa      	ldr	r2, [r7, #28]
 8008b06:	0151      	lsls	r1, r2, #5
 8008b08:	6a3a      	ldr	r2, [r7, #32]
 8008b0a:	440a      	add	r2, r1
 8008b0c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008b10:	f043 030e 	orr.w	r3, r3, #14
 8008b14:	6053      	str	r3, [r2, #4]
          break;
 8008b16:	e02c      	b.n	8008b72 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8008b18:	69fb      	ldr	r3, [r7, #28]
 8008b1a:	015a      	lsls	r2, r3, #5
 8008b1c:	6a3b      	ldr	r3, [r7, #32]
 8008b1e:	4413      	add	r3, r2
 8008b20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b24:	685b      	ldr	r3, [r3, #4]
 8008b26:	69fa      	ldr	r2, [r7, #28]
 8008b28:	0151      	lsls	r1, r2, #5
 8008b2a:	6a3a      	ldr	r2, [r7, #32]
 8008b2c:	440a      	add	r2, r1
 8008b2e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008b32:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008b36:	6053      	str	r3, [r2, #4]
          break;
 8008b38:	e01b      	b.n	8008b72 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8008b3a:	69fb      	ldr	r3, [r7, #28]
 8008b3c:	015a      	lsls	r2, r3, #5
 8008b3e:	6a3b      	ldr	r3, [r7, #32]
 8008b40:	4413      	add	r3, r2
 8008b42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	69fa      	ldr	r2, [r7, #28]
 8008b4a:	0151      	lsls	r1, r2, #5
 8008b4c:	6a3a      	ldr	r2, [r7, #32]
 8008b4e:	440a      	add	r2, r1
 8008b50:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008b54:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008b58:	6053      	str	r3, [r2, #4]
          break;
 8008b5a:	e00a      	b.n	8008b72 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008b5c:	69fb      	ldr	r3, [r7, #28]
 8008b5e:	015a      	lsls	r2, r3, #5
 8008b60:	6a3b      	ldr	r3, [r7, #32]
 8008b62:	4413      	add	r3, r2
 8008b64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b68:	461a      	mov	r2, r3
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	6053      	str	r3, [r2, #4]
 8008b6e:	e000      	b.n	8008b72 <USB_HC_StartXfer+0x3ea>
          break;
 8008b70:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008b72:	69fb      	ldr	r3, [r7, #28]
 8008b74:	015a      	lsls	r2, r3, #5
 8008b76:	6a3b      	ldr	r3, [r7, #32]
 8008b78:	4413      	add	r3, r2
 8008b7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008b88:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	78db      	ldrb	r3, [r3, #3]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d004      	beq.n	8008b9c <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b98:	613b      	str	r3, [r7, #16]
 8008b9a:	e003      	b.n	8008ba4 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008ba2:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008ba4:	693b      	ldr	r3, [r7, #16]
 8008ba6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008baa:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008bac:	69fb      	ldr	r3, [r7, #28]
 8008bae:	015a      	lsls	r2, r3, #5
 8008bb0:	6a3b      	ldr	r3, [r7, #32]
 8008bb2:	4413      	add	r3, r2
 8008bb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bb8:	461a      	mov	r2, r3
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008bbe:	79fb      	ldrb	r3, [r7, #7]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d003      	beq.n	8008bcc <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	e055      	b.n	8008c74 <USB_HC_StartXfer+0x4ec>
 8008bc8:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	78db      	ldrb	r3, [r3, #3]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d14e      	bne.n	8008c72 <USB_HC_StartXfer+0x4ea>
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	6a1b      	ldr	r3, [r3, #32]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d04a      	beq.n	8008c72 <USB_HC_StartXfer+0x4ea>
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	79db      	ldrb	r3, [r3, #7]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d146      	bne.n	8008c72 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	7c9b      	ldrb	r3, [r3, #18]
 8008be8:	2b03      	cmp	r3, #3
 8008bea:	d831      	bhi.n	8008c50 <USB_HC_StartXfer+0x4c8>
 8008bec:	a201      	add	r2, pc, #4	@ (adr r2, 8008bf4 <USB_HC_StartXfer+0x46c>)
 8008bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bf2:	bf00      	nop
 8008bf4:	08008c05 	.word	0x08008c05
 8008bf8:	08008c29 	.word	0x08008c29
 8008bfc:	08008c05 	.word	0x08008c05
 8008c00:	08008c29 	.word	0x08008c29
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	6a1b      	ldr	r3, [r3, #32]
 8008c08:	3303      	adds	r3, #3
 8008c0a:	089b      	lsrs	r3, r3, #2
 8008c0c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008c0e:	8afa      	ldrh	r2, [r7, #22]
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c14:	b29b      	uxth	r3, r3
 8008c16:	429a      	cmp	r2, r3
 8008c18:	d91c      	bls.n	8008c54 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	699b      	ldr	r3, [r3, #24]
 8008c1e:	f043 0220 	orr.w	r2, r3, #32
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	619a      	str	r2, [r3, #24]
        }
        break;
 8008c26:	e015      	b.n	8008c54 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	6a1b      	ldr	r3, [r3, #32]
 8008c2c:	3303      	adds	r3, #3
 8008c2e:	089b      	lsrs	r3, r3, #2
 8008c30:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008c32:	8afa      	ldrh	r2, [r7, #22]
 8008c34:	6a3b      	ldr	r3, [r7, #32]
 8008c36:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008c3a:	691b      	ldr	r3, [r3, #16]
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d90a      	bls.n	8008c58 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	699b      	ldr	r3, [r3, #24]
 8008c46:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	619a      	str	r2, [r3, #24]
        }
        break;
 8008c4e:	e003      	b.n	8008c58 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8008c50:	bf00      	nop
 8008c52:	e002      	b.n	8008c5a <USB_HC_StartXfer+0x4d2>
        break;
 8008c54:	bf00      	nop
 8008c56:	e000      	b.n	8008c5a <USB_HC_StartXfer+0x4d2>
        break;
 8008c58:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	6999      	ldr	r1, [r3, #24]
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	785a      	ldrb	r2, [r3, #1]
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	6a1b      	ldr	r3, [r3, #32]
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	2000      	movs	r0, #0
 8008c6a:	9000      	str	r0, [sp, #0]
 8008c6c:	68f8      	ldr	r0, [r7, #12]
 8008c6e:	f7ff f9c3 	bl	8007ff8 <USB_WritePacket>
  }

  return HAL_OK;
 8008c72:	2300      	movs	r3, #0
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3728      	adds	r7, #40	@ 0x28
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}

08008c7c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b085      	sub	sp, #20
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008c8e:	695b      	ldr	r3, [r3, #20]
 8008c90:	b29b      	uxth	r3, r3
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3714      	adds	r7, #20
 8008c96:	46bd      	mov	sp, r7
 8008c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9c:	4770      	bx	lr

08008c9e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008c9e:	b480      	push	{r7}
 8008ca0:	b089      	sub	sp, #36	@ 0x24
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	6078      	str	r0, [r7, #4]
 8008ca6:	460b      	mov	r3, r1
 8008ca8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8008cae:	78fb      	ldrb	r3, [r7, #3]
 8008cb0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008cb6:	69bb      	ldr	r3, [r7, #24]
 8008cb8:	015a      	lsls	r2, r3, #5
 8008cba:	69fb      	ldr	r3, [r7, #28]
 8008cbc:	4413      	add	r3, r2
 8008cbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	0c9b      	lsrs	r3, r3, #18
 8008cc6:	f003 0303 	and.w	r3, r3, #3
 8008cca:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008ccc:	69bb      	ldr	r3, [r7, #24]
 8008cce:	015a      	lsls	r2, r3, #5
 8008cd0:	69fb      	ldr	r3, [r7, #28]
 8008cd2:	4413      	add	r3, r2
 8008cd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	0fdb      	lsrs	r3, r3, #31
 8008cdc:	f003 0301 	and.w	r3, r3, #1
 8008ce0:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8008ce2:	69bb      	ldr	r3, [r7, #24]
 8008ce4:	015a      	lsls	r2, r3, #5
 8008ce6:	69fb      	ldr	r3, [r7, #28]
 8008ce8:	4413      	add	r3, r2
 8008cea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	0fdb      	lsrs	r3, r3, #31
 8008cf2:	f003 0301 	and.w	r3, r3, #1
 8008cf6:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	689b      	ldr	r3, [r3, #8]
 8008cfc:	f003 0320 	and.w	r3, r3, #32
 8008d00:	2b20      	cmp	r3, #32
 8008d02:	d10d      	bne.n	8008d20 <USB_HC_Halt+0x82>
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d10a      	bne.n	8008d20 <USB_HC_Halt+0x82>
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d005      	beq.n	8008d1c <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	2b01      	cmp	r3, #1
 8008d14:	d002      	beq.n	8008d1c <USB_HC_Halt+0x7e>
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	2b03      	cmp	r3, #3
 8008d1a:	d101      	bne.n	8008d20 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	e0d8      	b.n	8008ed2 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d002      	beq.n	8008d2c <USB_HC_Halt+0x8e>
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	2b02      	cmp	r3, #2
 8008d2a:	d173      	bne.n	8008e14 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008d2c:	69bb      	ldr	r3, [r7, #24]
 8008d2e:	015a      	lsls	r2, r3, #5
 8008d30:	69fb      	ldr	r3, [r7, #28]
 8008d32:	4413      	add	r3, r2
 8008d34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	69ba      	ldr	r2, [r7, #24]
 8008d3c:	0151      	lsls	r1, r2, #5
 8008d3e:	69fa      	ldr	r2, [r7, #28]
 8008d40:	440a      	add	r2, r1
 8008d42:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008d46:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008d4a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	689b      	ldr	r3, [r3, #8]
 8008d50:	f003 0320 	and.w	r3, r3, #32
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d14a      	bne.n	8008dee <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d5c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d133      	bne.n	8008dcc <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008d64:	69bb      	ldr	r3, [r7, #24]
 8008d66:	015a      	lsls	r2, r3, #5
 8008d68:	69fb      	ldr	r3, [r7, #28]
 8008d6a:	4413      	add	r3, r2
 8008d6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	69ba      	ldr	r2, [r7, #24]
 8008d74:	0151      	lsls	r1, r2, #5
 8008d76:	69fa      	ldr	r2, [r7, #28]
 8008d78:	440a      	add	r2, r1
 8008d7a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008d7e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008d82:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008d84:	69bb      	ldr	r3, [r7, #24]
 8008d86:	015a      	lsls	r2, r3, #5
 8008d88:	69fb      	ldr	r3, [r7, #28]
 8008d8a:	4413      	add	r3, r2
 8008d8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	69ba      	ldr	r2, [r7, #24]
 8008d94:	0151      	lsls	r1, r2, #5
 8008d96:	69fa      	ldr	r2, [r7, #28]
 8008d98:	440a      	add	r2, r1
 8008d9a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008d9e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008da2:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	3301      	adds	r3, #1
 8008da8:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008db0:	d82e      	bhi.n	8008e10 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008db2:	69bb      	ldr	r3, [r7, #24]
 8008db4:	015a      	lsls	r2, r3, #5
 8008db6:	69fb      	ldr	r3, [r7, #28]
 8008db8:	4413      	add	r3, r2
 8008dba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008dc4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008dc8:	d0ec      	beq.n	8008da4 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008dca:	e081      	b.n	8008ed0 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008dcc:	69bb      	ldr	r3, [r7, #24]
 8008dce:	015a      	lsls	r2, r3, #5
 8008dd0:	69fb      	ldr	r3, [r7, #28]
 8008dd2:	4413      	add	r3, r2
 8008dd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	69ba      	ldr	r2, [r7, #24]
 8008ddc:	0151      	lsls	r1, r2, #5
 8008dde:	69fa      	ldr	r2, [r7, #28]
 8008de0:	440a      	add	r2, r1
 8008de2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008de6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008dea:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008dec:	e070      	b.n	8008ed0 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008dee:	69bb      	ldr	r3, [r7, #24]
 8008df0:	015a      	lsls	r2, r3, #5
 8008df2:	69fb      	ldr	r3, [r7, #28]
 8008df4:	4413      	add	r3, r2
 8008df6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	69ba      	ldr	r2, [r7, #24]
 8008dfe:	0151      	lsls	r1, r2, #5
 8008e00:	69fa      	ldr	r2, [r7, #28]
 8008e02:	440a      	add	r2, r1
 8008e04:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008e08:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008e0c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008e0e:	e05f      	b.n	8008ed0 <USB_HC_Halt+0x232>
            break;
 8008e10:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008e12:	e05d      	b.n	8008ed0 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008e14:	69bb      	ldr	r3, [r7, #24]
 8008e16:	015a      	lsls	r2, r3, #5
 8008e18:	69fb      	ldr	r3, [r7, #28]
 8008e1a:	4413      	add	r3, r2
 8008e1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	69ba      	ldr	r2, [r7, #24]
 8008e24:	0151      	lsls	r1, r2, #5
 8008e26:	69fa      	ldr	r2, [r7, #28]
 8008e28:	440a      	add	r2, r1
 8008e2a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008e2e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008e32:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008e34:	69fb      	ldr	r3, [r7, #28]
 8008e36:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008e3a:	691b      	ldr	r3, [r3, #16]
 8008e3c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d133      	bne.n	8008eac <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008e44:	69bb      	ldr	r3, [r7, #24]
 8008e46:	015a      	lsls	r2, r3, #5
 8008e48:	69fb      	ldr	r3, [r7, #28]
 8008e4a:	4413      	add	r3, r2
 8008e4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	69ba      	ldr	r2, [r7, #24]
 8008e54:	0151      	lsls	r1, r2, #5
 8008e56:	69fa      	ldr	r2, [r7, #28]
 8008e58:	440a      	add	r2, r1
 8008e5a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008e5e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008e62:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008e64:	69bb      	ldr	r3, [r7, #24]
 8008e66:	015a      	lsls	r2, r3, #5
 8008e68:	69fb      	ldr	r3, [r7, #28]
 8008e6a:	4413      	add	r3, r2
 8008e6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	69ba      	ldr	r2, [r7, #24]
 8008e74:	0151      	lsls	r1, r2, #5
 8008e76:	69fa      	ldr	r2, [r7, #28]
 8008e78:	440a      	add	r2, r1
 8008e7a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008e7e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008e82:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	3301      	adds	r3, #1
 8008e88:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008e90:	d81d      	bhi.n	8008ece <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008e92:	69bb      	ldr	r3, [r7, #24]
 8008e94:	015a      	lsls	r2, r3, #5
 8008e96:	69fb      	ldr	r3, [r7, #28]
 8008e98:	4413      	add	r3, r2
 8008e9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008ea4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008ea8:	d0ec      	beq.n	8008e84 <USB_HC_Halt+0x1e6>
 8008eaa:	e011      	b.n	8008ed0 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008eac:	69bb      	ldr	r3, [r7, #24]
 8008eae:	015a      	lsls	r2, r3, #5
 8008eb0:	69fb      	ldr	r3, [r7, #28]
 8008eb2:	4413      	add	r3, r2
 8008eb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	69ba      	ldr	r2, [r7, #24]
 8008ebc:	0151      	lsls	r1, r2, #5
 8008ebe:	69fa      	ldr	r2, [r7, #28]
 8008ec0:	440a      	add	r2, r1
 8008ec2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008ec6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008eca:	6013      	str	r3, [r2, #0]
 8008ecc:	e000      	b.n	8008ed0 <USB_HC_Halt+0x232>
          break;
 8008ece:	bf00      	nop
    }
  }

  return HAL_OK;
 8008ed0:	2300      	movs	r3, #0
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3724      	adds	r7, #36	@ 0x24
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008edc:	4770      	bx	lr
	...

08008ee0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b087      	sub	sp, #28
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	460b      	mov	r3, r1
 8008eea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008ef0:	78fb      	ldrb	r3, [r7, #3]
 8008ef2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	04da      	lsls	r2, r3, #19
 8008efc:	4b15      	ldr	r3, [pc, #84]	@ (8008f54 <USB_DoPing+0x74>)
 8008efe:	4013      	ands	r3, r2
 8008f00:	693a      	ldr	r2, [r7, #16]
 8008f02:	0151      	lsls	r1, r2, #5
 8008f04:	697a      	ldr	r2, [r7, #20]
 8008f06:	440a      	add	r2, r1
 8008f08:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008f0c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008f10:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	015a      	lsls	r2, r3, #5
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	4413      	add	r3, r2
 8008f1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008f28:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008f30:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	015a      	lsls	r2, r3, #5
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	4413      	add	r3, r2
 8008f3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f3e:	461a      	mov	r2, r3
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008f44:	2300      	movs	r3, #0
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	371c      	adds	r7, #28
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f50:	4770      	bx	lr
 8008f52:	bf00      	nop
 8008f54:	1ff80000 	.word	0x1ff80000

08008f58 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b088      	sub	sp, #32
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008f60:	2300      	movs	r3, #0
 8008f62:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f7fe ff86 	bl	8007e7e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008f72:	2110      	movs	r1, #16
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f7fe ffdf 	bl	8007f38 <USB_FlushTxFifo>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d001      	beq.n	8008f84 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008f80:	2301      	movs	r3, #1
 8008f82:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f7ff f809 	bl	8007f9c <USB_FlushRxFifo>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d001      	beq.n	8008f94 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008f90:	2301      	movs	r3, #1
 8008f92:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008f94:	2300      	movs	r3, #0
 8008f96:	61bb      	str	r3, [r7, #24]
 8008f98:	e01f      	b.n	8008fda <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008f9a:	69bb      	ldr	r3, [r7, #24]
 8008f9c:	015a      	lsls	r2, r3, #5
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	4413      	add	r3, r2
 8008fa2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008fb0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008fb8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008fba:	693b      	ldr	r3, [r7, #16]
 8008fbc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008fc0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008fc2:	69bb      	ldr	r3, [r7, #24]
 8008fc4:	015a      	lsls	r2, r3, #5
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	4413      	add	r3, r2
 8008fca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008fce:	461a      	mov	r2, r3
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008fd4:	69bb      	ldr	r3, [r7, #24]
 8008fd6:	3301      	adds	r3, #1
 8008fd8:	61bb      	str	r3, [r7, #24]
 8008fda:	69bb      	ldr	r3, [r7, #24]
 8008fdc:	2b0f      	cmp	r3, #15
 8008fde:	d9dc      	bls.n	8008f9a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	61bb      	str	r3, [r7, #24]
 8008fe4:	e034      	b.n	8009050 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008fe6:	69bb      	ldr	r3, [r7, #24]
 8008fe8:	015a      	lsls	r2, r3, #5
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	4413      	add	r3, r2
 8008fee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008ffc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009004:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009006:	693b      	ldr	r3, [r7, #16]
 8009008:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800900c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800900e:	69bb      	ldr	r3, [r7, #24]
 8009010:	015a      	lsls	r2, r3, #5
 8009012:	697b      	ldr	r3, [r7, #20]
 8009014:	4413      	add	r3, r2
 8009016:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800901a:	461a      	mov	r2, r3
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	3301      	adds	r3, #1
 8009024:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800902c:	d80c      	bhi.n	8009048 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800902e:	69bb      	ldr	r3, [r7, #24]
 8009030:	015a      	lsls	r2, r3, #5
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	4413      	add	r3, r2
 8009036:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009040:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009044:	d0ec      	beq.n	8009020 <USB_StopHost+0xc8>
 8009046:	e000      	b.n	800904a <USB_StopHost+0xf2>
        break;
 8009048:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800904a:	69bb      	ldr	r3, [r7, #24]
 800904c:	3301      	adds	r3, #1
 800904e:	61bb      	str	r3, [r7, #24]
 8009050:	69bb      	ldr	r3, [r7, #24]
 8009052:	2b0f      	cmp	r3, #15
 8009054:	d9c7      	bls.n	8008fe6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800905c:	461a      	mov	r2, r3
 800905e:	f04f 33ff 	mov.w	r3, #4294967295
 8009062:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f04f 32ff 	mov.w	r2, #4294967295
 800906a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f7fe fef5 	bl	8007e5c <USB_EnableGlobalInt>

  return ret;
 8009072:	7ffb      	ldrb	r3, [r7, #31]
}
 8009074:	4618      	mov	r0, r3
 8009076:	3720      	adds	r7, #32
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800907c:	b590      	push	{r4, r7, lr}
 800907e:	b089      	sub	sp, #36	@ 0x24
 8009080:	af04      	add	r7, sp, #16
 8009082:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8009084:	2301      	movs	r3, #1
 8009086:	2202      	movs	r2, #2
 8009088:	2102      	movs	r1, #2
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f000 fc83 	bl	8009996 <USBH_FindInterface>
 8009090:	4603      	mov	r3, r0
 8009092:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009094:	7bfb      	ldrb	r3, [r7, #15]
 8009096:	2bff      	cmp	r3, #255	@ 0xff
 8009098:	d002      	beq.n	80090a0 <USBH_CDC_InterfaceInit+0x24>
 800909a:	7bfb      	ldrb	r3, [r7, #15]
 800909c:	2b01      	cmp	r3, #1
 800909e:	d901      	bls.n	80090a4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80090a0:	2302      	movs	r3, #2
 80090a2:	e13d      	b.n	8009320 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80090a4:	7bfb      	ldrb	r3, [r7, #15]
 80090a6:	4619      	mov	r1, r3
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f000 fc58 	bl	800995e <USBH_SelectInterface>
 80090ae:	4603      	mov	r3, r0
 80090b0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80090b2:	7bbb      	ldrb	r3, [r7, #14]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d001      	beq.n	80090bc <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80090b8:	2302      	movs	r3, #2
 80090ba:	e131      	b.n	8009320 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 80090c2:	2050      	movs	r0, #80	@ 0x50
 80090c4:	f002 fb6a 	bl	800b79c <malloc>
 80090c8:	4603      	mov	r3, r0
 80090ca:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80090d2:	69db      	ldr	r3, [r3, #28]
 80090d4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d101      	bne.n	80090e0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80090dc:	2302      	movs	r3, #2
 80090de:	e11f      	b.n	8009320 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80090e0:	2250      	movs	r2, #80	@ 0x50
 80090e2:	2100      	movs	r1, #0
 80090e4:	68b8      	ldr	r0, [r7, #8]
 80090e6:	f002 fc39 	bl	800b95c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80090ea:	7bfb      	ldrb	r3, [r7, #15]
 80090ec:	687a      	ldr	r2, [r7, #4]
 80090ee:	211a      	movs	r1, #26
 80090f0:	fb01 f303 	mul.w	r3, r1, r3
 80090f4:	4413      	add	r3, r2
 80090f6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80090fa:	781b      	ldrb	r3, [r3, #0]
 80090fc:	b25b      	sxtb	r3, r3
 80090fe:	2b00      	cmp	r3, #0
 8009100:	da15      	bge.n	800912e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009102:	7bfb      	ldrb	r3, [r7, #15]
 8009104:	687a      	ldr	r2, [r7, #4]
 8009106:	211a      	movs	r1, #26
 8009108:	fb01 f303 	mul.w	r3, r1, r3
 800910c:	4413      	add	r3, r2
 800910e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009112:	781a      	ldrb	r2, [r3, #0]
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009118:	7bfb      	ldrb	r3, [r7, #15]
 800911a:	687a      	ldr	r2, [r7, #4]
 800911c:	211a      	movs	r1, #26
 800911e:	fb01 f303 	mul.w	r3, r1, r3
 8009122:	4413      	add	r3, r2
 8009124:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009128:	881a      	ldrh	r2, [r3, #0]
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	785b      	ldrb	r3, [r3, #1]
 8009132:	4619      	mov	r1, r3
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f001 ffc4 	bl	800b0c2 <USBH_AllocPipe>
 800913a:	4603      	mov	r3, r0
 800913c:	461a      	mov	r2, r3
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	7819      	ldrb	r1, [r3, #0]
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	7858      	ldrb	r0, [r3, #1]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009156:	68ba      	ldr	r2, [r7, #8]
 8009158:	8952      	ldrh	r2, [r2, #10]
 800915a:	9202      	str	r2, [sp, #8]
 800915c:	2203      	movs	r2, #3
 800915e:	9201      	str	r2, [sp, #4]
 8009160:	9300      	str	r3, [sp, #0]
 8009162:	4623      	mov	r3, r4
 8009164:	4602      	mov	r2, r0
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f001 ff7c 	bl	800b064 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	781b      	ldrb	r3, [r3, #0]
 8009170:	2200      	movs	r2, #0
 8009172:	4619      	mov	r1, r3
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f002 fa8b 	bl	800b690 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800917a:	2300      	movs	r3, #0
 800917c:	2200      	movs	r2, #0
 800917e:	210a      	movs	r1, #10
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f000 fc08 	bl	8009996 <USBH_FindInterface>
 8009186:	4603      	mov	r3, r0
 8009188:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800918a:	7bfb      	ldrb	r3, [r7, #15]
 800918c:	2bff      	cmp	r3, #255	@ 0xff
 800918e:	d002      	beq.n	8009196 <USBH_CDC_InterfaceInit+0x11a>
 8009190:	7bfb      	ldrb	r3, [r7, #15]
 8009192:	2b01      	cmp	r3, #1
 8009194:	d901      	bls.n	800919a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009196:	2302      	movs	r3, #2
 8009198:	e0c2      	b.n	8009320 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800919a:	7bfb      	ldrb	r3, [r7, #15]
 800919c:	687a      	ldr	r2, [r7, #4]
 800919e:	211a      	movs	r1, #26
 80091a0:	fb01 f303 	mul.w	r3, r1, r3
 80091a4:	4413      	add	r3, r2
 80091a6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80091aa:	781b      	ldrb	r3, [r3, #0]
 80091ac:	b25b      	sxtb	r3, r3
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	da16      	bge.n	80091e0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80091b2:	7bfb      	ldrb	r3, [r7, #15]
 80091b4:	687a      	ldr	r2, [r7, #4]
 80091b6:	211a      	movs	r1, #26
 80091b8:	fb01 f303 	mul.w	r3, r1, r3
 80091bc:	4413      	add	r3, r2
 80091be:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80091c2:	781a      	ldrb	r2, [r3, #0]
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80091c8:	7bfb      	ldrb	r3, [r7, #15]
 80091ca:	687a      	ldr	r2, [r7, #4]
 80091cc:	211a      	movs	r1, #26
 80091ce:	fb01 f303 	mul.w	r3, r1, r3
 80091d2:	4413      	add	r3, r2
 80091d4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80091d8:	881a      	ldrh	r2, [r3, #0]
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	835a      	strh	r2, [r3, #26]
 80091de:	e015      	b.n	800920c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80091e0:	7bfb      	ldrb	r3, [r7, #15]
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	211a      	movs	r1, #26
 80091e6:	fb01 f303 	mul.w	r3, r1, r3
 80091ea:	4413      	add	r3, r2
 80091ec:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80091f0:	781a      	ldrb	r2, [r3, #0]
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80091f6:	7bfb      	ldrb	r3, [r7, #15]
 80091f8:	687a      	ldr	r2, [r7, #4]
 80091fa:	211a      	movs	r1, #26
 80091fc:	fb01 f303 	mul.w	r3, r1, r3
 8009200:	4413      	add	r3, r2
 8009202:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009206:	881a      	ldrh	r2, [r3, #0]
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800920c:	7bfb      	ldrb	r3, [r7, #15]
 800920e:	687a      	ldr	r2, [r7, #4]
 8009210:	211a      	movs	r1, #26
 8009212:	fb01 f303 	mul.w	r3, r1, r3
 8009216:	4413      	add	r3, r2
 8009218:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800921c:	781b      	ldrb	r3, [r3, #0]
 800921e:	b25b      	sxtb	r3, r3
 8009220:	2b00      	cmp	r3, #0
 8009222:	da16      	bge.n	8009252 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009224:	7bfb      	ldrb	r3, [r7, #15]
 8009226:	687a      	ldr	r2, [r7, #4]
 8009228:	211a      	movs	r1, #26
 800922a:	fb01 f303 	mul.w	r3, r1, r3
 800922e:	4413      	add	r3, r2
 8009230:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009234:	781a      	ldrb	r2, [r3, #0]
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800923a:	7bfb      	ldrb	r3, [r7, #15]
 800923c:	687a      	ldr	r2, [r7, #4]
 800923e:	211a      	movs	r1, #26
 8009240:	fb01 f303 	mul.w	r3, r1, r3
 8009244:	4413      	add	r3, r2
 8009246:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800924a:	881a      	ldrh	r2, [r3, #0]
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	835a      	strh	r2, [r3, #26]
 8009250:	e015      	b.n	800927e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009252:	7bfb      	ldrb	r3, [r7, #15]
 8009254:	687a      	ldr	r2, [r7, #4]
 8009256:	211a      	movs	r1, #26
 8009258:	fb01 f303 	mul.w	r3, r1, r3
 800925c:	4413      	add	r3, r2
 800925e:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009262:	781a      	ldrb	r2, [r3, #0]
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009268:	7bfb      	ldrb	r3, [r7, #15]
 800926a:	687a      	ldr	r2, [r7, #4]
 800926c:	211a      	movs	r1, #26
 800926e:	fb01 f303 	mul.w	r3, r1, r3
 8009272:	4413      	add	r3, r2
 8009274:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8009278:	881a      	ldrh	r2, [r3, #0]
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	7b9b      	ldrb	r3, [r3, #14]
 8009282:	4619      	mov	r1, r3
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f001 ff1c 	bl	800b0c2 <USBH_AllocPipe>
 800928a:	4603      	mov	r3, r0
 800928c:	461a      	mov	r2, r3
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	7bdb      	ldrb	r3, [r3, #15]
 8009296:	4619      	mov	r1, r3
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f001 ff12 	bl	800b0c2 <USBH_AllocPipe>
 800929e:	4603      	mov	r3, r0
 80092a0:	461a      	mov	r2, r3
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	7b59      	ldrb	r1, [r3, #13]
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	7b98      	ldrb	r0, [r3, #14]
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80092ba:	68ba      	ldr	r2, [r7, #8]
 80092bc:	8b12      	ldrh	r2, [r2, #24]
 80092be:	9202      	str	r2, [sp, #8]
 80092c0:	2202      	movs	r2, #2
 80092c2:	9201      	str	r2, [sp, #4]
 80092c4:	9300      	str	r3, [sp, #0]
 80092c6:	4623      	mov	r3, r4
 80092c8:	4602      	mov	r2, r0
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f001 feca 	bl	800b064 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	7b19      	ldrb	r1, [r3, #12]
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	7bd8      	ldrb	r0, [r3, #15]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80092e4:	68ba      	ldr	r2, [r7, #8]
 80092e6:	8b52      	ldrh	r2, [r2, #26]
 80092e8:	9202      	str	r2, [sp, #8]
 80092ea:	2202      	movs	r2, #2
 80092ec:	9201      	str	r2, [sp, #4]
 80092ee:	9300      	str	r3, [sp, #0]
 80092f0:	4623      	mov	r3, r4
 80092f2:	4602      	mov	r2, r0
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f001 feb5 	bl	800b064 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	2200      	movs	r2, #0
 80092fe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	7b5b      	ldrb	r3, [r3, #13]
 8009306:	2200      	movs	r2, #0
 8009308:	4619      	mov	r1, r3
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f002 f9c0 	bl	800b690 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	7b1b      	ldrb	r3, [r3, #12]
 8009314:	2200      	movs	r2, #0
 8009316:	4619      	mov	r1, r3
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f002 f9b9 	bl	800b690 <USBH_LL_SetToggle>

  return USBH_OK;
 800931e:	2300      	movs	r3, #0
}
 8009320:	4618      	mov	r0, r3
 8009322:	3714      	adds	r7, #20
 8009324:	46bd      	mov	sp, r7
 8009326:	bd90      	pop	{r4, r7, pc}

08009328 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b084      	sub	sp, #16
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009336:	69db      	ldr	r3, [r3, #28]
 8009338:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	781b      	ldrb	r3, [r3, #0]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d00e      	beq.n	8009360 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	781b      	ldrb	r3, [r3, #0]
 8009346:	4619      	mov	r1, r3
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f001 feaa 	bl	800b0a2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	781b      	ldrb	r3, [r3, #0]
 8009352:	4619      	mov	r1, r3
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f001 fed5 	bl	800b104 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2200      	movs	r2, #0
 800935e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	7b1b      	ldrb	r3, [r3, #12]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d00e      	beq.n	8009386 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	7b1b      	ldrb	r3, [r3, #12]
 800936c:	4619      	mov	r1, r3
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f001 fe97 	bl	800b0a2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	7b1b      	ldrb	r3, [r3, #12]
 8009378:	4619      	mov	r1, r3
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f001 fec2 	bl	800b104 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2200      	movs	r2, #0
 8009384:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	7b5b      	ldrb	r3, [r3, #13]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d00e      	beq.n	80093ac <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	7b5b      	ldrb	r3, [r3, #13]
 8009392:	4619      	mov	r1, r3
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f001 fe84 	bl	800b0a2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	7b5b      	ldrb	r3, [r3, #13]
 800939e:	4619      	mov	r1, r3
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f001 feaf 	bl	800b104 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	2200      	movs	r2, #0
 80093aa:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80093b2:	69db      	ldr	r3, [r3, #28]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d00b      	beq.n	80093d0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80093be:	69db      	ldr	r3, [r3, #28]
 80093c0:	4618      	mov	r0, r3
 80093c2:	f002 f9f3 	bl	800b7ac <free>
    phost->pActiveClass->pData = 0U;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80093cc:	2200      	movs	r2, #0
 80093ce:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80093d0:	2300      	movs	r3, #0
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3710      	adds	r7, #16
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}

080093da <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80093da:	b580      	push	{r7, lr}
 80093dc:	b084      	sub	sp, #16
 80093de:	af00      	add	r7, sp, #0
 80093e0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80093e8:	69db      	ldr	r3, [r3, #28]
 80093ea:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	3340      	adds	r3, #64	@ 0x40
 80093f0:	4619      	mov	r1, r3
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f000 f8b1 	bl	800955a <GetLineCoding>
 80093f8:	4603      	mov	r3, r0
 80093fa:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80093fc:	7afb      	ldrb	r3, [r7, #11]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d105      	bne.n	800940e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009408:	2102      	movs	r1, #2
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800940e:	7afb      	ldrb	r3, [r7, #11]
}
 8009410:	4618      	mov	r0, r3
 8009412:	3710      	adds	r7, #16
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}

08009418 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b084      	sub	sp, #16
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009420:	2301      	movs	r3, #1
 8009422:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009424:	2300      	movs	r3, #0
 8009426:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800942e:	69db      	ldr	r3, [r3, #28]
 8009430:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8009438:	2b04      	cmp	r3, #4
 800943a:	d877      	bhi.n	800952c <USBH_CDC_Process+0x114>
 800943c:	a201      	add	r2, pc, #4	@ (adr r2, 8009444 <USBH_CDC_Process+0x2c>)
 800943e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009442:	bf00      	nop
 8009444:	08009459 	.word	0x08009459
 8009448:	0800945f 	.word	0x0800945f
 800944c:	0800948f 	.word	0x0800948f
 8009450:	08009503 	.word	0x08009503
 8009454:	08009511 	.word	0x08009511
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009458:	2300      	movs	r3, #0
 800945a:	73fb      	strb	r3, [r7, #15]
      break;
 800945c:	e06d      	b.n	800953a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009462:	4619      	mov	r1, r3
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f000 f897 	bl	8009598 <SetLineCoding>
 800946a:	4603      	mov	r3, r0
 800946c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800946e:	7bbb      	ldrb	r3, [r7, #14]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d104      	bne.n	800947e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	2202      	movs	r2, #2
 8009478:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800947c:	e058      	b.n	8009530 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800947e:	7bbb      	ldrb	r3, [r7, #14]
 8009480:	2b01      	cmp	r3, #1
 8009482:	d055      	beq.n	8009530 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	2204      	movs	r2, #4
 8009488:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800948c:	e050      	b.n	8009530 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	3340      	adds	r3, #64	@ 0x40
 8009492:	4619      	mov	r1, r3
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f000 f860 	bl	800955a <GetLineCoding>
 800949a:	4603      	mov	r3, r0
 800949c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800949e:	7bbb      	ldrb	r3, [r7, #14]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d126      	bne.n	80094f2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	2200      	movs	r2, #0
 80094a8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80094b6:	791b      	ldrb	r3, [r3, #4]
 80094b8:	429a      	cmp	r2, r3
 80094ba:	d13b      	bne.n	8009534 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80094c6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80094c8:	429a      	cmp	r2, r3
 80094ca:	d133      	bne.n	8009534 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80094d6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80094d8:	429a      	cmp	r2, r3
 80094da:	d12b      	bne.n	8009534 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80094e4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80094e6:	429a      	cmp	r2, r3
 80094e8:	d124      	bne.n	8009534 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f000 f958 	bl	80097a0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80094f0:	e020      	b.n	8009534 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80094f2:	7bbb      	ldrb	r3, [r7, #14]
 80094f4:	2b01      	cmp	r3, #1
 80094f6:	d01d      	beq.n	8009534 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	2204      	movs	r2, #4
 80094fc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8009500:	e018      	b.n	8009534 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f000 f867 	bl	80095d6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f000 f8da 	bl	80096c2 <CDC_ProcessReception>
      break;
 800950e:	e014      	b.n	800953a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8009510:	2100      	movs	r1, #0
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f001 f81e 	bl	800a554 <USBH_ClrFeature>
 8009518:	4603      	mov	r3, r0
 800951a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800951c:	7bbb      	ldrb	r3, [r7, #14]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d10a      	bne.n	8009538 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	2200      	movs	r2, #0
 8009526:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800952a:	e005      	b.n	8009538 <USBH_CDC_Process+0x120>

    default:
      break;
 800952c:	bf00      	nop
 800952e:	e004      	b.n	800953a <USBH_CDC_Process+0x122>
      break;
 8009530:	bf00      	nop
 8009532:	e002      	b.n	800953a <USBH_CDC_Process+0x122>
      break;
 8009534:	bf00      	nop
 8009536:	e000      	b.n	800953a <USBH_CDC_Process+0x122>
      break;
 8009538:	bf00      	nop

  }

  return status;
 800953a:	7bfb      	ldrb	r3, [r7, #15]
}
 800953c:	4618      	mov	r0, r3
 800953e:	3710      	adds	r7, #16
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}

08009544 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009544:	b480      	push	{r7}
 8009546:	b083      	sub	sp, #12
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800954c:	2300      	movs	r3, #0
}
 800954e:	4618      	mov	r0, r3
 8009550:	370c      	adds	r7, #12
 8009552:	46bd      	mov	sp, r7
 8009554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009558:	4770      	bx	lr

0800955a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800955a:	b580      	push	{r7, lr}
 800955c:	b082      	sub	sp, #8
 800955e:	af00      	add	r7, sp, #0
 8009560:	6078      	str	r0, [r7, #4]
 8009562:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	22a1      	movs	r2, #161	@ 0xa1
 8009568:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2221      	movs	r2, #33	@ 0x21
 800956e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2200      	movs	r2, #0
 8009574:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2200      	movs	r2, #0
 800957a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2207      	movs	r2, #7
 8009580:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	2207      	movs	r2, #7
 8009586:	4619      	mov	r1, r3
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f001 fb17 	bl	800abbc <USBH_CtlReq>
 800958e:	4603      	mov	r3, r0
}
 8009590:	4618      	mov	r0, r3
 8009592:	3708      	adds	r7, #8
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}

08009598 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b082      	sub	sp, #8
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
 80095a0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2221      	movs	r2, #33	@ 0x21
 80095a6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2220      	movs	r2, #32
 80095ac:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2200      	movs	r2, #0
 80095b2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2200      	movs	r2, #0
 80095b8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2207      	movs	r2, #7
 80095be:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	2207      	movs	r2, #7
 80095c4:	4619      	mov	r1, r3
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f001 faf8 	bl	800abbc <USBH_CtlReq>
 80095cc:	4603      	mov	r3, r0
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3708      	adds	r7, #8
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}

080095d6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80095d6:	b580      	push	{r7, lr}
 80095d8:	b086      	sub	sp, #24
 80095da:	af02      	add	r7, sp, #8
 80095dc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80095e4:	69db      	ldr	r3, [r3, #28]
 80095e6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80095e8:	2300      	movs	r3, #0
 80095ea:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80095f2:	2b01      	cmp	r3, #1
 80095f4:	d002      	beq.n	80095fc <CDC_ProcessTransmission+0x26>
 80095f6:	2b02      	cmp	r3, #2
 80095f8:	d023      	beq.n	8009642 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80095fa:	e05e      	b.n	80096ba <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009600:	68fa      	ldr	r2, [r7, #12]
 8009602:	8b12      	ldrh	r2, [r2, #24]
 8009604:	4293      	cmp	r3, r2
 8009606:	d90b      	bls.n	8009620 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	69d9      	ldr	r1, [r3, #28]
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	8b1a      	ldrh	r2, [r3, #24]
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	7b5b      	ldrb	r3, [r3, #13]
 8009614:	2001      	movs	r0, #1
 8009616:	9000      	str	r0, [sp, #0]
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f001 fce0 	bl	800afde <USBH_BulkSendData>
 800961e:	e00b      	b.n	8009638 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8009628:	b29a      	uxth	r2, r3
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	7b5b      	ldrb	r3, [r3, #13]
 800962e:	2001      	movs	r0, #1
 8009630:	9000      	str	r0, [sp, #0]
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f001 fcd3 	bl	800afde <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	2202      	movs	r2, #2
 800963c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009640:	e03b      	b.n	80096ba <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	7b5b      	ldrb	r3, [r3, #13]
 8009646:	4619      	mov	r1, r3
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f001 fff7 	bl	800b63c <USBH_LL_GetURBState>
 800964e:	4603      	mov	r3, r0
 8009650:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8009652:	7afb      	ldrb	r3, [r7, #11]
 8009654:	2b01      	cmp	r3, #1
 8009656:	d128      	bne.n	80096aa <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800965c:	68fa      	ldr	r2, [r7, #12]
 800965e:	8b12      	ldrh	r2, [r2, #24]
 8009660:	4293      	cmp	r3, r2
 8009662:	d90e      	bls.n	8009682 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009668:	68fa      	ldr	r2, [r7, #12]
 800966a:	8b12      	ldrh	r2, [r2, #24]
 800966c:	1a9a      	subs	r2, r3, r2
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	69db      	ldr	r3, [r3, #28]
 8009676:	68fa      	ldr	r2, [r7, #12]
 8009678:	8b12      	ldrh	r2, [r2, #24]
 800967a:	441a      	add	r2, r3
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	61da      	str	r2, [r3, #28]
 8009680:	e002      	b.n	8009688 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	2200      	movs	r2, #0
 8009686:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800968c:	2b00      	cmp	r3, #0
 800968e:	d004      	beq.n	800969a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	2201      	movs	r2, #1
 8009694:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009698:	e00e      	b.n	80096b8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	2200      	movs	r2, #0
 800969e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f000 f868 	bl	8009778 <USBH_CDC_TransmitCallback>
      break;
 80096a8:	e006      	b.n	80096b8 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80096aa:	7afb      	ldrb	r3, [r7, #11]
 80096ac:	2b02      	cmp	r3, #2
 80096ae:	d103      	bne.n	80096b8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	2201      	movs	r2, #1
 80096b4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80096b8:	bf00      	nop
  }
}
 80096ba:	bf00      	nop
 80096bc:	3710      	adds	r7, #16
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}

080096c2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80096c2:	b580      	push	{r7, lr}
 80096c4:	b086      	sub	sp, #24
 80096c6:	af00      	add	r7, sp, #0
 80096c8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80096d0:	69db      	ldr	r3, [r3, #28]
 80096d2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80096d4:	2300      	movs	r3, #0
 80096d6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80096d8:	697b      	ldr	r3, [r7, #20]
 80096da:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80096de:	2b03      	cmp	r3, #3
 80096e0:	d002      	beq.n	80096e8 <CDC_ProcessReception+0x26>
 80096e2:	2b04      	cmp	r3, #4
 80096e4:	d00e      	beq.n	8009704 <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 80096e6:	e043      	b.n	8009770 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	6a19      	ldr	r1, [r3, #32]
 80096ec:	697b      	ldr	r3, [r7, #20]
 80096ee:	8b5a      	ldrh	r2, [r3, #26]
 80096f0:	697b      	ldr	r3, [r7, #20]
 80096f2:	7b1b      	ldrb	r3, [r3, #12]
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f001 fc97 	bl	800b028 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	2204      	movs	r2, #4
 80096fe:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8009702:	e035      	b.n	8009770 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	7b1b      	ldrb	r3, [r3, #12]
 8009708:	4619      	mov	r1, r3
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f001 ff96 	bl	800b63c <USBH_LL_GetURBState>
 8009710:	4603      	mov	r3, r0
 8009712:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8009714:	7cfb      	ldrb	r3, [r7, #19]
 8009716:	2b01      	cmp	r3, #1
 8009718:	d129      	bne.n	800976e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	7b1b      	ldrb	r3, [r3, #12]
 800971e:	4619      	mov	r1, r3
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f001 fef9 	bl	800b518 <USBH_LL_GetLastXferSize>
 8009726:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800972c:	68fa      	ldr	r2, [r7, #12]
 800972e:	429a      	cmp	r2, r3
 8009730:	d016      	beq.n	8009760 <CDC_ProcessReception+0x9e>
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	8b5b      	ldrh	r3, [r3, #26]
 8009736:	461a      	mov	r2, r3
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	4293      	cmp	r3, r2
 800973c:	d110      	bne.n	8009760 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800973e:	697b      	ldr	r3, [r7, #20]
 8009740:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	1ad2      	subs	r2, r2, r3
 8009746:	697b      	ldr	r3, [r7, #20]
 8009748:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	6a1a      	ldr	r2, [r3, #32]
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	441a      	add	r2, r3
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	2203      	movs	r2, #3
 800975a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800975e:	e006      	b.n	800976e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	2200      	movs	r2, #0
 8009764:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f000 f80f 	bl	800978c <USBH_CDC_ReceiveCallback>
      break;
 800976e:	bf00      	nop
  }
}
 8009770:	bf00      	nop
 8009772:	3718      	adds	r7, #24
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}

08009778 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009778:	b480      	push	{r7}
 800977a:	b083      	sub	sp, #12
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009780:	bf00      	nop
 8009782:	370c      	adds	r7, #12
 8009784:	46bd      	mov	sp, r7
 8009786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978a:	4770      	bx	lr

0800978c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800978c:	b480      	push	{r7}
 800978e:	b083      	sub	sp, #12
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009794:	bf00      	nop
 8009796:	370c      	adds	r7, #12
 8009798:	46bd      	mov	sp, r7
 800979a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979e:	4770      	bx	lr

080097a0 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80097a0:	b480      	push	{r7}
 80097a2:	b083      	sub	sp, #12
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80097a8:	bf00      	nop
 80097aa:	370c      	adds	r7, #12
 80097ac:	46bd      	mov	sp, r7
 80097ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b2:	4770      	bx	lr

080097b4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b084      	sub	sp, #16
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	60f8      	str	r0, [r7, #12]
 80097bc:	60b9      	str	r1, [r7, #8]
 80097be:	4613      	mov	r3, r2
 80097c0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d101      	bne.n	80097cc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80097c8:	2302      	movs	r3, #2
 80097ca:	e029      	b.n	8009820 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	79fa      	ldrb	r2, [r7, #7]
 80097d0:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	2200      	movs	r2, #0
 80097d8:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	2200      	movs	r2, #0
 80097e0:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80097e4:	68f8      	ldr	r0, [r7, #12]
 80097e6:	f000 f81f 	bl	8009828 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	2200      	movs	r2, #0
 80097ee:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	2200      	movs	r2, #0
 80097f6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	2200      	movs	r2, #0
 80097fe:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	2200      	movs	r2, #0
 8009806:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d003      	beq.n	8009818 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	68ba      	ldr	r2, [r7, #8]
 8009814:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8009818:	68f8      	ldr	r0, [r7, #12]
 800981a:	f001 fdc9 	bl	800b3b0 <USBH_LL_Init>

  return USBH_OK;
 800981e:	2300      	movs	r3, #0
}
 8009820:	4618      	mov	r0, r3
 8009822:	3710      	adds	r7, #16
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}

08009828 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b084      	sub	sp, #16
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009830:	2300      	movs	r3, #0
 8009832:	60fb      	str	r3, [r7, #12]
 8009834:	e009      	b.n	800984a <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 8009836:	687a      	ldr	r2, [r7, #4]
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	33e0      	adds	r3, #224	@ 0xe0
 800983c:	009b      	lsls	r3, r3, #2
 800983e:	4413      	add	r3, r2
 8009840:	2200      	movs	r2, #0
 8009842:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	3301      	adds	r3, #1
 8009848:	60fb      	str	r3, [r7, #12]
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	2b0f      	cmp	r3, #15
 800984e:	d9f2      	bls.n	8009836 <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009850:	2300      	movs	r3, #0
 8009852:	60fb      	str	r3, [r7, #12]
 8009854:	e009      	b.n	800986a <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 8009856:	687a      	ldr	r2, [r7, #4]
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	4413      	add	r3, r2
 800985c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009860:	2200      	movs	r2, #0
 8009862:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	3301      	adds	r3, #1
 8009868:	60fb      	str	r3, [r7, #12]
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009870:	d3f1      	bcc.n	8009856 <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2200      	movs	r2, #0
 8009876:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2200      	movs	r2, #0
 800987c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2201      	movs	r2, #1
 8009882:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2200      	movs	r2, #0
 8009888:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2201      	movs	r2, #1
 8009890:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2240      	movs	r2, #64	@ 0x40
 8009896:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2200      	movs	r2, #0
 800989c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2200      	movs	r2, #0
 80098a2:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2201      	movs	r2, #1
 80098aa:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2200      	movs	r2, #0
 80098b2:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2200      	movs	r2, #0
 80098ba:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	331c      	adds	r3, #28
 80098c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80098c6:	2100      	movs	r1, #0
 80098c8:	4618      	mov	r0, r3
 80098ca:	f002 f847 	bl	800b95c <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80098d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80098d8:	2100      	movs	r1, #0
 80098da:	4618      	mov	r0, r3
 80098dc:	f002 f83e 	bl	800b95c <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80098e6:	2212      	movs	r2, #18
 80098e8:	2100      	movs	r1, #0
 80098ea:	4618      	mov	r0, r3
 80098ec:	f002 f836 	bl	800b95c <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80098f6:	223e      	movs	r2, #62	@ 0x3e
 80098f8:	2100      	movs	r1, #0
 80098fa:	4618      	mov	r0, r3
 80098fc:	f002 f82e 	bl	800b95c <memset>

  return USBH_OK;
 8009900:	2300      	movs	r3, #0
}
 8009902:	4618      	mov	r0, r3
 8009904:	3710      	adds	r7, #16
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}

0800990a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800990a:	b480      	push	{r7}
 800990c:	b085      	sub	sp, #20
 800990e:	af00      	add	r7, sp, #0
 8009910:	6078      	str	r0, [r7, #4]
 8009912:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009914:	2300      	movs	r3, #0
 8009916:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d016      	beq.n	800994c <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009924:	2b00      	cmp	r3, #0
 8009926:	d10e      	bne.n	8009946 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800992e:	1c59      	adds	r1, r3, #1
 8009930:	687a      	ldr	r2, [r7, #4]
 8009932:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8009936:	687a      	ldr	r2, [r7, #4]
 8009938:	33de      	adds	r3, #222	@ 0xde
 800993a:	6839      	ldr	r1, [r7, #0]
 800993c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009940:	2300      	movs	r3, #0
 8009942:	73fb      	strb	r3, [r7, #15]
 8009944:	e004      	b.n	8009950 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009946:	2302      	movs	r3, #2
 8009948:	73fb      	strb	r3, [r7, #15]
 800994a:	e001      	b.n	8009950 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800994c:	2302      	movs	r3, #2
 800994e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009950:	7bfb      	ldrb	r3, [r7, #15]
}
 8009952:	4618      	mov	r0, r3
 8009954:	3714      	adds	r7, #20
 8009956:	46bd      	mov	sp, r7
 8009958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995c:	4770      	bx	lr

0800995e <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800995e:	b480      	push	{r7}
 8009960:	b085      	sub	sp, #20
 8009962:	af00      	add	r7, sp, #0
 8009964:	6078      	str	r0, [r7, #4]
 8009966:	460b      	mov	r3, r1
 8009968:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800996a:	2300      	movs	r3, #0
 800996c:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8009974:	78fa      	ldrb	r2, [r7, #3]
 8009976:	429a      	cmp	r2, r3
 8009978:	d204      	bcs.n	8009984 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	78fa      	ldrb	r2, [r7, #3]
 800997e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8009982:	e001      	b.n	8009988 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009984:	2302      	movs	r3, #2
 8009986:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009988:	7bfb      	ldrb	r3, [r7, #15]
}
 800998a:	4618      	mov	r0, r3
 800998c:	3714      	adds	r7, #20
 800998e:	46bd      	mov	sp, r7
 8009990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009994:	4770      	bx	lr

08009996 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009996:	b480      	push	{r7}
 8009998:	b087      	sub	sp, #28
 800999a:	af00      	add	r7, sp, #0
 800999c:	6078      	str	r0, [r7, #4]
 800999e:	4608      	mov	r0, r1
 80099a0:	4611      	mov	r1, r2
 80099a2:	461a      	mov	r2, r3
 80099a4:	4603      	mov	r3, r0
 80099a6:	70fb      	strb	r3, [r7, #3]
 80099a8:	460b      	mov	r3, r1
 80099aa:	70bb      	strb	r3, [r7, #2]
 80099ac:	4613      	mov	r3, r2
 80099ae:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80099b0:	2300      	movs	r3, #0
 80099b2:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80099b4:	2300      	movs	r3, #0
 80099b6:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80099be:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80099c0:	e025      	b.n	8009a0e <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80099c2:	7dfb      	ldrb	r3, [r7, #23]
 80099c4:	221a      	movs	r2, #26
 80099c6:	fb02 f303 	mul.w	r3, r2, r3
 80099ca:	3308      	adds	r3, #8
 80099cc:	68fa      	ldr	r2, [r7, #12]
 80099ce:	4413      	add	r3, r2
 80099d0:	3302      	adds	r3, #2
 80099d2:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	795b      	ldrb	r3, [r3, #5]
 80099d8:	78fa      	ldrb	r2, [r7, #3]
 80099da:	429a      	cmp	r2, r3
 80099dc:	d002      	beq.n	80099e4 <USBH_FindInterface+0x4e>
 80099de:	78fb      	ldrb	r3, [r7, #3]
 80099e0:	2bff      	cmp	r3, #255	@ 0xff
 80099e2:	d111      	bne.n	8009a08 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80099e8:	78ba      	ldrb	r2, [r7, #2]
 80099ea:	429a      	cmp	r2, r3
 80099ec:	d002      	beq.n	80099f4 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80099ee:	78bb      	ldrb	r3, [r7, #2]
 80099f0:	2bff      	cmp	r3, #255	@ 0xff
 80099f2:	d109      	bne.n	8009a08 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80099f8:	787a      	ldrb	r2, [r7, #1]
 80099fa:	429a      	cmp	r2, r3
 80099fc:	d002      	beq.n	8009a04 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80099fe:	787b      	ldrb	r3, [r7, #1]
 8009a00:	2bff      	cmp	r3, #255	@ 0xff
 8009a02:	d101      	bne.n	8009a08 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009a04:	7dfb      	ldrb	r3, [r7, #23]
 8009a06:	e006      	b.n	8009a16 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009a08:	7dfb      	ldrb	r3, [r7, #23]
 8009a0a:	3301      	adds	r3, #1
 8009a0c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009a0e:	7dfb      	ldrb	r3, [r7, #23]
 8009a10:	2b01      	cmp	r3, #1
 8009a12:	d9d6      	bls.n	80099c2 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009a14:	23ff      	movs	r3, #255	@ 0xff
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	371c      	adds	r7, #28
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a20:	4770      	bx	lr

08009a22 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8009a22:	b580      	push	{r7, lr}
 8009a24:	b082      	sub	sp, #8
 8009a26:	af00      	add	r7, sp, #0
 8009a28:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f001 fcfc 	bl	800b428 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8009a30:	2101      	movs	r1, #1
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f001 fe15 	bl	800b662 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009a38:	2300      	movs	r3, #0
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3708      	adds	r7, #8
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}
	...

08009a44 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b088      	sub	sp, #32
 8009a48:	af04      	add	r7, sp, #16
 8009a4a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009a4c:	2302      	movs	r3, #2
 8009a4e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009a50:	2300      	movs	r3, #0
 8009a52:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8009a5a:	b2db      	uxtb	r3, r3
 8009a5c:	2b01      	cmp	r3, #1
 8009a5e:	d102      	bne.n	8009a66 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2203      	movs	r2, #3
 8009a64:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	781b      	ldrb	r3, [r3, #0]
 8009a6a:	b2db      	uxtb	r3, r3
 8009a6c:	2b0b      	cmp	r3, #11
 8009a6e:	f200 81bc 	bhi.w	8009dea <USBH_Process+0x3a6>
 8009a72:	a201      	add	r2, pc, #4	@ (adr r2, 8009a78 <USBH_Process+0x34>)
 8009a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a78:	08009aa9 	.word	0x08009aa9
 8009a7c:	08009adb 	.word	0x08009adb
 8009a80:	08009b45 	.word	0x08009b45
 8009a84:	08009d85 	.word	0x08009d85
 8009a88:	08009deb 	.word	0x08009deb
 8009a8c:	08009be5 	.word	0x08009be5
 8009a90:	08009d2b 	.word	0x08009d2b
 8009a94:	08009c1b 	.word	0x08009c1b
 8009a98:	08009c3b 	.word	0x08009c3b
 8009a9c:	08009c59 	.word	0x08009c59
 8009aa0:	08009c9d 	.word	0x08009c9d
 8009aa4:	08009d6d 	.word	0x08009d6d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8009aae:	b2db      	uxtb	r3, r3
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	f000 819c 	beq.w	8009dee <USBH_Process+0x3aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2201      	movs	r2, #1
 8009aba:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009abc:	20c8      	movs	r0, #200	@ 0xc8
 8009abe:	f001 fe1a 	bl	800b6f6 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f001 fd0d 	bl	800b4e2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2200      	movs	r2, #0
 8009acc:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8009ad8:	e189      	b.n	8009dee <USBH_Process+0x3aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8009ae0:	b2db      	uxtb	r3, r3
 8009ae2:	2b01      	cmp	r3, #1
 8009ae4:	d107      	bne.n	8009af6 <USBH_Process+0xb2>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2202      	movs	r2, #2
 8009af2:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009af4:	e18a      	b.n	8009e0c <USBH_Process+0x3c8>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8009afc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009b00:	d914      	bls.n	8009b2c <USBH_Process+0xe8>
          phost->device.RstCnt++;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8009b08:	3301      	adds	r3, #1
 8009b0a:	b2da      	uxtb	r2, r3
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8009b18:	2b03      	cmp	r3, #3
 8009b1a:	d903      	bls.n	8009b24 <USBH_Process+0xe0>
            phost->gState = HOST_ABORT_STATE;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	220d      	movs	r2, #13
 8009b20:	701a      	strb	r2, [r3, #0]
      break;
 8009b22:	e173      	b.n	8009e0c <USBH_Process+0x3c8>
            phost->gState = HOST_IDLE;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2200      	movs	r2, #0
 8009b28:	701a      	strb	r2, [r3, #0]
      break;
 8009b2a:	e16f      	b.n	8009e0c <USBH_Process+0x3c8>
          phost->Timeout += 10U;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8009b32:	f103 020a 	add.w	r2, r3, #10
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8009b3c:	200a      	movs	r0, #10
 8009b3e:	f001 fdda 	bl	800b6f6 <USBH_Delay>
      break;
 8009b42:	e163      	b.n	8009e0c <USBH_Process+0x3c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d005      	beq.n	8009b5a <USBH_Process+0x116>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009b54:	2104      	movs	r1, #4
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009b5a:	2064      	movs	r0, #100	@ 0x64
 8009b5c:	f001 fdcb 	bl	800b6f6 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f001 fc97 	bl	800b494 <USBH_LL_GetSpeed>
 8009b66:	4603      	mov	r3, r0
 8009b68:	461a      	mov	r2, r3
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2205      	movs	r2, #5
 8009b74:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009b76:	2100      	movs	r1, #0
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f001 faa2 	bl	800b0c2 <USBH_AllocPipe>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	461a      	mov	r2, r3
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009b86:	2180      	movs	r1, #128	@ 0x80
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f001 fa9a 	bl	800b0c2 <USBH_AllocPipe>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	461a      	mov	r2, r3
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	7919      	ldrb	r1, [r3, #4]
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009ba6:	687a      	ldr	r2, [r7, #4]
 8009ba8:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009baa:	9202      	str	r2, [sp, #8]
 8009bac:	2200      	movs	r2, #0
 8009bae:	9201      	str	r2, [sp, #4]
 8009bb0:	9300      	str	r3, [sp, #0]
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	2280      	movs	r2, #128	@ 0x80
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f001 fa54 	bl	800b064 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	7959      	ldrb	r1, [r3, #5]
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009bcc:	687a      	ldr	r2, [r7, #4]
 8009bce:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009bd0:	9202      	str	r2, [sp, #8]
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	9201      	str	r2, [sp, #4]
 8009bd6:	9300      	str	r3, [sp, #0]
 8009bd8:	4603      	mov	r3, r0
 8009bda:	2200      	movs	r2, #0
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f001 fa41 	bl	800b064 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009be2:	e113      	b.n	8009e0c <USBH_Process+0x3c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f000 f917 	bl	8009e18 <USBH_HandleEnum>
 8009bea:	4603      	mov	r3, r0
 8009bec:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009bee:	7bbb      	ldrb	r3, [r7, #14]
 8009bf0:	b2db      	uxtb	r3, r3
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	f040 80fd 	bne.w	8009df2 <USBH_Process+0x3ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8009c06:	2b01      	cmp	r3, #1
 8009c08:	d103      	bne.n	8009c12 <USBH_Process+0x1ce>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2208      	movs	r2, #8
 8009c0e:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8009c10:	e0ef      	b.n	8009df2 <USBH_Process+0x3ae>
          phost->gState = HOST_INPUT;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2207      	movs	r2, #7
 8009c16:	701a      	strb	r2, [r3, #0]
      break;
 8009c18:	e0eb      	b.n	8009df2 <USBH_Process+0x3ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	f000 80e8 	beq.w	8009df6 <USBH_Process+0x3b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009c2c:	2101      	movs	r1, #1
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2208      	movs	r2, #8
 8009c36:	701a      	strb	r2, [r3, #0]
#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 8009c38:	e0dd      	b.n	8009df6 <USBH_Process+0x3b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8009c40:	4619      	mov	r1, r3
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f000 fc3f 	bl	800a4c6 <USBH_SetCfg>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	f040 80d5 	bne.w	8009dfa <USBH_Process+0x3b6>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2209      	movs	r2, #9
 8009c54:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009c56:	e0d0      	b.n	8009dfa <USBH_Process+0x3b6>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8009c5e:	f003 0320 	and.w	r3, r3, #32
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d016      	beq.n	8009c94 <USBH_Process+0x250>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8009c66:	2101      	movs	r1, #1
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f000 fc4f 	bl	800a50c <USBH_SetFeature>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009c72:	7bbb      	ldrb	r3, [r7, #14]
 8009c74:	b2db      	uxtb	r3, r3
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d103      	bne.n	8009c82 <USBH_Process+0x23e>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	220a      	movs	r2, #10
 8009c7e:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009c80:	e0bd      	b.n	8009dfe <USBH_Process+0x3ba>
        else if (status == USBH_NOT_SUPPORTED)
 8009c82:	7bbb      	ldrb	r3, [r7, #14]
 8009c84:	b2db      	uxtb	r3, r3
 8009c86:	2b03      	cmp	r3, #3
 8009c88:	f040 80b9 	bne.w	8009dfe <USBH_Process+0x3ba>
          phost->gState = HOST_CHECK_CLASS;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	220a      	movs	r2, #10
 8009c90:	701a      	strb	r2, [r3, #0]
      break;
 8009c92:	e0b4      	b.n	8009dfe <USBH_Process+0x3ba>
        phost->gState = HOST_CHECK_CLASS;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	220a      	movs	r2, #10
 8009c98:	701a      	strb	r2, [r3, #0]
      break;
 8009c9a:	e0b0      	b.n	8009dfe <USBH_Process+0x3ba>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	f000 80ad 	beq.w	8009e02 <USBH_Process+0x3be>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2200      	movs	r2, #0
 8009cac:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	73fb      	strb	r3, [r7, #15]
 8009cb4:	e016      	b.n	8009ce4 <USBH_Process+0x2a0>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009cb6:	7bfa      	ldrb	r2, [r7, #15]
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	32de      	adds	r2, #222	@ 0xde
 8009cbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cc0:	791a      	ldrb	r2, [r3, #4]
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	d108      	bne.n	8009cde <USBH_Process+0x29a>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009ccc:	7bfa      	ldrb	r2, [r7, #15]
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	32de      	adds	r2, #222	@ 0xde
 8009cd2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8009cdc:	e005      	b.n	8009cea <USBH_Process+0x2a6>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009cde:	7bfb      	ldrb	r3, [r7, #15]
 8009ce0:	3301      	adds	r3, #1
 8009ce2:	73fb      	strb	r3, [r7, #15]
 8009ce4:	7bfb      	ldrb	r3, [r7, #15]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d0e5      	beq.n	8009cb6 <USBH_Process+0x272>
          }
        }

        if (phost->pActiveClass != NULL)
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d016      	beq.n	8009d22 <USBH_Process+0x2de>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009cfa:	689b      	ldr	r3, [r3, #8]
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	4798      	blx	r3
 8009d00:	4603      	mov	r3, r0
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d109      	bne.n	8009d1a <USBH_Process+0x2d6>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2206      	movs	r2, #6
 8009d0a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009d12:	2103      	movs	r1, #3
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	4798      	blx	r3
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009d18:	e073      	b.n	8009e02 <USBH_Process+0x3be>
            phost->gState = HOST_ABORT_STATE;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	220d      	movs	r2, #13
 8009d1e:	701a      	strb	r2, [r3, #0]
      break;
 8009d20:	e06f      	b.n	8009e02 <USBH_Process+0x3be>
          phost->gState = HOST_ABORT_STATE;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	220d      	movs	r2, #13
 8009d26:	701a      	strb	r2, [r3, #0]
      break;
 8009d28:	e06b      	b.n	8009e02 <USBH_Process+0x3be>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d017      	beq.n	8009d64 <USBH_Process+0x320>
      {
        status = phost->pActiveClass->Requests(phost);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009d3a:	691b      	ldr	r3, [r3, #16]
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	4798      	blx	r3
 8009d40:	4603      	mov	r3, r0
 8009d42:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009d44:	7bbb      	ldrb	r3, [r7, #14]
 8009d46:	b2db      	uxtb	r3, r3
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d103      	bne.n	8009d54 <USBH_Process+0x310>
        {
          phost->gState = HOST_CLASS;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	220b      	movs	r2, #11
 8009d50:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009d52:	e058      	b.n	8009e06 <USBH_Process+0x3c2>
        else if (status == USBH_FAIL)
 8009d54:	7bbb      	ldrb	r3, [r7, #14]
 8009d56:	b2db      	uxtb	r3, r3
 8009d58:	2b02      	cmp	r3, #2
 8009d5a:	d154      	bne.n	8009e06 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	220d      	movs	r2, #13
 8009d60:	701a      	strb	r2, [r3, #0]
      break;
 8009d62:	e050      	b.n	8009e06 <USBH_Process+0x3c2>
        phost->gState = HOST_ABORT_STATE;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	220d      	movs	r2, #13
 8009d68:	701a      	strb	r2, [r3, #0]
      break;
 8009d6a:	e04c      	b.n	8009e06 <USBH_Process+0x3c2>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d049      	beq.n	8009e0a <USBH_Process+0x3c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009d7c:	695b      	ldr	r3, [r3, #20]
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	4798      	blx	r3
      }
      break;
 8009d82:	e042      	b.n	8009e0a <USBH_Process+0x3c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2200      	movs	r2, #0
 8009d88:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f7ff fd4b 	bl	8009828 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d009      	beq.n	8009db0 <USBH_Process+0x36c>
      {
        phost->pActiveClass->DeInit(phost);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009da2:	68db      	ldr	r3, [r3, #12]
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2200      	movs	r2, #0
 8009dac:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d005      	beq.n	8009dc6 <USBH_Process+0x382>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009dc0:	2105      	movs	r1, #5
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8009dcc:	b2db      	uxtb	r3, r3
 8009dce:	2b01      	cmp	r3, #1
 8009dd0:	d107      	bne.n	8009de2 <USBH_Process+0x39e>
      {
        phost->device.is_ReEnumerated = 0U;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f7ff fe21 	bl	8009a22 <USBH_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009de0:	e014      	b.n	8009e0c <USBH_Process+0x3c8>
        (void)USBH_LL_Start(phost);
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f001 fb20 	bl	800b428 <USBH_LL_Start>
      break;
 8009de8:	e010      	b.n	8009e0c <USBH_Process+0x3c8>

    case HOST_ABORT_STATE:
    default :
      break;
 8009dea:	bf00      	nop
 8009dec:	e00e      	b.n	8009e0c <USBH_Process+0x3c8>
      break;
 8009dee:	bf00      	nop
 8009df0:	e00c      	b.n	8009e0c <USBH_Process+0x3c8>
      break;
 8009df2:	bf00      	nop
 8009df4:	e00a      	b.n	8009e0c <USBH_Process+0x3c8>
    break;
 8009df6:	bf00      	nop
 8009df8:	e008      	b.n	8009e0c <USBH_Process+0x3c8>
      break;
 8009dfa:	bf00      	nop
 8009dfc:	e006      	b.n	8009e0c <USBH_Process+0x3c8>
      break;
 8009dfe:	bf00      	nop
 8009e00:	e004      	b.n	8009e0c <USBH_Process+0x3c8>
      break;
 8009e02:	bf00      	nop
 8009e04:	e002      	b.n	8009e0c <USBH_Process+0x3c8>
      break;
 8009e06:	bf00      	nop
 8009e08:	e000      	b.n	8009e0c <USBH_Process+0x3c8>
      break;
 8009e0a:	bf00      	nop
  }
  return USBH_OK;
 8009e0c:	2300      	movs	r3, #0
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3710      	adds	r7, #16
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}
 8009e16:	bf00      	nop

08009e18 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b088      	sub	sp, #32
 8009e1c:	af04      	add	r7, sp, #16
 8009e1e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009e20:	2301      	movs	r3, #1
 8009e22:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009e24:	2301      	movs	r3, #1
 8009e26:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	785b      	ldrb	r3, [r3, #1]
 8009e2c:	2b07      	cmp	r3, #7
 8009e2e:	f200 81bd 	bhi.w	800a1ac <USBH_HandleEnum+0x394>
 8009e32:	a201      	add	r2, pc, #4	@ (adr r2, 8009e38 <USBH_HandleEnum+0x20>)
 8009e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e38:	08009e59 	.word	0x08009e59
 8009e3c:	08009f13 	.word	0x08009f13
 8009e40:	08009f7d 	.word	0x08009f7d
 8009e44:	0800a007 	.word	0x0800a007
 8009e48:	0800a071 	.word	0x0800a071
 8009e4c:	0800a0e1 	.word	0x0800a0e1
 8009e50:	0800a127 	.word	0x0800a127
 8009e54:	0800a16d 	.word	0x0800a16d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009e58:	2108      	movs	r1, #8
 8009e5a:	6878      	ldr	r0, [r7, #4]
 8009e5c:	f000 fa50 	bl	800a300 <USBH_Get_DevDesc>
 8009e60:	4603      	mov	r3, r0
 8009e62:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009e64:	7bbb      	ldrb	r3, [r7, #14]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d12e      	bne.n	8009ec8 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2201      	movs	r2, #1
 8009e78:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	7919      	ldrb	r1, [r3, #4]
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009e8a:	687a      	ldr	r2, [r7, #4]
 8009e8c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009e8e:	9202      	str	r2, [sp, #8]
 8009e90:	2200      	movs	r2, #0
 8009e92:	9201      	str	r2, [sp, #4]
 8009e94:	9300      	str	r3, [sp, #0]
 8009e96:	4603      	mov	r3, r0
 8009e98:	2280      	movs	r2, #128	@ 0x80
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f001 f8e2 	bl	800b064 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	7959      	ldrb	r1, [r3, #5]
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009eb0:	687a      	ldr	r2, [r7, #4]
 8009eb2:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009eb4:	9202      	str	r2, [sp, #8]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	9201      	str	r2, [sp, #4]
 8009eba:	9300      	str	r3, [sp, #0]
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f001 f8cf 	bl	800b064 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009ec6:	e173      	b.n	800a1b0 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009ec8:	7bbb      	ldrb	r3, [r7, #14]
 8009eca:	2b03      	cmp	r3, #3
 8009ecc:	f040 8170 	bne.w	800a1b0 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009ed6:	3301      	adds	r3, #1
 8009ed8:	b2da      	uxtb	r2, r3
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009ee6:	2b03      	cmp	r3, #3
 8009ee8:	d903      	bls.n	8009ef2 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	220d      	movs	r2, #13
 8009eee:	701a      	strb	r2, [r3, #0]
      break;
 8009ef0:	e15e      	b.n	800a1b0 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	795b      	ldrb	r3, [r3, #5]
 8009ef6:	4619      	mov	r1, r3
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f001 f903 	bl	800b104 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	791b      	ldrb	r3, [r3, #4]
 8009f02:	4619      	mov	r1, r3
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f001 f8fd 	bl	800b104 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	701a      	strb	r2, [r3, #0]
      break;
 8009f10:	e14e      	b.n	800a1b0 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009f12:	2112      	movs	r1, #18
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f000 f9f3 	bl	800a300 <USBH_Get_DevDesc>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009f1e:	7bbb      	ldrb	r3, [r7, #14]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d103      	bne.n	8009f2c <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2202      	movs	r2, #2
 8009f28:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009f2a:	e143      	b.n	800a1b4 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009f2c:	7bbb      	ldrb	r3, [r7, #14]
 8009f2e:	2b03      	cmp	r3, #3
 8009f30:	f040 8140 	bne.w	800a1b4 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009f3a:	3301      	adds	r3, #1
 8009f3c:	b2da      	uxtb	r2, r3
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009f4a:	2b03      	cmp	r3, #3
 8009f4c:	d903      	bls.n	8009f56 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	220d      	movs	r2, #13
 8009f52:	701a      	strb	r2, [r3, #0]
      break;
 8009f54:	e12e      	b.n	800a1b4 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	795b      	ldrb	r3, [r3, #5]
 8009f5a:	4619      	mov	r1, r3
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f001 f8d1 	bl	800b104 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	791b      	ldrb	r3, [r3, #4]
 8009f66:	4619      	mov	r1, r3
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f001 f8cb 	bl	800b104 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2200      	movs	r2, #0
 8009f72:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2200      	movs	r2, #0
 8009f78:	701a      	strb	r2, [r3, #0]
      break;
 8009f7a:	e11b      	b.n	800a1b4 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009f7c:	2101      	movs	r1, #1
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f000 fa7d 	bl	800a47e <USBH_SetAddress>
 8009f84:	4603      	mov	r3, r0
 8009f86:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009f88:	7bbb      	ldrb	r3, [r7, #14]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d130      	bne.n	8009ff0 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8009f8e:	2002      	movs	r0, #2
 8009f90:	f001 fbb1 	bl	800b6f6 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2201      	movs	r2, #1
 8009f98:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2203      	movs	r2, #3
 8009fa0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	7919      	ldrb	r1, [r3, #4]
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009fb2:	687a      	ldr	r2, [r7, #4]
 8009fb4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009fb6:	9202      	str	r2, [sp, #8]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	9201      	str	r2, [sp, #4]
 8009fbc:	9300      	str	r3, [sp, #0]
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	2280      	movs	r2, #128	@ 0x80
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f001 f84e 	bl	800b064 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	7959      	ldrb	r1, [r3, #5]
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009fd8:	687a      	ldr	r2, [r7, #4]
 8009fda:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009fdc:	9202      	str	r2, [sp, #8]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	9201      	str	r2, [sp, #4]
 8009fe2:	9300      	str	r3, [sp, #0]
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	f001 f83b 	bl	800b064 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009fee:	e0e3      	b.n	800a1b8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009ff0:	7bbb      	ldrb	r3, [r7, #14]
 8009ff2:	2b03      	cmp	r3, #3
 8009ff4:	f040 80e0 	bne.w	800a1b8 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	220d      	movs	r2, #13
 8009ffc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2200      	movs	r2, #0
 800a002:	705a      	strb	r2, [r3, #1]
      break;
 800a004:	e0d8      	b.n	800a1b8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a006:	2109      	movs	r1, #9
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f000 f9a5 	bl	800a358 <USBH_Get_CfgDesc>
 800a00e:	4603      	mov	r3, r0
 800a010:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a012:	7bbb      	ldrb	r3, [r7, #14]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d103      	bne.n	800a020 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2204      	movs	r2, #4
 800a01c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a01e:	e0cd      	b.n	800a1bc <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a020:	7bbb      	ldrb	r3, [r7, #14]
 800a022:	2b03      	cmp	r3, #3
 800a024:	f040 80ca 	bne.w	800a1bc <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a02e:	3301      	adds	r3, #1
 800a030:	b2da      	uxtb	r2, r3
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a03e:	2b03      	cmp	r3, #3
 800a040:	d903      	bls.n	800a04a <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	220d      	movs	r2, #13
 800a046:	701a      	strb	r2, [r3, #0]
      break;
 800a048:	e0b8      	b.n	800a1bc <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	795b      	ldrb	r3, [r3, #5]
 800a04e:	4619      	mov	r1, r3
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f001 f857 	bl	800b104 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	791b      	ldrb	r3, [r3, #4]
 800a05a:	4619      	mov	r1, r3
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f001 f851 	bl	800b104 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2200      	movs	r2, #0
 800a066:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2200      	movs	r2, #0
 800a06c:	701a      	strb	r2, [r3, #0]
      break;
 800a06e:	e0a5      	b.n	800a1bc <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800a076:	4619      	mov	r1, r3
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f000 f96d 	bl	800a358 <USBH_Get_CfgDesc>
 800a07e:	4603      	mov	r3, r0
 800a080:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a082:	7bbb      	ldrb	r3, [r7, #14]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d103      	bne.n	800a090 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2205      	movs	r2, #5
 800a08c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a08e:	e097      	b.n	800a1c0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a090:	7bbb      	ldrb	r3, [r7, #14]
 800a092:	2b03      	cmp	r3, #3
 800a094:	f040 8094 	bne.w	800a1c0 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a09e:	3301      	adds	r3, #1
 800a0a0:	b2da      	uxtb	r2, r3
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a0ae:	2b03      	cmp	r3, #3
 800a0b0:	d903      	bls.n	800a0ba <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	220d      	movs	r2, #13
 800a0b6:	701a      	strb	r2, [r3, #0]
      break;
 800a0b8:	e082      	b.n	800a1c0 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	795b      	ldrb	r3, [r3, #5]
 800a0be:	4619      	mov	r1, r3
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f001 f81f 	bl	800b104 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	791b      	ldrb	r3, [r3, #4]
 800a0ca:	4619      	mov	r1, r3
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f001 f819 	bl	800b104 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2200      	movs	r2, #0
 800a0dc:	701a      	strb	r2, [r3, #0]
      break;
 800a0de:	e06f      	b.n	800a1c0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d019      	beq.n	800a11e <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a0f6:	23ff      	movs	r3, #255	@ 0xff
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f000 f957 	bl	800a3ac <USBH_Get_StringDesc>
 800a0fe:	4603      	mov	r3, r0
 800a100:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a102:	7bbb      	ldrb	r3, [r7, #14]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d103      	bne.n	800a110 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2206      	movs	r2, #6
 800a10c:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800a10e:	e059      	b.n	800a1c4 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a110:	7bbb      	ldrb	r3, [r7, #14]
 800a112:	2b03      	cmp	r3, #3
 800a114:	d156      	bne.n	800a1c4 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2206      	movs	r2, #6
 800a11a:	705a      	strb	r2, [r3, #1]
      break;
 800a11c:	e052      	b.n	800a1c4 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2206      	movs	r2, #6
 800a122:	705a      	strb	r2, [r3, #1]
      break;
 800a124:	e04e      	b.n	800a1c4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d019      	beq.n	800a164 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a13c:	23ff      	movs	r3, #255	@ 0xff
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f000 f934 	bl	800a3ac <USBH_Get_StringDesc>
 800a144:	4603      	mov	r3, r0
 800a146:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a148:	7bbb      	ldrb	r3, [r7, #14]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d103      	bne.n	800a156 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2207      	movs	r2, #7
 800a152:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800a154:	e038      	b.n	800a1c8 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a156:	7bbb      	ldrb	r3, [r7, #14]
 800a158:	2b03      	cmp	r3, #3
 800a15a:	d135      	bne.n	800a1c8 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2207      	movs	r2, #7
 800a160:	705a      	strb	r2, [r3, #1]
      break;
 800a162:	e031      	b.n	800a1c8 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2207      	movs	r2, #7
 800a168:	705a      	strb	r2, [r3, #1]
      break;
 800a16a:	e02d      	b.n	800a1c8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800a172:	2b00      	cmp	r3, #0
 800a174:	d017      	beq.n	800a1a6 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a182:	23ff      	movs	r3, #255	@ 0xff
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f000 f911 	bl	800a3ac <USBH_Get_StringDesc>
 800a18a:	4603      	mov	r3, r0
 800a18c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a18e:	7bbb      	ldrb	r3, [r7, #14]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d102      	bne.n	800a19a <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a194:	2300      	movs	r3, #0
 800a196:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a198:	e018      	b.n	800a1cc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a19a:	7bbb      	ldrb	r3, [r7, #14]
 800a19c:	2b03      	cmp	r3, #3
 800a19e:	d115      	bne.n	800a1cc <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	73fb      	strb	r3, [r7, #15]
      break;
 800a1a4:	e012      	b.n	800a1cc <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	73fb      	strb	r3, [r7, #15]
      break;
 800a1aa:	e00f      	b.n	800a1cc <USBH_HandleEnum+0x3b4>

    default:
      break;
 800a1ac:	bf00      	nop
 800a1ae:	e00e      	b.n	800a1ce <USBH_HandleEnum+0x3b6>
      break;
 800a1b0:	bf00      	nop
 800a1b2:	e00c      	b.n	800a1ce <USBH_HandleEnum+0x3b6>
      break;
 800a1b4:	bf00      	nop
 800a1b6:	e00a      	b.n	800a1ce <USBH_HandleEnum+0x3b6>
      break;
 800a1b8:	bf00      	nop
 800a1ba:	e008      	b.n	800a1ce <USBH_HandleEnum+0x3b6>
      break;
 800a1bc:	bf00      	nop
 800a1be:	e006      	b.n	800a1ce <USBH_HandleEnum+0x3b6>
      break;
 800a1c0:	bf00      	nop
 800a1c2:	e004      	b.n	800a1ce <USBH_HandleEnum+0x3b6>
      break;
 800a1c4:	bf00      	nop
 800a1c6:	e002      	b.n	800a1ce <USBH_HandleEnum+0x3b6>
      break;
 800a1c8:	bf00      	nop
 800a1ca:	e000      	b.n	800a1ce <USBH_HandleEnum+0x3b6>
      break;
 800a1cc:	bf00      	nop
  }
  return Status;
 800a1ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	3710      	adds	r7, #16
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}

0800a1d8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a1d8:	b480      	push	{r7}
 800a1da:	b083      	sub	sp, #12
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
 800a1e0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	683a      	ldr	r2, [r7, #0]
 800a1e6:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800a1ea:	bf00      	nop
 800a1ec:	370c      	adds	r7, #12
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f4:	4770      	bx	lr

0800a1f6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a1f6:	b580      	push	{r7, lr}
 800a1f8:	b082      	sub	sp, #8
 800a1fa:	af00      	add	r7, sp, #0
 800a1fc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a204:	1c5a      	adds	r2, r3, #1
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	f000 f804 	bl	800a21a <USBH_HandleSof>
}
 800a212:	bf00      	nop
 800a214:	3708      	adds	r7, #8
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}

0800a21a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a21a:	b580      	push	{r7, lr}
 800a21c:	b082      	sub	sp, #8
 800a21e:	af00      	add	r7, sp, #0
 800a220:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	781b      	ldrb	r3, [r3, #0]
 800a226:	b2db      	uxtb	r3, r3
 800a228:	2b0b      	cmp	r3, #11
 800a22a:	d10a      	bne.n	800a242 <USBH_HandleSof+0x28>
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a232:	2b00      	cmp	r3, #0
 800a234:	d005      	beq.n	800a242 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a23c:	699b      	ldr	r3, [r3, #24]
 800a23e:	6878      	ldr	r0, [r7, #4]
 800a240:	4798      	blx	r3
  }
}
 800a242:	bf00      	nop
 800a244:	3708      	adds	r7, #8
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}

0800a24a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a24a:	b480      	push	{r7}
 800a24c:	b083      	sub	sp, #12
 800a24e:	af00      	add	r7, sp, #0
 800a250:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2201      	movs	r2, #1
 800a256:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
 800a25a:	bf00      	nop
}
 800a25c:	370c      	adds	r7, #12
 800a25e:	46bd      	mov	sp, r7
 800a260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a264:	4770      	bx	lr

0800a266 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a266:	b480      	push	{r7}
 800a268:	b083      	sub	sp, #12
 800a26a:	af00      	add	r7, sp, #0
 800a26c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2200      	movs	r2, #0
 800a272:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2201      	movs	r2, #1
 800a27a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 800a27e:	bf00      	nop
}
 800a280:	370c      	adds	r7, #12
 800a282:	46bd      	mov	sp, r7
 800a284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a288:	4770      	bx	lr

0800a28a <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a28a:	b480      	push	{r7}
 800a28c:	b083      	sub	sp, #12
 800a28e:	af00      	add	r7, sp, #0
 800a290:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2201      	movs	r2, #1
 800a296:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2200      	movs	r2, #0
 800a29e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800a2aa:	2300      	movs	r3, #0
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	370c      	adds	r7, #12
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b6:	4770      	bx	lr

0800a2b8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b082      	sub	sp, #8
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2201      	movs	r2, #1
 800a2c4:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	f001 f8c0 	bl	800b45e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	791b      	ldrb	r3, [r3, #4]
 800a2e2:	4619      	mov	r1, r3
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	f000 ff0d 	bl	800b104 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	795b      	ldrb	r3, [r3, #5]
 800a2ee:	4619      	mov	r1, r3
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	f000 ff07 	bl	800b104 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800a2f6:	2300      	movs	r3, #0
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	3708      	adds	r7, #8
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bd80      	pop	{r7, pc}

0800a300 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b086      	sub	sp, #24
 800a304:	af02      	add	r7, sp, #8
 800a306:	6078      	str	r0, [r7, #4]
 800a308:	460b      	mov	r3, r1
 800a30a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800a30c:	887b      	ldrh	r3, [r7, #2]
 800a30e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a312:	d901      	bls.n	800a318 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a314:	2303      	movs	r3, #3
 800a316:	e01b      	b.n	800a350 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800a31e:	887b      	ldrh	r3, [r7, #2]
 800a320:	9300      	str	r3, [sp, #0]
 800a322:	4613      	mov	r3, r2
 800a324:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a328:	2100      	movs	r1, #0
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f000 f872 	bl	800a414 <USBH_GetDescriptor>
 800a330:	4603      	mov	r3, r0
 800a332:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800a334:	7bfb      	ldrb	r3, [r7, #15]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d109      	bne.n	800a34e <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a340:	887a      	ldrh	r2, [r7, #2]
 800a342:	4619      	mov	r1, r3
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f000 f929 	bl	800a59c <USBH_ParseDevDesc>
 800a34a:	4603      	mov	r3, r0
 800a34c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a34e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a350:	4618      	mov	r0, r3
 800a352:	3710      	adds	r7, #16
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}

0800a358 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b086      	sub	sp, #24
 800a35c:	af02      	add	r7, sp, #8
 800a35e:	6078      	str	r0, [r7, #4]
 800a360:	460b      	mov	r3, r1
 800a362:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	331c      	adds	r3, #28
 800a368:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800a36a:	887b      	ldrh	r3, [r7, #2]
 800a36c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a370:	d901      	bls.n	800a376 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a372:	2303      	movs	r3, #3
 800a374:	e016      	b.n	800a3a4 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a376:	887b      	ldrh	r3, [r7, #2]
 800a378:	9300      	str	r3, [sp, #0]
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a380:	2100      	movs	r1, #0
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f000 f846 	bl	800a414 <USBH_GetDescriptor>
 800a388:	4603      	mov	r3, r0
 800a38a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800a38c:	7bfb      	ldrb	r3, [r7, #15]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d107      	bne.n	800a3a2 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800a392:	887b      	ldrh	r3, [r7, #2]
 800a394:	461a      	mov	r2, r3
 800a396:	68b9      	ldr	r1, [r7, #8]
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f000 f9af 	bl	800a6fc <USBH_ParseCfgDesc>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a3a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	3710      	adds	r7, #16
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}

0800a3ac <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b088      	sub	sp, #32
 800a3b0:	af02      	add	r7, sp, #8
 800a3b2:	60f8      	str	r0, [r7, #12]
 800a3b4:	607a      	str	r2, [r7, #4]
 800a3b6:	461a      	mov	r2, r3
 800a3b8:	460b      	mov	r3, r1
 800a3ba:	72fb      	strb	r3, [r7, #11]
 800a3bc:	4613      	mov	r3, r2
 800a3be:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800a3c0:	893b      	ldrh	r3, [r7, #8]
 800a3c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a3c6:	d802      	bhi.n	800a3ce <USBH_Get_StringDesc+0x22>
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d101      	bne.n	800a3d2 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a3ce:	2303      	movs	r3, #3
 800a3d0:	e01c      	b.n	800a40c <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800a3d2:	7afb      	ldrb	r3, [r7, #11]
 800a3d4:	b29b      	uxth	r3, r3
 800a3d6:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800a3da:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800a3e2:	893b      	ldrh	r3, [r7, #8]
 800a3e4:	9300      	str	r3, [sp, #0]
 800a3e6:	460b      	mov	r3, r1
 800a3e8:	2100      	movs	r1, #0
 800a3ea:	68f8      	ldr	r0, [r7, #12]
 800a3ec:	f000 f812 	bl	800a414 <USBH_GetDescriptor>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800a3f4:	7dfb      	ldrb	r3, [r7, #23]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d107      	bne.n	800a40a <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a400:	893a      	ldrh	r2, [r7, #8]
 800a402:	6879      	ldr	r1, [r7, #4]
 800a404:	4618      	mov	r0, r3
 800a406:	f000 fb8c 	bl	800ab22 <USBH_ParseStringDesc>
  }

  return status;
 800a40a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a40c:	4618      	mov	r0, r3
 800a40e:	3718      	adds	r7, #24
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}

0800a414 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b084      	sub	sp, #16
 800a418:	af00      	add	r7, sp, #0
 800a41a:	60f8      	str	r0, [r7, #12]
 800a41c:	607b      	str	r3, [r7, #4]
 800a41e:	460b      	mov	r3, r1
 800a420:	72fb      	strb	r3, [r7, #11]
 800a422:	4613      	mov	r3, r2
 800a424:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	789b      	ldrb	r3, [r3, #2]
 800a42a:	2b01      	cmp	r3, #1
 800a42c:	d11c      	bne.n	800a468 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a42e:	7afb      	ldrb	r3, [r7, #11]
 800a430:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a434:	b2da      	uxtb	r2, r3
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	2206      	movs	r2, #6
 800a43e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	893a      	ldrh	r2, [r7, #8]
 800a444:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a446:	893b      	ldrh	r3, [r7, #8]
 800a448:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a44c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a450:	d104      	bne.n	800a45c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	f240 4209 	movw	r2, #1033	@ 0x409
 800a458:	829a      	strh	r2, [r3, #20]
 800a45a:	e002      	b.n	800a462 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	2200      	movs	r2, #0
 800a460:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	8b3a      	ldrh	r2, [r7, #24]
 800a466:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a468:	8b3b      	ldrh	r3, [r7, #24]
 800a46a:	461a      	mov	r2, r3
 800a46c:	6879      	ldr	r1, [r7, #4]
 800a46e:	68f8      	ldr	r0, [r7, #12]
 800a470:	f000 fba4 	bl	800abbc <USBH_CtlReq>
 800a474:	4603      	mov	r3, r0
}
 800a476:	4618      	mov	r0, r3
 800a478:	3710      	adds	r7, #16
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}

0800a47e <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a47e:	b580      	push	{r7, lr}
 800a480:	b082      	sub	sp, #8
 800a482:	af00      	add	r7, sp, #0
 800a484:	6078      	str	r0, [r7, #4]
 800a486:	460b      	mov	r3, r1
 800a488:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	789b      	ldrb	r3, [r3, #2]
 800a48e:	2b01      	cmp	r3, #1
 800a490:	d10f      	bne.n	800a4b2 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2200      	movs	r2, #0
 800a496:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2205      	movs	r2, #5
 800a49c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a49e:	78fb      	ldrb	r3, [r7, #3]
 800a4a0:	b29a      	uxth	r2, r3
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	2100      	movs	r1, #0
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	f000 fb80 	bl	800abbc <USBH_CtlReq>
 800a4bc:	4603      	mov	r3, r0
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	3708      	adds	r7, #8
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}

0800a4c6 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a4c6:	b580      	push	{r7, lr}
 800a4c8:	b082      	sub	sp, #8
 800a4ca:	af00      	add	r7, sp, #0
 800a4cc:	6078      	str	r0, [r7, #4]
 800a4ce:	460b      	mov	r3, r1
 800a4d0:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	789b      	ldrb	r3, [r3, #2]
 800a4d6:	2b01      	cmp	r3, #1
 800a4d8:	d10e      	bne.n	800a4f8 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2209      	movs	r2, #9
 800a4e4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	887a      	ldrh	r2, [r7, #2]
 800a4ea:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	2100      	movs	r1, #0
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f000 fb5d 	bl	800abbc <USBH_CtlReq>
 800a502:	4603      	mov	r3, r0
}
 800a504:	4618      	mov	r0, r3
 800a506:	3708      	adds	r7, #8
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}

0800a50c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b082      	sub	sp, #8
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
 800a514:	460b      	mov	r3, r1
 800a516:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	789b      	ldrb	r3, [r3, #2]
 800a51c:	2b01      	cmp	r3, #1
 800a51e:	d10f      	bne.n	800a540 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2200      	movs	r2, #0
 800a524:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2203      	movs	r2, #3
 800a52a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a52c:	78fb      	ldrb	r3, [r7, #3]
 800a52e:	b29a      	uxth	r2, r3
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2200      	movs	r2, #0
 800a538:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2200      	movs	r2, #0
 800a53e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a540:	2200      	movs	r2, #0
 800a542:	2100      	movs	r1, #0
 800a544:	6878      	ldr	r0, [r7, #4]
 800a546:	f000 fb39 	bl	800abbc <USBH_CtlReq>
 800a54a:	4603      	mov	r3, r0
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3708      	adds	r7, #8
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}

0800a554 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b082      	sub	sp, #8
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
 800a55c:	460b      	mov	r3, r1
 800a55e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	789b      	ldrb	r3, [r3, #2]
 800a564:	2b01      	cmp	r3, #1
 800a566:	d10f      	bne.n	800a588 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2202      	movs	r2, #2
 800a56c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2201      	movs	r2, #1
 800a572:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2200      	movs	r2, #0
 800a578:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a57a:	78fb      	ldrb	r3, [r7, #3]
 800a57c:	b29a      	uxth	r2, r3
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2200      	movs	r2, #0
 800a586:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a588:	2200      	movs	r2, #0
 800a58a:	2100      	movs	r1, #0
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	f000 fb15 	bl	800abbc <USBH_CtlReq>
 800a592:	4603      	mov	r3, r0
}
 800a594:	4618      	mov	r0, r3
 800a596:	3708      	adds	r7, #8
 800a598:	46bd      	mov	sp, r7
 800a59a:	bd80      	pop	{r7, pc}

0800a59c <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a59c:	b480      	push	{r7}
 800a59e:	b087      	sub	sp, #28
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	60f8      	str	r0, [r7, #12]
 800a5a4:	60b9      	str	r1, [r7, #8]
 800a5a6:	4613      	mov	r3, r2
 800a5a8:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800a5b0:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d101      	bne.n	800a5c0 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800a5bc:	2302      	movs	r3, #2
 800a5be:	e094      	b.n	800a6ea <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	781a      	ldrb	r2, [r3, #0]
 800a5c4:	693b      	ldr	r3, [r7, #16]
 800a5c6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	785a      	ldrb	r2, [r3, #1]
 800a5cc:	693b      	ldr	r3, [r7, #16]
 800a5ce:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800a5d0:	68bb      	ldr	r3, [r7, #8]
 800a5d2:	3302      	adds	r3, #2
 800a5d4:	781b      	ldrb	r3, [r3, #0]
 800a5d6:	461a      	mov	r2, r3
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	3303      	adds	r3, #3
 800a5dc:	781b      	ldrb	r3, [r3, #0]
 800a5de:	021b      	lsls	r3, r3, #8
 800a5e0:	b29b      	uxth	r3, r3
 800a5e2:	4313      	orrs	r3, r2
 800a5e4:	b29a      	uxth	r2, r3
 800a5e6:	693b      	ldr	r3, [r7, #16]
 800a5e8:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	791a      	ldrb	r2, [r3, #4]
 800a5ee:	693b      	ldr	r3, [r7, #16]
 800a5f0:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800a5f2:	68bb      	ldr	r3, [r7, #8]
 800a5f4:	795a      	ldrb	r2, [r3, #5]
 800a5f6:	693b      	ldr	r3, [r7, #16]
 800a5f8:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	799a      	ldrb	r2, [r3, #6]
 800a5fe:	693b      	ldr	r3, [r7, #16]
 800a600:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	79da      	ldrb	r2, [r3, #7]
 800a606:	693b      	ldr	r3, [r7, #16]
 800a608:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a610:	2b00      	cmp	r3, #0
 800a612:	d004      	beq.n	800a61e <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a61a:	2b01      	cmp	r3, #1
 800a61c:	d11b      	bne.n	800a656 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800a61e:	693b      	ldr	r3, [r7, #16]
 800a620:	79db      	ldrb	r3, [r3, #7]
 800a622:	2b20      	cmp	r3, #32
 800a624:	dc0f      	bgt.n	800a646 <USBH_ParseDevDesc+0xaa>
 800a626:	2b08      	cmp	r3, #8
 800a628:	db0f      	blt.n	800a64a <USBH_ParseDevDesc+0xae>
 800a62a:	3b08      	subs	r3, #8
 800a62c:	4a32      	ldr	r2, [pc, #200]	@ (800a6f8 <USBH_ParseDevDesc+0x15c>)
 800a62e:	fa22 f303 	lsr.w	r3, r2, r3
 800a632:	f003 0301 	and.w	r3, r3, #1
 800a636:	2b00      	cmp	r3, #0
 800a638:	bf14      	ite	ne
 800a63a:	2301      	movne	r3, #1
 800a63c:	2300      	moveq	r3, #0
 800a63e:	b2db      	uxtb	r3, r3
 800a640:	2b00      	cmp	r3, #0
 800a642:	d106      	bne.n	800a652 <USBH_ParseDevDesc+0xb6>
 800a644:	e001      	b.n	800a64a <USBH_ParseDevDesc+0xae>
 800a646:	2b40      	cmp	r3, #64	@ 0x40
 800a648:	d003      	beq.n	800a652 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800a64a:	693b      	ldr	r3, [r7, #16]
 800a64c:	2208      	movs	r2, #8
 800a64e:	71da      	strb	r2, [r3, #7]
        break;
 800a650:	e000      	b.n	800a654 <USBH_ParseDevDesc+0xb8>
        break;
 800a652:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800a654:	e00e      	b.n	800a674 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a65c:	2b02      	cmp	r3, #2
 800a65e:	d107      	bne.n	800a670 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800a660:	693b      	ldr	r3, [r7, #16]
 800a662:	79db      	ldrb	r3, [r3, #7]
 800a664:	2b08      	cmp	r3, #8
 800a666:	d005      	beq.n	800a674 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	2208      	movs	r2, #8
 800a66c:	71da      	strb	r2, [r3, #7]
 800a66e:	e001      	b.n	800a674 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a670:	2303      	movs	r3, #3
 800a672:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800a674:	88fb      	ldrh	r3, [r7, #6]
 800a676:	2b08      	cmp	r3, #8
 800a678:	d936      	bls.n	800a6e8 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	3308      	adds	r3, #8
 800a67e:	781b      	ldrb	r3, [r3, #0]
 800a680:	461a      	mov	r2, r3
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	3309      	adds	r3, #9
 800a686:	781b      	ldrb	r3, [r3, #0]
 800a688:	021b      	lsls	r3, r3, #8
 800a68a:	b29b      	uxth	r3, r3
 800a68c:	4313      	orrs	r3, r2
 800a68e:	b29a      	uxth	r2, r3
 800a690:	693b      	ldr	r3, [r7, #16]
 800a692:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	330a      	adds	r3, #10
 800a698:	781b      	ldrb	r3, [r3, #0]
 800a69a:	461a      	mov	r2, r3
 800a69c:	68bb      	ldr	r3, [r7, #8]
 800a69e:	330b      	adds	r3, #11
 800a6a0:	781b      	ldrb	r3, [r3, #0]
 800a6a2:	021b      	lsls	r3, r3, #8
 800a6a4:	b29b      	uxth	r3, r3
 800a6a6:	4313      	orrs	r3, r2
 800a6a8:	b29a      	uxth	r2, r3
 800a6aa:	693b      	ldr	r3, [r7, #16]
 800a6ac:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800a6ae:	68bb      	ldr	r3, [r7, #8]
 800a6b0:	330c      	adds	r3, #12
 800a6b2:	781b      	ldrb	r3, [r3, #0]
 800a6b4:	461a      	mov	r2, r3
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	330d      	adds	r3, #13
 800a6ba:	781b      	ldrb	r3, [r3, #0]
 800a6bc:	021b      	lsls	r3, r3, #8
 800a6be:	b29b      	uxth	r3, r3
 800a6c0:	4313      	orrs	r3, r2
 800a6c2:	b29a      	uxth	r2, r3
 800a6c4:	693b      	ldr	r3, [r7, #16]
 800a6c6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	7b9a      	ldrb	r2, [r3, #14]
 800a6cc:	693b      	ldr	r3, [r7, #16]
 800a6ce:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	7bda      	ldrb	r2, [r3, #15]
 800a6d4:	693b      	ldr	r3, [r7, #16]
 800a6d6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	7c1a      	ldrb	r2, [r3, #16]
 800a6dc:	693b      	ldr	r3, [r7, #16]
 800a6de:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	7c5a      	ldrb	r2, [r3, #17]
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800a6e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	371c      	adds	r7, #28
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f4:	4770      	bx	lr
 800a6f6:	bf00      	nop
 800a6f8:	01000101 	.word	0x01000101

0800a6fc <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b08c      	sub	sp, #48	@ 0x30
 800a700:	af00      	add	r7, sp, #0
 800a702:	60f8      	str	r0, [r7, #12]
 800a704:	60b9      	str	r1, [r7, #8]
 800a706:	4613      	mov	r3, r2
 800a708:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a710:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800a712:	2300      	movs	r3, #0
 800a714:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a718:	2300      	movs	r3, #0
 800a71a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800a71e:	2300      	movs	r3, #0
 800a720:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d101      	bne.n	800a72e <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800a72a:	2302      	movs	r3, #2
 800a72c:	e0de      	b.n	800a8ec <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800a732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a734:	781b      	ldrb	r3, [r3, #0]
 800a736:	2b09      	cmp	r3, #9
 800a738:	d002      	beq.n	800a740 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800a73a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a73c:	2209      	movs	r2, #9
 800a73e:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	781a      	ldrb	r2, [r3, #0]
 800a744:	6a3b      	ldr	r3, [r7, #32]
 800a746:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	785a      	ldrb	r2, [r3, #1]
 800a74c:	6a3b      	ldr	r3, [r7, #32]
 800a74e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	3302      	adds	r3, #2
 800a754:	781b      	ldrb	r3, [r3, #0]
 800a756:	461a      	mov	r2, r3
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	3303      	adds	r3, #3
 800a75c:	781b      	ldrb	r3, [r3, #0]
 800a75e:	021b      	lsls	r3, r3, #8
 800a760:	b29b      	uxth	r3, r3
 800a762:	4313      	orrs	r3, r2
 800a764:	b29b      	uxth	r3, r3
 800a766:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a76a:	bf28      	it	cs
 800a76c:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800a770:	b29a      	uxth	r2, r3
 800a772:	6a3b      	ldr	r3, [r7, #32]
 800a774:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800a776:	68bb      	ldr	r3, [r7, #8]
 800a778:	791a      	ldrb	r2, [r3, #4]
 800a77a:	6a3b      	ldr	r3, [r7, #32]
 800a77c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800a77e:	68bb      	ldr	r3, [r7, #8]
 800a780:	795a      	ldrb	r2, [r3, #5]
 800a782:	6a3b      	ldr	r3, [r7, #32]
 800a784:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	799a      	ldrb	r2, [r3, #6]
 800a78a:	6a3b      	ldr	r3, [r7, #32]
 800a78c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800a78e:	68bb      	ldr	r3, [r7, #8]
 800a790:	79da      	ldrb	r2, [r3, #7]
 800a792:	6a3b      	ldr	r3, [r7, #32]
 800a794:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800a796:	68bb      	ldr	r3, [r7, #8]
 800a798:	7a1a      	ldrb	r2, [r3, #8]
 800a79a:	6a3b      	ldr	r3, [r7, #32]
 800a79c:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a79e:	88fb      	ldrh	r3, [r7, #6]
 800a7a0:	2b09      	cmp	r3, #9
 800a7a2:	f240 80a1 	bls.w	800a8e8 <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 800a7a6:	2309      	movs	r3, #9
 800a7a8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a7ae:	e085      	b.n	800a8bc <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a7b0:	f107 0316 	add.w	r3, r7, #22
 800a7b4:	4619      	mov	r1, r3
 800a7b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a7b8:	f000 f9e6 	bl	800ab88 <USBH_GetNextDesc>
 800a7bc:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800a7be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7c0:	785b      	ldrb	r3, [r3, #1]
 800a7c2:	2b04      	cmp	r3, #4
 800a7c4:	d17a      	bne.n	800a8bc <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800a7c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7c8:	781b      	ldrb	r3, [r3, #0]
 800a7ca:	2b09      	cmp	r3, #9
 800a7cc:	d002      	beq.n	800a7d4 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800a7ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7d0:	2209      	movs	r2, #9
 800a7d2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800a7d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a7d8:	221a      	movs	r2, #26
 800a7da:	fb02 f303 	mul.w	r3, r2, r3
 800a7de:	3308      	adds	r3, #8
 800a7e0:	6a3a      	ldr	r2, [r7, #32]
 800a7e2:	4413      	add	r3, r2
 800a7e4:	3302      	adds	r3, #2
 800a7e6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a7e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a7ea:	69f8      	ldr	r0, [r7, #28]
 800a7ec:	f000 f882 	bl	800a8f4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a7fa:	e043      	b.n	800a884 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a7fc:	f107 0316 	add.w	r3, r7, #22
 800a800:	4619      	mov	r1, r3
 800a802:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a804:	f000 f9c0 	bl	800ab88 <USBH_GetNextDesc>
 800a808:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a80a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a80c:	785b      	ldrb	r3, [r3, #1]
 800a80e:	2b05      	cmp	r3, #5
 800a810:	d138      	bne.n	800a884 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800a812:	69fb      	ldr	r3, [r7, #28]
 800a814:	795b      	ldrb	r3, [r3, #5]
 800a816:	2b01      	cmp	r3, #1
 800a818:	d113      	bne.n	800a842 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a81a:	69fb      	ldr	r3, [r7, #28]
 800a81c:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800a81e:	2b02      	cmp	r3, #2
 800a820:	d003      	beq.n	800a82a <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a822:	69fb      	ldr	r3, [r7, #28]
 800a824:	799b      	ldrb	r3, [r3, #6]
 800a826:	2b03      	cmp	r3, #3
 800a828:	d10b      	bne.n	800a842 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a82a:	69fb      	ldr	r3, [r7, #28]
 800a82c:	79db      	ldrb	r3, [r3, #7]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d10b      	bne.n	800a84a <USBH_ParseCfgDesc+0x14e>
 800a832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a834:	781b      	ldrb	r3, [r3, #0]
 800a836:	2b09      	cmp	r3, #9
 800a838:	d007      	beq.n	800a84a <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800a83a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a83c:	2209      	movs	r2, #9
 800a83e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a840:	e003      	b.n	800a84a <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800a842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a844:	2207      	movs	r2, #7
 800a846:	701a      	strb	r2, [r3, #0]
 800a848:	e000      	b.n	800a84c <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a84a:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a84c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a850:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a854:	3201      	adds	r2, #1
 800a856:	00d2      	lsls	r2, r2, #3
 800a858:	211a      	movs	r1, #26
 800a85a:	fb01 f303 	mul.w	r3, r1, r3
 800a85e:	4413      	add	r3, r2
 800a860:	3308      	adds	r3, #8
 800a862:	6a3a      	ldr	r2, [r7, #32]
 800a864:	4413      	add	r3, r2
 800a866:	3304      	adds	r3, #4
 800a868:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800a86a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a86c:	69b9      	ldr	r1, [r7, #24]
 800a86e:	68f8      	ldr	r0, [r7, #12]
 800a870:	f000 f86f 	bl	800a952 <USBH_ParseEPDesc>
 800a874:	4603      	mov	r3, r0
 800a876:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800a87a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a87e:	3301      	adds	r3, #1
 800a880:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a884:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a888:	2b01      	cmp	r3, #1
 800a88a:	d80a      	bhi.n	800a8a2 <USBH_ParseCfgDesc+0x1a6>
 800a88c:	69fb      	ldr	r3, [r7, #28]
 800a88e:	791b      	ldrb	r3, [r3, #4]
 800a890:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a894:	429a      	cmp	r2, r3
 800a896:	d204      	bcs.n	800a8a2 <USBH_ParseCfgDesc+0x1a6>
 800a898:	6a3b      	ldr	r3, [r7, #32]
 800a89a:	885a      	ldrh	r2, [r3, #2]
 800a89c:	8afb      	ldrh	r3, [r7, #22]
 800a89e:	429a      	cmp	r2, r3
 800a8a0:	d8ac      	bhi.n	800a7fc <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800a8a2:	69fb      	ldr	r3, [r7, #28]
 800a8a4:	791b      	ldrb	r3, [r3, #4]
 800a8a6:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a8aa:	429a      	cmp	r2, r3
 800a8ac:	d201      	bcs.n	800a8b2 <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 800a8ae:	2303      	movs	r3, #3
 800a8b0:	e01c      	b.n	800a8ec <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 800a8b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a8b6:	3301      	adds	r3, #1
 800a8b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a8bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a8c0:	2b01      	cmp	r3, #1
 800a8c2:	d805      	bhi.n	800a8d0 <USBH_ParseCfgDesc+0x1d4>
 800a8c4:	6a3b      	ldr	r3, [r7, #32]
 800a8c6:	885a      	ldrh	r2, [r3, #2]
 800a8c8:	8afb      	ldrh	r3, [r7, #22]
 800a8ca:	429a      	cmp	r2, r3
 800a8cc:	f63f af70 	bhi.w	800a7b0 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800a8d0:	6a3b      	ldr	r3, [r7, #32]
 800a8d2:	791b      	ldrb	r3, [r3, #4]
 800a8d4:	2b02      	cmp	r3, #2
 800a8d6:	bf28      	it	cs
 800a8d8:	2302      	movcs	r3, #2
 800a8da:	b2db      	uxtb	r3, r3
 800a8dc:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a8e0:	429a      	cmp	r2, r3
 800a8e2:	d201      	bcs.n	800a8e8 <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 800a8e4:	2303      	movs	r3, #3
 800a8e6:	e001      	b.n	800a8ec <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 800a8e8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	3730      	adds	r7, #48	@ 0x30
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd80      	pop	{r7, pc}

0800a8f4 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b083      	sub	sp, #12
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
 800a8fc:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	781a      	ldrb	r2, [r3, #0]
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	785a      	ldrb	r2, [r3, #1]
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	789a      	ldrb	r2, [r3, #2]
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	78da      	ldrb	r2, [r3, #3]
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	791a      	ldrb	r2, [r3, #4]
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	795a      	ldrb	r2, [r3, #5]
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	799a      	ldrb	r2, [r3, #6]
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	79da      	ldrb	r2, [r3, #7]
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	7a1a      	ldrb	r2, [r3, #8]
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	721a      	strb	r2, [r3, #8]
}
 800a946:	bf00      	nop
 800a948:	370c      	adds	r7, #12
 800a94a:	46bd      	mov	sp, r7
 800a94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a950:	4770      	bx	lr

0800a952 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800a952:	b480      	push	{r7}
 800a954:	b087      	sub	sp, #28
 800a956:	af00      	add	r7, sp, #0
 800a958:	60f8      	str	r0, [r7, #12]
 800a95a:	60b9      	str	r1, [r7, #8]
 800a95c:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800a95e:	2300      	movs	r3, #0
 800a960:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	781a      	ldrb	r2, [r3, #0]
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	785a      	ldrb	r2, [r3, #1]
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	789a      	ldrb	r2, [r3, #2]
 800a976:	68bb      	ldr	r3, [r7, #8]
 800a978:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	78da      	ldrb	r2, [r3, #3]
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	3304      	adds	r3, #4
 800a986:	781b      	ldrb	r3, [r3, #0]
 800a988:	461a      	mov	r2, r3
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	3305      	adds	r3, #5
 800a98e:	781b      	ldrb	r3, [r3, #0]
 800a990:	021b      	lsls	r3, r3, #8
 800a992:	b29b      	uxth	r3, r3
 800a994:	4313      	orrs	r3, r2
 800a996:	b29a      	uxth	r2, r3
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	799a      	ldrb	r2, [r3, #6]
 800a9a0:	68bb      	ldr	r3, [r7, #8]
 800a9a2:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a9a4:	68bb      	ldr	r3, [r7, #8]
 800a9a6:	889b      	ldrh	r3, [r3, #4]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d009      	beq.n	800a9c0 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a9b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a9b4:	d804      	bhi.n	800a9c0 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800a9b6:	68bb      	ldr	r3, [r7, #8]
 800a9b8:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a9ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a9be:	d901      	bls.n	800a9c4 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800a9c0:	2303      	movs	r3, #3
 800a9c2:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d136      	bne.n	800aa3c <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800a9ce:	68bb      	ldr	r3, [r7, #8]
 800a9d0:	78db      	ldrb	r3, [r3, #3]
 800a9d2:	f003 0303 	and.w	r3, r3, #3
 800a9d6:	2b02      	cmp	r3, #2
 800a9d8:	d108      	bne.n	800a9ec <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	889b      	ldrh	r3, [r3, #4]
 800a9de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a9e2:	f240 8097 	bls.w	800ab14 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a9e6:	2303      	movs	r3, #3
 800a9e8:	75fb      	strb	r3, [r7, #23]
 800a9ea:	e093      	b.n	800ab14 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	78db      	ldrb	r3, [r3, #3]
 800a9f0:	f003 0303 	and.w	r3, r3, #3
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d107      	bne.n	800aa08 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	889b      	ldrh	r3, [r3, #4]
 800a9fc:	2b40      	cmp	r3, #64	@ 0x40
 800a9fe:	f240 8089 	bls.w	800ab14 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800aa02:	2303      	movs	r3, #3
 800aa04:	75fb      	strb	r3, [r7, #23]
 800aa06:	e085      	b.n	800ab14 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800aa08:	68bb      	ldr	r3, [r7, #8]
 800aa0a:	78db      	ldrb	r3, [r3, #3]
 800aa0c:	f003 0303 	and.w	r3, r3, #3
 800aa10:	2b01      	cmp	r3, #1
 800aa12:	d005      	beq.n	800aa20 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	78db      	ldrb	r3, [r3, #3]
 800aa18:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800aa1c:	2b03      	cmp	r3, #3
 800aa1e:	d10a      	bne.n	800aa36 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	799b      	ldrb	r3, [r3, #6]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d003      	beq.n	800aa30 <USBH_ParseEPDesc+0xde>
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	799b      	ldrb	r3, [r3, #6]
 800aa2c:	2b10      	cmp	r3, #16
 800aa2e:	d970      	bls.n	800ab12 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800aa30:	2303      	movs	r3, #3
 800aa32:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800aa34:	e06d      	b.n	800ab12 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800aa36:	2303      	movs	r3, #3
 800aa38:	75fb      	strb	r3, [r7, #23]
 800aa3a:	e06b      	b.n	800ab14 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800aa42:	2b01      	cmp	r3, #1
 800aa44:	d13c      	bne.n	800aac0 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	78db      	ldrb	r3, [r3, #3]
 800aa4a:	f003 0303 	and.w	r3, r3, #3
 800aa4e:	2b02      	cmp	r3, #2
 800aa50:	d005      	beq.n	800aa5e <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800aa52:	68bb      	ldr	r3, [r7, #8]
 800aa54:	78db      	ldrb	r3, [r3, #3]
 800aa56:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d106      	bne.n	800aa6c <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800aa5e:	68bb      	ldr	r3, [r7, #8]
 800aa60:	889b      	ldrh	r3, [r3, #4]
 800aa62:	2b40      	cmp	r3, #64	@ 0x40
 800aa64:	d956      	bls.n	800ab14 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800aa66:	2303      	movs	r3, #3
 800aa68:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800aa6a:	e053      	b.n	800ab14 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	78db      	ldrb	r3, [r3, #3]
 800aa70:	f003 0303 	and.w	r3, r3, #3
 800aa74:	2b01      	cmp	r3, #1
 800aa76:	d10e      	bne.n	800aa96 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800aa78:	68bb      	ldr	r3, [r7, #8]
 800aa7a:	799b      	ldrb	r3, [r3, #6]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d007      	beq.n	800aa90 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800aa84:	2b10      	cmp	r3, #16
 800aa86:	d803      	bhi.n	800aa90 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800aa8c:	2b40      	cmp	r3, #64	@ 0x40
 800aa8e:	d941      	bls.n	800ab14 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800aa90:	2303      	movs	r3, #3
 800aa92:	75fb      	strb	r3, [r7, #23]
 800aa94:	e03e      	b.n	800ab14 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	78db      	ldrb	r3, [r3, #3]
 800aa9a:	f003 0303 	and.w	r3, r3, #3
 800aa9e:	2b03      	cmp	r3, #3
 800aaa0:	d10b      	bne.n	800aaba <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800aaa2:	68bb      	ldr	r3, [r7, #8]
 800aaa4:	799b      	ldrb	r3, [r3, #6]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d004      	beq.n	800aab4 <USBH_ParseEPDesc+0x162>
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	889b      	ldrh	r3, [r3, #4]
 800aaae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aab2:	d32f      	bcc.n	800ab14 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800aab4:	2303      	movs	r3, #3
 800aab6:	75fb      	strb	r3, [r7, #23]
 800aab8:	e02c      	b.n	800ab14 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800aaba:	2303      	movs	r3, #3
 800aabc:	75fb      	strb	r3, [r7, #23]
 800aabe:	e029      	b.n	800ab14 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800aac6:	2b02      	cmp	r3, #2
 800aac8:	d120      	bne.n	800ab0c <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800aaca:	68bb      	ldr	r3, [r7, #8]
 800aacc:	78db      	ldrb	r3, [r3, #3]
 800aace:	f003 0303 	and.w	r3, r3, #3
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d106      	bne.n	800aae4 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	889b      	ldrh	r3, [r3, #4]
 800aada:	2b08      	cmp	r3, #8
 800aadc:	d01a      	beq.n	800ab14 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800aade:	2303      	movs	r3, #3
 800aae0:	75fb      	strb	r3, [r7, #23]
 800aae2:	e017      	b.n	800ab14 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	78db      	ldrb	r3, [r3, #3]
 800aae8:	f003 0303 	and.w	r3, r3, #3
 800aaec:	2b03      	cmp	r3, #3
 800aaee:	d10a      	bne.n	800ab06 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	799b      	ldrb	r3, [r3, #6]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d003      	beq.n	800ab00 <USBH_ParseEPDesc+0x1ae>
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	889b      	ldrh	r3, [r3, #4]
 800aafc:	2b08      	cmp	r3, #8
 800aafe:	d909      	bls.n	800ab14 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ab00:	2303      	movs	r3, #3
 800ab02:	75fb      	strb	r3, [r7, #23]
 800ab04:	e006      	b.n	800ab14 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800ab06:	2303      	movs	r3, #3
 800ab08:	75fb      	strb	r3, [r7, #23]
 800ab0a:	e003      	b.n	800ab14 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800ab0c:	2303      	movs	r3, #3
 800ab0e:	75fb      	strb	r3, [r7, #23]
 800ab10:	e000      	b.n	800ab14 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800ab12:	bf00      	nop
  }

  return status;
 800ab14:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	371c      	adds	r7, #28
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab20:	4770      	bx	lr

0800ab22 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800ab22:	b480      	push	{r7}
 800ab24:	b087      	sub	sp, #28
 800ab26:	af00      	add	r7, sp, #0
 800ab28:	60f8      	str	r0, [r7, #12]
 800ab2a:	60b9      	str	r1, [r7, #8]
 800ab2c:	4613      	mov	r3, r2
 800ab2e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	3301      	adds	r3, #1
 800ab34:	781b      	ldrb	r3, [r3, #0]
 800ab36:	2b03      	cmp	r3, #3
 800ab38:	d120      	bne.n	800ab7c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	781b      	ldrb	r3, [r3, #0]
 800ab3e:	1e9a      	subs	r2, r3, #2
 800ab40:	88fb      	ldrh	r3, [r7, #6]
 800ab42:	4293      	cmp	r3, r2
 800ab44:	bf28      	it	cs
 800ab46:	4613      	movcs	r3, r2
 800ab48:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	3302      	adds	r3, #2
 800ab4e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800ab50:	2300      	movs	r3, #0
 800ab52:	82fb      	strh	r3, [r7, #22]
 800ab54:	e00b      	b.n	800ab6e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800ab56:	8afb      	ldrh	r3, [r7, #22]
 800ab58:	68fa      	ldr	r2, [r7, #12]
 800ab5a:	4413      	add	r3, r2
 800ab5c:	781a      	ldrb	r2, [r3, #0]
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	701a      	strb	r2, [r3, #0]
      pdest++;
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	3301      	adds	r3, #1
 800ab66:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800ab68:	8afb      	ldrh	r3, [r7, #22]
 800ab6a:	3302      	adds	r3, #2
 800ab6c:	82fb      	strh	r3, [r7, #22]
 800ab6e:	8afa      	ldrh	r2, [r7, #22]
 800ab70:	8abb      	ldrh	r3, [r7, #20]
 800ab72:	429a      	cmp	r2, r3
 800ab74:	d3ef      	bcc.n	800ab56 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800ab76:	68bb      	ldr	r3, [r7, #8]
 800ab78:	2200      	movs	r2, #0
 800ab7a:	701a      	strb	r2, [r3, #0]
  }
}
 800ab7c:	bf00      	nop
 800ab7e:	371c      	adds	r7, #28
 800ab80:	46bd      	mov	sp, r7
 800ab82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab86:	4770      	bx	lr

0800ab88 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ab88:	b480      	push	{r7}
 800ab8a:	b085      	sub	sp, #20
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
 800ab90:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	881b      	ldrh	r3, [r3, #0]
 800ab96:	687a      	ldr	r2, [r7, #4]
 800ab98:	7812      	ldrb	r2, [r2, #0]
 800ab9a:	4413      	add	r3, r2
 800ab9c:	b29a      	uxth	r2, r3
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	781b      	ldrb	r3, [r3, #0]
 800aba6:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	4413      	add	r3, r2
 800abac:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800abae:	68fb      	ldr	r3, [r7, #12]
}
 800abb0:	4618      	mov	r0, r3
 800abb2:	3714      	adds	r7, #20
 800abb4:	46bd      	mov	sp, r7
 800abb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abba:	4770      	bx	lr

0800abbc <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b086      	sub	sp, #24
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	60f8      	str	r0, [r7, #12]
 800abc4:	60b9      	str	r1, [r7, #8]
 800abc6:	4613      	mov	r3, r2
 800abc8:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800abca:	2301      	movs	r3, #1
 800abcc:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	789b      	ldrb	r3, [r3, #2]
 800abd2:	2b01      	cmp	r3, #1
 800abd4:	d002      	beq.n	800abdc <USBH_CtlReq+0x20>
 800abd6:	2b02      	cmp	r3, #2
 800abd8:	d00f      	beq.n	800abfa <USBH_CtlReq+0x3e>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 800abda:	e027      	b.n	800ac2c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	68ba      	ldr	r2, [r7, #8]
 800abe0:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	88fa      	ldrh	r2, [r7, #6]
 800abe6:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	2201      	movs	r2, #1
 800abec:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	2202      	movs	r2, #2
 800abf2:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800abf4:	2301      	movs	r3, #1
 800abf6:	75fb      	strb	r3, [r7, #23]
      break;
 800abf8:	e018      	b.n	800ac2c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800abfa:	68f8      	ldr	r0, [r7, #12]
 800abfc:	f000 f81c 	bl	800ac38 <USBH_HandleControl>
 800ac00:	4603      	mov	r3, r0
 800ac02:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800ac04:	7dfb      	ldrb	r3, [r7, #23]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d002      	beq.n	800ac10 <USBH_CtlReq+0x54>
 800ac0a:	7dfb      	ldrb	r3, [r7, #23]
 800ac0c:	2b03      	cmp	r3, #3
 800ac0e:	d106      	bne.n	800ac1e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	2201      	movs	r2, #1
 800ac14:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	2200      	movs	r2, #0
 800ac1a:	761a      	strb	r2, [r3, #24]
      break;
 800ac1c:	e005      	b.n	800ac2a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800ac1e:	7dfb      	ldrb	r3, [r7, #23]
 800ac20:	2b02      	cmp	r3, #2
 800ac22:	d102      	bne.n	800ac2a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	2201      	movs	r2, #1
 800ac28:	709a      	strb	r2, [r3, #2]
      break;
 800ac2a:	bf00      	nop
  }
  return status;
 800ac2c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac2e:	4618      	mov	r0, r3
 800ac30:	3718      	adds	r7, #24
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bd80      	pop	{r7, pc}
	...

0800ac38 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b086      	sub	sp, #24
 800ac3c:	af02      	add	r7, sp, #8
 800ac3e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800ac40:	2301      	movs	r3, #1
 800ac42:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ac44:	2300      	movs	r3, #0
 800ac46:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	7e1b      	ldrb	r3, [r3, #24]
 800ac4c:	3b01      	subs	r3, #1
 800ac4e:	2b0a      	cmp	r3, #10
 800ac50:	f200 8157 	bhi.w	800af02 <USBH_HandleControl+0x2ca>
 800ac54:	a201      	add	r2, pc, #4	@ (adr r2, 800ac5c <USBH_HandleControl+0x24>)
 800ac56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac5a:	bf00      	nop
 800ac5c:	0800ac89 	.word	0x0800ac89
 800ac60:	0800aca3 	.word	0x0800aca3
 800ac64:	0800ad0d 	.word	0x0800ad0d
 800ac68:	0800ad33 	.word	0x0800ad33
 800ac6c:	0800ad6d 	.word	0x0800ad6d
 800ac70:	0800ad97 	.word	0x0800ad97
 800ac74:	0800ade9 	.word	0x0800ade9
 800ac78:	0800ae0b 	.word	0x0800ae0b
 800ac7c:	0800ae47 	.word	0x0800ae47
 800ac80:	0800ae6d 	.word	0x0800ae6d
 800ac84:	0800aeab 	.word	0x0800aeab
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	f103 0110 	add.w	r1, r3, #16
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	795b      	ldrb	r3, [r3, #5]
 800ac92:	461a      	mov	r2, r3
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f000 f945 	bl	800af24 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2202      	movs	r2, #2
 800ac9e:	761a      	strb	r2, [r3, #24]
      break;
 800aca0:	e13a      	b.n	800af18 <USBH_HandleControl+0x2e0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	795b      	ldrb	r3, [r3, #5]
 800aca6:	4619      	mov	r1, r3
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f000 fcc7 	bl	800b63c <USBH_LL_GetURBState>
 800acae:	4603      	mov	r3, r0
 800acb0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800acb2:	7bbb      	ldrb	r3, [r7, #14]
 800acb4:	2b01      	cmp	r3, #1
 800acb6:	d11e      	bne.n	800acf6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	7c1b      	ldrb	r3, [r3, #16]
 800acbc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800acc0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	8adb      	ldrh	r3, [r3, #22]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d00a      	beq.n	800ace0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800acca:	7b7b      	ldrb	r3, [r7, #13]
 800accc:	2b80      	cmp	r3, #128	@ 0x80
 800acce:	d103      	bne.n	800acd8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2203      	movs	r2, #3
 800acd4:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800acd6:	e116      	b.n	800af06 <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_DATA_OUT;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2205      	movs	r2, #5
 800acdc:	761a      	strb	r2, [r3, #24]
      break;
 800acde:	e112      	b.n	800af06 <USBH_HandleControl+0x2ce>
          if (direction == USB_D2H)
 800ace0:	7b7b      	ldrb	r3, [r7, #13]
 800ace2:	2b80      	cmp	r3, #128	@ 0x80
 800ace4:	d103      	bne.n	800acee <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2209      	movs	r2, #9
 800acea:	761a      	strb	r2, [r3, #24]
      break;
 800acec:	e10b      	b.n	800af06 <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_STATUS_IN;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2207      	movs	r2, #7
 800acf2:	761a      	strb	r2, [r3, #24]
      break;
 800acf4:	e107      	b.n	800af06 <USBH_HandleControl+0x2ce>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800acf6:	7bbb      	ldrb	r3, [r7, #14]
 800acf8:	2b04      	cmp	r3, #4
 800acfa:	d003      	beq.n	800ad04 <USBH_HandleControl+0xcc>
 800acfc:	7bbb      	ldrb	r3, [r7, #14]
 800acfe:	2b02      	cmp	r3, #2
 800ad00:	f040 8101 	bne.w	800af06 <USBH_HandleControl+0x2ce>
          phost->Control.state = CTRL_ERROR;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	220b      	movs	r2, #11
 800ad08:	761a      	strb	r2, [r3, #24]
      break;
 800ad0a:	e0fc      	b.n	800af06 <USBH_HandleControl+0x2ce>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ad12:	b29a      	uxth	r2, r3
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	6899      	ldr	r1, [r3, #8]
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	899a      	ldrh	r2, [r3, #12]
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	791b      	ldrb	r3, [r3, #4]
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	f000 f93c 	bl	800afa2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2204      	movs	r2, #4
 800ad2e:	761a      	strb	r2, [r3, #24]
      break;
 800ad30:	e0f2      	b.n	800af18 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	791b      	ldrb	r3, [r3, #4]
 800ad36:	4619      	mov	r1, r3
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	f000 fc7f 	bl	800b63c <USBH_LL_GetURBState>
 800ad3e:	4603      	mov	r3, r0
 800ad40:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800ad42:	7bbb      	ldrb	r3, [r7, #14]
 800ad44:	2b01      	cmp	r3, #1
 800ad46:	d103      	bne.n	800ad50 <USBH_HandleControl+0x118>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2209      	movs	r2, #9
 800ad4c:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800ad4e:	e0dc      	b.n	800af0a <USBH_HandleControl+0x2d2>
      else if (URB_Status == USBH_URB_STALL)
 800ad50:	7bbb      	ldrb	r3, [r7, #14]
 800ad52:	2b05      	cmp	r3, #5
 800ad54:	d102      	bne.n	800ad5c <USBH_HandleControl+0x124>
        status = USBH_NOT_SUPPORTED;
 800ad56:	2303      	movs	r3, #3
 800ad58:	73fb      	strb	r3, [r7, #15]
      break;
 800ad5a:	e0d6      	b.n	800af0a <USBH_HandleControl+0x2d2>
        if (URB_Status == USBH_URB_ERROR)
 800ad5c:	7bbb      	ldrb	r3, [r7, #14]
 800ad5e:	2b04      	cmp	r3, #4
 800ad60:	f040 80d3 	bne.w	800af0a <USBH_HandleControl+0x2d2>
          phost->Control.state = CTRL_ERROR;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	220b      	movs	r2, #11
 800ad68:	761a      	strb	r2, [r3, #24]
      break;
 800ad6a:	e0ce      	b.n	800af0a <USBH_HandleControl+0x2d2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	6899      	ldr	r1, [r3, #8]
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	899a      	ldrh	r2, [r3, #12]
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	795b      	ldrb	r3, [r3, #5]
 800ad78:	2001      	movs	r0, #1
 800ad7a:	9000      	str	r0, [sp, #0]
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	f000 f8eb 	bl	800af58 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ad88:	b29a      	uxth	r2, r3
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2206      	movs	r2, #6
 800ad92:	761a      	strb	r2, [r3, #24]
      break;
 800ad94:	e0c0      	b.n	800af18 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	795b      	ldrb	r3, [r3, #5]
 800ad9a:	4619      	mov	r1, r3
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f000 fc4d 	bl	800b63c <USBH_LL_GetURBState>
 800ada2:	4603      	mov	r3, r0
 800ada4:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ada6:	7bbb      	ldrb	r3, [r7, #14]
 800ada8:	2b01      	cmp	r3, #1
 800adaa:	d103      	bne.n	800adb4 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2207      	movs	r2, #7
 800adb0:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800adb2:	e0ac      	b.n	800af0e <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_STALL)
 800adb4:	7bbb      	ldrb	r3, [r7, #14]
 800adb6:	2b05      	cmp	r3, #5
 800adb8:	d105      	bne.n	800adc6 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	220c      	movs	r2, #12
 800adbe:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800adc0:	2303      	movs	r3, #3
 800adc2:	73fb      	strb	r3, [r7, #15]
      break;
 800adc4:	e0a3      	b.n	800af0e <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_NOTREADY)
 800adc6:	7bbb      	ldrb	r3, [r7, #14]
 800adc8:	2b02      	cmp	r3, #2
 800adca:	d103      	bne.n	800add4 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2205      	movs	r2, #5
 800add0:	761a      	strb	r2, [r3, #24]
      break;
 800add2:	e09c      	b.n	800af0e <USBH_HandleControl+0x2d6>
        if (URB_Status == USBH_URB_ERROR)
 800add4:	7bbb      	ldrb	r3, [r7, #14]
 800add6:	2b04      	cmp	r3, #4
 800add8:	f040 8099 	bne.w	800af0e <USBH_HandleControl+0x2d6>
          phost->Control.state = CTRL_ERROR;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	220b      	movs	r2, #11
 800ade0:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800ade2:	2302      	movs	r3, #2
 800ade4:	73fb      	strb	r3, [r7, #15]
      break;
 800ade6:	e092      	b.n	800af0e <USBH_HandleControl+0x2d6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	791b      	ldrb	r3, [r3, #4]
 800adec:	2200      	movs	r2, #0
 800adee:	2100      	movs	r1, #0
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f000 f8d6 	bl	800afa2 <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800adfc:	b29a      	uxth	r2, r3
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2208      	movs	r2, #8
 800ae06:	761a      	strb	r2, [r3, #24]

      break;
 800ae08:	e086      	b.n	800af18 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	791b      	ldrb	r3, [r3, #4]
 800ae0e:	4619      	mov	r1, r3
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	f000 fc13 	bl	800b63c <USBH_LL_GetURBState>
 800ae16:	4603      	mov	r3, r0
 800ae18:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ae1a:	7bbb      	ldrb	r3, [r7, #14]
 800ae1c:	2b01      	cmp	r3, #1
 800ae1e:	d105      	bne.n	800ae2c <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	220d      	movs	r2, #13
 800ae24:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800ae26:	2300      	movs	r3, #0
 800ae28:	73fb      	strb	r3, [r7, #15]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800ae2a:	e072      	b.n	800af12 <USBH_HandleControl+0x2da>
      else if (URB_Status == USBH_URB_ERROR)
 800ae2c:	7bbb      	ldrb	r3, [r7, #14]
 800ae2e:	2b04      	cmp	r3, #4
 800ae30:	d103      	bne.n	800ae3a <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	220b      	movs	r2, #11
 800ae36:	761a      	strb	r2, [r3, #24]
      break;
 800ae38:	e06b      	b.n	800af12 <USBH_HandleControl+0x2da>
        if (URB_Status == USBH_URB_STALL)
 800ae3a:	7bbb      	ldrb	r3, [r7, #14]
 800ae3c:	2b05      	cmp	r3, #5
 800ae3e:	d168      	bne.n	800af12 <USBH_HandleControl+0x2da>
          status = USBH_NOT_SUPPORTED;
 800ae40:	2303      	movs	r3, #3
 800ae42:	73fb      	strb	r3, [r7, #15]
      break;
 800ae44:	e065      	b.n	800af12 <USBH_HandleControl+0x2da>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	795b      	ldrb	r3, [r3, #5]
 800ae4a:	2201      	movs	r2, #1
 800ae4c:	9200      	str	r2, [sp, #0]
 800ae4e:	2200      	movs	r2, #0
 800ae50:	2100      	movs	r1, #0
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f000 f880 	bl	800af58 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ae5e:	b29a      	uxth	r2, r3
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	220a      	movs	r2, #10
 800ae68:	761a      	strb	r2, [r3, #24]
      break;
 800ae6a:	e055      	b.n	800af18 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	795b      	ldrb	r3, [r3, #5]
 800ae70:	4619      	mov	r1, r3
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f000 fbe2 	bl	800b63c <USBH_LL_GetURBState>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800ae7c:	7bbb      	ldrb	r3, [r7, #14]
 800ae7e:	2b01      	cmp	r3, #1
 800ae80:	d105      	bne.n	800ae8e <USBH_HandleControl+0x256>
      {
        status = USBH_OK;
 800ae82:	2300      	movs	r3, #0
 800ae84:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	220d      	movs	r2, #13
 800ae8a:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800ae8c:	e043      	b.n	800af16 <USBH_HandleControl+0x2de>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ae8e:	7bbb      	ldrb	r3, [r7, #14]
 800ae90:	2b02      	cmp	r3, #2
 800ae92:	d103      	bne.n	800ae9c <USBH_HandleControl+0x264>
        phost->Control.state = CTRL_STATUS_OUT;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2209      	movs	r2, #9
 800ae98:	761a      	strb	r2, [r3, #24]
      break;
 800ae9a:	e03c      	b.n	800af16 <USBH_HandleControl+0x2de>
        if (URB_Status == USBH_URB_ERROR)
 800ae9c:	7bbb      	ldrb	r3, [r7, #14]
 800ae9e:	2b04      	cmp	r3, #4
 800aea0:	d139      	bne.n	800af16 <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	220b      	movs	r2, #11
 800aea6:	761a      	strb	r2, [r3, #24]
      break;
 800aea8:	e035      	b.n	800af16 <USBH_HandleControl+0x2de>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	7e5b      	ldrb	r3, [r3, #25]
 800aeae:	3301      	adds	r3, #1
 800aeb0:	b2da      	uxtb	r2, r3
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	765a      	strb	r2, [r3, #25]
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	7e5b      	ldrb	r3, [r3, #25]
 800aeba:	2b02      	cmp	r3, #2
 800aebc:	d806      	bhi.n	800aecc <USBH_HandleControl+0x294>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2201      	movs	r2, #1
 800aec2:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2201      	movs	r2, #1
 800aec8:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800aeca:	e025      	b.n	800af18 <USBH_HandleControl+0x2e0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800aed2:	2106      	movs	r1, #6
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2200      	movs	r2, #0
 800aedc:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	795b      	ldrb	r3, [r3, #5]
 800aee2:	4619      	mov	r1, r3
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f000 f90d 	bl	800b104 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	791b      	ldrb	r3, [r3, #4]
 800aeee:	4619      	mov	r1, r3
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f000 f907 	bl	800b104 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2200      	movs	r2, #0
 800aefa:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800aefc:	2302      	movs	r3, #2
 800aefe:	73fb      	strb	r3, [r7, #15]
      break;
 800af00:	e00a      	b.n	800af18 <USBH_HandleControl+0x2e0>

    default:
      break;
 800af02:	bf00      	nop
 800af04:	e008      	b.n	800af18 <USBH_HandleControl+0x2e0>
      break;
 800af06:	bf00      	nop
 800af08:	e006      	b.n	800af18 <USBH_HandleControl+0x2e0>
      break;
 800af0a:	bf00      	nop
 800af0c:	e004      	b.n	800af18 <USBH_HandleControl+0x2e0>
      break;
 800af0e:	bf00      	nop
 800af10:	e002      	b.n	800af18 <USBH_HandleControl+0x2e0>
      break;
 800af12:	bf00      	nop
 800af14:	e000      	b.n	800af18 <USBH_HandleControl+0x2e0>
      break;
 800af16:	bf00      	nop
  }

  return status;
 800af18:	7bfb      	ldrb	r3, [r7, #15]
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	3710      	adds	r7, #16
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}
 800af22:	bf00      	nop

0800af24 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b088      	sub	sp, #32
 800af28:	af04      	add	r7, sp, #16
 800af2a:	60f8      	str	r0, [r7, #12]
 800af2c:	60b9      	str	r1, [r7, #8]
 800af2e:	4613      	mov	r3, r2
 800af30:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800af32:	79f9      	ldrb	r1, [r7, #7]
 800af34:	2300      	movs	r3, #0
 800af36:	9303      	str	r3, [sp, #12]
 800af38:	2308      	movs	r3, #8
 800af3a:	9302      	str	r3, [sp, #8]
 800af3c:	68bb      	ldr	r3, [r7, #8]
 800af3e:	9301      	str	r3, [sp, #4]
 800af40:	2300      	movs	r3, #0
 800af42:	9300      	str	r3, [sp, #0]
 800af44:	2300      	movs	r3, #0
 800af46:	2200      	movs	r2, #0
 800af48:	68f8      	ldr	r0, [r7, #12]
 800af4a:	f000 fb46 	bl	800b5da <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800af4e:	2300      	movs	r3, #0
}
 800af50:	4618      	mov	r0, r3
 800af52:	3710      	adds	r7, #16
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}

0800af58 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b088      	sub	sp, #32
 800af5c:	af04      	add	r7, sp, #16
 800af5e:	60f8      	str	r0, [r7, #12]
 800af60:	60b9      	str	r1, [r7, #8]
 800af62:	4611      	mov	r1, r2
 800af64:	461a      	mov	r2, r3
 800af66:	460b      	mov	r3, r1
 800af68:	80fb      	strh	r3, [r7, #6]
 800af6a:	4613      	mov	r3, r2
 800af6c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800af74:	2b00      	cmp	r3, #0
 800af76:	d001      	beq.n	800af7c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800af78:	2300      	movs	r3, #0
 800af7a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800af7c:	7979      	ldrb	r1, [r7, #5]
 800af7e:	7e3b      	ldrb	r3, [r7, #24]
 800af80:	9303      	str	r3, [sp, #12]
 800af82:	88fb      	ldrh	r3, [r7, #6]
 800af84:	9302      	str	r3, [sp, #8]
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	9301      	str	r3, [sp, #4]
 800af8a:	2301      	movs	r3, #1
 800af8c:	9300      	str	r3, [sp, #0]
 800af8e:	2300      	movs	r3, #0
 800af90:	2200      	movs	r2, #0
 800af92:	68f8      	ldr	r0, [r7, #12]
 800af94:	f000 fb21 	bl	800b5da <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800af98:	2300      	movs	r3, #0
}
 800af9a:	4618      	mov	r0, r3
 800af9c:	3710      	adds	r7, #16
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}

0800afa2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800afa2:	b580      	push	{r7, lr}
 800afa4:	b088      	sub	sp, #32
 800afa6:	af04      	add	r7, sp, #16
 800afa8:	60f8      	str	r0, [r7, #12]
 800afaa:	60b9      	str	r1, [r7, #8]
 800afac:	4611      	mov	r1, r2
 800afae:	461a      	mov	r2, r3
 800afb0:	460b      	mov	r3, r1
 800afb2:	80fb      	strh	r3, [r7, #6]
 800afb4:	4613      	mov	r3, r2
 800afb6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800afb8:	7979      	ldrb	r1, [r7, #5]
 800afba:	2300      	movs	r3, #0
 800afbc:	9303      	str	r3, [sp, #12]
 800afbe:	88fb      	ldrh	r3, [r7, #6]
 800afc0:	9302      	str	r3, [sp, #8]
 800afc2:	68bb      	ldr	r3, [r7, #8]
 800afc4:	9301      	str	r3, [sp, #4]
 800afc6:	2301      	movs	r3, #1
 800afc8:	9300      	str	r3, [sp, #0]
 800afca:	2300      	movs	r3, #0
 800afcc:	2201      	movs	r2, #1
 800afce:	68f8      	ldr	r0, [r7, #12]
 800afd0:	f000 fb03 	bl	800b5da <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800afd4:	2300      	movs	r3, #0

}
 800afd6:	4618      	mov	r0, r3
 800afd8:	3710      	adds	r7, #16
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}

0800afde <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800afde:	b580      	push	{r7, lr}
 800afe0:	b088      	sub	sp, #32
 800afe2:	af04      	add	r7, sp, #16
 800afe4:	60f8      	str	r0, [r7, #12]
 800afe6:	60b9      	str	r1, [r7, #8]
 800afe8:	4611      	mov	r1, r2
 800afea:	461a      	mov	r2, r3
 800afec:	460b      	mov	r3, r1
 800afee:	80fb      	strh	r3, [r7, #6]
 800aff0:	4613      	mov	r3, r2
 800aff2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800affa:	2b00      	cmp	r3, #0
 800affc:	d001      	beq.n	800b002 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800affe:	2300      	movs	r3, #0
 800b000:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b002:	7979      	ldrb	r1, [r7, #5]
 800b004:	7e3b      	ldrb	r3, [r7, #24]
 800b006:	9303      	str	r3, [sp, #12]
 800b008:	88fb      	ldrh	r3, [r7, #6]
 800b00a:	9302      	str	r3, [sp, #8]
 800b00c:	68bb      	ldr	r3, [r7, #8]
 800b00e:	9301      	str	r3, [sp, #4]
 800b010:	2301      	movs	r3, #1
 800b012:	9300      	str	r3, [sp, #0]
 800b014:	2302      	movs	r3, #2
 800b016:	2200      	movs	r2, #0
 800b018:	68f8      	ldr	r0, [r7, #12]
 800b01a:	f000 fade 	bl	800b5da <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b01e:	2300      	movs	r3, #0
}
 800b020:	4618      	mov	r0, r3
 800b022:	3710      	adds	r7, #16
 800b024:	46bd      	mov	sp, r7
 800b026:	bd80      	pop	{r7, pc}

0800b028 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b088      	sub	sp, #32
 800b02c:	af04      	add	r7, sp, #16
 800b02e:	60f8      	str	r0, [r7, #12]
 800b030:	60b9      	str	r1, [r7, #8]
 800b032:	4611      	mov	r1, r2
 800b034:	461a      	mov	r2, r3
 800b036:	460b      	mov	r3, r1
 800b038:	80fb      	strh	r3, [r7, #6]
 800b03a:	4613      	mov	r3, r2
 800b03c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b03e:	7979      	ldrb	r1, [r7, #5]
 800b040:	2300      	movs	r3, #0
 800b042:	9303      	str	r3, [sp, #12]
 800b044:	88fb      	ldrh	r3, [r7, #6]
 800b046:	9302      	str	r3, [sp, #8]
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	9301      	str	r3, [sp, #4]
 800b04c:	2301      	movs	r3, #1
 800b04e:	9300      	str	r3, [sp, #0]
 800b050:	2302      	movs	r3, #2
 800b052:	2201      	movs	r2, #1
 800b054:	68f8      	ldr	r0, [r7, #12]
 800b056:	f000 fac0 	bl	800b5da <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b05a:	2300      	movs	r3, #0
}
 800b05c:	4618      	mov	r0, r3
 800b05e:	3710      	adds	r7, #16
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}

0800b064 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b086      	sub	sp, #24
 800b068:	af04      	add	r7, sp, #16
 800b06a:	6078      	str	r0, [r7, #4]
 800b06c:	4608      	mov	r0, r1
 800b06e:	4611      	mov	r1, r2
 800b070:	461a      	mov	r2, r3
 800b072:	4603      	mov	r3, r0
 800b074:	70fb      	strb	r3, [r7, #3]
 800b076:	460b      	mov	r3, r1
 800b078:	70bb      	strb	r3, [r7, #2]
 800b07a:	4613      	mov	r3, r2
 800b07c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b07e:	7878      	ldrb	r0, [r7, #1]
 800b080:	78ba      	ldrb	r2, [r7, #2]
 800b082:	78f9      	ldrb	r1, [r7, #3]
 800b084:	8b3b      	ldrh	r3, [r7, #24]
 800b086:	9302      	str	r3, [sp, #8]
 800b088:	7d3b      	ldrb	r3, [r7, #20]
 800b08a:	9301      	str	r3, [sp, #4]
 800b08c:	7c3b      	ldrb	r3, [r7, #16]
 800b08e:	9300      	str	r3, [sp, #0]
 800b090:	4603      	mov	r3, r0
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f000 fa53 	bl	800b53e <USBH_LL_OpenPipe>

  return USBH_OK;
 800b098:	2300      	movs	r3, #0
}
 800b09a:	4618      	mov	r0, r3
 800b09c:	3708      	adds	r7, #8
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	bd80      	pop	{r7, pc}

0800b0a2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b0a2:	b580      	push	{r7, lr}
 800b0a4:	b082      	sub	sp, #8
 800b0a6:	af00      	add	r7, sp, #0
 800b0a8:	6078      	str	r0, [r7, #4]
 800b0aa:	460b      	mov	r3, r1
 800b0ac:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800b0ae:	78fb      	ldrb	r3, [r7, #3]
 800b0b0:	4619      	mov	r1, r3
 800b0b2:	6878      	ldr	r0, [r7, #4]
 800b0b4:	f000 fa72 	bl	800b59c <USBH_LL_ClosePipe>

  return USBH_OK;
 800b0b8:	2300      	movs	r3, #0
}
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	3708      	adds	r7, #8
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bd80      	pop	{r7, pc}

0800b0c2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b0c2:	b580      	push	{r7, lr}
 800b0c4:	b084      	sub	sp, #16
 800b0c6:	af00      	add	r7, sp, #0
 800b0c8:	6078      	str	r0, [r7, #4]
 800b0ca:	460b      	mov	r3, r1
 800b0cc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f000 f836 	bl	800b140 <USBH_GetFreePipe>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b0d8:	89fb      	ldrh	r3, [r7, #14]
 800b0da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b0de:	4293      	cmp	r3, r2
 800b0e0:	d00a      	beq.n	800b0f8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800b0e2:	78fa      	ldrb	r2, [r7, #3]
 800b0e4:	89fb      	ldrh	r3, [r7, #14]
 800b0e6:	f003 030f 	and.w	r3, r3, #15
 800b0ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b0ee:	6879      	ldr	r1, [r7, #4]
 800b0f0:	33e0      	adds	r3, #224	@ 0xe0
 800b0f2:	009b      	lsls	r3, r3, #2
 800b0f4:	440b      	add	r3, r1
 800b0f6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b0f8:	89fb      	ldrh	r3, [r7, #14]
 800b0fa:	b2db      	uxtb	r3, r3
}
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	3710      	adds	r7, #16
 800b100:	46bd      	mov	sp, r7
 800b102:	bd80      	pop	{r7, pc}

0800b104 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b104:	b480      	push	{r7}
 800b106:	b083      	sub	sp, #12
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
 800b10c:	460b      	mov	r3, r1
 800b10e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800b110:	78fb      	ldrb	r3, [r7, #3]
 800b112:	2b0f      	cmp	r3, #15
 800b114:	d80d      	bhi.n	800b132 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b116:	78fb      	ldrb	r3, [r7, #3]
 800b118:	687a      	ldr	r2, [r7, #4]
 800b11a:	33e0      	adds	r3, #224	@ 0xe0
 800b11c:	009b      	lsls	r3, r3, #2
 800b11e:	4413      	add	r3, r2
 800b120:	685a      	ldr	r2, [r3, #4]
 800b122:	78fb      	ldrb	r3, [r7, #3]
 800b124:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b128:	6879      	ldr	r1, [r7, #4]
 800b12a:	33e0      	adds	r3, #224	@ 0xe0
 800b12c:	009b      	lsls	r3, r3, #2
 800b12e:	440b      	add	r3, r1
 800b130:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b132:	2300      	movs	r3, #0
}
 800b134:	4618      	mov	r0, r3
 800b136:	370c      	adds	r7, #12
 800b138:	46bd      	mov	sp, r7
 800b13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13e:	4770      	bx	lr

0800b140 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b140:	b480      	push	{r7}
 800b142:	b085      	sub	sp, #20
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b148:	2300      	movs	r3, #0
 800b14a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800b14c:	2300      	movs	r3, #0
 800b14e:	73fb      	strb	r3, [r7, #15]
 800b150:	e00f      	b.n	800b172 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b152:	7bfb      	ldrb	r3, [r7, #15]
 800b154:	687a      	ldr	r2, [r7, #4]
 800b156:	33e0      	adds	r3, #224	@ 0xe0
 800b158:	009b      	lsls	r3, r3, #2
 800b15a:	4413      	add	r3, r2
 800b15c:	685b      	ldr	r3, [r3, #4]
 800b15e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b162:	2b00      	cmp	r3, #0
 800b164:	d102      	bne.n	800b16c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b166:	7bfb      	ldrb	r3, [r7, #15]
 800b168:	b29b      	uxth	r3, r3
 800b16a:	e007      	b.n	800b17c <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800b16c:	7bfb      	ldrb	r3, [r7, #15]
 800b16e:	3301      	adds	r3, #1
 800b170:	73fb      	strb	r3, [r7, #15]
 800b172:	7bfb      	ldrb	r3, [r7, #15]
 800b174:	2b0f      	cmp	r3, #15
 800b176:	d9ec      	bls.n	800b152 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b178:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800b17c:	4618      	mov	r0, r3
 800b17e:	3714      	adds	r7, #20
 800b180:	46bd      	mov	sp, r7
 800b182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b186:	4770      	bx	lr

0800b188 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b18c:	2201      	movs	r2, #1
 800b18e:	490e      	ldr	r1, [pc, #56]	@ (800b1c8 <MX_USB_HOST_Init+0x40>)
 800b190:	480e      	ldr	r0, [pc, #56]	@ (800b1cc <MX_USB_HOST_Init+0x44>)
 800b192:	f7fe fb0f 	bl	80097b4 <USBH_Init>
 800b196:	4603      	mov	r3, r0
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d001      	beq.n	800b1a0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b19c:	f7f6 fc34 	bl	8001a08 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800b1a0:	490b      	ldr	r1, [pc, #44]	@ (800b1d0 <MX_USB_HOST_Init+0x48>)
 800b1a2:	480a      	ldr	r0, [pc, #40]	@ (800b1cc <MX_USB_HOST_Init+0x44>)
 800b1a4:	f7fe fbb1 	bl	800990a <USBH_RegisterClass>
 800b1a8:	4603      	mov	r3, r0
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d001      	beq.n	800b1b2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b1ae:	f7f6 fc2b 	bl	8001a08 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b1b2:	4806      	ldr	r0, [pc, #24]	@ (800b1cc <MX_USB_HOST_Init+0x44>)
 800b1b4:	f7fe fc35 	bl	8009a22 <USBH_Start>
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d001      	beq.n	800b1c2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b1be:	f7f6 fc23 	bl	8001a08 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b1c2:	bf00      	nop
 800b1c4:	bd80      	pop	{r7, pc}
 800b1c6:	bf00      	nop
 800b1c8:	0800b1e9 	.word	0x0800b1e9
 800b1cc:	200004f0 	.word	0x200004f0
 800b1d0:	20000028 	.word	0x20000028

0800b1d4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800b1d8:	4802      	ldr	r0, [pc, #8]	@ (800b1e4 <MX_USB_HOST_Process+0x10>)
 800b1da:	f7fe fc33 	bl	8009a44 <USBH_Process>
}
 800b1de:	bf00      	nop
 800b1e0:	bd80      	pop	{r7, pc}
 800b1e2:	bf00      	nop
 800b1e4:	200004f0 	.word	0x200004f0

0800b1e8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b1e8:	b480      	push	{r7}
 800b1ea:	b083      	sub	sp, #12
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
 800b1f0:	460b      	mov	r3, r1
 800b1f2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b1f4:	78fb      	ldrb	r3, [r7, #3]
 800b1f6:	3b01      	subs	r3, #1
 800b1f8:	2b04      	cmp	r3, #4
 800b1fa:	d819      	bhi.n	800b230 <USBH_UserProcess+0x48>
 800b1fc:	a201      	add	r2, pc, #4	@ (adr r2, 800b204 <USBH_UserProcess+0x1c>)
 800b1fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b202:	bf00      	nop
 800b204:	0800b231 	.word	0x0800b231
 800b208:	0800b221 	.word	0x0800b221
 800b20c:	0800b231 	.word	0x0800b231
 800b210:	0800b229 	.word	0x0800b229
 800b214:	0800b219 	.word	0x0800b219
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b218:	4b09      	ldr	r3, [pc, #36]	@ (800b240 <USBH_UserProcess+0x58>)
 800b21a:	2203      	movs	r2, #3
 800b21c:	701a      	strb	r2, [r3, #0]
  break;
 800b21e:	e008      	b.n	800b232 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b220:	4b07      	ldr	r3, [pc, #28]	@ (800b240 <USBH_UserProcess+0x58>)
 800b222:	2202      	movs	r2, #2
 800b224:	701a      	strb	r2, [r3, #0]
  break;
 800b226:	e004      	b.n	800b232 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b228:	4b05      	ldr	r3, [pc, #20]	@ (800b240 <USBH_UserProcess+0x58>)
 800b22a:	2201      	movs	r2, #1
 800b22c:	701a      	strb	r2, [r3, #0]
  break;
 800b22e:	e000      	b.n	800b232 <USBH_UserProcess+0x4a>

  default:
  break;
 800b230:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b232:	bf00      	nop
 800b234:	370c      	adds	r7, #12
 800b236:	46bd      	mov	sp, r7
 800b238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23c:	4770      	bx	lr
 800b23e:	bf00      	nop
 800b240:	200008c8 	.word	0x200008c8

0800b244 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b08a      	sub	sp, #40	@ 0x28
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b24c:	f107 0314 	add.w	r3, r7, #20
 800b250:	2200      	movs	r2, #0
 800b252:	601a      	str	r2, [r3, #0]
 800b254:	605a      	str	r2, [r3, #4]
 800b256:	609a      	str	r2, [r3, #8]
 800b258:	60da      	str	r2, [r3, #12]
 800b25a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b264:	d147      	bne.n	800b2f6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b266:	2300      	movs	r3, #0
 800b268:	613b      	str	r3, [r7, #16]
 800b26a:	4b25      	ldr	r3, [pc, #148]	@ (800b300 <HAL_HCD_MspInit+0xbc>)
 800b26c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b26e:	4a24      	ldr	r2, [pc, #144]	@ (800b300 <HAL_HCD_MspInit+0xbc>)
 800b270:	f043 0301 	orr.w	r3, r3, #1
 800b274:	6313      	str	r3, [r2, #48]	@ 0x30
 800b276:	4b22      	ldr	r3, [pc, #136]	@ (800b300 <HAL_HCD_MspInit+0xbc>)
 800b278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b27a:	f003 0301 	and.w	r3, r3, #1
 800b27e:	613b      	str	r3, [r7, #16]
 800b280:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b282:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b286:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b288:	2300      	movs	r3, #0
 800b28a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b28c:	2300      	movs	r3, #0
 800b28e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b290:	f107 0314 	add.w	r3, r7, #20
 800b294:	4619      	mov	r1, r3
 800b296:	481b      	ldr	r0, [pc, #108]	@ (800b304 <HAL_HCD_MspInit+0xc0>)
 800b298:	f7f8 f906 	bl	80034a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b29c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800b2a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b2a2:	2302      	movs	r3, #2
 800b2a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b2ae:	230a      	movs	r3, #10
 800b2b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b2b2:	f107 0314 	add.w	r3, r7, #20
 800b2b6:	4619      	mov	r1, r3
 800b2b8:	4812      	ldr	r0, [pc, #72]	@ (800b304 <HAL_HCD_MspInit+0xc0>)
 800b2ba:	f7f8 f8f5 	bl	80034a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b2be:	4b10      	ldr	r3, [pc, #64]	@ (800b300 <HAL_HCD_MspInit+0xbc>)
 800b2c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b2c2:	4a0f      	ldr	r2, [pc, #60]	@ (800b300 <HAL_HCD_MspInit+0xbc>)
 800b2c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b2c8:	6353      	str	r3, [r2, #52]	@ 0x34
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	60fb      	str	r3, [r7, #12]
 800b2ce:	4b0c      	ldr	r3, [pc, #48]	@ (800b300 <HAL_HCD_MspInit+0xbc>)
 800b2d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b2d2:	4a0b      	ldr	r2, [pc, #44]	@ (800b300 <HAL_HCD_MspInit+0xbc>)
 800b2d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b2d8:	6453      	str	r3, [r2, #68]	@ 0x44
 800b2da:	4b09      	ldr	r3, [pc, #36]	@ (800b300 <HAL_HCD_MspInit+0xbc>)
 800b2dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b2de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b2e2:	60fb      	str	r3, [r7, #12]
 800b2e4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	2100      	movs	r1, #0
 800b2ea:	2043      	movs	r0, #67	@ 0x43
 800b2ec:	f7f7 fd27 	bl	8002d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b2f0:	2043      	movs	r0, #67	@ 0x43
 800b2f2:	f7f7 fd40 	bl	8002d76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b2f6:	bf00      	nop
 800b2f8:	3728      	adds	r7, #40	@ 0x28
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}
 800b2fe:	bf00      	nop
 800b300:	40023800 	.word	0x40023800
 800b304:	40020000 	.word	0x40020000

0800b308 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b082      	sub	sp, #8
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b316:	4618      	mov	r0, r3
 800b318:	f7fe ff6d 	bl	800a1f6 <USBH_LL_IncTimer>
}
 800b31c:	bf00      	nop
 800b31e:	3708      	adds	r7, #8
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}

0800b324 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b082      	sub	sp, #8
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b332:	4618      	mov	r0, r3
 800b334:	f7fe ffa9 	bl	800a28a <USBH_LL_Connect>
}
 800b338:	bf00      	nop
 800b33a:	3708      	adds	r7, #8
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd80      	pop	{r7, pc}

0800b340 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b082      	sub	sp, #8
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b34e:	4618      	mov	r0, r3
 800b350:	f7fe ffb2 	bl	800a2b8 <USBH_LL_Disconnect>
}
 800b354:	bf00      	nop
 800b356:	3708      	adds	r7, #8
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}

0800b35c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b35c:	b480      	push	{r7}
 800b35e:	b083      	sub	sp, #12
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
 800b364:	460b      	mov	r3, r1
 800b366:	70fb      	strb	r3, [r7, #3]
 800b368:	4613      	mov	r3, r2
 800b36a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b36c:	bf00      	nop
 800b36e:	370c      	adds	r7, #12
 800b370:	46bd      	mov	sp, r7
 800b372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b376:	4770      	bx	lr

0800b378 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b082      	sub	sp, #8
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b386:	4618      	mov	r0, r3
 800b388:	f7fe ff5f 	bl	800a24a <USBH_LL_PortEnabled>
}
 800b38c:	bf00      	nop
 800b38e:	3708      	adds	r7, #8
 800b390:	46bd      	mov	sp, r7
 800b392:	bd80      	pop	{r7, pc}

0800b394 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b082      	sub	sp, #8
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	f7fe ff5f 	bl	800a266 <USBH_LL_PortDisabled>
}
 800b3a8:	bf00      	nop
 800b3aa:	3708      	adds	r7, #8
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bd80      	pop	{r7, pc}

0800b3b0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b082      	sub	sp, #8
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800b3be:	2b01      	cmp	r3, #1
 800b3c0:	d12a      	bne.n	800b418 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b3c2:	4a18      	ldr	r2, [pc, #96]	@ (800b424 <USBH_LL_Init+0x74>)
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	4a15      	ldr	r2, [pc, #84]	@ (800b424 <USBH_LL_Init+0x74>)
 800b3ce:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b3d2:	4b14      	ldr	r3, [pc, #80]	@ (800b424 <USBH_LL_Init+0x74>)
 800b3d4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800b3d8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b3da:	4b12      	ldr	r3, [pc, #72]	@ (800b424 <USBH_LL_Init+0x74>)
 800b3dc:	2208      	movs	r2, #8
 800b3de:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b3e0:	4b10      	ldr	r3, [pc, #64]	@ (800b424 <USBH_LL_Init+0x74>)
 800b3e2:	2201      	movs	r2, #1
 800b3e4:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b3e6:	4b0f      	ldr	r3, [pc, #60]	@ (800b424 <USBH_LL_Init+0x74>)
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b3ec:	4b0d      	ldr	r3, [pc, #52]	@ (800b424 <USBH_LL_Init+0x74>)
 800b3ee:	2202      	movs	r2, #2
 800b3f0:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b3f2:	4b0c      	ldr	r3, [pc, #48]	@ (800b424 <USBH_LL_Init+0x74>)
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b3f8:	480a      	ldr	r0, [pc, #40]	@ (800b424 <USBH_LL_Init+0x74>)
 800b3fa:	f7f8 fa3b 	bl	8003874 <HAL_HCD_Init>
 800b3fe:	4603      	mov	r3, r0
 800b400:	2b00      	cmp	r3, #0
 800b402:	d001      	beq.n	800b408 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b404:	f7f6 fb00 	bl	8001a08 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b408:	4806      	ldr	r0, [pc, #24]	@ (800b424 <USBH_LL_Init+0x74>)
 800b40a:	f7f8 fe9b 	bl	8004144 <HAL_HCD_GetCurrentFrame>
 800b40e:	4603      	mov	r3, r0
 800b410:	4619      	mov	r1, r3
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f7fe fee0 	bl	800a1d8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b418:	2300      	movs	r3, #0
}
 800b41a:	4618      	mov	r0, r3
 800b41c:	3708      	adds	r7, #8
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}
 800b422:	bf00      	nop
 800b424:	200008cc 	.word	0x200008cc

0800b428 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b084      	sub	sp, #16
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b430:	2300      	movs	r3, #0
 800b432:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b434:	2300      	movs	r3, #0
 800b436:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b43e:	4618      	mov	r0, r3
 800b440:	f7f8 fe08 	bl	8004054 <HAL_HCD_Start>
 800b444:	4603      	mov	r3, r0
 800b446:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b448:	7bfb      	ldrb	r3, [r7, #15]
 800b44a:	4618      	mov	r0, r3
 800b44c:	f000 f95e 	bl	800b70c <USBH_Get_USB_Status>
 800b450:	4603      	mov	r3, r0
 800b452:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b454:	7bbb      	ldrb	r3, [r7, #14]
}
 800b456:	4618      	mov	r0, r3
 800b458:	3710      	adds	r7, #16
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}

0800b45e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b45e:	b580      	push	{r7, lr}
 800b460:	b084      	sub	sp, #16
 800b462:	af00      	add	r7, sp, #0
 800b464:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b466:	2300      	movs	r3, #0
 800b468:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b46a:	2300      	movs	r3, #0
 800b46c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b474:	4618      	mov	r0, r3
 800b476:	f7f8 fe10 	bl	800409a <HAL_HCD_Stop>
 800b47a:	4603      	mov	r3, r0
 800b47c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b47e:	7bfb      	ldrb	r3, [r7, #15]
 800b480:	4618      	mov	r0, r3
 800b482:	f000 f943 	bl	800b70c <USBH_Get_USB_Status>
 800b486:	4603      	mov	r3, r0
 800b488:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b48a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b48c:	4618      	mov	r0, r3
 800b48e:	3710      	adds	r7, #16
 800b490:	46bd      	mov	sp, r7
 800b492:	bd80      	pop	{r7, pc}

0800b494 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b084      	sub	sp, #16
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b49c:	2301      	movs	r3, #1
 800b49e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	f7f8 fe5a 	bl	8004160 <HAL_HCD_GetCurrentSpeed>
 800b4ac:	4603      	mov	r3, r0
 800b4ae:	2b02      	cmp	r3, #2
 800b4b0:	d00c      	beq.n	800b4cc <USBH_LL_GetSpeed+0x38>
 800b4b2:	2b02      	cmp	r3, #2
 800b4b4:	d80d      	bhi.n	800b4d2 <USBH_LL_GetSpeed+0x3e>
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d002      	beq.n	800b4c0 <USBH_LL_GetSpeed+0x2c>
 800b4ba:	2b01      	cmp	r3, #1
 800b4bc:	d003      	beq.n	800b4c6 <USBH_LL_GetSpeed+0x32>
 800b4be:	e008      	b.n	800b4d2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	73fb      	strb	r3, [r7, #15]
    break;
 800b4c4:	e008      	b.n	800b4d8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b4c6:	2301      	movs	r3, #1
 800b4c8:	73fb      	strb	r3, [r7, #15]
    break;
 800b4ca:	e005      	b.n	800b4d8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b4cc:	2302      	movs	r3, #2
 800b4ce:	73fb      	strb	r3, [r7, #15]
    break;
 800b4d0:	e002      	b.n	800b4d8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	73fb      	strb	r3, [r7, #15]
    break;
 800b4d6:	bf00      	nop
  }
  return  speed;
 800b4d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4da:	4618      	mov	r0, r3
 800b4dc:	3710      	adds	r7, #16
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	bd80      	pop	{r7, pc}

0800b4e2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b4e2:	b580      	push	{r7, lr}
 800b4e4:	b084      	sub	sp, #16
 800b4e6:	af00      	add	r7, sp, #0
 800b4e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	f7f8 fdeb 	bl	80040d4 <HAL_HCD_ResetPort>
 800b4fe:	4603      	mov	r3, r0
 800b500:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b502:	7bfb      	ldrb	r3, [r7, #15]
 800b504:	4618      	mov	r0, r3
 800b506:	f000 f901 	bl	800b70c <USBH_Get_USB_Status>
 800b50a:	4603      	mov	r3, r0
 800b50c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b50e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b510:	4618      	mov	r0, r3
 800b512:	3710      	adds	r7, #16
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}

0800b518 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b082      	sub	sp, #8
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
 800b520:	460b      	mov	r3, r1
 800b522:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b52a:	78fa      	ldrb	r2, [r7, #3]
 800b52c:	4611      	mov	r1, r2
 800b52e:	4618      	mov	r0, r3
 800b530:	f7f8 fdf3 	bl	800411a <HAL_HCD_HC_GetXferCount>
 800b534:	4603      	mov	r3, r0
}
 800b536:	4618      	mov	r0, r3
 800b538:	3708      	adds	r7, #8
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bd80      	pop	{r7, pc}

0800b53e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b53e:	b590      	push	{r4, r7, lr}
 800b540:	b089      	sub	sp, #36	@ 0x24
 800b542:	af04      	add	r7, sp, #16
 800b544:	6078      	str	r0, [r7, #4]
 800b546:	4608      	mov	r0, r1
 800b548:	4611      	mov	r1, r2
 800b54a:	461a      	mov	r2, r3
 800b54c:	4603      	mov	r3, r0
 800b54e:	70fb      	strb	r3, [r7, #3]
 800b550:	460b      	mov	r3, r1
 800b552:	70bb      	strb	r3, [r7, #2]
 800b554:	4613      	mov	r3, r2
 800b556:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b558:	2300      	movs	r3, #0
 800b55a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b55c:	2300      	movs	r3, #0
 800b55e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800b566:	787c      	ldrb	r4, [r7, #1]
 800b568:	78ba      	ldrb	r2, [r7, #2]
 800b56a:	78f9      	ldrb	r1, [r7, #3]
 800b56c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b56e:	9302      	str	r3, [sp, #8]
 800b570:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b574:	9301      	str	r3, [sp, #4]
 800b576:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b57a:	9300      	str	r3, [sp, #0]
 800b57c:	4623      	mov	r3, r4
 800b57e:	f7f8 f9e0 	bl	8003942 <HAL_HCD_HC_Init>
 800b582:	4603      	mov	r3, r0
 800b584:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b586:	7bfb      	ldrb	r3, [r7, #15]
 800b588:	4618      	mov	r0, r3
 800b58a:	f000 f8bf 	bl	800b70c <USBH_Get_USB_Status>
 800b58e:	4603      	mov	r3, r0
 800b590:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b592:	7bbb      	ldrb	r3, [r7, #14]
}
 800b594:	4618      	mov	r0, r3
 800b596:	3714      	adds	r7, #20
 800b598:	46bd      	mov	sp, r7
 800b59a:	bd90      	pop	{r4, r7, pc}

0800b59c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b084      	sub	sp, #16
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
 800b5a4:	460b      	mov	r3, r1
 800b5a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b5b6:	78fa      	ldrb	r2, [r7, #3]
 800b5b8:	4611      	mov	r1, r2
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	f7f8 fa79 	bl	8003ab2 <HAL_HCD_HC_Halt>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b5c4:	7bfb      	ldrb	r3, [r7, #15]
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f000 f8a0 	bl	800b70c <USBH_Get_USB_Status>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b5d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	3710      	adds	r7, #16
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bd80      	pop	{r7, pc}

0800b5da <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b5da:	b590      	push	{r4, r7, lr}
 800b5dc:	b089      	sub	sp, #36	@ 0x24
 800b5de:	af04      	add	r7, sp, #16
 800b5e0:	6078      	str	r0, [r7, #4]
 800b5e2:	4608      	mov	r0, r1
 800b5e4:	4611      	mov	r1, r2
 800b5e6:	461a      	mov	r2, r3
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	70fb      	strb	r3, [r7, #3]
 800b5ec:	460b      	mov	r3, r1
 800b5ee:	70bb      	strb	r3, [r7, #2]
 800b5f0:	4613      	mov	r3, r2
 800b5f2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800b602:	787c      	ldrb	r4, [r7, #1]
 800b604:	78ba      	ldrb	r2, [r7, #2]
 800b606:	78f9      	ldrb	r1, [r7, #3]
 800b608:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b60c:	9303      	str	r3, [sp, #12]
 800b60e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b610:	9302      	str	r3, [sp, #8]
 800b612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b614:	9301      	str	r3, [sp, #4]
 800b616:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b61a:	9300      	str	r3, [sp, #0]
 800b61c:	4623      	mov	r3, r4
 800b61e:	f7f8 fa6b 	bl	8003af8 <HAL_HCD_HC_SubmitRequest>
 800b622:	4603      	mov	r3, r0
 800b624:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b626:	7bfb      	ldrb	r3, [r7, #15]
 800b628:	4618      	mov	r0, r3
 800b62a:	f000 f86f 	bl	800b70c <USBH_Get_USB_Status>
 800b62e:	4603      	mov	r3, r0
 800b630:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b632:	7bbb      	ldrb	r3, [r7, #14]
}
 800b634:	4618      	mov	r0, r3
 800b636:	3714      	adds	r7, #20
 800b638:	46bd      	mov	sp, r7
 800b63a:	bd90      	pop	{r4, r7, pc}

0800b63c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b082      	sub	sp, #8
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
 800b644:	460b      	mov	r3, r1
 800b646:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b64e:	78fa      	ldrb	r2, [r7, #3]
 800b650:	4611      	mov	r1, r2
 800b652:	4618      	mov	r0, r3
 800b654:	f7f8 fd4c 	bl	80040f0 <HAL_HCD_HC_GetURBState>
 800b658:	4603      	mov	r3, r0
}
 800b65a:	4618      	mov	r0, r3
 800b65c:	3708      	adds	r7, #8
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}

0800b662 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b662:	b580      	push	{r7, lr}
 800b664:	b082      	sub	sp, #8
 800b666:	af00      	add	r7, sp, #0
 800b668:	6078      	str	r0, [r7, #4]
 800b66a:	460b      	mov	r3, r1
 800b66c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800b674:	2b01      	cmp	r3, #1
 800b676:	d103      	bne.n	800b680 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b678:	78fb      	ldrb	r3, [r7, #3]
 800b67a:	4618      	mov	r0, r3
 800b67c:	f000 f872 	bl	800b764 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b680:	20c8      	movs	r0, #200	@ 0xc8
 800b682:	f7f6 fe37 	bl	80022f4 <HAL_Delay>
  return USBH_OK;
 800b686:	2300      	movs	r3, #0
}
 800b688:	4618      	mov	r0, r3
 800b68a:	3708      	adds	r7, #8
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bd80      	pop	{r7, pc}

0800b690 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b690:	b480      	push	{r7}
 800b692:	b085      	sub	sp, #20
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
 800b698:	460b      	mov	r3, r1
 800b69a:	70fb      	strb	r3, [r7, #3]
 800b69c:	4613      	mov	r3, r2
 800b69e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b6a6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b6a8:	78fa      	ldrb	r2, [r7, #3]
 800b6aa:	68f9      	ldr	r1, [r7, #12]
 800b6ac:	4613      	mov	r3, r2
 800b6ae:	011b      	lsls	r3, r3, #4
 800b6b0:	1a9b      	subs	r3, r3, r2
 800b6b2:	009b      	lsls	r3, r3, #2
 800b6b4:	440b      	add	r3, r1
 800b6b6:	3317      	adds	r3, #23
 800b6b8:	781b      	ldrb	r3, [r3, #0]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d00a      	beq.n	800b6d4 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b6be:	78fa      	ldrb	r2, [r7, #3]
 800b6c0:	68f9      	ldr	r1, [r7, #12]
 800b6c2:	4613      	mov	r3, r2
 800b6c4:	011b      	lsls	r3, r3, #4
 800b6c6:	1a9b      	subs	r3, r3, r2
 800b6c8:	009b      	lsls	r3, r3, #2
 800b6ca:	440b      	add	r3, r1
 800b6cc:	333c      	adds	r3, #60	@ 0x3c
 800b6ce:	78ba      	ldrb	r2, [r7, #2]
 800b6d0:	701a      	strb	r2, [r3, #0]
 800b6d2:	e009      	b.n	800b6e8 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b6d4:	78fa      	ldrb	r2, [r7, #3]
 800b6d6:	68f9      	ldr	r1, [r7, #12]
 800b6d8:	4613      	mov	r3, r2
 800b6da:	011b      	lsls	r3, r3, #4
 800b6dc:	1a9b      	subs	r3, r3, r2
 800b6de:	009b      	lsls	r3, r3, #2
 800b6e0:	440b      	add	r3, r1
 800b6e2:	333d      	adds	r3, #61	@ 0x3d
 800b6e4:	78ba      	ldrb	r2, [r7, #2]
 800b6e6:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b6e8:	2300      	movs	r3, #0
}
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	3714      	adds	r7, #20
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f4:	4770      	bx	lr

0800b6f6 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b6f6:	b580      	push	{r7, lr}
 800b6f8:	b082      	sub	sp, #8
 800b6fa:	af00      	add	r7, sp, #0
 800b6fc:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b6fe:	6878      	ldr	r0, [r7, #4]
 800b700:	f7f6 fdf8 	bl	80022f4 <HAL_Delay>
}
 800b704:	bf00      	nop
 800b706:	3708      	adds	r7, #8
 800b708:	46bd      	mov	sp, r7
 800b70a:	bd80      	pop	{r7, pc}

0800b70c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b70c:	b480      	push	{r7}
 800b70e:	b085      	sub	sp, #20
 800b710:	af00      	add	r7, sp, #0
 800b712:	4603      	mov	r3, r0
 800b714:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b716:	2300      	movs	r3, #0
 800b718:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b71a:	79fb      	ldrb	r3, [r7, #7]
 800b71c:	2b03      	cmp	r3, #3
 800b71e:	d817      	bhi.n	800b750 <USBH_Get_USB_Status+0x44>
 800b720:	a201      	add	r2, pc, #4	@ (adr r2, 800b728 <USBH_Get_USB_Status+0x1c>)
 800b722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b726:	bf00      	nop
 800b728:	0800b739 	.word	0x0800b739
 800b72c:	0800b73f 	.word	0x0800b73f
 800b730:	0800b745 	.word	0x0800b745
 800b734:	0800b74b 	.word	0x0800b74b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b738:	2300      	movs	r3, #0
 800b73a:	73fb      	strb	r3, [r7, #15]
    break;
 800b73c:	e00b      	b.n	800b756 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b73e:	2302      	movs	r3, #2
 800b740:	73fb      	strb	r3, [r7, #15]
    break;
 800b742:	e008      	b.n	800b756 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b744:	2301      	movs	r3, #1
 800b746:	73fb      	strb	r3, [r7, #15]
    break;
 800b748:	e005      	b.n	800b756 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b74a:	2302      	movs	r3, #2
 800b74c:	73fb      	strb	r3, [r7, #15]
    break;
 800b74e:	e002      	b.n	800b756 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b750:	2302      	movs	r3, #2
 800b752:	73fb      	strb	r3, [r7, #15]
    break;
 800b754:	bf00      	nop
  }
  return usb_status;
 800b756:	7bfb      	ldrb	r3, [r7, #15]
}
 800b758:	4618      	mov	r0, r3
 800b75a:	3714      	adds	r7, #20
 800b75c:	46bd      	mov	sp, r7
 800b75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b762:	4770      	bx	lr

0800b764 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b084      	sub	sp, #16
 800b768:	af00      	add	r7, sp, #0
 800b76a:	4603      	mov	r3, r0
 800b76c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b76e:	79fb      	ldrb	r3, [r7, #7]
 800b770:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b772:	79fb      	ldrb	r3, [r7, #7]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d102      	bne.n	800b77e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800b778:	2300      	movs	r3, #0
 800b77a:	73fb      	strb	r3, [r7, #15]
 800b77c:	e001      	b.n	800b782 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800b77e:	2301      	movs	r3, #1
 800b780:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b782:	7bfb      	ldrb	r3, [r7, #15]
 800b784:	461a      	mov	r2, r3
 800b786:	2101      	movs	r1, #1
 800b788:	4803      	ldr	r0, [pc, #12]	@ (800b798 <MX_DriverVbusFS+0x34>)
 800b78a:	f7f8 f841 	bl	8003810 <HAL_GPIO_WritePin>
}
 800b78e:	bf00      	nop
 800b790:	3710      	adds	r7, #16
 800b792:	46bd      	mov	sp, r7
 800b794:	bd80      	pop	{r7, pc}
 800b796:	bf00      	nop
 800b798:	40020800 	.word	0x40020800

0800b79c <malloc>:
 800b79c:	4b02      	ldr	r3, [pc, #8]	@ (800b7a8 <malloc+0xc>)
 800b79e:	4601      	mov	r1, r0
 800b7a0:	6818      	ldr	r0, [r3, #0]
 800b7a2:	f000 b82d 	b.w	800b800 <_malloc_r>
 800b7a6:	bf00      	nop
 800b7a8:	20000048 	.word	0x20000048

0800b7ac <free>:
 800b7ac:	4b02      	ldr	r3, [pc, #8]	@ (800b7b8 <free+0xc>)
 800b7ae:	4601      	mov	r1, r0
 800b7b0:	6818      	ldr	r0, [r3, #0]
 800b7b2:	f000 b917 	b.w	800b9e4 <_free_r>
 800b7b6:	bf00      	nop
 800b7b8:	20000048 	.word	0x20000048

0800b7bc <sbrk_aligned>:
 800b7bc:	b570      	push	{r4, r5, r6, lr}
 800b7be:	4e0f      	ldr	r6, [pc, #60]	@ (800b7fc <sbrk_aligned+0x40>)
 800b7c0:	460c      	mov	r4, r1
 800b7c2:	6831      	ldr	r1, [r6, #0]
 800b7c4:	4605      	mov	r5, r0
 800b7c6:	b911      	cbnz	r1, 800b7ce <sbrk_aligned+0x12>
 800b7c8:	f000 f8d0 	bl	800b96c <_sbrk_r>
 800b7cc:	6030      	str	r0, [r6, #0]
 800b7ce:	4621      	mov	r1, r4
 800b7d0:	4628      	mov	r0, r5
 800b7d2:	f000 f8cb 	bl	800b96c <_sbrk_r>
 800b7d6:	1c43      	adds	r3, r0, #1
 800b7d8:	d103      	bne.n	800b7e2 <sbrk_aligned+0x26>
 800b7da:	f04f 34ff 	mov.w	r4, #4294967295
 800b7de:	4620      	mov	r0, r4
 800b7e0:	bd70      	pop	{r4, r5, r6, pc}
 800b7e2:	1cc4      	adds	r4, r0, #3
 800b7e4:	f024 0403 	bic.w	r4, r4, #3
 800b7e8:	42a0      	cmp	r0, r4
 800b7ea:	d0f8      	beq.n	800b7de <sbrk_aligned+0x22>
 800b7ec:	1a21      	subs	r1, r4, r0
 800b7ee:	4628      	mov	r0, r5
 800b7f0:	f000 f8bc 	bl	800b96c <_sbrk_r>
 800b7f4:	3001      	adds	r0, #1
 800b7f6:	d1f2      	bne.n	800b7de <sbrk_aligned+0x22>
 800b7f8:	e7ef      	b.n	800b7da <sbrk_aligned+0x1e>
 800b7fa:	bf00      	nop
 800b7fc:	20000cac 	.word	0x20000cac

0800b800 <_malloc_r>:
 800b800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b804:	1ccd      	adds	r5, r1, #3
 800b806:	f025 0503 	bic.w	r5, r5, #3
 800b80a:	3508      	adds	r5, #8
 800b80c:	2d0c      	cmp	r5, #12
 800b80e:	bf38      	it	cc
 800b810:	250c      	movcc	r5, #12
 800b812:	2d00      	cmp	r5, #0
 800b814:	4606      	mov	r6, r0
 800b816:	db01      	blt.n	800b81c <_malloc_r+0x1c>
 800b818:	42a9      	cmp	r1, r5
 800b81a:	d904      	bls.n	800b826 <_malloc_r+0x26>
 800b81c:	230c      	movs	r3, #12
 800b81e:	6033      	str	r3, [r6, #0]
 800b820:	2000      	movs	r0, #0
 800b822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b826:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b8fc <_malloc_r+0xfc>
 800b82a:	f000 f869 	bl	800b900 <__malloc_lock>
 800b82e:	f8d8 3000 	ldr.w	r3, [r8]
 800b832:	461c      	mov	r4, r3
 800b834:	bb44      	cbnz	r4, 800b888 <_malloc_r+0x88>
 800b836:	4629      	mov	r1, r5
 800b838:	4630      	mov	r0, r6
 800b83a:	f7ff ffbf 	bl	800b7bc <sbrk_aligned>
 800b83e:	1c43      	adds	r3, r0, #1
 800b840:	4604      	mov	r4, r0
 800b842:	d158      	bne.n	800b8f6 <_malloc_r+0xf6>
 800b844:	f8d8 4000 	ldr.w	r4, [r8]
 800b848:	4627      	mov	r7, r4
 800b84a:	2f00      	cmp	r7, #0
 800b84c:	d143      	bne.n	800b8d6 <_malloc_r+0xd6>
 800b84e:	2c00      	cmp	r4, #0
 800b850:	d04b      	beq.n	800b8ea <_malloc_r+0xea>
 800b852:	6823      	ldr	r3, [r4, #0]
 800b854:	4639      	mov	r1, r7
 800b856:	4630      	mov	r0, r6
 800b858:	eb04 0903 	add.w	r9, r4, r3
 800b85c:	f000 f886 	bl	800b96c <_sbrk_r>
 800b860:	4581      	cmp	r9, r0
 800b862:	d142      	bne.n	800b8ea <_malloc_r+0xea>
 800b864:	6821      	ldr	r1, [r4, #0]
 800b866:	1a6d      	subs	r5, r5, r1
 800b868:	4629      	mov	r1, r5
 800b86a:	4630      	mov	r0, r6
 800b86c:	f7ff ffa6 	bl	800b7bc <sbrk_aligned>
 800b870:	3001      	adds	r0, #1
 800b872:	d03a      	beq.n	800b8ea <_malloc_r+0xea>
 800b874:	6823      	ldr	r3, [r4, #0]
 800b876:	442b      	add	r3, r5
 800b878:	6023      	str	r3, [r4, #0]
 800b87a:	f8d8 3000 	ldr.w	r3, [r8]
 800b87e:	685a      	ldr	r2, [r3, #4]
 800b880:	bb62      	cbnz	r2, 800b8dc <_malloc_r+0xdc>
 800b882:	f8c8 7000 	str.w	r7, [r8]
 800b886:	e00f      	b.n	800b8a8 <_malloc_r+0xa8>
 800b888:	6822      	ldr	r2, [r4, #0]
 800b88a:	1b52      	subs	r2, r2, r5
 800b88c:	d420      	bmi.n	800b8d0 <_malloc_r+0xd0>
 800b88e:	2a0b      	cmp	r2, #11
 800b890:	d917      	bls.n	800b8c2 <_malloc_r+0xc2>
 800b892:	1961      	adds	r1, r4, r5
 800b894:	42a3      	cmp	r3, r4
 800b896:	6025      	str	r5, [r4, #0]
 800b898:	bf18      	it	ne
 800b89a:	6059      	strne	r1, [r3, #4]
 800b89c:	6863      	ldr	r3, [r4, #4]
 800b89e:	bf08      	it	eq
 800b8a0:	f8c8 1000 	streq.w	r1, [r8]
 800b8a4:	5162      	str	r2, [r4, r5]
 800b8a6:	604b      	str	r3, [r1, #4]
 800b8a8:	4630      	mov	r0, r6
 800b8aa:	f000 f82f 	bl	800b90c <__malloc_unlock>
 800b8ae:	f104 000b 	add.w	r0, r4, #11
 800b8b2:	1d23      	adds	r3, r4, #4
 800b8b4:	f020 0007 	bic.w	r0, r0, #7
 800b8b8:	1ac2      	subs	r2, r0, r3
 800b8ba:	bf1c      	itt	ne
 800b8bc:	1a1b      	subne	r3, r3, r0
 800b8be:	50a3      	strne	r3, [r4, r2]
 800b8c0:	e7af      	b.n	800b822 <_malloc_r+0x22>
 800b8c2:	6862      	ldr	r2, [r4, #4]
 800b8c4:	42a3      	cmp	r3, r4
 800b8c6:	bf0c      	ite	eq
 800b8c8:	f8c8 2000 	streq.w	r2, [r8]
 800b8cc:	605a      	strne	r2, [r3, #4]
 800b8ce:	e7eb      	b.n	800b8a8 <_malloc_r+0xa8>
 800b8d0:	4623      	mov	r3, r4
 800b8d2:	6864      	ldr	r4, [r4, #4]
 800b8d4:	e7ae      	b.n	800b834 <_malloc_r+0x34>
 800b8d6:	463c      	mov	r4, r7
 800b8d8:	687f      	ldr	r7, [r7, #4]
 800b8da:	e7b6      	b.n	800b84a <_malloc_r+0x4a>
 800b8dc:	461a      	mov	r2, r3
 800b8de:	685b      	ldr	r3, [r3, #4]
 800b8e0:	42a3      	cmp	r3, r4
 800b8e2:	d1fb      	bne.n	800b8dc <_malloc_r+0xdc>
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	6053      	str	r3, [r2, #4]
 800b8e8:	e7de      	b.n	800b8a8 <_malloc_r+0xa8>
 800b8ea:	230c      	movs	r3, #12
 800b8ec:	6033      	str	r3, [r6, #0]
 800b8ee:	4630      	mov	r0, r6
 800b8f0:	f000 f80c 	bl	800b90c <__malloc_unlock>
 800b8f4:	e794      	b.n	800b820 <_malloc_r+0x20>
 800b8f6:	6005      	str	r5, [r0, #0]
 800b8f8:	e7d6      	b.n	800b8a8 <_malloc_r+0xa8>
 800b8fa:	bf00      	nop
 800b8fc:	20000cb0 	.word	0x20000cb0

0800b900 <__malloc_lock>:
 800b900:	4801      	ldr	r0, [pc, #4]	@ (800b908 <__malloc_lock+0x8>)
 800b902:	f000 b86d 	b.w	800b9e0 <__retarget_lock_acquire_recursive>
 800b906:	bf00      	nop
 800b908:	20000df0 	.word	0x20000df0

0800b90c <__malloc_unlock>:
 800b90c:	4801      	ldr	r0, [pc, #4]	@ (800b914 <__malloc_unlock+0x8>)
 800b90e:	f000 b868 	b.w	800b9e2 <__retarget_lock_release_recursive>
 800b912:	bf00      	nop
 800b914:	20000df0 	.word	0x20000df0

0800b918 <siprintf>:
 800b918:	b40e      	push	{r1, r2, r3}
 800b91a:	b510      	push	{r4, lr}
 800b91c:	b09d      	sub	sp, #116	@ 0x74
 800b91e:	ab1f      	add	r3, sp, #124	@ 0x7c
 800b920:	9002      	str	r0, [sp, #8]
 800b922:	9006      	str	r0, [sp, #24]
 800b924:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b928:	480a      	ldr	r0, [pc, #40]	@ (800b954 <siprintf+0x3c>)
 800b92a:	9107      	str	r1, [sp, #28]
 800b92c:	9104      	str	r1, [sp, #16]
 800b92e:	490a      	ldr	r1, [pc, #40]	@ (800b958 <siprintf+0x40>)
 800b930:	f853 2b04 	ldr.w	r2, [r3], #4
 800b934:	9105      	str	r1, [sp, #20]
 800b936:	2400      	movs	r4, #0
 800b938:	a902      	add	r1, sp, #8
 800b93a:	6800      	ldr	r0, [r0, #0]
 800b93c:	9301      	str	r3, [sp, #4]
 800b93e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800b940:	f000 f8f6 	bl	800bb30 <_svfiprintf_r>
 800b944:	9b02      	ldr	r3, [sp, #8]
 800b946:	701c      	strb	r4, [r3, #0]
 800b948:	b01d      	add	sp, #116	@ 0x74
 800b94a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b94e:	b003      	add	sp, #12
 800b950:	4770      	bx	lr
 800b952:	bf00      	nop
 800b954:	20000048 	.word	0x20000048
 800b958:	ffff0208 	.word	0xffff0208

0800b95c <memset>:
 800b95c:	4402      	add	r2, r0
 800b95e:	4603      	mov	r3, r0
 800b960:	4293      	cmp	r3, r2
 800b962:	d100      	bne.n	800b966 <memset+0xa>
 800b964:	4770      	bx	lr
 800b966:	f803 1b01 	strb.w	r1, [r3], #1
 800b96a:	e7f9      	b.n	800b960 <memset+0x4>

0800b96c <_sbrk_r>:
 800b96c:	b538      	push	{r3, r4, r5, lr}
 800b96e:	4d06      	ldr	r5, [pc, #24]	@ (800b988 <_sbrk_r+0x1c>)
 800b970:	2300      	movs	r3, #0
 800b972:	4604      	mov	r4, r0
 800b974:	4608      	mov	r0, r1
 800b976:	602b      	str	r3, [r5, #0]
 800b978:	f7f6 fb8e 	bl	8002098 <_sbrk>
 800b97c:	1c43      	adds	r3, r0, #1
 800b97e:	d102      	bne.n	800b986 <_sbrk_r+0x1a>
 800b980:	682b      	ldr	r3, [r5, #0]
 800b982:	b103      	cbz	r3, 800b986 <_sbrk_r+0x1a>
 800b984:	6023      	str	r3, [r4, #0]
 800b986:	bd38      	pop	{r3, r4, r5, pc}
 800b988:	20000dec 	.word	0x20000dec

0800b98c <__errno>:
 800b98c:	4b01      	ldr	r3, [pc, #4]	@ (800b994 <__errno+0x8>)
 800b98e:	6818      	ldr	r0, [r3, #0]
 800b990:	4770      	bx	lr
 800b992:	bf00      	nop
 800b994:	20000048 	.word	0x20000048

0800b998 <__libc_init_array>:
 800b998:	b570      	push	{r4, r5, r6, lr}
 800b99a:	4d0d      	ldr	r5, [pc, #52]	@ (800b9d0 <__libc_init_array+0x38>)
 800b99c:	4c0d      	ldr	r4, [pc, #52]	@ (800b9d4 <__libc_init_array+0x3c>)
 800b99e:	1b64      	subs	r4, r4, r5
 800b9a0:	10a4      	asrs	r4, r4, #2
 800b9a2:	2600      	movs	r6, #0
 800b9a4:	42a6      	cmp	r6, r4
 800b9a6:	d109      	bne.n	800b9bc <__libc_init_array+0x24>
 800b9a8:	4d0b      	ldr	r5, [pc, #44]	@ (800b9d8 <__libc_init_array+0x40>)
 800b9aa:	4c0c      	ldr	r4, [pc, #48]	@ (800b9dc <__libc_init_array+0x44>)
 800b9ac:	f000 fba6 	bl	800c0fc <_init>
 800b9b0:	1b64      	subs	r4, r4, r5
 800b9b2:	10a4      	asrs	r4, r4, #2
 800b9b4:	2600      	movs	r6, #0
 800b9b6:	42a6      	cmp	r6, r4
 800b9b8:	d105      	bne.n	800b9c6 <__libc_init_array+0x2e>
 800b9ba:	bd70      	pop	{r4, r5, r6, pc}
 800b9bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9c0:	4798      	blx	r3
 800b9c2:	3601      	adds	r6, #1
 800b9c4:	e7ee      	b.n	800b9a4 <__libc_init_array+0xc>
 800b9c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9ca:	4798      	blx	r3
 800b9cc:	3601      	adds	r6, #1
 800b9ce:	e7f2      	b.n	800b9b6 <__libc_init_array+0x1e>
 800b9d0:	0800c1a0 	.word	0x0800c1a0
 800b9d4:	0800c1a0 	.word	0x0800c1a0
 800b9d8:	0800c1a0 	.word	0x0800c1a0
 800b9dc:	0800c1a4 	.word	0x0800c1a4

0800b9e0 <__retarget_lock_acquire_recursive>:
 800b9e0:	4770      	bx	lr

0800b9e2 <__retarget_lock_release_recursive>:
 800b9e2:	4770      	bx	lr

0800b9e4 <_free_r>:
 800b9e4:	b538      	push	{r3, r4, r5, lr}
 800b9e6:	4605      	mov	r5, r0
 800b9e8:	2900      	cmp	r1, #0
 800b9ea:	d041      	beq.n	800ba70 <_free_r+0x8c>
 800b9ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9f0:	1f0c      	subs	r4, r1, #4
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	bfb8      	it	lt
 800b9f6:	18e4      	addlt	r4, r4, r3
 800b9f8:	f7ff ff82 	bl	800b900 <__malloc_lock>
 800b9fc:	4a1d      	ldr	r2, [pc, #116]	@ (800ba74 <_free_r+0x90>)
 800b9fe:	6813      	ldr	r3, [r2, #0]
 800ba00:	b933      	cbnz	r3, 800ba10 <_free_r+0x2c>
 800ba02:	6063      	str	r3, [r4, #4]
 800ba04:	6014      	str	r4, [r2, #0]
 800ba06:	4628      	mov	r0, r5
 800ba08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba0c:	f7ff bf7e 	b.w	800b90c <__malloc_unlock>
 800ba10:	42a3      	cmp	r3, r4
 800ba12:	d908      	bls.n	800ba26 <_free_r+0x42>
 800ba14:	6820      	ldr	r0, [r4, #0]
 800ba16:	1821      	adds	r1, r4, r0
 800ba18:	428b      	cmp	r3, r1
 800ba1a:	bf01      	itttt	eq
 800ba1c:	6819      	ldreq	r1, [r3, #0]
 800ba1e:	685b      	ldreq	r3, [r3, #4]
 800ba20:	1809      	addeq	r1, r1, r0
 800ba22:	6021      	streq	r1, [r4, #0]
 800ba24:	e7ed      	b.n	800ba02 <_free_r+0x1e>
 800ba26:	461a      	mov	r2, r3
 800ba28:	685b      	ldr	r3, [r3, #4]
 800ba2a:	b10b      	cbz	r3, 800ba30 <_free_r+0x4c>
 800ba2c:	42a3      	cmp	r3, r4
 800ba2e:	d9fa      	bls.n	800ba26 <_free_r+0x42>
 800ba30:	6811      	ldr	r1, [r2, #0]
 800ba32:	1850      	adds	r0, r2, r1
 800ba34:	42a0      	cmp	r0, r4
 800ba36:	d10b      	bne.n	800ba50 <_free_r+0x6c>
 800ba38:	6820      	ldr	r0, [r4, #0]
 800ba3a:	4401      	add	r1, r0
 800ba3c:	1850      	adds	r0, r2, r1
 800ba3e:	4283      	cmp	r3, r0
 800ba40:	6011      	str	r1, [r2, #0]
 800ba42:	d1e0      	bne.n	800ba06 <_free_r+0x22>
 800ba44:	6818      	ldr	r0, [r3, #0]
 800ba46:	685b      	ldr	r3, [r3, #4]
 800ba48:	6053      	str	r3, [r2, #4]
 800ba4a:	4408      	add	r0, r1
 800ba4c:	6010      	str	r0, [r2, #0]
 800ba4e:	e7da      	b.n	800ba06 <_free_r+0x22>
 800ba50:	d902      	bls.n	800ba58 <_free_r+0x74>
 800ba52:	230c      	movs	r3, #12
 800ba54:	602b      	str	r3, [r5, #0]
 800ba56:	e7d6      	b.n	800ba06 <_free_r+0x22>
 800ba58:	6820      	ldr	r0, [r4, #0]
 800ba5a:	1821      	adds	r1, r4, r0
 800ba5c:	428b      	cmp	r3, r1
 800ba5e:	bf04      	itt	eq
 800ba60:	6819      	ldreq	r1, [r3, #0]
 800ba62:	685b      	ldreq	r3, [r3, #4]
 800ba64:	6063      	str	r3, [r4, #4]
 800ba66:	bf04      	itt	eq
 800ba68:	1809      	addeq	r1, r1, r0
 800ba6a:	6021      	streq	r1, [r4, #0]
 800ba6c:	6054      	str	r4, [r2, #4]
 800ba6e:	e7ca      	b.n	800ba06 <_free_r+0x22>
 800ba70:	bd38      	pop	{r3, r4, r5, pc}
 800ba72:	bf00      	nop
 800ba74:	20000cb0 	.word	0x20000cb0

0800ba78 <__ssputs_r>:
 800ba78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba7c:	688e      	ldr	r6, [r1, #8]
 800ba7e:	461f      	mov	r7, r3
 800ba80:	42be      	cmp	r6, r7
 800ba82:	680b      	ldr	r3, [r1, #0]
 800ba84:	4682      	mov	sl, r0
 800ba86:	460c      	mov	r4, r1
 800ba88:	4690      	mov	r8, r2
 800ba8a:	d82d      	bhi.n	800bae8 <__ssputs_r+0x70>
 800ba8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ba90:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ba94:	d026      	beq.n	800bae4 <__ssputs_r+0x6c>
 800ba96:	6965      	ldr	r5, [r4, #20]
 800ba98:	6909      	ldr	r1, [r1, #16]
 800ba9a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ba9e:	eba3 0901 	sub.w	r9, r3, r1
 800baa2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800baa6:	1c7b      	adds	r3, r7, #1
 800baa8:	444b      	add	r3, r9
 800baaa:	106d      	asrs	r5, r5, #1
 800baac:	429d      	cmp	r5, r3
 800baae:	bf38      	it	cc
 800bab0:	461d      	movcc	r5, r3
 800bab2:	0553      	lsls	r3, r2, #21
 800bab4:	d527      	bpl.n	800bb06 <__ssputs_r+0x8e>
 800bab6:	4629      	mov	r1, r5
 800bab8:	f7ff fea2 	bl	800b800 <_malloc_r>
 800babc:	4606      	mov	r6, r0
 800babe:	b360      	cbz	r0, 800bb1a <__ssputs_r+0xa2>
 800bac0:	6921      	ldr	r1, [r4, #16]
 800bac2:	464a      	mov	r2, r9
 800bac4:	f000 fad6 	bl	800c074 <memcpy>
 800bac8:	89a3      	ldrh	r3, [r4, #12]
 800baca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bace:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bad2:	81a3      	strh	r3, [r4, #12]
 800bad4:	6126      	str	r6, [r4, #16]
 800bad6:	6165      	str	r5, [r4, #20]
 800bad8:	444e      	add	r6, r9
 800bada:	eba5 0509 	sub.w	r5, r5, r9
 800bade:	6026      	str	r6, [r4, #0]
 800bae0:	60a5      	str	r5, [r4, #8]
 800bae2:	463e      	mov	r6, r7
 800bae4:	42be      	cmp	r6, r7
 800bae6:	d900      	bls.n	800baea <__ssputs_r+0x72>
 800bae8:	463e      	mov	r6, r7
 800baea:	6820      	ldr	r0, [r4, #0]
 800baec:	4632      	mov	r2, r6
 800baee:	4641      	mov	r1, r8
 800baf0:	f000 faa6 	bl	800c040 <memmove>
 800baf4:	68a3      	ldr	r3, [r4, #8]
 800baf6:	1b9b      	subs	r3, r3, r6
 800baf8:	60a3      	str	r3, [r4, #8]
 800bafa:	6823      	ldr	r3, [r4, #0]
 800bafc:	4433      	add	r3, r6
 800bafe:	6023      	str	r3, [r4, #0]
 800bb00:	2000      	movs	r0, #0
 800bb02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb06:	462a      	mov	r2, r5
 800bb08:	f000 fac2 	bl	800c090 <_realloc_r>
 800bb0c:	4606      	mov	r6, r0
 800bb0e:	2800      	cmp	r0, #0
 800bb10:	d1e0      	bne.n	800bad4 <__ssputs_r+0x5c>
 800bb12:	6921      	ldr	r1, [r4, #16]
 800bb14:	4650      	mov	r0, sl
 800bb16:	f7ff ff65 	bl	800b9e4 <_free_r>
 800bb1a:	230c      	movs	r3, #12
 800bb1c:	f8ca 3000 	str.w	r3, [sl]
 800bb20:	89a3      	ldrh	r3, [r4, #12]
 800bb22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb26:	81a3      	strh	r3, [r4, #12]
 800bb28:	f04f 30ff 	mov.w	r0, #4294967295
 800bb2c:	e7e9      	b.n	800bb02 <__ssputs_r+0x8a>
	...

0800bb30 <_svfiprintf_r>:
 800bb30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb34:	4698      	mov	r8, r3
 800bb36:	898b      	ldrh	r3, [r1, #12]
 800bb38:	061b      	lsls	r3, r3, #24
 800bb3a:	b09d      	sub	sp, #116	@ 0x74
 800bb3c:	4607      	mov	r7, r0
 800bb3e:	460d      	mov	r5, r1
 800bb40:	4614      	mov	r4, r2
 800bb42:	d510      	bpl.n	800bb66 <_svfiprintf_r+0x36>
 800bb44:	690b      	ldr	r3, [r1, #16]
 800bb46:	b973      	cbnz	r3, 800bb66 <_svfiprintf_r+0x36>
 800bb48:	2140      	movs	r1, #64	@ 0x40
 800bb4a:	f7ff fe59 	bl	800b800 <_malloc_r>
 800bb4e:	6028      	str	r0, [r5, #0]
 800bb50:	6128      	str	r0, [r5, #16]
 800bb52:	b930      	cbnz	r0, 800bb62 <_svfiprintf_r+0x32>
 800bb54:	230c      	movs	r3, #12
 800bb56:	603b      	str	r3, [r7, #0]
 800bb58:	f04f 30ff 	mov.w	r0, #4294967295
 800bb5c:	b01d      	add	sp, #116	@ 0x74
 800bb5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb62:	2340      	movs	r3, #64	@ 0x40
 800bb64:	616b      	str	r3, [r5, #20]
 800bb66:	2300      	movs	r3, #0
 800bb68:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb6a:	2320      	movs	r3, #32
 800bb6c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bb70:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb74:	2330      	movs	r3, #48	@ 0x30
 800bb76:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bd14 <_svfiprintf_r+0x1e4>
 800bb7a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bb7e:	f04f 0901 	mov.w	r9, #1
 800bb82:	4623      	mov	r3, r4
 800bb84:	469a      	mov	sl, r3
 800bb86:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb8a:	b10a      	cbz	r2, 800bb90 <_svfiprintf_r+0x60>
 800bb8c:	2a25      	cmp	r2, #37	@ 0x25
 800bb8e:	d1f9      	bne.n	800bb84 <_svfiprintf_r+0x54>
 800bb90:	ebba 0b04 	subs.w	fp, sl, r4
 800bb94:	d00b      	beq.n	800bbae <_svfiprintf_r+0x7e>
 800bb96:	465b      	mov	r3, fp
 800bb98:	4622      	mov	r2, r4
 800bb9a:	4629      	mov	r1, r5
 800bb9c:	4638      	mov	r0, r7
 800bb9e:	f7ff ff6b 	bl	800ba78 <__ssputs_r>
 800bba2:	3001      	adds	r0, #1
 800bba4:	f000 80a7 	beq.w	800bcf6 <_svfiprintf_r+0x1c6>
 800bba8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bbaa:	445a      	add	r2, fp
 800bbac:	9209      	str	r2, [sp, #36]	@ 0x24
 800bbae:	f89a 3000 	ldrb.w	r3, [sl]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	f000 809f 	beq.w	800bcf6 <_svfiprintf_r+0x1c6>
 800bbb8:	2300      	movs	r3, #0
 800bbba:	f04f 32ff 	mov.w	r2, #4294967295
 800bbbe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bbc2:	f10a 0a01 	add.w	sl, sl, #1
 800bbc6:	9304      	str	r3, [sp, #16]
 800bbc8:	9307      	str	r3, [sp, #28]
 800bbca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bbce:	931a      	str	r3, [sp, #104]	@ 0x68
 800bbd0:	4654      	mov	r4, sl
 800bbd2:	2205      	movs	r2, #5
 800bbd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbd8:	484e      	ldr	r0, [pc, #312]	@ (800bd14 <_svfiprintf_r+0x1e4>)
 800bbda:	f7f4 fb01 	bl	80001e0 <memchr>
 800bbde:	9a04      	ldr	r2, [sp, #16]
 800bbe0:	b9d8      	cbnz	r0, 800bc1a <_svfiprintf_r+0xea>
 800bbe2:	06d0      	lsls	r0, r2, #27
 800bbe4:	bf44      	itt	mi
 800bbe6:	2320      	movmi	r3, #32
 800bbe8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bbec:	0711      	lsls	r1, r2, #28
 800bbee:	bf44      	itt	mi
 800bbf0:	232b      	movmi	r3, #43	@ 0x2b
 800bbf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bbf6:	f89a 3000 	ldrb.w	r3, [sl]
 800bbfa:	2b2a      	cmp	r3, #42	@ 0x2a
 800bbfc:	d015      	beq.n	800bc2a <_svfiprintf_r+0xfa>
 800bbfe:	9a07      	ldr	r2, [sp, #28]
 800bc00:	4654      	mov	r4, sl
 800bc02:	2000      	movs	r0, #0
 800bc04:	f04f 0c0a 	mov.w	ip, #10
 800bc08:	4621      	mov	r1, r4
 800bc0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc0e:	3b30      	subs	r3, #48	@ 0x30
 800bc10:	2b09      	cmp	r3, #9
 800bc12:	d94b      	bls.n	800bcac <_svfiprintf_r+0x17c>
 800bc14:	b1b0      	cbz	r0, 800bc44 <_svfiprintf_r+0x114>
 800bc16:	9207      	str	r2, [sp, #28]
 800bc18:	e014      	b.n	800bc44 <_svfiprintf_r+0x114>
 800bc1a:	eba0 0308 	sub.w	r3, r0, r8
 800bc1e:	fa09 f303 	lsl.w	r3, r9, r3
 800bc22:	4313      	orrs	r3, r2
 800bc24:	9304      	str	r3, [sp, #16]
 800bc26:	46a2      	mov	sl, r4
 800bc28:	e7d2      	b.n	800bbd0 <_svfiprintf_r+0xa0>
 800bc2a:	9b03      	ldr	r3, [sp, #12]
 800bc2c:	1d19      	adds	r1, r3, #4
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	9103      	str	r1, [sp, #12]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	bfbb      	ittet	lt
 800bc36:	425b      	neglt	r3, r3
 800bc38:	f042 0202 	orrlt.w	r2, r2, #2
 800bc3c:	9307      	strge	r3, [sp, #28]
 800bc3e:	9307      	strlt	r3, [sp, #28]
 800bc40:	bfb8      	it	lt
 800bc42:	9204      	strlt	r2, [sp, #16]
 800bc44:	7823      	ldrb	r3, [r4, #0]
 800bc46:	2b2e      	cmp	r3, #46	@ 0x2e
 800bc48:	d10a      	bne.n	800bc60 <_svfiprintf_r+0x130>
 800bc4a:	7863      	ldrb	r3, [r4, #1]
 800bc4c:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc4e:	d132      	bne.n	800bcb6 <_svfiprintf_r+0x186>
 800bc50:	9b03      	ldr	r3, [sp, #12]
 800bc52:	1d1a      	adds	r2, r3, #4
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	9203      	str	r2, [sp, #12]
 800bc58:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bc5c:	3402      	adds	r4, #2
 800bc5e:	9305      	str	r3, [sp, #20]
 800bc60:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bd24 <_svfiprintf_r+0x1f4>
 800bc64:	7821      	ldrb	r1, [r4, #0]
 800bc66:	2203      	movs	r2, #3
 800bc68:	4650      	mov	r0, sl
 800bc6a:	f7f4 fab9 	bl	80001e0 <memchr>
 800bc6e:	b138      	cbz	r0, 800bc80 <_svfiprintf_r+0x150>
 800bc70:	9b04      	ldr	r3, [sp, #16]
 800bc72:	eba0 000a 	sub.w	r0, r0, sl
 800bc76:	2240      	movs	r2, #64	@ 0x40
 800bc78:	4082      	lsls	r2, r0
 800bc7a:	4313      	orrs	r3, r2
 800bc7c:	3401      	adds	r4, #1
 800bc7e:	9304      	str	r3, [sp, #16]
 800bc80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc84:	4824      	ldr	r0, [pc, #144]	@ (800bd18 <_svfiprintf_r+0x1e8>)
 800bc86:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bc8a:	2206      	movs	r2, #6
 800bc8c:	f7f4 faa8 	bl	80001e0 <memchr>
 800bc90:	2800      	cmp	r0, #0
 800bc92:	d036      	beq.n	800bd02 <_svfiprintf_r+0x1d2>
 800bc94:	4b21      	ldr	r3, [pc, #132]	@ (800bd1c <_svfiprintf_r+0x1ec>)
 800bc96:	bb1b      	cbnz	r3, 800bce0 <_svfiprintf_r+0x1b0>
 800bc98:	9b03      	ldr	r3, [sp, #12]
 800bc9a:	3307      	adds	r3, #7
 800bc9c:	f023 0307 	bic.w	r3, r3, #7
 800bca0:	3308      	adds	r3, #8
 800bca2:	9303      	str	r3, [sp, #12]
 800bca4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bca6:	4433      	add	r3, r6
 800bca8:	9309      	str	r3, [sp, #36]	@ 0x24
 800bcaa:	e76a      	b.n	800bb82 <_svfiprintf_r+0x52>
 800bcac:	fb0c 3202 	mla	r2, ip, r2, r3
 800bcb0:	460c      	mov	r4, r1
 800bcb2:	2001      	movs	r0, #1
 800bcb4:	e7a8      	b.n	800bc08 <_svfiprintf_r+0xd8>
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	3401      	adds	r4, #1
 800bcba:	9305      	str	r3, [sp, #20]
 800bcbc:	4619      	mov	r1, r3
 800bcbe:	f04f 0c0a 	mov.w	ip, #10
 800bcc2:	4620      	mov	r0, r4
 800bcc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bcc8:	3a30      	subs	r2, #48	@ 0x30
 800bcca:	2a09      	cmp	r2, #9
 800bccc:	d903      	bls.n	800bcd6 <_svfiprintf_r+0x1a6>
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d0c6      	beq.n	800bc60 <_svfiprintf_r+0x130>
 800bcd2:	9105      	str	r1, [sp, #20]
 800bcd4:	e7c4      	b.n	800bc60 <_svfiprintf_r+0x130>
 800bcd6:	fb0c 2101 	mla	r1, ip, r1, r2
 800bcda:	4604      	mov	r4, r0
 800bcdc:	2301      	movs	r3, #1
 800bcde:	e7f0      	b.n	800bcc2 <_svfiprintf_r+0x192>
 800bce0:	ab03      	add	r3, sp, #12
 800bce2:	9300      	str	r3, [sp, #0]
 800bce4:	462a      	mov	r2, r5
 800bce6:	4b0e      	ldr	r3, [pc, #56]	@ (800bd20 <_svfiprintf_r+0x1f0>)
 800bce8:	a904      	add	r1, sp, #16
 800bcea:	4638      	mov	r0, r7
 800bcec:	f3af 8000 	nop.w
 800bcf0:	1c42      	adds	r2, r0, #1
 800bcf2:	4606      	mov	r6, r0
 800bcf4:	d1d6      	bne.n	800bca4 <_svfiprintf_r+0x174>
 800bcf6:	89ab      	ldrh	r3, [r5, #12]
 800bcf8:	065b      	lsls	r3, r3, #25
 800bcfa:	f53f af2d 	bmi.w	800bb58 <_svfiprintf_r+0x28>
 800bcfe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bd00:	e72c      	b.n	800bb5c <_svfiprintf_r+0x2c>
 800bd02:	ab03      	add	r3, sp, #12
 800bd04:	9300      	str	r3, [sp, #0]
 800bd06:	462a      	mov	r2, r5
 800bd08:	4b05      	ldr	r3, [pc, #20]	@ (800bd20 <_svfiprintf_r+0x1f0>)
 800bd0a:	a904      	add	r1, sp, #16
 800bd0c:	4638      	mov	r0, r7
 800bd0e:	f000 f879 	bl	800be04 <_printf_i>
 800bd12:	e7ed      	b.n	800bcf0 <_svfiprintf_r+0x1c0>
 800bd14:	0800c164 	.word	0x0800c164
 800bd18:	0800c16e 	.word	0x0800c16e
 800bd1c:	00000000 	.word	0x00000000
 800bd20:	0800ba79 	.word	0x0800ba79
 800bd24:	0800c16a 	.word	0x0800c16a

0800bd28 <_printf_common>:
 800bd28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd2c:	4616      	mov	r6, r2
 800bd2e:	4698      	mov	r8, r3
 800bd30:	688a      	ldr	r2, [r1, #8]
 800bd32:	690b      	ldr	r3, [r1, #16]
 800bd34:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bd38:	4293      	cmp	r3, r2
 800bd3a:	bfb8      	it	lt
 800bd3c:	4613      	movlt	r3, r2
 800bd3e:	6033      	str	r3, [r6, #0]
 800bd40:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bd44:	4607      	mov	r7, r0
 800bd46:	460c      	mov	r4, r1
 800bd48:	b10a      	cbz	r2, 800bd4e <_printf_common+0x26>
 800bd4a:	3301      	adds	r3, #1
 800bd4c:	6033      	str	r3, [r6, #0]
 800bd4e:	6823      	ldr	r3, [r4, #0]
 800bd50:	0699      	lsls	r1, r3, #26
 800bd52:	bf42      	ittt	mi
 800bd54:	6833      	ldrmi	r3, [r6, #0]
 800bd56:	3302      	addmi	r3, #2
 800bd58:	6033      	strmi	r3, [r6, #0]
 800bd5a:	6825      	ldr	r5, [r4, #0]
 800bd5c:	f015 0506 	ands.w	r5, r5, #6
 800bd60:	d106      	bne.n	800bd70 <_printf_common+0x48>
 800bd62:	f104 0a19 	add.w	sl, r4, #25
 800bd66:	68e3      	ldr	r3, [r4, #12]
 800bd68:	6832      	ldr	r2, [r6, #0]
 800bd6a:	1a9b      	subs	r3, r3, r2
 800bd6c:	42ab      	cmp	r3, r5
 800bd6e:	dc26      	bgt.n	800bdbe <_printf_common+0x96>
 800bd70:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bd74:	6822      	ldr	r2, [r4, #0]
 800bd76:	3b00      	subs	r3, #0
 800bd78:	bf18      	it	ne
 800bd7a:	2301      	movne	r3, #1
 800bd7c:	0692      	lsls	r2, r2, #26
 800bd7e:	d42b      	bmi.n	800bdd8 <_printf_common+0xb0>
 800bd80:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bd84:	4641      	mov	r1, r8
 800bd86:	4638      	mov	r0, r7
 800bd88:	47c8      	blx	r9
 800bd8a:	3001      	adds	r0, #1
 800bd8c:	d01e      	beq.n	800bdcc <_printf_common+0xa4>
 800bd8e:	6823      	ldr	r3, [r4, #0]
 800bd90:	6922      	ldr	r2, [r4, #16]
 800bd92:	f003 0306 	and.w	r3, r3, #6
 800bd96:	2b04      	cmp	r3, #4
 800bd98:	bf02      	ittt	eq
 800bd9a:	68e5      	ldreq	r5, [r4, #12]
 800bd9c:	6833      	ldreq	r3, [r6, #0]
 800bd9e:	1aed      	subeq	r5, r5, r3
 800bda0:	68a3      	ldr	r3, [r4, #8]
 800bda2:	bf0c      	ite	eq
 800bda4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bda8:	2500      	movne	r5, #0
 800bdaa:	4293      	cmp	r3, r2
 800bdac:	bfc4      	itt	gt
 800bdae:	1a9b      	subgt	r3, r3, r2
 800bdb0:	18ed      	addgt	r5, r5, r3
 800bdb2:	2600      	movs	r6, #0
 800bdb4:	341a      	adds	r4, #26
 800bdb6:	42b5      	cmp	r5, r6
 800bdb8:	d11a      	bne.n	800bdf0 <_printf_common+0xc8>
 800bdba:	2000      	movs	r0, #0
 800bdbc:	e008      	b.n	800bdd0 <_printf_common+0xa8>
 800bdbe:	2301      	movs	r3, #1
 800bdc0:	4652      	mov	r2, sl
 800bdc2:	4641      	mov	r1, r8
 800bdc4:	4638      	mov	r0, r7
 800bdc6:	47c8      	blx	r9
 800bdc8:	3001      	adds	r0, #1
 800bdca:	d103      	bne.n	800bdd4 <_printf_common+0xac>
 800bdcc:	f04f 30ff 	mov.w	r0, #4294967295
 800bdd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdd4:	3501      	adds	r5, #1
 800bdd6:	e7c6      	b.n	800bd66 <_printf_common+0x3e>
 800bdd8:	18e1      	adds	r1, r4, r3
 800bdda:	1c5a      	adds	r2, r3, #1
 800bddc:	2030      	movs	r0, #48	@ 0x30
 800bdde:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bde2:	4422      	add	r2, r4
 800bde4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bde8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bdec:	3302      	adds	r3, #2
 800bdee:	e7c7      	b.n	800bd80 <_printf_common+0x58>
 800bdf0:	2301      	movs	r3, #1
 800bdf2:	4622      	mov	r2, r4
 800bdf4:	4641      	mov	r1, r8
 800bdf6:	4638      	mov	r0, r7
 800bdf8:	47c8      	blx	r9
 800bdfa:	3001      	adds	r0, #1
 800bdfc:	d0e6      	beq.n	800bdcc <_printf_common+0xa4>
 800bdfe:	3601      	adds	r6, #1
 800be00:	e7d9      	b.n	800bdb6 <_printf_common+0x8e>
	...

0800be04 <_printf_i>:
 800be04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800be08:	7e0f      	ldrb	r7, [r1, #24]
 800be0a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800be0c:	2f78      	cmp	r7, #120	@ 0x78
 800be0e:	4691      	mov	r9, r2
 800be10:	4680      	mov	r8, r0
 800be12:	460c      	mov	r4, r1
 800be14:	469a      	mov	sl, r3
 800be16:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800be1a:	d807      	bhi.n	800be2c <_printf_i+0x28>
 800be1c:	2f62      	cmp	r7, #98	@ 0x62
 800be1e:	d80a      	bhi.n	800be36 <_printf_i+0x32>
 800be20:	2f00      	cmp	r7, #0
 800be22:	f000 80d1 	beq.w	800bfc8 <_printf_i+0x1c4>
 800be26:	2f58      	cmp	r7, #88	@ 0x58
 800be28:	f000 80b8 	beq.w	800bf9c <_printf_i+0x198>
 800be2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800be30:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800be34:	e03a      	b.n	800beac <_printf_i+0xa8>
 800be36:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800be3a:	2b15      	cmp	r3, #21
 800be3c:	d8f6      	bhi.n	800be2c <_printf_i+0x28>
 800be3e:	a101      	add	r1, pc, #4	@ (adr r1, 800be44 <_printf_i+0x40>)
 800be40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800be44:	0800be9d 	.word	0x0800be9d
 800be48:	0800beb1 	.word	0x0800beb1
 800be4c:	0800be2d 	.word	0x0800be2d
 800be50:	0800be2d 	.word	0x0800be2d
 800be54:	0800be2d 	.word	0x0800be2d
 800be58:	0800be2d 	.word	0x0800be2d
 800be5c:	0800beb1 	.word	0x0800beb1
 800be60:	0800be2d 	.word	0x0800be2d
 800be64:	0800be2d 	.word	0x0800be2d
 800be68:	0800be2d 	.word	0x0800be2d
 800be6c:	0800be2d 	.word	0x0800be2d
 800be70:	0800bfaf 	.word	0x0800bfaf
 800be74:	0800bedb 	.word	0x0800bedb
 800be78:	0800bf69 	.word	0x0800bf69
 800be7c:	0800be2d 	.word	0x0800be2d
 800be80:	0800be2d 	.word	0x0800be2d
 800be84:	0800bfd1 	.word	0x0800bfd1
 800be88:	0800be2d 	.word	0x0800be2d
 800be8c:	0800bedb 	.word	0x0800bedb
 800be90:	0800be2d 	.word	0x0800be2d
 800be94:	0800be2d 	.word	0x0800be2d
 800be98:	0800bf71 	.word	0x0800bf71
 800be9c:	6833      	ldr	r3, [r6, #0]
 800be9e:	1d1a      	adds	r2, r3, #4
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	6032      	str	r2, [r6, #0]
 800bea4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bea8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800beac:	2301      	movs	r3, #1
 800beae:	e09c      	b.n	800bfea <_printf_i+0x1e6>
 800beb0:	6833      	ldr	r3, [r6, #0]
 800beb2:	6820      	ldr	r0, [r4, #0]
 800beb4:	1d19      	adds	r1, r3, #4
 800beb6:	6031      	str	r1, [r6, #0]
 800beb8:	0606      	lsls	r6, r0, #24
 800beba:	d501      	bpl.n	800bec0 <_printf_i+0xbc>
 800bebc:	681d      	ldr	r5, [r3, #0]
 800bebe:	e003      	b.n	800bec8 <_printf_i+0xc4>
 800bec0:	0645      	lsls	r5, r0, #25
 800bec2:	d5fb      	bpl.n	800bebc <_printf_i+0xb8>
 800bec4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bec8:	2d00      	cmp	r5, #0
 800beca:	da03      	bge.n	800bed4 <_printf_i+0xd0>
 800becc:	232d      	movs	r3, #45	@ 0x2d
 800bece:	426d      	negs	r5, r5
 800bed0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bed4:	4858      	ldr	r0, [pc, #352]	@ (800c038 <_printf_i+0x234>)
 800bed6:	230a      	movs	r3, #10
 800bed8:	e011      	b.n	800befe <_printf_i+0xfa>
 800beda:	6821      	ldr	r1, [r4, #0]
 800bedc:	6833      	ldr	r3, [r6, #0]
 800bede:	0608      	lsls	r0, r1, #24
 800bee0:	f853 5b04 	ldr.w	r5, [r3], #4
 800bee4:	d402      	bmi.n	800beec <_printf_i+0xe8>
 800bee6:	0649      	lsls	r1, r1, #25
 800bee8:	bf48      	it	mi
 800beea:	b2ad      	uxthmi	r5, r5
 800beec:	2f6f      	cmp	r7, #111	@ 0x6f
 800beee:	4852      	ldr	r0, [pc, #328]	@ (800c038 <_printf_i+0x234>)
 800bef0:	6033      	str	r3, [r6, #0]
 800bef2:	bf14      	ite	ne
 800bef4:	230a      	movne	r3, #10
 800bef6:	2308      	moveq	r3, #8
 800bef8:	2100      	movs	r1, #0
 800befa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800befe:	6866      	ldr	r6, [r4, #4]
 800bf00:	60a6      	str	r6, [r4, #8]
 800bf02:	2e00      	cmp	r6, #0
 800bf04:	db05      	blt.n	800bf12 <_printf_i+0x10e>
 800bf06:	6821      	ldr	r1, [r4, #0]
 800bf08:	432e      	orrs	r6, r5
 800bf0a:	f021 0104 	bic.w	r1, r1, #4
 800bf0e:	6021      	str	r1, [r4, #0]
 800bf10:	d04b      	beq.n	800bfaa <_printf_i+0x1a6>
 800bf12:	4616      	mov	r6, r2
 800bf14:	fbb5 f1f3 	udiv	r1, r5, r3
 800bf18:	fb03 5711 	mls	r7, r3, r1, r5
 800bf1c:	5dc7      	ldrb	r7, [r0, r7]
 800bf1e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bf22:	462f      	mov	r7, r5
 800bf24:	42bb      	cmp	r3, r7
 800bf26:	460d      	mov	r5, r1
 800bf28:	d9f4      	bls.n	800bf14 <_printf_i+0x110>
 800bf2a:	2b08      	cmp	r3, #8
 800bf2c:	d10b      	bne.n	800bf46 <_printf_i+0x142>
 800bf2e:	6823      	ldr	r3, [r4, #0]
 800bf30:	07df      	lsls	r7, r3, #31
 800bf32:	d508      	bpl.n	800bf46 <_printf_i+0x142>
 800bf34:	6923      	ldr	r3, [r4, #16]
 800bf36:	6861      	ldr	r1, [r4, #4]
 800bf38:	4299      	cmp	r1, r3
 800bf3a:	bfde      	ittt	le
 800bf3c:	2330      	movle	r3, #48	@ 0x30
 800bf3e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bf42:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bf46:	1b92      	subs	r2, r2, r6
 800bf48:	6122      	str	r2, [r4, #16]
 800bf4a:	f8cd a000 	str.w	sl, [sp]
 800bf4e:	464b      	mov	r3, r9
 800bf50:	aa03      	add	r2, sp, #12
 800bf52:	4621      	mov	r1, r4
 800bf54:	4640      	mov	r0, r8
 800bf56:	f7ff fee7 	bl	800bd28 <_printf_common>
 800bf5a:	3001      	adds	r0, #1
 800bf5c:	d14a      	bne.n	800bff4 <_printf_i+0x1f0>
 800bf5e:	f04f 30ff 	mov.w	r0, #4294967295
 800bf62:	b004      	add	sp, #16
 800bf64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf68:	6823      	ldr	r3, [r4, #0]
 800bf6a:	f043 0320 	orr.w	r3, r3, #32
 800bf6e:	6023      	str	r3, [r4, #0]
 800bf70:	4832      	ldr	r0, [pc, #200]	@ (800c03c <_printf_i+0x238>)
 800bf72:	2778      	movs	r7, #120	@ 0x78
 800bf74:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bf78:	6823      	ldr	r3, [r4, #0]
 800bf7a:	6831      	ldr	r1, [r6, #0]
 800bf7c:	061f      	lsls	r7, r3, #24
 800bf7e:	f851 5b04 	ldr.w	r5, [r1], #4
 800bf82:	d402      	bmi.n	800bf8a <_printf_i+0x186>
 800bf84:	065f      	lsls	r7, r3, #25
 800bf86:	bf48      	it	mi
 800bf88:	b2ad      	uxthmi	r5, r5
 800bf8a:	6031      	str	r1, [r6, #0]
 800bf8c:	07d9      	lsls	r1, r3, #31
 800bf8e:	bf44      	itt	mi
 800bf90:	f043 0320 	orrmi.w	r3, r3, #32
 800bf94:	6023      	strmi	r3, [r4, #0]
 800bf96:	b11d      	cbz	r5, 800bfa0 <_printf_i+0x19c>
 800bf98:	2310      	movs	r3, #16
 800bf9a:	e7ad      	b.n	800bef8 <_printf_i+0xf4>
 800bf9c:	4826      	ldr	r0, [pc, #152]	@ (800c038 <_printf_i+0x234>)
 800bf9e:	e7e9      	b.n	800bf74 <_printf_i+0x170>
 800bfa0:	6823      	ldr	r3, [r4, #0]
 800bfa2:	f023 0320 	bic.w	r3, r3, #32
 800bfa6:	6023      	str	r3, [r4, #0]
 800bfa8:	e7f6      	b.n	800bf98 <_printf_i+0x194>
 800bfaa:	4616      	mov	r6, r2
 800bfac:	e7bd      	b.n	800bf2a <_printf_i+0x126>
 800bfae:	6833      	ldr	r3, [r6, #0]
 800bfb0:	6825      	ldr	r5, [r4, #0]
 800bfb2:	6961      	ldr	r1, [r4, #20]
 800bfb4:	1d18      	adds	r0, r3, #4
 800bfb6:	6030      	str	r0, [r6, #0]
 800bfb8:	062e      	lsls	r6, r5, #24
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	d501      	bpl.n	800bfc2 <_printf_i+0x1be>
 800bfbe:	6019      	str	r1, [r3, #0]
 800bfc0:	e002      	b.n	800bfc8 <_printf_i+0x1c4>
 800bfc2:	0668      	lsls	r0, r5, #25
 800bfc4:	d5fb      	bpl.n	800bfbe <_printf_i+0x1ba>
 800bfc6:	8019      	strh	r1, [r3, #0]
 800bfc8:	2300      	movs	r3, #0
 800bfca:	6123      	str	r3, [r4, #16]
 800bfcc:	4616      	mov	r6, r2
 800bfce:	e7bc      	b.n	800bf4a <_printf_i+0x146>
 800bfd0:	6833      	ldr	r3, [r6, #0]
 800bfd2:	1d1a      	adds	r2, r3, #4
 800bfd4:	6032      	str	r2, [r6, #0]
 800bfd6:	681e      	ldr	r6, [r3, #0]
 800bfd8:	6862      	ldr	r2, [r4, #4]
 800bfda:	2100      	movs	r1, #0
 800bfdc:	4630      	mov	r0, r6
 800bfde:	f7f4 f8ff 	bl	80001e0 <memchr>
 800bfe2:	b108      	cbz	r0, 800bfe8 <_printf_i+0x1e4>
 800bfe4:	1b80      	subs	r0, r0, r6
 800bfe6:	6060      	str	r0, [r4, #4]
 800bfe8:	6863      	ldr	r3, [r4, #4]
 800bfea:	6123      	str	r3, [r4, #16]
 800bfec:	2300      	movs	r3, #0
 800bfee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bff2:	e7aa      	b.n	800bf4a <_printf_i+0x146>
 800bff4:	6923      	ldr	r3, [r4, #16]
 800bff6:	4632      	mov	r2, r6
 800bff8:	4649      	mov	r1, r9
 800bffa:	4640      	mov	r0, r8
 800bffc:	47d0      	blx	sl
 800bffe:	3001      	adds	r0, #1
 800c000:	d0ad      	beq.n	800bf5e <_printf_i+0x15a>
 800c002:	6823      	ldr	r3, [r4, #0]
 800c004:	079b      	lsls	r3, r3, #30
 800c006:	d413      	bmi.n	800c030 <_printf_i+0x22c>
 800c008:	68e0      	ldr	r0, [r4, #12]
 800c00a:	9b03      	ldr	r3, [sp, #12]
 800c00c:	4298      	cmp	r0, r3
 800c00e:	bfb8      	it	lt
 800c010:	4618      	movlt	r0, r3
 800c012:	e7a6      	b.n	800bf62 <_printf_i+0x15e>
 800c014:	2301      	movs	r3, #1
 800c016:	4632      	mov	r2, r6
 800c018:	4649      	mov	r1, r9
 800c01a:	4640      	mov	r0, r8
 800c01c:	47d0      	blx	sl
 800c01e:	3001      	adds	r0, #1
 800c020:	d09d      	beq.n	800bf5e <_printf_i+0x15a>
 800c022:	3501      	adds	r5, #1
 800c024:	68e3      	ldr	r3, [r4, #12]
 800c026:	9903      	ldr	r1, [sp, #12]
 800c028:	1a5b      	subs	r3, r3, r1
 800c02a:	42ab      	cmp	r3, r5
 800c02c:	dcf2      	bgt.n	800c014 <_printf_i+0x210>
 800c02e:	e7eb      	b.n	800c008 <_printf_i+0x204>
 800c030:	2500      	movs	r5, #0
 800c032:	f104 0619 	add.w	r6, r4, #25
 800c036:	e7f5      	b.n	800c024 <_printf_i+0x220>
 800c038:	0800c175 	.word	0x0800c175
 800c03c:	0800c186 	.word	0x0800c186

0800c040 <memmove>:
 800c040:	4288      	cmp	r0, r1
 800c042:	b510      	push	{r4, lr}
 800c044:	eb01 0402 	add.w	r4, r1, r2
 800c048:	d902      	bls.n	800c050 <memmove+0x10>
 800c04a:	4284      	cmp	r4, r0
 800c04c:	4623      	mov	r3, r4
 800c04e:	d807      	bhi.n	800c060 <memmove+0x20>
 800c050:	1e43      	subs	r3, r0, #1
 800c052:	42a1      	cmp	r1, r4
 800c054:	d008      	beq.n	800c068 <memmove+0x28>
 800c056:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c05a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c05e:	e7f8      	b.n	800c052 <memmove+0x12>
 800c060:	4402      	add	r2, r0
 800c062:	4601      	mov	r1, r0
 800c064:	428a      	cmp	r2, r1
 800c066:	d100      	bne.n	800c06a <memmove+0x2a>
 800c068:	bd10      	pop	{r4, pc}
 800c06a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c06e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c072:	e7f7      	b.n	800c064 <memmove+0x24>

0800c074 <memcpy>:
 800c074:	440a      	add	r2, r1
 800c076:	4291      	cmp	r1, r2
 800c078:	f100 33ff 	add.w	r3, r0, #4294967295
 800c07c:	d100      	bne.n	800c080 <memcpy+0xc>
 800c07e:	4770      	bx	lr
 800c080:	b510      	push	{r4, lr}
 800c082:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c086:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c08a:	4291      	cmp	r1, r2
 800c08c:	d1f9      	bne.n	800c082 <memcpy+0xe>
 800c08e:	bd10      	pop	{r4, pc}

0800c090 <_realloc_r>:
 800c090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c094:	4607      	mov	r7, r0
 800c096:	4614      	mov	r4, r2
 800c098:	460d      	mov	r5, r1
 800c09a:	b921      	cbnz	r1, 800c0a6 <_realloc_r+0x16>
 800c09c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c0a0:	4611      	mov	r1, r2
 800c0a2:	f7ff bbad 	b.w	800b800 <_malloc_r>
 800c0a6:	b92a      	cbnz	r2, 800c0b4 <_realloc_r+0x24>
 800c0a8:	f7ff fc9c 	bl	800b9e4 <_free_r>
 800c0ac:	4625      	mov	r5, r4
 800c0ae:	4628      	mov	r0, r5
 800c0b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0b4:	f000 f81a 	bl	800c0ec <_malloc_usable_size_r>
 800c0b8:	4284      	cmp	r4, r0
 800c0ba:	4606      	mov	r6, r0
 800c0bc:	d802      	bhi.n	800c0c4 <_realloc_r+0x34>
 800c0be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c0c2:	d8f4      	bhi.n	800c0ae <_realloc_r+0x1e>
 800c0c4:	4621      	mov	r1, r4
 800c0c6:	4638      	mov	r0, r7
 800c0c8:	f7ff fb9a 	bl	800b800 <_malloc_r>
 800c0cc:	4680      	mov	r8, r0
 800c0ce:	b908      	cbnz	r0, 800c0d4 <_realloc_r+0x44>
 800c0d0:	4645      	mov	r5, r8
 800c0d2:	e7ec      	b.n	800c0ae <_realloc_r+0x1e>
 800c0d4:	42b4      	cmp	r4, r6
 800c0d6:	4622      	mov	r2, r4
 800c0d8:	4629      	mov	r1, r5
 800c0da:	bf28      	it	cs
 800c0dc:	4632      	movcs	r2, r6
 800c0de:	f7ff ffc9 	bl	800c074 <memcpy>
 800c0e2:	4629      	mov	r1, r5
 800c0e4:	4638      	mov	r0, r7
 800c0e6:	f7ff fc7d 	bl	800b9e4 <_free_r>
 800c0ea:	e7f1      	b.n	800c0d0 <_realloc_r+0x40>

0800c0ec <_malloc_usable_size_r>:
 800c0ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c0f0:	1f18      	subs	r0, r3, #4
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	bfbc      	itt	lt
 800c0f6:	580b      	ldrlt	r3, [r1, r0]
 800c0f8:	18c0      	addlt	r0, r0, r3
 800c0fa:	4770      	bx	lr

0800c0fc <_init>:
 800c0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0fe:	bf00      	nop
 800c100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c102:	bc08      	pop	{r3}
 800c104:	469e      	mov	lr, r3
 800c106:	4770      	bx	lr

0800c108 <_fini>:
 800c108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c10a:	bf00      	nop
 800c10c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c10e:	bc08      	pop	{r3}
 800c110:	469e      	mov	lr, r3
 800c112:	4770      	bx	lr
